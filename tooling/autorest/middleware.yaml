---
directive:
  - from: openapi-document
    where: $.paths.*.get.responses
    transform: >
      Object.entries($)
        .filter(([key]) => key !== '200')
        .forEach(([, value]) => value['x-ms-error-response'] = true)
    reason: >
      throw errors even for explained response with not 200 code
      https://github.com/Azure/autorest.typescript/issues/463#issuecomment-524203041

  - from: openapi-document
    where: $.components.schemas.Activity.properties.payload
    transform: >
      if ($doc.info.title === 'middleware') return $;
      const activities = $.oneOf.map(({ $ref }) => $ref.split('/').at(-1))
        .map(name => $doc.components.schemas[name]);
      return {
        "description": "A mix of all activity types.",
        "type": "object",
        "properties": Object.assign({}, ...activities.map(a => a.properties)),
      };
    reason: >
      `oneOf` not supported
      https://github.com/Azure/autorest/issues/4118

  - from: openapi-document
    where: $.paths.*.get.responses.200.content.application/json.schema.allOf^
    transform: $.type ??= 'object'
    reason: >
      The schema 'paths·ulsf14·v2-aex141·get·responses·200·content·application-json·schema' with
      an undefined type and 'allOf'/'anyOf'/'oneOf' is a bit ambiguous. This has been auto-corrected
      to 'type:object'
      https://github.com/Azure/autorest/issues/4118

  - from: openapi-document
    where: $.paths.*.get.parameters.0.schema.oneOf^
    transform: $.type ??= 'string'
    reason: >
      'paths·1159w94·v3-keyblocks-hash_or_kbi·get·responses·200·content·application-json·schema'
      'paths·1159w94·v3-keyblocks-hash_or_kbi-microblocks·get·responses·200·content·application-json·schema'
      The schema <path> with an undefined
      type and 'allOf'/'anyOf'/'oneOf' is a bit ambiguous. This has been auto-corrected
      to 'type:object'
      https://github.com/Azure/autorest/issues/4118

  - from: openapi-document
    where: $..properties[time,micro_time,approximate_activation_time,approximate_expire_time,register_time,block_time,activation_time,creation_time,microtime,last_updated_time]
    transform: $.format = 'unixtime'
    reason: >
      Convert time as milliseconds to dates
      https://github.com/aeternity/ae_mdw/issues/1891

  - from: openapi-document
    where: $.servers
    transform: $ = []
    reason: remove a server with /mdw/v3 url

  - from: openapi-document
    where: $.paths.*.*.parameters[?(@.$ref)]
    transform: >
      const relativePath = $.$ref.replace(/^#\//, '').split('/');
      return relativePath.reduce((o, p) => o[p], $doc);
    reason: keep parameters in method options instead instance options

  - from: openapi-document
    where: $.paths
    transform: >
      if ($doc.info.title === 'middleware') return $;
      const apiPrefix = '/v3';
      Object.keys($).forEach(key => {
        $[apiPrefix + key] = $[key];
        delete $[key];
      });
    reason: to don't add /v3 prefix to $host parameter

  - from: openapi-document
    where: $..[?(@.$ref && @.deprecated)]
    transform: delete $.deprecated
    reason: >
      warning | IgnoredPropertyNextToRef | Semantic violation: Sibling values alongside $ref will be
      ignored. See https://github.com/Azure/autorest/blob/main/docs/openapi/howto/$ref-siblings.md
      for allowed values (components > schemas > OracleTx > properties > tx_hash)
      keys: [ 'deprecated' ]

  - from: openapi-document
    where: $..[?(@.$ref || @.pattern || @.oneOf)]
    transform: >
      if ($doc.info.title === 'middleware') return $;
      function resolveRef(ref) {
        if (typeof ref !== 'string') return;
        const relativePath = ref.replace(/^#\//, '').split('/');
        return relativePath.reduce((o, p) => o[p], $doc);
      }
      function getType(node) {
        node = resolveRef(node.$ref) ?? node;
        if (node.type === 'integer') return 'number';
        if (node.type !== 'string') return;
        const { pattern } = node;
        if (pattern === '^\\w+\\.chain$') return 'name';
        if (!pattern || pattern.includes('|') || pattern[0] !== '^' || pattern[3] !== '_') return;
        return pattern.slice(1, 3);
      }
      let types = getType($) ?? $.oneOf?.map(getType);
      if (!Array.isArray(types)) types = [types];
      types = types.filter(a => a);
      if (types.some(t => t.length == 2 || t === 'name')) {
        if (!$.$ref) $.type ??= 'string';
        $.description = ($.description ?? resolveRef($.$ref)?.description ?? '')
          + `__sdk__${types.join()}__sdk__`;
      }
    reason: Add supported string prefixes to description

  - from: openapi-document
    where: $.paths.*.*.parameters[?(@.schema)]
    transform: >
      if ($doc.info.title === 'middleware') return $;
      if ($.schema.description == null) return $;
      $.description = ($.description ?? '') + ' ' + $.schema.description;
    reason: Bubble description from schema to parameter, need to handle custom prefixed types

  - from: openapi-document
    where: $.info.title
    set: middleware
    reason: the whole SDK already about aeternity

version: ^3.7.1
use-extension:
  '@autorest/typescript': ^6.0.23
  '@autorest/modelerfour': ^4.27.0
# TODO: switch to middleware-openapi.yaml after releasing middleware with https://github.com/aeternity/ae_mdw/pull/1873
input-file: middleware-openapi-temp.yaml
output-folder: ../../src/apis/middleware
source-code-folder-path: .
generator: typescript
generate-metadata: false
add-credentials: false
modelerfour:
  seal-single-value-enum-by-default: false
