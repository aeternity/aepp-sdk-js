---
directive:
  - from: openapi-document
    where: $.paths.*.get.responses
    transform: >
      Object.entries($)
        .filter(([key]) => key !== '200')
        .forEach(([, value]) => value['x-ms-error-response'] = true)
    reason: >
      throw errors even for explained response with not 200 code
      https://github.com/Azure/autorest.typescript/issues/463#issuecomment-524203041

  - from: openapi-document
    where: $.components.schemas.Activity.properties.payload
    transform: >
      if ($doc.info.title === 'middleware') return $;
      const activities = $.oneOf.map(({ $ref }) => $ref.split('/').at(-1))
        .map(name => $doc.components.schemas[name]);
      return {
        "description": "A mix of all activity types.",
        "type": "object",
        "properties": Object.assign({}, ...activities.map(a => a.properties)),
      };
    reason: >
      `oneOf` not supported
      https://github.com/Azure/autorest/issues/4118

  - from: openapi-document
    where: $.paths.*.get.responses.200.content.application/json.schema.allOf^
    transform: $.type ??= 'object'
    reason: >
      The schema 'paths·ulsf14·v2-aex141·get·responses·200·content·application-json·schema' with
      an undefined type and 'allOf'/'anyOf'/'oneOf' is a bit ambiguous. This has been auto-corrected
      to 'type:object'
      https://github.com/Azure/autorest/issues/4118

  - from: openapi-document
    where: $.paths.*.get.parameters.0.schema.oneOf^
    transform: $.type ??= 'string'
    reason: >
      'paths·1159w94·v3-keyblocks-hash_or_kbi·get·responses·200·content·application-json·schema'
      'paths·1159w94·v3-keyblocks-hash_or_kbi-microblocks·get·responses·200·content·application-json·schema'
      The schema <path> with an undefined
      type and 'allOf'/'anyOf'/'oneOf' is a bit ambiguous. This has been auto-corrected
      to 'type:object'
      https://github.com/Azure/autorest/issues/4118

  - from: openapi-document
    where: $.paths['/aex141/{contractId}/transfers'].get.parameters.3.in
    set: query
    reason: >
      Schema violation: must be equal to one of the allowed values
      (paths > /v3/aex141/{contractId}/transfers > get > parameters > 3 > required)
      allowedValues: true
      https://github.com/aeternity/ae_mdw/pull/1844

  - from: openapi-document
    where: $.paths['/aex141/{contractId}/transfers'].get.parameters.4.in
    set: query
    reason: >
      Schema violation: must be equal to one of the allowed values
      (paths > /v3/aex141/{contractId}/transfers > get > parameters > 4 > required)
      allowedValues: true
      https://github.com/aeternity/ae_mdw/pull/1844

  - from: openapi-document
    where: $.paths['/dex/{contract_id}/swaps'].get.parameters.1
    transform: >
      $.schema = { type: $.type, example: $.example };
      delete $.type;
      delete $.example;
    reason: >
      Schema violation: must NOT have additional properties
      (paths > /v3/dex/{contract_id}/swaps > get > parameters > 1)
      additionalProperty: type
      https://github.com/aeternity/ae_mdw/pull/1844

  - from: openapi-document
    where: $.paths['/accounts/{account_id}/dex/swaps'].get.parameters.1
    transform: >
      $.schema = { type: $.type, example: $.example };
      delete $.type;
      delete $.example;
    reason: >
      Schema violation: must NOT have additional properties
      (paths > /v3/accounts/{account_id}/dex/swaps > get > parameters > 1)
      additionalProperty: type
      https://github.com/aeternity/ae_mdw/pull/1844

  - from: openapi-document
    where: $.components.schemas.NameTx
    transform: $.type = 'object'
    reason: >
      The schema 'NameTx' with an undefined type and declared properties is a bit ambiguous. This
      has been auto-corrected to 'type:object'
      https://github.com/aeternity/ae_mdw/pull/1849

  - from: openapi-document
    where: $.components.schemas.OracleTx
    transform: $.type = 'object'
    reason: >
      The schema 'OracleTx' with an undefined type and declared properties is a bit ambiguous. This
      has been auto-corrected to 'type:object'
      https://github.com/aeternity/ae_mdw/pull/1849

  - from: openapi-document
    where: $.components.schemas.Name.properties.revoke
    transform: delete $.example
    reason: >
      Semantic violation: Sibling values alongside $ref will be ignored. See
      https://github.com/Azure/autorest/blob/main/docs/openapi/howto/$ref-siblings.md for allowed
      values (components > schemas > Name > properties > revoke)
      keys: [ 'example' ]
      https://github.com/aeternity/ae_mdw/pull/1849

  - from: openapi-document
    where: $.servers
    transform: $ = []
    reason: remove a server with /mdw/v3 url

  - from: openapi-document
    where: $.paths
    transform: >
      if ($doc.info.title === 'middleware') return $;
      const apiPrefix = '/v3';
      Object.keys($).forEach(key => {
        $[apiPrefix + key] = $[key];
        delete $[key];
      });
    reason: to don't add /v3 prefix to $host parameter

  - from: openapi-document
    where: $.info.title
    set: middleware
    reason: the whole SDK already about aeternity

version: ^3.7.1
use-extension:
  '@autorest/typescript': ^6.0.23
  '@autorest/modelerfour': ^4.27.0
input-file: middleware-openapi.yaml
output-folder: ../../src/apis/middleware
source-code-folder-path: .
generator: typescript
generate-metadata: false
add-credentials: false
modelerfour:
  seal-single-value-enum-by-default: false
