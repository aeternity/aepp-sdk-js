{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":""},{"location":"#direct-script-include-via-cdn","title":"Direct <code>&lt;script&gt;</code> include via CDN","text":"<p>In case you're not using any JS bundling/compilation technique, the SDK can also be loaded with the traditional <code>&lt;script&gt;</code> tag, as follows:</p>"},{"location":"#latest-sdk-version","title":"Latest SDK version","text":"<pre><code>&lt;script src=\"https://unpkg.com/@aeternity/aepp-sdk/dist/aepp-sdk.browser-script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"#specific-sdk-version","title":"Specific SDK version","text":"<p><pre><code>&lt;script src=\"https://unpkg.com/@aeternity/aepp-sdk@VERSION/dist/aepp-sdk.browser-script.js\"&gt;&lt;/script&gt;\n</code></pre> ...where <code>VERSION</code> is the version number of the SDK you want to use (eg. <code>13.1.0</code>).</p>"},{"location":"#browser-script-tag","title":"Browser <code>&lt;script&gt;</code> tag","text":"<p>The bundle will assign the SDK to a global variable called <code>Aeternity</code> that makes all functionalities of the SDK accessible.</p> <p>Usage:</p> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- include latest SDK version --&gt;\n  &lt;script src=\"https://unpkg.com/@aeternity/aepp-sdk/dist/aepp-sdk.browser-script.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    const { AeSdk, Node } = Aeternity\n\n    const node = new Node('https://testnet.aeternity.io')\n    const aeSdk = new AeSdk({\n      nodes: [{ name: 'testnet', instance: node }]\n    })\n    aeSdk.getHeight().then(height =&gt; {\n      console.log(\"Current Block Height:\" + height)\n    })\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"#npm","title":"NPM","text":""},{"location":"#latest-release","title":"Latest Release","text":"<pre><code>npm i @aeternity/aepp-sdk\n</code></pre>"},{"location":"#pre-release","title":"Pre Release","text":"<p>To install a Pre-Release (latest <code>beta</code> or <code>alpha</code> version) you have to install the package appending the <code>@next</code> tag reference. <pre><code>npm i @aeternity/aepp-sdk@next\n</code></pre></p>"},{"location":"#specific-github-branch","title":"Specific Github Branch","text":"<p>You can also install a version coming from a specific branch. In this case you would install the SDK version of the <code>develop</code> branch. <pre><code>npm i github:aeternity/aepp-sdk-js#develop\n</code></pre></p>"},{"location":"#typescript-projects","title":"TypeScript projects","text":"<p>To work properly, sdk requires to enable <code>allowSyntheticDefaultImports</code> flag and register folder that contains type definitions for third-party packages sdk depends on. This may be done in <code>tsconfig.json</code>: <pre><code>{\n  \"compilerOptions\": {\n    ...\n+   \"typeRoots\": [\n+     \"node_modules/@types\",\n+     \"node_modules/@aeternity/aepp-sdk/src/typings\"\n+   ],\n+   \"allowSyntheticDefaultImports\": true\n  }\n}\n</code></pre> SDK uses modern features available since typescript@4.7. Though SDK is still compatible with typescript@4.1 and above using types generated separately, but these types are less accurate.</p> <p>Ensure that you have <code>strictFunctionTypes</code> option not enabled (as it is in VS code and <code>ts-node</code> by default), otherwise some of SDK types won't work correctly (see #1793).</p>"},{"location":"#vue-cli4","title":"Vue CLI@4","text":"<p>SDK checks are not working correctly because CLI picks both ESM and CJS versions of <code>autorest</code> dependencies. To fix this, you need to specify aliases in <code>vue.config.js</code>. <pre><code>module.exports = {\n  configureWebpack: {\n    resolve: {\n      alias: {\n+       '@azure/core-client': '@azure/core-client/dist-esm/src/index.js',\n+       '@azure/core-rest-pipeline': '@azure/core-rest-pipeline/dist-esm/src/index.js',\n      },\n    },\n  },\n};\n</code></pre></p>"},{"location":"#vue3","title":"Vue@3","text":"<p>Reactivity in Vue@3 based on Proxy class. Proxy is not compatible with private fields of ES classes. AeSdk and Contract classes uses private fields, so if you make an instance of these classes reactive then the app may fail with</p> <p>TypeError: attempted to get private field on non-instance</p> <p>AeSdk and Contract classes doesn\u2019t have a state intended to be tracked using reactivity. Therefore to solve this issue we suggest to avoid making their instances reactive. One of the ways is to use Vue's integrated utilities: shallowRef, shallowReactive. The idea is to make reactive only the root variable, to don't make it reactive in deep. You can find it implementation in the \u00e6pp example.</p>"},{"location":"#command-line-interface-cli","title":"Command Line Interface (CLI)","text":"<p>If you don't need to include specific functionality into your application and just want to use or play around with features the SDK provides you can make use of the \ud83d\udcbb CLI and follow the instructions mentioned there.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file. See standard-version for commit guidelines.</p>"},{"location":"CHANGELOG/#1322-2023-09-20","title":"13.2.2 (2023-09-20)","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>use proper vm version in Ceres (bcaa5cf)</li> <li>aepp,wallet: connect to web-extension if opened over file:/// (da6a025)</li> <li>aepp: use complete type of WalletInfo object (eeba565)</li> <li>contract: don't mark contract as deployed if tx failed (cc4222d)</li> <li>contract: use current nonce in static calls (758bdfc)</li> <li>node: don't retry 500 code responses (696e7db)</li> <li>node: throw clear error message if unsupported protocol (21dfe34)</li> <li>node: uncatchable exception if request failed in queue (dec62a4)</li> <li>typos in error messages and docs (5c84671)</li> </ul>"},{"location":"CHANGELOG/#1321-2023-07-28","title":"13.2.1 (2023-07-28)","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>use <code>Number</code> instead of unary plus for BigInt (33fcfb4)</li> </ul>"},{"location":"CHANGELOG/#1320-2023-07-28","title":"13.2.0 (2023-07-28)","text":""},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>account: add methods to generate delegation signatures (18bdf5a)</li> <li>aepp,wallet: support delegation signatures (fd0dc43)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>account: add implementation of <code>signTypedData</code> in AccountBase (fc6e42f)</li> <li>wallet: don't ask to confirm unsubscription (e2ffc25)</li> <li>wallet: don't require to be subscribed to request addresses (36920b4)</li> <li>wallet: return accounts according to subscription (fa900c0)</li> </ul>"},{"location":"CHANGELOG/#1310-2023-07-07","title":"13.1.0 (2023-07-07)","text":""},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li>account: support signing typed data (e5acdd4)</li> <li>aens: add <code>ensureName</code> helper to check names (f1322b1)</li> <li>aens: support unicode names claim (f837e90)</li> <li>aepp,wallet: support inner transaction signing (725782b)</li> <li>aepp,wallet: support signing typed data (78ce3b2)</li> <li>compiler: add <code>generateAci</code>, <code>generateAciBySourceCode</code> (981bcf2)</li> <li>middleware: generate autorest wrapper (bd08a08)</li> <li>middleware: implement MiddlewareSubscriber (b51b0a3)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li><code>onAccount</code> option in AeSdkMethods (290758b)</li> <li>aens: more accurate name check in <code>isNameValid</code> (b62dcc6)</li> <li>aepp: call <code>onDetected</code> always with <code>newWallet</code> (80d97fa)</li> <li>contract: use fallback account if <code>onAccount</code> not provided (9033cd7)</li> <li>converting proxied options to JSON (efebbd1)</li> <li>provide types in exports field of package.json (dbd19e7)</li> <li>reject prefixes other than provided in isAddressValid (9462add)</li> <li>tx-builder: <code>buildTx</code> produces the same type as <code>unpackTx</code> accepts (d3d6c88)</li> <li>tx-builder: decode tag in entry error message (db0d96f)</li> <li>wallet: emit internal error if something broke while broadcast (332d1b5)</li> <li>wallet: throw reason of internal error to handle it in wallet (276699b)</li> </ul>"},{"location":"CHANGELOG/#1301-2023-04-24","title":"13.0.1 (2023-04-24)","text":""},{"location":"CHANGELOG/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>contract: return type of call/deploy on chain (c493707)</li> <li>export of <code>prefixedAmount</code> helper (9b3f68f)</li> </ul>"},{"location":"CHANGELOG/#1300-2023-04-06","title":"13.0.0 (2023-04-06)","text":""},{"location":"CHANGELOG/#breaking-changes","title":"\u26a0 BREAKING CHANGES","text":"<p>Please check out migration guide, and release notes for the beta release.</p> <ul> <li>aepp: All wallet provided nodes have the same name Specified in <code>name</code> option of <code>connectToWallet</code>.</li> <li>aepp: Select option removed from connectToWallet If you are using <code>connectNode</code> then the current node would always be the same as wallet provides.</li> </ul>"},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li>aepp: call <code>onNetworkChange</code> after connection (5854cae)</li> <li>export Encoded type (026f4c1)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>aepp: use the same name for all nodes provided by wallet (0ece313)</li> <li>chain: reduce /2 number of blocks to wait before throwing timeout (44de66b)</li> <li> <p>contract: add missed <code>sourceCodePath</code> cases (5be4cd9)</p> </li> <li> <p>aepp: remove select option in connectToWallet (adf9c3e)</p> </li> </ul>"},{"location":"CHANGELOG/#1300-beta0-2023-03-01","title":"13.0.0-beta.0 (2023-03-01)","text":""},{"location":"CHANGELOG/#breaking-changes_1","title":"\u26a0 BREAKING CHANGES","text":""},{"location":"CHANGELOG/#wallet","title":"Wallet","text":"<ul> <li><code>onSign</code>, <code>onMessageSign</code> callbacks were removed on the wallet side</li> </ul>"},{"location":"CHANGELOG/#contract","title":"Contract","text":"<ul> <li>ACI format used the same as returned by aesophia_cli</li> <li><code>createAensDelegationSignature</code>, <code>createOracleDelegationSignature</code> replaced with <code>createDelegationSignature</code></li> <li><code>params</code> argument in <code>$deploy</code> and <code>$call</code> is required</li> <li><code>AeSdk.getContractInstance</code> renamed to <code>AeSdk.initializeContract</code></li> <li><code>getContractInstance</code> function replaced with Contract class</li> <li>Contract methods accessible on the instance itself</li> <li><code>contract.methods.&lt;name&gt;.get,send</code> removed</li> <li><code>contract.bytecode,sourceCode</code> moved to <code>contract.$options</code></li> <li><code>contract.calldata</code> renamed to <code>contract._calldata</code></li> <li><code>contract.deployInfo</code> removed</li> <li><code>contract.options</code> renamed to <code>contract.$options</code></li> <li><code>contract.decodeEvents</code> renamed to <code>contract.$decodeEvents</code></li> <li><code>contract.call</code> renamed to <code>contract.$call</code></li> <li><code>contract.compile</code> renamed to <code>contract.$compile</code></li> <li><code>contract.deploy</code> renamed to <code>contract.$deploy</code></li> <li>use <code>sourceCode</code> instead of <code>source</code></li> <li><code>getContractInstance</code> accepts <code>address</code> instead of <code>contractAddress</code></li> <li><code>prepareTxParams</code>, <code>getVmVersion</code> are not exported anymore</li> <li><code>isGA</code> method removed</li> </ul>"},{"location":"CHANGELOG/#transaction-builder","title":"Transaction builder","text":"<ul> <li>StateTrees fields decoded as objects mapping key to decoded entry instead of internals</li> <li>The content of Tag.*Mtree entries decoded and moved to <code>payload</code> field</li> <li>TX_SCHEMA, TxParamsCommon, TxSchema, TxTypeSchemas not exported anymore</li> <li>AeSdk.buildTx accepts <code>tag</code> in options</li> <li><code>TX_TTL</code> not exported anymore</li> <li>sync <code>buildTx</code> accepts <code>denomination</code> in the first argument</li> <li>Enum <code>FIELD_TYPES</code> is not exported anymore</li> <li>Not able to build/unpack CompilerSophia entry (tag 70)</li> <li>Enums <code>PROTOCOL_VM_ABI</code>, interface <code>CtVersion</code> not exported anymore</li> <li>Enums <code>VM_VERSIONS</code>, <code>ABI_VERSIONS</code>, <code>PROTOCOL_VERSIONS</code> renamed</li> <li><code>stateHash</code> of Channel entry decoded as <code>st_</code>-prefixed string instead of hex</li> <li><code>key</code> of MtreeValue entry decoded as a buffer instead of a hex</li> <li>SpendTx <code>payload</code> doesn't accept arbitrary strings anymore</li> <li><code>unpackTx</code> return an object of transaction parameters</li> <li><code>unpackTx</code> doesn't return <code>rlpEncoded</code> anymore</li> <li><code>verifyTransaction</code> doesn't accept parent tx types anymore</li> <li>TxBuilder accepts and returns <code>poi</code> field unpacked as TreesPoi</li> <li><code>buildTx</code> accepts transaction type and version in the first argument</li> <li><code>buildTx</code> return string instead of object</li> <li><code>buildTx</code> doesn't return <code>txObject</code> anymore</li> <li><code>buildTx</code> doesn't return <code>binary</code> anymore</li> <li><code>buildTx</code> doesn't return <code>rlpEncoded</code> anymore</li> <li><code>buildTx</code> doesn't accept <code>excludeKeys</code> option anymore</li> <li>Use <code>version</code> instead of <code>VSN</code>, <code>vsn</code> in <code>unpackTx</code>, <code>buildTx</code></li> <li><code>txType</code> property of <code>unpackTx</code> removed</li> <li><code>get</code> method of MPTree accepts and returns typed values</li> <li><code>writeInt</code> function removed</li> <li><code>returnType</code> of contract call result structure is a value of CallReturnType enum</li> <li><code>writeId</code>, <code>readId</code> functions removed</li> <li><code>readPointers</code>, <code>buildPointers</code> functions removed</li> <li><code>formatSalt</code> function removed</li> <li><code>validateParams</code>, <code>unpackRawTx</code> functions removed</li> <li><code>AMOUNT</code> constant removed</li> </ul>"},{"location":"CHANGELOG/#compiler","title":"Compiler","text":"<ul> <li>Methods of <code>CompilerHttp</code> moved to <code>api</code> property</li> <li><code>Compiler</code> export renamed to <code>CompilerHttp</code></li> <li>removed <code>compilerUrl</code>, <code>setCompilerUrl</code></li> <li>Dropped compatibility with aesophia_http below 7.1.1, aesophia_cli below 7.0.1</li> </ul>"},{"location":"CHANGELOG/#account","title":"Account","text":"<ul> <li><code>createGeneralizedAccount</code> accepts <code>sourceCode</code> in options</li> <li><code>createMetaTx</code> removed</li> <li><code>AccountRpc</code> constructor accepts arguments one by one</li> <li><code>AccountMemory</code> requires <code>networkId</code> in <code>signTransaction</code></li> <li><code>AccountBase</code> simplified</li> <li><code>address</code> in <code>AccountBase</code> is a property</li> <li>MemoryAccount accepts only secretKey</li> <li>MemoryAccount is not compatible with GA</li> </ul>"},{"location":"CHANGELOG/#node","title":"Node","text":"<ul> <li><code>url</code> property of <code>Node</code> removed</li> </ul>"},{"location":"CHANGELOG/#oracle","title":"Oracle","text":"<ul> <li><code>QUERY_FEE</code> is not exported anymore</li> <li>Oracles created without queryFee by default</li> <li>AeSdk:extendOracleTtl, AeSdk:respondToQuery doesn't accept oracleId</li> <li><code>onQuery</code> callback of <code>pollForQueries</code>, <code>oracle.pollQueries</code> accepts a single query</li> </ul>"},{"location":"CHANGELOG/#chain","title":"Chain","text":"<ul> <li><code>send</code> inlined into <code>sendTransaction</code></li> </ul>"},{"location":"CHANGELOG/#aens","title":"AENS","text":"<ul> <li><code>height</code> removed from the output of <code>aensPreclaim</code></li> </ul>"},{"location":"CHANGELOG/#channel","title":"Channel","text":"<ul> <li>Channel:state returns unpacked entries</li> <li>All channel events emitted in snakeCase</li> <li>Channel:poi returns unpacked TreesPoi</li> </ul>"},{"location":"CHANGELOG/#other","title":"Other","text":"<ul> <li><code>onAccount</code> doesn't accept keypair</li> <li><code>bigNumberToByteArray</code> removed</li> <li><code>str2buf</code> function removed</li> <li><code>getAddressFromPriv</code> doesn't accept private key as base64-encoded or raw string</li> <li><code>isValidKeypair</code> doesn't accept public key as base64-encoded string</li> <li><code>bytesToHex</code> function removed</li> <li><code>hexToBytes</code> function removed</li> <li>rename umd export to <code>Aeternity</code></li> <li>Subpaths imports of SDK are not allowed</li> <li>Removed <code>getNetworkId</code> from <code>AeSdkBase</code></li> <li><code>address</code> a getter in AeSdkBase</li> <li><code>addAccount</code> is a sync function</li> <li><code>verifyMessage</code> removed from accounts and AeSdkBase</li> <li><code>verify</code> and <code>verifyMessage</code> accepts address instead of hex string or Uint8Array</li> <li>node@12 not supported</li> <li><code>removeAccount</code> throws an error if the account is not found</li> <li><code>signMessage</code> always returns <code>Uint8Array</code></li> <li><code>encryptKey</code>, <code>decryptKey</code> are not exported anymore</li> <li><code>sha256hash</code> not exported anymore</li> <li><code>height</code> method removed</li> <li><code>signUsingGA</code> method removed</li> <li><code>POINTER_KEY_BY_PREFIX</code> removed</li> <li><code>ID_TAG_PREFIX</code>, <code>PREFIX_ID_TAG</code>, <code>ID_TAG</code> removed</li> <li><code>TX_TYPE</code> removed.</li> <li><code>GAS_MAX</code> removed</li> <li><code>calculateMinFee</code> removed</li> <li><code>salt</code>, <code>createSalt</code> removed</li> <li><code>Pointer</code> removed</li> </ul>"},{"location":"CHANGELOG/#features_3","title":"Features","text":"<ul> <li>account: accept async function in <code>authData</code> of AccountGeneralized (c1066c5)</li> <li>account: override <code>fee</code>, <code>gasPrice</code> of GaMetaTx in <code>authData</code> (177a100)</li> <li>chain: <code>getBalance</code> accepts OracleAddress (df2e5e3)</li> <li>channel: emit <code>newContract</code> event (8d71bba)</li> <li>contract: add ability to compile by path in node.js (74867b7)</li> <li>contract: add CompilerCli (de56cbe)</li> <li>contract: allow to create GA using <code>sourceCodePath</code>, <code>bytecode</code> (9410af2)</li> <li>contract: decode emitted events of contract deploy (bf46eb6)</li> <li>contract: don't require compiler (d2f9fa8)</li> <li>contract: extract $getCallResultByTxHash method (0a8d138)</li> <li>contract: support unit type (b5bf7a8)</li> <li>node: exponential retry of requests on failure (aadec0d)</li> <li>setup downleveled types for typescript@4.2 and above (fd2b97f)</li> <li>support CERES protocol version (8960a91)</li> <li>tx-builder: deserialisation of <code>channels.get.offchain_state</code> (ed31aff)</li> <li>tx-builder: implement buildAuthTxHashByGaMetaTx (bd656c2)</li> <li>tx-builder: implement getExecutionCost and related functions (33085c2)</li> <li>tx-builder: implement getTransactionSignerAddress function (2360cd2)</li> <li>tx-builder: support incomplete MPTrees (115bcf5)</li> <li>tx-builder: support recursive types (4f4dff6)</li> <li>tx-builder: typed decoding of MPTrees (da1e35a)</li> <li>tx-builder: unpack <code>poi</code> field of channel CloseSolo Slash tx (4a49b03)</li> <li>tx-builder: validate address and enum fields in runtime (5898b3a)</li> <li>account: add <code>generate</code> method to MemoryAccount (e0fa641)</li> <li>add Ledger HW support (587e058)</li> <li>ensure that used correct account type while signing transaction (46e8db3)</li> <li>extract AeSdkMethods class with minimal interface (fd0fe76)</li> <li>restore the ability to specify an array of accounts in AeSdk constructor (aba9b9f)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>aepp: don't require connection to wallet to make a static call (bab9eee)</li> <li>channel: increase pong timeout 3 times (to 15 seconds) (d03ec1c)</li> <li>channel: return type of <code>state</code> (3c34457)</li> <li>compatibility with @vue/cli@4 (41521ff)</li> <li>contract: avoid <code>any</code> in arguments (70453f1)</li> <li>contract: don't mark <code>event</code> field as required in Aci (2c44cd1)</li> <li>contract: dry-run accept <code>top</code> as number (ebe5986)</li> <li>contract: static call at specific height (99441dd)</li> <li>contract: type of FunctionAci (0929304)</li> <li>node: don't throw unhandled exception if version check failed (d4e5250)</li> <li>oracle: ask height right before querying oracle to avoid not found (42706ca)</li> <li>oracle: import <code>getHeight</code> instead of using a missing context (565c827)</li> <li>tx-builder: calculation of <code>gasLimitMax</code> (0fb8a37)</li> <li>tx-builder: don't check consensus protocol if sdk knows a single (6b8888b)</li> <li>tx-builder: drop nonce validator to avoid false positive (a669aae)</li> <li>tx-builder: ensure that TX RLP have the same length as schema (c042d73)</li> <li>tx-builder: field DelegateIds in ChannelCreateTx (405243c)</li> <li>tx-builder: provide proper type depending on checks being done (3cff062)</li> <li>wallet: don't use Event.hasListeners that is not available in FF (05c0424)</li> <li>wallet: explicitly convert error to JSON to don't pass stack trace (3948153)</li> <li>wallet: provide origin on webext side instead of empty string (662d8d0)</li> <li>channel: <code>log</code> field type in result of <code>getContractCall</code> (600d9e7)</li> <li>channel: add missed types for <code>minimumDepth</code>, <code>fee</code>, <code>gasPrice</code> (a14ddfc)</li> <li>channel: emit incoming message handler error instead of printing (d71efad)</li> <li>channel: messageQueue type (1197ec4)</li> <li>contract: don't throw ambiguous error if event types the same (669c326)</li> <li>contract: don't throw error if already compiled (dcedb61)</li> <li>contract: more specific error on calling without address (5c5a241)</li> <li>don't swallow errors without checking their type and message (7456b0f)</li> <li>don't use any in AeSdkBase constructor options (51fd3ae)</li> <li>sync options between Contract and AeSdkBase (6acebaf)</li> <li>tx-builder: avoid extra requests in tx validator (03c77e5)</li> <li>tx-builder: mark <code>nameTtl</code> as <code>shortUInt</code> in <code>NameUpdateTx</code> (3bfbb52)</li> <li>tx-builder: type of binary fields (e979224)</li> <li>use crypto random to generate salt (88dcf38)</li> </ul>"},{"location":"CHANGELOG/#1300-alpha1-2023-01-13","title":"13.0.0-alpha.1 (2023-01-13)","text":""},{"location":"CHANGELOG/#1300-alpha0-2022-12-08","title":"13.0.0-alpha.0 (2022-12-08)","text":""},{"location":"CHANGELOG/#1213-2022-08-24","title":"12.1.3 (2022-08-24)","text":""},{"location":"CHANGELOG/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>deps: update calldata to 1.3.0 (3eacc29)</li> </ul>"},{"location":"CHANGELOG/#1212-2022-08-09","title":"12.1.2 (2022-08-09)","text":""},{"location":"CHANGELOG/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>deps: depend on specific version of @azure/core-client to fix #1657 (95d5910)</li> </ul>"},{"location":"CHANGELOG/#1211-2022-07-28","title":"12.1.1 (2022-07-28)","text":""},{"location":"CHANGELOG/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>export and implementation of calculateMinFee (cee0f7c)</li> </ul>"},{"location":"CHANGELOG/#1210-2022-07-28","title":"12.1.0 (2022-07-28)","text":""},{"location":"CHANGELOG/#features_4","title":"Features","text":"<ul> <li>export Encoding enum (7ebc67f)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>ability to use sdk without nodes (8fa29e4)</li> <li>aepp,wallet: avoid invalid message errors using third-party tools (4d4d117)</li> <li>AeSdkBase: don't mutate the options argument (a574b7f)</li> <li>awaitHeight: allow to wait for arbitrary number of blocks (918a885)</li> <li>channel: handle round as number (97d7984)</li> <li>getNetworkId throw proper error without node (3d9e73c)</li> <li>move type packages required by TS projects to dependencies (90c5eb8)</li> <li>node: avoid ts-expect-error missed in generated d.ts file (60d9755)</li> <li>node: don't transform autorest properties (7982327)</li> <li>Node: tread <code>nameTtl</code>, <code>clientTtl</code> as number (b82c398)</li> <li>pollForQueryResponse: poll until query is expired (436f4a9)</li> <li>sendTransaction: don't fall if <code>onAccount</code> missed in AeSdkBase (eebbcb7)</li> <li>switch to aepp-calldata with fixed decoding of lists (c1a3b24)</li> </ul>"},{"location":"CHANGELOG/#1200-2022-06-17","title":"12.0.0 (2022-06-17)","text":""},{"location":"CHANGELOG/#breaking-changes_2","title":"\u26a0 BREAKING CHANGES","text":""},{"location":"CHANGELOG/#general","title":"General","text":"<ul> <li><code>Universal</code>, <code>RpcAepp</code>, <code>RpcWallet</code> stamps replaced with <code>AeSdk</code>, <code>AeSdkAepp</code>, <code>AeSdkWallet</code> classes</li> <li>all combined exports are inlined (<code>require('@aeternity/aepp-sdk').generateKeyPair()</code>)</li> <li><code>AccountBase</code> and inheritors are classes now</li> <li><code>ChainNode</code>, <code>Contract</code>, <code>Oracle</code>, <code>Aens</code>, <code>Ae</code>, <code>GeneralizedAccount</code> stamps not exported in   the root, their methods exported instead</li> </ul>"},{"location":"CHANGELOG/#node-and-compiler","title":"Node and Compiler","text":"<ul> <li><code>Node</code>, <code>Compiler</code> (previously <code>ContractCompilerHttp</code>) are classes instead of a stamps</li> <li><code>Node</code>, <code>Compiler</code> doesn't check version on the first request instead of init</li> <li><code>getNetworkId</code> returns a promise</li> <li><code>getNetworkId</code> ignores <code>force</code> option</li> <li><code>api</code> and static properties are removed in <code>Node</code></li> <li><code>Node</code> returns BigInts for coin amount fields instead of string or number</li> <li><code>Node</code> not accepts <code>internalUrl</code></li> <li>removed <code>mempool</code> method in <code>Node</code></li> <li><code>compilerVersion</code> is removed in <code>Compiler</code></li> <li><code>setCompilerUrl</code> changes compiler URL in sync</li> <li>methods of <code>Compiler</code> requires <code>options</code> object according to their specification</li> <li>methods of <code>Compiler</code> returns and accepts keys named in camelCase instead of snake_case</li> </ul>"},{"location":"CHANGELOG/#transaction-builder_1","title":"Transaction builder","text":"<ul> <li>removed methods to generate a transaction of specific type</li> <li>removed ability to generate transaction on the node side</li> <li><code>nonce</code>, <code>ttl</code>, <code>gas</code> decoded and accepted as numbers instead of strings</li> <li><code>gas</code> renamed to <code>gasLimit</code></li> <li><code>unpackTx</code> not accepting transaction as <code>Buffer</code>, only as tx-encoded string</li> <li><code>unpackTx</code> doesn't have <code>binary</code> field in result</li> <li>encode: since the prefix is evaluated by the type     itself the required prefix parameter is no more accepted</li> <li><code>calculateMinFee</code> returns BigNumber instead of string</li> <li>Fee helpers not exported anymore (<code>BASE_GAS</code>, <code>GAS_PER_BYTE</code>, <code>KEY_BLOCK_INTERVAL</code>,   <code>TX_FEE_BASE_GAS</code>, <code>TX_FEE_OTHER_GAS</code>, <code>calculateFee</code>, <code>DEFAULT_FEE</code>)</li> <li><code>buildRawTx</code>, <code>calculateTtl</code> not exported anymore</li> <li><code>TX_TYPE</code> mapped to tag (number) instead of string</li> <li><code>OBJECT_ID_TX_TYPE</code> not exported anymore</li> <li><code>TX_SERIALIZATION_SCHEMA</code> combined with <code>TX_DESERIALIZATION_SCHEMA</code></li> <li>Transaction schemas doesn't contain tag anymore</li> </ul>"},{"location":"CHANGELOG/#aens_1","title":"AENS","text":"<ul> <li><code>computeBidFee</code> accepts <code>startFee</code>, <code>increment</code> as options</li> <li><code>NAME_BID_TIMEOUTS</code> not exposed anymore</li> <li><code>computeAuctionEndBlock</code> accepts and returns height as number</li> <li>removed <code>ensureNameValid</code></li> <li><code>name.update</code>, <code>name.revoke</code> doesn't accept address in <code>onAccount</code>, only instances of <code>AccountBase</code></li> </ul>"},{"location":"CHANGELOG/#oracle_1","title":"Oracle","text":"<ul> <li><code>extendOracleTtl</code> accepts oracle ttl in <code>oracleTtlType</code> and <code>oracleTtlValue</code> fields</li> <li><code>decode</code> method of <code>getQueryObject</code> removed</li> </ul>"},{"location":"CHANGELOG/#contract_1","title":"Contract","text":"<ul> <li><code>createAensDelegationSignature</code> accepts <code>contractId</code>, <code>name</code>, options</li> <li><code>createOracleDelegationSignature</code> accepts <code>contractId</code>, <code>queryId</code> as a property of options</li> <li>call arguments in <code>createGeneralizedAccount</code> is required</li> <li><code>filesystem</code> option renamed to <code>fileSystem</code></li> <li>Contract instance doesn't accept address in <code>onAccount</code>, only instances of <code>AccountBase</code></li> </ul>"},{"location":"CHANGELOG/#chain_1","title":"Chain","text":"<ul> <li>removed <code>balance</code>, <code>tx</code>, <code>getTxInfo</code> methods</li> </ul>"},{"location":"CHANGELOG/#other_1","title":"Other","text":"<ul> <li><code>getAccountNonce</code> removed</li> <li><code>AeSdk</code> doesn't accept array of accounts</li> <li><code>destroyInstance</code> method removed</li> <li><code>NodePool</code>, <code>AccountMultiple</code> are removed (reimplemented in <code>AeSdk</code>)</li> <li><code>DENOMINATION_MAGNITUDE</code> not exposed anymore</li> <li>The result of <code>unpackTx</code> returned instead of <code>TxObject</code> (in <code>txObject</code> option of <code>onSign</code> handler   on wallet side; in <code>tx</code> field of contract call result)</li> <li><code>validateKeyObj</code> removed</li> <li><code>deriveKeyUsingArgon2id</code> removed</li> <li>removed extra implementation of <code>getAddressFromPriv</code> in keystore</li> <li><code>genSwaggerClient</code> removed</li> </ul>"},{"location":"CHANGELOG/#aepp-wallet-communication","title":"Aepp Wallet communication","text":"<ul> <li>BrowserRuntimeConnection, BrowserWindowMessageConnection are classes</li> <li>ContentScriptBridge, WalletDetector rewrited to plain functions (<code>connectionProxy</code>, <code>walletDetector</code>)</li> <li>RpcClient: removed <code>origin</code> property</li> <li>RpcClient: <code>sendMessage</code> is a private method</li> <li>RpcClient: <code>handlers</code> parameter is removed</li> <li>RpcClient: doesn't contain aepp info anymore</li> <li>RpcClient: doesn't contain <code>networkId</code> anymore</li> <li>RPC helpers are not exposed anymore (<code>isInIframe</code>, <code>sendMessage</code>, <code>getHandler</code>, <code>message</code>,   <code>responseMessage</code>, <code>sendResponseMessage</code>, <code>isValidAccounts</code>)</li> </ul>"},{"location":"CHANGELOG/#aepp","title":"Aepp","text":"<ul> <li><code>connectToWallet</code> accepts wallet connection as the first argument</li> <li><code>disconnectWallet</code> runs in sync and <code>sendDisconnect</code> arg removed</li> <li><code>sendConnectRequest</code> removed</li> <li>doesn't accept <code>connection</code> anymore</li> <li>removed <code>isConnected</code>, <code>isSubscribedAccount</code> methods</li> <li><code>signMessage</code> returns Buffer by default</li> </ul>"},{"location":"CHANGELOG/#wallet_1","title":"Wallet","text":"<ul> <li>BrowserRuntimeConnection requires <code>port</code> parameter</li> <li>requires <code>id</code>, <code>type</code> in params</li> <li><code>getBrowserAPI</code> helper removed</li> <li><code>shareWalletInfo</code> accepts rpcClientId instead of callback</li> <li><code>shareNode</code> argument in accept callback of <code>onConnection</code> removed</li> <li>can't handle specific set of accounts for an app</li> <li><code>txObject</code> parameter of <code>onSign</code> callback is removed</li> <li>callbacks accepts aeppId, params, and origin</li> <li><code>rpcClients</code> in wallet is not exposed anymore</li> <li><code>onDisconnect</code> callback on wallet side accepts client id instead of RpcClient</li> <li>wallet can't selectively notify aepps about selecting/adding account</li> <li>wallet can't provide metadata for accounts</li> <li>removed <code>action.{accept,deny}</code> in permission callbacks</li> </ul>"},{"location":"CHANGELOG/#features_5","title":"Features","text":"<ul> <li>aepp: support external accounts in <code>onAccount</code> (9745c73)</li> <li>ga: implement buildAuthTxHash function (73eae4e)</li> <li>NodeInvocationError: store tx-encoded transaction (a74da7c)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>aepp: use networkId in rpc tx signing (916dba0)</li> <li>importing in mjs (0fc7418)</li> <li>messageToHash: support messages longer than 252 chars (b4aa456)</li> <li>wallet: revert to returning complete tx data instead of just hash in rpc wallet signing (c3ada74)</li> </ul>"},{"location":"CHANGELOG/#refactoring-with-breaking-changes","title":"Refactoring with breaking changes","text":"<ul> <li>generate compiler api in TypeScript using autorest (777e990)</li> <li>generate node api in TypeScript (5576cf9)</li> <li>compiler: init in sync, check version on making request (a7fe956)</li> <li>aci: accept onAccount as AccountBase (e816428)</li> <li>ae: drop stamps and use plain functions (8ed55d0)</li> <li>aepp rpc: accept wallet info separately (baad98e)</li> <li>aepp-rpc: depend on simplified version of RpcClient (f329549)</li> <li>aepp-rpc: extract common error checks (eaa8683)</li> <li>aepp-wallet: rewrite to ts all except rpc (19cb42f)</li> <li>AeppRpc: make to init in sync (86c9d6c)</li> <li>chain: drop stamps and use plain functions (4197b3d)</li> <li>chain: remove deprecated methods (cefaa55)</li> <li>compiler: extract genVersionCheckPolicy (ac14fd1)</li> <li>don't provide default fee when transaction is not present (b004694)</li> <li>drop <code>ensureNameValid</code> (d0d1258)</li> <li>drop compiler stamp (ddf1363)</li> <li>drop functions to generate txs with specific type (3cf767d)</li> <li>drop TxObject wrapper (a083c7b)</li> <li>encoder: remove required prefix param (dec13d7)</li> <li>export in tree shaking friendly way (40aca86)</li> <li>extract all fee-related stuff into a separate module (cebb90b)</li> <li>extract base sdk classes (487cc14)</li> <li>fix spend types (6b089e7)</li> <li>getNetworkId: drop unnecessary <code>force</code> option (7d6549a)</li> <li>getQueryObject: remove deprecated <code>decode</code> method (7e9835c)</li> <li>inline NAME_BID_TIMEOUTS into computeAuctionEndBlock (5fdb80e)</li> <li>NodeApi: return BigInt instead of string | number (7f37e74)</li> <li>node: drop <code>internalUrl</code> (8336673)</li> <li>node: rewrite to ts, drop stamp (370635e)</li> <li>oracle: drop stamps and use plain functions (04ce814)</li> <li>prepareTxParams: inline calculateTtl (2f03793)</li> <li>remove ability to connect without sharing node if requested (7dd4af5)</li> <li>remove extra <code>getAddressFromPriv</code> (0f88c39)</li> <li>remove getAccountNonce (62a00e5)</li> <li>remove outdated destroyInstance method (0213375)</li> <li>rename <code>gas</code> to <code>gasLimit</code> where possible (dece758)</li> <li>rewrite AE_AMOUNT_FORMATS to enum (448a2a3)</li> <li>rewrite ae/contract to ts (8159d84)</li> <li>rewrite TX_TYPE to enum (f97e479)</li> <li>rpc account: don't pass extra options through rpc connection (141e932)</li> <li>rpc-client: add notify method (9e97a1a)</li> <li>rpc-client: provide method handlers instead of onMessage (5f1a007)</li> <li>RpcClient: remove custom set of accounts (5c26f3a)</li> <li>RpcClient: remove origin property (7155ed3)</li> <li>rpc: inline extra helpers (9a0a2eb)</li> <li>rpc: use webextension-polyfill (a54fdfd)</li> <li>simplify transaction schema (5f720ec)</li> <li>tests: migrate remaining tests ts (4e2ece7)</li> <li>tx schema: add shortInt type for fields not needed big numbers (0095455)</li> <li>unpackTx: accept only tx_string, don't return binary (658adee)</li> <li>use <code>calculateMinFee</code> instead of <code>calculateFee</code> (4ea59d7)</li> <li>utils: migrate keystore.js to ts (c013c01)</li> <li>wallet rpc: don't pass networkId from aepp to wallet (153fd89)</li> <li>wallet-rpc: drop <code>info</code> object in RpcClient (010ebbb)</li> <li>wallet-rpc: remove <code>meta, condition</code> unused by known wallets (4630643)</li> <li>wallet-rpc: return value/throw error instead of accept/deny (98b9955)</li> <li>wallet-rpc: rewrite to TypeScript (930e7d7)</li> <li>wallet-rpc: simplify callback arguments (5fc6f8a)</li> <li>wallet-rpc: store rpc data in maps instead of objects (0d3f04f)</li> <li>wallet-rpc: switch to TypeScript version of RpcClient (7d8f6d7)</li> </ul>"},{"location":"CHANGELOG/#1101-2022-04-07","title":"11.0.1 (2022-04-07)","text":""},{"location":"CHANGELOG/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>contract: do not check payable if contract call is init (c09fc0c)</li> <li>importing in mjs (01d493b)</li> <li>oracle: do not include address for oracle respond signature (ad4bddc)</li> </ul>"},{"location":"CHANGELOG/#1100-2022-03-18","title":"11.0.0 (2022-03-18)","text":""},{"location":"CHANGELOG/#request-batching-sdk-now-supports-batching-transactions","title":"Request batching: SDK now supports batching transactions","text":""},{"location":"CHANGELOG/#custom-error-types-introduced-error-types","title":"Custom error types: Introduced error types","text":""},{"location":"CHANGELOG/#naming-convention-instances-of-the-sdk-in-the-examples-and-tests-are-now-called-as-aesdk","title":"Naming convention: Instances of the SDK in the examples and tests are now called as <code>aeSdk</code>.","text":""},{"location":"CHANGELOG/#breaking-changes_3","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>return empty array instead of throwing UnsignedTxError</li> <li>rpc: remove forceValidation flag</li> <li>hd-wallet: expect that bip39 used externally</li> <li>hd-wallet: remove default export</li> <li>crypto: make (encode/decode)Base(58/64)Check private</li> <li>use bs58 instead of bs58check</li> <li>update rlp to 3.0.0</li> <li>tx builder: throw exception if deposit is not zero</li> <li>tx schema: remove default NAME_FEE equal to 0</li> <li>tx builder: accept unencoded name in nameClaimTx</li> <li>spelling of GeneralizedAccount</li> <li>aci: remove call/callStatic from deployInfo</li> <li>aci: remove createdAt property generated at client</li> <li>contract: remove deprecated contractCallStatic</li> <li>contract: remove deprecated contractDeploy</li> <li>contract: remove contractCompile</li> <li>contract: remove deprecated contractCall</li> <li>remove deprecated topBlock</li> <li>remove unused functions</li> <li>contract events: remote contract support</li> <li>contract instance: store aci as it is</li> <li>wallet-rpc: inline resolveOnAccount helper</li> <li>aepp-wallet schema: convert to TS</li> <li>aepp-wallet schema: rearrange METHODS enum</li> <li>aepp-wallet schema: remove unused enums</li> <li>contractCompile: remove encodeCall</li> <li>compiler: remove contractEncodeCallDataAPI</li> <li>compiler: remove getCompilerVersion</li> <li>contract: remove compileContractAPI</li> <li>contract: remove contractGetACI</li> <li>contract: remove contractDecodeCallDataByCodeAPI</li> <li>contract: remove contractDecodeCallDataBySourceAPI</li> <li>contract: remove contractDecodeCallResultAPI</li> <li>compiler: remove validateByteCodeAPI</li> <li>compiler: remove getFateAssembler</li> <li>compiler: remove getBytecodeCompilerVersion</li> <li>poll: avoid extra transaction info request to node</li> <li>drop https scheme workaround for hosted compiler</li> <li>node: don't wrap internal endpoints if internalUrl missed</li> <li>tx builder: inline VALIDATION_MESSAGE</li> <li>decodeEvents: accept event schemas as it is in ACI</li> <li>contract: remove already processed fields from decoded events</li> <li>aci: drop redundant per-method event decoding</li> </ul>"},{"location":"CHANGELOG/#features_6","title":"Features","text":"<ul> <li>aci: use dry-run to estimate gas and get rich errors (bb6977d)</li> <li>calculate default polling intervals depending on node settings (d9c6cf9)</li> <li>chain: combine multiple dry-run requests at one (ddcdaef)</li> <li>contract events: ability to resolve multiple definitions of event (c5b77fa)</li> <li>contract events: remote contract support (c7599c7)</li> <li>createGeneralizeAccount: estimate gas limit instead of using const (da88852)</li> <li>decode encode: validate base58 prefix and payload length (e836260)</li> <li>error: introduce error types (#1345) (444bb33)</li> <li>package: build es version compatible with node (480c747)</li> <li>poll: use getCheckTxInPool if available (690db5b)</li> <li>swagger: converts operationId in snake case to pascal (e52b739)</li> <li>swagger: split transactions by queues to post batch of txs from one account (0023fc7)</li> <li>tx builder: accept unencoded name in nameClaimTx (eea92be)</li> <li>tx builder: don't require produceNameId to create AENS txs (57ef9c7)</li> <li>tx builder: provide default name fee (18e4bab)</li> <li>validator: check contractId (5e667a5)</li> <li>wallet: add switch for aepp wallet node sharing (b5640d6)</li> <li>wallet: enable aepp to wallet node connection (d87e1fa)</li> <li>wallet: provide switch for aepp wallet node connection (dfbab59)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>aens helpers: improve naming, add additional validations (d2a10e1)</li> <li>babel: compatibility with create-react-app (e4b56fe)</li> <li>babel: depend on buffer package in es build (0ba51e9)</li> <li>babel: don't rewrite import of rlp package for @vue/cli@4.5.15 (0fdd296)</li> <li>chain: don't require address function to post transaction (07bc105)</li> <li>channel force progress: add missed binary prefixes (78660d2)</li> <li>channel: ignore messages that can't be handled, print to console (aaad8e3)</li> <li>compatibility: update argon2-browser to version with default export (0e69d8b)</li> <li>compatibility: use blakejs that doesn't refer to Buffer (94f1879)</li> <li>contract events: don't throw error if events emitted by remote (fa1c569)</li> <li>delegate signature: don't encode address depending on onAccount (563a972)</li> <li>dry-run: don't combine requests by default (0f36efc)</li> <li>error: remove duplicate error message (8b4df9a)</li> <li>es: babel build on windows (30f5213)</li> <li>keystore: encoding of hex privateKey, simplify tests (9f3ad6b)</li> <li>spelling of GeneralizedAccount (21c1dd3)</li> <li>tx builder: reject more than 32 pointers (9c06dab)</li> <li> <p>tx builder: throw exception if deposit is not zero (7b3d0e3)</p> </li> <li> <p>aci: drop redundant per-method event decoding (a84d781)</p> </li> <li>aci: remove call/callStatic from deployInfo (84d082d)</li> <li>aci: remove createdAt property generated at client (406684c)</li> <li>aepp-wallet schema: convert to TS (1775e91)</li> <li>aepp-wallet schema: rearrange METHODS enum (8a40105)</li> <li>aepp-wallet schema: remove unused enums (95bf0e9)</li> <li>compiler: remove contractEncodeCallDataAPI (7d02317)</li> <li>compiler: remove getBytecodeCompilerVersion (13283be)</li> <li>compiler: remove getCompilerVersion (fb929f8)</li> <li>compiler: remove getFateAssembler (165d492)</li> <li>compiler: remove validateByteCodeAPI (90ba164)</li> <li>contract instance: store aci as it is (978225e)</li> <li>contractCompile: remove encodeCall (6d0ade5)</li> <li>contract: remove already processed fields from decoded events (45bae5f)</li> <li>contract: remove compileContractAPI (5ae9c62)</li> <li>contract: remove contractCompile (7390629)</li> <li>contract: remove contractDecodeCallDataByCodeAPI (2fe798a)</li> <li>contract: remove contractDecodeCallDataBySourceAPI (8b13f70)</li> <li>contract: remove contractDecodeCallResultAPI (b9fbfa6)</li> <li>contract: remove contractGetACI (23ada71)</li> <li>contract: remove deprecated contractCall (c079e6e)</li> <li>contract: remove deprecated contractCallStatic (1e3ac6d)</li> <li>contract: remove deprecated contractDeploy (08e423e)</li> <li>crypto: make (encode/decode)Base(58/64)Check private (c151183)</li> <li>decodeEvents: accept event schemas as it is in ACI (17b9cc4)</li> <li>drop https scheme workaround for hosted compiler (9fc0a02)</li> <li>hd-wallet: expect that bip39 used externally (f6243ad)</li> <li>hd-wallet: remove default export (951ebb2)</li> <li>node: don't wrap internal endpoints if internalUrl missed (50d7bba)</li> <li>poll: avoid extra transaction info request to node (22c4838)</li> <li>remove deprecated topBlock (4535c07)</li> <li>remove unused functions (8c00de5)</li> <li>return empty array instead of throwing UnsignedTxError (c6bacdf)</li> <li>rpc: remove forceValidation flag (9f958c3)</li> <li>tx builder: inline VALIDATION_MESSAGE (defb7e1)</li> <li>tx schema: remove default NAME_FEE equal to 0 (9d8339a)</li> <li>update rlp to 3.0.0 (bb32b77)</li> <li>use bs58 instead of bs58check (32e836b)</li> <li>wallet-rpc: inline resolveOnAccount helper (1277b5b)</li> </ul>"},{"location":"CHANGELOG/#1000-2021-12-07","title":"10.0.0 (2021-12-07)","text":""},{"location":"CHANGELOG/#breaking-changes_4","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>crypto: remove unused asymmetric encode/decode functions</li> <li>aens: don't limit pointer keys</li> <li>specify browserlist to better choice of features to transpile</li> <li>aci: don't require source code</li> <li>make contractDeploy a wrapper, remove unused code</li> <li>inline getConsensusProtocolVersion function</li> <li>invert and rename forceCodeCheck option to validateByteCode</li> <li>require compiler 6 and above</li> <li>make contractCall/Static a wrapper around getContractInstance</li> <li>contract instance: thread all extra options as contract's</li> <li>contract instance: remove unnecessary <code>setOptions</code> function</li> <li>remove contractDecodeData as extra wrapper</li> <li>remove contractEncodeCall as extra wrapper</li> <li>don't accept ak_ addresses as hash, bytes and signature</li> <li>transformation: drop extra wrapper around bindings</li> <li>transformation: don't export extra functions</li> <li>drop unnecessary skipTransformDecoded option</li> <li>drop unnecessary skipArgsConvert option</li> </ul>"},{"location":"CHANGELOG/#features_7","title":"Features","text":"<ul> <li>aci: don't require source code (5c690d2)</li> <li>aens: don't limit pointer keys (f6b8999)</li> <li>aens: enable commitmentHash preclaim in tests (5de05e5)</li> <li>decode using calldata package (2bb494d)</li> <li>encode using calldata package (eeebbd5)</li> <li>poll-interval: reduce poll interval to be a more sensible default (9e55b2b)</li> <li>support for new node feature next-nonce of release 6.2.0 (#1299) (e40b046)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>commitlint issue (2c1cf54)</li> <li>compiler errors: construct error message by server response (8621352)</li> <li>don't accept ak_ addresses as hash, bytes and signature (cbaac62)</li> <li>events: don't require function name for events decoding (f963bdb)</li> <li>events: fix event decoding order and address prefix (faad530)</li> <li>events: fix test for incorrect address return type (31aaeec)</li> <li>events: ignore unknown events in decoding (45795fa)</li> <li>node errors: construct error message by server response (d556936)</li> <li>semverSatisfies: ignore build number (c3cce0a)</li> <li>swagger: detection of empty response (9bfab02)</li> <li>contract instance: remove unnecessary <code>setOptions</code> function (b88e767)</li> <li>contract instance: thread all extra options as contract's  (10fb7ba)</li> <li>crypto: remove unused asymmetric encode/decode functions (51def34)</li> <li>drop unnecessary skipArgsConvert option (6d4a599)</li> <li>drop unnecessary skipTransformDecoded option (bb49239)</li> <li>inline getConsensusProtocolVersion function (75f0447)</li> <li>invert and rename forceCodeCheck option to validateByteCode (72122fa)</li> <li>make contractCall/Static a wrapper around getContractInstance (c4ec019)</li> <li>make contractDeploy a wrapper, remove unused code (48d36f9)</li> <li>remove contractDecodeData as extra wrapper (5df2285)</li> <li>remove contractEncodeCall as extra wrapper (a4b303f)</li> <li>require compiler 6 and above (f9cef12)</li> <li>specify browserlist to better choice of features to transpile (c2ec71a)</li> <li>transformation: don't export extra functions (fa38b40)</li> <li>transformation: drop extra wrapper around bindings (9b70f8e)</li> </ul>"},{"location":"CHANGELOG/#1000-beta1-2021-11-24","title":"10.0.0-beta.1 (2021-11-24)","text":""},{"location":"CHANGELOG/#breaking-changes_5","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>specify browserlist to better choice of features to transpile</li> <li>aci: don't require source code</li> <li>make contractDeploy a wrapper, remove unused code</li> <li>inline getConsensusProtocolVersion function</li> <li>invert and rename forceCodeCheck option to validateByteCode</li> <li>require compiler 6 and above</li> <li>make contractCall/Static a wrapper around getContractInstance</li> <li>contract instance: thread all extra options as contract's</li> <li>contract instance: remove unnecessary <code>setOptions</code> function</li> <li>remove contractDecodeData as extra wrapper</li> <li>remove contractEncodeCall as extra wrapper</li> <li>don't accept ak_ addresses as hash, bytes and signature</li> <li>transformation: drop extra wrapper around bindings</li> <li>transformation: don't export extra functions</li> <li>drop unnecessary skipTransformDecoded option</li> <li>drop unnecessary skipArgsConvert option</li> </ul>"},{"location":"CHANGELOG/#features_8","title":"Features","text":"<ul> <li>aci: don't require source code (5c690d2)</li> <li>decode using calldata package (2bb494d)</li> <li>encode using calldata package (eeebbd5)</li> <li>poll-interval: reduce poll interval to be a more sensible default (9e55b2b)</li> <li>support for new node feature next-nonce of release 6.2.0 (#1299) (e40b046)</li> <li>aens: enable commitmentHash preclaim in tests (5de05e5)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>compiler errors: construct error message by server response (8621352)</li> <li>events: fix event decoding order and address prefix (faad530)</li> <li>events: fix test for incorrect address return type (31aaeec)</li> <li>node errors: construct error message by server response (d556936)</li> <li>semverSatisfies: ignore build number (c3cce0a)</li> <li>commitlint issue (2c1cf54)</li> <li>don't accept ak_ addresses as hash, bytes and signature (cbaac62)</li> <li>drop unnecessary skipArgsConvert option (6d4a599)</li> <li>drop unnecessary skipTransformDecoded option (bb49239)</li> <li>inline getConsensusProtocolVersion function (75f0447)</li> <li>invert and rename forceCodeCheck option to validateByteCode (72122fa)</li> <li>make contractCall/Static a wrapper around getContractInstance (c4ec019)</li> <li>make contractDeploy a wrapper, remove unused code (48d36f9)</li> <li>remove contractDecodeData as extra wrapper (5df2285)</li> <li>require compiler 6 and above (f9cef12)</li> <li>specify browserlist to better choice of features to transpile (c2ec71a)</li> <li>contract instance: remove unnecessary <code>setOptions</code> function (b88e767)</li> <li>contract instance: thread all extra options as contract's  (10fb7ba)</li> <li>remove contractEncodeCall as extra wrapper (a4b303f)</li> <li>transformation: don't export extra functions (fa38b40)</li> <li>transformation: drop extra wrapper around bindings (9b70f8e)</li> </ul>"},{"location":"CHANGELOG/#901-2021-10-04","title":"9.0.1 (2021-10-04)","text":""},{"location":"CHANGELOG/#refactoring","title":"Refactoring","text":"<ul> <li>Remove channel from universal stamp (63e88ce74)</li> </ul>"},{"location":"CHANGELOG/#900-2021-09-30","title":"9.0.0 (2021-09-30)","text":""},{"location":"CHANGELOG/#breaking-changes_6","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>drop following AENS delegation signature methods over the new common <code>createAensDelegationSignature</code>  implementation which accepts an object as param (456fe00)</li> <li><code>delegateNamePreclaimSignature</code></li> <li><code>delegateNameClaimSignature</code></li> <li><code>delegateNameTransferSignature</code></li> <li><code>delegateNameRevokeSignature</code></li> <li>drop following oracle delegation signature methods over the new common  <code>createOracleDelegationSignature</code> implementation accepts an object param (88b7bf3)</li> <li><code>delegateOracleRegisterSignature</code></li> <li><code>delegateOracleExtendSignature</code></li> <li><code>delegateOracleRespondSignature</code></li> <li>drop <code>assertedType</code>, use <code>decode</code> instead (00d563f)</li> <li>drop <code>waitMined</code> static method (2f299de)</li> <li>tx-validator now gives different, more meaningful, errors (95a2a23)</li> <li>no longer exports buildHash function, use hash or buildTxHash (9e1fde7)</li> <li>tx-verification is now done by default (989b36f)</li> </ul>"},{"location":"CHANGELOG/#features_9","title":"Features","text":"<ul> <li><code>payForTransaction</code> method (fbf204d)</li> <li>don't check is GA if innerTx (0ee9db4)</li> <li>don't sent to blockchain if innerTx (523e9bb)</li> <li>deposit-trap: enforce zero value for <code>deposit</code> during contract deploy (cfb5f22)</li> </ul>"},{"location":"CHANGELOG/#maintenance","title":"Maintenance","text":"<ul> <li>change default gas limit to 25000 (831e4dd)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>AENS: name length minimum bid fee (db6ca4c)</li> <li>delegate-signature: stop using the default account in the context of signing (29d760e)</li> <li>mustAccountStamp: process accounts only if supplied (10ec2c3)</li> <li>swagger https issue (3a876bb)</li> <li>tx serialisation: accept unpackTx output produced by deserialisator (ff0b3f5)</li> </ul>"},{"location":"CHANGELOG/#821-2021-06-21","title":"8.2.1 (2021-06-21)","text":""},{"location":"CHANGELOG/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>swagger file of aeternity's compiler (4001e64)</li> <li>swagger file of aeternity's latest compiler (a1caa03)</li> </ul>"},{"location":"CHANGELOG/#820-2021-06-17","title":"8.2.0 (2021-06-17)","text":""},{"location":"CHANGELOG/#breaking-changes_7","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>crypto: remove outdated generateSaveWallet function</li> <li>crypto: remove unused prepareTx, encodeTx, decodeTx functions</li> <li>crypto: remove unused hexStringToByte function</li> <li>crypto: rename messageToBinary to messageToHash adding hashing</li> <li>crypto: drop extra \"personal\" from message functions</li> <li>crypto: remove unused formatAddress function</li> <li>crypto: remove unused addressToHex function</li> <li>node-pool: inline helpers, export by default</li> <li>string: use isAddressValid instead of isAeAddress</li> <li>string: remove unused snakeOrKebabToPascal function</li> <li>drop outdated protocols and transactions schemas</li> <li>drop compatibility with node@5</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>export aepp-wallet-communication (d5d741c)</li> <li>ponyfill <code>Buffer</code> in browser (953bf08)</li> <li>ponyfill <code>process</code> in browser (798ab63)</li> <li>rlp: import as it is (736b0f5)</li> <li>typo name of broadcast failed error generator (ae7e823)</li> <li> <p>examlple-aepp: open only when ready to accept connection (4872eb9)</p> </li> <li> <p>crypto: drop extra \"personal\" from message functions (34288cb)</p> </li> <li>crypto: remove outdated generateSaveWallet function (37298be)</li> <li>crypto: remove unused addressToHex function (93f9def)</li> <li>crypto: remove unused formatAddress function (a5d4b62)</li> <li>crypto: remove unused hexStringToByte function (ed39a76)</li> <li>crypto: remove unused prepareTx, encodeTx, decodeTx functions (64d15eb)</li> <li>crypto: rename messageToBinary to messageToHash adding hashing (df37004)</li> <li>node-pool: inline helpers, export by default (ed1cfb5)</li> <li>string: remove unused snakeOrKebabToPascal function (79bdc04)</li> <li>string: use isAddressValid instead of isAeAddress (ac7d827)</li> <li>drop compatibility with node@5 (f5e2fdb)</li> <li>drop outdated protocols and transactions schemas (f18d305)</li> </ul>"},{"location":"CHANGELOG/#810-2021-05-31","title":"8.1.0 (2021-05-31)","text":""},{"location":"CHANGELOG/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>poi-tx schema: use proper type name (9e7c7b2)</li> <li>wait-for-tx-confirm: validate transaction height after awaitHeight (95e0d93)</li> </ul>"},{"location":"CHANGELOG/#features_10","title":"Features","text":"<ul> <li>support compiler@6.0.0 and above (3cdc7f9)</li> </ul>"},{"location":"CHANGELOG/#800-2021-05-18","title":"8.0.0 (2021-05-18)","text":""},{"location":"CHANGELOG/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>avoid instanceof between possible not/polyfilled objects (906ee0e)</li> </ul>"},{"location":"CHANGELOG/#800-beta2-2021-05-12","title":"8.0.0-beta.2 (2021-05-12)","text":""},{"location":"CHANGELOG/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>revert conversion of case in calls to compiler (0a69e49)</li> </ul>"},{"location":"CHANGELOG/#maintenance_1","title":"Maintenance","text":"<ul> <li>avoid ts definitions based on broken JsDoc (572d19f)</li> </ul>"},{"location":"CHANGELOG/#800-beta1-2021-05-6","title":"8.0.0-beta.1 (2021-05-6)","text":""},{"location":"CHANGELOG/#important-changes","title":"Important changes","text":"<ul> <li>Iris compatibility (compatible with nodes &gt;= 5.2.0 &lt; 7.0.0)</li> <li>initial TypeScript support (not enough type definitions yet)</li> <li>documentation is generated using MkDocs on Travis</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_8","title":"BREAKING CHANGES","text":"<ul> <li>Drop old aepp-wallet RPC interface (254f5a93)</li> <li>refactor: don't retrieve account from process.env (59e5c9b5)</li> <li>refactor(crypto): don't reexport RLP methods (c6004bc7)</li> <li>refactoring: remove legacy contractDecodeDataAPI compiler method (dfadac8d)</li> <li>refactor: rename <code>forceCompatibility</code> to more clear <code>ignoreVersion</code> (72f1d326)</li> <li>refactoring: require compiler above or equal to 4.1.0 (c9f48f91)</li> <li>RpcClient: Drop unnecessary action stuff (84545fd7)</li> <li>Combine RpcWallet and RpcClients (12892002)</li> <li>Drop old names support, split ensureNameValid and isNameValid (315a78a9)</li> <li>refactor(contract-aci): export single function instead of stamp (091b3282)</li> <li>Combine Accounts and Selector into AccountMultiple (0cacd3b3)</li> <li>Use swagger-client instead of a custom implementation (4b3260d5)</li> <li>Remove OracleNodeAPI wrapper (c6f9a76d)</li> <li>Flatten options of contractCallStatic, remove extra dryRunContractTx (f3ffb664)</li> <li>txDryRun: Simplify arguments, support <code>txEvents</code> option (401c53da)</li> <li>contracts: Mark handleCallError as private, simplify arguments (bdf76e24)</li> <li>import/no-named-as-default linter error (d63e1511)</li> <li>oracle: make pollForQueries a sync function (dc955e14)</li> <li>chore: drop aevm support and backend (compiler) option (6eb702dd)</li> <li>refactor(schema): export enum with consensus protocol versions (e92f187d)</li> </ul>"},{"location":"CHANGELOG/#features_11","title":"Features","text":"<ul> <li>swagger: allow to provide external specification (683082b3)</li> <li>swagger: make compatible with OpenAPI 3 (1d83f1a4)</li> <li>switch to v3 endpoints on Iris (eca6697b)</li> <li>traverse-keys: add keysOfValuesToIgnore option as a workaround (8ff5afe4)</li> <li>Use es modules version in browser if supported (b49c38f0)</li> <li>Add typescript support (abde033a)</li> </ul>"},{"location":"CHANGELOG/#docs","title":"Docs","text":"<ul> <li>contract: fix default backend value (9fcbeb32)</li> <li>wallet-iframe: fix disconnect button (59014bd0)</li> <li>examples-browser: rearrange files and docs (985e3b96)</li> <li>use relative links between docs pages (d34d8181)</li> <li>remove outdated aecrypto example (7df05bfe)</li> <li>refactor node examples (e8c443cf)</li> <li>changelog: add missed single quote in example (45fd0002)</li> <li>resolveName: Document verify option (ca865596)</li> <li>Remove outdated docs (cf9c166f)</li> <li>decodeTx: Fix arg naming and annotation (883819c0)</li> <li>contract-events: Remove outdated contract, update links and markup (37d39d61)</li> <li>Update docs/guides/import-nodejs.md (9dc274ed)</li> <li>Update docs/guides/import-nodejs.md (93bfce11)</li> <li>break down json obj keys necessary for account initialization in nodejs docs (af5ee41d)</li> <li>Ignore pycache in the docs folder (9989e8e7)</li> <li>Specify the python version more precisely (d6204523)</li> <li>Add pycache to .gitignore (f0b7e1f1)</li> <li>Add navigation and update some titles (8ad15ced)</li> <li>docco template: Remove extra new lines around code, skip extra blocks (65ce3cf1)</li> <li>aecontract: Make a list out of a long sentence (8ff7839c)</li> <li>aens-usage: Use more semantic markup, compatible with mkdocs (de3d3cd5)</li> <li>docs readme: Fix typos and formatting (5b0c790d)</li> <li>Add initial mkdocs and readthedocs configuration (b688a96b)</li> <li>Extract quick-start to guides (28f7e6f7)</li> <li>Update testnet URL (7bb823f8)</li> <li>assertedType: Make the last parameter more obvious (50094d3a)</li> <li>travis: Build docs to gh-pages (7c935a2b)</li> <li>Docs root: Add link to API reference (4a36102d)</li> <li>Move outdated disclaimer to the root readme (80a6a663)</li> <li>Remove generated docs (fd802b00)</li> <li>Fix api docs generation (56e3aa9d)</li> </ul>"},{"location":"CHANGELOG/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>use BigNumber constructor instead of custom wrapper (4488b4d7)</li> <li>avoid extra object nesting (f99d3045)</li> <li>compiler: use swagger file (0d821614)</li> <li>semver-satisfies: remove extra splitting by dash (35d5c11a)</li> <li>remove extra char in regex (37eeefae)</li> <li>refactor wallet detector (1bc8d027)</li> <li>shareWalletInfo: Don't create unnecessary copy of info (3a4e50b9)</li> <li>Inline receive helper that is used once (a4a13889)</li> <li>rpc: Inline helpers used once (21903f4d)</li> <li>rpc: Prefer default export (70fc3f0f)</li> <li>rpc helpers: Remove unused getWindow function (c12b528f)</li> <li>don't use AsyncInit where it is not necessary (84373697)</li> <li>contract-aci: reuse defaults from Contract stamp (47013962)</li> <li>cleanup MIN_GAS_PRICE (a5b28842)</li> <li>remove unused option string (0e28af23)</li> <li>remove unused dryRunAccount default option (8c42b706)</li> <li>Consistent new on Error creation (39f93d3f)</li> <li>height: Use a shorter syntax (b013bf9d)</li> <li>height: Improve naming of internal promise (7915119a)</li> <li>Move source code to \"src\" folder (ddbce389)</li> <li>sign-using-ga: don't pass extra options (44bab6d0)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>traverse-keys: add missed null check (7b724b86)</li> <li>swagger: add workaround to get transaction details of GAAttachTx (bb7ec479)</li> <li>top-block: use getTopHeader on Iris, mark deprecated (2b410257)</li> <li>nonce-verification: add missed space (3f244dfb)</li> <li>missed aepp id in wallet connect handler (1ed9284a)</li> <li>get-node-info: bring url and internalUrl back (e984f3b3)</li> <li>contract error decoding (d56931ac)</li> <li>contract-aci: don't proxy prepareArgsForEncode from helpers (7e40eda0)</li> <li>Improve handling of call error (584eb5e4)</li> </ul>"},{"location":"CHANGELOG/#maintenance_2","title":"Maintenance","text":"<ul> <li>Use ts-standard instead of standard (be5aece7)</li> <li>tsconfig: Set target version to es5 (ed131b1b)</li> <li>Fix eslint errors manually (dfe3a05e)</li> <li>require node below 7.0.0 (ae1a5ef5)</li> <li>require node above or equal to 5.2.0 (ebb36f06)</li> <li>update dependencies (d876cff7)</li> <li>deps: bump ssri from 6.0.1 to 6.0.2 (e0dfb8c9)</li> <li>deps: bump y18n from 4.0.0 to 4.0.1 (9e4acd61)</li> <li>deps: bump elliptic from 6.5.3 to 6.5.4 (feb3aa68)</li> <li>deps: bump axios from 0.19.2 to 0.21.1 (0f619f27)</li> <li>deps: bump ini from 1.3.5 to 1.3.7 (95580324)</li> <li>deps: bump highlight.js from 10.4.0 to 10.4.1 (9fcfadfe)</li> <li>deps: bump highlight.js from 10.1.1 to 10.4.0 (43aff25f)</li> <li>deps: bump node-fetch from 2.6.0 to 2.6.1 (80ed6d70)</li> <li>Update node to 5.8.0 (b6ff3422)</li> <li>Update .gitignore (1f1563dc)</li> <li>add vscode .history folder to gitignore (f4d61df4)</li> <li>Update testnet URL in JS files (dc1b807a)</li> <li>add Iris consensus protocol (41fd4a13)</li> <li>add vsn 2 version of GA_META transaction (b5abe098)</li> <li>add new versions of CHANNEL, CHANNEL_CREATE transactions (366981a3)</li> <li>support compilers below 6.0.0 (876e5164)</li> </ul>"},{"location":"CHANGELOG/#performance","title":"Performance","text":"<ul> <li>Optimize height queries (f74ca4cb)</li> </ul>"},{"location":"CHANGELOG/#tests","title":"Tests","text":"<ul> <li>simplify GA tests (7b9628c2)</li> <li>oracle: avoid explicit waiting for 1 second (f81cd3a1)</li> <li>passing of forceCompatibility flag (6f900b98)</li> <li>contract: remove extra backend option (184566f9)</li> <li>update channel tests to fate (35a996d8)</li> <li>Faster tests (5d629103)</li> <li>Extract strings tests into separate file (f3c7d3fa)</li> <li>ga: Remove extra await (72bfc746)</li> <li>Make tests more precise (fe7a8567)</li> </ul>"},{"location":"CHANGELOG/#770-2020-08-18","title":"7.7.0 (2020-08-18)","text":""},{"location":"CHANGELOG/#features_12","title":"Features","text":"<ul> <li>transferFunds: Accept onAccount option (#1060)</li> <li>bigNumberToByteArray: Avoid unexpected behaviour by throwing exception (#1066)</li> <li>example: Add disconnect button on wallet side (#1056)</li> </ul>"},{"location":"CHANGELOG/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Use external version of json-bigint (#1033)</li> <li>Make tests configuration more flexible (#1037)</li> <li>test-else: Exclude aens tests and speedup jobs (#1040)</li> <li>Avoid unnecessary eslint-disable (#1043)</li> <li>Add lint script (#1045)</li> <li>Refactor tests (#1039)</li> <li>Refactor bytes unit tests (#1050)</li> <li>travis: Run linter and unit tests firstly (#1051)</li> <li>Disable Travis on all branches except master, develop (#1054)</li> <li>Refactor contract, oracle, chain (#1048)</li> <li>Refactor state channels (#1047)</li> </ul>"},{"location":"CHANGELOG/#docs_1","title":"Docs","text":"<ul> <li>Fix typo in Readme.md (#1053)</li> </ul>"},{"location":"CHANGELOG/#760-2020-07-22","title":"7.6.0 (2020-07-22)","text":""},{"location":"CHANGELOG/#features_13","title":"Features","text":"<ul> <li>wallet-detector: allow to connect wallet to aepp between iframes (3f74a05)</li> </ul>"},{"location":"CHANGELOG/#750-2020-06-18","title":"7.5.0 (2020-06-18)","text":""},{"location":"CHANGELOG/#features_14","title":"Features","text":"<ul> <li>Account: Build signature from transaction hash (#1025) (2cb8cc2)</li> <li>ACI: External contract integration (#1027) (a14d13a)</li> </ul>"},{"location":"CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>Deps: Clean up repository (#1029)</li> <li>Env: Simplify Travis and docker-compose (#1031)</li> <li>Env: Remove unused packages (#1032)</li> </ul>"},{"location":"CHANGELOG/#742-2020-06-10","title":"7.4.2 (2020-06-10)","text":""},{"location":"CHANGELOG/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>AEX-2: Handler always as Promise (#1018) (a8b0aab)</li> </ul>"},{"location":"CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>AEX-2: Add debug option for <code>getHandler</code>. Hide unknown message logs (#1021) (22c452c)</li> <li>Contract Add AENS name resolver for Contract API</li> </ul>"},{"location":"CHANGELOG/#741-2020-05-30","title":"7.4.1 (2020-05-30)","text":""},{"location":"CHANGELOG/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>AEX-2: Fix <code>isExtensionContext</code> check (#1011) (814f99b)</li> </ul>"},{"location":"CHANGELOG/#740-2020-05-29","title":"7.4.0 (2020-05-29)","text":""},{"location":"CHANGELOG/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>AEX-2: Fix <code>getBrowserAPI</code> helper for cross-browser compatibility (#1007) (98b0e29)</li> </ul>"},{"location":"CHANGELOG/#features_15","title":"Features","text":"<ul> <li>ACI: Event decoding (#1006) (6b8e6fe)</li> </ul>"},{"location":"CHANGELOG/#731-2020-05-25","title":"7.3.1 (2020-05-25)","text":""},{"location":"CHANGELOG/#improvements","title":"Improvements","text":"<ul> <li>AEX_2: Handle network switch and update state on both sides. Adjust networkId check for signing request. Add node switcher for example apps (#996)</li> </ul>"},{"location":"CHANGELOG/#730-2020-05-20","title":"7.3.0 (2020-05-20)","text":""},{"location":"CHANGELOG/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>example: Regenerate lock (#960) (5b6a30e)</li> </ul>"},{"location":"CHANGELOG/#features_16","title":"Features","text":"<ul> <li>ACI: expose events decoding through Contract ACI stamp  (#971) (4930635)</li> <li>AEX_2: Allow to connect without node (#991) (87b9ef9)</li> <li>AEX_2: Connect to extension from iframe (#992) (47179f7)</li> <li>Build: Expose <code>ACIHelpers</code> and <code>ACITransformation</code> to bundle (#970) (8b475e0)</li> <li>Chain: Add option <code>allowUnsynced</code> for <code>poll</code> method which allow to depend on <code>get tx/info</code> API (9c80ce0)</li> <li>Channel: add timeout message handler (#983) (1940a15)</li> <li>Channel: Channel force progress (#964) (8f15bef)</li> <li>Contract: Add unpacked transaction to contract call with error (#981) (4efd341)</li> <li>Node: Add <code>debug</code> option to Channel stamp (#967) (68fcba5)</li> </ul>"},{"location":"CHANGELOG/#721-2020-03-25","title":"7.2.1 (2020-03-25)","text":""},{"location":"CHANGELOG/#fix","title":"Fix","text":"<ul> <li>build Remove resolving of <code>minimist</code> using <code>npx</code></li> </ul>"},{"location":"CHANGELOG/#720-2020-03-24","title":"7.2.0 (2020-03-24)","text":""},{"location":"CHANGELOG/#docs_2","title":"Docs","text":"<ul> <li>Guide: Adjust guide for RPC Wallet/Aepp usage</li> </ul>"},{"location":"CHANGELOG/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>RPC: Refactor rpc-related stuff (#921)</li> <li>Build: Include amountFormatter and SCHEMA in bundle(#936)</li> <li>Examples Update examples apps</li> </ul>"},{"location":"CHANGELOG/#features_17","title":"Features","text":"<ul> <li>TX: Introduce new stamp <code>TxObject</code>(#933) This stamp give more flexibility on transaction serialization/deserialization process</li> <li>Keystore: Allow to store secret as hex or buffer (#939)</li> <li>AEX-2:  Add permission layer for account management (#937)</li> </ul>"},{"location":"CHANGELOG/#711-2020-02-27","title":"7.1.1 (2020-02-27)","text":""},{"location":"CHANGELOG/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>TxBuilder: Fix fee calculation for Oracles (#924) (a9d784f)</li> <li>AEX-2: Broken wallet detection (#926)</li> </ul>"},{"location":"CHANGELOG/#710-2020-02-25","title":"7.1.0 (2020-02-25)","text":""},{"location":"CHANGELOG/#refactor_2","title":"Refactor","text":"<ul> <li>AEX: Simplify message id processing (#916). Pass AEEP <code>origin</code> to Wallet callback (#918)</li> <li>Node: Move <code>getNetworkId</code> to helpers (#910)</li> <li>ACI: Minor ACI validation improvement.  Move decoding of events to builder. Add ability to decode events without ACI</li> </ul>"},{"location":"CHANGELOG/#features_18","title":"Features","text":"<ul> <li>ACI: Implement Contract Events for ACI(Contract Event Guide)</li> <li>Contract: Helpers for Oracle and AENS signature delegation(Signature delegation guide)</li> <li>AmountFormatter: Rework amount formatter. Change formatter units naming. Add more units (#909) (6970efe)</li> <li>TxBuilder: Integrate amount formatter to transaction builder (#897)</li> <li>Account: Implement Message Signing (<code>singMessage</code>, <code>verifyMessage</code>) (#903)</li> <li>AEX-2: Add <code>removeRpcClient</code> method to RpcClient/RpcWallet stamp's(#912)</li> </ul>"},{"location":"CHANGELOG/#700-2020-01-31","title":"7.0.0 (2020-01-31)","text":""},{"location":"CHANGELOG/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>AEX-2: Fix firefox compatibility issue (#882) (2e16e10)</li> </ul>"},{"location":"CHANGELOG/#features_19","title":"Features","text":"<ul> <li>Chain: add new method <code>waitFOrTxConfirm</code>. Add new option { confirm: 3 } to all of high lvl SDK API. Add tests. Adjust docs (#874) (43528f9)</li> <li>Compiler: Add new compiler methods API (#875) (a939395)</li> <li>network: Throw error when can not get networkId (#863) (41b7bd1)</li> </ul>"},{"location":"CHANGELOG/#docs_3","title":"Docs","text":"<ul> <li>Guide Add 7.0.0 migration guide</li> <li>Guide: Add Oracle, AENS and Contract guides</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_9","title":"BREAKING CHANGES","text":"<p>Please check out 7.0.0 migration guide</p> <p>This release include all changes from 7.0.0-next.1, 7.0.0-next.2, 7.0.0-next.3</p>"},{"location":"CHANGELOG/#700-next3-2020-01-22","title":"7.0.0-next.3 (2020-01-22)","text":""},{"location":"CHANGELOG/#features_20","title":"Features","text":"<ul> <li>aens: implement aensExtendTtl function. Refactor aensUpdate (#866) (72b073a), closes #865 <p><code>aensUpdate</code> now accept array of pointers <code>aensUpdate</code> have new option <code>extendPointers=false</code> which retrieve pointers from the node and merge with provided</p> </li> <li>Build: update node to <code>5.4.0</code> and compiler to <code>4.2.0</code></li> <li>Guide Add guide for <code>AENS</code> usage</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_10","title":"BREAKING CHANGES","text":"<ul> <li>AENS: Change AENS methods arguments <p>Now all of AENS module methods accept <code>name</code> as a first argument instead of <code>nameId</code></p> </li> </ul>"},{"location":"CHANGELOG/#700-next2-2020-01-10","title":"7.0.0-next.2 (2020-01-10)","text":""},{"location":"CHANGELOG/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>codecov: Adjust codecov badge. Move @babel/runtime to dev-deps (#848) (109b851)</li> <li>AEX-2: Fix <code>getBrowserAPI</code> function for firefox (#853)</li> </ul>"},{"location":"CHANGELOG/#features_21","title":"Features","text":"<ul> <li>Account: Add ability to pass <code>keypair</code> or <code>MemoryAccount</code> as nAccount` option (#847) (75d8ad8)</li> <li>Test: Increase code coverage (#830) (6f760fb)</li> <li>Chain: Extend transaction verification error (#849)</li> <li>Aepp&lt;-&gt;Wallet: Add tests for Aepp&lt;-&gt;Wallet communication (#834)</li> </ul>"},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>Guide: Add guide for Contract ACI usage (#852)</li> </ul>"},{"location":"CHANGELOG/#700-next1-2019-12-18","title":"7.0.0-next.1 (2019-12-18)","text":""},{"location":"CHANGELOG/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>Contract/Chain: Using { waitMined: false } with Contract high lvl API (#828) (475c2aa)</li> <li>HdWallet: Fix derive function (#801) (6c6177d)</li> <li>Compiler: Filter compiler options</li> </ul>"},{"location":"CHANGELOG/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Cross-Node: Remove cross-node compatibility code (#829) (b29a162)</li> <li>Chain: Handle time until tx is not added to mempool (#816)</li> <li>Git: Update issue template(#806)</li> <li>Flavors: Remove deprecated code (#697)</li> <li>Test: Increase code covarage (#830) (6f760fb)</li> </ul>"},{"location":"CHANGELOG/#features_22","title":"Features","text":"<ul> <li> <p>Wallet&lt;-&gt;AEPP: Add new Wallet&lt;-&gt;Aepp communication API</p> <p>Add two new stamps <code>RpcWallet</code> and <code>RpcAepp</code> Example of usage you can find heere: Aepp example and Wallet example</p> </li> <li> <p>Wallet: Use <code>postMessage</code> for communication with extension wall\u2026 (#815) (dc7b4c2)</p> </li> <li>CI: Move to Travis CI (#809) (2d77f20)</li> <li>CI: enable daily builds on latest node and compiler and enable codecov (#820) (3c52a1e)</li> <li>ACI: Add check for contract address validity and existence. Add <code>forceCodeCheck</code> option for bytecode verification skip (#788) (c0cccc9)</li> <li>Contract: Add ability to pass arguments or callData for contract <code>deploy/call/callStatic</code> API (#768) (a828076)</li> <li>Contract: Adjust <code>fee</code> calculation for <code>contractCall</code> tx using <code>FATE</code> backend (#793) (7254ac1)</li> <li>Compiler: Add new API <code>validateByteCodeAPI</code> available on compiler &gt;= 4.1.0 (#788) (c0cccc9)</li> <li>Tx: Always verify transaction before send it to the node (#798) (170f479)</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_11","title":"BREAKING CHANGES","text":"<ul> <li>Tx: By default <code>sdk</code> make a transaction <code>verification</code></li> <li>Node: Change node compatibility range to <code>node &gt;= 5.0.0 &amp;&amp; node &lt; 6.0.0</code></li> <li>Compiler: Drop compiler version to <code>version &gt;= 4.0.0 &amp;&amp; version &lt; 5.0.0</code></li> <li>ACI: Add additional method to RPC communication. Required sdk update on wallet side Add <code>getContractByteCode</code> API</li> <li>Flavor: Remove deprecated params:</li> <li>remove <code>url</code> and <code>internalUrl</code> instead use <code>nodes: [ { name: 'NODE_NAME', instance: await Node({ url, internalUrl }) } ]</code></li> <li>remove <code>keypair</code> params instead use <code>accounts: [MemmoryAccount({ keypair })]</code></li> <li>remove <code>setKeypair</code> function from <code>Account</code> stamps</li> </ul>"},{"location":"CHANGELOG/#613-2019-12-11","title":"6.1.3 (2019-12-11)","text":""},{"location":"CHANGELOG/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>Channel: 5.2.0 compatibility (4be8eb8)</li> </ul>"},{"location":"CHANGELOG/#612-2019-11-12","title":"6.1.2 (2019-11-12)","text":""},{"location":"CHANGELOG/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>Composition: Chain composition (9ac705f)</li> </ul>"},{"location":"CHANGELOG/#611-2019-11-12","title":"6.1.1 (2019-11-12)","text":""},{"location":"CHANGELOG/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>ACI: Disable bytecode check for source and code on-chain. This changes will be included in next major release (#783) (fe6021b)</li> </ul>"},{"location":"CHANGELOG/#features_23","title":"Features","text":"<ul> <li>KeyStore: Remove <code>argon2</code> package, use <code>libsodium</code> for both browser and node (#782) (c18047e)</li> </ul>"},{"location":"CHANGELOG/#610-2019-11-11","title":"6.1.0 (2019-11-11)","text":""},{"location":"CHANGELOG/#bug-fixes_34","title":"Bug Fixes","text":"<ul> <li>AENS: auction end block calculation (#746) (4c1f5e4)</li> <li>AENS: Fix <code>produceNameId</code> function(Make name lowercase). Enable \u2026 (#750) (fd14225)</li> <li>state channels: wait for connection to be established before sending generic message (#723) (c5f35d1)</li> <li>TxHelpers: Use BigNumber in auction end block calculation (777c012)</li> </ul>"},{"location":"CHANGELOG/#features_24","title":"Features","text":"<ul> <li>ACI: Add validation for contractAddress (#764) (07cb0e7)</li> <li>AENS: Add nameFee validation to TxValidator (#765) (5250e75)</li> <li>AENS: Increase default nameTtl (#775) (c5f2582)</li> <li>Contract: Add ability to pass arguments or callData for contract <code>deploy/call/callStatic</code> API (#768) (12aaca3)</li> <li>Http: Assign error object to http error (#770) (87062ea)</li> <li>state channels: add round method (#763) (c950937)</li> <li>state channels: allow off chain updates to be cancelled with custom error code (#753) (ae4426e)</li> <li>state channels: allow to pass metadata to transfer update (#755) (ddc6611)</li> <li>state channels: make state channels compatible with node v5.0.0\u2026 (#688) (deed7fc), closes #632 #653 #658 #660 #680 #693 #687</li> <li>state channels: make state channels compatible with node v5.1.0\u2026 (#776) (74952aa)</li> </ul>"},{"location":"CHANGELOG/#602-2019-10-31","title":"6.0.2 (2019-10-31)","text":""},{"location":"CHANGELOG/#bug-fixes_35","title":"Bug Fixes","text":"<ul> <li>name claim: Revert ignoring waitMined from user passed options (#727)</li> </ul>"},{"location":"CHANGELOG/#601-2019-10-29","title":"6.0.1 (2019-10-29)","text":""},{"location":"CHANGELOG/#bug-fixes_36","title":"Bug Fixes","text":"<ul> <li>aens: added lower case transformation for aens names (#730) (f7f9f17), closes #728</li> </ul>"},{"location":"CHANGELOG/#600-2019-10-16","title":"6.0.0 (2019-10-16)","text":""},{"location":"CHANGELOG/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>SPEND: Add additional validation for recipient (#715) (c1854bf)</li> </ul>"},{"location":"CHANGELOG/#features_25","title":"Features","text":"<ul> <li>State Channels: make state channels compatible with node v5.0.0\u2026 (#688) (23936f5), closes #632 #653 #658 #660 #680 #693 #687</li> <li>AENS: Change tld for Lima from <code>aet</code> to <code>chain</code> (#714) (323ef6a)</li> <li>AENS: Implement name <code>bid</code> function (#706))</li> <li>AENS: auction name fee calculation. Name fee validation and calculation in <code>claim/bid</code> (#706)</li> <li>AENS: Add <code>nameId</code> computation function (#709) (#706)</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_12","title":"BREAKING CHANGES","text":"<ul> <li>AENS: Change <code>tld</code> for Lima from <code>.aet</code> to <code>.chain</code></li> </ul>"},{"location":"CHANGELOG/#500-2019-10-04","title":"5.0.0 (2019-10-04)","text":""},{"location":"CHANGELOG/#bug-fixes_37","title":"Bug Fixes","text":"<ul> <li>rpc: fix resolution rpc ops (#669) (abd7c56)</li> </ul>"},{"location":"CHANGELOG/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>ACI: rework Sophia Option type representation (#691) (0dbb2fe)</li> </ul>"},{"location":"CHANGELOG/#features_26","title":"Features","text":"<ul> <li>AENS: Add ability to spend by name (#682) (0d43804)</li> <li>AENS: Add ability to claim contract, oracle, SC (#671) (49fd0fd)</li> <li>GA: enbale GA (#692) (eded912)</li> <li>Lima: Lima compatibility (#683) (a88042e), closes #632 #653 #658 #660 #680 #693 #687<ul> <li>AENS auction support</li> <li>compiler 4.0.0 support</li> <li>node 5.0.0 support</li> <li>SDK use <code>FATE</code> for contract by default</li> </ul> </li> <li>AE: Add pointers verification for spend by name</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_13","title":"BREAKING CHANGES","text":"<ul> <li>aci: Change Sophia option type representation in ACI <pre><code>// from\nawait contract.methods.optionFn(Promise.resolve(1) || Promise.reject())\n// to\nawait contract.methods.optionFn(1 || undefined)\n</code></pre></li> </ul>"},{"location":"CHANGELOG/#500-next1-2019-09-10","title":"5.0.0-next.1 (2019-09-10)","text":""},{"location":"CHANGELOG/#bug-fixes_38","title":"Bug Fixes","text":"<ul> <li>package: update serialize-javascript to version 2.0.0 (#647) (1ddb392)</li> </ul>"},{"location":"CHANGELOG/#features_27","title":"Features","text":"<ul> <li>Contract/ACI Add <code>payable</code> feature</li> <li>Compiler: Compiler 4.0.0 compatibility (#632) (d5f1632)</li> <li>Contract/ACI: Add ability to use contract with external namespaces(<code>include \"someLib\"</code>) (#653) (9708b43)</li> </ul>"},{"location":"CHANGELOG/#470-2019-09-11","title":"4.7.0 (2019-09-11)","text":""},{"location":"CHANGELOG/#features_28","title":"Features","text":"<ul> <li>Oracle: Add methods for polling queries #637</li> <li>Chain: Add <code>getBalance</code> method (#655) (15147af)</li> <li>state channels: add reconnect method (#662) (9d8d1e8)</li> <li>state channels: add backchannel updates test#664</li> </ul>"},{"location":"CHANGELOG/#460-2019-08-28","title":"4.6.0 (2019-08-28)","text":""},{"location":"CHANGELOG/#bug-fixes_39","title":"Bug Fixes","text":"<ul> <li>Compiler: Fix <code>forceCompatibility</code> option (26beba8)</li> </ul>"},{"location":"CHANGELOG/#features_29","title":"Features","text":"<ul> <li>Lima: add preliminary support for lima</li> <li>ACI/Contract: Implement static-call for deploy transaction for ACI methods/Contract low lvl API (#630) (5b7eeb4)</li> </ul>"},{"location":"CHANGELOG/#notes","title":"Notes","text":"<p>GA support has been disabled until further notice due to node compatibility issues This version support aeternity node up to 5.0.0-rc.1</p>"},{"location":"CHANGELOG/#451-2019-08-22","title":"4.5.1 (2019-08-22)","text":""},{"location":"CHANGELOG/#refactor_3","title":"Refactor","text":"<ul> <li>Example  Add node info to AEPP (#620)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_40","title":"Bug Fixes","text":"<ul> <li>GA Fix GA account composition (211e409)</li> </ul>"},{"location":"CHANGELOG/#450-2019-08-20","title":"4.5.0 (2019-08-20)","text":""},{"location":"CHANGELOG/#bug-fixes_41","title":"Bug Fixes","text":"<ul> <li>Crypto: Fix <code>keypair</code> verification (#605) (83a52fb)</li> <li>RPC: Remove NodePool stamp from AE composition (#612) (21af2eb)</li> <li>state channels: add missing argument in onOnChainTx callback (#604) (165cfe8)</li> <li>state channels: fix awaitingOnChainTx state handler (#608) (8b7b65a)</li> <li>Swagger: Always throw error from <code>axios</code> error handler (#607) (0e5cf61)</li> </ul>"},{"location":"CHANGELOG/#features_30","title":"Features","text":"<ul> <li>MemoryAccount: Add validation of keypair (#594) (b8c2b20)</li> <li>state channels: handle BigNumbers with json-bigint (#596) (14eaa3d)</li> <li>state channels: send generic messages immediately (#600) (8ad7583)</li> <li>Generalize Account  Implement Generalized account support (#449)     <pre><code>const authContract = `YOUR_AUTH_CONTRACT`\n\n// Make current account Generalized\nawait client.createGeneralizeAccount(authFnName, authContract, [...authFnArguments]\n\n// Make spend transaction using GA\n// One Way\n    // encoded call data for auth contract\n    const callData = 'cb_...'\n    await client.spend(10000, receiverPub, { authData: { callData } })\n\n// or\n    // sdk will prepare callData itself\n    await client.spend(10000, receiverPub, { authData: { source: authContract, args: [...authContractArgs] } })\n</code></pre></li> </ul>"},{"location":"CHANGELOG/#440-2019-08-09","title":"4.4.0 (2019-08-09)","text":""},{"location":"CHANGELOG/#bug-fixes_42","title":"Bug Fixes","text":"<ul> <li>Package: update commander to version 3.0.0 (#597) (9aaa05c)</li> <li>Contract: Fix dry-run without account (227fc5c)</li> </ul>"},{"location":"CHANGELOG/#features_31","title":"Features","text":"<ul> <li>Contract: add ability to use call-static/dry-run without keyPair (#577) (c38edd9)</li> <li>AE: Add ability to make operation on specific account using <code>onAccount</code> option.    <code>Exm: await client.spend(1, receiver, { onAccount: 'PUBLIC_KEY' })     Add `onAccount` to `AENS`, `Contract`, `Oracle`.     Add tests for using specific account to Contract, ACI, Account.</code></li> <li>JSON:: Add serialization to JSON for bigNumbers</li> <li>MemoryAccount: Add validation of <code>keypair</code>  (#594) (b8c2b20)</li> <li>State Channels: persist connection by pinging every 10 seconds (#571) (a70f919)</li> </ul>"},{"location":"CHANGELOG/#430-2019-08-05","title":"4.3.0 (2019-08-05)","text":""},{"location":"CHANGELOG/#bug-fixes_43","title":"Bug Fixes","text":"<ul> <li>State Channels: Fix onChainTx event params (#566) (11c85eb)</li> <li>State Channels: Fix websocket url (#558) (33c1fd8)</li> <li>Swagger: Pass query params in case of get request (#570)</li> </ul>"},{"location":"CHANGELOG/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>State Channel: Do not include white space for outgoing websocket messages (#559)</li> </ul>"},{"location":"CHANGELOG/#features_32","title":"Features","text":"<ul> <li>ACI: Implement sophia <code>variant</code> type (#567) (8505dcf)</li> <li>Contract: add ability to use call-static/dry-run without keyPair (#577) (c38edd9)</li> <li>NodePool: Implement NodePool stamp (#574) (674166c)</li> <li>State Channel: make state channel compatible with aeternity@4.0.0 (#568) (0d0e09b)</li> <li>TxBuilder: Add helper for producing tx hash (#579) (e1b405e)</li> <li>AE Make all AE stamps composed with Accounts (#581)</li> </ul>"},{"location":"CHANGELOG/#docs_4","title":"Docs","text":"<ul> <li>ACI Add some additional clarification to <code>getContractInstance</code></li> </ul>"},{"location":"CHANGELOG/#420-2019-07-15","title":"4.2.0 (2019-07-15)","text":""},{"location":"CHANGELOG/#bug-fixes_44","title":"Bug Fixes","text":"<ul> <li>package: update libsodium-wrappers-sumo to version 0.7.5 (#541) (956ed75)</li> <li>rpc-server: Fix type 'object' check (#526) (48c42e4)</li> </ul>"},{"location":"CHANGELOG/#code-refactoring_7","title":"Code Refactoring","text":"<ul> <li>swagger: Speedup initialisation</li> <li>AENS: Remove unused param from claim method</li> <li>AENS: Fix exception if not waiting for mining(claim)</li> <li>Test: Add test for contract namespaces</li> </ul>"},{"location":"CHANGELOG/#features_33","title":"Features","text":"<ul> <li>Node: Add 4.0.0 node compatibility</li> <li>Compiler: Add compatibility with compiler 3.2.0</li> <li>Channel: Implement GA awareness of State Channels</li> </ul>"},{"location":"CHANGELOG/#410-2019-06-22","title":"4.1.0 (2019-06-22)","text":""},{"location":"CHANGELOG/#bug-fixes_45","title":"Bug Fixes","text":"<ul> <li>Node: Do not throw error if <code>internalUrl</code> not provided. Instead use <code>url</code> (#503) (053faae)</li> <li>TXBuilder: Fix payload serialization if you try to unpack and pack tx. (#498) (73552e5)</li> <li>TxValidator: Fix validation of state channel open transaction (#496) (325cc90)</li> </ul>"},{"location":"CHANGELOG/#features_34","title":"Features","text":"<ul> <li>ACI: Refactor ACI module. Split to separated files. (#505) (fb7bc00)</li> <li>Selector: If default account <code>address</code> not provided use the first</li> <li>ACI: Handle ACI without init function</li> <li>ACI: Automatically decide to send transaction on-chai or call-static. Add <code>options</code> object like last arguments of generate fn under <code>instance.methods</code> <pre><code>const instance = await client.getContractInstance(source)\n// Deploy contract\nawait.contract.init(100, 'test', options)\n//or\nawait.contract.deploy([100, 'test'], options)\n// Call function\nconst result = await instance.call('sum', [2, 5], options)\n//\n  // Automatically decide to send tx on-chain or call-static(dry-run) base on if function stateful or not\n  const result = await instance.methods.sum(2, 5, options)\n  // Manually make on-chain\n  const result = await instance.methods.sum.send(2, 5, options)\n  // Manually make call-static\n  const result = await instance.methods.sum.get(2, 5, options)\n//\n</code></pre></li> </ul>"},{"location":"CHANGELOG/#docs_5","title":"Docs","text":"<ul> <li>Usage:: Add instructions about how to include directly the <code>SDK</code> in a <code>html page</code></li> </ul>"},{"location":"CHANGELOG/#401-2019-06-13","title":"4.0.1 (2019-06-13)","text":""},{"location":"CHANGELOG/#bug-fixes_46","title":"Bug Fixes","text":"<ul> <li>RPC: Add contract contractDecodeCallResultAPI to RPC (#482) (7eb6bd8)</li> <li>README: Fix flavor link (#480)</li> </ul>"},{"location":"CHANGELOG/#code-refactoring_8","title":"Code Refactoring","text":"<ul> <li>Compiler: Fix compiler compatibility mechanism (#479) (78cc990)</li> <li>Utils: Move json-bigint implementation to <code>utils</code> (#486) (1538867)</li> </ul>"},{"location":"CHANGELOG/#build","title":"Build","text":"<ul> <li>webpack: Add another bundle(<code>dist/aepp-sdk.browser-script.js</code>) for using in <code>&lt;script&gt;</code> tag (#485)</li> </ul>"},{"location":"CHANGELOG/#400-2019-06-12","title":"4.0.0 (2019-06-12)","text":""},{"location":"CHANGELOG/#bug-fixes_47","title":"Bug Fixes","text":"<ul> <li>Ae: Fix exception when it used without Contract stamp</li> </ul>"},{"location":"CHANGELOG/#code-refactoring_9","title":"Code Refactoring","text":"<ul> <li>SCM: Update compatibility range for node: 3.0.1 - 4 and compiler 3.1.0 - 4 (#474) (a1494fd)</li> <li>Test: Simplify client creation</li> </ul>"},{"location":"CHANGELOG/#features_35","title":"Features","text":"<ul> <li>Docs chore(Docs): new docs (#370)</li> <li>Compiler: Add <code>getCompilerVersion</code> to compiler stamp</li> <li>ACI: Make compatible with compiler 3.1.0 (#457) (d92f2c7), closes #458</li> <li>ACI: Generate JS function proto for each of contract function (#439) (2f47b4d)</li> <li>Compiler/ACI: Make ACI compatible with compiler 3.0.0 (#441) (2a8eb1a)</li> <li>Node: Avoid usage of \"universal-url\" package (#434) (a8268d5)</li> <li>TX: encode payload as base64 (#460) (ad490af)</li> <li>TX_BUILDER: Fix bug related to contract fee calculation. (#472) (7214cfb)</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_14","title":"BREAKING CHANGES","text":"<ul> <li>DOCS Restructure and rework sdk documentation</li> <li>SCM: This change will make the release not compatible with older version of the node and compiler</li> <li>ACI: Change Contract low lvl API:</li> <li>change <code>contractDecodeData</code> interface from:<ul> <li><code>(type:String, data: String) =&gt; Any</code> to <code>(source: String, fn: String, callValue: String, callResult:String) =&gt; Any</code>. (<code>callResult</code> is <code>callType</code> from call result, can be <code>ok</code>, <code>revert</code>, ...)</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#341-2019-06-05","title":"3.4.1 (2019-06-05)","text":""},{"location":"CHANGELOG/#bug-fixes_48","title":"Bug Fixes","text":"<ul> <li>Deps: Update axios lib to 0.19.0 due to security issue (f951765)</li> </ul>"},{"location":"CHANGELOG/#340-2019-05-22","title":"3.4.0 (2019-05-22)","text":""},{"location":"CHANGELOG/#bug-fixes_49","title":"Bug Fixes","text":"<ul> <li>State Channels: Remove automatic pinging to fix browser compatibility (#432) (0700f3a)</li> </ul>"},{"location":"CHANGELOG/#features_36","title":"Features","text":"<ul> <li>Transaction Builder: Improve min fee calculation(Reduce the fee) (#424)</li> <li>AXIOS: Add ability to intercept error from axios (#431) <p>Added additional param to sdk initialization <code>axiosConfig</code></p> </li> </ul> <p>Example: <code>Universal({ axiosConfig: { config: { // axios config object }, errorHandler: (err) =&gt; throw err }})</code> * Transaction Builder: Implement vm/abi validation for contract/oracle tx based on consensus protocol version. Add custom verification based on transaction type (#425) (#426)</p>"},{"location":"CHANGELOG/#330-2019-05-17","title":"3.3.0 (2019-05-17)","text":""},{"location":"CHANGELOG/#bug-fixes_50","title":"Bug Fixes","text":"<ul> <li>AEP exampe: Fix contract in AEPP example (e2fec19) fix(AEP exampe): Fix contract in AEPP example</li> </ul>"},{"location":"CHANGELOG/#features_37","title":"Features","text":"<ul> <li>Consensus: Add function to get consensus version.  (#413) (46027cd)</li> <li>State Channels: Make state channels compatible with aeternity 3.0.0 (#415) (668e7f1)</li> <li>Transaction Builder: Add serializations for transactions introd\u2026 (#416) (fd7b8ce)</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_15","title":"BREAKING CHANGES","text":"<ul> <li>NODE Change compatibility from <code>2.3.0</code> to <code>3.0.0</code></li> </ul>"},{"location":"CHANGELOG/#321-2019-05-16","title":"3.2.1 (2019-05-16)","text":""},{"location":"CHANGELOG/#bug-fixes_51","title":"Bug Fixes","text":"<ul> <li>Joi: Add <code>JOI</code> browser comparability</li> </ul>"},{"location":"CHANGELOG/#320-2019-05-16","title":"3.2.0 (2019-05-16)","text":""},{"location":"CHANGELOG/#bug-fixes_52","title":"Bug Fixes","text":"<ul> <li>ACI: Add ability to pass zero address as number. (#396) (b5b5c61)</li> <li>ACI: Fix address type transformation when decoding data (#335) (e37cdfc)</li> <li>Contract: Add error handling(decoding) in low lvl contract API (#386) (e1fdce0)</li> <li>Dependencies: Use URL class instead of \"url\" package</li> <li>Dependencies: Use custom version of json-bigint</li> <li>Dependencies: Avoid usage of semver package and cleanup deps</li> <li>RPC: rpc client: Handle case if aepp opened without wallet</li> <li>Channels: Fix state channel test's</li> </ul>"},{"location":"CHANGELOG/#features_38","title":"Features","text":"<ul> <li>KEYSTORE: Add browser compatibility</li> <li>TX: Handle VM/ABI fields serialization and validation basaed on tx type and node version</li> <li>ACI: Add <code>contract</code>, <code>address</code>, <code>record</code> types argument/result transformation (#349) (0599d7d)</li> <li>WEBPACK: webpack configs: Mark all dependencies as external</li> <li>WEBPACK: Setup webpack-bundle-analyzer plugin</li> <li>ACI: Add <code>Option</code> sophia type to ACI (#390) (83f5279)</li> <li>ACI: Implement arguments validation for generic sophia types(list, map, tuple, record) (#384) (956e59e)</li> <li>ACI: Update due to compiler API changes (#331) (e047f3b)</li> <li>AE: Allow to spend % of balance. (#371) (f97a2ae), closes #336</li> <li>Aepp: Add Compiler to Aepp rpc methods. Update example app (#312) (9c72521)</li> <li>Aepp: Refactor Aepp example app. Allow to spend with payload and add reverse iframe approach.</li> <li>Compiler: Add decode CallData by source/bytecode (#354) (761f36b)</li> <li>Fortuna: Node 3.0.0 compatibility (#397) (17b78d5)</li> <li>RPC: Add <code>getNodeInfo</code> to AEPP stamp through RPC (#359) (2ddeea8)</li> <li>State Channels: Add cleanContractCalls method (#338) (778159a)</li> <li>State Channels: Ping every 10 seconds to persist connection (#324) (6d0e156), closes #276 #299 #300 #303 #302 #279 #275 #276 #299 #300</li> <li>State Channels: Remove endpoint param (#391) (8d9ea7e)</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_16","title":"BREAKING CHANGES","text":"<ul> <li>State Channels: Endpoint param is removed and no longer defaults to \"/channel\". This means that \"/channel\" (or other path) must be appendend to url para</li> </ul>"},{"location":"CHANGELOG/#310-2019-04-24","title":"3.1.0 (2019-04-24)","text":""},{"location":"CHANGELOG/#bug-fixes_53","title":"Bug Fixes","text":"<ul> <li>ACI: Fix address type transformation when decoding data (#335) (e37cdfc)</li> </ul>"},{"location":"CHANGELOG/#features_39","title":"Features","text":"<ul> <li>ACI: Add <code>contract</code>, <code>address</code>, <code>record</code> types argument/result transformation (#349) (0599d7d)</li> <li>ACI: Update due to compiler API changes (#331) (e047f3b)</li> <li>Aepp: Add Compiler to Aepp rpc methods. Update example app (#312) (9c72521)</li> <li>Compiler: Add decode CallData by source/bytecode (#354) (761f36b)</li> <li>RPC: Add getNodeInfo and getNetworkId to AEPP stamp through RPC (#359) (2ddeea8)</li> <li>State Channels: Add cleanContractCalls method (#338) (778159a)</li> <li>State Channels: Ping every 10 seconds to persist connection (#324) (6d0e156)</li> </ul>"},{"location":"CHANGELOG/#300-2019-04-17","title":"3.0.0 (2019-04-17)","text":""},{"location":"CHANGELOG/#bug-fixes_54","title":"Bug Fixes","text":"<ul> <li>ACI: Fix address type transformation when decoding data (#335) (e37cdfc)</li> </ul>"},{"location":"CHANGELOG/#features_40","title":"Features","text":"<ul> <li>TX_BUILDER: Channel tx serializations</li> <li>TxValidator: Add minGasPrice validation to contract transactions</li> <li>ACI: Update due to compiler API changes (#331) (e047f3b)</li> <li>Aepp: Add Compiler to Aepp rpc methods. Update example app (#312) (9c72521)</li> <li>State Channels: Add cleanContractCalls method (#338) (778159a)</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_17","title":"BREAKING CHANGES","text":"<ul> <li>ACI Remove 2.0.0 compiler compatibility</li> </ul>"},{"location":"CHANGELOG/#241-2019-04-17","title":"2.4.1 (2019-04-17)","text":""},{"location":"CHANGELOG/#features_41","title":"Features","text":"<ul> <li>ACI: Add transform decoded data for 'address' type</li> <li>AEPP: Add Compiler to Aepp rpc methods. Update example app</li> <li>Channel: Add call contract static support</li> <li>Channel: Add get contract state support</li> <li>Channel: Get full channel state support</li> <li>DOCS: Adjust ACI, Contract and Usage</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_55","title":"Bug Fixes","text":"<ul> <li>HTTP: Handle no response in http stamp error handler</li> <li>Crypto: Fix crypto <code>formatAddress</code></li> <li>Crypto: Move ADDRESS_FORMAT to crypto</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_18","title":"BREAKING CHANGES","text":"<ul> <li>Channels:</li> <li><code>channel.state()</code> now returns offchain state instead of last co-signed offchain transaction</li> <li><code>channel.update(...).state</code> has been renamed to <code>signedTx</code></li> <li><code>channel.withdraw(...).state</code> has been renamed to <code>signedTx</code></li> <li><code>channel.deposit(...).state</code> has been renamed to <code>signedTx</code></li> <li><code>channel.leave().state</code> has been renamed to <code>signedTx</code></li> <li><code>channel.createContract(...).state</code> has been renamed to <code>signedTx</code></li> <li><code>channel.callContract(...).state</code> has been renamed to <code>signedTx</code></li> </ul>"},{"location":"CHANGELOG/#240-2019-04-17","title":"2.4.0 (2019-04-17)","text":""},{"location":"CHANGELOG/#features_42","title":"Features","text":"<ul> <li>Chore: Install and configure <code>commitizen</code></li> <li>Crypto: Add <code>formatAddress</code> function to <code>Crypto</code></li> <li>Contract: Add Contract Compiler API stamp to <code>es/contract</code> (now using instead contract node API)</li> <li>Utils: Add basic <code>http</code> client stamp (<code>es/utils/http</code>)</li> <li>Contract: ACI stamp (New Contract interface base on contract ACI schema)     <pre><code>const contractIns = await client.getContractInstance(contractSourceCode)\nconsole.log(contract)\n {\n   interface: String, // Contract interface source code\n   aci: String, // Contract interface json schema\n   source: String, // Contract source code\n   compiled: String, // Compiled contract code\n   deployInfo: { address: contractAddress } // Object with deploy transaction,\n   // Function\n   compile: () =&gt; this, // Compile contract,\n   deploy: (init = [], options = { skipArgsConvert: false }) =&gt; this, // Deploy contract (compile before if needed)\n   call: (fn, params = [], options = { skipArgsConvert: false, skipTransformDecoded: false, callStatic: false } =&gt; CallRersult: Object // Call contract function\n }\n</code></pre></li> <li>Account: Extend  <code>Account.address()</code> with <code>accountFormatter</code> now you can do     <pre><code>export const ADDRESS_FORMAT = {\n  sophia: 1, // return address like `0xHEX_ADDRESS`\n  api: 2, // return address like `ak_9LJ8ne9tks78hTD2Tp571f7w2MJmzQMRsiZxKCkMA2d2Sbrc4`\n}\n\n//\n\nexport { ADDRESS_FORMAT } from 'es/account'\nawait account.address(format: ADDRESS_FORMAT) // default ADDRESS_FORMAT.api\n</code></pre></li> <li>Channel: Improve channel rpc usage</li> <li>Channel: Improve channel tests and error handling</li> <li>Channel: Improve state channel params handling</li> <li>Chain: Add ability to get <code>account/balance</code> on specific block <code>hash/height</code></li> <li>Universal: Add <code>{ compilerUrl }</code> to <code>Universal, Contract, Wallet</code> stamp initialization</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_56","title":"Bug Fixes","text":"<ul> <li>Contract: decode node error coming from contract <code>call</code> and <code>callStatic</code></li> <li>Chain: Throw native error instead of object in chain <code>chain.sendTransaction</code></li> <li>Crypto: fix arguments parsing in <code>Crypto.sing</code></li> <li>Crypto: Fix <code>name hash</code> function arguments parsing in <code>Crypto</code></li> </ul>"},{"location":"CHANGELOG/#breaking-changes_19","title":"BREAKING CHANGES","text":"<ul> <li>Contract: Remove <code>ContractNodeAPI</code> stamp</li> <li>Contract: Change Contract stamp API     <pre><code>1) Use Compiler instead of node API for encode/decode call-data and compile.\n2) Change Contract interface:\n - contractCallStatic (address, abi = 'sophia-address', name, { top, args = '()', call, options = {} } = {}) -&gt; (source, address, name, args = [], { top, options = {} } = {}))\n - contractCall (code, abi, address, name, { args = '()', options = {}, call } = {}) -&gt; (source, address, name, args = [], options = {})\n - contractDeploy (code, abi, { initState = '()', options = {} } = {}) -&gt; (code, source, initState = [], options = {})\n - contractEncodeCall (code, abi, name, args, call) -&gt; (source, name, args) // 'source' is -&gt; Contract source code or ACI interface source\n</code></pre></li> </ul>"},{"location":"CHANGELOG/#232-2019-03-04","title":"2.3.2 (2019-03-04)","text":""},{"location":"CHANGELOG/#features_43","title":"Features","text":"<ul> <li>Contract: Change default <code>gasPrice</code> from <code>1e6</code> to `1e9z</li> <li>AEPP: Fix <code>AEPP</code> example app</li> <li>Build: Force <code>image</code> pull before <code>builds</code></li> </ul>"},{"location":"CHANGELOG/#231-2019-02-22","title":"2.3.1 (2019-02-22)","text":""},{"location":"CHANGELOG/#features_44","title":"Features","text":"<ul> <li>Oracle: <code>Oracle</code> fee calculation</li> <li>Tx: <code>getAccountNonce</code> function to <code>tx</code> stamp</li> <li>TX_BUILDER: Change <code>FEE_BYTE_SIZE</code> from 1 to 8 bytes in <code>fee</code> calculation</li> <li>TX_BUILDER: Improve error handling in <code>tx</code> builder</li> </ul>"},{"location":"CHANGELOG/#230-2019-02-22","title":"2.3.0 (2019-02-22)","text":""},{"location":"CHANGELOG/#features_45","title":"Features","text":"<ul> <li>Node: <code>Minerva</code> comparability</li> <li>Utils: <code>Mnemonic</code> wallet implementation <code>es/utils/hd-wallet</code></li> <li>Oracle: Change Channel <code>legacy</code> API to <code>JSON RPC</code></li> <li>Oracle: Change default <code>gasPrice</code> to <code>1e6</code></li> <li>Oracle: Change <code>minFee</code> calculation, multiply min fee by <code>1e9</code></li> </ul>"},{"location":"CHANGELOG/#breaking-changes_20","title":"BREAKING CHANGES","text":"<ul> <li>Node: Change supported node version range to <code>1.4.0 &lt;= version &lt; 3.0.0</code></li> <li>This release contain changes from: 2.3.0-next, 2.2.1-next, 2.1.1-0.1.0-next, 2.1.0</li> </ul>"},{"location":"CHANGELOG/#230-next-2019-02-21","title":"2.3.0-next (2019-02-21)","text":""},{"location":"CHANGELOG/#features_46","title":"Features","text":"<ul> <li>Channel: <code>channel</code> <code>withdraw</code> and <code>deposit</code> methods</li> <li>TX_BUILDER: Change default <code>gasPrice</code> in <code>Contract</code> stamp and <code>Tx</code> stamp to <code>1e9</code></li> <li>TX: Fix <code>contract</code> tx <code>fee</code> calculation</li> <li>Chain: Refactor error handling in <code>sendTransaction</code> function</li> <li>Contract: Change default <code>gasPrice</code> to <code>1e9</code></li> <li>TX_BUILDER: Change <code>Fee</code> byte_size to 1</li> </ul>"},{"location":"CHANGELOG/#221-next-2019-02-21","title":"2.2.1-next (2019-02-21)","text":""},{"location":"CHANGELOG/#feature","title":"Feature","text":"<ul> <li>TX_BUILDER: Add <code>deserialization</code> schema for <code>Channel</code> transactions(<code>channelCreate</code>, <code>channelCloseMutual</code>, <code>channelDeposit</code>, <code>channelWithdraw</code>, <code>channelSettle</code>)</li> <li>Chain: Add <code>rawTx</code> and <code>verifyTx</code> to error from poll function(when you wait for transaction will mined)</li> <li>Chore: Depend on <code>bip39</code> from npm instead of git repo</li> <li>Channel: Change Channel <code>legacy</code> API to <code>JSON RPC</code></li> <li>TX_BUILDER: Change <code>minFee</code> calculation, multiply min fee by 10^9</li> </ul>"},{"location":"CHANGELOG/#211-010-next-2019-02-21","title":"2.1.1-0.1.0-next (2019-02-21)","text":""},{"location":"CHANGELOG/#bug-fixes_57","title":"Bug Fixes","text":"<ul> <li>Chore: Fix linter errors</li> </ul>"},{"location":"CHANGELOG/#210-2019-02-21","title":"2.1.0 (2019-02-21)","text":""},{"location":"CHANGELOG/#features_47","title":"Features","text":"<ul> <li>Node: <code>Minerva</code> comparability</li> <li>Utils: Add <code>Mnemonic</code> wallet implementation <code>es/utils/hd-wallet</code></li> </ul>"},{"location":"CHANGELOG/#breaking-changes_21","title":"BREAKING CHANGES","text":"<ul> <li>Node: Change supported node version range to <code>1.4.0 &lt;= version &lt; 3.0.0</code></li> </ul>"},{"location":"CHANGELOG/#200-2019-02-21","title":"2.0.0 (2019-02-21)","text":""},{"location":"CHANGELOG/#features_48","title":"Features","text":"<ul> <li>TX_BUILDER: Add <code>unpackedTx</code>, <code>txType</code> and <code>signature</code> to <code>validate</code> transaction function</li> <li>Contract: Add <code>top</code> param to contract <code>static call(dry-run)</code></li> <li>Contract: Add errors handling for <code>dry-run</code></li> <li>Docs: Add <code>keystore</code> docs</li> <li>Ae: Add <code>verify</code> options to <code>send</code> function which verify tx before broadcasting and throw error if tx is invalid</li> <li>Rpc: Add <code>dryRun</code> to <code>RPC</code> methods</li> <li>Rpc: Add <code>Oracle</code> transaction creation to <code>Aepp</code> rpc</li> <li>Docs: Add <code>tx builder</code> docs</li> <li>Docs: Add doc's for <code>utils/bytes</code> and tx builder <code>schema</code></li> <li>TX_BUILDER: refactor <code>calculateFee</code> function in <code>TxBuilder</code>(use BigNumber)</li> <li>TX_BUILDER: Extend response of <code>Oracle</code>, <code>Aens</code>, <code>Contrat</code> with <code>rawTx</code></li> <li>Ae: Change response of <code>send</code> function now it's and object with transaction data(hash, rawTxHash, ...)</li> <li>Chain: Move <code>Contract</code> and <code>Oracle</code> API wrapper's to <code>Chain</code> stamp</li> <li>Chore: Rename <code>epoch</code> in <code>CHANGELOG</code>, <code>README</code>, <code>HACKING</code></li> </ul>"},{"location":"CHANGELOG/#bug-fixes_58","title":"Bug Fixes","text":"<ul> <li>Rpc: <code>RpcServer</code>: Avoid storing of <code>window</code> in <code>instance</code> properties</li> <li>Chain: Disable <code>balance formatting</code> by default</li> <li>Chain: Move <code>verification of transaction</code> to <code>chain</code> stamp</li> <li>Node: Retrieve <code>node</code> version from <code>/api</code></li> <li>Chore: Fix unpack tx example in <code>bin/aecrypto.js</code></li> <li>Chore: Remove unused function's from <code>crypto.js</code></li> </ul>"},{"location":"CHANGELOG/#breaking-changes_22","title":"BREAKING CHANGES","text":"<ul> <li>TX: Remove old transaction builder <code>es/tx/js.js</code> (Please use <code>es/tx/builder</code> instead)</li> <li>Chore: Rename <code>es/epoch.js</code> to <code>es/node.js</code></li> <li>Chore: Rename <code>Oracle</code>, <code>Contract</code>, <code>Chain</code> API wrapper files from <code>epoch</code> to <code>node</code></li> <li>Chore: Rename <code>Contract</code> api wrapper method's</li> </ul>"},{"location":"CHANGELOG/#132-2019-02-01","title":"1.3.2 (2019-02-01)","text":""},{"location":"CHANGELOG/#features_49","title":"Features","text":"<ul> <li>Ae: Add <code>destroyInstance</code> function to <code>Ae</code> stamp which remove all listeners for RPC event's</li> <li>Docs: Add docs for <code>TransactionValidator</code> and <code>TxBuilder</code> stamp's</li> <li>Build: Add <code>TxBuilderHelper</code> to bundle</li> <li>Chore: Contract call static now using <code>dry-run</code> API</li> <li>Test: Improve test's for Transaction verification</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Docs: Adjust doc's for <code>Contract</code> and <code>Aens</code> stamp's</li> <li>Chore: Fix decoding of address from contract call</li> </ul>"},{"location":"CHANGELOG/#131-2019-01-29","title":"1.3.1 (2019-01-29)","text":""},{"location":"CHANGELOG/#features_50","title":"Features","text":"<ul> <li>Build: Remove KeyStore from bundle due to build issue(for now you can export it only using tree-shaking <code>import * as Keystore from '@aeternity/aepp-sdk/utils/keystore'</code>)</li> </ul>"},{"location":"CHANGELOG/#130-2019-01-29","title":"1.3.0 (2019-01-29)","text":""},{"location":"CHANGELOG/#features_51","title":"Features","text":"<ul> <li>Channel: Add support for State Channels</li> <li>TX_BUILDER: New transaction builder going through schema(build, unpack)</li> <li>TX_VALIDATOR: Add new stamp <code>TransactionValidator</code> which can verify your transaction</li> <li>Chore: Rename epoch to aeternity node(docker configs, some docs)</li> <li>Tx: Use new tx builder in TX stamp</li> <li>Contract: Set default values for amount and deposit to 0 for <code>contract</code> transaction</li> <li>Rpc: Improve RPC server</li> </ul>"},{"location":"CHANGELOG/#notes-and-known-issues","title":"Notes and known Issues","text":"<ul> <li>Old transaction builder <code>es/tx/js.js</code> will be removed in next major release.</li> </ul>"},{"location":"CHANGELOG/#121-2018-12-21","title":"1.2.1 (2018-12-21)","text":""},{"location":"CHANGELOG/#features_52","title":"Features","text":"<ul> <li>Chain: amount formatter</li> <li>Chain: amount format balance <code>client.balance('AK_PUBLICKEY', { format: true })</code></li> <li>Aepp: Oracle and Contracts API to Aepp stamp</li> <li>Chore: Use <code>prepare</code> instead of <code>postinstall-build</code> (thanks @davidyuk)</li> <li>Docs: Refreshed Docs: README.md + docs/usage.md</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_59","title":"Bug Fixes","text":"<ul> <li>Chr: Fix Import RLP package (thanks @davidyuk)</li> <li>Rpc: Fix for NetworkId propagation and override</li> <li>Tx: TxJS is not a stamp anymore, and instead: it exports helper functions</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_23","title":"BREAKING CHANGES","text":"<ul> <li>Tx: TxJs stamp (not a stamp anymore)</li> <li>Chain: balance now answer a formatted string composed of <code>AMOUNT + ' ' + unit</code> (eg. <code>10 exa</code> for 10 AE)</li> </ul>"},{"location":"CHANGELOG/#notes-and-known-issues_1","title":"Notes and known Issues","text":"<ul> <li>Chore: <code>10 exa</code> should be <code>10 ae</code></li> <li>Chain: format shouldn't be a flag, but a request for <code>unit</code> eg. <code>{ format:</code>ae<code>}</code></li> </ul>"},{"location":"CHANGELOG/#112-2018-12-15","title":"1.1.2 (2018-12-15)","text":""},{"location":"CHANGELOG/#feature_1","title":"Feature","text":"<ul> <li>Chore: isAddressValid check</li> <li>Tx: Tx Fee formulas</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_60","title":"Bug Fixes","text":"<ul> <li>Rpc: Fixed networkId propagation (and overriding on init of Flavors)</li> <li>Crypto: Fixed encodeBase58Check by feeding Buffered input</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_24","title":"BREAKING CHANGES","text":"<ul> <li>Chore: Compatibility with Node &gt;= 1.0.0 and &lt;= 1.1.0</li> </ul>"},{"location":"CHANGELOG/#111-2018-12-11","title":"1.1.1 (2018-12-11)","text":""},{"location":"CHANGELOG/#features_53","title":"Features","text":"<ul> <li>Rpc: Added a command to remove images after CI testing</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_61","title":"Bug Fixes","text":"<ul> <li>Rpc: Fix Testing</li> <li>Rpc: Fixed Oracle error for Wallet flavor</li> </ul>"},{"location":"CHANGELOG/#110-2018-12-11","title":"1.1.0 (2018-12-11)","text":""},{"location":"CHANGELOG/#features_54","title":"Features","text":"<ul> <li>Oracle: Oracles functionality and flavor</li> <li>Aepp: Simple example of aepp-in-aepp (see <code>/examples</code> folder)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_62","title":"Bug Fixes","text":"<ul> <li>Tx: Fixed issue with big numbers and <code>TX</code></li> </ul>"},{"location":"CHANGELOG/#101-2018-11-30","title":"1.0.1 (2018-11-30)","text":""},{"location":"CHANGELOG/#features_55","title":"Features","text":"<ul> <li>Node: ability to support Node range(s) using semver package (see https://www.npmjs.com/package/semver#ranges)</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_25","title":"BREAKING CHANGES","text":"<ul> <li>Node: Support for Node &gt;= 1.0.0 and &lt; 2.0.0</li> </ul>"},{"location":"CHANGELOG/#100-2018-11-30","title":"1.0.0 (2018-11-30)","text":""},{"location":"CHANGELOG/#features_56","title":"Features","text":"<ul> <li>Contract: Contract native Transactions</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_63","title":"Bug Fixes","text":"<ul> <li>BigNumber: Rolled back to bignumbers.js for easier fix with axios.get/post</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_26","title":"BREAKING CHANGES","text":"<ul> <li>Node: Support for Node &lt; 1.0.0</li> <li>Build: New NETWORK_ID (also used in docker/sdk.env for CI tests)</li> <li>Protocol: Encoding of transaction (and other objects) changed from base58check to base64check</li> </ul>"},{"location":"CHANGELOG/#notes-and-known-issues_2","title":"Notes and known Issues","text":"<ul> <li>Channel: State Channels have been excluded for problems with CI, will be included in next release</li> </ul>"},{"location":"CHANGELOG/#0250-011-2018-11-30","title":"0.25.0-0.1.1 (2018-11-30)","text":""},{"location":"CHANGELOG/#notes-and-known-issues_3","title":"Notes and known Issues","text":"<ul> <li>Chore: See [0.25.0-0.1.0]</li> </ul>"},{"location":"CHANGELOG/#0250-010-2018-11-30","title":"0.25.0-0.1.0 (2018-11-30)","text":""},{"location":"CHANGELOG/#features_57","title":"Features","text":"<ul> <li>Utils Parsing of <code>fee</code> using <code>bignum.js</code></li> <li>Account Add <code>networkId</code> as param to <code>Account</code> flavor(default: <code>ae_mainnet</code>)</li> <li>Tx Implement native build of <code>AENS</code> transaction.</li> <li>Keystore Update keystore for new requirements</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_27","title":"BREAKING CHANGES","text":"<ul> <li>CLI AE CLI and AE PROJECT CLI moved to separate repos and packages</li> <li>Node Support for &lt; 0.25.0</li> </ul>"},{"location":"CHANGELOG/#0250-010-next-2018-11-30","title":"0.25.0-0.1.0-next (2018-11-30)","text":""},{"location":"CHANGELOG/#features_58","title":"Features","text":"<ul> <li>Contract Contract type checked call (Ability to call contract using contract address)</li> <li>Contract Use ES methods instead of Ramda, where possible</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_64","title":"Bug Fixes","text":"<ul> <li>Contract Fixed keystore by adding a salt param for derivedKey function</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_28","title":"Breaking Changes","text":"<ul> <li>Contract Support for &lt; 0.25.0</li> <li>Contract Aens use domain <code>.test</code> instead of <code>.aet</code> (see here)</li> <li>Contract Use NETWORK_ID for signing (see here)</li> </ul>"},{"location":"CHANGELOG/#0240-020-2018-10-30","title":"0.24.0-0.2.0 (2018-10-30)","text":""},{"location":"CHANGELOG/#features_59","title":"Features","text":"<ul> <li>Rpc RPC Client improvements</li> <li>Rpc <code>onContract</code> Guard</li> <li>CLI  born</li> <li>CLI <code>Host</code> parameter became <code>Url</code>. (<code>-u</code> for hostname, <code>-U</code> for internal)</li> <li>CLI New keystore following these specifications: https://www.pivotaltracker.com/n/projects/2124891/stories/155155204</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_29","title":"BREAKING CHANGES","text":"<ul> <li>Chore The <code>Cli</code> flavor is now <code>Universal</code></li> <li>Chore the keypair keys changed from <code>{ pub, priv }</code> to <code>{ publicKey, secretKey }</code> for consistency with other systems using them (eg. AirGap and HD Wallet)</li> </ul>"},{"location":"CHANGELOG/#notes-and-known-issues_4","title":"Notes and known Issues","text":"<ul> <li>Chore CLI and AE PROJECT CLI will move to a separate package</li> </ul>"},{"location":"CHANGELOG/#0240-010-2018-10-23","title":"0.24.0-0.1.0 (2018-10-23)","text":""},{"location":"CHANGELOG/#features_60","title":"Features","text":"<ul> <li>Node Full support of Node-0.24.0</li> <li>CLI  Develop <code>decode base58</code> address command in <code>crypto</code> module</li> <li>CLI Add <code>nonce</code> param to all tx command's</li> <li>CLI Add <code>gas</code> param to <code>deploy</code> and <code>call</code> commands</li> <li>Tx Add ability to create <code>spend</code> transaction natively</li> <li>Keystore Implement <code>ethereum keystore</code> using <code>AES-126-CTR</code> and <code>SCRYPT</code> as key derivation function</li> <li>CLI Change <code>--privateKey</code> to <code>flag</code> on <code>ACCOUNT ADDRESS</code> command</li> <li>Build Change <code>node version</code> in <code>Dockerfile</code></li> <li>Node API endpoints to meet new Node specifications</li> <li>Chore Update <code>docco</code> config and change <code>rename</code> package to <code>recursive-rename</code></li> <li>Docs Improved documentation</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_30","title":"BREAKING CHANGES","text":"<ul> <li>Node Support for &lt; 0.24.0</li> <li>Keystore <code>ethereum keystore</code> usage will be removed in the next release</li> <li>CLI CLI will move to a separate package</li> </ul>"},{"location":"CHANGELOG/#0220-010-beta1-2018-10-02","title":"0.22.0-0.1.0-beta.1 (2018-10-02)","text":""},{"location":"CHANGELOG/#features_61","title":"Features","text":"<ul> <li>CLI Add CLI implementation</li> <li>Crypto nameId function for commitment hash calculations</li> <li>Node API endpoints to meet new Node specifications</li> <li>Tx Add Nonce calculation on SDK side</li> <li>Contract Add check for MAX_GAS in call and deploy contract</li> <li>Chore change hash prefix separator from $ to _</li> <li>Chore Add keywords ('SDK', 'CLI') to package.json</li> <li>CLI Link aecli to <code>./bin/aecli.js</code> in package.json (After \"npm link\" you can use CLI globally)</li> <li>Aens Wait until pre-claim transaction block was mined before send claim transaction</li> <li>Build Updated <code>webpack</code>, <code>webpack-cli</code> and added new dev deps accordingly</li> <li>Node Add Node Compatibility Check</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_65","title":"Bug Fixes","text":"<ul> <li>Crypto Fixes commitment hash calculations in naming system, to be <code>Hash(nameId(name) + name_salt)</code> instead of <code>Hash(Hash(name + name_salt))</code>.</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_31","title":"BREAKING CHANGES","text":"<ul> <li>Node Support for &lt; 0.22.0</li> </ul>"},{"location":"CHANGELOG/#0180-011-2018-07-31","title":"0.18.0-0.1.1 (2018-07-31)","text":""},{"location":"CHANGELOG/#features_62","title":"Features","text":"<ul> <li>Docs Lots of new documentation (prose and API)</li> <li>Docs Fancy badges to README</li> <li>Build Transitive dev dependencies for standard-loader not covered by pnpm</li> <li>Build CI Dockerfile to include pnpm</li> <li>Docs Fancy-shmancy diagram in README</li> <li>DocsGenerated documentation files since they are linked in static docs</li> <li>Build Switch from Yarn to pnpm for building</li> <li>Docs Structure of documentation</li> <li>Docs Generate Markdown from Docco</li> </ul>"},{"location":"CHANGELOG/#0180-010-2018-07-24","title":"0.18.0-0.1.0 (2018-07-24)","text":""},{"location":"CHANGELOG/#features_63","title":"Features","text":"<ul> <li>Node Support for Node 0.18.0 (changed endpoints)</li> <li>RPC Wallet/Aepp RPC support</li> <li>Contract Contract call result decoding support</li> <li>Docs Per-module API documentation (Markdown based on JSDoc)</li> <li>Docs More API documentation (still incomplete)</li> <li>Build SDK entrypoint factories (in <code>/es/ae/universal.js</code>)</li> <li>Build Module load path (src -&gt; es)</li> <li>Chore Lower mining rate (5s) in docker-compose</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_66","title":"Bug Fixes","text":"<ul> <li>Crypto Symmetric key encryption/decryption</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_32","title":"BREAKING CHANGES","text":"<ul> <li>Node Support for &lt; 0.18.0 (changed endpoints)</li> </ul>"},{"location":"CHANGELOG/#0150-010-2018-06-12","title":"0.15.0-0.1.0 (2018-06-12)","text":""},{"location":"CHANGELOG/#features_64","title":"Features","text":"<ul> <li>Node Legacy Swagger file loading</li> <li>Node Compatibility with &lt; 0.15.0</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_67","title":"Bug Fixes","text":"<ul> <li>Contract Contract unit state initialization</li> <li>Node Missing required parameter for name transfers (workaround for   Swagger file bug)</li> </ul>"},{"location":"CHANGELOG/#0140-010-2018-06-11","title":"0.14.0-0.1.0 (2018-06-11)","text":""},{"location":"CHANGELOG/#features_65","title":"Features","text":"<ul> <li>API New, opinionated top-level API</li> <li>API Rest of legacy API now uses new API as well</li> <li>API Generated API now encapsulated in <code>api</code> object</li> <li>API Automatic case conversion for remote parameter names</li> <li>API Remaining tests to use new API</li> <li>API Adapted new method of obtaining transaction hash, breaks compatibility (see   below)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_68","title":"Bug Fixes","text":"<ul> <li>API [GH-49]: Handle existing path components correctly</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_33","title":"BREAKING CHANGES","text":"<ul> <li>API Remove Oracle API (for the time being)</li> <li>API Remove Legacy API and tests</li> <li>API Remove Compatibility with older versions of Node which provide the transaction hash   the old way</li> </ul>"},{"location":"CHANGELOG/#0130-011-2018-05-24","title":"0.13.0-0.1.1 (2018-05-24)","text":""},{"location":"CHANGELOG/#features_66","title":"Features","text":"<ul> <li>Node Switch to curve ed25519 (from secp256k1) to align with Node protocol changes</li> <li>Node Generate basic API directly from Swagger files, also validate input data</li> <li>Build Compiled library now self-contained with all dependencies</li> <li>Build Use Webpack 4 based cross-platform (Node/Web) compilation</li> <li>Docs Package description now reads <code>SDK for the \u00e6ternity blockchain</code></li> <li>Chore Authors are now taken from <code>AUTHORS</code> instead of <code>package.json</code></li> <li>Docs Moved code examples from README to separate file in docs</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_34","title":"BREAKING CHANGES","text":"<ul> <li>Node Defunct scripts; will be brought back later</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_69","title":"Bug Fixes","text":"<ul> <li>Chore More consistent code examples</li> </ul>"},{"location":"compatibility/","title":"Compatibility Table","text":"<p>This package is expected to work in these environments:</p> Environment Comment nodejs&gt;=14.19, common js nodejs&gt;=14.19, mjs Browser using script tag, umd webpack@4 requires a fix to work with mjs build webpack-4 webpack@5 @vue/cli@4 (webpack@4) requires aliases to ESM versions of autorest deps vue-cli4 @vue/cli@5 (webpack@5) vue@3 AeSdk, Contract instances can't be reactive vue-3 create-react-app@4 (webpack@4) mjs build is not compatible with webpack@4 cra-webpack-4 create-react-app@5 (webpack@5) create-react-native-app@3 (webpack@4) mjs build is not compatible with webpack@4 cra-webpack-4 meteor@2 jest@27.5.1 requires an environment where Buffer is instanceof Uint8Array jest typescript&gt;=4.1, ideally &gt;=4.7 requires <code>tsconfig.json</code> adjustments typescript vite@3 requires <code>build.target: 'es2020'</code> and <code>bigint: true</code> in vite.config.js vite"},{"location":"quick-start/","title":"Quick Start","text":"<p>In this example we will send 1 AE coin from one account to another. For more specific information on setups with Frameworks and TypeScript, please refer to the installation instructions.</p>"},{"location":"quick-start/#1-specify-imports","title":"1. Specify imports","text":"<p>For the following snippets in the guide you need to specify multiple imports.</p> <pre><code>const {\n  AeSdk,\n  MemoryAccount,\n  Node,\n  CompilerHttp,\n  AE_AMOUNT_FORMATS,\n  generateKeyPair\n} = require('@aeternity/aepp-sdk')\n</code></pre>"},{"location":"quick-start/#2-create-a-keypair-for-sender","title":"2. Create a Keypair for sender","text":"<pre><code>const keypair = generateKeyPair()\nconsole.log(`Secret key: ${keypair.secretKey}`)\nconsole.log(`Public key: ${keypair.publicKey}`)\n</code></pre>"},{"location":"quick-start/#3-get-some-ae-using-the-faucet","title":"3. Get some AE using the Faucet","text":"<p>To receive some AE you can use the Faucet. Just paste sender's publicKey, hit <code>Top UP</code> and you'll immediately get some test coins.</p>"},{"location":"quick-start/#4-interact-with-the-ternity-blockchain","title":"4. Interact with the \u00e6ternity blockchain","text":"<p>This example shows:</p> <ul> <li>how to create an instance of the SDK using the <code>Aesdk</code> class</li> <li>how to spend (send) 1 AE from the account the SDK instance was initialized with to some other AE address</li> </ul> <pre><code>const NODE_URL = 'https://testnet.aeternity.io'\nconst COMPILER_URL = 'https://v7.compiler.aepps.com' // required for contract interactions\n// replace &lt;SENDER_SECRET_KEY&gt; with the generated secretKey from step 2\nconst senderAccount = new MemoryAccount('&lt;SENDER_SECRET_KEY&gt;');\n\n(async function () {\n  const node = new Node(NODE_URL)\n  const aeSdk = new AeSdk({\n    onCompiler: new CompilerHttp(COMPILER_URL),\n    nodes: [{ name: 'testnet', instance: node }],\n    accounts: [senderAccount],\n  })\n\n  // spend one AE\n  await aeSdk.spend(1, '&lt;RECIPIENT_PUBLIC_KEY&gt;', {\n    // replace &lt;RECIPIENT_PUBLIC_KEY&gt;, Ideally you use public key from Superhero Wallet you have created before\n    denomination: AE_AMOUNT_FORMATS.AE\n  })\n})()\n</code></pre> <p>Note:</p> <ul> <li>You may remove code from Step 2 as this serves only for one-time creation</li> <li>By default the <code>spend</code> function expects the amount to be spent in <code>aettos</code> (the smallest possible unit)</li> <li>Following the example snippet you would specify <code>AE</code> as denomination</li> <li>See Testnet Explorer and track your transactions</li> </ul>"},{"location":"transaction-options/","title":"Transaction options","text":"<p>For every transaction it is possible to provide an <code>options</code> object with one or multiple of the following attributes to the respective function that builds and broadcasts the transaction. Some of these are common and can be provided for each transaction type. Others are transaction specific and only relevant for a specific tx-type.</p> <p>The <code>options</code> object can be optionally passed to the respective function behind the last parameter, example: <pre><code>const sender = 'ak_...'\nconst recipient = 'ak_...'\nconst options = { onAccount: sender, denomination: 'ae' } // optional options object\n// aeSdk is an instance of the AeSdk class\nawait aeSdk.spend(1, recipient, options) // amount, recipient and (optional) options\n</code></pre></p> <p>Note:</p> <ul> <li>Without the <code>options</code> object the sender would be some other account selected in the instance of AeSdk and the recipient would receive <code>1 aetto</code> instead of <code>1 AE</code>.</li> </ul>"},{"location":"transaction-options/#common-options","title":"Common options","text":"<p>These options are common and can be provided to every tx-type:</p> <ul> <li><code>onAccount</code> (default: the first account defined in the account array of the SDK instance)</li> <li>You can specify the account that should be used to sign a transaction.</li> <li>Note:<ul> <li>The account needs to be provided to the SDK instance in order to be used for signing.</li> </ul> </li> <li><code>nonce</code> (default: obtain nonce of the account via node API)</li> <li>The default behavior might cause problems if you perform many transactions in a short period of time.</li> <li>You might want to implement your own nonce management and provide the nonce \"manually\".</li> <li>2 different strategies to use in order to determine the next nonce, See option <code>strategy</code> to learn more.</li> <li><code>strategy</code> (default: <code>max</code>)</li> <li>The strategy to obtain next nonce for an account via node API</li> <li>If set to <code>max</code>, then the greatest nonce seen in the account or currently in the transaction pool is incremented with 1 and returned.     If the strategy is set to <code>continuity</code>, then transactions in the mempool are checked if there are gaps - missing nonces that prevent transactions with greater nonces to get included</li> <li><code>ttl</code> (default: <code>0</code> if <code>buildTx</code> used, current height + <code>3</code> otherwise)</li> <li>Should be set if you want the transaction to be only valid until a certain block height is reached.</li> <li><code>fee</code> (default: calculated for each tx-type, based on network demand)</li> <li>The minimum fee is dependent on the tx-type.</li> <li>You can provide a higher fee to additionally reward the miners.</li> <li><code>innerTx</code> (default: <code>false</code>)</li> <li>Should be used for signing an inner transaction that will be wrapped in a <code>PayingForTx</code>.</li> <li><code>verify</code> (default: <code>false</code>)</li> <li>If set to true the transaction will be verified prior to broadcasting it.</li> <li><code>waitMined</code> (default: <code>true</code>)</li> <li>Wait for transactions to be mined.</li> <li>You can get the tx object that contains the tx-hash immediately by setting to <code>false</code> and should implement your own logic to watch for mined transactions.</li> </ul>"},{"location":"transaction-options/#tx-type-specific-options","title":"Tx-type specific options","text":"<p>The following options are sepcific for each tx-type.</p>"},{"location":"transaction-options/#contractcreatetx-contractcalltx","title":"ContractCreateTx &amp; ContractCallTx","text":"<ul> <li><code>amount</code> (default: <code>0</code>)</li> <li>To be used for providing <code>aettos</code> (or <code>AE</code> with respective denomination) to a contract related transaction.</li> <li><code>denomination</code> (default: <code>aettos</code>)</li> <li>You can specify the denomination of the <code>amount</code> that will be provided to the contract related transaction.</li> <li><code>gasLimit</code></li> <li>Maximum amount of gas to be consumed by the transaction. Learn more on How to estimate gas?</li> <li><code>gasPrice</code> (default: based on network demand, minimum: <code>1e9</code>)</li> <li>To increase chances to get your transaction included quickly you can use a higher gasPrice.</li> </ul>"},{"location":"transaction-options/#nameclaimtx","title":"NameClaimTx","text":"<ul> <li><code>nameFee</code> (default: calculated based on the length of the name)</li> <li>The fee in <code>aettos</code> that will be payed to claim the name.</li> <li>For bids in an auction you need to explicitely calculate the required <code>nameFee</code> based on the last bid</li> </ul>"},{"location":"transaction-options/#nameupdatetx","title":"NameUpdateTx","text":"<ul> <li><code>clientTtl</code> (default: <code>3600</code>, one hour)</li> <li>This option is an indicator for indexing tools to know how long (in seconds) they could or should cache the name information.</li> <li><code>nameTtl</code> (default: <code>180000</code>)</li> <li>This option tells the protocol the relative TTL based on the current block height.</li> <li><code>180000</code> is the maximum possible value</li> </ul>"},{"location":"transaction-options/#oracleregistertx","title":"OracleRegisterTx","text":"<ul> <li><code>queryFee</code> (default: <code>0</code>)</li> <li>The fee in <code>aettos</code> that the oracle requests in order to provide a response.</li> <li><code>oracleTtlValue</code> (default: <code>500</code>)</li> <li>The TTL of the oracle that defines its expiration.</li> <li><code>oracleTtlType</code> (default: <code>ORACLE_TTL_TYPES.delta</code>)</li> <li><code>ORACLE_TTL_TYPES.delta</code>: TTL value treated relative to a current block height</li> <li><code>ORACLE_TTL_TYPES.block</code>: TTL value treated as absolute block height</li> </ul>"},{"location":"transaction-options/#oraclequerytx","title":"OracleQueryTx","text":"<ul> <li><code>queryFee</code> (default: <code>0</code>)</li> <li>The fee in <code>aettos</code> that will be payed to the oracle.</li> <li><code>queryTtlValue</code> (default: <code>10</code>)</li> <li>The TTL of the query that defines its expiration. The oracle needs to respond before the <code>queryTtl</code> expires.</li> <li><code>queryTtlType</code> (default: <code>ORACLE_TTL_TYPES.delta</code>)</li> <li><code>ORACLE_TTL_TYPES.delta</code>: TTL value treated relative to a current block height</li> <li><code>ORACLE_TTL_TYPES.block</code>: TTL value treated as absolute block height</li> <li><code>responseTtlValue</code> (default <code>10</code>)</li> <li>The TTL of the response that defines its expiration. The response of the oracle will be garbage collected after its expiration.</li> <li><code>responseTtlType</code> (default <code>ORACLE_TTL_TYPES.delta</code>)</li> <li><code>ORACLE_TTL_TYPES.delta</code>: TTL value treated relative to a current block height</li> <li><code>ORACLE_TTL_TYPES.block</code>: TTL value treated as absolute block height</li> </ul>"},{"location":"transaction-options/#spendtx","title":"SpendTx","text":"<ul> <li><code>denomination</code> (default: <code>aettos</code>)</li> <li>You can specify the denomination of the <code>amount</code> that will be provided to the contract related transaction.</li> </ul>"},{"location":"transaction-options/#how-to-estimate-gas","title":"How to estimate gas?","text":"<ul> <li>As \u00e6pp developer, it is reasonable to estimate the gas consumption for a contract call using the dry-run feature of the node once and provide a specific offset (e.g. multiplied by 1.5 or 2) as default in the \u00e6pp to ensure that contract calls are mined. Depending on the logic of the contract the gas consumption of a specific contract call can vary and therefore you should monitor the gas consumption and increase the default for the respective contract call accordingly over time.</li> <li>By default, SDK estimates <code>gasLimit</code> using dry-run endpoint. This means an extra request that makes contract iterations slower, but it is more developer friendly (support of heavy requests without adjustments, and verbose error messages).</li> </ul>"},{"location":"contrib/","title":"Development","text":""},{"location":"contrib/#principles","title":"Principles","text":"<p>The Javascript SDK wraps the \u00e6ternity API exposed by Node's Swagger file. It aims to abstract the API, while still providing low-level access to it's endpoints, when necessary.</p> <p>It uses the following Javascript technologies and principles:</p> <ul> <li>JavaScript the Good Parts (because Crockford is always right)</li> <li>ES6 modules, using <code>export</code> and <code>import</code></li> <li>Promises using ES7 async/await syntax, where applicable</li> <li>Statelessness wherever possible</li> <li>webpack and the Babel</li> <li>Loose coupling of modules to enable tree-shaking</li> <li>Convention over configuration</li> <li>\"Easy things should be easy, and hard things should be possible.\" source -- Larry Wall</li> <li>Support for<ul> <li>module access, enabling tree-shaking</li> <li>direct use in node scripts through bundling</li> <li>direct use in browser <code>&lt;script&gt;</code> tags through bundling</li> <li>bundling through webpack</li> </ul> </li> </ul>"},{"location":"contrib/#requirements","title":"Requirements","text":"<p>aepp-sdk is transpiled to EcmaScript 5 through WebPack, using Babel and is expected to work in any sufficiently new version of Node.js or modern web browser.</p>"},{"location":"contrib/#contributing","title":"Contributing","text":"<ol> <li>Clone the application</li> <li>Make sure your editor/IDE can read and use the <code>.editorconfig</code> file</li> <li>Start hacking (and don't forget to add test for whatever you'll be building).</li> </ol>"},{"location":"contrib/#documenting","title":"Documenting","text":"<p>Apart from documenting features and code, there is also documentation automatically generated using TypeDoc for documenting TS files and a script for documenting examples and code partials.</p> <pre><code>#generate examples and api documentation\nnpm run docs:examples &amp;&amp; npm run docs:api\n</code></pre>"},{"location":"contrib/#building","title":"Building","text":"<p>aepp-sdk is built using npm. In order to build a production version, launch the <code>build</code> command.</p> <pre><code>npm install\nnpm run build\n</code></pre> <p>Note: If you experience errors during the building, you might need to install build tools for your OS.</p> <p>Windows: Windows Build Tools <pre><code>npm install -g windows-build-tools\n</code></pre></p> <p>Ubuntu / Debian: Build Essential <pre><code>sudo apt-get update\nsudo apt-get install build-essential\n</code></pre></p> <p>Mac</p> <p>Download Xcode from AppStore, then run <pre><code>xcode-select --install\n</code></pre></p>"},{"location":"contrib/#generate-bundle-report","title":"Generate bundle report","text":"<pre><code>npx webpack --env REPORT\n</code></pre>"},{"location":"contrib/#testing","title":"Testing","text":"<p>To test, launch the <code>test</code> command. This will run mocha's tests locally.</p> <pre><code>npm test\n</code></pre> <p>This repository also includes a docker-compose file, to allow you to run your own \u00e6ternity node locally. If you want to do so, from the root of the project:</p> <ol> <li>Run <code>docker-compose up node</code></li> <li>Congrats! you're now running your own \u00e6ternity node locally.</li> </ol> <p>The WebPack compilation provides two different build artifacts in <code>dist/</code>, one for Node.js and one for browsers. When referencing aepp-sdk through any modern build tooling, it should pick the right one automatically through the entry points defined in <code>package.json</code>.</p>"},{"location":"contrib/#installation-linking","title":"Installation / Linking","text":"<p>In order to add a local development version of aepp-sdk to a project, <code>npm link</code>1 can be used.</p>"},{"location":"contrib/#releasing","title":"Releasing","text":"<p>How to release a new version</p>"},{"location":"contrib/releases/","title":"Releases","text":"<p>This document describes the requirements and the process of creating releases of aepp-sdk to npmjs.com.</p>"},{"location":"contrib/releases/#prerequisites","title":"Prerequisites","text":"<p>A user wanting to release a new version needs to be a member of the <code>@aeternity</code> organization on npmjs.com. An existing member with write access needs to invite them in order to achieve this. In addition, the user needs to activate any means of 2-factor authentication because the <code>aepp-sdk</code> package is set up to only accept new versions if a second factor for authentication is in use.</p> <p>As new releases should only happen from release branch merges to the <code>master</code> branch of the repository on GitHub followed by a signed tag push, the user also needs direct write access to the repository on GitHub. Normally, this can be achieved by first adding them to the \u00e6ternity organization and then to the sdk team, which gives automatic write access.</p>"},{"location":"contrib/releases/#branching-out","title":"Branching Out","text":"<p>As aepp-sdk follows the git-flow strategy for development, the release process is modelled after that strategy accordingly, with a few additions.</p> <p>Branch out from <code>develop</code> to a dedicated release branch denoting the target version number, e.g. <code>release/v2.3.4</code>.</p>"},{"location":"contrib/releases/#preparing-a-pre-release","title":"Preparing a Pre-Release","text":"<p>If Testnet is not yet targeting the latest Node version, but you're \"ready to release\", you can do a pre-release for the latest version, tagging the release as <code>@next</code> on npmjs.</p> <p>To do this, You can follow the steps listed below, while keeping the <code>next</code> portion in both <code>CHANGELOG.md</code> and <code>package.json</code> files.</p>"},{"location":"contrib/releases/#preparing-a-release","title":"Preparing a Release","text":"<p>On the release branch, remove the <code>next</code> portion of the <code>version</code> string in <code>package.json</code>.</p> <p>Execute <code>npm run release</code> to automatically</p> <ul> <li>bump version number in package.json and package-lock.json (according to    Semantic Versioning)</li> <li>output changes to CHANGELOG.md</li> <li>commit package-lock.json and package.json and CHANGELOG.md</li> </ul> <p>Next, <code>git diff</code> the release, branch a <code>release/vX.X.X</code> (where <code>vX.X.X</code> is your latest release) against <code>master</code> and validate that all changes are covered in the changelog. You can find more instructions on how to maintain a CHANGELOG here:</p> <ul> <li>https://keepachangelog.com</li> </ul>"},{"location":"contrib/releases/#pr-against-master","title":"PR against <code>master</code>","text":"<p>Create a pull request against <code>master</code> and have it peer reviewed thoroughly. As all changes should've been reviewed before when they were merged to <code>develop</code>, emphasize on security-related changes and small changes pushed to <code>develop</code> separately.</p>"},{"location":"contrib/releases/#merging","title":"Merging","text":"<p>Once the integration build has successfully completed (with or without additional fixes), merge (without squash) the branch into <code>master</code>. This allows <code>master</code> to be comprised of release commits exclusively, so every commit on master corresponds to exactly one released (or at least, tagged) version of aepp-sdk, respectively.</p>"},{"location":"contrib/releases/#build-release-and-tag","title":"Build, Release and Tag","text":"<p>Update the local working copy to a local tracking branch of <code>master</code> and update. Optionally, wait for the CI build to finish and execute a last <code>npm run test</code> locally.</p> <p>Important: Because <code>npm publish</code> will use the local files on disk for releasing, perform a full clean and build in order to release to npmjs.com!</p> <ol> <li>Cleanup - run <code>git clean -ffdx</code> to completely wipe out your workspace of    files not in the repository. This might wipe out files you still need, so    consider a separate clone of the project!</li> <li>Execute <code>npm run prepublishOnly</code> to generate Documentation for the API and    the SDK codebase, optionally followed by <code>npm pack</code> and investigate the    resulting tarball's contents. This tarball resembles what    users will actually download from npmjs.com once the release is completed!</li> <li>Execute <code>npm publish</code> and follow the on-screen instructions</li> </ol> <p>Important: If you are releasing a Pre-Release (AKA <code>next</code>), make sure to tag the release as <code>next</code> using the command <code>npm publish --tag next</code>.</p> <p>At this point, the release should already be in npmjs.com. The final step is to also tag the release on GitHub and push the tag, which requires direct write access.</p> <ol> <li><code>git tag vX.X.X</code></li> <li><code>git push tag vX.X.X</code></li> </ol> <p>Recommendation: Use signed tags using the -s option to increase community's trust in the project!</p>"},{"location":"contrib/releases/#merging-back-into-develop","title":"Merging Back into <code>develop</code>","text":"<p>At this point, it is important to synchronize <code>develop</code> with any changes that have happened after branching out to the release branch. Create a new branch called <code>realign/vX.X.X</code> from <code>master</code> (where <code>vX.X.X</code> is your latest release) and open a Pull Request towards <code>develop</code> and resolve conflicts, if needed.</p> <p>This concludes the release process and the development cycle.</p>"},{"location":"examples/node/account-generalized/","title":"Create and use Generalized Accounts","text":""},{"location":"examples/node/account-generalized/#introduction","title":"Introduction","text":"<p>The whole script is located in the repository and this page explains in detail how to:</p> <ul> <li>initialize an instance of the SDK with a random account,</li> <li>top up generated account using faucet on testnet,</li> <li>make it a generalized account,</li> <li>transfer AE using generalized account.</li> </ul>"},{"location":"examples/node/account-generalized/#1-create-sdk-instance-and-generate-an-account","title":"1. Create SDK instance and generate an account","text":"<pre><code>import {\n  AeSdk, Node, MemoryAccount, AccountGeneralized, CompilerHttp, MIN_GAS_PRICE,\n} from '@aeternity/aepp-sdk';\n\nconst aeSdk = new AeSdk({\n  nodes: [{ name: 'testnet', instance: new Node('https://testnet.aeternity.io') }],\n  accounts: [MemoryAccount.generate()],\n  onCompiler: new CompilerHttp('https://v7.compiler.aepps.com'),\n});\nconst { address } = aeSdk;\n</code></pre>"},{"location":"examples/node/account-generalized/#2-top-up-generated-account-using-faucet-on-testnet","title":"2. Top up generated account using faucet on testnet","text":"<pre><code>const { status } = await fetch(`https://faucet.aepps.com/account/${address}`, { method: 'POST' });\nconsole.assert(status === 200, 'Invalid faucet response code', status);\n</code></pre>"},{"location":"examples/node/account-generalized/#3-create-a-generalized-account","title":"3. Create a Generalized Account","text":"<p><pre><code>console.log('Account info before making generalized', await aeSdk.getAccount(address));\nconst sourceCode = `contract BlindAuth =\n  stateful entrypoint authorize(shouldAuthorize: bool, _: int) : bool =\n    switch(Auth.tx_hash)\n      None    =&gt; abort(\"Not in Auth context\")\n      Some(_) =&gt; shouldAuthorize\n`;\n</code></pre> Authorize entrypoint doesn't implement any specific logic, it just returns the argument. It means that anybody can make a transaction on behalf of this account. You can implement an arbitrary validation logic in authorize entrypoint based on the contract state, transaction to approve, and call arguments. Also, you can involve custom signing algorithms. <pre><code>const { gaContractId } = await aeSdk.createGeneralizedAccount('authorize', [], { sourceCode });\nconsole.log('Attached contract address', gaContractId);\n</code></pre> You can pass <code>bytecode</code> and <code>aci</code> options instead of <code>sourceCode</code> to don't depend on compiler. <pre><code>console.log(await aeSdk.getAccount(address));\n</code></pre> Note that account kind changed from <code>basic</code> to <code>generalized</code>, added <code>contractId</code>, <code>authFun</code> fields.</p>"},{"location":"examples/node/account-generalized/#4-switch-sdk-instance-to-accountgeneralized","title":"4. Switch SDK instance to AccountGeneralized","text":"<p>After making the account generalized, the node would stop accepting transactions signed using the private key of that account. So, we need to replace the instance of MemoryAccount with AccountGeneralized. <pre><code>aeSdk.removeAccount(address);\naeSdk.addAccount(new AccountGeneralized(address), { select: true });\n</code></pre></p>"},{"location":"examples/node/account-generalized/#5-transfer-ae","title":"5. Transfer AE","text":"<p>Calling the <code>spend</code> function will create, sign and broadcast a <code>SpendTx</code> to the network using AccountGeneralized. It requires <code>authData</code> option. <pre><code>console.log('balance before', await aeSdk.getBalance(address));\nconst authData = { sourceCode, args: [true, 42] };\nconst recipient = 'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E';\nawait aeSdk.spend(1e18, recipient, { authData });\nconsole.log('balance after', await aeSdk.getBalance(address));\n</code></pre> Note arguments of authorize entrypoint have to be unique, otherwise the transaction would be rejected by the node with \"Invalid tx\" message. Therefore, in this example a transaction with the same authorize arguments can't be submitted more than once. As a workaround \"authorize\" entrypoint accepts a number that acts as a nonce.</p> <p>You may need to put a signed hash of a transaction to <code>authData</code>, for this purpose you need to pass a callback in <code>authData</code>. Use <code>buildAuthTxHash</code> method to get a hash equal to <code>Auth.tx_hash</code> in an authorize entrypoint. <pre><code>await aeSdk.spend(2e18, recipient, {\n  async authData(transaction) {\n    const fee = 10n ** 14n;\n    const gasPrice = MIN_GAS_PRICE;\n    const authTxHash = await aeSdk.buildAuthTxHash(transaction, { fee, gasPrice });\n    console.log('Auth.tx_hash', authTxHash.toString('hex'));\n    authData.args[1] += 1;\n    Object.assign(authData, { fee, gasPrice });\n    return authData;\n  },\n});\nconsole.log('balance after 2nd spend', await aeSdk.getBalance(address));\n</code></pre></p>"},{"location":"examples/node/contract-interaction/","title":"Compile &amp; Deploy a Sophia Smart Contract","text":""},{"location":"examples/node/contract-interaction/#introduction","title":"Introduction","text":"<p>The whole script is located in the repository and this page explains in detail how to:</p> <ul> <li>deal with the different phases of compiling Sophia contracts to bytecode</li> <li>deploy the bytecode to get a callable contract address</li> <li>invoke the deployed contract on the \u00e6ternity blockchain</li> </ul>"},{"location":"examples/node/contract-interaction/#1-specify-imports","title":"1. Specify imports","text":"<p>You need to import <code>AeSdk</code>, <code>Node</code> and <code>MemoryAccount</code> classes from the SDK. <pre><code>import {\n  AeSdk, CompilerHttp, Node, MemoryAccount,\n} from '@aeternity/aepp-sdk';\n</code></pre> Note:</p> <ul> <li>You need to have the SDK installed via <code>npm i @aetenity/aepp-sdk -g</code> to run that example code.</li> </ul>"},{"location":"examples/node/contract-interaction/#2-define-constants","title":"2. Define constants","text":"<p>The following constants are used in the subsequent code snippets. typically you read the source code from a separate .aes file <pre><code>const CONTRACT_SOURCE_CODE = `\ncontract Multiplier =\n  record state = { factor: int }\n  entrypoint init(f : int) : state = { factor = f }\n  stateful entrypoint setFactor(f : int): int =\n    put(state{ factor = f })\n    f * 10\n  entrypoint multiplyBy(x : int) = x * state.factor\n`;\nconst ACCOUNT_SECRET_KEY = '9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200';\nconst NODE_URL = 'https://testnet.aeternity.io';\nconst COMPILER_URL = 'https://v7.compiler.aepps.com';\n</code></pre> Note:</p> <ul> <li>The secret key of the account is pre-funded and only used for demonstration purpose<ul> <li>You should replace it with your own keypair (see    Create a Keypair)</li> </ul> </li> <li>In case the account runs out of funds you can always request AE using the Faucet</li> </ul>"},{"location":"examples/node/contract-interaction/#3-create-object-instances","title":"3. Create object instances","text":"<pre><code>const account = new MemoryAccount(ACCOUNT_SECRET_KEY);\nconst node = new Node(NODE_URL);\nconst aeSdk = new AeSdk({\n  nodes: [{ name: 'testnet', instance: node }],\n  accounts: [account],\n  onCompiler: new CompilerHttp(COMPILER_URL),\n});\n</code></pre>"},{"location":"examples/node/contract-interaction/#4-get-contract-instance","title":"4. Get contract instance","text":"<p>Knowing the source code allows you to initialize a contract instance and interact with the contract in a convenient way. <pre><code>console.log(CONTRACT_SOURCE_CODE);\nconst contract = await aeSdk.initializeContract({ sourceCode: CONTRACT_SOURCE_CODE });\n</code></pre></p>"},{"location":"examples/node/contract-interaction/#5-compile-the-contract","title":"5. Compile the contract","text":"<p>The <code>$compile</code> function sends a raw Sophia contract as string to the HTTP compiler for bytecode compilation. In the future this will be done without talking to the node, but requiring a bytecode compiler implementation directly in the SDK. <pre><code>const bytecode = await contract.$compile();\nconsole.log(`Obtained bytecode ${bytecode}`);\n</code></pre></p>"},{"location":"examples/node/contract-interaction/#6-deploy-the-contract","title":"6. Deploy the contract","text":"<p>Invoking <code>$deploy</code> on the contract instance will result in the <code>CreateContractTx</code> being created, signed (using the secretKey of the previously defined <code>MemoryAccount</code>) and broadcasted to the network. It will be picked up by the miners and written to the chain. <pre><code>const deployInfo = await contract.$deploy([5]);\nconsole.log(`Contract deployed at ${deployInfo.address}`);\n</code></pre> Note:</p> <ul> <li>Sophia contracts always have an <code>init</code> function which needs to be invoked.</li> <li>The SDK generates the required <code>calldata</code> for the provided arguments by    <code>@aeternity/aepp-calldata</code> package.</li> </ul>"},{"location":"examples/node/contract-interaction/#7-call-a-contract-function","title":"7. Call a contract function","text":"<p>Once the <code>ContractCreateTx</code> has been successfully mined, you can attempt to invoke any public function (aka <code>entrypoint</code> in Sophia) defined within it. <pre><code>await contract.setFactor(6);\n</code></pre> Note:</p> <ul> <li><code>setFactor</code> is a stateful entrypoint that changes to the contract's state so <code>contract</code>    broadcasting the transaction to be mined</li> </ul>"},{"location":"examples/node/contract-interaction/#8-call-a-contract-function-via-dry-run","title":"8. Call a contract function via dry-run","text":"<p>You can use <code>callStatic</code> option which performs a <code>dry-run</code> of the transaction which allows you to get the result without having to mine a transaction. <pre><code>let call = await contract.setFactor(7, { callStatic: true });\n</code></pre></p>"},{"location":"examples/node/contract-interaction/#9-decode-the-call-result","title":"9. Decode the call result","text":"<p>The execution result, if successful, will be an FATE-encoded result value. The <code>decodedResult</code> property will contain the result value decoded using calldata package. <pre><code>console.log(`setFactor execution result: ${call.decodedResult}`);\n</code></pre></p>"},{"location":"examples/node/contract-interaction/#10-call-a-contract-non-stateful-entrypoint-via-dry-run","title":"10. Call a contract non-stateful entrypoint via dry-run","text":"<p><pre><code>call = await contract.multiplyBy(8);\nconsole.log(`multiplyBy execution result: ${call.decodedResult}`);\n</code></pre> Note:</p> <ul> <li>The <code>contract</code> automatically chooses to perform a dry-run call as <code>multiplyBy</code> is a    non-stateful entrypoint</li> <li>if <code>multiplyBy</code> would be a <code>stateful entrypoint</code> the transaction would be broadcasted to    the network and picked up by miners</li> </ul>"},{"location":"examples/node/paying-for-contract-call-tx/","title":"InnerTx: ContractCallTx","text":""},{"location":"examples/node/paying-for-contract-call-tx/#introduction","title":"Introduction","text":"<p>The whole script is located in the repository and this page explains in detail how to:</p> <ul> <li>Create and sign a <code>ContractCallTx</code> with the <code>innerTx</code> option for an account that has no    balance.</li> <li>Wrap the signed <code>ContractCallTx</code> in a <code>PayingForTx</code> using an account with balance to pay the    fees of the inner transaction.</li> </ul> <p>Note:</p> <ul> <li>This can be done for any transaction type!</li> </ul>"},{"location":"examples/node/paying-for-contract-call-tx/#usecases","title":"UseCases","text":"<p>This functionality allows every service to let their users interact with their decentralized aepp without having them to buy AE by covering their fees.</p> <p>Examples:</p> <ul> <li>Game developers that want to quickly onboard new users.</li> <li>Governance \u00e6pps that want people to vote on important proposals without having them to pay    anything.</li> <li>Custodians that want to offer an additional services to cover the transaction fees of their    clients.</li> <li>... many more!</li> </ul>"},{"location":"examples/node/paying-for-contract-call-tx/#1-specify-imports","title":"1. Specify imports","text":"<p>You need to import <code>AeSdk</code>, <code>Node</code> and <code>MemoryAccount</code> classes from the SDK. Additionally you import the <code>generateKeyPair</code> utility function to generate a new keypair. <pre><code>import {\n  AeSdk, CompilerHttp, Node, MemoryAccount, Tag,\n} from '@aeternity/aepp-sdk';\n</code></pre> Note:</p> <ul> <li>You need to have the SDK installed via <code>npm i @aetenity/aepp-sdk -g</code> to run that example code.</li> </ul>"},{"location":"examples/node/paying-for-contract-call-tx/#2-define-constants","title":"2. Define constants","text":"<p>The following constants are used in the subsequent code snippets. <pre><code>const PAYER_ACCOUNT_SECRET_KEY = '9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200';\nconst NODE_URL = 'https://testnet.aeternity.io';\nconst COMPILER_URL = 'https://v7.compiler.aepps.com';\nconst CONTRACT_ADDRESS = 'ct_iy86kak8GGt4U5VjDFNQf1a9qjbyxKpmGVNe3UuKwnmcM6LW8';\nconst CONTRACT_SOURCE_CODE = `\n@compiler &gt;= 6\n\ncontract PayingForTxExample =\n\n    record state = { last_caller: option(address) }\n\n    entrypoint init() =\n        { last_caller = None }\n\n    stateful entrypoint set_last_caller() =\n        put(state{last_caller = Some(Call.caller)})\n\n    entrypoint get_last_caller() : option(address) =\n        state.last_caller\n`;\n</code></pre> Note:</p> <ul> <li>The secret key of the account is pre-funded and only used for demonstration purpose<ul> <li>You can replace it with your own keypair (see    Create a Keypair)</li> <li>In case the account runs out of funds you can always request AE using the Faucet</li> </ul> </li> <li>The contract is already deployed at the defined address.</li> <li>The <code>NEW_USER_KEYPAIR</code> is used to call the contract. The <code>PayingForTx</code> allows the new user to    perform a contract call without having any funds.</li> </ul>"},{"location":"examples/node/paying-for-contract-call-tx/#3-create-object-instances","title":"3. Create object instances","text":"<pre><code>const payerAccount = new MemoryAccount(PAYER_ACCOUNT_SECRET_KEY);\nconst newUserAccount = MemoryAccount.generate();\nconst node = new Node(NODE_URL);\nconst aeSdk = new AeSdk({\n  nodes: [{ name: 'testnet', instance: node }],\n  accounts: [payerAccount, newUserAccount],\n  onCompiler: new CompilerHttp(COMPILER_URL),\n});\n</code></pre>"},{"location":"examples/node/paying-for-contract-call-tx/#4-create-and-sign-contractcalltx-on-behalf-of-new-user","title":"4. Create and sign <code>ContractCallTx</code> on behalf of new user","text":"<p>Currently there is no high-level API available that allows you to create and sign the <code>ContractCallTx</code> by invoking the generated contract method on the contract instance that you typically use for contract calls.</p> <p>Following 4 steps need to be done:</p> <ol> <li>Initialize a contract instance by the source code and the contract address.</li> <li>Create calldata by calling the <code>encode</code> function providing the contract name, the name of     the <code>entrypoint</code> to call as well as the required params.<ul> <li>The <code>entrypoint</code> with the name <code>set_latest_caller</code> doesn't require any params so you    can provide an empty array</li> </ul> </li> <li>Create the <code>ContractCreateTx</code> by providing all required params.<ul> <li>You could omit <code>amount</code>, <code>gasLimit</code> and <code>gasPrice</code> if you choose to stick to the default    values (see    transaction options)</li> </ul> </li> <li>Sign the transaction by providing <code>innerTx: true</code> as transaction option.<ul> <li>The transaction will be signed in a special way that is required for inner transactions.</li> </ul> </li> </ol> <pre><code>const contract = await aeSdk.initializeContract(\n  { sourceCode: CONTRACT_SOURCE_CODE, address: CONTRACT_ADDRESS },\n);\nconst calldata = contract._calldata.encode('PayingForTxExample', 'set_last_caller', []);\nconst contractCallTx = await aeSdk.buildTx({\n  tag: Tag.ContractCallTx,\n  callerId: newUserAccount.address,\n  contractId: CONTRACT_ADDRESS,\n  amount: 0,\n  gasLimit: 1000000,\n  gasPrice: 1500000000,\n  callData: calldata,\n});\nconst signedContractCallTx = await aeSdk.signTransaction(\n  contractCallTx,\n  { onAccount: newUserAccount, innerTx: true },\n);\n</code></pre>"},{"location":"examples/node/paying-for-contract-call-tx/#5-create-sign-broadcast-the-payingfortx-as-payer","title":"5. Create, sign &amp; broadcast the <code>PayingForTx</code> as payer","text":"<pre><code>const payForTx = await aeSdk.payForTransaction(signedContractCallTx, { onAccount: payerAccount });\nconsole.log(payForTx);\n</code></pre>"},{"location":"examples/node/paying-for-contract-call-tx/#6-check-that-last-caller-is-the-new-user","title":"6. Check that last caller is the new user","text":"<p>Contract instance allows interacting with the contract in a convenient way. <pre><code>const dryRunTx = await contract.get_last_caller();\nconsole.log(`New user: ${newUserAccount.address}`);\nconsole.log('Last caller:', dryRunTx.decodedResult);\n</code></pre> Note:</p> <ul> <li>Last caller should now be the address of the new user.</li> <li>For regular (non-stateful) entrypoints the SDK automatically performs a dry-run which    allows to perform read-only calls for free, see    Contract guide.</li> </ul>"},{"location":"examples/node/paying-for-spend-tx/","title":"InnerTx: SpendTx","text":""},{"location":"examples/node/paying-for-spend-tx/#introduction","title":"Introduction","text":"<p>The whole script is located in the repository and this page explains in detail how to:</p> <ul> <li>Create and sign a <code>SpendTx</code> for an account with the <code>innerTx</code> option.</li> <li>Wrap the signed <code>SpendTx</code> in a <code>PayingForTx</code>, signing it using an account that pays the fees    of the inner <code>SpendTx</code> and broadcasts it to the network.</li> </ul> <p>Note:</p> <ul> <li>This can be done for any transaction type!</li> </ul>"},{"location":"examples/node/paying-for-spend-tx/#1-specify-imports","title":"1. Specify imports","text":"<p>You need to import <code>AeSdk</code>, <code>Node</code> and <code>MemoryAccount</code> classes from the SDK. Additionally you import the <code>generateKeyPair</code> utility function to generate a new keypair. <pre><code>import {\n  AeSdk, Node, MemoryAccount, Tag,\n} from '@aeternity/aepp-sdk';\n</code></pre> Note:</p> <ul> <li>You need to have the SDK installed via <code>npm i @aetenity/aepp-sdk -g</code> to run that example code.</li> </ul>"},{"location":"examples/node/paying-for-spend-tx/#2-define-constants","title":"2. Define constants","text":"<p>The following constants are used in the subsequent code snippets. <pre><code>const PAYER_ACCOUNT_SECRET_KEY = '9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200';\nconst NODE_URL = 'https://testnet.aeternity.io';\nconst AMOUNT = 1;\n</code></pre> Note:</p> <ul> <li>The secret key of the account is pre-funded and only used for demonstration purpose<ul> <li>You can replace it with your own keypair (see    Create a Keypair)</li> <li>In case the account runs out of funds you can always request AE using the Faucet</li> </ul> </li> <li>The <code>AMOUNT</code> (in <code>aettos</code>) will be send to the new user and returned to the payer.</li> </ul>"},{"location":"examples/node/paying-for-spend-tx/#3-create-object-instances","title":"3. Create object instances","text":"<pre><code>const payerAccount = new MemoryAccount(PAYER_ACCOUNT_SECRET_KEY);\nconst newUserAccount = MemoryAccount.generate();\nconst node = new Node(NODE_URL);\nconst aeSdk = new AeSdk({\n  nodes: [{ name: 'testnet', instance: node }],\n  accounts: [payerAccount, newUserAccount],\n});\n</code></pre>"},{"location":"examples/node/paying-for-spend-tx/#4-send-1-aetto-from-payer-to-new-user","title":"4. Send 1 <code>aetto</code> from payer to new user","text":"<pre><code>const spendTxResult = await aeSdk.spend(\n  AMOUNT,\n  newUserAccount.address,\n  { onAccount: payerAccount },\n);\nconsole.log(spendTxResult);\n</code></pre>"},{"location":"examples/node/paying-for-spend-tx/#5-check-balance-of-new-user-before","title":"5. Check balance of new user (before)","text":"<p><pre><code>const newUserBalanceBefore = await aeSdk.getBalance(newUserAccount.address);\nconsole.log(`new user balance (before): ${newUserBalanceBefore}`);\n</code></pre> Note:</p> <ul> <li>The balance should now be 1</li> </ul>"},{"location":"examples/node/paying-for-spend-tx/#6-create-and-sign-spendtx-on-behalf-of-new-user","title":"6. Create and sign <code>SpendTx</code> on behalf of new user","text":"<p><pre><code>const spendTx = await aeSdk.buildTx({\n  tag: Tag.SpendTx,\n  senderId: newUserAccount.address,\n  recipientId: payerAccount.address,\n  amount: AMOUNT,\n});\nconst signedSpendTx = await aeSdk.signTransaction(\n  spendTx,\n  { onAccount: newUserAccount, innerTx: true },\n);\n</code></pre> Note:</p> <ul> <li>The provided transaction option <code>innerTx</code> indicates that    the transaction needs to be signed in a special way</li> </ul>"},{"location":"examples/node/paying-for-spend-tx/#7-create-sign-broadcast-the-payingfortx-as-payer","title":"7. Create, sign &amp; broadcast the <code>PayingForTx</code> as payer","text":"<p><pre><code>const payForTx = await aeSdk.payForTransaction(signedSpendTx, { onAccount: payerAccount });\nconsole.log(payForTx);\n</code></pre> Note:</p> <ul> <li>Normally sending the whole balance (1 <code>aetto</code>) would not be possible as the new user would    have to cover the transaction fee.</li> </ul>"},{"location":"examples/node/paying-for-spend-tx/#8-check-balance-of-new-user-after","title":"8. Check balance of new user (after)","text":"<p><pre><code>const newUserBalanceAfter = await aeSdk.getBalance(newUserAccount.address);\nconsole.log(`new user balance (after): ${newUserBalanceAfter}`);\n</code></pre> Note:</p> <ul> <li>The balance should now be 0</li> </ul>"},{"location":"examples/node/transfer-ae/","title":"Transfer AE","text":""},{"location":"examples/node/transfer-ae/#introduction","title":"Introduction","text":"<p>The whole script is located in the repository and this page explains in detail how to:</p> <ul> <li>initialize an instance of the SDK with a pre-funded account</li> <li>transfer AE to another account</li> </ul>"},{"location":"examples/node/transfer-ae/#1-specify-imports","title":"1. Specify imports","text":"<p>You need to import <code>AeSdk</code>, <code>Node</code> and <code>MemoryAccount</code> classes from the SDK. <pre><code>import { AeSdk, Node, MemoryAccount } from '@aeternity/aepp-sdk';\n</code></pre> Note:</p> <ul> <li>You need to have the SDK installed via <code>npm i @aetenity/aepp-sdk -g</code> to run that example code.</li> </ul>"},{"location":"examples/node/transfer-ae/#2-define-constants","title":"2. Define constants","text":"<p>The following constants are used in the subsequent code snippets. <pre><code>const ACCOUNT_KEYPAIR = {\n  publicKey: 'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n  secretKey: '9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200',\n};\nconst NODE_URL = 'https://testnet.aeternity.io';\nconst [amount = 1, recipient = ACCOUNT_KEYPAIR.publicKey] = process.argv.slice(2);\n</code></pre> Note:</p> <ul> <li>The secret key of the account is pre-funded and only used for demonstration purpose<ul> <li>You should replace it with your own keypair    (see Create a Keypair)</li> </ul> </li> <li>In case the account runs out of funds you can always request AE using the Faucet</li> <li>By default the script will transfer <code>1 aetto</code> and use the demo account itself as recipient<ul> <li>Optionally you can provide the amount and a different recipient by providing the    arguments when executing the script,    e.g. <code>node transfer-ae.js 3 ak_6D2uyunJaERXfgbsc94G8vrp79nZrbtorL7VCRXk3sWiFK5jb</code></li> </ul> </li> </ul>"},{"location":"examples/node/transfer-ae/#3-create-object-instances","title":"3. Create object instances","text":"<pre><code>const account = new MemoryAccount(ACCOUNT_KEYPAIR.secretKey);\nconst node = new Node(NODE_URL);\nconst aeSdk = new AeSdk({\n  nodes: [{ name: 'testnet', instance: node }],\n  accounts: [account],\n});\n</code></pre>"},{"location":"examples/node/transfer-ae/#4-get-ae-balance-of-recipient-before-transfer","title":"4. Get AE balance of recipient (before transfer)","text":"<p>Before the transfer of AE you can check the AE balance of the recipient. <pre><code>const balanceBefore = await aeSdk.getBalance(recipient);\nconsole.log(`Balance of ${recipient} (before): ${balanceBefore} aettos`);\n</code></pre></p>"},{"location":"examples/node/transfer-ae/#5-transfer-ae","title":"5. Transfer AE","text":"<p>Calling the <code>spend</code> function will create, sign and broadcast a <code>SpendTx</code> to the network. <pre><code>const tx = await aeSdk.spend(amount, recipient);\nconsole.log('Transaction mined', tx);\n</code></pre> Alternatively, you can use transferFunds method to transfer a fraction of your AE to another account.</p>"},{"location":"examples/node/transfer-ae/#6-get-ae-balance-of-recipient-after-transfer","title":"6. Get AE balance of recipient (after transfer)","text":"<p><pre><code>const balanceAfter = await aeSdk.getBalance(recipient);\nconsole.log(`Balance of ${recipient} (after): ${balanceAfter} aettos`);\n</code></pre> Note:</p> <ul> <li>If the recipient is the same account as the sender (default of the script if no arguments    provided) the balance will be lower after transfer because a transaction <code>fee</code> has been    paid to the miners.</li> </ul>"},{"location":"guides/address-length/","title":"The range of possible address length","text":"<p>While base64-encoded strings have a constant length depending on the length of data to encode. In base58 it depends on the exact data to encode, e.g. it is shorter if encoded data have more leading zeroes.</p> <p>Building an aepp you may need to know the range of possible address lengths to validate an user-provided addresses (though better to use isAddressValid) or for designs of address-related components. Doing manual tests you may conclude that account address length is between 52 and 53 chars, but it is not correct.</p> <pre><code>import { MemoryAccount } from '@aeternity/aepp-sdk';\n\nconst result = new Array(10000).fill()\n  .map(() =&gt; MemoryAccount.generate().address.length)\n  .reduce((p, n) =&gt; ({ ...p, [n]: (p[n] ?? 0) + 1 }), {});\n\nconsole.log(result);\n</code></pre> <p>Running the above code you would get something like <code>{ '51': 55, '52': 5021, '53': 4924 }</code> depending on generated accounts. So, while the most of addresses have length between 52 and 53 chars, there is a ~0.55% chance to get an address of 51 chars.</p> <p>Theoretically there can be even shorter addresses if they lucky to be prefixed with a long sequence of <code>0</code>.</p> <pre><code>import {\n  MemoryAccount, Encoding, encode, decode,\n} from '@aeternity/aepp-sdk';\n\nconst publicKey = decode(MemoryAccount.generate().address);\n\nfor (let i = -1; i &lt; publicKey.length; i += 1) {\n  if (i &gt;= 0) publicKey[i] = 0;\n  const address = encode(publicKey, Encoding.AccountAddress);\n  console.log(address.length, address);\n}\n</code></pre> <p>Running the above code you would get output like</p> <pre><code>52 ak_XsSLpN161dHo77k82CZHDnUCDpVG1JSujZjbGYhNKTgMy5exZ\n52 ak_13P6GKgb4VcxJHrb5Vnhb66RNBGgdnFLVJS8RaLcrAeseZmuc\n52 ak_115z6Ns8nevqahWHQfYU3QNJbK7PsX2rWxoPQRcpvWzB4U77s\n51 ak_111dqrd5iRqVHQe2T2JdZe79bqNBVCkWPqSc1JAXMW6F2vvT\n50 ak_1111PM8Acd6qZCjioCqPt6PcTuWVxxS22gt2ytCdH82FY4C\n51 ak_111113q5w8zgNNjAgLbxrMmA8qBNCv8aVHBM7eLm7JbfcgVe\n50 ak_111111UGVF8HYKFC7hLzwffE8JR5vQKQ9z4BiYJYCVcEGna\n49 ak_1111111wnTfJ9TWagQmzk42ADoUqVg1VvNMG7t8Fo8SQGf\n50 ak_11111111389cwfh57Mw1d4uYXps2orpWxc9Zoov7PdW6G7S\n49 ak_111111111G6iURaQ8ycLUNERoocnfJPQ8J7bopyndikHFM\n49 ak_11111111116b9WMyCB85kS4YkDfP9D3LhqUu5eG7AEfrLg\n48 ak_11111111111urvTGsQm76A4yTbApC8DJ1rLggAFKXiZXp\n48 ak_1111111111119eSHeN26TTHqgKpcEVTmbCHEbQgAHJkjd\n48 ak_11111111111115QmcWAusFcLUq2MfYLXdxnFEhPkRrQu5\n47 ak_11111111111111c7Y1hucPEYuPH6ZY5sFdKo6dhb86gk\n47 ak_1111111111111116qaT3Ac44qzDFevr9Czj1S9p9Y46r\n47 ak_11111111111111114KqRXnNJJwVDnphudyDt4XDmjLn7\n46 ak_11111111111111111XGs41KwLTa74AMCwx3gYYAHv81\n46 ak_1111111111111111114sffTSqJvTbsAjsQykvVsDcV8\n45 ak_1111111111111111111wVeBwZE5g63oPLdnrQC7TuP\n45 ak_11111111111111111111Y4FSQ8pV3J8f96h3SS68Df\n45 ak_1111111111111111111114ZmkEyJVpPoE6bFrxSt3n\n44 ak_1111111111111111111111hEHXkLzkWadzEyFn6pw\n44 ak_11111111111111111111111A6y5vKi2SUtEiqyw1H\n44 ak_1111111111111111111111112PszJecmUrBA1wHbx\n43 ak_1111111111111111111111111yqJmD1ujq7rtGX6\n43 ak_111111111111111111111111113hoVWLS2aptDtG\n42 ak_111111111111111111111111111PhgEh1GA292t\n42 ak_1111111111111111111111111111Z6ci7mUpU7i\n42 ak_111111111111111111111111111119gETXQQAsT\n42 ak_11111111111111111111111111111136u6WXDf6\n41 ak_1111111111111111111111111111111PqPZYur\n41 ak_11111111111111111111111111111111273Yts\n</code></pre> <p>Therefore the minimum address length is 41 chars. All these addresses valid, for example <code>ak_11111111111111111111111111111111273Yts</code> used to collect AENS name fees.</p>"},{"location":"guides/aens/","title":"AENS (\u00e6ternity naming system)","text":""},{"location":"guides/aens/#introduction","title":"Introduction","text":"<p>This guide shows you how to perform all the operations that you need within the lifecycle of \u00e6ternity naming system (AENS) using the SDK.</p> <p>If you successfully claimed a name it will expire after 180000 key blocks (~375 days). You will need to update your name before it expires!</p>"},{"location":"guides/aens/#1-claim-a-name","title":"1. Claim a name","text":"<p>Claiming an AENS name requires you (at least) 2 transactions:</p> <ul> <li>First you need to perform a <code>pre-claim</code> by providing a <code>commitmentId</code> (hash).<ul> <li>The <code>commitmentId</code> is calculated with a random <code>salt</code> and the provided name. The SDK automatically generates the random <code>salt</code>, calculates the <code>commitmentId</code> and includes it into the <code>NamePreclaimTx</code>.</li> </ul> </li> <li>After the <code>NamePreclaimTx</code> transaction has been mined you will be able to perform the actual <code>claim</code> of the name. When performing the actual <code>claim</code> via a <code>NameClaimTx</code> you will, depending on the length of the name:<ul> <li>immediately become owner of that name</li> <li>initiate an auction</li> </ul> </li> </ul>"},{"location":"guides/aens/#pre-claim","title":"Pre-claim","text":"<pre><code>// imports\n\nconst aeSdk = new AeSdk({ ... }) // init the SDK instance with AeSdk class\n\nconst name = 'testNameForTheGuide.chain'\n\nconst preClaimTx = await aeSdk.aensPreclaim(name)\nconsole.log(preClaimTx)\n\n/*\n{\n  blockHash: 'mh_2UsggiUaQQmEPjxLnXkXHpm1WawTWqZb1jBx6UzsQNHgirWAwd',\n  blockHeight: 449499,\n  hash: 'th_48RktjEutZC8TCubaq9YhjaF1cKLV9D3VRCJyzJLs7oSp4Ry6',\n  signatures: [\n    'sg_Da98k2EKMun1TkE7ytonRypvJwaKg9iBjp8rNcYuodFXqzRqwjQyuFQP5DhxWUpTYRzSTurrNtDmUft8eyTStjCyNqFf8'\n  ],\n  tx: {\n    accountId: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n    commitmentId: 'cm_2igvW9egddKh77gDdE8mjotmL8PzE7Tf2Q639Q5stUqWQoEfap',\n    fee: 16620000000000n,\n    nonce: 18,\n    type: 'NamePreclaimTx',\n    version: 1\n  },\n  rawTx: 'tx_+JkLAfhCuEBgFzAL0bPDufmzDq0558vaKtrIyRpNxCYVtkgnJjBrxDpQZHkfbwG+oRuBUAfgfrAKF0lO9mRI1zq0H6bXIq8KuFH4TyEBoQGMyNToF1flcYDSVsPl5DZ9ZY3FJWRpDRQYD32quWBEAhKhA+Jawe/spFaw823K+U59CWx+xD1i34gngUPiAAKJqv/fhg8dpTI4AAAGc20E',\n  height: 449499,\n  claim: [Function: claim],\n  salt: 7595805618692717,\n  commitmentId: 'cm_2igvW9egddKh77gDdE8mjotmL8PzE7Tf2Q639Q5stUqWQoEfap'\n}\n*/\n</code></pre> <p>Note:</p> <ul> <li>After transaction is included, you have <code>300</code> key blocks to broadcast <code>claim</code> transaction with the same <code>salt</code> and it should be signed with the same private key as <code>pre-claim</code>.<ul> <li>As the <code>pre-claim</code> is required to avoid front running it is recommended to wait with the actual <code>claim</code> until at least 1 key block has been mined so that nobody knows which name you aim to claim.</li> <li>The corresponding <code>claim</code> cannot be included in the same key block anyway. The protocol doesn't allow that.</li> </ul> </li> <li>You should check if the name is still available before performing a <code>pre-claim</code>. The protocol itself doesn't reject a <code>pre-claim</code> transaction if the name isn't available anymore.</li> <li>As you can see above in the logs the result (<code>preClaimTx</code>) of the <code>aensPreclaim</code> has bound a <code>claim</code> function that you can make use of to perform the actual claim.<ul> <li>In case you want to perform the actual claim at a later point you should remember the <code>salt</code> that has been used for the <code>pre-claim</code></li> </ul> </li> </ul>"},{"location":"guides/aens/#claim","title":"Claim","text":"<p>This example assumes that you perform the actual <code>claim</code> manually by having remembered the required <code>salt</code>. In most cases you'd probably use the <code>claim</code> function that is bound to the result of the <code>aensPreclaim</code> function directly (see above).</p> <p>Depending on the length of the name in punycode the actual <code>claim</code> will result in direct ownership of the AENS name or start an auction:</p> <ul> <li><code>Name length</code> &gt; 12: ownership of the name is immediately transferred to your account</li> <li><code>Name length</code> &lt;= 12: an <code>auction</code> is started</li> </ul> <pre><code>const salt = 7595805618692717 // salt from pre-claim transaction\n\n// the minimum `nameFee` will be automatically generated by sdk\n// in case you want to provide a custom `nameFee` you can so so by providing it in an options object\n// in case of starting the auction `nameFee` will be the starting bid\nconst claimTx = await aeSdk.aensClaim(name, salt)\nconsole.log(claimTx)\n\n/*\n{\n  blockHash: 'mh_UvtuVNvK7k29G3anF48W4hgUMaFFLc1wKir55FFifgT49Egk',\n  blockHeight: 449507,\n  hash: 'th_2sWNusGUf2wuRn7d453wPWTAe8pKVbtNF4DqakvippsxjvF8g1',\n  signatures: [\n    'sg_LYsVj9zUoKFPDiSvFUWG5QaRhnqQ525YA314xMVzRhApYuPnFyMWgAQGpChKHHWyMbykBwVRrmoQtTENTFCaCoMj17CBK'\n  ],\n  tx: {\n    accountId: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n    fee: 16800000000000n,\n    name: 'testNameForTheGuide.chain',\n    nameFee: 2865700000000000000n,\n    nameSalt: 7595805618692717,\n    nonce: 19,\n    type: 'NameClaimTx',\n    version: 2\n  },\n  rawTx: 'tx_+KILAfhCuECVba2mm3Un3nrN9U+LpuB2wzqDDmAzXwvc+9sVkpkcALzqm14p7kGqyt8pwjGTyKeLM9lp+KgXWF4PHmHz0WAPuFr4WCACoQGMyNToF1flcYDSVsPl5DZ9ZY3FJWRpDRQYD32quWBEAhOZdGVzdE5hbWVGb3JUaGVHdWlkZS5jaGFpboca/FhPr2JtiCfFAveE1kAAhg9HjghAAADilhgr',\n  id: 'nm_1Cz5HGY8PMWZxNrM6s51CtsJZDU3DDT1LdmpEipa3DRghyGz5',\n  owner: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n  pointers: [],\n  ttl: 629507,\n  update: [Function (anonymous)],\n  transfer: [Function (anonymous)],\n  revoke: [Function (anonymous)],\n  extendTtl: [Function (anonymous)]\n}\n*/\n</code></pre> <p>Note:</p> <ul> <li>The <code>nameFee</code> that is required will be correctly calculated automatically for the initial claim.<ul> <li>It's still possible to pass it as additional param, see transaction options.</li> </ul> </li> <li>In case the <code>claim</code> triggers an auction the required <code>nameFee</code> is locked by the protocol.<ul> <li>If you win the auction the <code>nameFee</code> is permanently deducted from your accounts balance and effectively burned.<ul> <li>It will be credited to <code>ak_11111111111111111111111111111111273Yts</code> which nobody can access. This reduces the total supply of AE over time.</li> </ul> </li> <li>If somebody else outbids you the provided <code>nameFee</code> is immediately released and returned to your account.</li> </ul> </li> </ul>"},{"location":"guides/aens/#bid-during-an-auction","title":"Bid during an auction","text":"<p>In case there is an auction running for a name you want to claim you need to place a bid.</p> <pre><code>import { computeBidFee, computeAuctionEndBlock } from '@aeternity/aepp-sdk'\n\nconst name = 'auctiontest1.chain'\n\nconst startFee = ... // request from middleware, e.g. https://testnet.aeternity.io/mdw/name/auctiontest1.chain\nconst increment = 0.05 // 5%, the minimum required increment\n\n// startFee is OPTIONAL and defaults to minimum calculated fee for the name in general\n// startFee MUST be at least the nameFee of the last bid\n// increment is OPTIONAL and defaults to 0.05\nconst nameFee = computeBidFee(name, { startFee, increment })\nconst bidTx = await aeSdk.aensBid(name, nameFee)\n\nconsole.log(bidTx)\nconsole.log(`BID PLACED AT ${bidTx.blockHeight} WILL END AT ${computeAuctionEndBlock(name, bidTx.blockHeight)}`)\n\n/*\n{\n  blockHash: 'mh_Y5LDYPtPWzcop2FCbxnwTSwjWo9d3rYcBBcChCEHfzHo2YZpm',\n  blockHeight: 449693,\n  hash: 'th_2nZshewM7FtKSsDEP4zXPsGCe9cdxaFTRrcNjJyE22ktjGidZR',\n  signatures: [\n    'sg_7G49bziWjjZAjayBhFffRyfLbmFczs2foJgXcx1n1Vo7iGELQqggdH4w72MqWbNUbM9Jv2EBJnd2LFjv6LJhqTmvJBWyr'\n  ],\n  tx: {\n    accountId: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n    fee: 16520000000000n,\n    name: 'auctiontest1.chain',\n    nameFee: 3159434250000000000n,\n    nameSalt: 0,\n    nonce: 24,\n    type: 'NameClaimTx',\n    version: 2\n  },\n  rawTx: 'tx_+JQLAfhCuEAv2HQoyLa7krHpcQAsPpWdP+6PJYzdPSifmwNIgpWZtyrdgVD+IGMzzAqxkOQEDeAwc/Oh+dfXPBZpNslCNFgBuEz4SiACoQGMyNToF1flcYDSVsPl5DZ9ZY3FJWRpDRQYD32quWBEAhiSYXVjdGlvbnRlc3QxLmNoYWluAIgr2JC2AnPkAIYPBly7UAAAm/NY1g==',\n  nameFee: BigNumber { s: 1, e: 18, c: [ 31594, 34250000000000 ] }\n}\nBID PLACED AT 449693 WILL END AT 479453\n*/\n</code></pre> <p>Note:</p> <ul> <li>It is required to provide a <code>nameFee</code> that is at least <code>5%</code> higher than the current bid.<ul> <li>The node doesn't expose an API to request the <code>nameFee</code> of the last bid. You need to receive that information from the middleware that you ideally host yourself.</li> </ul> </li> </ul>"},{"location":"guides/aens/#2-update-a-name","title":"2. Update a name","text":"<p>Now that you own your AENS name you might want to update it in order to:</p> <ul> <li>Set pointers to <code>accounts</code>, <code>oracles</code>, <code>contracts</code>, <code>channels</code>, or store binary data.</li> <li>Extend the TTL before it expires.<ul> <li>By default a name will have a TTL of 180000 key blocks (~375 days). It cannot be extended longer than 180000 key blocks.</li> </ul> </li> </ul>"},{"location":"guides/aens/#set-pointers-update-ttl","title":"Set pointers &amp; update TTL","text":"<pre><code>import { getDefaultPointerKey, encode, Encoding } from '@aeternity/aepp-sdk'\n\nconst name = 'testNameForTheGuide.chain'\nconst oracle = 'ok_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk'\nconst pointers = {\n  account_pubkey: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n  customKey: encode(Buffer.from('example data'), Encoding.Bytearray),\n  [getDefaultPointerKey(oracle)]: oracle, // the same as `oracle_pubkey: oracle,`\n  contract_pubkey: 'ct_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n  channel: 'ch_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n}\n\n// using aeSdk directly (instance of AeSdk class)\nconst nameUpdateTx = await aeSdk.aensUpdate(name, pointers)\n\n// OR using the instance of a name\nconst nameInstance = await aeSdk.aensQuery(name)\nconst nameUpdateTx = await nameInstance.update(pointers)\n\nconsole.log(nameUpdateTx)\n\n/*\n{\n  blockHash: 'mh_AiaGtTWBRys7EX5apAidShyCw1kefocuWt49DgLE2fWNCgKvq',\n  blockHeight: 449855,\n  hash: 'th_LLef19g2mLWQfG7Ds1XZNGyb3SGvi8PGvk7mJczpD9iToBcqL',\n  signatures: [\n    'sg_Zm7kp1oBnXGnHwdzsim9nTXtrGoV4bWJhcC1nkw9f3eMPibVaYQRoM829iNrPandAfs8TK7ogEkYByxQx11xCAFMpwUBz'\n  ],\n  tx: {\n    accountId: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n    clientTtl: 3600,\n    fee: 17800000000000n,\n    nameId: 'nm_1Cz5HGY8PMWZxNrM6s51CtsJZDU3DDT1LdmpEipa3DRghyGz5',\n    nameTtl: 180000,\n    nonce: 27,\n    pointers: [ [Object] ],\n    type: 'NameUpdateTx',\n    version: 1\n  },\n  rawTx: 'tx_+NQLAfhCuED6aLVAlIfcqczlZ4XzOjG3U23l5+egPFDVEKTSMuL0Zj18jUG6ctJxGGQubNoANFcwQl79T7w0dG4+FV7Qn3AKuIz4iiIBoQGMyNToF1flcYDSVsPl5DZ9ZY3FJWRpDRQYD32quWBEAhuhAgB4Gsn+dalOdWvHXJd+3LBBiO9HsZoHIF2/aQ4n/bbagwK/IPLxjmFjY291bnRfcHVia2V5oQGMyNToF1flcYDSVsPl5DZ9ZY3FJWRpDRQYD32quWBEAoMBSniGEDBirVAAAJ7I9GA=',\n  id: 'nm_1Cz5HGY8PMWZxNrM6s51CtsJZDU3DDT1LdmpEipa3DRghyGz5',\n  owner: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n  pointers: [\n    {\n      id: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n      key: 'account_pubkey'\n    }\n  ],\n  ttl: 629855,\n  update: [Function (anonymous)],\n  transfer: [Function (anonymous)],\n  revoke: [Function (anonymous)],\n  extendTtl: [Function (anonymous)]\n}\n*/\n</code></pre> <p>Note:</p> <ul> <li>It's also possible to pass additional transaction options here, too.</li> </ul>"},{"location":"guides/aens/#extend-ttl-while-keeping-pointers","title":"Extend TTL while keeping pointers","text":"<p>In case you want to extend a name using a custom TTL and keep the current pointers you can do this as follows:</p> <pre><code>const name = 'testNameForTheGuide.chain'\n\n// using aeSdk directly (instance of AeSdk class\nconst nameUpdateTx = await aeSdk.aensUpdate(name, {}, { nameTtl: 100000, extendPointers: true })\n\n// OR using the instance of a name\nconst nameInstance = await aeSdk.aensQuery(name)\nconst nameUpdateTx = await nameInstance.update({}, { nameTtl: 100000, extendPointers: true })\n\nconsole.log(nameUpdateTx)\n\n/*\n{\n  blockHash: 'mh_2mbAuBtyPp7wN6hrcvkYD7LZRSegwZZKYnLcNQkGVGRZ3uVxW6',\n  blockHeight: 449860,\n  hash: 'th_2wXE8i5BUFCUPuioKwAuwNysm6RPQo8STf5m91CuT3LTh7q4ko',\n  signatures: [\n    'sg_E69tfR3STWi5Dg6yUHQj5D5waTCEhoFmb1LYWGU2bsCnuLkMgH1KqhRKrCZaatDMyg5szgABDuU1r6ZD5K74qXWW5pMJ'\n  ],\n  tx: {\n    accountId: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n    clientTtl: 100000,\n    fee: 17800000000000n,\n    nameId: 'nm_1Cz5HGY8PMWZxNrM6s51CtsJZDU3DDT1LdmpEipa3DRghyGz5',\n    nameTtl: 100000,\n    nonce: 28,\n    pointers: [ [Object] ],\n    type: 'NameUpdateTx',\n    version: 1\n  },\n  rawTx: 'tx_+NQLAfhCuEABuZTyU+W5xmBpQn5GCJiSpK6fI0pYoMIQ5IqD2bs6pJ+oyU7HDGoSU0Mn6tsfYOn+MVRsxLR6yM1Vyv0c4JQNuIz4iiIBoQGMyNToF1flcYDSVsPl5DZ9ZY3FJWRpDRQYD32quWBEAhyhAgB4Gsn+dalOdWvHXJd+3LBBiO9HsZoHIF2/aQ4n/bbagwGGoPLxjmFjY291bnRfcHVia2V5oQGMyNToF1flcYDSVsPl5DZ9ZY3FJWRpDRQYD32quWBEAoMBhqCGEDBirVAAANKYAm0='\n}\n*/\n</code></pre> <p>Note:</p> <ul> <li>If you provide a non-empty array of pointers to that function while using <code>extendPointers</code> the SDK will merge the existing pointers with those provided.<ul> <li>In case there already exists an account pointer and you provide an accounts address in the array the old account pointer will be overwritten</li> </ul> </li> <li>If you provide an empty array and don't set <code>extendPointers</code> to <code>true</code> all of your current pointers will be removed.</li> </ul>"},{"location":"guides/aens/#3-transfer-ownership-of-a-name","title":"3. Transfer ownership of a name","text":"<p>In some cases you might want to transfer the ownership of a name to another account. Of course this is also possible and you can do that as follows:</p> <pre><code>const recipient = 'ak_...'\n\n// using aeSdk directly (instance of AeSdk class)\nconst nameTransferTx = await aeSdk.aensTransfer(name, recipient)\n\n// OR using the instance of a name\nconst nameInstance = await aeSdk.aensQuery(name)\nconst nameTransferTx = await nameInstance.transfer(recipient)\n\nconsole.log(nameTransferTx)\n\n/*\n{\n  blockHash: 'mh_ZuYV5tmJM4PhrfxzXfo9e37uqPcYpCiAoEC2uRcqbUXeMSmLH',\n  blockHeight: 449982,\n  hash: 'th_xXqmZxR7WJDe6YTz1GnHWgNjtcZjpTPA5bVuiQstmd8o6Gg7x',\n  signatures: [\n    'sg_72fiMzprywNmFtuf1i1FFfhBBXcPHpHDfi1Uv2bDnYayoCRWe1yyzvwLmhM6cfA3TR6pBF9Kj3iyYm3mrC46rvNCpchyi'\n  ],\n  tx: {\n    accountId: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n    fee: 17300000000000n,\n    nameId: 'nm_1Cz5HGY8PMWZxNrM6s51CtsJZDU3DDT1LdmpEipa3DRghyGz5',\n    nonce: 33,\n    recipientId: 'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n    type: 'NameTransferTx',\n    version: 1\n  },\n  rawTx: 'tx_+LsLAfhCuEAuFNHG4gniZjJDQtbm5cIfJACkU/NI96mZpwMvdyuxxOYWYxSxUF2NF5oxjmsYLdXWfSrdmgWj40JzZU/TRA4DuHP4cSQBoQGMyNToF1flcYDSVsPl5DZ9ZY3FJWRpDRQYD32quWBEAiGhAgB4Gsn+dalOdWvHXJd+3LBBiO9HsZoHIF2/aQ4n/bbaoQHVzwhADpiCIvJutLAsj4kHdFdGchGm5tlV7bcHScajO4YPu/hayAAABhgUgg=='\n}\n*/\n</code></pre>"},{"location":"guides/aens/#4-revoke-a-name","title":"4. Revoke a name","text":"<p>In case you want to revoke a name prior to its expiration for whatever reason you can do that as follows: <pre><code>// using aeSdk directly (instance of AeSdk class)\nconst nameRevokeTx = await aeSdk.aensRevoke(name)\n\n// OR using the instance of a name\nconst nameInstance = await aeSdk.aensQuery(name)\nconst nameRevokeTx = await nameInstance.revoke()\n\nconsole.log(nameRevokeTx)\n\n/*\n{\n  blockHash: 'mh_2Q5Xqd4vrmwkS98SBkN79k1t9VLNmDX4wk8xnUJYTEvkK3YoH4',\n  blockHeight: 450018,\n  hash: 'th_2XhJradAVKN2jR2tgNYdKNWikMc8XunqTdUhRPh2TyhAwMqijJ',\n  signatures: [\n    'sg_Tjbf8SJDQXgBhaYk7AzTTr7d1RF3bDcMp6BMgRoHcHcgBp13HjcMYmZJ8vvqrZ94An9gvQD4NegYrR7eaBLt6jEy99xyM'\n  ],\n  tx: {\n    accountId: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk',\n    fee: 16620000000000,\n    nameId: 'nm_1Cz5HGY8PMWZxNrM6s51CtsJZDU3DDT1LdmpEipa3DRghyGz5',\n    nonce: 34,\n    type: 'NameRevokeTx',\n    version: 1\n  },\n  rawTx: 'tx_+JkLAfhCuEDMWOZac70tEHQ4AHGBIedZepwTvsBjIHk36vhTd5yBepmTemTQcUVrAtbNO3jZVZD4GUOhN+DfXm2lNrpZu+8FuFH4TyMBoQGMyNToF1flcYDSVsPl5DZ9ZY3FJWRpDRQYD32quWBEAiKhAgB4Gsn+dalOdWvHXJd+3LBBiO9HsZoHIF2/aQ4n/bbahg8dpTI4AAB44bma'\n}\n*/\n</code></pre></p> <p>Note:</p> <ul> <li>On revocation the name enters in a <code>revoked</code> state.</li> <li>After a timeout of <code>2016</code> key blocks the name will be available for claiming again.</li> </ul>"},{"location":"guides/aens/#delegate-signature-to-contract-aens-interface","title":"Delegate signature to contract (AENS interface)","text":"<p>It is possible to authorize a Sophia contract to manage an AENS name on behalf of your account. In order to achieve that you need to provide a delegation signature to the contract. The contract will then be able to use the AENS interface and perform AENS related actions on behalf of your account.</p> <p>This functionality could for example be used to build an AENS marketplace.</p> <pre><code>// imports\n\nconst aeSdk = new AeSdk({ ... }) // init the SDK instance with AeSdk class\n\nconst contractAddress = 'ct_asd2ks...'\n// AENS name\nconst name = 'example.chain'\n\n// this signature will allow the contract to perform a pre-claim on your behalf\nconst preClaimSig = await aeSdk.signDelegationToContract(contractAddress, { isOracle: false })\n\n// this signature will allow the contract to perform\n// any name related transaction for a specific name that you own\nconst nameDelegationSig = await aeSdk.signNameDelegationToContract(contractAddress, name)\n\n// alternatively, you can generate a delegation signature suitable for every name you own\nconst allNamesDelegationSig = await aeSdk.signAllNamesDelegationToContract(contractAddress)\n</code></pre>"},{"location":"guides/batch-requests/","title":"Batch Transactions","text":""},{"location":"guides/batch-requests/#introduction","title":"Introduction","text":"<p>In some cases, aepp developer may need to send a set of transactions at once. The SDK provides optimizations for this scenario but it also requires additional effort by the developer. This guide covers specific cases with suggestions on how to proceed with them to produce a sequence of requests in an efficient way.</p>"},{"location":"guides/batch-requests/#multiple-spend-transactions","title":"Multiple spend transactions","text":"<p>Obviously, multiple spends may be done like: <pre><code>for (const { address, amount } of spends) {\n  await aeSdk.spend(amount, address)\n}\n</code></pre> But this isn't the fastest approach, because on each iteration SDK would:</p> <ul> <li>request the sender data (its type and nonce)</li> <li>verify the transaction (including additional requests)</li> <li>wait until the transaction is mined</li> </ul> <p>It can be avoided by making spends as: <pre><code>const base = (await aeSdk.api.getAccountNextNonce(aeSdk.address)).nextNonce\nawait Promise.all(spends.map(({ amount, address }, idx) =&gt;\n   aeSdk.spend(amount, address, { nonce: base + idx, verify: false, waitMined: false }))\n)\n</code></pre> This way, SDK would make a single request to get info about the sender account and a transaction post request per each item in the <code>spends</code> array.</p> <p>Additionally, you may want to set <code>gasPrice</code> and <code>fee</code> to have predictable expenses. By default, SDK sets them based on the current network demand.</p>"},{"location":"guides/batch-requests/#multiple-contract-static-calls","title":"Multiple contract static calls","text":"<p>Basically, the dry-run endpoint of the node is used to run them. Doing requests one by one, like <pre><code>const results = []\nfor (const d of data) {\n  results.push(await contract.foo(d))\n}\n</code></pre> will make SDK create a new dry-run request for each static call. It may be not efficient because dry-run supports executing multiple transactions at a single request. It can be done by making all calls at once: <pre><code>const base = (await aeSdk.api.getAccountNextNonce(aeSdk.address)).nextNonce\nconst results = await Promise.all(\n  data.map((d, idx) =&gt; contract.foo(d, { nonce: base + idx, combine: true }))\n)\n</code></pre> With <code>combine</code> flag SDK would put all of them into a single dry-run request. Also, it is necessary to generate increasing nonces on the aepp side to avoid nonce-already-used errors.</p> <p>This approach has another limitation: by default, dry-run is limited by 6000000 gas. This is enough to execute only 32 plain contract calls. it can be avoided by:</p> <ul> <li>increasing the default gas limit of restricted dry-run endpoint in node configuration</li> <li>decreasing the gas limit of each static call</li> <li>using a debug dry-run endpoint instead of the restricted one</li> </ul>"},{"location":"guides/build-wallet/","title":"How to build a wallet","text":"<p>This guide shows how to build either an WebExtension Wallet or a iFrame-based Wallet.</p>"},{"location":"guides/build-wallet/#webextension-wallet","title":"WebExtension wallet","text":"<p>The full implementation of this example can be found here:</p> <ul> <li>WebExtension Wallet Example</li> </ul> <p>Note:</p> <ul> <li>If you want to see a more advanced implementation you can take a look into the repository of the Superhero Wallet</li> </ul>"},{"location":"guides/build-wallet/#1-create-bridge-between-extension-and-page","title":"1. Create bridge between extension and page","text":"<p>First you need to create a bridge between your extension and the page. This can be done as follows:</p> <p>examples/browser/wallet-web-extension/src/content-script.js<pre><code>import browser from 'webextension-polyfill';\nimport {\n  BrowserRuntimeConnection, BrowserWindowMessageConnection, MESSAGE_DIRECTION, connectionProxy,\n} from '@aeternity/aepp-sdk';\n\n(async () =&gt; {\n  console.log('Waiting until document is ready');\n  await new Promise((resolve) =&gt; {\n    const interval = setInterval(() =&gt; {\n      // TODO: ensure that there is no corresponding event\n      if (document.readyState !== 'complete') return;\n      clearInterval(interval);\n      resolve();\n    }, 100);\n  });\n  console.log('Document is ready');\n\n  const port = browser.runtime.connect();\n  const extConnection = new BrowserRuntimeConnection({ port });\n  const pageConnection = new BrowserWindowMessageConnection({\n    target: window,\n    origin: window.origin,\n    sendDirection: MESSAGE_DIRECTION.to_aepp,\n    receiveDirection: MESSAGE_DIRECTION.to_waellet,\n  });\n  connectionProxy(pageConnection, extConnection);\n})();\n</code></pre> View at GitHub</p>"},{"location":"guides/build-wallet/#2-initialize-aesdkwallet-class","title":"2. Initialize <code>AeSdkWallet</code> class","text":"<p>Then you need to initialize <code>AeSdkWallet</code> class in your extension and subscribe for new <code>runtime</code> connections. After the connection is established you can share the wallet details with the application.</p> <p>examples/browser/wallet-web-extension/src/background.js<pre><code>import browser from 'webextension-polyfill';\nimport {\n  AeSdkWallet, Node, MemoryAccount, generateKeyPair, BrowserRuntimeConnection, WALLET_TYPE,\n  RpcConnectionDenyError, RpcRejectedByUserError,\n} from '@aeternity/aepp-sdk';\n\n(async () =&gt; {\n  const aeppInfo = {};\n\n  const aeSdk = new AeSdkWallet({\n    compilerUrl: 'https://compiler.aepps.com',\n    nodes: [{\n      name: 'testnet',\n      instance: new Node('https://testnet.aeternity.io'),\n    }],\n    id: browser.runtime.id,\n    type: WALLET_TYPE.extension,\n    name: 'Wallet WebExtension',\n    // Hook for sdk registration\n    onConnection(aeppId, params) {\n      if (!confirm(`Aepp ${params.name} with id ${aeppId} wants to connect`)) {\n        throw new RpcConnectionDenyError();\n      }\n      aeppInfo[aeppId] = params;\n    },\n    onDisconnect(msg, client) {\n      console.log('Client disconnected:', client);\n    },\n    onSubscription(aeppId) {\n      const { name } = aeppInfo[aeppId];\n      if (!confirm(`Aepp ${name} with id ${aeppId} wants to subscribe for accounts`)) {\n        throw new RpcRejectedByUserError();\n      }\n    },\n    onSign(aeppId, params) {\n      const { name } = aeppInfo[aeppId];\n      if (!confirm(`Aepp ${name} with id ${aeppId} wants to sign tx ${params.tx}`)) {\n        throw new RpcRejectedByUserError();\n      }\n    },\n    onAskAccounts(aeppId) {\n      const { name } = aeppInfo[aeppId];\n      if (!confirm(`Aepp ${name} with id ${aeppId} wants to get accounts`)) {\n        throw new RpcRejectedByUserError();\n      }\n    },\n    onMessageSign(aeppId, params) {\n      const { name } = aeppInfo[aeppId];\n      if (!confirm(`Aepp ${name} with id ${aeppId} wants to sign msg ${params.message}`)) {\n        throw new RpcRejectedByUserError();\n      }\n    },\n  });\n  // The `ExtensionProvider` uses the first account by default.\n  // You can change active account using `selectAccount(address)` function\n  await aeSdk.addAccount(new MemoryAccount({\n    keypair: {\n      publicKey: 'ak_2dATVcZ9KJU5a8hdsVtTv21pYiGWiPbmVcU1Pz72FFqpk9pSRR',\n      secretKey: 'bf66e1c256931870908a649572ed0257876bb84e3cdf71efb12f56c7335fad54d5cf08400e988222f26eb4b02c8f89077457467211a6e6d955edb70749c6a33b',\n    },\n  }), { select: true });\n  await aeSdk.addAccount(new MemoryAccount({ keypair: generateKeyPair() }));\n\n  browser.runtime.onConnect.addListener((port) =&gt; {\n    // create connection\n    const connection = new BrowserRuntimeConnection({ port });\n    // add new aepp to wallet\n    const clientId = aeSdk.addRpcClient(connection);\n    // share wallet details\n    aeSdk.shareWalletInfo(clientId);\n    setInterval(() =&gt; aeSdk.shareWalletInfo(clientId), 3000);\n  });\n\n  console.log('Wallet initialized!');\n})();\n</code></pre> View at GitHub</p>"},{"location":"guides/build-wallet/#iframe-based-wallet","title":"iFrame-based Wallet","text":"<p>The iFrame-based approach works similar to the WebExtension approach except that the <code>connectionProxy</code> in between isn't needed.</p> <p>You can take a look into the implementation of the following example to see how it works:</p> <ul> <li>iFrame-based Wallet Example</li> </ul>"},{"location":"guides/connect-aepp-to-wallet/","title":"Connect an \u00e6pp to a wallet","text":"<p>This guide describes the 4 steps that are necessary to connect your application to a wallet using the RPC API.</p>"},{"location":"guides/connect-aepp-to-wallet/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install Superhero Wallet extension for simplicity of example. You can build your own wallet in the next example</li> </ul>"},{"location":"guides/connect-aepp-to-wallet/#1-specify-imports-and-constants","title":"1. Specify imports and constants","text":"<p>examples/browser/aepp/src/StoreAeSdkPlugin.js<pre><code>import { AeSdkAepp, Node } from '@aeternity/aepp-sdk';\n\nconst TESTNET_NODE_URL = 'https://testnet.aeternity.io';\nconst MAINNET_NODE_URL = 'https://mainnet.aeternity.io';\nconst COMPILER_URL = 'https://compiler.aepps.com';\n</code></pre> View at GitHub</p>"},{"location":"guides/connect-aepp-to-wallet/#2-initialize-the-aesdkaepp-class","title":"2. Initialize the <code>AeSdkAepp</code> class","text":"<p>examples/browser/aepp/src/StoreAeSdkPlugin.js<pre><code>        aeSdk = new AeSdkAepp({\n          name: 'Simple \u00e6pp',\n          nodes: [\n            { name: 'testnet', instance: new Node(TESTNET_NODE_URL) },\n            { name: 'mainnet', instance: new Node(MAINNET_NODE_URL) },\n          ],\n          compilerUrl: COMPILER_URL,\n          onNetworkChange: async ({ networkId }) =&gt; {\n            const [{ name }] = (await aeSdk.getNodesInPool())\n              .filter((node) =&gt; node.nodeNetworkId === networkId);\n            aeSdk.selectNode(name);\n            commit('setNetworkId', networkId);\n          },\n          onAddressChange: ({ current }) =&gt; commit('setAddress', Object.keys(current)[0]),\n          onDisconnect: () =&gt; alert('Aepp is disconnected'),\n        });\n</code></pre> View at GitHub</p>"},{"location":"guides/connect-aepp-to-wallet/#3-scan-for-wallets-and-connect-to-a-wallet","title":"3. Scan for wallets and connect to a wallet","text":"<p>examples/browser/aepp/src/Connect.vue<pre><code>    async scanForWallets () {\n      return new Promise((resolve) =&gt; {\n        const handleWallets = async ({ wallets, newWallet }) =&gt; {\n          newWallet = newWallet || Object.values(wallets)[0]\n          if (confirm(`Do you want to connect to wallet ${newWallet.info.name} with id ${newWallet.info.id}`)) {\n            console.log('newWallet', newWallet)\n            stopScan()\n\n            this.walletInfo = await this.aeSdk.connectToWallet(newWallet.getConnection())\n            this.walletConnected = true\n            const { address: { current } } = await this.aeSdk.subscribeAddress('subscribe', 'connected')\n            this.$store.commit('aeSdk/setAddress', Object.keys(current)[0])\n            resolve()\n          }\n        }\n\n        const scannerConnection = new BrowserWindowMessageConnection()\n        const stopScan = walletDetector(scannerConnection, handleWallets)\n      })\n    },\n</code></pre> View at GitHub</p> <p>Alternatively, aepp can request wallet to share node url it connected to. If agreed, then aepp can connect to the wallet's node.</p> <pre><code>await this.aeSdk.connectToWallet(\n  wallet.getConnection(),\n  { connectNode: true, name: 'wallet-node', select: true },\n);\n</code></pre> <p>It can be used to</p> <ul> <li>improve responsiveness by connecting to the exact node that wallet uses;</li> <li>allow to connect aepps to private/development networks without changing their configuration;</li> <li>simplify configuration on aepp side.</li> </ul> <p>Note:</p> <ul> <li>The steps above are snippets taken from the full implementation of   the Simple \u00e6pp</li> </ul>"},{"location":"guides/contract-events/","title":"Contract Events","text":"<p>The Sophia language also provides you the possibility to emit Events in your functions. On this page you will learn how to access and decode the event log of a specific transaction.</p>"},{"location":"guides/contract-events/#eventemitter-contract","title":"EventEmitter contract","text":"<p>This example contract that emits events will be used in the following examples:</p> <pre><code>contract EventEmitter =\n\n    datatype event =\n        FirstEvent(int)\n        | AnotherEvent(indexed address, string)\n\n    entrypoint emitEvents(value: int, msg: string) =\n        Chain.event(FirstEvent(value))\n        Chain.event(AnotherEvent(Call.caller, msg))\n</code></pre>"},{"location":"guides/contract-events/#decode-events-using-aci","title":"Decode events using ACI","text":"<p>When initializing a contract instance using the source code and providing the ACI or obtaining it via http compiler (default) you will be able to access the <code>emitEvents</code> entrypoint of the Sophia contract above as follows:</p> <pre><code>// events emitted by contract calls are automatically decoded\nconst tx = await contract.emitEvents(1337, \"this message is not indexed\")\nconsole.log(tx.decodedEvents)\n\n/*\n[\n  {\n    name: 'AnotherEvent',\n    args: [\n      'fUq2NesPXcYZ1CcqBcGC3StpdnQw3iVxMA3YSeCNAwfN4myQk',\n      'this message is not indexed'\n    ],\n    contract: {\n      name: 'EventEmitter',\n      address: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh'\n    }\n  },\n  {\n    name: 'FirstEvent',\n    args: [1337n],\n    contract: {\n      name: 'EventEmitter',\n      address: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh'\n    }\n  }\n]\n*/\n</code></pre> <p>Note:</p> <ul> <li>As you can see the event log will be automatically decoded in case you perform a <code>ContractCallTx</code> directly</li> </ul> <p>Of course it is also possible to decode the event log if you request the transaction details from the node for a transaction that has been mined already. You can request the transaction details by providing the tx-hash and then decode the event log using the <code>contract</code> as follows: <pre><code>const txHash = 'th_2YV3AmAz2kXdTnQxXtR2uxQi3KuLS9wfvXyqKkQQ2Y6dE6RnET';\n// aeSdk is an instance of the AeSdk class\nconst txInfo = await aeSdk.api.getTransactionInfoByHash(txHash)\n\n// decode events using contract instance\nconst decodedUsingContract = contract.$decodeEvents(txInfo.callInfo.log)\nconsole.log(decodedUsingContract)\n\n/*\n[\n  {\n    name: 'AnotherEvent',\n    args: [\n      'fUq2NesPXcYZ1CcqBcGC3StpdnQw3iVxMA3YSeCNAwfN4myQk',\n      'this message is not indexed'\n    ],\n    contract: {\n      name: 'EventEmitter',\n      address: 'ct_fKhQBiNQkDfoZcVF1ZzPzY7Lig6FnHDCLyFYBY33ZjfzGYPps'\n    }\n  },\n  {\n    name: 'FirstEvent',\n    args: [1337n],\n    contract: {\n      name: 'EventEmitter',\n      address: 'ct_fKhQBiNQkDfoZcVF1ZzPzY7Lig6FnHDCLyFYBY33ZjfzGYPps'\n    }\n  }\n]\n*/\n</code></pre></p>"},{"location":"guides/contracts/","title":"Contracts","text":""},{"location":"guides/contracts/#introduction","title":"Introduction","text":"<p>The smart contract language of the \u00e6ternity blockchain is Sophia. It is a functional language in the ML family, strongly typed and has restricted mutable state.</p> <p>Before interacting with contracts using the SDK you should get familiar with Sophia itself first. Have a look into aepp-sophia-examples and start rapid prototyping using AEstudio.</p>"},{"location":"guides/contracts/#1-specify-imports","title":"1. Specify imports","text":"<pre><code>// node.js import\nconst { AeSdk, MemoryAccount, Node } = require('@aeternity/aepp-sdk')\n// ES import\nimport { AeSdk, MemoryAccount, Node } from '@aeternity/aepp-sdk'\n// additionally you may need to import CompilerCli or CompilerHttp\n</code></pre>"},{"location":"guides/contracts/#2-setup-compiler","title":"2. Setup compiler","text":"<p>Compiler primarily used to generate bytecode to deploy a contract. Skip this step if you have a contract bytecode or need to interact with an already deployed contract. Out-of-the-box SDK supports aesophia_cli and aesophia_http implemented in CompilerCli and CompilerHttp respectively.</p> <p>CompilerCli is available only in Node.js and requires Erlang installed (<code>escript</code> available in <code>$PATH</code>), Windows is supported. <pre><code>const compiler = new CompilerCli()\n</code></pre></p> <p>CompilerHttp requires a hosted compiler service. Preferable to host your own compiler service since compiler.aepps.com is planned to be decommissioned. An example of how to run it using docker-compose. <pre><code>const compiler = new CompilerHttp('https://v7.compiler.aepps.com') // host your own compiler\n</code></pre></p> <p>Both compiler classes implement the same interface that can be used to generate bytecode and ACI without a Contract instance.</p>"},{"location":"guides/contracts/#3-create-an-instance-of-the-sdk","title":"3. Create an instance of the SDK","text":"<p>When creating an instance of the SDK you need to provide an account which will be used to sign transactions like <code>ContractCreateTx</code> and <code>ContractCallTx</code> that will be broadcasted to the network.</p> <pre><code>const node = new Node('https://testnet.aeternity.io') // ideally host your own node\nconst account = new MemoryAccount(SECRET_KEY)\n\nconst aeSdk = new AeSdk({\n  nodes: [{ name: 'testnet', instance: node }],\n  accounts: [account],\n  onCompiler: compiler, // remove if step #2 skipped\n})\n</code></pre> <p>Note:</p> <ul> <li>You can provide multiple accounts to the SDK.</li> <li>For each transaction you can choose a specific account to use for signing (by default the first account will be used), see transaction options.<ul> <li>This is specifically important and useful for writing tests.</li> </ul> </li> </ul>"},{"location":"guides/contracts/#4-initialize-the-contract-instance","title":"4. Initialize the contract instance","text":""},{"location":"guides/contracts/#by-source-code","title":"By source code","text":"<pre><code>const sourceCode = ... // source code of the contract\nconst contract = await aeSdk.initializeContract({ sourceCode })\n</code></pre> <p>Note:</p> <ul> <li>If your contract includes external dependencies which are not part of the standard library you should initialize the contract using:   <pre><code>const fileSystem = ... // key-value map with name of the include as key and source code of the include as value\nconst contract = await aeSdk.initializeContract({ sourceCode, fileSystem })\n</code></pre></li> </ul>"},{"location":"guides/contracts/#by-path-to-source-code-available-only-in-nodejs","title":"By path to source code (available only in Node.js)","text":"<p>It can be used with both CompilerCli and CompilerHttp. This way contract imports would be handled automatically, with no need to provide <code>fileSystem</code> option. <pre><code>const sourceCodePath = './example.aes'\nconst contract = await aeSdk.initializeContract({ sourceCodePath })\n</code></pre></p>"},{"location":"guides/contracts/#by-aci-and-bytecode","title":"By ACI and bytecode","text":"<p>If you pre-compiled the contracts you can also initialize a contract instance by providing ACI and bytecode:</p> <pre><code>const aci = ... // ACI of the contract\nconst bytecode = ... // bytecode of the contract\nconst contract = await aeSdk.initializeContract({ aci, bytecode })\n</code></pre>"},{"location":"guides/contracts/#by-aci-and-contract-address","title":"By ACI and contract address","text":"<p>In many cases an application doesn't need to deploy a contract or verify its bytecode. In this case you'd want to initialize the instance by just providing the ACI and the contract address. This is also possible:</p> <pre><code>const aci = ... // ACI of the contract\nconst address = ... // the address of the contract\nconst contract = await aeSdk.initializeContract({ aci, address })\n</code></pre>"},{"location":"guides/contracts/#options","title":"Options","text":"<ul> <li>Following attributes can be provided via <code>options</code> to <code>initializeContract</code>:<ul> <li><code>aci</code> (default: obtained via <code>onCompiler</code>)<ul> <li>The Contract ACI.</li> </ul> </li> <li><code>address</code><ul> <li>The address where the contract is located at.</li> <li>To be used if a contract is already deployed.</li> </ul> </li> <li><code>fileSystem</code> (default: {})<ul> <li>Key-value map with name of the include as key and source code of the include as value.</li> </ul> </li> <li><code>validateBytecode</code> (default: false)<ul> <li>Compare source code with on-chain version.</li> </ul> </li> <li>other transaction options which will be provided to every transaction that is initiated using the contract instance. You should be aware that:<ul> <li>For most of these additional options it doesn't make sense to define them at contract instance level.</li> <li>You wouldn't want to provide an <code>amount</code> to each transaction or use the same <code>nonce</code> which would result in invalid transactions.</li> <li>For options like <code>ttl</code> or <code>gasPrice</code> it does absolutely make sense to set this on contract instance level.</li> </ul> </li> </ul> </li> </ul>"},{"location":"guides/contracts/#keep-bytecode-and-aci-for-future-use","title":"Keep bytecode and ACI for future use","text":"<p>After the contract is initialized you can persist values of <code>contract._aci</code> and <code>contract.$options.bytecode</code>. They can be provided for subsequent contract initializations to don't depend on a compiler.</p>"},{"location":"guides/contracts/#5-deploy-the-contract","title":"5. Deploy the contract","text":"<p>If you have a Sophia contract source code that looks like this: <pre><code>contract Increment =\n\n    record state =\n        { count: int }\n\n    entrypoint init(start: int) =\n        { count = start }\n\n    stateful entrypoint increment(value: int) =\n        put(state{ count = state.count + value })\n\n    entrypoint get_count() =\n        state.count\n</code></pre></p> <p>The contract can be deployed using the <code>contract</code> in two different ways:</p> <pre><code>const tx = await contract.$deploy([1])\n// or\nconst tx = await contract.init(1)\n\n// after successful deployment you can look up the transaction and the deploy information\nconsole.log(tx) // { owner, transaction, address, result, rawTx }\n</code></pre> <p>Note:</p> <ul> <li>Deployment is only possible if the contract instance was initialized by providing source code or bytecode.</li> <li>The <code>init</code> entrypoint is a special function which is only called once for deployment, initializes the contract's state and doesn't require the <code>stateful</code> declaration.</li> <li>In Sophia all <code>public functions</code> are called <code>entrypoints</code> and need to be declared as <code>stateful</code> if they should produce changes to the state of the smart contract, see <code>increment(value: int)</code>.</li> </ul>"},{"location":"guides/contracts/#6-call-contract-entrypoints","title":"6. Call contract entrypoints","text":""},{"location":"guides/contracts/#a-stateful-entrypoints","title":"a) Stateful entrypoints","text":"<p>According to the example above you can call the <code>stateful</code> entrypoint <code>increment</code> by using one of the following lines:</p> <pre><code>const tx = await contract.increment(3) // recommended\n// or\nconst tx = await contract.increment(3, { callStatic: false })\n// or\nconst tx = await contract.$call('increment', [3])\n</code></pre> <p>Note:</p> <ul> <li>The <code>callStatic: false</code> option provide an explicit way to tell the SDK to sign and broadcast the transaction.</li> <li>When using the <code>increment</code> function directly the SDK will automatically determine if it's a <code>stateful</code> entrypoint.</li> </ul>"},{"location":"guides/contracts/#b-regular-entrypoints","title":"b) Regular entrypoints","text":"<p>The \u00e6ternity node can expose an API endpoint that allows to execute a <code>dry-run</code> for a transaction. You can make use of that functionality to get the result of entrypoints that don't execute state changes. Following lines show how you can do that using the SDK for the <code>get_count</code> entrypoint of the example above:</p> <pre><code>const tx = await contract.get_count() // recommended\n// or\nconst tx = await contract.get_count({ callStatic: true })\n\n// access the decoded result returned by the execution of the entrypoint\nconsole.log(tx.decodedResult);\n</code></pre> <p>Note:</p> <ul> <li>The <code>callStatic</code> option provide an explicit way to tell the SDK to perform a <code>dry-run</code> and to NOT broadcast the transaction.</li> <li>When using the <code>get_count</code> function directly the SDK will automatically determine that the function is not declared <code>stateful</code> and thus perform a <code>dry-run</code>, too.</li> </ul>"},{"location":"guides/contracts/#c-payable-entrypoints","title":"c) Payable entrypoints","text":"<p>You will probably also write functions that require an amount of <code>aettos</code> to be provided. These functions must be declared with <code>payable</code> and (most likely) <code>stateful</code>. Let's assume you have declared following Sophia entrypoint which checks if a required amount of <code>aettos</code> has been provided before it continues execution:</p> <pre><code>payable stateful entrypoint fund_project(project_id: int) =\n        require(Call.value &gt;= 50, 'at least 50 aettos need to be provided')\n        // further logic ...\n</code></pre> <p>In order to successfully call the <code>fund_project</code> entrypoint you need to provide at least 50 <code>aettos</code>. You can do this by providing the desired amount of <code>aettos</code> using one of the following lines:</p> <pre><code>const tx = await contract.fund_project(1, { amount: 50 }) // recommended\n// or\nconst tx = await contract.$call('fund_project', [1], { amount: 50 })\n</code></pre>"},{"location":"guides/contracts/#transaction-options","title":"Transaction options","text":"<p>As already stated various times in the guide it is possible to provide transaction options as object to a function of the SDK that builds and potentially broadcasts a transaction. This object can be passed as additional param to each of these functions and overrides the default settings.</p>"},{"location":"guides/contracts/#sophia-datatype-cheatsheet","title":"Sophia datatype cheatsheet","text":"<p>Sometimes you might wonder how to pass params to the JavaScript method that calls an entrypoint of your Sophia smart contract. The conversion between JS and Sophia values is handled by aepp-calldata library. Refer to its documentation to find the right type to use.</p>"},{"location":"guides/contracts/#generate-file-system-object-in-nodejs","title":"Generate file system object in Node.js","text":"<p>To do so you can use getFileSystem function. In most cases, you don't need to do it explicitly. Prefer to use <code>sourceCodePath</code> instead <code>sourceCode</code> in Contract::initialize, and compile instead compileBySourceCode in CompilerBase.</p>"},{"location":"guides/error-handling/","title":"Error Handling","text":"<p>This guide shows you how to handle errors originating from the SDK. SDK by default exports the following error classes from file errors.ts</p>"},{"location":"guides/error-handling/#error-hierarchy","title":"Error Hierarchy","text":"<pre><code>BaseError\n\u251c\u2500\u2500 ArgumentError\n\u251c\u2500\u2500 IllegalArgumentError\n\u251c\u2500\u2500 ArgumentCountMismatchError\n\u251c\u2500\u2500 InsufficientBalanceError\n\u251c\u2500\u2500 MissingParamError\n\u251c\u2500\u2500 NoSerializerFoundError\n\u251c\u2500\u2500 RequestTimedOutError\n\u251c\u2500\u2500 TxTimedOutError\n\u251c\u2500\u2500 TypeError\n\u251c\u2500\u2500 UnsupportedPlatformError\n\u251c\u2500\u2500 UnsupportedProtocolError\n\u251c\u2500\u2500 NotImplementedError\n\u251c\u2500\u2500 UnsupportedVersionError\n\u251c\u2500\u2500 LogicError\n\u2502\n\u251c\u2500\u2500 InternalError\n\u2502   \u2514\u2500\u2500 UnexpectedTsError\n\u2502\n\u251c\u2500\u2500 AccountError\n\u2502   \u2514\u2500\u2500 UnavailableAccountError\n\u2502\n\u251c\u2500\u2500 AensError\n\u2502   \u251c\u2500\u2500 AensPointerContextError\n\u2502   \u251c\u2500\u2500 InsufficientNameFeeError\n\u2502   \u2514\u2500\u2500 InvalidAensNameError\n\u2502\n\u251c\u2500\u2500 AeppError\n\u2502   \u251c\u2500\u2500 InvalidRpcMessageError\n\u2502   \u251c\u2500\u2500 MissingCallbackError\n\u2502   \u251c\u2500\u2500 UnAuthorizedAccountError\n\u2502   \u251c\u2500\u2500 UnknownRpcClientError\n\u2502   \u2514\u2500\u2500 UnsubscribedAccountError\n\u2502\n\u251c\u2500\u2500 ChannelError\n\u2502   \u251c\u2500\u2500 ChannelCallError\n\u2502   \u251c\u2500\u2500 ChannelConnectionError\n\u2502   \u251c\u2500\u2500 ChannelPingTimedOutError\n\u2502   \u251c\u2500\u2500 UnexpectedChannelMessageError\n\u2502   \u251c\u2500\u2500 ChannelIncomingMessageError\n\u2502   \u2514\u2500\u2500 UnknownChannelStateError\n\u2502\n\u251c\u2500\u2500 CompilerError\n\u2502   \u2514\u2500\u2500 InvalidAuthDataError\n\u2502\n\u251c\u2500\u2500 ContractError\n\u2502   \u251c\u2500\u2500 BytecodeMismatchError\n\u2502   \u251c\u2500\u2500 DuplicateContractError\n\u2502   \u251c\u2500\u2500 InactiveContractError\n\u2502   \u251c\u2500\u2500 InvalidMethodInvocationError\n\u2502   \u251c\u2500\u2500 MissingContractAddressError\n\u2502   \u251c\u2500\u2500 MissingContractDefError\n\u2502   \u251c\u2500\u2500 MissingFunctionNameError\n\u2502   \u251c\u2500\u2500 NodeInvocationError\n\u2502   \u251c\u2500\u2500 NoSuchContractFunctionError\n\u2502   \u251c\u2500\u2500 NotPayableFunctionError\n\u2502   \u251c\u2500\u2500 MissingEventDefinitionError\n\u2502   \u2514\u2500\u2500 AmbiguousEventDefinitionError\n\u2502\n\u251c\u2500\u2500 CryptographyError\n\u2502   \u251c\u2500\u2500 InvalidChecksumError\n\u2502   \u251c\u2500\u2500 DerivationError\n\u2502   \u251c\u2500\u2500 InvalidPasswordError\n\u2502   \u251c\u2500\u2500 MerkleTreeHashMismatchError\n\u2502   \u251c\u2500\u2500 MissingNodeInTreeError\n\u2502   \u251c\u2500\u2500 UnknownNodeLengthError\n\u2502   \u2514\u2500\u2500 UnknownPathNibbleError\n\u2502\n\u251c\u2500\u2500 NodeError\n\u2502   \u251c\u2500\u2500 DuplicateNodeError\n\u2502   \u2514\u2500\u2500 NodeNotFoundError\n\u2502\n\u251c\u2500\u2500 TransactionError\n\u2502   \u251c\u2500\u2500 DecodeError\n\u2502   \u251c\u2500\u2500 PayloadLengthError\n\u2502   \u251c\u2500\u2500 DryRunError\n\u2502   \u251c\u2500\u2500 IllegalBidFeeError\n\u2502   \u251c\u2500\u2500 InvalidSignatureError\n\u2502   \u251c\u2500\u2500 InvalidTxError\n\u2502   \u251c\u2500\u2500 PrefixNotFoundError\n\u2502   \u251c\u2500\u2500 SchemaNotFoundError\n\u2502   \u251c\u2500\u2500 TagNotFoundError\n\u2502   \u2514\u2500\u2500 TxNotInChainError\n\u2502\n\u251c\u2500\u2500 WalletError\n\u2502   \u251c\u2500\u2500 AlreadyConnectedError\n\u2502   \u251c\u2500\u2500 NoWalletConnectedError\n\u2502   \u2514\u2500\u2500 RpcConnectionError\n\u2502\n\u251c\u2500\u2500 RpcError\n\u2502   \u251c\u2500\u2500 RpcInvalidTransactionError\n\u2502   \u251c\u2500\u2500 RpcRejectedByUserError\n\u2502   \u251c\u2500\u2500 RpcUnsupportedProtocolError\n\u2502   \u251c\u2500\u2500 RpcConnectionDenyError\n\u2502   \u251c\u2500\u2500 RpcNotAuthorizeError\n\u2502   \u251c\u2500\u2500 RpcPermissionDenyError\n\u2502   \u2514\u2500\u2500 RpcInternalError\n</code></pre>"},{"location":"guides/error-handling/#usage","title":"Usage","text":"<pre><code>// import required error classes\nimport {\n  AeSdk,\n  Node,\n  MemoryAccount,\n  ArgumentError,\n  InvalidAensNameError\n} from '@aeternity/aepp-sdk'\n\n// setup\nconst payerAccount = MemoryAccount.generate()\nconst newUserAccount = MemoryAccount.generate()\nconst node = new Node('https://testnet.aeternity.io')\nconst aeSdk = new AeSdk({\n  nodes: [{ name: 'testnet', instance: node }],\n  accounts: [payerAccount, newUserAccount],\n})\n\n// catch exceptions\ntry {\n  const spendTxResult = await aeSdk.spend(-1, newUserAccount.address, { onAccount: payerAccount})\n} catch (err) {\n  if (err instanceof ArgumentError) {\n    console.log(`Amount specified is not valid, ${err.message}`)\n  } else if (err instanceof InvalidAensNameError) {\n    console.log(`Address specified is not valid, ${err.message}`)\n  }\n}\n\n// using generic error classes\nconst {AensError, TransactionError, BaseError } = require('@aeternity/aepp-sdk')\n\ntry {\n  const spendTxResult = await aeSdk.spend(1, \"ak_2tv\", { onAccount: payerAccount})\n} catch(err) {\n  if(err instanceof AensError) {\n    // address or AENS related errors\n  } else if(err instanceof TransactionError) {\n    // transaction errors\n  } else if(err instanceof BaseError) {\n    // match any errors from the SDK\n  }\n}\n</code></pre>"},{"location":"guides/ledger-wallet/","title":"Ledger Hardware Wallet","text":"<p>This guide explains basic interactions on getting access to aeternity accounts on Ledger Hardware Wallet using JS SDK.</p>"},{"location":"guides/ledger-wallet/#prerequisite","title":"Prerequisite","text":"<p>Run the code from below you need: - a Ledger Hardware Wallet like Ledger Nano X, Ledger Nano S - to install Ledger Live - to install aeternity@0.4.4 or above app from Ledger Live to HW - to have Ledger HW connected to computer, unlocked, with aeternity app opened</p>"},{"location":"guides/ledger-wallet/#usage","title":"Usage","text":"<p>To work with accounts on Ledger HW firstly you need to choose a transport implementation. Ledger HW can be connected through USB or Bluetooth using a specific NPM package.</p> <p>After creating a transport instance you need to create a factory of Ledger accounts <pre><code>import { AccountLedgerFactory } from '@aeternity/aepp-sdk';\n\nconst accountFactory = new AccountLedgerFactory(transport);\n</code></pre> Using the factory, you can create instances of specific accounts by providing an index <pre><code>const account = await accountFactory.initialize(0);\nconsole.log(account.address); // 'ak_2dA...'\nconsole.log(await account.signTransaction('tx_...')); // 'tx_...' (with signature added)\n</code></pre> The private key for the account would be derived on the Ledger device using the provided index and the mnemonic phrase it was initialized with.</p> <p>The complete examples of how to use it in nodejs and browser can be found here.</p>"},{"location":"guides/ledger-wallet/#account-verification","title":"Account verification","text":"<p>To protect from MITM attacks is it recommended to ensure that the accessed account is the account actually available on Ledger. To do so, the app should show to user the address it have access to, the same as Ledger HW should show the address on its screen, and user should ensure that addresses the same. To trigger verification process you need to use <code>getAddress</code> method <pre><code>await accountFactory.getAddress(&lt;account index&gt;, true)\n</code></pre></p>"},{"location":"guides/ledger-wallet/#account-persistence","title":"Account persistence","text":"<p>Account can be persisted and restored by saving values of <code>index</code>, <code>address</code> properties <pre><code>import { AccountLedger } from '@aeternity/aepp-sdk';\n\nconst accountIndex = accountToPersist.index;\nconst accountAddress = accountToPersist.address;\n\nconst restoredAccount = new AccountLedger(transport, accountIndex, accountAddress);\n</code></pre> It can be used to remember accounts between app restarts.</p>"},{"location":"guides/ledger-wallet/#account-discovery","title":"Account discovery","text":"<p>In addition to the above, it is possible to get access to a sequence of accounts that already have been used on chain. It is needed, for example, to restore the previously used accounts in case the user connects Ledger HW to an app that doesn't aware of them. <pre><code>import { Node } from '@aeternity/aepp-sdk';\n\nconst node = new Node('https://testnet.aeternity.io');\nconst accounts = await accountFactory.discover(node);\nconsole.log(accounts[0].address); // 'ak_2dA...'\n</code></pre></p>"},{"location":"guides/low-vs-high-usage/","title":"Low vs High level API","text":""},{"location":"guides/low-vs-high-usage/#interactions","title":"Interactions","text":"<p>\"There are two approaches, purist and high-level.\" Alexander Kahl.</p> <p>The purist uses the functions generated out of the Swagger file. After creating the SDK instance <code>aeSdk</code> with the AeSdk class it exposes a mapping of all <code>operationId</code>s as functions, converted to camelCase (from PascalCase). So e.g. in order to get a transaction based on its hash you would invoke <code>aeSdk.api.getTransactionByHash('th_...')</code>.</p> <p>In this way the SDK is simply a mapping of the raw API calls into JavaScript. It's excellent for low-level control, and as a teaching tool to understand the node's operations. Most real-world requirements involves a series of chain operations, so the SDK provides abstractions for these.</p>"},{"location":"guides/low-vs-high-usage/#recommended-high-level-sdk-usage","title":"(Recommended) High-level SDK usage","text":"<p>Example spend function, using \u00e6ternity's SDK abstraction.</p> <pre><code>import { MemoryAccount, Node, AeSdk } from '@aeternity/aepp-sdk'\n\nasync function init () {\n  const node = new Node('https://testnet.aeternity.io') // ideally host your own node!\n\n  const aeSdk = new AeSdk({\n    nodes: [{ name: 'testnet', instance: node }],\n    accounts: [new MemoryAccount('&lt;SECRET_KEY_HERE&gt;')],\n  })\n\n  // log transaction info\n  console.log(await aeSdk.spend(100, 'ak_...'))\n}\n</code></pre>"},{"location":"guides/low-vs-high-usage/#low-level-sdk-usage-use-api-endpoints-directly","title":"Low-level SDK usage (use API endpoints directly)","text":"<p>Example spend function, using the SDK, talking directly to the API: <pre><code>import { MemoryAccount, Node, AeSdk, Tag } from '@aeternity/aepp-sdk'\n\nasync function spend (amount, recipient) {\n  const node = new Node('https://testnet.aeternity.io') // ideally host your own node!\n  const aeSdk = new AeSdk({\n    nodes: [{ name: 'testnet', instance: node }],\n    accounts: [new MemoryAccount('&lt;SECRET_KEY_HERE&gt;')],\n  })\n\n  // builds an unsigned SpendTx using integrated transaction builder\n  const spendTx = await aeSdk.buildTx(Tag.SpendTx, {\n    senderId: aeSdk.address,\n    recipientId: recipient,\n    amount, // aettos\n    payload: 'using low-level api is funny'\n  })\n\n  // sign the encoded transaction\n  const signedTx = await aeSdk.signTransaction(spendTx)\n\n  // broadcast the signed tx to the node\n  console.log(await aeSdk.api.postTransaction({tx: signedTx}))\n}\n</code></pre></p> <p>Following functions are available with the low-level API right now:</p> <pre><code>console.log(aeSdk.api)\n/*\n{\n  getTopHeader: [AsyncFunction (anonymous)],\n  getCurrentKeyBlock: [AsyncFunction (anonymous)],\n  getCurrentKeyBlockHash: [AsyncFunction (anonymous)],\n  getCurrentKeyBlockHeight: [AsyncFunction (anonymous)],\n  getPendingKeyBlock: [AsyncFunction (anonymous)],\n  getKeyBlockByHash: [AsyncFunction (anonymous)],\n  getKeyBlockByHeight: [AsyncFunction (anonymous)],\n  getMicroBlockHeaderByHash: [AsyncFunction (anonymous)],\n  getMicroBlockTransactionsByHash: [AsyncFunction (anonymous)],\n  getMicroBlockTransactionByHashAndIndex: [AsyncFunction (anonymous)],\n  getMicroBlockTransactionsCountByHash: [AsyncFunction (anonymous)],\n  getCurrentGeneration: [AsyncFunction (anonymous)],\n  getGenerationByHash: [AsyncFunction (anonymous)],\n  getGenerationByHeight: [AsyncFunction (anonymous)],\n  getAccountByPubkey: [AsyncFunction (anonymous)],\n  getAccountByPubkeyAndHeight: [AsyncFunction (anonymous)],\n  getAccountByPubkeyAndHash: [AsyncFunction (anonymous)],\n  getPendingAccountTransactionsByPubkey: [AsyncFunction (anonymous)],\n  getAccountNextNonce: [AsyncFunction (anonymous)],\n  protectedDryRunTxs: [AsyncFunction (anonymous)],\n  getTransactionByHash: [AsyncFunction (anonymous)],\n  getTransactionInfoByHash: [AsyncFunction (anonymous)],\n  postTransaction: [AsyncFunction (anonymous)],\n  getContract: [AsyncFunction (anonymous)],\n  getContractCode: [AsyncFunction (anonymous)],\n  getContractPoI: [AsyncFunction (anonymous)],\n  getOracleByPubkey: [AsyncFunction (anonymous)],\n  getOracleQueriesByPubkey: [AsyncFunction (anonymous)],\n  getOracleQueryByPubkeyAndQueryId: [AsyncFunction (anonymous)],\n  getNameEntryByName: [AsyncFunction (anonymous)],\n  getChannelByPubkey: [AsyncFunction (anonymous)],\n  getPeerPubkey: [AsyncFunction (anonymous)],\n  getStatus: [AsyncFunction (anonymous)],\n  getChainEnds: [AsyncFunction (anonymous)]\n}\n*/\n</code></pre>"},{"location":"guides/oracles/","title":"Oracles","text":""},{"location":"guides/oracles/#introduction","title":"Introduction","text":"<p>This guide shows you how to perform all the operations that you need within the lifecycle of oracles using the SDK.</p>"},{"location":"guides/oracles/#1-oracle-register","title":"1. Oracle: register","text":"<p>You register an oracle that responds with the temperature of the city that is included in the query.</p> <p>To register an oracle you need to provide a <code>queryFormat</code> and a <code>responseFormat</code> to the <code>registerOracle</code> function of the SDK. In addition to the common transaction options you can provide the oracle specific options <code>queryFee</code> and <code>oracleTtlValue</code>, see transaction options.</p> <pre><code>// init an instance of the SDK using the AeSdk class\nconst aeSdk = new AeSdk({ ... })\n\n// set TTL with a delta of 1000 blocks\nconst oracleTtlOptions = { oracleTtlType: ORACLE_TTL_TYPES.delta, oracleTtlValue: 1000 }\n// OR set a specific block height to expire\nconst oracleTtlOptions = { oracleTtlType: ORACLE_TTL_TYPES.block, oracleTtlValue: 555555 }\n\n// queryFee is optional and defaults to 0\n// oracleTtlValue is optional and defaults to 500\n// oracleTtlType is optional and defaults to ORACLE_TTL_TYPES.delta\nconst options = { queryFee: 1337, ...oracleTtlOptions }\n\n// the first argument is the queryFormat and the second is the responseFormat\nconst oracle = await aeSdk.registerOracle('{\"city\": \"str\"}', '{\"temperature\": \"int\"}', options)\n</code></pre> <p>Note:</p> <ul> <li>By default the oracle will exist for the next 500 KeyBlocks.</li> <li>If you intend to keep your oracle running longer you should increase the <code>oracleTtlValue</code> and/or set up a service that automatically extends the TTL before it expires.</li> <li>The <code>oracleId</code> will be similar to the address of the account that registered the Oracle.</li> <li>The only difference is the prefix that will be <code>ok_</code> instead of <code>ak_</code></li> <li>This means that each account can only host 1 oracle. It's not possible to manage multiple oracles using the same account.</li> </ul>"},{"location":"guides/oracles/#2-some-party-query-an-oracle-and-poll-for-response","title":"2. Some party: query an oracle and poll for response","text":""},{"location":"guides/oracles/#query","title":"Query","text":"<p>After the oracle has been registered and as long as it isn't expired, everybody that knows the <code>oracleId</code> can query it.</p> <pre><code>const oracleId = 'ok_...';\n\nconst options = {\n  queryFee: 1337, // should cover the requested fee of the oracle and defaults to 0\n  queryTtlType: ORACLE_TTL_TYPES.delta, // optional and defaults to ORACLE_TTL_TYPES.delta\n  queryTtlValue: 20, // optional and defaults to 10\n  responseTtlType: ORACLE_TTL_TYPES.delta, // optional and defaults to ORACLE_TTL_TYPES.delta\n  responseTtlValue: 50, // optional and defaults to 10\n};\n\n// using the oracle object in case you need to instantiate the oracle object first\nconst oracle = await aeSdk.getOracleObject(oracleId)\nconst query = await oracle.postQuery('{\"city\": \"Berlin\"}', options)\n\n// OR using the aeSdk (instance of AeSdk class) directly by providing the oracleId\nconst query = await aeSdk.postQueryToOracle(oracleId, '{\"city\": \"Berlin\"}', options)\n</code></pre> <p>Note:</p> <ul> <li>Again, take a look into the transaction options to see what (other) options you can provide.</li> </ul>"},{"location":"guides/oracles/#poll-for-response","title":"Poll for response","text":"<p>Now you have access to the query object and can poll for the response to that specific query:</p> <pre><code>const oracleId = 'ok_...';\nconst queryId = 'oq_...';\n\n// using the query instance\nconst query = await aeSdk.getQueryObject(oracleId, queryId) // in case you need to get the query instance first\nconst response = await query.pollForResponse({ interval: 6000 })\n\n// OR using the aeSdk (instance of AeSdk class) directly by providing the oracleId\nconst response = await aeSdk.pollForQueryResponse(oracleId, queryId, { interval: 6000 })\n\n// decode the oracle response\n// the decode function returns a buffer that needs to be converted to a string\nconst decodedResponse = String(response.decode());\nconsole.log(decodedResponse)\n</code></pre>"},{"location":"guides/oracles/#3-oracle-poll-for-queries-and-respond","title":"3. Oracle: poll for queries and respond","text":""},{"location":"guides/oracles/#poll-for-queries","title":"Poll for queries","text":"<p>Typically, the oracle itself polls for its own queries and responds as soon as possible:</p> <pre><code>const stopPolling = await oracle.pollQueries((query) =&gt; {\n  console.log(query) // log a new query\n}, { interval: 1000 }) // polling interval in milliseconds\n\nstopPolling() // stop polling\n</code></pre> <p>Note:</p> <ul> <li>Probably the oracle would respond here directly (see below) instead of just logging the queries.</li> </ul>"},{"location":"guides/oracles/#respond-to-query","title":"Respond to query","text":"<p>If the oracle recognizes that it has been queried it can respond to the query as long as the query's TTL has not been expired.</p> <pre><code>const oracleId = 'ok_...';\nconst queryId = 'oq_...';\nconst options = { onAccount: 'ak_...' } // only the account of the oracle can respond to the query\n\n// using the query instance\nconst query = await aeSdk.getQueryObject(oracleId, queryId)\nawait query.respond('{\"temperature\": 27.5}', options)\n\n// OR using the aeSdk (instance of AeSdk class) directly by providing the queryId\nawait aeSdk.respondToQuery(queryId, '{\"temperature\": 27.5}', options)\n</code></pre> <p>Note:</p> <ul> <li>Of course the oracle itself would either use an API to get the current temperature for a certain city or ideally directly communicate with measuring devices located in that specific city.</li> <li>If the AeSdk class is initialized with the oracle's account there is no need to pass the <code>onAccount</code> option as this is done implicitely.</li> </ul>"},{"location":"guides/oracles/#4-oracle-extend","title":"4. Oracle: extend","text":"<p>As mentioned above an Oracle has a certain TTL that can be specified when registering it. You might want to extend the TTL of the oracle before it expires. You can do that as follows:</p> <pre><code>const oracleId = 'ok_...';\n\n// extend TTL by additional 500 blocks (based on current expiration height of the oracle)\nconst options = { oracleTtlType: ORACLE_TTL_TYPES.delta, oracleTtlValue: 500 }\n\n// using the oracle instance\nconst oracle = await aeSdk.getOracleObject(oracleId)\nconst extendedOracle = await oracle.extendOracle(options)\n\n// OR using the aeSdk (instance of AeSdk class) directly\nconst extendedOracle = await aeSdk.extendOracleTtl(options)\n</code></pre>"},{"location":"guides/oracles/#example-applications","title":"Example applications","text":"<ul> <li>ae-oracle-pricefeed<ul> <li>NodeJS example that registers an oracle, extends it if required and responds to queries automatically.</li> </ul> </li> </ul>"},{"location":"guides/paying-for-tx/","title":"PayingForTx (Meta-Transactions)","text":""},{"location":"guides/paying-for-tx/#introduction","title":"Introduction","text":"<p>This guide explains you how to perform a <code>PayingForTx</code> (also known as meta-transaction) using the SDK.</p> <p>It is a very powerful and efficient solution that is crucial for onboarding new users into you ecosystem. By making use of the <code>PayingForTx</code> you will be able to cover the fees of your users.</p>"},{"location":"guides/paying-for-tx/#how-it-works","title":"How it works","text":"<p>Typically somebody that you want to pay the transaction for (e.g. a new user of your decentralized aepp) signs the inner transaction (e.g. of type <code>ContractCallTx</code>) with a specific signature that is used for inner transactions.</p> <p>You can then collect the signed inner transaction, wrap it into a <code>PayingForTx</code> and broadcast it to the network.</p>"},{"location":"guides/paying-for-tx/#usage-examples","title":"Usage examples","text":"<p>We provided following two NodeJS examples which you can take a look at:</p> <ul> <li>InnerTx: ContractCallTx</li> <li>InnerTx: SpendTx</li> </ul> <p>Note:</p> <ul> <li>A <code>PayingForTx</code> can wrap any kind of other transaction type supported by the protocol as inner transaction.</li> </ul>"},{"location":"guides/paying-for-tx/#usecases","title":"UseCases","text":"<ul> <li>Game developers that want to quickly onboard new users.</li> <li>Governance aepps that want people to vote on important proposals without having them to pay anything.</li> <li>Custodians that want to offer an additional services to cover the transaction fees of their clients.</li> <li>... many more!</li> </ul>"},{"location":"guides/typed-data/","title":"Typed data hashing and signing","text":""},{"location":"guides/typed-data/#common-structure","title":"Common structure","text":"<p>The whole idea is heavily inspired by EIP-712. To get a signature needed to calculate <code>hash(hash(domain), hash(aci), hash(data))</code>.</p> <p><code>hash</code> function is <code>blake2b</code>.</p> <p><code>domain</code> is a record containing not required properties: - <code>name</code> as string, - <code>version</code> as integer, - <code>networkId</code> as string, - <code>contractAddress</code> as ct-encoded string.</p> <p><code>aci</code> is part of a complete contract ACI. It defines a type of data to sign. For example, the ACI <pre><code>{\n  \"record\": [\n    { \"name\": \"foo\", \"type\": \"string\" },\n    { \"name\": \"bar\", \"type\": \"int\" }\n  ]\n}\n</code></pre> corresponds to the data <pre><code>{ \"foo\": \"test\", \"bar\": 42 }\n</code></pre></p> <p><code>domain</code> and <code>data</code> are fate-encoded before hashing. <code>aci</code> is prepared for hashing according to RFC8785.</p>"},{"location":"guides/typed-data/#implementation","title":"Implementation","text":"<ul> <li>AccountBase:signTypedData \u2014 calculates signature, supported in MemoryAccount and in aepp-wallet connection;</li> <li>hashTypedData \u2014 calculates the overall hash of typed data to sign;</li> <li>hashJson \u2014 deterministic hashing of an arbitrary JS value, used to calculate <code>hash(aci)</code>;</li> <li>hashDomain \u2014 use for debugging or to prepare the hash value for smart contract.</li> </ul>"},{"location":"guides/typed-data/#examples","title":"Examples","text":"<ul> <li>signing and verifying on aepp side</li> <li>signing confirmation on wallet side</li> <li>verifying a signature on contract side</li> </ul>"},{"location":"guides/migration/10.0.0/","title":"Migration to 10.0.0","text":"<p>This guide describes all breaking changes introduced with <code>v10.0.0</code>.</p>"},{"location":"guides/migration/10.0.0/#pollforqueryresponse-returns-response-as-string-1285","title":"<code>pollForQueryResponse</code> returns response as string (#1285)","text":"<ul> <li>replace <code>oldResult.decode</code> with <code>new Buffer(newResult)</code>.</li> <li>replace <code>oldResult.response</code> with <code>TxBuilderHelper.encode(new Buffer(newResult), 'or'')</code>.</li> </ul>"},{"location":"guides/migration/10.0.0/#removed-skipargsconvert-option-of-contract-call-and-deployment-6d4a599","title":"removed <code>skipArgsConvert</code> option of contract call and deployment (6d4a599)","text":"<p>Convert arguments in intermediate Sophia representation to JavaScript types. For example: <pre><code>contract.methods.listFn('[1, 2]', { skipArgsConvert: false })\n</code></pre> rewrite to <pre><code>contract.methods.listFn([1, 2])\n</code></pre></p>"},{"location":"guides/migration/10.0.0/#removed-skiptransformdecoded-option-of-contract-call-and-deployment-bb49239","title":"removed <code>skipTransformDecoded</code> option of contract call and deployment (bb49239)","text":"<p>Decoding to JavaScript types is enforced, please use it instead.</p>"},{"location":"guides/migration/10.0.0/#ak_-addresses-are-not-accepted-as-hashes-bytes-and-signatures-anymore-cbaac62","title":"ak_ addresses are not accepted as hashes, bytes, and signatures anymore (cbaac62)","text":"<p>Encode addresses as an <code>ak_</code>-prefixed string instead.</p>"},{"location":"guides/migration/10.0.0/#removed-contractencodecall-a4b303f","title":"removed <code>contractEncodeCall</code> (a4b303f)","text":"<p>Use <code>contractEncodeCallDataAPI</code> instead.</p>"},{"location":"guides/migration/10.0.0/#removed-contractdecodedata-5df2285","title":"removed <code>contractDecodeData</code> (5df2285)","text":"<p>Use <code>contractDecodeCallResultAPI</code> instead.</p>"},{"location":"guides/migration/10.0.0/#removed-setoptions-on-contract-instance-b88e767","title":"removed <code>setOptions</code> on contract instance (b88e767)","text":"<p>Pass them through <code>getContractInstance</code> options instead.</p>"},{"location":"guides/migration/10.0.0/#contractcallstatic-contractcall-contractdeploy-are-deprecated-now-c4ec019","title":"<code>contractCallStatic</code>, <code>contractCall</code>, <code>contractDeploy</code> are deprecated now (c4ec019)","text":"<p>Use <code>getContractInstance</code> instead. Also, these methods will accept JavaScript-type variables instead of Sophia-encoded. For example: <pre><code>sdk.contractCallStatic(source, address, methodName, ['42'])\n</code></pre> should be replaced with <pre><code>sdk.contractCallStatic(source, address, methodName, [42])\n</code></pre></p>"},{"location":"guides/migration/10.0.0/#dropped-compatibility-with-compiler410-f9cef12","title":"dropped compatibility with compiler@4.1.0 (f9cef12)","text":"<p>Use compiler 6.0.0 and above.</p>"},{"location":"guides/migration/10.0.0/#invert-and-rename-forcecodecheck-option-to-validatebytecode-in-getcontractinstance-72122fa","title":"invert and rename <code>forceCodeCheck</code> option to <code>validateBytecode</code> in <code>getContractInstance</code> (72122fa)","text":"<p>Use <code>validateBytecode</code> when you need to ensure that the source code/bytecode provided to <code>getContractInstance</code> corresponds to the on-chain bytecode.</p>"},{"location":"guides/migration/10.0.0/#removed-getconsensusprotocolversion-method-75f0447","title":"removed <code>getConsensusProtocolVersion</code> method (75f0447)","text":"<p>Use <code>node.consensusProtocolVersion</code> instead.</p>"},{"location":"guides/migration/10.0.0/#switched-to-aeternityaepp-calldata-package-1313","title":"switched to @aeternity/aepp-calldata package (#1313)","text":"<p>Numbers in Sophia are not limited in size. Before they were returned from contract methods as usual JavaScript numbers that have limited accuracy. To fix this, we make it return instances of BigInt.</p> <p>Variant types are now supported by sdk, so replace <code>\"RelativeTTL(50)\"</code> with <code>{ RelativeTTL: [50] }</code>. As an exception <code>Some(value)</code> is converted to the exact value in JavaScript and <code>None</code> is converted to <code>undefined</code> (Sophia's <code>option</code> type).</p> <p>Contract methods will accept/return instances of JavaScript's <code>Map</code> as variables of Sophia's <code>map</code> type. Objects are not accepted as maps any longer.</p> <p>Sophia's <code>hash</code>, <code>signature</code>, <code>bytes</code> types return values as <code>Uint8Array</code> instead of a hex-encoded string.</p> <p>Check the documentation of calldata package for additional info.</p> <p>Use <code>.decodedResult</code> instead of <code>.decode()</code> to get the result of method call.</p> <p>Most of the errors thrown by contract iterations will be different due to doing validation using calldata package instead of <code>joi</code>.</p>"},{"location":"guides/migration/10.0.0/#pass-source-in-options-of-sdkgetcontractinstance-5c690d2","title":"pass source in options of <code>sdk.getContractInstance</code> (5c690d2)","text":"<p>For example: <pre><code>sdk.getContractInstance(contractSource, { contractAddress: '...' })\n</code></pre> rewrite to <pre><code>sdk.getContractInstance({ source: contractSource, contractAddress: '...' })\n</code></pre></p> <p>Contract instance can be generated by ACI and bytecode: <pre><code>sdk.getContractInstance({ aci, bytecode })\n</code></pre> SDK won't use hosted compiler in this case.</p> <p>Also, <code>contract.compiled</code> was renamed to <code>contract.bytecode</code>.</p>"},{"location":"guides/migration/10.0.0/#additional-options-of-getcontractinstance-accepted-as-usual-ones-10fb7ba","title":"additional options of <code>getContractInstance</code> accepted as usual ones (10fb7ba)","text":"<p>For example, replace <pre><code>sdk.getContractInstance({ source, opt: { ttl: 1 } })\n</code></pre> with <pre><code>sdk.getContractInstance({ source, ttl: 1 })\n</code></pre></p>"},{"location":"guides/migration/10.0.0/#drop-compatibility-with-es5-1331","title":"drop compatibility with es5 (#1331)","text":"<p>To support old environments, you need to set up transpilation of SDK package while building your app. In Webpack it can be done by excluding <code>node_modules</code> folder except for this package in <code>babe-loader</code> rule. In <code>@vue/cli</code> you can use transpileDependencies option.</p>"},{"location":"guides/migration/10.0.0/#removed-primitives-for-encryptiondecryption-by-keypairs-1183","title":"removed primitives for encryption/decryption by keypairs (#1183)","text":"<p>Use third-party cryptographic packages instead of <code>Crypto.encryptData</code>, <code>Crypto.decryptData</code> methods.</p>"},{"location":"guides/migration/10.0.0/#aensupdate-accepts-pointers-as-object-f6b8999","title":"<code>aensUpdate</code> accepts pointers as object (f6b8999)","text":"<p>For example, replace <pre><code>sdk.aensUpdate('test.chain', ['ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk'])\n</code></pre> with <pre><code>sdk.aensUpdate('test.chain', {\n  account_pubkey: 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk'\n})\n</code></pre> Additionally, <code>getDefaultPointerKey</code> (was named <code>classify</code> before) helper function can be used <pre><code>import { getDefaultPointerKey } from '@aeternity/aepp-sdk'\n\nconst address = 'ak_2519mBsgjJEVEFoRgno1ryDsn3BEaCZGRbXPEjThWYLX9MTpmk'\nsdk.aensUpdate('test.chain', { [getDefaultPointerKey(address)]: address })\n</code></pre></p>"},{"location":"guides/migration/11.0.0/","title":"Migration to 11.0.0","text":"<p>This guide describes all breaking changes introduced with <code>v11.0.0</code>.</p>"},{"location":"guides/migration/11.0.0/#changes-to-decodeevents-method","title":"Changes to <code>decodeEvents</code> method","text":"<ul> <li>Removed <code>decodeEvents</code> from contract ACI methods (a84d781).</li> </ul> <p>rewrite   <pre><code>cInstance.methods.emitEvents.decodeEvents(log)\n</code></pre>   to   <pre><code>cInstance.decodeEvents(log)\n</code></pre></p> <ul> <li> <p>Removed raw fields from the <code>decodeEvents</code> response (45bae5f) use processed fields for the same.</p> </li> <li> <p>Renamed decoded events response field <code>decoded</code> to <code>args</code></p> </li> </ul> <p>old response <pre><code>// events emitted by contract calls are automatically decoded\nconst tx = await contractInstance.methods.emitEvents(1337, \"this message is not indexed\")\nconsole.log(tx.decodedEvents)\n\n/*\n[\n  {\n    address: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    data: 'cb_dGhpcyBtZXNzYWdlIGlzIG5vdCBpbmRleGVkdWmUpw==',\n    topics: [\n      '101640830366340000167918459210098337687948756568954742276612796897811614700269',\n      '39519965516565108473327470053407124751867067078530473195651550649472681599133'\n    ],\n    name: 'AnotherEvent',\n    decoded: [\n      'fUq2NesPXcYZ1CcqBcGC3StpdnQw3iVxMA3YSeCNAwfN4myQk',\n      'this message is not indexed'\n    ]\n  },\n  {\n    address: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    data: 'cb_Xfbg4g==',\n    topics: [\n      '59505622142252318624300825714684802559980671551955787864303522023309554554980',\n      1337\n    ],\n    name: 'FirstEvent',\n    decoded: [ '1337' ]\n  }\n]\n*/\n</code></pre> new response <pre><code>// events emitted by contract calls are automatically decoded\nconst tx = await contractInstance.methods.emitEvents(1337, \"this message is not indexed\")\nconsole.log(tx.decodedEvents)\n\n/*\n[\n  {\n    name: 'AnotherEvent',\n    args: [\n      'fUq2NesPXcYZ1CcqBcGC3StpdnQw3iVxMA3YSeCNAwfN4myQk',\n      'this message is not indexed'\n    ],\n    contract: {\n      name: 'EventEmitter',\n      address: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh'\n    }\n  },\n  {\n    name: 'FirstEvent',\n    args: [1337n],\n    contract: {\n      name: 'EventEmitter',\n      address: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh'\n    }\n  }\n]\n*/\n</code></pre></p>"},{"location":"guides/migration/11.0.0/#removed-allowunsynced-option-of-poll-method-6baa15d","title":"Removed <code>allowUnsynced</code> option of <code>poll</code> method (6baa15d)","text":""},{"location":"guides/migration/11.0.0/#transaction-poll-method-now-checks-if-tx-is-in-the-node-pool-690db5b","title":"Transaction <code>poll</code> method now checks if Tx is in the node pool (690db5b)","text":""},{"location":"guides/migration/11.0.0/#the-default-polling-interval-of-5000-is-replaced-by-a-method-which-calculates-the-default-interval-using-expected-mine-rate-and-micro-block-cycle-d9c6cf9","title":"The default polling interval of <code>5000</code> is replaced by a method which calculates the default interval using expected mine rate and micro block cycle (d9c6cf9)","text":""},{"location":"guides/migration/11.0.0/#following-contract-instance-methods-are-dropped1368","title":"Following contract instance methods are dropped(#1368)","text":"<ul> <li><code>topBlock</code><ul> <li>use <code>aeSdk.api.getTopHeader()</code> instead</li> </ul> </li> <li><code>contractCall</code><ul> <li>replace <code>await aeSdk.contractCall(identityContract, contractId, 'getArg', [42])</code></li> <li>with <code>(await aeSdk.getContractInstance({ source, contractAddress: contractId })).methods.getArg(42)</code></li> </ul> </li> <li><code>contractCompile</code><ul> <li>replace <code>await aeSdk.contractCompile(CONTRACT_SOURCE)</code></li> <li>with <code>(await aeSdk.getContractInstance({ source: CONTRACT_SOURCE })).compile()</code></li> </ul> </li> <li><code>contractDeploy</code><ul> <li>replace <code>await aeSdk.contractDeploy(bytecode, identityContract)</code></li> <li>with <code>(await aeSdk.getContractInstance({ bytecode, source: identityContract })).deploy()</code></li> </ul> </li> <li><code>contractCallStatic</code><ul> <li>replace <code>await aeSdk.contractCallStatic(identityContract, null, 'init', [], { bytecode })</code></li> <li>with <code>await contract.deploy([], { callStatic: true })</code></li> </ul> </li> <li>Removed property <code>createdAt</code> from <code>contract.deploy</code> method response</li> <li><code>call/callStatic</code><ul> <li>removed <code>call</code> and <code>callStatic</code> methods from deploy response</li> </ul> </li> </ul> <p>rewrite <pre><code>  deployed = await contract.deploy([], { onAccount })\n  await deployed.call('getArg', [42])\n  await deployed.callStatic('getArg', [42])\n</code></pre> to <pre><code>  await contract.deploy()\n  await contract.methods.getArg(42, { callStatic: false })\n  await contract.methods.getArg(42, { callStatic: true })\n</code></pre></p>"},{"location":"guides/migration/11.0.0/#the-default-gas-of-25000-limit-has-been-dropped-instead-sdk-attempts-to-estimate-the-gas-using-dry-run-feature-1367","title":"The default <code>gas</code> of 25000 limit has been dropped. Instead, SDK attempts to estimate the gas using dry-run feature (#1367)","text":"<p>See documentation on transaction-options.md for detailed explanation.</p>"},{"location":"guides/migration/11.0.0/#removed-wrappers-around-compilerapi-1363","title":"Removed Wrappers around <code>CompilerApi</code> (#1363)","text":"<ul> <li> <p>Removed <code>getBytecodeCompilerVersion</code> method.</p> </li> <li> <p>Removed <code>encodeCall</code> method from <code>contractCompile</code> response.</p> </li> <li> <p>Removed <code>getCompilerVersion</code> method, use <code>aeSdk. sdk.compilerVersion</code> instead.</p> </li> <li> <p>Removed <code>contractDecodeCallDataByCodeAPI</code> method.</p> </li> <li> <p>Removed <code>contractDecodeCallResultAPI</code> method.</p> </li> <li> <p>Removed <code>getFateAssembler</code> method.</p> </li> <li> <p>Removed <code>compileContractAPI</code> method.</p> </li> </ul> <p>rewrite <pre><code>const code = await aeSdk.compileContractAPI(identityContract)\nconst callData = await aeSdk.contractEncodeCallDataAPI(identityContract, 'init', [])\nconst result = await initiatorCh.createContract({\n      code,\n      callData,\n      deposit: 1000,\n      vmVersion: 5,\n      abiVersion: 3,\n      amount,\n      gas,\n      gasPrice,\n})\n</code></pre> to <pre><code>contract = await aeSdk.getContractInstance({ source: contractSource })\nawait contract.compile()\nconst result = await aeSdk.createContract({\n      code: contract.bytecode,\n      callData: contract.calldata.encode('Identity', 'init', []),\n      deposit: 1000,\n      vmVersion: 5,\n      abiVersion: 3,\n      amount,\n      gas,\n      gasPrice,\n})\n\n//or\nbytecode = (await aeSdk.compilerApi.compileContract({ code: contractSource })).bytecode\n</code></pre></p> <ul> <li>Removed <code>contractEncodeCallDataAPI</code>:</li> </ul> <p>rewrite <pre><code>await aeSdk.contractEncodeCallDataAPI(contractSource, 'getArg', ['42'])\n</code></pre> to <pre><code>contract = await aeSdkInitiator.getContractInstance({ source: contractSource })\nawait contract.compile()\ncontract.calldata.encode('Identity', 'getArg', [42])\n</code></pre></p> <ul> <li>Removed <code>contractGetACI</code>:</li> </ul> <p>rewrite <pre><code>const aci = await aeSdk.contractGetACI(contractSource)\n</code></pre> to <pre><code>const aci = await aeSdk.compilerApi.generateACI({ code: contractSource })\n</code></pre></p> <ul> <li>Removed <code>validateByteCodeAPI</code>:</li> </ul> <p>rewrite <pre><code>aeSdk.validateByteCodeAPI(bytecode, identityContract)\n</code></pre> to <pre><code>await aeSdk.compilerApi.validateByteCode({ bytecode, source: identityContract })\n</code></pre></p>"},{"location":"guides/migration/11.0.0/#native-build-of-claim-tx-now-accepts-unencoded-name-instead-of-encoded-name-eea92be","title":"Native build of claim tx now accepts unencoded <code>name</code> instead of encoded name (eea92be)","text":"<p>rewrite <pre><code>const name = 'test123test.chain'\nconst nameHash = `nm_${encodeBase58Check(Buffer.from(name))}`\nconst params = { accountId: senderId, nonce, name: nameHash, nameSalt: _salt, nameFee }\nconst txFromAPI = await aeSdk.nameClaimTx(params)\n</code></pre> to <pre><code>const name = 'test123test.chain'\nconst params = { accountId: senderId, nonce, name, nameSalt: _salt, nameFee }\nconst txFromAPI = await aeSdk.nameClaimTx(params)\n</code></pre></p>"},{"location":"guides/migration/11.0.0/#removed-forcevalidation-flag-from-aepp-rpc-and-wallet-rpc-stamps-9f958c3","title":"Removed <code>forceValidation</code> flag from <code>aepp-rpc</code> and <code>wallet-rpc</code> stamps. (9f958c3)","text":""},{"location":"guides/migration/11.0.0/#renamed-hd-wallet-methods-f6243ad","title":"Renamed <code>hd-wallet</code> methods (f6243ad)","text":"<ul> <li>Renamed <code>generateSaveHDWallet</code> to <code>generateSaveHDWalletFromSeed</code></li> <li>Renamed <code>getHdWalletAccountFromMnemonic</code> to <code>getHdWalletAccountFromSeed</code></li> </ul>"},{"location":"guides/migration/12.0.0/","title":"Migration to 12.0.0","text":"<p>This guide describes all breaking changes introduced with <code>v12.0.0</code>.</p>"},{"location":"guides/migration/12.0.0/#general","title":"General","text":""},{"location":"guides/migration/12.0.0/#universal-rpcaepp-rpcwallet-ae-stamps-are-removed","title":"<code>Universal</code>, <code>RpcAepp</code>, <code>RpcWallet</code>, <code>Ae</code> stamps are removed","text":"<p>Use <code>AeSdk</code>, <code>AeSdkAepp</code>, <code>AeSdkWallet</code>, <code>AeSdbBase</code> accordingly. For example: <pre><code>-import { Universal } from '@aeternity/aepp-sdk'\n+import { AeSdk } from '@aeternity/aepp-sdk'\n\n-const aeSdk = await Universal(options)\n+const aeSdk = new AeSdk(options)\n</code></pre></p>"},{"location":"guides/migration/12.0.0/#node-rpcclient-browserwindowmessage-classes-are-using-private-fields","title":"<code>Node</code>, <code>RpcClient</code>, <code>BrowserWindowMessage</code> classes are using private fields","text":"<p>Accessing private fields through <code>Proxy</code> will lead to \"TypeError: attempted to set private field on non-instance\" (tc39). This may be an issue if you are using aepp-sdk with Vue@3, because Vue@3 introduced reactivity based on <code>Proxy</code> class (Vue docs). Avoid the above error by not making instances of these classes reactive.</p>"},{"location":"guides/migration/12.0.0/#all-combined-exports-are-inlined-requireaeternityaepp-sdkgeneratekeypair","title":"all combined exports are inlined (<code>require('@aeternity/aepp-sdk').generateKeyPair()</code>)","text":"<p>Import the needed utils directly instead of importing a wrapper object firstly. For example: <pre><code>-import { Crypto } from '@aeternity/aepp-sdk'\n+import { generateKeyPair } from '@aeternity/aepp-sdk'\n\n-console.log(Crypto.generateKeyPair())\n+console.log(generateKeyPair())\n</code></pre></p>"},{"location":"guides/migration/12.0.0/#accountbase-and-inheritors-are-classes-now","title":"<code>AccountBase</code> and inheritors are classes now","text":"<p>Use <code>new</code> to create an instance.</p>"},{"location":"guides/migration/12.0.0/#chainnode-contract-oracle-aens-generalizedaccount-stamps-not-exported","title":"<code>ChainNode</code>, <code>Contract</code>, <code>Oracle</code>, <code>Aens</code>, <code>GeneralizedAccount</code> stamps not exported","text":"<p>Their methods exported instead. Outside of <code>AeSdkBase</code> context, they may accept <code>onAccount</code>, <code>onNode</code>, <code>onCompiler</code> options.</p>"},{"location":"guides/migration/12.0.0/#node-and-compiler","title":"Node and Compiler","text":""},{"location":"guides/migration/12.0.0/#node-compiler-previously-contractcompilerhttp-are-classes-instead-of-a-stamps","title":"<code>Node</code>, <code>Compiler</code> (previously <code>ContractCompilerHttp</code>) are classes instead of a stamps","text":"<p>For example: <pre><code>import { Node } from '@aeternity/aepp-sdk'\n\n-const node = await Node({ url, ignoreVersion: false })\n+const node = new Node(url, { ignoreVersion: false })\n</code></pre></p>"},{"location":"guides/migration/12.0.0/#node-compiler-doesnt-check-version-on-the-first-request-instead-of-init","title":"<code>Node</code>, <code>Compiler</code> doesn't check version on the first request instead of init","text":"<p>Don't handle <code>new Node(...)</code> and <code>new Compiler(...)</code> as a <code>Promise</code>.</p>"},{"location":"guides/migration/12.0.0/#getnetworkid-returns-a-promise","title":"<code>getNetworkId</code> returns a promise","text":""},{"location":"guides/migration/12.0.0/#getnetworkid-ignores-force-option","title":"<code>getNetworkId</code> ignores <code>force</code> option","text":"<p>So, it would throw exception in case networkId is not provided. Use <code>try/catch</code> instead.</p>"},{"location":"guides/migration/12.0.0/#api-is-removed-in-node","title":"<code>api</code> is removed in <code>Node</code>","text":"<p>Use <code>node.getBalance</code> instead of <code>node.api.getBalance.</code></p>"},{"location":"guides/migration/12.0.0/#static-properties-are-removed-in-node","title":"static properties are removed in <code>Node</code>","text":"<p>Use <code>node.getStatus()</code> or <code>node.getNodeInfo()</code> to get values of <code>version</code>, <code>revision</code>, <code>genesisHash</code>, <code>nodeNetworkId</code>, <code>consensusProtocolVersion</code>.</p>"},{"location":"guides/migration/12.0.0/#node-returns-bigints-for-coin-amount-fields-instead-of-string-or-number","title":"<code>Node</code> returns BigInts for coin amount fields instead of string or number","text":""},{"location":"guides/migration/12.0.0/#node-not-accepts-internalurl","title":"<code>Node</code> not accepts <code>internalUrl</code>","text":"<p><code>Node</code> doesn't accepts and stores <code>internalUrl</code>, also internal endpoints are not available anymore. If necessary, create a wrapper of internal API separately (<code>swagger-client</code> package).</p>"},{"location":"guides/migration/12.0.0/#removed-mempool-method-in-node","title":"removed <code>mempool</code> method in <code>Node</code>","text":"<p>Create a wrapper of internal API by <code>genSwaggerClient</code> and use <code>getPendingTransactions</code> method instead.</p>"},{"location":"guides/migration/12.0.0/#compilerversion-is-removed-in-compiler","title":"<code>compilerVersion</code> is removed in <code>Compiler</code>","text":"<p>Use <code>compilerApi.aPIVersion()</code> method instead.</p>"},{"location":"guides/migration/12.0.0/#setcompilerurl-changes-compiler-url-in-sync","title":"<code>setCompilerUrl</code> changes compiler URL in sync","text":"<p>Don't handle <code>aeSdk.setCompilerUrl(...)</code> as a <code>Promise</code>.</p>"},{"location":"guides/migration/12.0.0/#methods-of-compiler-requires-options-object-according-to-their-specification","title":"methods of <code>Compiler</code> requires <code>options</code> object according to their specification","text":""},{"location":"guides/migration/12.0.0/#methods-of-compiler-returns-and-accepts-keys-named-in-camelcase-instead-of-snake_case","title":"methods of <code>Compiler</code> returns and accepts keys named in camelCase instead of snake_case","text":""},{"location":"guides/migration/12.0.0/#transaction-builder","title":"Transaction builder","text":""},{"location":"guides/migration/12.0.0/#removed-methods-to-generate-a-transaction-of-specific-type","title":"removed methods to generate a transaction of specific type","text":"<p>Use <code>aeSdk.buildTx(txType, params)</code> instead.</p>"},{"location":"guides/migration/12.0.0/#removed-ability-to-generate-transaction-on-the-node-side","title":"removed ability to generate transaction on the node side","text":"<p>Use <code>aeSdk.buildTx(txType, params)</code> instead.</p>"},{"location":"guides/migration/12.0.0/#nonce-ttl-gas-decoded-and-accepted-as-numbers-instead-of-strings","title":"<code>nonce</code>, <code>ttl</code>, <code>gas</code> decoded and accepted as numbers instead of strings","text":""},{"location":"guides/migration/12.0.0/#gas-renamed-to-gaslimit","title":"<code>gas</code> renamed to <code>gasLimit</code>","text":"<p>Use <code>gasLimit</code> instead of <code>gas</code> everywhere except for transaction details returned by node.</p>"},{"location":"guides/migration/12.0.0/#unpacktx-not-accepting-transaction-as-buffer-only-as-tx-encoded-string","title":"<code>unpackTx</code> not accepting transaction as <code>Buffer</code>, only as tx-encoded string","text":"<p>Use <code>unpackTx(encode(tx, 'tx'))</code> instead.</p>"},{"location":"guides/migration/12.0.0/#unpacktx-doesnt-have-binary-field-in-result","title":"<code>unpackTx</code> doesn't have <code>binary</code> field in result","text":"<p>Use <code>require('rlp').decode(unpackTx(tx).rlpEncoded)</code> instead.</p>"},{"location":"guides/migration/12.0.0/#encode-since-the-prefix-is-evaluated-by-the-type-itself-the-required-prefix-parameter","title":"encode: since the prefix is evaluated by the type itself the required prefix parameter","text":"<p>is no more accepted For example: <pre><code>-decode('cb_DA6sWJo=', 'cb')\n+decode('cb_DA6sWJo=')\n</code></pre></p>"},{"location":"guides/migration/12.0.0/#calculateminfee-returns-bignumber-instead-of-string","title":"<code>calculateMinFee</code> returns BigNumber instead of string","text":""},{"location":"guides/migration/12.0.0/#fee-helpers-not-exported-anymore-base_gas-gas_per_byte-key_block_interval","title":"Fee helpers not exported anymore (<code>BASE_GAS</code>, <code>GAS_PER_BYTE</code>, <code>KEY_BLOCK_INTERVAL</code>,","text":"<p><code>TX_FEE_BASE_GAS</code>, <code>TX_FEE_OTHER_GAS</code>, <code>calculateFee</code>, <code>DEFAULT_FEE</code>) Use a general <code>calculateMinFee</code> instead.</p>"},{"location":"guides/migration/12.0.0/#buildrawtx-calculatettl-not-exported-anymore","title":"<code>buildRawTx</code>, <code>calculateTtl</code> not exported anymore","text":"<p>Use a general <code>buildTx</code> method instead.</p>"},{"location":"guides/migration/12.0.0/#tx_type-mapped-to-tag-number-instead-of-string","title":"<code>TX_TYPE</code> mapped to tag (number) instead of string","text":"<p>Always use <code>TX_TYPE</code>. To get type name by tag use <code>TX_TYPE[tag]</code>.</p>"},{"location":"guides/migration/12.0.0/#object_id_tx_type-not-exported-anymore","title":"<code>OBJECT_ID_TX_TYPE</code> not exported anymore","text":"<p>Use <code>TX_TYPE[tag]</code> instead.</p>"},{"location":"guides/migration/12.0.0/#tx_serialization_schema-combined-with-tx_deserialization_schema","title":"<code>TX_SERIALIZATION_SCHEMA</code> combined with <code>TX_DESERIALIZATION_SCHEMA</code>","text":"<p>Use <code>TX_SCHEMA[TX_TYPE.*]</code> instead.</p>"},{"location":"guides/migration/12.0.0/#transaction-schemas-doesnt-contain-tag-anymore","title":"Transaction schemas doesn't contain tag anymore","text":"<p>Use <code>OBJECT_ID_TX_TYPE</code> to find tag by transaction type.</p>"},{"location":"guides/migration/12.0.0/#aens","title":"AENS","text":""},{"location":"guides/migration/12.0.0/#computebidfee-accepts-startfee-increment-as-options","title":"<code>computeBidFee</code> accepts <code>startFee</code>, <code>increment</code> as options","text":""},{"location":"guides/migration/12.0.0/#name_bid_timeouts-not-exposed-anymore","title":"<code>NAME_BID_TIMEOUTS</code> not exposed anymore","text":"<p>Use <code>computeAuctionEndBlock</code> function instead.</p>"},{"location":"guides/migration/12.0.0/#computeauctionendblock-accepts-and-returns-height-as-number","title":"<code>computeAuctionEndBlock</code> accepts and returns height as number","text":""},{"location":"guides/migration/12.0.0/#removed-ensurenamevalid","title":"removed <code>ensureNameValid</code>","text":"<p>Use a TypeScript check instead.</p>"},{"location":"guides/migration/12.0.0/#nameupdate-namerevoke-doesnt-accept-address-in-onaccount","title":"<code>name.update</code>, <code>name.revoke</code> doesn't accept address in <code>onAccount</code>","text":"<p>Pass an instance of <code>AccountBase</code> to <code>onAccount</code> option instead.</p>"},{"location":"guides/migration/12.0.0/#oracle","title":"Oracle","text":""},{"location":"guides/migration/12.0.0/#extendoraclettl-accepts-oracle-ttl-in-oraclettltype-and-oraclettlvalue-fields","title":"<code>extendOracleTtl</code> accepts oracle ttl in <code>oracleTtlType</code> and <code>oracleTtlValue</code> fields","text":"<p>Use <code>oracleTtlType</code> field instead of <code>type</code>, and <code>oracleTtlValue</code> field instead of <code>value</code>.</p>"},{"location":"guides/migration/12.0.0/#decode-method-of-getqueryobject-removed","title":"<code>decode</code> method of <code>getQueryObject</code> removed","text":"<p>Use <code>decode</code> function instead.</p>"},{"location":"guides/migration/12.0.0/#contract","title":"Contract","text":""},{"location":"guides/migration/12.0.0/#createaensdelegationsignature-first-argument-not-an-object","title":"<code>createAensDelegationSignature</code> first argument not an object","text":"<p><code>contractId</code> accepted as the first argument, <code>name</code> should be passed as option to the second one.</p>"},{"location":"guides/migration/12.0.0/#createoracledelegationsignature-first-argument-not-an-object","title":"<code>createOracleDelegationSignature</code> first argument not an object","text":"<p><code>contractId</code> accepted as the first argument, <code>queryId</code> should be passed as option to the second one.</p>"},{"location":"guides/migration/12.0.0/#call-arguments-in-creategeneralizedaccount-is-required","title":"call arguments in <code>createGeneralizedAccount</code> is required","text":"<p>Pass an empty array if you need no arguments.</p>"},{"location":"guides/migration/12.0.0/#filesystem-option-renamed-to-filesystem","title":"<code>filesystem</code> option renamed to <code>fileSystem</code>","text":""},{"location":"guides/migration/12.0.0/#contract-instance-doesnt-accept-address-in-onaccount","title":"Contract instance doesn't accept address in <code>onAccount</code>","text":"<p>It should be an instance of <code>AccountBase</code> instead.</p>"},{"location":"guides/migration/12.0.0/#chain","title":"Chain","text":""},{"location":"guides/migration/12.0.0/#removed-balance-method","title":"removed <code>balance</code> method","text":"<p>Use <code>getBalance</code> instead.</p>"},{"location":"guides/migration/12.0.0/#removed-tx-method","title":"removed <code>tx</code> method","text":"<p>Use <code>node.getTransactionByHash/getTransactionInfoByHash</code> instead.</p>"},{"location":"guides/migration/12.0.0/#removed-gettxinfo-method","title":"removed <code>getTxInfo</code> method","text":"<p>Use <code>node.getTransactionInfoByHash</code> instead.</p>"},{"location":"guides/migration/12.0.0/#other","title":"Other","text":""},{"location":"guides/migration/12.0.0/#getaccountnonce-removed","title":"<code>getAccountNonce</code> removed","text":"<p>Use <code>node.getAccountNextNonce</code> instead.</p>"},{"location":"guides/migration/12.0.0/#aesdk-doesnt-accept-array-of-accounts","title":"<code>AeSdk</code> doesn't accept array of accounts","text":"<p>Use <code>aeSdk.addAccount</code> method instead.</p>"},{"location":"guides/migration/12.0.0/#destroyinstance-method-removed","title":"<code>destroyInstance</code> method removed","text":"<p>It wasn't doing anything, just remove it's usages.</p>"},{"location":"guides/migration/12.0.0/#nodepool-is-removed","title":"<code>NodePool</code> is removed","text":"<p>Use <code>AeSdkBase</code> or <code>AeSdk</code> instead.</p>"},{"location":"guides/migration/12.0.0/#accountmultiple-is-removed","title":"<code>AccountMultiple</code> is removed","text":"<p>Use <code>AeSdk</code> instead.</p>"},{"location":"guides/migration/12.0.0/#denomination_magnitude-not-exposed-anymore","title":"<code>DENOMINATION_MAGNITUDE</code> not exposed anymore","text":"<p>It is intended for internal use only.</p>"},{"location":"guides/migration/12.0.0/#the-result-of-unpacktx-returned-instead-of-txobject","title":"The result of <code>unpackTx</code> returned instead of <code>TxObject</code>","text":"<p>In <code>txObject</code> option of <code>onSign</code> handler on wallet side. In <code>tx</code> field of contract call result.</p>"},{"location":"guides/migration/12.0.0/#validatekeyobj-removed","title":"<code>validateKeyObj</code> removed","text":"<p>Rely on TypeScript checks instead.</p>"},{"location":"guides/migration/12.0.0/#derivekeyusingargon2id-removed","title":"<code>deriveKeyUsingArgon2id</code> removed","text":"<p>Use <code>argon2-browser</code> package instead.</p>"},{"location":"guides/migration/12.0.0/#removed-extra-implementation-of-getaddressfrompriv-in-keystore","title":"removed extra implementation of <code>getAddressFromPriv</code> in keystore","text":"<p>Use <code>Crypto.getAddressFromPriv</code> instead.</p>"},{"location":"guides/migration/12.0.0/#genswaggerclient-removed","title":"<code>genSwaggerClient</code> removed","text":"<p>Use <code>swagger-client</code> package instead.</p>"},{"location":"guides/migration/12.0.0/#aepp-wallet-communication","title":"Aepp Wallet communication","text":""},{"location":"guides/migration/12.0.0/#browserruntimeconnection-browserwindowmessageconnection-are-classes","title":"BrowserRuntimeConnection, BrowserWindowMessageConnection are classes","text":"<p>Create instances using new.</p>"},{"location":"guides/migration/12.0.0/#contentscriptbridge-walletdetector-rewrited-to-plain-functions","title":"ContentScriptBridge, WalletDetector rewrited to plain functions","text":"<p>Use <code>connectionProxy</code>, <code>walletDetector</code> accordingly.</p>"},{"location":"guides/migration/12.0.0/#rpcclient-removed-origin-property","title":"RpcClient: removed <code>origin</code> property","text":"<p>Use <code>connection</code> property instead.</p>"},{"location":"guides/migration/12.0.0/#rpcclient-sendmessage-is-a-private-method","title":"RpcClient: <code>sendMessage</code> is a private method","text":"<p>Use <code>request</code> or <code>notify</code> instead.</p>"},{"location":"guides/migration/12.0.0/#rpcclient-handlers-parameter-is-removed","title":"RpcClient: <code>handlers</code> parameter is removed","text":"<p>Provide a <code>methods</code> parameter instead of <code>handlers[0]</code>. Provide an <code>onDisconnect</code> parameter instead of <code>handlers[1]</code>.</p>"},{"location":"guides/migration/12.0.0/#rpcclient-doesnt-contain-aepp-info-anymore","title":"RpcClient: doesn't contain aepp info anymore","text":"<p>Get aepp info in <code>onConnection</code> callback, and store somehow to use later.</p>"},{"location":"guides/migration/12.0.0/#rpcclient-doesnt-contain-networkid-anymore","title":"RpcClient: doesn't contain <code>networkId</code> anymore","text":"<p>On wallet side: assume that all aepps uses the same network as the wallet connected to. On aepp side: use <code>networkId</code> that wallet provided. In case <code>networkId</code> is not compatible ask user to switch wallet to a compatible network.</p>"},{"location":"guides/migration/12.0.0/#rpc-helpers-are-not-exposed-anymore-isiniframe-sendmessage-gethandler-message","title":"RPC helpers are not exposed anymore (<code>isInIframe</code>, <code>sendMessage</code>, <code>getHandler</code>, <code>message</code>,","text":"<p><code>responseMessage</code>, <code>sendResponseMessage</code>, <code>isValidAccounts</code>) Use own implementation if needed.</p>"},{"location":"guides/migration/12.0.0/#aepp","title":"Aepp","text":""},{"location":"guides/migration/12.0.0/#connecttowallet-accepts-wallet-connection-as-the-first-argument","title":"<code>connectToWallet</code> accepts wallet connection as the first argument","text":"<p>See connect-aepp-to-wallet.md for details.</p>"},{"location":"guides/migration/12.0.0/#disconnectwallet-runs-in-sync-and-senddisconnect-arg-removed","title":"<code>disconnectWallet</code> runs in sync and <code>sendDisconnect</code> arg removed","text":"<p>So, aepp would always send <code>closeConnection</code> notification.</p>"},{"location":"guides/migration/12.0.0/#sendconnectrequest-removed","title":"<code>sendConnectRequest</code> removed","text":"<p>Use <code>connectToWallet</code> instead.</p>"},{"location":"guides/migration/12.0.0/#doesnt-accept-connection-anymore","title":"doesn't accept <code>connection</code> anymore","text":"<p>Use <code>connectToWallet</code> method instead.</p>"},{"location":"guides/migration/12.0.0/#removed-isconnected-issubscribedaccount-methods","title":"removed <code>isConnected</code>, <code>isSubscribedAccount</code> methods","text":"<p>Detect is aepp connected by persistence of <code>rpcClient</code> property.</p>"},{"location":"guides/migration/12.0.0/#signmessage-returns-buffer-by-default","title":"<code>signMessage</code> returns Buffer by default","text":"<p>Use <code>returnHex</code> option to get the previous behaviour.</p>"},{"location":"guides/migration/12.0.0/#wallet","title":"Wallet","text":""},{"location":"guides/migration/12.0.0/#browserruntimeconnection-requires-port-parameter","title":"<code>BrowserRuntimeConnection</code> requires <code>port</code> parameter","text":"<p>Pass <code>require('webextension-polyfill').runtime.connect()</code> to it.</p>"},{"location":"guides/migration/12.0.0/#requires-id-type-in-params","title":"requires <code>id</code>, <code>type</code> in params","text":"<p><code>id</code> should be a unique string; <code>type</code> should be one of <code>WALLET_TYPE.window</code>, <code>WALLET_TYPE.extension</code>.</p>"},{"location":"guides/migration/12.0.0/#getbrowserapi-helper-removed","title":"<code>getBrowserAPI</code> helper removed","text":"<p>Use <code>webextension-polyfill</code> package instead.</p>"},{"location":"guides/migration/12.0.0/#sharewalletinfo-accepts-rpc-client-id-instead-of-callback","title":"<code>shareWalletInfo</code> accepts rpc client id instead of callback","text":"<p>For example: <pre><code>const connection = new BrowserRuntimeConnection({ port })\n-aeSdk.addRpcClient(connection)\n-aeSdk.shareWalletInfo(port.postMessage.bind(port))\n+const rpcClientId = aeSdk.addRpcClient(connection)\n+aeSdk.shareWalletInfo(rpcClientId)\n</code></pre></p>"},{"location":"guides/migration/12.0.0/#sharenode-argument-in-accept-callback-of-onconnection-removed","title":"<code>shareNode</code> argument in accept callback of <code>onConnection</code> removed","text":"<p>Just deny the connection if you don't want to share the node url.</p>"},{"location":"guides/migration/12.0.0/#cant-handle-specific-set-of-accounts-for-an-app","title":"can't handle specific set of accounts for an app","text":"<p>If you need this feature, create a custom wallet implementation or fill us an issue.</p>"},{"location":"guides/migration/12.0.0/#txobject-parameter-of-onsign-callback-is-removed","title":"<code>txObject</code> parameter of <code>onSign</code> callback is removed","text":"<p>Use <code>unpackTx(tx)</code> on wallet side instead.</p>"},{"location":"guides/migration/12.0.0/#rpcclients-in-wallet-is-not-exposed-anymore","title":"<code>rpcClients</code> in wallet is not exposed anymore","text":"<p>This expected to be used only internally.</p>"},{"location":"guides/migration/12.0.0/#ondisconnect-callback-on-wallet-side-accepts-client-id-instead-of-rpcclient","title":"<code>onDisconnect</code> callback on wallet side accepts client id instead of <code>RpcClient</code>","text":"<p>Use <code>sdk.rpcClient[clientId]</code> to get the corresponding instance of RpcClient.</p>"},{"location":"guides/migration/12.0.0/#wallet-cant-selectively-notify-aepps-about-selectingadding-account","title":"wallet can't selectively notify aepps about selecting/adding account","text":"<p>If you need this feature, create a custom wallet implementation or fill us an issue.</p>"},{"location":"guides/migration/12.0.0/#wallet-cant-provide-metadata-for-accounts","title":"wallet can't provide metadata for accounts","text":"<p>If you need this feature, create a custom wallet implementation or fill us an issue.</p>"},{"location":"guides/migration/12.0.0/#removed-actionaccept-in-permission-callbacks","title":"removed <code>action.accept</code> in permission callbacks","text":"<p>Return the value you passed to <code>accept</code> instead.</p>"},{"location":"guides/migration/12.0.0/#removed-actiondeny-in-permission-callbacks","title":"removed <code>action.deny</code> in permission callbacks","text":"<p>Throw instances of <code>RpcRejectedByUserError</code> instead.</p>"},{"location":"guides/migration/12.0.0/#callbacks-accept-client-id-params-and-origin","title":"callbacks accept client id, params, and origin","text":""},{"location":"guides/migration/13.0.0/","title":"Migration to 13.0.0","text":"<p>This guide describes all breaking changes introduced with <code>v13.0.0</code>.</p>"},{"location":"guides/migration/13.0.0/#wallet","title":"Wallet","text":""},{"location":"guides/migration/13.0.0/#onsign-onmessagesign-callbacks-were-removed-on-the-wallet-side","title":"<code>onSign</code>, <code>onMessageSign</code> callbacks were removed on the wallet side","text":"<p>Check allowance to sign on the account side instead, using <code>aeppOrigin</code>, <code>aeppRpcClientId</code> options.</p>"},{"location":"guides/migration/13.0.0/#aepp","title":"Aepp","text":""},{"location":"guides/migration/13.0.0/#all-wallet-provided-nodes-have-the-same-name","title":"All wallet provided nodes have the same name","text":"<p>Specified in <code>name</code> option of <code>connectToWallet</code>.</p>"},{"location":"guides/migration/13.0.0/#select-option-removed-from-connecttowallet","title":"Select option removed from connectToWallet","text":"<p>If you are using <code>connectNode</code> then the current node would always be the same as wallet provides.</p>"},{"location":"guides/migration/13.0.0/#contract","title":"Contract","text":""},{"location":"guides/migration/13.0.0/#aci-format-used-the-same-as-returned-by-aesophia_cli","title":"ACI format used the same as returned by aesophia_cli","text":"<p>aesophia_http old format <pre><code>{\n  \"encoded_aci\": { contract: &lt;1&gt; },\n  \"external_encoded_aci\": [&lt;2&gt;]\n}\n</code></pre> aesophia_cli format <pre><code>[&lt;2&gt;, { contract: &lt;1&gt; }]\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#params-argument-in-deploy-and-call-is-required","title":"<code>params</code> argument in <code>$deploy</code> and <code>$call</code> is required","text":""},{"location":"guides/migration/13.0.0/#contract-methods-accessible-on-the-instance-itself","title":"Contract methods accessible on the instance itself","text":"<p>Apply a patch: <pre><code>-const contract = aeSdk.getContractInstance(&lt;contract args&gt;);\n+const contract = aeSdk.getContractInstance&lt;{ foo: (a: bigint) =&gt; bigint }&gt;(&lt;contract args&gt;);\n-await contract.methods.foo(&lt;arguments&gt;);\n+await contract.foo(&lt;arguments&gt;);\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#contractmethodsnamegetsend-removed","title":"<code>contract.methods.&lt;name&gt;.get,send</code> removed","text":"<p>Use <code>callStatic</code> option instead.</p>"},{"location":"guides/migration/13.0.0/#contractbytecodesourcecode-moved-to-contractoptions","title":"<code>contract.bytecode,sourceCode</code> moved to <code>contract.$options</code>","text":""},{"location":"guides/migration/13.0.0/#contractcalldata-renamed-to-contract_calldata","title":"<code>contract.calldata</code> renamed to <code>contract._calldata</code>","text":"<p>Use <code>contract._calldata</code> (considered to be a private field) or aepp-calldata package directly.</p>"},{"location":"guides/migration/13.0.0/#contractoptions-renamed-to-contractoptions","title":"<code>contract.options</code> renamed to <code>contract.$options</code>","text":""},{"location":"guides/migration/13.0.0/#contractdeployinfo-removed","title":"<code>contract.deployInfo</code> removed","text":"<p>Use the return value of <code>contract.$deploy</code> instead. <code>contract.deployInfo.address</code> moved to <code>contract.$options.address</code>.</p>"},{"location":"guides/migration/13.0.0/#contractdecodeevents-renamed-to-contractdecodeevents","title":"<code>contract.decodeEvents</code> renamed to <code>contract.$decodeEvents</code>","text":""},{"location":"guides/migration/13.0.0/#contractcall-renamed-to-contractcall","title":"<code>contract.call</code> renamed to <code>contract.$call</code>","text":""},{"location":"guides/migration/13.0.0/#contractcompile-renamed-to-contractcompile","title":"<code>contract.compile</code> renamed to <code>contract.$compile</code>","text":""},{"location":"guides/migration/13.0.0/#contractdeploy-renamed-to-contractdeploy","title":"<code>contract.deploy</code> renamed to <code>contract.$deploy</code>","text":""},{"location":"guides/migration/13.0.0/#createaensdelegationsignature-createoracledelegationsignature-removed","title":"<code>createAensDelegationSignature</code>, <code>createOracleDelegationSignature</code> removed","text":"<p>Use <code>createDelegationSignature</code> instead.</p>"},{"location":"guides/migration/13.0.0/#use-sourcecode-instead-of-source","title":"use <code>sourceCode</code> instead of <code>source</code>","text":"<p>It is related to <code>getContractInstance</code> and signing using Generalized accounts. Apply a change: <pre><code>-aeSdk.getContractInstance({ source: &lt;contract source code&gt;, ... })\n+aeSdk.getContractInstance({ sourceCode: &lt;contract source code&gt;, ... })\n-aeSdk.spend(..., { authData: { source: &lt;contract source code&gt;, args: [...] } })\n+aeSdk.spend(..., { authData: { sourceCode: &lt;contract source code&gt;, args: [...] } })\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#getcontractinstance-accepts-address-instead-of-contractaddress","title":"<code>getContractInstance</code> accepts <code>address</code> instead of <code>contractAddress</code>","text":"<p>Apply a change: <pre><code>-aeSdk.getContractInstance({ contractAddress: &lt;contract address&gt;, ... })\n+aeSdk.getContractInstance({ address: &lt;contract address&gt;, ... })\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#getcontractinstance-function-replaced-with-contract-class","title":"<code>getContractInstance</code> function replaced with Contract class","text":"<p>Apply a patch: <pre><code>-contract = await getContractInstance(&lt;options&gt;);\n+contract = await Contract.initialize(&lt;options&gt;);\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#aesdkgetcontractinstance-renamed-to-aesdkinitializecontract","title":"<code>AeSdk.getContractInstance</code> renamed to <code>AeSdk.initializeContract</code>","text":""},{"location":"guides/migration/13.0.0/#preparetxparams-getvmversion-are-not-exported-anymore","title":"<code>prepareTxParams</code>, <code>getVmVersion</code> are not exported anymore","text":"<p>Use <code>buildTx</code> instead.</p>"},{"location":"guides/migration/13.0.0/#isga-method-removed","title":"<code>isGA</code> method removed","text":"<p>Use <code>(await aeSdk.getAccount(&lt;address&gt;)).kind === 'generalized'</code> instead.</p>"},{"location":"guides/migration/13.0.0/#transaction-builder","title":"Transaction builder","text":""},{"location":"guides/migration/13.0.0/#writeint-function-removed","title":"<code>writeInt</code> function removed","text":"<p>Use <code>toBytes</code> util instead.</p>"},{"location":"guides/migration/13.0.0/#returntype-of-contract-call-result-structure-is-a-value-of-callreturntype-enum","title":"<code>returnType</code> of contract call result structure is a value of CallReturnType enum","text":"<p>Apply a patch: <pre><code>-contractCall.returnType === \"error\"\n+contractCall.returnType === CallReturnType.Error\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#writeid-readid-functions-removed","title":"<code>writeId</code>, <code>readId</code> functions removed","text":"<p>Use transaction builder instead.</p>"},{"location":"guides/migration/13.0.0/#readpointers-buildpointers-functions-removed","title":"<code>readPointers</code>, <code>buildPointers</code> functions removed","text":"<p>Use transaction builder instead.</p>"},{"location":"guides/migration/13.0.0/#formatsalt-function-removed","title":"<code>formatSalt</code> function removed","text":"<p>Use <code>Buffer.from(&lt;salt&gt;.toString(16).padStart(64, '0'), 'hex')</code> instead.</p>"},{"location":"guides/migration/13.0.0/#validateparams-unpackrawtx-functions-removed","title":"<code>validateParams</code>, <code>unpackRawTx</code> functions removed","text":"<p>Use transaction builder instead.</p>"},{"location":"guides/migration/13.0.0/#amount-constant-removed","title":"<code>AMOUNT</code> constant removed","text":"<p>If necessary, use <code>0</code> instead.</p>"},{"location":"guides/migration/13.0.0/#statetrees-fields-decoded-as-objects-mapping-key-to-decoded-entry-instead-of-internals","title":"StateTrees fields decoded as objects mapping key to decoded entry instead of internals","text":""},{"location":"guides/migration/13.0.0/#the-content-of-tagmtree-entries-decoded-and-moved-to-payload-field","title":"The content of Tag.*Mtree entries decoded and moved to <code>payload</code> field","text":""},{"location":"guides/migration/13.0.0/#tx_schema-txparamscommon-txschema-txtypeschemas-are-not-exported-anymore","title":"TX_SCHEMA, TxParamsCommon, TxSchema, TxTypeSchemas are not exported anymore","text":""},{"location":"guides/migration/13.0.0/#tx_ttl-is-not-exported-anymore","title":"<code>TX_TTL</code> is not exported anymore","text":"<p>Use <code>0</code> instead.</p>"},{"location":"guides/migration/13.0.0/#enum-field_types-is-not-exported-anymore","title":"Enum <code>FIELD_TYPES</code> is not exported anymore","text":""},{"location":"guides/migration/13.0.0/#not-able-to-buildunpack-compilersophia-entry-tag-70","title":"Not able to build/unpack CompilerSophia entry (tag 70)","text":""},{"location":"guides/migration/13.0.0/#enums-protocol_vm_abi-interface-ctversion-not-exported-anymore","title":"Enums <code>PROTOCOL_VM_ABI</code>, interface <code>CtVersion</code> not exported anymore","text":""},{"location":"guides/migration/13.0.0/#enums-vm_versions-abi_versions-protocol_versions-renamed","title":"Enums <code>VM_VERSIONS</code>, <code>ABI_VERSIONS</code>, <code>PROTOCOL_VERSIONS</code> renamed","text":"<p>They are exported as <code>VmVersion</code>, <code>AbiVersion</code>, <code>ConsensusProtocolVersion</code>.</p>"},{"location":"guides/migration/13.0.0/#statehash-of-channel-entry-decoded-as-st_-prefixed-string-instead-of-hex","title":"<code>stateHash</code> of Channel entry decoded as <code>st_</code>-prefixed string instead of hex","text":""},{"location":"guides/migration/13.0.0/#spendtx-payload-doesnt-accept-arbitrary-strings-anymore","title":"SpendTx <code>payload</code> doesn't accept arbitrary strings anymore","text":"<p>Provide a <code>ba_</code>-encoded string instead. <pre><code>-payload: 'test',\n+payload: encode(Buffer.from('test'), Encoding.Bytearray),\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#verifytransaction-doesnt-accept-parent-tx-types-anymore","title":"<code>verifyTransaction</code> doesn't accept parent tx types anymore","text":""},{"location":"guides/migration/13.0.0/#buildtx-doesnt-accept-excludekeys-option-anymore","title":"<code>buildTx</code> doesn't accept <code>excludeKeys</code> option anymore","text":"<p>Consider opening an issue, if you need this functionality.</p>"},{"location":"guides/migration/13.0.0/#use-version-instead-of-vsn-vsn-in-unpacktx-buildtx","title":"Use <code>version</code> instead of <code>VSN</code>, <code>vsn</code> in <code>unpackTx</code>, <code>buildTx</code>","text":""},{"location":"guides/migration/13.0.0/#buildtx-accepts-transaction-type-and-version-in-the-first-argument","title":"<code>buildTx</code> accepts transaction type and version in the first argument","text":"<p>Apply a change: <pre><code>-buildTx({ ... }, Tag.SpendTx, { version: 2 })\n+buildTx({ ..., tag: Tag.SpendTx, version: 2 })\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#aesdkbuildtx-accepts-tag-in-options","title":"AeSdk.buildTx accepts <code>tag</code> in options","text":"<p>Replace <code>aeSdk.buildTx(Tag.SpendTx, { ... })</code> with <code>aeSdk.buildTx({ ..., tag: Tag.SpendTx })</code>.</p>"},{"location":"guides/migration/13.0.0/#sync-buildtx-accepts-denomination-in-the-first-argument","title":"sync <code>buildTx</code> accepts <code>denomination</code> in the first argument","text":"<pre><code>-buildTx({ ... }, { denomination: AE_AMOUNT_FORMATS.AETTOS })\n+buildTx({ ..., denomination: AE_AMOUNT_FORMATS.AETTOS })\n</code></pre>"},{"location":"guides/migration/13.0.0/#unpacktx-return-an-object-of-transaction-parameters","title":"<code>unpackTx</code> return an object of transaction parameters","text":"<p>Use <code>unpackTx(...)</code> instead of <code>unpackTx(...).tx</code>.</p>"},{"location":"guides/migration/13.0.0/#unpacktx-doesnt-return-rlpencoded-anymore","title":"<code>unpackTx</code> doesn't return <code>rlpEncoded</code> anymore","text":"<p>Use <code>decode(buildTx(unpackTx(...)))</code> instead.</p>"},{"location":"guides/migration/13.0.0/#unpacktx-doesnt-return-txtype-anymore","title":"<code>unpackTx</code> doesn't return <code>txType</code> anymore","text":"<p>Use <code>unpackTx(...).tag</code> instead.</p>"},{"location":"guides/migration/13.0.0/#buildtx-return-string-instead-of-object","title":"<code>buildTx</code> return string instead of object","text":"<p>Use just <code>buildTx(...)</code> instead of <code>buildTx(...).tx</code>.</p>"},{"location":"guides/migration/13.0.0/#buildtx-doesnt-return-txobject-anymore","title":"<code>buildTx</code> doesn't return <code>txObject</code> anymore","text":"<p>Use <code>unpackTx(buildTx(...))</code> instead.</p>"},{"location":"guides/migration/13.0.0/#buildtx-doesnt-return-binary-anymore","title":"<code>buildTx</code> doesn't return <code>binary</code> anymore","text":"<p>Use <code>require('rlp').decode(decode(buildTx(...)))</code> instead.</p>"},{"location":"guides/migration/13.0.0/#buildtx-doesnt-return-rlpencoded-anymore","title":"<code>buildTx</code> doesn't return <code>rlpEncoded</code> anymore","text":"<p>Use <code>decode(buildTx(...))</code> instead.</p>"},{"location":"guides/migration/13.0.0/#key-of-mtreevalue-entry-decoded-as-a-buffer-instead-of-a-hex","title":"<code>key</code> of MtreeValue entry decoded as a buffer instead of a hex","text":""},{"location":"guides/migration/13.0.0/#txbuilder-accepts-and-returns-poi-field-unpacked-as-treespoi","title":"TxBuilder accepts and returns <code>poi</code> field unpacked as TreesPoi","text":""},{"location":"guides/migration/13.0.0/#get-method-of-mptree-accepts-and-returns-typed-values","title":"<code>get</code> method of MPTree accepts and returns typed values","text":"<p>Apply a change: <pre><code>-unpackTx(tree.get(decode('ak_97...')))\n+tree.get('ak_97...')\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#compiler","title":"Compiler","text":""},{"location":"guides/migration/13.0.0/#compiler-export-renamed-to-compilerhttp","title":"<code>Compiler</code> export renamed to <code>CompilerHttp</code>","text":""},{"location":"guides/migration/13.0.0/#removed-aesdkcompilerurl-aesdksetcompilerurl","title":"removed AeSdk:compilerUrl, AeSdk:setCompilerUrl","text":"<p>A compiler instance needs to be passed explicitly in <code>onCompiler</code> option: <pre><code>-import { AeSdk } from '@aeternity/aepp-sdk';\n+import { AeSdk, CompilerHttp } from '@aeternity/aepp-sdk';\n\nconst aeSdk = new AeSdk({\n-  compilerUrl: &lt;compiler url&gt;,\n+  onCompiler: new CompilerHttp(&lt;compiler url&gt;),\n});\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#methods-of-compilerhttp-moved-to-api-property","title":"Methods of <code>CompilerHttp</code> moved to <code>api</code> property","text":"<p>Apply a patch: <pre><code>-compilerHttp.generateACI({ code: sourceCode });\n+compilerHttp.api.generateACI({ code: sourceCode });\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#dropped-compatibility-with-aesophia_http-below-711-aesophia_cli-below-701","title":"Dropped compatibility with aesophia_http below 7.1.1, aesophia_cli below 7.0.1","text":""},{"location":"guides/migration/13.0.0/#account","title":"Account","text":""},{"location":"guides/migration/13.0.0/#creategeneralizedaccount-accepts-sourcecode-in-options","title":"<code>createGeneralizedAccount</code> accepts <code>sourceCode</code> in options","text":"<p>Apply a patch: <pre><code>-aeSdk.createGeneralizedAccount('authorize', sourceCode, ['arg-1']);\n+aeSdk.createGeneralizedAccount('authorize', ['arg-1'], { sourceCode });\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#createmetatx-removed","title":"<code>createMetaTx</code> removed","text":"<p>Use <code>AccountGeneralized.signTransaction</code> instead.</p>"},{"location":"guides/migration/13.0.0/#accountrpc-constructor-accepts-arguments-one-by-one","title":"<code>AccountRpc</code> constructor accepts arguments one by one","text":"<p>Apply a change: <pre><code>-new AccountRpc({ rpcClient: &lt;rpc client&gt;, address: &lt;address&gt; })\n+new AccountRpc(&lt;rpc client&gt;, &lt;address&gt;)\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#accountmemory-requires-networkid-in-signtransaction","title":"<code>AccountMemory</code> requires <code>networkId</code> in <code>signTransaction</code>","text":""},{"location":"guides/migration/13.0.0/#accountbase-simplified","title":"<code>AccountBase</code> simplified","text":"<ul> <li><code>networkId</code> removed</li> <li><code>getNetworkId</code> method removed</li> <li><code>signTransaction</code>, <code>signMessage</code> made abstract</li> </ul>"},{"location":"guides/migration/13.0.0/#address-in-accountbase-is-a-property","title":"<code>address</code> in <code>AccountBase</code> is a property","text":"<p>Apply a change: <pre><code>-await accountMemory.address(options)\n+accountMemory.address\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#memoryaccount-accepts-only-secretkey","title":"MemoryAccount accepts only secretKey","text":"<p>Apply a change: <pre><code>-new MemoryAccount({ keypair: { publicKey: 'ak_..', secretKey: &lt;secret key&gt; } })\n+new MemoryAccount(&lt;secret key&gt;)\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#memoryaccount-is-not-compatible-with-ga","title":"MemoryAccount is not compatible with GA","text":"<p>Apply a change: <pre><code>-new MemoryAccount({ gaId: &lt;address&gt; })\n+new AccountGeneralized(&lt;address&gt;)\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#node","title":"Node","text":""},{"location":"guides/migration/13.0.0/#url-property-of-node-removed","title":"<code>url</code> property of <code>Node</code> removed","text":"<p>Use autorest's <code>$host</code> property instead.</p>"},{"location":"guides/migration/13.0.0/#oracle","title":"Oracle","text":""},{"location":"guides/migration/13.0.0/#query_fee-is-not-exported-anymore","title":"<code>QUERY_FEE</code> is not exported anymore","text":"<p>Use 30000 instead if necessary.</p>"},{"location":"guides/migration/13.0.0/#oracles-created-without-queryfee-by-default","title":"Oracles created without queryFee by default","text":"<p>Specify <code>queryFee</code> in <code>registerOracle</code> if needed.</p>"},{"location":"guides/migration/13.0.0/#aesdkextendoraclettl-aesdkrespondtoquery-doesnt-accept-oracleid","title":"AeSdk:extendOracleTtl, AeSdk:respondToQuery doesn't accept oracleId","text":"<p>Remove the first argument.</p>"},{"location":"guides/migration/13.0.0/#onquery-callback-of-pollforqueries-oraclepollqueries-accepts-a-single-query","title":"<code>onQuery</code> callback of <code>pollForQueries</code>, <code>oracle.pollQueries</code> accepts a single query","text":"<p>It was accepting an array before. Apply a patch: <pre><code>-aeSdk.pollForQueries(oracleId, (queries) =&gt; queries.forEach(handleQuery));\n+aeSdk.pollForQueries(oracleId, handleQuery);\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#chain","title":"Chain","text":""},{"location":"guides/migration/13.0.0/#send-inlined-into-sendtransaction","title":"<code>send</code> inlined into <code>sendTransaction</code>","text":"<p>Pass not signed transaction to <code>sendTransaction</code>. If you need to post signed transaction use Node:postTransaction.</p>"},{"location":"guides/migration/13.0.0/#aens","title":"AENS","text":""},{"location":"guides/migration/13.0.0/#height-removed-from-the-output-of-aenspreclaim","title":"<code>height</code> removed from the output of <code>aensPreclaim</code>","text":"<p>Use <code>blockHeight</code> instead: <pre><code>const res = aeSdk.aensPreclaim('name.chain');\n-res.height\n+res.blockHeight - 1\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#channel","title":"Channel","text":""},{"location":"guides/migration/13.0.0/#channelstate-returns-unpacked-entries","title":"Channel:state returns unpacked entries","text":"<p>Use <code>buildTx</code> to pack them back if needed.</p>"},{"location":"guides/migration/13.0.0/#all-channel-events-emitted-in-snakecase","title":"All channel events emitted in snakeCase","text":"<p>Affected events: 'own_withdraw_locked', 'withdraw_locked', 'own_deposit_locked', 'deposit_locked', 'peer_disconnected', 'channel_reestablished'.</p>"},{"location":"guides/migration/13.0.0/#channelpoi-returns-unpacked-treespoi","title":"Channel:poi returns unpacked TreesPoi","text":"<p>Use just <code>await channel.poi(...)</code> instead of <code>unpackTx(await channel.poi(...))</code>.</p>"},{"location":"guides/migration/13.0.0/#other","title":"Other","text":""},{"location":"guides/migration/13.0.0/#onaccount-doesnt-accept-keypair","title":"<code>onAccount</code> doesn't accept keypair","text":"<p>Apply a change: <pre><code>-aeSdk.&lt;metnod name&gt;(..., { onAccount: &lt;keypair&gt; })\n+aeSdk.&lt;metnod name&gt;(..., { onAccount: new MemoryAccount(&lt;keypair&gt;.secretKey) })\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#bignumbertobytearray-removed","title":"<code>bigNumberToByteArray</code> removed","text":"<p>Use <code>toBytes</code> instead.</p>"},{"location":"guides/migration/13.0.0/#str2buf-function-removed","title":"<code>str2buf</code> function removed","text":"<p>Use <code>Buffer.from(&lt;data&gt;, &lt;encoding&gt;)</code> instead.</p>"},{"location":"guides/migration/13.0.0/#getaddressfrompriv-doesnt-accept-private-key-as-base64-encoded-or-raw-string","title":"<code>getAddressFromPriv</code> doesn't accept private key as base64-encoded or raw string","text":""},{"location":"guides/migration/13.0.0/#isvalidkeypair-doesnt-accept-public-key-as-base64-encoded-string","title":"<code>isValidKeypair</code> doesn't accept public key as base64-encoded string","text":""},{"location":"guides/migration/13.0.0/#bytestohex-function-removed","title":"<code>bytesToHex</code> function removed","text":"<p>Use <code>Buffer.from(&lt;bytes&gt;).toString('hex')</code> instead.</p>"},{"location":"guides/migration/13.0.0/#hextobytes-function-removed","title":"<code>hexToBytes</code> function removed","text":"<p>Use <code>Buffer.from(&lt;hex string&gt;, 'hex')</code> instead.</p>"},{"location":"guides/migration/13.0.0/#rename-umd-export-to-aeternity","title":"rename umd export to <code>Aeternity</code>","text":""},{"location":"guides/migration/13.0.0/#subpaths-imports-of-sdk-are-not-allowed","title":"Subpaths imports of SDK are not allowed","text":"<p>SDK does versioning only for the API provided in the root export. Replace subpaths imports with imports of the package root. <pre><code>-import MemoryAccount from '@aeternity/aepp-sdk/es/account/Memory.mjs';\n+import { MemoryAccount } from '@aeternity/aepp-sdk';\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#removed-getnetworkid-from-aesdkbase","title":"Removed <code>getNetworkId</code> from <code>AeSdkBase</code>","text":"<p>Use <code>Node.getNetworkId</code> instead.</p>"},{"location":"guides/migration/13.0.0/#address-a-getter-in-aesdkbase","title":"<code>address</code> a getter in AeSdkBase","text":"<p>Apply a change: <pre><code>-await aeSdk.address()\n+aeSdk.address\n</code></pre></p>"},{"location":"guides/migration/13.0.0/#addaccount-is-a-sync-function","title":"<code>addAccount</code> is a sync function","text":""},{"location":"guides/migration/13.0.0/#verifymessage-removed-from-accounts-and-aesdkbase","title":"<code>verifyMessage</code> removed from accounts and AeSdkBase","text":"<p>Use <code>verifyMessage</code> exported in the root instead.</p>"},{"location":"guides/migration/13.0.0/#verify-and-verifymessage-accepts-address-instead-of-hex-string-or-uint8array","title":"<code>verify</code> and <code>verifyMessage</code> accepts address instead of hex string or Uint8Array","text":"<p>Convert public key in Uint8Array to address using <code>encode(pk, 'ak')</code>. Convert public key in hex to address using <code>encode(Buffer.from(pk, 'hex'), 'ak')</code>.</p>"},{"location":"guides/migration/13.0.0/#node12-not-supported","title":"node@12 not supported","text":"<p>Use node@14.19 or newer.</p>"},{"location":"guides/migration/13.0.0/#removeaccount-throws-an-error-if-the-account-is-not-found","title":"<code>removeAccount</code> throws an error if the account is not found","text":""},{"location":"guides/migration/13.0.0/#signmessage-always-returns-uint8array","title":"<code>signMessage</code> always returns <code>Uint8Array</code>","text":"<p>Use <code>Buffer.from(signature).toString('hex')</code> to convert it to hex.</p>"},{"location":"guides/migration/13.0.0/#encryptkey-decryptkey-are-not-exported-anymore","title":"<code>encryptKey</code>, <code>decryptKey</code> are not exported anymore","text":"<p>Use 'sha.js' and 'aes-js' packages directly instead.</p>"},{"location":"guides/migration/13.0.0/#sha256hash-is-not-exported-anymore","title":"<code>sha256hash</code> is not exported anymore","text":"<p>Use <code>SubtleCrypto.digest</code> or <code>sha.js</code> package instead.</p>"},{"location":"guides/migration/13.0.0/#height-method-removed","title":"<code>height</code> method removed","text":"<p>Use <code>getHeight</code> instead.</p>"},{"location":"guides/migration/13.0.0/#signusingga-method-removed","title":"<code>signUsingGA</code> method removed","text":"<p>Use <code>AccountGeneralized.signTransaction</code> instead.</p>"},{"location":"guides/migration/13.0.0/#pointer_key_by_prefix-removed","title":"<code>POINTER_KEY_BY_PREFIX</code> removed","text":"<p>Use <code>getDefaultPointerKey</code> instead.</p>"},{"location":"guides/migration/13.0.0/#id_tag_prefix-prefix_id_tag-id_tag-removed","title":"<code>ID_TAG_PREFIX</code>, <code>PREFIX_ID_TAG</code>, <code>ID_TAG</code> removed","text":"<p>Use transaction builder instead.</p>"},{"location":"guides/migration/13.0.0/#tx_type-removed","title":"<code>TX_TYPE</code> removed.","text":"<p>Use <code>Tag</code> instead.</p>"},{"location":"guides/migration/13.0.0/#gas_max-removed","title":"<code>GAS_MAX</code> removed","text":"<p>The maximum gas limit depends on transaction size, this value is outdated, sdk check/provides gasLimit by itself while building a transaction.</p>"},{"location":"guides/migration/13.0.0/#calculateminfee-removed","title":"<code>calculateMinFee</code> removed","text":"<p>Use <code>buildTx</code> to generate a transaction, unpack it and refer to <code>fee</code> field.</p>"},{"location":"guides/migration/13.0.0/#salt-createsalt-removed","title":"<code>salt</code>, <code>createSalt</code> removed","text":"<p>Use <code>genSalt</code> instead.</p>"},{"location":"guides/migration/13.0.0/#pointer-removed","title":"<code>Pointer</code> removed","text":"<p>Use NamePointer from apis/node instead.</p>"},{"location":"guides/migration/7.0.0/","title":"Migration to 7.0.0","text":"<p>This guide describes the process of migrating to SDK version 7.0.0</p>"},{"location":"guides/migration/7.0.0/#step-1","title":"Step 1","text":"<p>SDK will not accept <code>url</code>, <code>internalUrl</code> init arguments anymore:</p>"},{"location":"guides/migration/7.0.0/#before","title":"Before","text":"<pre><code>Universal({\n    url,\n    internalUrl\n})\n</code></pre>"},{"location":"guides/migration/7.0.0/#after","title":"After","text":"<pre><code>const nodeInstance = await Node({ url, internalUrl })\nUniversal({\n    nodes: [{ name: 'testnet', instance: nodeInstance }]\n})\n</code></pre>"},{"location":"guides/migration/7.0.0/#step-2","title":"Step 2","text":"<p>Remove deprecated function <code>setKeypair</code> <code>SDK</code> will not accept <code>keypair</code> init argument anymore:</p>"},{"location":"guides/migration/7.0.0/#before_1","title":"Before","text":"<pre><code>Universal({ keypair })\n</code></pre>"},{"location":"guides/migration/7.0.0/#after_1","title":"After","text":"<pre><code>Universal({\n  accounts: [MemoryAccount({ keypair })]\n})\n</code></pre>"},{"location":"guides/migration/7.0.0/#step-3","title":"Step 3","text":"<p>Change all of <code>AENS</code> method's first argument from <code>nameId</code> to <code>name</code></p>"},{"location":"guides/migration/7.0.0/#before_2","title":"Before","text":"<pre><code>const client = Universal({ ... })\n\nawait client.aensUpdate('cm_ad1wdsa...', ...)\nawait client.aensTransfer('cm_ad1wdsa...', ...)\nawait client.aensRevoke('cm_ad1wdsa...', ...)\n</code></pre>"},{"location":"guides/migration/7.0.0/#after_2","title":"After","text":"<pre><code>const client = Universal({ ... })\n\nawait client.aensUpdate('testname.chain', ...)\nawait client.aensTransfer('testname.chain', ...)\nawait client.aensRevoke('testname.chain', ...)\n</code></pre>"},{"location":"guides/migration/7.0.0/#other-breaking-changes","title":"Other Breaking Changes","text":"<ul> <li>Add new compiler <code>methods</code> to RPC <code>communication</code> (base-app update required)</li> <li>Drop compiler version to <code>version &gt;= 4.0.0 &amp;&amp; version &lt; 5.0.0</code></li> <li>Change node compatibility range to <code>node &gt;= 5.0.0 &amp;&amp; node &lt; 6.0.0</code></li> <li>Always <code>verify</code> transactions before sending them to the node (can be disabled using the option <code>verify: false</code>)</li> </ul>"},{"location":"guides/migration/9.0.0/","title":"Migration to 9.0.0","text":"<p>This guide describes all breaking changes introduced with <code>v9.0.0</code>.</p>"},{"location":"guides/migration/9.0.0/#drop-waitmined-static-method","title":"drop <code>waitMined</code> static method","text":"<p>If you used it like <pre><code>const sdk = await Universal({ ... })\nsdk.waitMined(false)\n</code></pre> then you have to rewrite it using Stamp composition <pre><code>const sdk = await Universal.compose({\n  deepProps: { Ae: { defaults: { waitMined: false } } }\n})({ ... })\n</code></pre> or pass it to specific methods, like <pre><code>sdk.spend(amount, receiver, { waitMined: false })\n</code></pre> or even <pre><code>const sdk = await Universal({ ... })\nsdk.deepProps({ Ae: { defaults: { waitMined: false } } })\n</code></pre></p>"},{"location":"guides/migration/9.0.0/#drop-assertedtype-use-decode-instead","title":"drop <code>assertedType</code>, use <code>decode</code> instead","text":"<p>If you used it like <pre><code>const payload = Crypto.decodeBase64Check(Crypto.assertedType('tx_...', 'tx'))\n</code></pre> then you have to rewrite it using <code>decode</code> method <pre><code>const payload = TxBuilderHelper.decode('tx_...', 'tx')\n</code></pre></p>"},{"location":"guides/migration/9.0.0/#validator-recursive-validator-simplify-schema","title":"validator: recursive validator, simplify schema","text":"<p>Instead of <code>TransactionValidator</code> stamp use <code>verifyTransaction</code> function. The function accepts a transaction, and a Node instance for validation (instead of network id), it doesn't return an unpacked transaction anymore, just an array of errors. Each error contains a verbose <code>message</code> (<code>msg</code> before), unique <code>key</code> (for easy comparison), <code>checkedKeys</code> array (<code>txKey</code> before). Using <code>node</code> instead of <code>networkId</code> allows to ensure transaction validation, so warnings are errors now (<code>type</code> field removed).</p> <p><code>SCHEMA</code> doesn't contain validation schema anymore. This wasn't supposed to be used by external developers.</p>"},{"location":"guides/migration/9.0.0/#simplify-buildtxhash-helper","title":"simplify buildTxHash helper","text":"<p>If you used <code>buildHash</code> like <pre><code>const hash = TxBuilderHelper.buildHash('xx', Buffer.from([1, 2, 3]), { raw: true })\n</code></pre> then use <pre><code>const hash = Crypto.hash(Buffer.from([1, 2, 3]))\n</code></pre> If you used it with a falsy <code>raw</code> then <pre><code>const hash = TxBuilderHelper.encode(Crypto.hash(Buffer.from([1, 2, 3])), 'xx')\n</code></pre></p> <p><code>buildTxHash</code> don't have <code>raw</code> switch anymore, it returns <code>th_</code>-encoded string in all cases, but it still accepts transactions as a string and as a buffer.</p>"},{"location":"guides/migration/9.0.0/#enable-verification-in-deep-props-instead-of-extra-variable","title":"enable verification in deep props instead of extra variable","text":"<p>If you were passing <code>verifyTx: false</code> to sdk factory then use <code>verify: false</code> instead.</p>"},{"location":"tutorials/vuejs/helloworld-blockheight/","title":"Vue.js HelloWorld","text":"<p>This tutorial shows you how to use the SDK in your Vue.js application. You will replace the content of the default <code>HelloWorld</code> component and display the current block height of the \u00e6ternity testnet.</p>"},{"location":"tutorials/vuejs/helloworld-blockheight/#1-install-vuejs","title":"1. Install Vue.js","text":"<pre><code>npm install -g @vue/cli\n</code></pre>"},{"location":"tutorials/vuejs/helloworld-blockheight/#2-create-a-new-vuejs-project","title":"2. Create a new Vue.js project","text":"<pre><code>vue create my-project\n</code></pre>"},{"location":"tutorials/vuejs/helloworld-blockheight/#3-switch-to-the-folder-of-your-vuejs-project","title":"3. Switch to the folder of your Vue.js project","text":"<pre><code>cd my-project\n</code></pre>"},{"location":"tutorials/vuejs/helloworld-blockheight/#4-install-the-sdk","title":"4. Install the SDK","text":"<pre><code>npm install @aeternity/aepp-sdk\n</code></pre>"},{"location":"tutorials/vuejs/helloworld-blockheight/#5-modify-the-helloworld-component","title":"5. Modify the HelloWorld component","text":"<pre><code>&lt;!-- src/components/HelloWorld.vue --&gt;\n\n&lt;script&gt;\nimport { AeSdk, Node } from '@aeternity/aepp-sdk'\n\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Loading latest block ...'\n    }\n  },\n  async mounted () {\n    // Init required Node class\n    const node = new Node('https://testnet.aeternity.io')\n\n    // Init SDK instance with AeSdk class\n    const aeSdk = new AeSdk({\n       nodes: [{ name: 'test-net', instance: node }],\n    })\n    // Start using the SDK\n    const height = await aeSdk.getHeight()\n    this.msg = 'Current Block: ' + height\n  }\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"tutorials/vuejs/helloworld-blockheight/#6-run-the-application","title":"6. Run the application","text":"<pre><code>npm run serve\n</code></pre>"}]}