{"version":3,"file":"js/app.2a67d96a.js","mappings":"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","sources":["webpack://wallet-iframe/./src/App.vue","webpack://wallet-iframe/../../src/utils/errors.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://wallet-iframe/../../src/aepp-wallet-communication/schema.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://wallet-iframe/../../src/account/Base.ts","webpack://wallet-iframe/../../src/utils/other.ts","webpack://wallet-iframe/../../src/utils/encoder-types.ts","webpack://wallet-iframe/../../src/utils/encoder.ts","webpack://wallet-iframe/../../src/utils/crypto.ts","webpack://wallet-iframe/../../src/utils/typed-data.ts","webpack://wallet-iframe/../../../src/tx/builder/constants.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/entry.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/array.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/map.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-default.ts","webpack://wallet-iframe/../../src/utils/bytes.ts","webpack://wallet-iframe/../../../src/tx/builder/helpers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/address.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/encoded.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/raw.ts","webpack://wallet-iframe/../../src/utils/bignumber.ts","webpack://wallet-iframe/../../src/utils/amount-formatter.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://wallet-iframe/../../src/utils/semver-satisfies.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-price.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/fee.ts","webpack://wallet-iframe/../../src/utils/wrap-proxy.ts","webpack://wallet-iframe/../src/chain.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ttl.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/nonce.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/field.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-id.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers2.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ct-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/boolean.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/abi-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/enumeration.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/string.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/query-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/mptree.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/wrapped.ts","webpack://wallet-iframe/../../../src/tx/builder/schema.ts","webpack://wallet-iframe/../../../src/tx/builder/common.ts","webpack://wallet-iframe/../../../src/tx/builder/index.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/index.ts","webpack://wallet-iframe/../../src/account/Memory.ts","webpack://wallet-iframe/../../src/utils/autorest.ts","webpack://wallet-iframe/../../../../src/apis/node/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/node/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/node/node.ts","webpack://wallet-iframe/../src/Node.ts","webpack://wallet-iframe/../../src/tx/transaction-signer.ts","webpack://wallet-iframe/../../src/tx/execution-cost.ts","webpack://wallet-iframe/../../src/tx/validator.ts","webpack://wallet-iframe/../src/send-transaction.ts","webpack://wallet-iframe/../src/aens.ts","webpack://wallet-iframe/../src/spend.ts","webpack://wallet-iframe/../src/oracle.ts","webpack://wallet-iframe/../../src/contract/Contract.ts","webpack://wallet-iframe/../../src/contract/delegation-signature.ts","webpack://wallet-iframe/../../src/contract/ga.ts","webpack://wallet-iframe/../src/AeSdkMethods.ts","webpack://wallet-iframe/../src/AeSdkBase.ts","webpack://wallet-iframe/../src/AeSdk.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://wallet-iframe/../../src/utils/json-big.ts","webpack://wallet-iframe/../src/AeSdkWallet.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/compiler/compiler.ts","webpack://wallet-iframe/../../../src/contract/compiler/Base.ts","webpack://wallet-iframe/../../../src/contract/compiler/Http.ts","webpack://wallet-iframe/./src/Value.vue","webpack://wallet-iframe/./src/Value.vue?2a90","webpack://wallet-iframe/./src/App.vue?7ccd","webpack://wallet-iframe/./src/main.js","webpack://wallet-iframe/webpack/bootstrap","webpack://wallet-iframe/webpack/runtime/chunk loaded","webpack://wallet-iframe/webpack/runtime/define property getters","webpack://wallet-iframe/webpack/runtime/global","webpack://wallet-iframe/webpack/runtime/hasOwnProperty shorthand","webpack://wallet-iframe/webpack/runtime/make namespace object","webpack://wallet-iframe/webpack/runtime/jsonp chunk loading","webpack://wallet-iframe/webpack/startup"],"sourcesContent":["<template>\n  <input id=\"toggle-aepp\" type=\"checkbox\" />\n  <h2>\n    Wallet Iframe\n    <label for=\"toggle-aepp\" />\n  </h2>\n\n  <div class=\"group\">\n    <div>\n      <div>Aepp URL</div>\n      <form\n        novalidate\n        @submit.prevent=\"navigate\"\n      >\n        <input\n          type=\"url\"\n          v-model=\"nextAeppUrl\"\n          @focus=\"$event.target.select()\"\n        >\n      </form>\n    </div>\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Node</div>\n      <div>{{ nodeName }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>RPC client</div>\n      <div>status: {{ clientStatus ?? 'no client' }}, id: {{ clientId ?? 'not defined' }}</div>\n    </div>\n\n    <button @click=\"switchAccount\">Switch Account</button>\n    <button @click=\"switchNode\">Switch Node</button>\n\n    <button\n      v-if=\"clientStatus === 'CONNECTED'\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else\n      @click=\"() => (stopSharingWalletInfo ?? shareWalletInfo)()\"\n    >\n      {{ stopSharingWalletInfo ? 'Stop sharing' : 'Share wallet info' }}\n    </button>\n  </div>\n\n  <iframe\n    v-if=\"!runningInFrame\"\n    ref=\"aepp\"\n    :src=\"aeppUrl\"\n  />\n</template>\n\n<script>\nimport {\n  MemoryAccount, generateKeyPair, AeSdkWallet, Node, CompilerHttp,\n  BrowserWindowMessageConnection, METHODS, WALLET_TYPE, RPC_STATUS,\n  RpcConnectionDenyError, RpcRejectedByUserError, unpackTx, unpackDelegation,\n} from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    nextAeppUrl: process.env.VUE_APP_AEPP_URL ?? `http://${location.hostname}:9001`,\n    aeppUrl: '',\n    runningInFrame: window.parent !== window,\n    nodeName: '',\n    address: '',\n    balancePromise: null,\n    clientId: null,\n    clientStatus: null,\n    stopSharingWalletInfo: null,\n  }),\n  methods: {\n    navigate() {\n      if (!/^https?:\\/\\//.test(this.nextAeppUrl) && !this.nextAeppUrl.startsWith('.')) {\n        this.nextAeppUrl = 'http://' + this.nextAeppUrl;\n      }\n      this.aeppUrl = '';\n      this.$nextTick(() => {\n        this.aeppUrl = this.nextAeppUrl;\n      });\n    },\n    shareWalletInfo({ interval = 5000, attempts = 5 } = {}) {\n      const target = this.runningInFrame ? window.parent : this.$refs.aepp.contentWindow;\n      const connection = new BrowserWindowMessageConnection({ target });\n      this.clientId = this.aeSdk.addRpcClient(connection);\n\n      this.aeSdk.shareWalletInfo(this.clientId);\n      const intervalId = setInterval(() => {\n        this.aeSdk.shareWalletInfo(this.clientId);\n        attempts -= 1;\n        if (!attempts) return this.stopSharingWalletInfo();\n      }, interval);\n\n      this.stopSharingWalletInfo = () => {\n        clearInterval(intervalId);\n        // TODO: replace with clientStatus\n        const client = this.aeSdk._getClient(this.clientId);\n        if (client.status === RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST) {\n          this.aeSdk.removeRpcClient(this.clientId);\n        }\n        this.stopSharingWalletInfo = null;\n      }\n    },\n    disconnect() {\n      // TODO: move to removeRpcClient (would be a semi-breaking change)\n      const client = this.aeSdk._getClient(this.clientId);\n      if (client.status === RPC_STATUS.CONNECTED) {\n        client.rpc.notify(METHODS.closeConnection, null);\n      }\n\n      this.aeSdk.removeRpcClient(this.clientId);\n      this.clientId = null;\n    },\n    async switchAccount() {\n      this.address = this.aeSdk.addresses().find((a) => a !== this.address);\n      this.aeSdk.selectAccount(this.address);\n    },\n    async switchNode() {\n      const names = (await this.aeSdk.getNodesInPool()).map(({ name }) => name);\n      this.nodeName = names[(names.indexOf(this.nodeName) + 1) % names.length];\n      this.aeSdk.selectNode(this.nodeName);\n    },\n    updateClientStatus() {\n      if (!this.clientId) {\n        this.clientStatus = null;\n        return;\n      }\n      const client = this.aeSdk._getClient(this.clientId);\n      this.clientStatus = client.status;\n    },\n  },\n  mounted() {\n    this.navigate();\n\n    const aeppInfo = {};\n    const genConfirmCallback = (actionName) => (aeppId, parameters, origin) => {\n      if (!confirm([\n        `Client ${aeppInfo[aeppId].name} with id ${aeppId} at ${origin} want to ${actionName}`,\n        Value.methods.valueToString(parameters),\n      ].join('\\n'))) {\n        throw new RpcRejectedByUserError();\n      }\n    };\n\n    class AccountMemoryProtected extends MemoryAccount {\n      async signTransaction(tx, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          const opt = { ...options, unpackedTx: unpackTx(tx) };\n          if (opt.onCompiler) opt.onCompiler = '<Compiler>';\n          if (opt.onNode) opt.onNode = '<Node>';\n          genConfirmCallback(`sign transaction ${tx}`)(id, opt, aeppOrigin);\n        }\n        return super.signTransaction(tx, options);\n      }\n\n      async signMessage(message, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign message ${message}`)(id, options, aeppOrigin);\n        }\n        return super.signMessage(message, options);\n      }\n\n      async signTypedData(data, aci, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const dataType = new TypeResolver().resolveType(aci);\n          const decodedData = new ContractByteArrayEncoder().decodeWithType(data, dataType);\n          const opt = { ...options, aci, decodedData };\n          genConfirmCallback(`sign typed data ${data}`)(id, opt, aeppOrigin);\n        }\n        return super.signTypedData(data, aci, options);\n      }\n\n      async signDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation to contract')(id, opt, aeppOrigin);\n        }\n        return super.signDelegationToContract(contractAddress, options);\n      }\n\n      async signNameDelegationToContract(\n        contractAddress,\n        name,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, name };\n          genConfirmCallback('sign delegation of name to contract')(id, opt, aeppOrigin);\n        }\n        return super.signNameDelegationToContract(contractAddress, name, options);\n      }\n\n      async signAllNamesDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation of all names to contract')(id, opt, aeppOrigin);\n        }\n        return super.signAllNamesDelegationToContract(contractAddress, options);\n      }\n\n      async signOracleQueryDelegationToContract(\n        contractAddress,\n        oracleQueryId,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, oracleQueryId };\n          genConfirmCallback('sign delegation of oracle query to contract')(id, opt, aeppOrigin);\n        }\n        return super.signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n      }\n\n      async sign(data, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign raw data ${data}`)(id, options, aeppOrigin);\n        }\n        return super.sign(data, options);\n      }\n\n      async signDelegation(delegation, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const opt = { ...options, ...unpackDelegation(delegation) };\n          genConfirmCallback('sign delegation')(id, opt, aeppOrigin);\n        }\n        return super.signDelegation(delegation, options);\n      }\n\n      static generate() {\n        // TODO: can inherit parent method after implementing https://github.com/aeternity/aepp-sdk-js/issues/1672\n        return new AccountMemoryProtected(generateKeyPair().secretKey);\n      }\n    }\n\n    this.aeSdk = new AeSdkWallet({\n      id: window.origin,\n      type: WALLET_TYPE.window,\n      nodes: [\n        { name: 'ae_uat', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'ae_mainnet', instance: new Node('https://mainnet.aeternity.io') },\n        { name: 'ae_next', instance: new Node('https://next.aeternity.io') },\n      ],\n      accounts: [\n        new AccountMemoryProtected('9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200'),\n        AccountMemoryProtected.generate(),\n      ],\n      onCompiler: new CompilerHttp('https://v7.compiler.aepps.com'),\n      name: 'Wallet Iframe',\n      onConnection: (aeppId, params, origin) => {\n        if (!confirm(`Client ${params.name} with id ${aeppId} at ${origin} want to connect`)) {\n          throw new RpcConnectionDenyError();\n        }\n        aeppInfo[aeppId] = params;\n        setTimeout(() => this.stopSharingWalletInfo());\n      },\n      onSubscription: genConfirmCallback('subscription'),\n      onAskAccounts: genConfirmCallback('get accounts'),\n      onDisconnect: (clientId) => {\n        console.log('disconnected client', clientId);\n        this.clientId = null;\n      },\n    });\n\n    if (this.runningInFrame) this.shareWalletInfo();\n\n    this.nodeName = this.aeSdk.selectedNodeName;\n    [this.address] = this.aeSdk.addresses();\n\n    this.$watch(\n      ({ address, nodeName }) => [address, nodeName],\n      ([address]) => {\n        this.balancePromise = this.aeSdk.getBalance(address);\n      },\n      { immediate: true },\n    );\n\n    // TODO: replace setInterval with subscription after refactoring\n    setInterval(() => this.updateClientStatus(), 1000);\n    this.$watch(({ clientId }) => [clientId], () => this.updateClientStatus(), { immediate: true });\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n\n<style lang=\"scss\" scoped>\ninput[id=toggle-aepp] {\n  display: none;\n}\n\nlabel[for=toggle-aepp]::after {\n  font-size: initial;\n  font-weight: initial;\n  text-decoration: underline dotted;\n  cursor: pointer;\n}\n\n@media (max-width: 450px), (max-height: 650px) {\n  input[id=toggle-aepp] {\n    &:checked ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Hide aepp';\n      }\n\n      .group {\n        display: none;\n      }\n    }\n\n    &:not(:checked) ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Show aepp';\n      }\n\n      iframe {\n        display: none;\n      }\n    }\n  }\n}\n</style>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  unsafeSign = 'data.unsafeSign',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegationToContract = 'delegationToContract.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { AensName, ConsensusProtocolVersion, Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\nimport { NotImplementedError } from '../utils/errors';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signTypedData(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signTypedData method');\n  }\n\n  /**\n   * Sign delegation of AENS, oracle operations to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @param options.isOracle - Use to generate an oracle delegation signature in Ceres, otherwise an\n   * AENS preclaim delegation signature would be generated\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of an AENS name to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param name - AENS name to manage by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signNameDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signNameDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of all AENS names to a contract (not available in Iris)\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signAllNamesDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signAllNamesDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of oracle query to a contract\n   *\n   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded\n   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.\n   *\n   * Warning! Implementations needs to ensure that oracle query and contract exists unless\n   * https://github.com/aeternity/aesophia/issues/474 is fixed.\n   *\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param oracleQueryId - Oracle query ID to reply by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signOracleQueryDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signOracleQueryDelegationToContract method');\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegation(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegation method');\n  }\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Signs a message, and then verifies that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9; // TODO: don't use number for ae\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      return unpackTx(encode(buf, Encoding.Transaction), tag);\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","export default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion: string,\n): boolean {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const versionComponents = getComponents(version);\n  const geComponents = getComponents(geVersion);\n  const ltComponents = getComponents(ltVersion);\n\n  const base = Math.max(...versionComponents, ...geComponents, ...ltComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  const vNumber = componentsToNumber(versionComponents);\n  const geNumber = componentsToNumber(geComponents);\n  const ltNumber = componentsToNumber(ltComponents);\n  return vNumber >= geNumber && vNumber < ltNumber;\n}\n","import BigNumber from 'bignumber.js';\nimport coinAmount from './coin-amount';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE } from '../constants';\nimport Node from '../../../Node';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\nimport semverSatisfies from '../../../utils/semver-satisfies';\n\nconst gasPriceCache: WeakMap<Node, { time: number; gasPrice: bigint }> = new WeakMap();\n\nexport async function getCachedIncreasedGasPrice(node: Node): Promise<bigint> {\n  const cache = gasPriceCache.get(node);\n  if (cache != null && cache.time > Date.now() - 20 * 1000) {\n    return cache.gasPrice;\n  }\n\n  // TODO: remove after requiring node@6.13.0\n  const { nodeVersion } = await node._getCachedStatus();\n  // TODO: remove remove '6.12.0+' check after releasing 6.13.0\n  if (!nodeVersion.startsWith('6.12.0+') && !semverSatisfies(nodeVersion, '6.13.0', '8.0.0')) {\n    return 0n;\n  }\n\n  const { minGasPrice, utilization } = (await node.getRecentGasPrices())[0];\n  let gasPrice = utilization < 70 ? 0n : BigInt(\n    new BigNumber(minGasPrice.toString()).times(1.01).integerValue().toFixed(),\n  );\n\n  const maxSafeGasPrice = BigInt(MIN_GAS_PRICE) * 100000n; // max microblock fee is 600ae or 35usd\n  if (gasPrice > maxSafeGasPrice) {\n    console.warn([\n      `Estimated gas price ${gasPrice} exceeds the maximum safe value for unknown reason.`,\n      `It will be limited to ${maxSafeGasPrice}.`,\n      'To overcome this restriction provide `gasPrice`/`fee` in options.',\n    ].join(' '));\n    gasPrice = maxSafeGasPrice;\n  }\n\n  gasPriceCache.set(node, { gasPrice, time: Date.now() });\n  return gasPrice;\n}\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode, denomination }: {\n      onNode?: Node;\n      denomination?: AE_AMOUNT_FORMATS;\n    },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `gasPrice` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return formatAmount(gasPrice, { targetDenomination: denomination });\n  },\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE, Tag } from '../constants';\nimport uInt from './u-int';\nimport coinAmount from './coin-amount';\nimport { getCachedIncreasedGasPrice } from './gas-price';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\nimport Node from '../../../Node';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the base gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base gas\n * @example\n * ```js\n * TX_BASE_GAS(Tag.ChannelForceProgressTx) => 30 * 15000\n * ```\n */\nconst TX_BASE_GAS = (txType: Tag): number => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return factor * BASE_GAS;\n};\n\n/**\n * Calculate gas for other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The other gas\n * @example\n * ```js\n * TX_OTHER_GAS(Tag.OracleResponseTx, 10, { relativeTtl: 12, innerTxSize: 0 })\n *  => 10 * 20 + Math.ceil(32000 * 12 / Math.floor(60 * 24 * 365 / 3))\n * ```\n */\nconst TX_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): number => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return txSize * GAS_PER_BYTE\n        + Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL));\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return (txSize - innerTxSize) * GAS_PER_BYTE;\n    default:\n      return txSize * GAS_PER_BYTE;\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate gas based on tx type and params\n */\nexport function buildGas(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_BASE_GAS(txObject.tag)\n    + TX_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    });\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = new BigNumber(MIN_GAS_PRICE).times(buildGas(rebuildTx(fee), unpackTx, buildTx));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\n// TODO: Get rid of this workaround. Transaction builder can't accept/return gas price instead of\n// fee because it may get a decimal gas price. So, it should accept the optional `gasPrice` even\n// if it is not a contract-related transaction. And use this `gasPrice` to calculate `fee`.\nconst gasPricePrefix = '_gas-price:';\n\nexport interface SerializeAettosParams {\n  rebuildTx: (params: any) => Encoded.Transaction;\n  unpackTx: typeof unpackTxType;\n  buildTx: typeof buildTxType;\n  _computingMinFee?: BigNumber;\n}\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode }: { onNode?: Node },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `fee` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return gasPricePrefix + gasPrice;\n  },\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee,\n    }: SerializeAettosParams,\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value?.startsWith(gasPricePrefix) === true\n      ? minFee.dividedBy(MIN_GAS_PRICE).times(_value.replace(gasPricePrefix, ''))\n      : new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1] & SerializeAettosParams,\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    if (typeof value === 'string' && value.startsWith(gasPricePrefix)) {\n      return uInt.serialize(this.serializeAettos(value, params, options));\n    }\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import { ArgumentError } from './errors';\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb();\n      if (target == null) throw new ArgumentError('wrapped value', 'defined', target);\n      if (name === 'get' && args[0] === '_wrappedValue') return target;\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get' ? res.bind(target) : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport { isAccountNotFoundError, pause } from './utils/other';\nimport { unwrapProxy } from './utils/wrap-proxy';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport async function _getPollInterval(\n  type: 'key-block' | 'micro-block',\n  { _expectedMineRate, _microBlockCycle, onNode }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; onNode: Node },\n): Promise<number> {\n  const getVal = async (\n    t: string,\n    val: number | undefined,\n    devModeDef: number,\n    def: number,\n  ): Promise<number | null> => {\n    if (t !== type) return null;\n    if (val != null) return val;\n    return await onNode?.getNetworkId() === 'ae_dev' ? devModeDef : def;\n  };\n\n  const base = await getVal('key-block', _expectedMineRate, 0, 180000)\n    ?? await getVal('micro-block', _microBlockCycle, 0, 3000)\n    ?? (() => { throw new InternalError(`Unknown type: ${type}`); })();\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight(\n  { cached = false, ...options }: {\n    onNode: Node;\n    cached?: boolean;\n  } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache != null && cache.time > Date.now() - await _getPollInterval('key-block', options)) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Return transaction details if it is mined, fail otherwise.\n * If the transaction has ttl specified then would wait till it leaves the mempool.\n * Otherwise would fail if a specified amount of blocks were mined.\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail if transaction ttl is not set\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let max;\n  do {\n    const tx = await options.onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    if (max == null) {\n      max = tx.tx.ttl !== 0 ? -1\n        : await getHeight({ ...options, cached: true }) + blocks;\n    }\n    await pause(interval);\n  } while (max === -1 ? true : await getHeight({ ...options, cached: true }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(await _getPollInterval('key-block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight(options);\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { _getPollInterval, getHeight } from '../../../chain';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    {\n      onNode, absoluteTtl, _isInternalBuild, ...options\n    }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n      _isInternalBuild?: boolean;\n    } & Omit<Parameters<typeof _getPollInterval>[1], 'onNode'>,\n  ) {\n    if (absoluteTtl !== true && value !== 0 && (value != null || _isInternalBuild === true)) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value = (value ?? 3) + await getHeight({ ...options, onNode, cached: true });\n    }\n    return value;\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\nimport { isAddressValid } from '../../../utils/crypto';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) payload = [ID_TAG, addressAny.serialize(id)];\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError('Raw pointer', `shorter than ${DATA_LENGTH_MAX + 1} bytes`, `${data.length} bytes`);\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(([bKey, bId]) => {\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray);\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n};\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildGas } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildGas(rebuildTx(gasMax), unpackTx, buildTx);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, gasLimit, gasPrice, fee, address, pointers,\n  pointers2, queryFee, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, withDefault, withFormatting, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n// TODO: inline after dropping Iris compatibility\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\nconst nameTtl = withFormatting(\n  (value) => {\n    const NAME_TTL = 180000;\n    value ??= NAME_TTL;\n    if (value >= 1 && value <= NAME_TTL) return value;\n    throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n  },\n  shortUInt,\n);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(2),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers2,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types';\nimport {\n  ArgumentError, DecodeError, SchemaNotFoundError, InternalError,\n} from '../../utils/errors';\nimport {\n  Encoding, Encoded, encode, decode,\n} from '../../utils/encoder';\nimport { readInt } from './helpers';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null) throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) => (\n    field.serialize(params[key], { ...params, ...extraParams }, params)\n  ));\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name, field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId } from './helpers';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common';\nimport { ArgumentError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction;\n/**\n * Build node entry with a custom encoding\n * @param params - Entry params\n * @param options - Options\n * @param options.prefix - Output encoding\n */\nexport function buildTx<E extends TxEncoding>(\n  params: TxParams,\n  { prefix }: { prefix: E },\n): Encoded.Generic<E>;\nexport function buildTx(\n  params: TxParams,\n  { prefix }: { prefix?: TxEncoding } = {},\n): Encoded.Generic<TxEncoding> {\n  return packRecord(txSchema, Tag, params, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n    buildTx,\n    rebuildTx: (overrideParams: any) => buildTx(\n      { ...params, ...overrideParams },\n    ),\n  }, prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n  }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import SchemaTypes from '../SchemaTypes';\nimport { address, nameId, shortUIntConst } from '../field-types';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  AensWildcard = 1,\n  AensName = 2,\n  AensPreclaim = 3,\n  Oracle = 4,\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(DelegationTag.AensWildcard),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensName),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  nameId,\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensPreclaim),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.OracleResponse),\n  version: shortUIntConst(1, true),\n  queryId: queryIdField,\n  contractAddress: address(Encoding.ContractAddress),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { DelegationTag, schemas } from './schema';\nimport { DlgParams, DlgUnpacked } from './schema.generated';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash, messagePrefixLength,\n} from '../utils/crypto';\nimport { ArgumentError, UnexpectedTsError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { produceNameId } from '../tx/builder/helpers';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\nimport { packDelegation } from '../tx/builder/delegation';\n\nconst secretKeys = new WeakMap<AccountMemory, Uint8Array>();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKey).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    const secretKey = secretKeys.get(this);\n    if (secretKey == null) throw new UnexpectedTsError();\n    return sign(data, secretKey);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion, isOracle }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountMemory:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(produceNameId(name)),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      Buffer.from('AENS'),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    const oracleQueryIdDecoded = decode(oracleQueryId);\n    const addressDecoded = decode(this.address);\n    // TODO: remove after fixing https://github.com/aeternity/aesophia/issues/475\n    if (oracleQueryIdDecoded.compare(addressDecoded) === 0) {\n      throw new ArgumentError('oracleQueryId', 'not equal to account address', oracleQueryId);\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      oracleQueryIdDecoded,\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength, new Uint8Array([1]), Buffer.from(networkId), decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import { RestError, PipelineResponse } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig, FullOperationResponse, OperationOptions } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(key, req.catch(() => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        const body = (error.response as FullOperationResponse).parsedBody;\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  versionCb: (options: OperationOptions) => Promise<string>,\n  geVersion: string,\n  ltVersion: string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'version-check',\n    async sendRequest(request, next) {\n      if (request.headers.has('__version-check')) {\n        request.headers.delete('__version-check');\n        return next(request);\n      }\n      const options = { requestOptions: { customHeaders: { '__version-check': 'true' } } };\n      const args = [await versionCb(options), geVersion, ltVersion] as const;\n      if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n      return next(request);\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      errorCode: {\n        serializedName: \"error_code\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedTx: {\n        serializedName: \"encoded_tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const AuctionEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuctionEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      startedAt: {\n        serializedName: \"started_at\",\n        type: {\n          name: \"String\",\n        },\n      },\n      endsAt: {\n        serializedName: \"ends_at\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBidder: {\n        serializedName: \"highest_bidder\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBid: {\n        serializedName: \"highest_bid\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SyncStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SyncStatus\",\n    modelProperties: {\n      progress: {\n        serializedName: \"progress\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      speed: {\n        serializedName: \"speed\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      estimate: {\n        serializedName: \"estimate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hashrate: {\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      uptime: {\n        serializedName: \"uptime\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Currency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunit: {\n        serializedName: \"subunit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunitsPerUnit: {\n        serializedName: \"subunits_per_unit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fiatConverstionUrl: {\n        serializedName: \"fiat_converstion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      logo: {\n        serializedName: \"logo\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\",\n        },\n      },\n      primaryColour: {\n        serializedName: \"primary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      secondaryColour: {\n        serializedName: \"secondary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkName: {\n        serializedName: \"network_name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Image: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GasPricesItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GasPricesItem\",\n    modelProperties: {\n      minGasPrice: {\n        serializedName: \"min_gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      utilization: {\n        serializedName: \"utilization\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      minutes: {\n        serializedName: \"minutes\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\",\n        },\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetAuctionEntryByNameOptionalParams,\n  GetAuctionEntryByNameResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetSyncStatusOptionalParams,\n  GetSyncStatusResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n  GetCurrencyOptionalParams,\n  GetCurrencyResponse,\n  GetRecentGasPricesOptionalParams,\n  GetRecentGasPricesResponse,\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Dry-run unsigned transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx\n   * and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get auction entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getAuctionEntryByName(\n    name: string,\n    options?: GetAuctionEntryByNameOptionalParams,\n  ): Promise<GetAuctionEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getAuctionEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the sync status of a node\n   * @param options The options parameters.\n   */\n  getSyncStatus(\n    options?: GetSyncStatusOptionalParams,\n  ): Promise<GetSyncStatusResponse> {\n    return this.sendOperationRequest({ options }, getSyncStatusOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n\n  /**\n   * Get the currency metadata of a node\n   * @param options The options parameters.\n   */\n  getCurrency(\n    options?: GetCurrencyOptionalParams,\n  ): Promise<GetCurrencyResponse> {\n    return this.sendOperationRequest({ options }, getCurrencyOperationSpec);\n  }\n\n  /**\n   * Get minimum gas prices in recent blocks\n   * @param options The options parameters.\n   */\n  getRecentGasPrices(\n    options?: GetRecentGasPricesOptionalParams,\n  ): Promise<GetRecentGasPricesResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getRecentGasPricesOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAuctionEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/auctions/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AuctionEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSyncStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/sync-status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SyncStatus,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrencyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/currency\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Currency,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecentGasPricesOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/recent-gas-prices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"GasPricesItem\" } },\n        },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationOptions, OperationSpec } from '@azure/core-client';\nimport { userAgentPolicyName, setClientRequestIdPolicyName } from '@azure/core-rest-pipeline';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'minGasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round', 'minutes', 'utilization', 'difficulty', 'hashrate',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    const getVersion = async (opts: OperationOptions): Promise<string> => (\n      (await this._getCachedStatus(opts)).nodeVersion\n    );\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('node', getVersion, '6.2.0', '8.0.0')],\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => [\n          ' ', body.reason, body.errorCode == null ? '' : ` (${body.errorCode})`,\n        ].join('')),\n      ],\n      ...options,\n    });\n    this.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n    // TODO: use instead our retry policy\n    this.pipeline.removePolicy({ name: 'defaultRetryPolicy' });\n    this.intAsString = true;\n  }\n\n  #cachedStatusPromise?: ReturnType<Node['getStatus']>;\n\n  async _getCachedStatus(options?: OperationOptions): ReturnType<Node['getStatus']> {\n    if (this.#cachedStatusPromise != null) return this.#cachedStatusPromise;\n    return this.getStatus(options);\n  }\n\n  // eslint-disable-next-line rulesdir/tsdoc-syntax\n  /** @ts-expect-error use code generation to create node class? */\n  override async getStatus(\n    ...args: Parameters<InstanceType<NodeTransformedApi>['getStatus']>\n  ): ReturnType<InstanceType<NodeTransformedApi>['getStatus']> {\n    const promise = super.getStatus(...args);\n    promise.then(() => { this.#cachedStatusPromise = promise; }, () => {});\n    return promise;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    return (await this._getCachedStatus()).networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, isAddressValid, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, Encoding, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  async (tx, { node }) => {\n    if (tx.tag !== Tag.SpendTx || isAddressValid(tx.recipientId, Encoding.Name)) return [];\n    const recipient = await node.getAccountByPubkey(tx.recipientId).catch((error) => {\n      if (!isAccountNotFoundError(error)) throw error;\n      return null;\n    });\n    if (recipient == null || recipient.payable === true) return [];\n    return [{\n      message: 'Recipient account is not payable',\n      key: 'RecipientAccountNotPayable',\n      checkedKeys: ['recipientId'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n  // TODO: move to fee field of tx builder after dropping Iris\n  (tx, { consensusProtocolVersion }) => ((\n    Tag.GaAttachTx === tx.tag\n      && ConsensusProtocolVersion.Ceres === consensusProtocolVersion\n      && tx.nonce !== 1\n  ) ? [{\n      message: `Account ${tx.ownerId} can't become generalized because it is already used`,\n      key: 'AccountUsed',\n      checkedKeys: ['nonce'],\n    }]\n    : []),\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError } from './utils/other';\nimport { TransactionError } from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport { SignedTx } from './apis/node';\nimport { Encoded } from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\nimport { poll, waitForTxConfirm } from './chain';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction({ tx }, {\n      requestOptions: {\n        customHeaders: {\n          // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n          '__retry-code': '400',\n          ...__queue != null ? { __queue } : {},\n        },\n      },\n    });\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt, isAddressValid } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport { Tag, AensName, ConsensusProtocolVersion } from './tx/builder/constants';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { UnsupportedProtocolError } from './utils/errors';\nimport { getName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const hasRawPointers = Object.values(allPointers)\n    .some((v) => isAddressValid(v, Encoding.Bytearray));\n  const isIris = (await options.onNode.getNodeInfo())\n    .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n  if (hasRawPointers && isIris) {\n    throw new UnsupportedProtocolError('Raw pointers are available only in Ceres, the current protocol is Iris');\n  }\n\n  const nameUpdateTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameUpdateTx,\n    version: hasRawPointers ? 2 : 1,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  /**\n   * Get the pointers from the node and merge with provided ones. Pointers with the same key will be\n   * overwritten.\n   */\n  extendPointers?: boolean;\n  /**\n   * a suggestion as to how long any clients should cache this information\n   */\n  clientTtl?: number;\n  /**\n   * Name ttl represented in number of blocks (Max value is 50000 blocks)\n   */\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl?: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl, options = {}) {\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid or claiming without preclaim (in Ceres)\n * @param options - options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport { getBalance, resolveName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport { _getPollInterval, getHeight } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    interval ??= await _getPollInterval('micro-block', options);\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ ...options, cached: true });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query'>;\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'callerId' | 'oracleId'>;\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response'>;\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat'>;\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport {\n  Tag, AensName, ConsensusProtocolVersion, DRY_RUN_ACCOUNT,\n} from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun,\n} from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await aeSdk.initializeContract({ sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        if (/Expected \\d+ arguments, got \\d+/.test(message)) {\n          throw new ContractError(`ACI doesn't match called contract. Error provided by node: ${message}`);\n        }\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      const isIris = (await onNode.getNodeInfo())\n        .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n      if (!isIris && isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  {\n    onAccount, omitAddress, isOracle, ...options\n  }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    isOracle?: boolean;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const { nodeNetworkId, consensusProtocolVersion } = await options.onNode.getNodeInfo();\n  const signOpts = { networkId: nodeNetworkId, consensusProtocolVersion };\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signDelegationToContract(contractAddress, { ...signOpts, isOracle }),\n    );\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, signOpts),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, signOpts),\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { getAccount } from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport { sendTransaction } from './send-transaction';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this.getContext(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    return Contract.initialize<Methods>(this.getContext(options as AeSdkMethodsOptions));\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n    /**\n     * Make operation on specific account by providing address (to use account from sdk) or instance\n     * of AccountBase (like MemoryAccount)\n     */\n    onAccount: OnAccount;\n  } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param name - AENS name\n   * @param options - Options\n   */\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signAllNamesDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signAllNamesDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param oracleQueryId - Oracle query id\n   * @param options - Options\n   */\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      },\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport { decode, Encoded } from './utils/encoder';\nimport { UnavailableAccountError } from './utils/errors';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  /**\n   * @param options - Options\n   */\n  constructor(\n    { accounts, ...options }: { accounts?: AccountBase[] }\n    & ConstructorParameters<typeof AeSdkBase>[0] = {},\n  ) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = (\n    new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>()\n  );\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\nimport { AensName } from '../../tx/builder/constants';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.unsafeSign]: (\n    p: { data: Encoded.Bytearray; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegationToContract]: (\n    p: {\n      contractAddress: Encoded.ContractAddress;\n      name?: AensName;\n      oracleQueryId?: Encoded.OracleQueryId;\n      allNames?: boolean;\n      isOracle?: boolean;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (\n    p: {\n      delegation: Encoded.Bytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import JsonBig from 'json-bigint';\nimport BigNumber from 'bignumber.js';\nimport { mapObject } from './other';\n\nconst jsonBig = JsonBig({ storeAsString: true });\n\nconst convertValuesToBigNumbers = (value: any): any => {\n  if (typeof value === 'object' && value !== null && value.constructor === Object) {\n    return mapObject(value, ([k, v]) => [k, convertValuesToBigNumbers(v)]);\n  }\n  if (Array.isArray(value)) {\n    return value.map((item) => convertValuesToBigNumbers(item));\n  }\n  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {\n    const bn = new BigNumber(value);\n    bn.toJSON = () => bn.toString(10);\n    return bn;\n  }\n  return value;\n};\n\nexport default {\n  stringify: (...args: Parameters<typeof JsonBig['stringify']>): string => (\n    jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1))\n  ),\n  parse: jsonBig.parse,\n};\n","import { v4 as uuid } from '@aeternity/uuid';\nimport AeSdk from './AeSdk';\nimport verifyTransaction from './tx/validator';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport {\n  METHODS, RPC_STATUS, SUBSCRIPTION_TYPES, WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError, RpcPermissionDenyError, RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema';\nimport { InternalError, UnknownRpcClientError } from './utils/errors';\nimport AccountBase from './account/Base';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types';\nimport {\n  Encoded, Encoding, encode, decode,\n} from './utils/encoder';\nimport jsonBig from './utils/json-big';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string, params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>, origin: string\n) => void;\n\ntype OnSubscription = (\n  clientId: string, params: Parameters<WalletApi[METHODS.subscribeAddress]>[0], origin: string\n) => void;\n\ntype OnDisconnect = (\n  clientId: string, params: Parameters<WalletApi[METHODS.closeConnection]>[0]\n) => void;\n\ntype OnAskAccounts = (\n  clientId: string, params: undefined, origin: string\n) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _getAccountsForClient({ addressSubscription }: RpcClientsInfo): Accounts {\n    const { current, connected } = this.getAccounts();\n    return {\n      current: addressSubscription.has('current') || addressSubscription.has('connected')\n        ? current : {},\n      connected: addressSubscription.has('connected') ? connected : {},\n    };\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .filter((client) => client.addressSubscription.size !== 0)\n      .forEach((client) => client.rpc\n        .notify(METHODS.updateAddress, this._getAccountsForClient(client)));\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...client.connectNode && this._getNode(),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return RPC_STATUS.CONNECTED === this._getClient(clientId).status\n      && this._getClient(clientId).rpc.connection.isConnected();\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = uuid();\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({\n            name, version, icons, connectNode,\n          }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...await this.getWalletInfo(),\n              ...connectNode && this._getNode(),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                // TODO: remove `type` as it always subscribe\n                await this.onSubscription(id, { type, value }, origin);\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this._getAccountsForClient(client),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            {\n              tx, onAccount = this.address, returnSigned, innerTx,\n            },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount, aeppOrigin: origin, aeppRpcClientId: id, innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(jsonBig.stringify({\n                transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n              }));\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async ({\n            domain, aci, data, onAccount = this.address,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain, onAccount, aeppOrigin: origin, aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n          [METHODS.signDelegationToContract]: async ({\n            contractAddress, name, oracleQueryId, allNames, onAccount = this.address, isOracle,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            isOracle ??= false;\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await (\n              (name == null ? null : this\n                .signNameDelegationToContract(contractAddress, name, parameters))\n              ?? (oracleQueryId == null ? null : this\n                .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, parameters))\n              ?? (allNames !== true ? null : this\n                .signAllNamesDelegationToContract(contractAddress, parameters))\n              ?? this.signDelegationToContract(contractAddress, { ...parameters, isOracle })\n            );\n            return { signature };\n          },\n          [METHODS.unsafeSign]: async ({ data, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = encode(await this.sign(decode(data), parameters), Encoding.Signature);\n            return { signature };\n          },\n          [METHODS.signDelegation]: async ({ delegation, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await this.signDelegation(delegation, parameters);\n            return { signature };\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: window.location.origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import {\n  RestError, userAgentPolicyName, setClientRequestIdPolicyName,\n} from '@azure/core-rest-pipeline';\nimport { OperationOptions } from '@azure/core-client';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci, CompileResult } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion = false }: { ignoreVersion?: boolean } = {}) {\n    super();\n\n    let version: string | undefined;\n    const getVersion = async (opts: OperationOptions): Promise<string> => {\n      if (version != null) return version;\n      version = (await this.api.apiVersion(opts)).apiVersion;\n      return version;\n    };\n\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('compiler', getVersion, '7.3.0', '9.0.0')],\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    this.api.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.api.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      cmpOut.warnings ??= []; // TODO: remove after requiring http compiler above or equal to 8.0.0\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=7883c6ac\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=40b913fe&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\nimport \"./App.vue?vue&type=style&index=1&id=40b913fe&lang=scss&scoped=true\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-40b913fe\"]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwallet_iframe\"] = self[\"webpackChunkwallet_iframe\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(28486); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","id","type","_createTextVNode","for","class","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","novalidate","onSubmit","_cache","_withModifiers","args","$options","navigate","$event","_ctx","nextAeppUrl","onFocus","target","select","_hoisted_5","_toDisplayString","address","_hoisted_6","nodeName","_hoisted_7","_createVNode","_component_Value","value","balancePromise","_hoisted_8","clientStatus","clientId","onClick","switchAccount","switchNode","key","disconnect","stopSharingWalletInfo","shareWalletInfo","runningInFrame","_createCommentVNode","ref","src","aeppUrl","_hoisted_9","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","UnknownRpcClientError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","connect","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","AccountBase","signTypedData","aci","signDelegationToContract","signNameDelegationToContract","signAllNamesDelegationToContract","signOracleQueryDelegationToContract","oracleQueryId","signDelegation","delegation","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","isAddressValid","maybeEncoded","encodings","encoding","genSalt","random","BigUint64Array","nacl","Number","BigInt","MAX_SAFE_INTEGER","hash","generateKeyPairFromSecret","secret","keyPair","fromSecretKey","generateKeyPair","raw","publicBuffer","publicKey","secretBuffer","secretKey","sign","privateKey","detached","verify","signature","messagePrefix","messagePrefixLength","messageToHash","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","genEntryField","serialize","txParams","buildTx","ArrayBuffer","isView","startsWith","buf","unpackTx","genArrayField","itemHandler","items","params","buffers","genMapField","Mtree","values","MtreeValue","filter","recursiveType","withDefault","defaultValue","field","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","senderId","oracleId","_int32","nonceBE","alloc","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","commitmentHash","salt","padStart","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","isAuctionName","uInt","withFormatting","format","genShortUIntConstField","constValue","optional","shortUInt","constValueOptional","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","readUIntBE","subarray","genEncodedField","encodedData","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","serializeAettos","semverSatisfies","getComponents","v","i","versionComponents","geComponents","ltComponents","base","max","componentsToNumber","components","reverse","reduce","acc","n","idx","vNumber","geNumber","ltNumber","gasPriceCache","getCachedIncreasedGasPrice","node","cache","get","time","Date","now","gasPrice","nodeVersion","_getCachedStatus","minGasPrice","utilization","getRecentGasPrices","integerValue","maxSafeGasPrice","warn","set","coinAmount","prepare","onNode","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ContractCreateTx","ContractCallTx","GaAttachTx","GaMetaTx","PayingForTx","factor","TX_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","ceil","floor","getOracleRelativeTtl","ttlKeys","buildGas","builtTx","txObject","tx","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","gasPricePrefix","_value","_computingMinFee","_canIncreaseFee","minFee","dividedBy","replace","gt","wrapWithProxy","valueCb","Proxy","res","Reflect","bind","unwrapProxy","_wrappedValue","_getPollInterval","_expectedMineRate","_microBlockCycle","_ref","_await$getVal","getVal","devModeDef","def","getNetworkId","heightCache","getHeight","cached","getCurrentKeyBlockHeight","poll","interval","_interval","getTransactionByHash","blockHeight","ttl","awaitHeight","_interval2","currentHeight","waitForTxConfirm","confirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","getBalance","addr","balance","catch","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","Map","txDryRunHandler","rs","delete","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accounts","Array","Set","accountAddress","pubKey","forEach","reject","results","result","reason","resultPayload","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","pointer","pointers","p","absoluteTtl","_isInternalBuild","genNonceField","senderKey","strategy","getAccountNextNonce","nextNonce","addressAny","txFields","parameters","addressName","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","bKey","bId","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","Fate3","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","consensusProtocolVersion","keys","getNodeInfo","vm","abi","calculateGasLimitMax","gasMax","_computingGasLimit","gasLimitMax","gasLimit","_getProtocolDetails","c","kind","genEnumerationField","enm","getOracleByPubkey","queryFee","rlpEncode","_rlp","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","binary","unpTx","_classPrivateMethodInitSpec","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","Extension","Leaf","isEqual","tree","mptHash","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","k","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","ORACLE_TTL_TYPES","CallReturnType","entryAny","entry","entrySignedTx","SignedTx","entryMtreeValueArray","entryTreesPoi","TreesPoi","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","flags","gaContract","gaAuthFun","encoded","signatures","SpendTx","recipientId","accountId","status","NamePreclaimTx","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","pointers2","NameTransferTx","NameRevokeTx","owner","ctVersion","active","boolean","referers","deposit","callData","callerId","callerNonce","gasUsed","returnValue","returnType","enumeration","queryFormat","responseFormat","oracleTtlValue","oracleTtlType","delta","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","ChannelOffChainUpdateTransfer","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","contract","callStack","ChannelClientReconnectTx","role","pubkey","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","authFun","gaId","authData","payerId","GaMetaTxAuthData","rlpDecode","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","unpackRecord","encodedRecord","expectedTag","index","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","DelegationTag","oracleAddressField","queryIdField","AensWildcard","AensName","AensPreclaim","packDelegation","unpackDelegation","secretKeys","getBufferToSign","networkId","innerTx","prefixes","rlpBinaryTx","AccountMemory","generate","signTransaction","txWithNetworkId","signMessage","dHash","isOracle","oracleQueryIdDecoded","addressDecoded","compare","genRequestQueuesPolicy","requestQueues","policy","sendRequest","request","next","_requestQueues$get","headers","getResponse","then","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","method","JSON","stringify","url","body","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","parsedBody","genVersionCheckPolicy","versionCb","has","requestOptions","customHeaders","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","NaN","statusesToNotRetry","intervals","fill","_","intervalSum","a","b","intervalsInMs","e","attempt","urlParsed","searchParams","_e$response$status","_e$response","Header","className","modelProperties","serializedName","required","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","info","pofHash","txsHash","ErrorModel","errorCode","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","blockHash","Tx","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","uberParent","polymorphicDiscriminator","clientName","op","RelativeTTL","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","AuctionEntry","startedAt","endsAt","highestBidder","highestBid","NameEntry","PeerPubKey","SyncStatus","progress","speed","estimate","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","uptime","listening","protocols","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","Currency","symbol","subunit","subunitsPerUnit","fiatConverstionUrl","logo","primaryColour","secondaryColour","networkName","Image","GasPricesItem","minutes","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","fromParam","limit","typeParam","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxsOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getAuctionEntryByName","getAuctionEntryByNameOperationSpec","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getSyncStatus","getSyncStatusOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","getCurrency","getCurrencyOperationSpec","getRecentGasPricesOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_cachedStatusPromise","ignoreVersion","getVersion","opts","allowInsecureConnection","additionalPolicies","pipeline","removePolicy","userAgentPolicyName","setClientRequestIdPolicyName","promise","nodeNetworkId","versions","getTransactionSignerAddress","_getSchema$find","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","recipient","_ref2","oracleCall","contractCreate","contractCall","parse","InvalidTxError","validation","sendTransaction","txUnsigned","onAccount","waitMined","__queue","pollResult","txData","confirmationHeight","verifyTx","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","hasRawPointers","isIris","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","transfer","revoke","extendTtl","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","claim","otherOptions","aensBid","spend","recipientIdOrName","transferFunds","fraction","desiredAmount","ROUND_HALF_UP","plus","minus","payForTransaction","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$options$onNode","queries","add","stopped","pollForQueryResponse","responseBuffer","getQueryObject","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","handler","lastArg","registerOracle","oracleRegisterTx","Encoder","Calldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","compile","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","callStatic","$deploy","_opt$gasLimit","_other$result","_calldata","_name","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","ensureOracleQuery","oq","createDelegationSignature","ids","omitAddress","signOpts","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","methods","chainMethods","aensMethods","spendMethods","oracleMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","getContext","mergeWith","initializeContract","prototype","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","compilerApi","_resolveAccount","ensureNodeConnected","pool","selectedNodeName","selectNode","isNodeConnected","getNodesInPool","addresses","String","_options$networkId","_options$consensusPro","_options$networkId2","_options$consensusPro2","_options$networkId3","_options$consensusPro3","_options$networkId4","_options$consensusPro4","_options$networkId5","AeSdk","addAccount","selectedAddress","selectAccount","removeAccount","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","connection","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","RPC_VERSION","jsonBig","JsonBig","storeAsString","convertValuesToBigNumbers","bn","AeSdkWallet","onConnection","onSubscription","onAskAccounts","_type","_getAccountsForClient","addressSubscription","current","getAccounts","_pushAccountsToApps","_clients","_isRpcClientConnected","_getClient","client","size","rpc","updateAddress","_getNode","updateNetwork","connectNode","CONNECTED","_disconnectRpcClient","DISCONNECTED","removeRpcClient","addRpcClient","clientConnection","uuid","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","icons","getWalletInfo","subscribeAddress","subscribe","unsubscribe","subscription","returnSigned","aeppOrigin","aeppRpcClientId","signedTransaction","transactionHash","allNames","_isOracle","_ref3","unsafeSign","readyToConnect","location","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","_cmpOut$warnings","cmpOut","warning","generateAciBySourceCode","generateAci","_normalizeClass","text","props","default","watch","valueToString","immediate","__exports__","Value","process","parent","$nextTick","attempts","$refs","aepp","contentWindow","aeSdk","intervalId","setInterval","clearInterval","names","updateClientStatus","mounted","aeppInfo","genConfirmCallback","actionName","aeppId","AccountMemoryProtected","MemoryAccount","unpackedTx","dataType","decodedData","decodeWithType","$watch","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}