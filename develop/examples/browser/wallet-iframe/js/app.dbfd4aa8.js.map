{"version":3,"file":"js/app.dbfd4aa8.js","mappings":"6gLACEA,EAAAA,EAAAA,GAA0C,SAAnCC,GAAG,cAAcC,KAAK,Y,qBAC7BF,EAAAA,EAAAA,GAGK,YALPG,EAAAA,EAAAA,IAEM,oBAEFH,EAAAA,EAAAA,GAA2B,SAApBI,IAAI,kBAAa,K,GAGrBC,MAAM,S,UAEPL,EAAAA,EAAAA,GAAmB,WAAd,YAAQ,K,UAabA,EAAAA,EAAAA,GAAkB,WAAb,WAAO,K,UAIZA,EAAAA,EAAAA,GAAe,WAAV,QAAI,K,UAITA,EAAAA,EAAAA,GAAkB,WAAb,WAAO,K,UAIZA,EAAAA,EAAAA,GAAqB,WAAhB,cAAU,K,EAlCrB,Q,oEAAAM,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,MACEC,EACAC,GAKAT,EAAAA,EAAAA,GA8CM,MA9CNU,EA8CM,EA7CJV,EAAAA,EAAAA,GAYM,YAXJW,GACAX,EAAAA,EAAAA,GASO,QARLY,WAAA,GACCC,SAAMC,EAAA,KAAAA,EAAA,IAZfC,EAAAA,EAAAA,KAAA,IAAAC,IAYyBC,EAAAC,UAAAD,EAAAC,YAAAF,IAAQ,e,WAEzBhB,EAAAA,EAAAA,GAIC,SAHCE,KAAK,MAff,sBAAAY,EAAA,KAAAA,EAAA,GAAAK,GAgBmBC,EAAAC,YAAWF,GACnBG,QAAKR,EAAA,KAAAA,EAAA,GAAAK,GAAEA,EAAOI,OAAOC,W,iBADbJ,EAAAC,gBAAW,OAK1BrB,EAAAA,EAAAA,GAGM,YAFJyB,GACAzB,EAAAA,EAAAA,GAAwB,YAAA0B,EAAAA,EAAAA,IAAhBN,EAAAO,SAAO,MAEjB3B,EAAAA,EAAAA,GAGM,YAFJ4B,GACA5B,EAAAA,EAAAA,GAAyB,YAAA0B,EAAAA,EAAAA,IAAjBN,EAAAS,UAAQ,MAElB7B,EAAAA,EAAAA,GAGM,YAFJ8B,GACAC,EAAAA,EAAAA,IAAiCC,EAAA,CAAzBC,MAAOb,EAAAc,gBAAc,qBAE/BlC,EAAAA,EAAAA,GAGM,YAFJmC,GACAnC,EAAAA,EAAAA,GAAyF,WAApF,YAAQ0B,EAAAA,EAAAA,IAAGN,EAAAgB,cAAgB,aAAc,UAAMV,EAAAA,EAAAA,IAAGN,EAAAiB,UAAY,eAAJ,MAGjErC,EAAAA,EAAAA,GAAsD,UAA7CsC,QAAKxB,EAAA,KAAAA,EAAA,OAAAE,IAAEC,EAAAsB,eAAAtB,EAAAsB,iBAAAvB,KAAe,mBAC/BhB,EAAAA,EAAAA,GAAgD,UAAvCsC,QAAKxB,EAAA,KAAAA,EAAA,OAAAE,IAAEC,EAAAuB,YAAAvB,EAAAuB,cAAAxB,KAAY,eAGH,cAAjBI,EAAAgB,eAAY,WADpB9B,EAAAA,EAAAA,IAKS,UA9CbmC,IAAA,EA2COH,QAAKxB,EAAA,KAAAA,EAAA,OAAAE,IAAEC,EAAAyB,YAAAzB,EAAAyB,cAAA1B,KACT,mBAED,WACAV,EAAAA,EAAAA,IAKS,UApDbmC,IAAA,EAiDOH,QAAKxB,EAAA,KAAAA,EAAA,QAASM,EAAAuB,uBAAyB1B,EAAA2B,sB,QAErCxB,EAAAuB,sBAAwB,eAAiB,qBAApB,MAKnBvB,EAAAyB,gBAxDXC,EAAAA,EAAAA,IAAA,SAwDyB,WADvBxC,EAAAA,EAAAA,IAIE,UA3DJmC,IAAA,EAyDIM,IAAI,OACHC,IAAK5B,EAAA6B,S,OA1DVC,KAAA,G,yBCSO,MAAeC,UAAkBC,MACtCC,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAMK,MAAMC,UAAqBP,EAChCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,cACd,EAMK,MAAME,UAAkBR,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAMK,MAAMG,UAAkBT,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAgBK,MAAMI,UAAsBV,EACjCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,eACd,EAMK,MAAMK,UAAsBX,EACjCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,eACd,EAMK,MAAMM,UAA0BZ,EACrCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,mBACd,EAMK,MAAMO,UAAkBb,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAMK,MAAMQ,UAAyBd,EACpCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,kBACd,EAMK,MAAMS,UAAoBf,EAC/BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,aACd,EAMK,MAAMU,UAAsBhB,EACjCE,WAAAA,CAAYe,EAAsBC,EAAsBC,GACtDf,MAAO,GAAEa,eAA0BC,UAAoBC,aACvDd,KAAKC,KAAO,eACd,EAMK,MAAMc,UAA6BR,EACxCV,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,sBACd,EAoCK,MAAMe,UAA+BrB,EAC1CE,WAAAA,GACEE,MAAM,oCACNC,KAAKC,KAAO,wBACd,EAMK,MAAMgB,UAA6BtB,EACxCE,WAAAA,CAAYqB,GACVnB,MAAO,uBAAsBmB,KAC7BlB,KAAKC,KAAO,sBACd,EAMK,MAAMkB,UAAwBxB,EACnCE,WAAAA,CAAYuB,EAAgBC,GAC1BtB,MAAM,CACH,mBAAkBqB,iBAClB,qBAAoBC,KACrBC,KAAK,OACPtB,KAAKC,KAAO,iBACd,EAMK,MAAMsB,UAAkB5B,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAgBK,MAAMuB,UAAiC7B,EAC5CE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,0BACd,EAMK,MAAMwB,UAA4B9B,EACvCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,qBACd,EAMK,MAAMyB,UAAgC/B,EAC3CE,WAAAA,CAAY8B,EAAoBC,EAAiBC,EAAmBC,GAClE/B,MAAO,eAAc4B,aAAsBC,oBAA0BC,OAAeC,KACpF9B,KAAKC,KAAO,yBACd,EAgBK,MAAM8B,UAAsBpC,EACjCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,eACd,EAMK,MAAM+B,UAA0BD,EACrClC,WAAAA,GAAiE,IAArDC,EAAOmC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,0CACpBlC,MAAMD,GACNE,KAAKC,KAAO,mBACd,EAMK,MAAMmC,UAAgClC,EAC3CL,WAAAA,CAAY1B,GACV4B,MAAO,eAAc5B,mBACrB6B,KAAKC,KAAO,yBACd,EAMK,MAAMoC,UAAgClC,EAC3CN,WAAAA,CAAYyC,EAAmCC,GAC7CxC,MAAO,QAAOuC,6BAAoCC,KAClDvC,KAAKC,KAAO,yBACd,EAMK,MAAMuC,UAAiCrC,EAC5CN,WAAAA,CAAY4C,EAAoBC,GAC9B3C,MAAO,oBAAmB0C,EAAQE,4DAA4DD,EAAWC,cACzG3C,KAAKC,KAAO,0BACd,EAMK,MAAM2C,UAA6BzC,EACxCN,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,sBACd,EAMK,MAAM4C,UAA+BzC,EAC1CP,WAAAA,CAAYC,GACVC,MAAO,6BAA4BD,KACnCE,KAAKC,KAAO,wBACd,EAMK,MAAM6C,UAA6B1C,EACxCP,WAAAA,CAAYpD,GACVsD,MAAO,0CAAyCtD,KAChDuD,KAAKC,KAAO,sBACd,EAgBK,MAAM8C,UAA8B3C,EACzCP,WAAAA,CAAYpD,GACVsD,MAAO,qBAAoBtD,kBAC3BuD,KAAKC,KAAO,uBACd,EA4FK,MAAM+C,WAA8B1C,EACzCT,WAAAA,CAAYoD,GACVlD,MAAO,YAAWkD,6DAClBjD,KAAKC,KAAO,uBACd,EAMK,MAAMiD,WAA+B5C,EAC1CT,WAAAA,GACEE,MAAM,6BACNC,KAAKC,KAAO,wBACd,EAMK,MAAMkD,WAA8B7C,EACzCT,WAAAA,CAAYuD,GACVrD,MAAO,yBAAwBqD,gBAC/BpD,KAAKC,KAAO,uBACd,EAMK,MAAMoD,WAAqC/C,EAChDT,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,8BACd,EAMK,MAAMqD,WAAoChD,EAC/CT,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,6BACd,EAMK,MAAMsD,WAAgCjD,EAC3CT,WAAAA,GACEE,MAAM,0DACNC,KAAKC,KAAO,yBACd,EAMK,MAAMuD,WAAiClD,EAC5CT,WAAAA,GACEE,MAAM,6BACNC,KAAKC,KAAO,0BACd,EAMK,MAAMwD,WAA4BnD,EAGvCT,WAAAA,CAAYC,EAAiB4D,GAC3B3D,MAAO,qBAA8B,MAAXD,EAAkB,GAAM,MAAKA,OACvDE,KAAKC,KAAO,sBACZD,KAAK0D,YAAcA,CACrB,EAMK,MAAMC,WAAoCrD,EAC/CT,WAAAA,CAAYI,GACVF,MAAO,YAAWE,+BAClBD,KAAKC,KAAO,6BACd,EAMK,MAAM2D,WAAgCtD,EAC3CT,WAAAA,CAAYgE,EAAaC,GACvB/D,MACG,mBAAkB8D,mBAAwBC,mEAG7C9D,KAAKC,KAAO,yBACd,EAMK,MAAM8D,WAAoCzD,EAC/CT,WAAAA,CAAYmE,EAAuBC,GACjClE,MACG,4BAA2BiE,sBAAkCC,yDAGhEjE,KAAKC,KAAO,6BACd,EAMK,MAAMiE,WAAsC5D,EACjDT,WAAAA,CAAYoE,EAAuCE,GACjDpE,MACG,kCAAiCoE,EAAc,GAAG,6CAC7CF,QAAmBE,EAAcC,KAAIC,IAAA,IAAEpE,GAAKoE,EAAA,MAAM,IAAGpE,IAAO,IAAEqB,KAAK,wGAG3EtB,KAAKC,KAAO,+BACd,EAMK,MAAMqE,WAA6B/D,EACxCV,WAAAA,GACEE,MAAM,oBACNC,KAAKC,KAAO,sBACd,EAgBK,MAAMsE,WAAoChE,EAC/CV,WAAAA,GACEE,MAAM,0CACNC,KAAKC,KAAO,6BACd,EAMK,MAAMuE,WAA+BjE,EAC1CV,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,wBACd,EAMK,MAAMwE,WAA+BlE,EAC1CV,WAAAA,CAAY6E,GACV3E,MAAO,wBAAuB2E,KAC9B1E,KAAKC,KAAO,wBACd,EAMK,MAAM0E,WAA+BpE,EAC1CV,WAAAA,CAAY+E,GACV7E,MAAO,wBAAuB6E,KAC9B5E,KAAKC,KAAO,wBACd,EAMK,MAAM4E,WAA2BrE,EACtCX,WAAAA,CAAYI,GACVF,MAAO,kBAAiBE,mBACxBD,KAAKC,KAAO,oBACd,EAMK,MAAM6E,WAA0BtE,EACrCX,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,mBACd,EAMK,MAAM8E,WAAoBtE,EAC/BZ,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,aACd,EAMK,MAAM+E,WAA2BvE,EACtCZ,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,oBACd,EAMK,MAAMgF,WAAoBxE,EAC/BZ,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,aACd,EA0BK,MAAMiF,WAA4BzE,EACvCZ,WAAAA,CAAYsF,GACVpF,MAAO,qBAAoBoF,gBAC3BnF,KAAKC,KAAO,qBACd,EAMK,MAAMmF,WAA4B3E,EACvCZ,WAAAA,CAAYZ,EAAa2C,GACvB7B,MAAO,8CAA6Cd,aAAe2C,KACnE5B,KAAKC,KAAO,qBACd,EAMK,MAAMoF,WAAyB5E,EACpCZ,WAAAA,CAAY0C,GACVxC,MAAO,qBAAoBwC,gBAC3BvC,KAAKC,KAAO,aACd,EAMK,MAAMqF,WAA0B7E,EACrCZ,WAAAA,CAAY0F,GACVxF,MAAO,eAAcwF,2BACrBvF,KAAKC,KAAO,mBACd,EAMK,MAAMuF,WAA8B9E,EACzCb,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,uBACd,EAMK,MAAMwF,WAA+B/E,EAC1Cb,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,wBACd,EAMK,MAAMyF,WAA2BhF,EACtCb,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,oBACd,ECjwBa,MAAe0F,GAGlB9F,WAAAA,CAAWwE,GAAyC,IAAxC,MAAEuB,GAAQ,GAA4BvB,EAC1DrE,KAAK4F,MAAQA,CACf,CAOAC,OAAAA,CAEEC,EAEAC,GAEA,GAAI/F,KAAKgG,cAAe,MAAM,IAAIR,GAAsB,wBAC1D,CAKAtG,UAAAA,GACE,IAAKc,KAAKgG,cAAe,MAAM,IAAIP,GAAuB,kDAC5D,CAKUQ,cAAAA,CAAenG,GACnBE,KAAK4F,OAAOM,QAAQC,IAAI,mBAAoBrG,EAClD,CAKAsG,WAAAA,CAAYtG,GACNE,KAAK4F,OAAOM,QAAQC,IAAI,gBAAiBrG,EAC/C,E,yBCvCK,IAAWuG,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,2BAAjBA,EAAiB,qBAAjBA,CAAiB,MAQjBC,GAAW,SAAXA,GAAW,OAAXA,EAAW,mBAAXA,EAAW,yBAAXA,CAAW,MAQXC,GAAkB,SAAlBA,GAAkB,OAAlBA,EAAkB,yBAAlBA,EAAkB,6BAAlBA,CAAkB,MAQlBC,GAAO,SAAPA,GAAO,OAAPA,EAAO,gDAAPA,EAAO,kCAAPA,EAAO,yBAAPA,EAAO,6BAAPA,EAAO,2BAAPA,EAAO,8BAAPA,EAAO,kCAAPA,EAAO,wDAAPA,EAAO,oCAAPA,EAAO,wCAAPA,EAAO,oCAAPA,EAAO,sCAAPA,CAAO,MAkBPC,GAAU,SAAVA,GAAU,OAAVA,EAAU,yBAAVA,EAAU,+BAAVA,EAAU,mEAAVA,CAAU,MAY5B,MAAMC,GAAsE,GAKrE,MAAeC,WAAiBhH,EAOrCiH,MAAAA,GACE,MAAO,CACLC,KAAM7G,KAAK6G,KACX/G,QAASE,KAAKF,QACdgH,KAAM9G,KAAK8G,KAEf,CAEA,kBAAOC,CAAYC,GACjB,MAAMC,EAASP,GAAUQ,MAAMC,GAAOA,EAAGN,OAASG,EAAKH,OACvD,GAAc,MAAVI,EAAgB,MAAM,IAAIlF,EAAe,kCAAiCiF,EAAKH,QACnF,OAAO,IAAII,EAAOD,EAAKF,KACzB,EAMK,MAAMM,WAAmCT,GAK9C9G,WAAAA,CAAYiH,GACV/G,MAAM,wBAAuBsH,EAAAA,GAAAA,GAAA,YAHf,GAIdrH,KAAK8G,KAAOA,EACZ9G,KAAKC,KAAO,4BACd,GACDoH,EAAAA,GAAAA,GAVYD,GAA0B,OACd,GAUzBV,GAAUY,KAAKF,IAKR,MAAMG,WAA+BZ,GAK1C9G,WAAAA,CAAYiH,GACV/G,MAAM,+BAA8BsH,EAAAA,GAAAA,GAAA,YAHtB,GAIdrH,KAAK8G,KAAOA,EACZ9G,KAAKC,KAAO,wBACd,GACDoH,EAAAA,GAAAA,GAVYE,GAAsB,OACV,GAUzBb,GAAUY,KAAKC,IAKR,MAAMC,WAAoCb,GAK/C9G,WAAAA,GACEE,MAAM,iCAAgCsH,EAAAA,GAAAA,GAAA,YAHxB,GAIdrH,KAAKC,KAAO,6BACd,GACDoH,EAAAA,GAAAA,GATYG,GAA2B,OACf,GASzBd,GAAUY,KAAKE,IAKR,MAAMC,WAA+Bd,GAK1C9G,WAAAA,CAAYiH,GACV/G,MAAM,wCAAuCsH,EAAAA,GAAAA,GAAA,YAH/B,GAIdrH,KAAK8G,KAAOA,EACZ9G,KAAKC,KAAO,wBACd,GACDoH,EAAAA,GAAAA,GAVYI,GAAsB,OACV,GAUzBf,GAAUY,KAAKG,IAKR,MAAMC,WAA6Bf,GAKxC9G,WAAAA,GACEE,MAAM,wCAAuCsH,EAAAA,GAAAA,GAAA,YAH/B,IAIdrH,KAAKC,KAAO,sBACd,GACDoH,EAAAA,GAAAA,GATYK,GAAoB,OACR,IASzBhB,GAAUY,KAAKI,IAKR,MAAMC,WAA+BhB,GAK1C9G,WAAAA,CAAY1B,GACV4B,MAAO,sCAAqC5B,MAAWkJ,EAAAA,GAAAA,GAAA,YAHzC,IAIdrH,KAAK8G,KAAO3I,EACZ6B,KAAKC,KAAO,wBACd,GACDoH,EAAAA,GAAAA,GAVYM,GAAsB,OACV,IAUzBjB,GAAUY,KAAKK,IAKR,MAAMC,WAAyBjB,GAKpC9G,WAAAA,GACEE,MAAM,iEAAgEsH,EAAAA,GAAAA,GAAA,YAHxD,IAIdrH,KAAKC,KAAO,kBACd,GACDoH,EAAAA,GAAAA,GATYO,GAAgB,OACJ,IASzBlB,GAAUY,KAAKM,IAKR,MAAMC,WAA+BlB,GAK1C9G,WAAAA,GACEE,MAAM,qBAAoBsH,EAAAA,GAAAA,GAAA,aAHX,OAIfrH,KAAKC,KAAO,wBACd,E,0JACDoH,EAAAA,GAAAA,GATYQ,GAAsB,QACT,OAS1BnB,GAAUY,KAAKO,IChN2B,IAAAC,GAAA,IAAAC,QAAAC,GAAA,IAAAD,QAAAE,GAAA,IAAAF,QAQ3B,MAAMG,WAAuCvC,GAyB1D9F,WAAAA,GAcQ,IAdI,OACV9B,EAAM,KACNoK,EAAOC,OAAM,OACbC,EAAM,cACNC,EAAa,iBACbC,EAAmBlC,GAAkBmC,WAClCC,GAQJxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACHlC,MAAM0I,GAASC,GAAA,KAAAZ,GAAA,CAAAa,UAAA,EAAAlK,WAAA,IAAAiK,GAAA,KAAAV,GAAA,CAAAW,UAAA,EAAAlK,WAAA,IAAAiK,GAAA,KAAAT,GAAA,CAAAU,UAAA,EAAAlK,WAAA,KACfmK,EAAAA,EAAAA,GAAA5I,KAAIgI,GAAWjK,IACf6K,EAAAA,EAAAA,GAAA5I,KAAIiI,GAASE,GACbnI,KAAKqI,OAASA,EACdrI,KAAKsI,cAAgBA,EACrBtI,KAAKuI,iBAAmBA,CAC1B,CAEAvC,WAAAA,GACE,OAAwB,MAAjBhG,KAAK6I,QACd,CAEShD,OAAAA,CACPC,EACAC,GAEAhG,MAAM8F,QAAQC,EAAWC,GACzB/F,KAAK6I,SAAY/I,IAA+B,IAAAgJ,EAAAC,EAE9C,GAC0B,kBAAjBjJ,EAAQgH,MAC6C,SAApC,QAArBgC,EAAChJ,EAAQgH,KAAKkC,eAAO,IAAAF,EAAAA,EAAqB,QAArBC,EAAIjJ,EAAQgH,KAAKA,YAAI,IAAAiC,OAAA,EAAjBA,EAAmBC,SAC/C,OACF,GAAmB,MAAfhJ,KAAKqI,QAAkBrI,KAAKqI,SAAWvI,EAAQuI,OAAQ,OAC3D,GAAoB,OAAhBY,EAAAA,EAAAA,GAAAjJ,KAAIgI,MAAoBiB,EAAAA,EAAAA,GAAAjJ,KAAIgI,MAAalI,EAAQmD,OAAQ,OAC7DjD,KAAKiG,eAAenG,GACpB,IAAI,KAAEgH,GAAShH,EACf,GAAiB,MAAbgH,EAAKpK,KAAc,CACrB,GAAIoD,EAAQgH,KAAKpK,OAASsD,KAAKuI,iBAAkB,OACjDzB,EAAOA,EAAKA,IACd,CACAhB,EAAUgB,EAAMhH,EAAQuI,OAAQvI,EAAQmD,OAAO,GAEjDgG,EAAAA,EAAAA,GAAAjJ,KAAIiI,IAAOiB,iBAAiB,UAAWlJ,KAAK6I,WAC5CD,EAAAA,EAAAA,GAAA5I,KAAI8H,GAAiB/B,EACvB,CAES7G,UAAAA,GAEP,GADAa,MAAMb,aACe,MAAjBc,KAAK6I,UAA0C,OAAtBI,EAAAA,EAAAA,GAAAjJ,KAAI8H,IAC/B,MAAM,IAAI/F,EAAc,4CAE1BkH,EAAAA,EAAAA,GAAAjJ,KAAIiI,IAAOkB,oBAAoB,UAAWnJ,KAAK6I,iBACxC7I,KAAK6I,UACZI,EAAAA,EAAAA,GAAAjJ,KAAI8H,IAAAsB,KAAJpJ,OACA4I,EAAAA,EAAAA,GAAA5I,KAAI8H,QAAiB3F,EACvB,CAESiE,WAAAA,CAAYiD,GAAgB,IAAAC,EACnC,GAAoB,OAAhBL,EAAAA,EAAAA,GAAAjJ,KAAIgI,IAAkB,MAAM,IAAItC,GAAmB,sCACvD,MAAM5F,EAAgC,MAAtBE,KAAKsI,cAAwB,CAAE5L,KAAMsD,KAAKsI,cAAexB,KAAMuC,GAAQA,EACvFtJ,MAAMqG,YAAYtG,IAClBmJ,EAAAA,EAAAA,GAAAjJ,KAAIgI,IAASuB,YAAYzJ,EAAoB,QAAbwJ,EAAEtJ,KAAKqI,cAAM,IAAAiB,EAAAA,EAAI,IACnD,E,0CCnFa,MAAeE,GA6C5B,mBAAMC,CAEJ3C,EACA4C,EACAjB,GAMA,MAAM,IAAIhH,EAAoB,uBAChC,CAaA,8BAAMkI,CAEJvG,EACAqF,GASA,MAAM,IAAIhH,EAAoB,kCAChC,CAYA,kCAAMmI,CAEJxG,EACAnD,EACAwI,GAQA,MAAM,IAAIhH,EAAoB,sCAChC,CAWA,sCAAMoI,CAEJzG,EACAqF,GAQA,MAAM,IAAIhH,EAAoB,0CAChC,CAmBA,yCAAMqI,CAEJ1G,EACA2G,EACAtB,GAQA,MAAM,IAAIhH,EAAoB,6CAChC,CAuBA,oBAAMuI,CAEJC,EACAxB,GAOA,MAAM,IAAIhH,EAAoB,wBAChC,E,wECtNWyI,GAAQC,SAA2C,IAAIC,SAASC,IAC3EC,WAAWD,EAASE,EAAS,IAGlBC,GAAYA,CACvBC,EACA3G,IAG6B4G,OAAOC,YAAYD,OAAOE,QAAQH,GAAQrG,IAAIN,IAGvE+G,GAAmB,MACvB,IAEE,OADAC,GAAOC,OAAO,CAACC,WAAWC,KAAK,OACxB,CACT,CAAE,MAAOC,GACP,OAAO,CACT,CACD,EAPwB,GASZC,GAAgBN,GACzB,CAACO,EAA6BC,IAC9BP,GAAOC,OAAOK,EAAKhH,KAAKkH,GAAOR,GAAOG,KAAKK,KAAMD,GAEjDP,GAAOC,OAOJ,SAASQ,GACdtM,EACAwL,GAEA,OAAOxL,KAAOwL,CAChB,CAOO,SAASe,GAAiBC,EAAWC,GAC1C,OAAOA,EAAMC,SAASF,EACxB,CAEO,SAASG,GAAuBV,GACrC,OAAOA,aAAiBW,GAAAA,GAAkC,MAArBX,EAAMY,YACtCZ,EAAMpL,QAAQ6L,SAAS,oBAC9B,CAOO,SAASI,GAAYb,GAC1B,KAAIA,aAAiBtL,OACrB,MAAMsL,CACR,CC1DO,IAAKc,GAAQ,SAARA,GAAQ,OAARA,EAAQ,qBAARA,EAAQ,uBAARA,EAAQ,qBAARA,EAAQ,oBAARA,EAAQ,uBAARA,EAAQ,gBAARA,EAAQ,wBAARA,EAAQ,0BAARA,EAAQ,yBAARA,EAAQ,2BAARA,EAAQ,oBAARA,EAAQ,eAARA,EAAQ,sBAARA,EAAQ,oBAARA,EAAQ,sBAARA,EAAQ,uBAARA,EAAQ,uBAARA,EAAQ,kBAARA,EAAQ,mBAARA,EAAQ,mBAARA,EAAQ,aAARA,EAAQ,cAARA,EAAQ,YAARA,EAAQ,mBAARA,EAAQ,sBAARA,EAAQ,kBAARA,CAAQ,M,iDCHpBC,OAAAC,GAAAC,OAAAC,IAAAC,GAmBO,SAASC,GAAWC,GACzB,OAAO,IAAIC,IAASC,OAAOF,GAAOG,QACpC,CAKA,MAAMC,GAAc,CAClBX,GAASY,kBACTZ,GAASa,iBACTb,GAASc,mBACTd,GAASe,YACTf,GAASgB,YACThB,GAASiB,eACTjB,GAASkB,MACTlB,GAASmB,IACTnB,GAASoB,WACTpB,GAASqB,cACTrB,GAASsB,WAELC,GAAc,CAClBvB,GAASwB,aACTxB,GAASyB,eACTzB,GAAS0B,aACT1B,GAAS2B,YACT3B,GAAS4B,eACT5B,GAAS6B,QACT7B,GAAS8B,gBACT9B,GAAS+B,OACT/B,GAASgC,cACThC,GAASiC,cACTjC,GAASkC,eACTlC,GAASmC,UACTnC,GAASoC,WACTpC,GAASqC,WACTrC,GAASsC,MAMLC,GAAkB,CACtB,CAACvC,GAASwB,cAAe,GACzB,CAACxB,GAASyB,gBAAiB,GAC3B,CAACzB,GAAS0B,cAAe,GACzB,CAAC1B,GAAS2B,aAAc,GACxB,CAAC3B,GAAS4B,gBAAiB,GAC3B,CAAC5B,GAAS6B,SAAU,GACpB,CAAC7B,GAAS8B,iBAAkB,GAC5B,CAAC9B,GAAS+B,QAAS,GACnB,CAAC/B,GAASgC,eAAgB,GAC1B,CAAChC,GAASiC,eAAgB,GAC1B,CAACjC,GAASkC,gBAAiB,GAC3B,CAAClC,GAASmC,WAAY,GACtB,CAACnC,GAASoC,YAAa,GACvB,CAACpC,GAASqC,YAAa,GACvB,CAACrC,GAASkB,OAAQ,IAGpB,SAASsB,GAAkB1H,EAAkBpK,GAC3C,IAAK6O,GAAc7O,EAAM6R,IAAkB,OAC3C,MAAME,EAASF,GAAgB7R,GAC/B,GAAc,MAAV+R,GAAkB3H,EAAK5E,SAAWuM,EACtC,MAAM,IAAIzJ,GAAoB,qBAAoByJ,gBAAqB3H,EAAK5E,iBAC9E,CAEA,MAAMwM,GAAeC,GAAgCrC,GAAWA,GAAWqC,IAAUC,MAAM,EAAG,GAExFC,GAAeF,GAAgCxD,GAAc,CAACwD,EAASD,GAAYC,KAEzF,SAASG,GAAWC,GAClB,MAAMJ,EAAUI,EAAOH,MAAM,GAAI,GACjC,IAAKF,GAAYC,GAASK,OAAOD,EAAOH,OAAO,IAAK,MAAM,IAAItK,GAC9D,OAAOqK,CACT,CAEA,MAAMM,GAAS,CACbhD,OAAS8C,GAAuBF,GAAYE,GAAQpM,SAAS,UAC7DwJ,OAAS+C,GAAmBJ,GAAWhE,GAAOG,KAAKiE,EAAQ,YAGvDC,GAAS,CACblD,OAAS8C,GAAuB7C,GAAW2C,GAAYE,IACvD5C,OAAS+C,GAAmBJ,GAAWhE,GAAOG,KAAKmB,GAAW8C,MAG1DE,GAAaC,IACjB,MAAMC,EAAa3C,GAAYzF,MAAMqI,GAAMA,IAAMF,IACjD,GAAkB,MAAdC,EAAoB,MAAO,CAACA,EAAYL,IAC5C,MAAMO,EAAajC,GAAYrG,MAAMqI,GAAMA,IAAMF,IACjD,GAAkB,MAAdG,EAAoB,MAAO,CAACA,EAAYL,IAC5C,MAAM,IAAIxO,EAAc,SAAW,UAAS,IAAI4M,MAAgBZ,IAAarL,KAAK,QAAS+N,EAAU,EAShG,SAASlD,GAAOrF,GACrB,MAAOvE,EAAQkN,EAAgBC,GAAS5I,EAAK6I,MAAM,KACnD,GAAsB,MAAlBF,EAAwB,MAAM,IAAI1K,GAAa,mCAAkC+B,KACrF,GAAa,MAAT4I,EAAe,MAAM,IAAI3K,GAAa,oCAAmC+B,KAC7E,MAAOpK,EAAMkT,GAAWR,GAAU7M,GAC5BoM,EAAUiB,EAAQzD,OAAOsD,GAE/B,OADAjB,GAAkBG,EAASjS,GACpBiS,CACT,CAQO,SAAS1C,GACdnF,EACApK,GAEA,MAAO,CAAEkT,GAAWR,GAAU1S,GAE9B,OADA8R,GAAkB1H,EAAMpK,GAChB,GAAEA,KAAQkT,EAAQ3D,OAAOnF,IACnC,C,qBC7I6C+I,QAAAA,IAAAC,IACa7D,OAAA8D,IAAAC,GA6BnD,SAASC,GAAeC,GAAyD,QAAAC,EAAAlO,UAAAC,OAAhCkO,EAAS,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAATF,EAASE,EAAA,GAAArO,UAAAqO,GACtC,IAArBF,EAAUlO,SAAckO,EAAY,CAACpE,GAASkC,iBAClD,IACE/B,GAAO+D,GACP,MAAMK,EAAWL,EAAaP,MAAM,KAAK,GACzC,IAAKnE,GAAc+E,EAAUH,GAC3B,MAAM,IAAIzP,EACR,sBACAyP,EAAUlO,OAAS,EAAK,UAASkO,EAAU9O,KAAK,QAAU8O,EAAU,GACpEG,GAGJ,OAAO,CACT,CAAE,MAAOrF,GACP,OAAO,CACT,CACF,CAMO,SAASsF,KACd,MAAOC,GAAU,IAAIC,eAAeC,GAAAA,YAAiB,GAAG5B,QACxD,OAAO6B,OAAOH,EAASI,OAAOD,OAAOE,kBACvC,CAmBO,SAASC,GAAKxE,GACnB,OAAOzB,GAAOG,KAAK4E,GAAQtD,OAAOpK,EAAW,IAC/C,CA0BO,SAAS6O,GAA0BC,GACxC,OAAON,GAAAA,KAAUO,QAAQC,cAAcF,EACzC,CAWO,SAASG,KAGd,IAH8BC,EAAGpP,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAIjC,MAAMiP,EAAUP,GAAAA,KAAUO,UACpBI,EAAexG,GAAOG,KAAKiG,EAAQK,WACnCC,EAAe1G,GAAOG,KAAKiG,EAAQO,WAEzC,OAAIJ,EACK,CACLE,UAAWD,EACXG,UAAWD,GAGR,CACLD,UAAWtF,GAAOqF,EAActF,GAASkC,gBACzCuD,UAAWD,EAAa7O,SAAS,OAErC,CAUO,SAAS+O,GAAK5K,EAA2B6K,GAC9C,OAAOhB,GAAAA,KAAUiB,SAAS9G,GAAOG,KAAKnE,GAAOgE,GAAOG,KAAK0G,GAC3D,CASO,SAASE,GACd/K,EACAgL,EACA3T,GAEA,OAAOwS,GAAAA,KAAUiB,SAASC,OAAO/K,EAAMgL,EAAW3F,GAAOhO,GAC3D,CAEA,MAAM4T,GAAgBjH,GAAOG,KAAK,8BAA+B,QACpD+G,GAAsBjC,GAAcgC,GAAc7P,QAGxD,SAAS+P,GAAcnS,GAC5B,MAAMuJ,EAAMyB,GAAOG,KAAKnL,EAAS,QACjC,OAAOiR,GAAK5F,GAAc,CAAC6G,GAAqBD,GAAehC,GAAc1G,EAAInH,QAASmH,IAC5F,C,4BC5KkF,mBAAA6I,GAAA,yBAAAC,IAAAC,GAS3E,SAASC,GAASvL,GAAuB,IAAAwL,EAC9C,OAAOvB,GAAuB,QAAnBuB,EAACC,GAAazL,UAAK,IAAAwL,EAAAA,EAAI,GACpC,CA4BO,SAASE,GAAWC,GACzB,MAAMC,EAAY,CAChBC,OAAQ,CAAC,CACP1S,KAAM,OACNvD,KAAM,CAAEkW,OAAQ,CAAC,YAChB,CACD3S,KAAM,UACNvD,KAAM,CAAEkW,OAAQ,CAAC,SAChB,CACD3S,KAAM,YACNvD,KAAM,CAAEkW,OAAQ,CAAC,YAChB,CACD3S,KAAM,kBACNvD,KAAM,CAAEkW,OAAQ,CAAC,uBAGfC,GAAa,IAAIX,IAAeY,YAAYJ,EAAW,CAAC,GACxDK,GAAY,IAAIZ,IAA2Ba,eAAeP,EAAQI,GACxE,OAAO9B,GAAK5E,GAAO4G,GACrB,CAEO,SAASE,GACdnM,EACA4C,EACA+I,GAEA,OAAO1B,GAAK5F,GAAc,CACxB6G,GAAqB,IAAIhH,WAAW,CAAC,IAAKwH,GAAWC,GAASJ,GAAS3I,GAAMqH,GAAK5E,GAAOrF,MAE7F,C,gBCjEO,MAAMoM,GAAmB,IAGnBC,GAAgB,IAEhBC,GAAsB,KAKtBC,GAAsB,GAItBC,GAAkB9I,GAAU,CACvC,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,GAAI,MACJ,GAAI,MACJ,GAAI,MACJ,GAAI,MACJ,GAAI,MACJ,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,QACH,EAAG,QACH,EAAG,QACH,EAAG,UACFnG,IAAA,IAAEpF,EAAKR,GAAM4F,EAAA,MAAK,CAACpF,EAAK,IAAIsU,GAAAA,EAAU9U,GAAO+U,MAAMJ,IAAqB,IAEpE,IAAKK,GAAwB,SAAxBA,GAAwB,OAAxBA,EAAAA,EAAwB,kBAAxBA,EAAAA,EAAwB,oBAAxBA,CAAwB,MASxBC,GAAS,SAATA,GAAS,OAATA,EAAAA,EAAS,kBAATA,EAAAA,EAAS,sBAATA,EAAAA,EAAS,4DAATA,EAAAA,EAAS,4DAATA,EAAAA,EAAS,kBAATA,EAAAA,EAAS,sDAATA,EAAAA,EAAS,oBAATA,EAAAA,EAAS,oBAATA,CAAS,MAeTC,GAAU,SAAVA,GAAU,OAAVA,EAAAA,EAAU,oBAAVA,EAAAA,EAAU,sBAAVA,EAAAA,EAAU,kBAAVA,CAAU,MAaVC,GAAG,SAAHA,GAAG,OAAHA,EAAAA,EAAG,yBAAHA,EAAAA,EAAG,2BAAHA,EAAAA,EAAG,yBAAHA,EAAAA,EAAG,uBAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,qCAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,mBAAHA,EAAAA,EAAG,iCAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,mCAAHA,EAAAA,EAAG,mCAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,2BAAHA,EAAAA,EAAG,mCAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,yCAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,6CAAHA,EAAAA,EAAG,wDAAHA,EAAAA,EAAG,mDAAHA,EAAAA,EAAG,+CAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,yCAAHA,EAAAA,EAAG,6CAAHA,EAAAA,EAAG,sEAAHA,EAAAA,EAAG,oEAAHA,EAAAA,EAAG,sEAAHA,EAAAA,EAAG,kFAAHA,EAAAA,EAAG,8EAAHA,EAAAA,EAAG,4DAAHA,EAAAA,EAAG,yBAAHA,EAAAA,EAAG,qDAAHA,EAAAA,EAAG,2BAAHA,EAAAA,EAAG,+BAAHA,EAAAA,EAAG,qBAAHA,EAAAA,EAAG,+BAAHA,EAAAA,EAAG,wCAAHA,EAAAA,EAAG,gCAAHA,EAAAA,EAAG,sCAAHA,EAAAA,EAAG,4CAAHA,EAAAA,EAAG,oCAAHA,EAAAA,EAAG,sCAAHA,EAAAA,EAAG,+BAAHA,EAAAA,EAAG,2BAAHA,EAAAA,EAAG,iCAAHA,EAAAA,EAAG,4CAAHA,CAAG,M,oBCjFA,SAASC,GAAmC1O,GAazD,MAAO,CACL2O,SAAAA,CAAUC,EAAQ1P,GAAe,IAAb,QAAE2P,GAAS3P,EAC7B,OAAI4P,YAAYC,OAAOH,GAAkBjJ,GAAOG,KAAK8I,GAC7B,kBAAbA,GAAyBA,EAASI,WAAW,OAC/ChI,GAAO4H,GAET5H,GAAO6H,EAAQ,IAAKD,KAAoB,MAAP5O,GAAe,CAAEA,SAC3D,EAEA4B,WAAAA,CAAYqN,EAAGC,GAAgB,IAAd,SAAEC,GAAUD,EAC3B,MAAME,EAAKD,EAASrI,GAAOmI,EAAKpI,GAASe,cACzC,GAAW,MAAP5H,GAAeoP,EAAGpP,MAAQA,EAAK,MAAM,IAAIxE,EAAc,MAAOiT,GAAIzO,GAAMyO,GAAIW,EAAGpP,MACnF,OAAOoP,CACT,EAEJ,CCnCe,SAASC,GACtBC,GAQA,MAAO,CACLX,SAAAA,CAAUY,EAAOC,GACf,OAAOD,EAAMtQ,KAAKqH,GAASgJ,EAAYX,UAAUrI,EAAMkJ,IACzD,EAEA5N,WAAAA,CAAY6N,EAASD,GACnB,OAAOC,EAAQxQ,KAAK2K,GAAW0F,EAAY1N,YAAYgI,EAAQ4F,IACjE,EAEJ,CCZe,SAASE,GAA+CtE,EAAapL,GAalF,MAAO,CACL2O,SAAAA,CAAUrJ,EAAMpG,GAAe,IAAb,QAAE2P,GAAS3P,EAC3B,OAAO8H,GAAO6H,EAAQ,CACpB7O,IAAKyO,GAAIkB,MACTC,OAAQrK,OAAOE,QAAQH,GAAQrG,KAAIiQ,IAAA,IAAEpV,EAAKR,GAAM4V,EAAA,MAAM,CACpDlP,IAAKyO,GAAIoB,WACT/V,IAAKkN,GAAOlN,GACZR,MAAO0N,GAAO6H,EAAQ,IAAKvV,EAAc0G,SAC1C,MAEL,EAEA4B,WAAAA,CAAYgI,EAAMkG,GAAgB,IAAd,SAAEX,GAAUW,EAC9B,MAAM,OAAEF,GAAWT,EAASrI,GAAO8C,EAAQ/C,GAASe,aAAc6G,GAAIkB,OACtE,OAAOpK,OAAOC,YAAYoK,EAEvBG,QAAOC,IAAA,IAAC,IAAElW,GAAKkW,EAAA,OAAK5E,IAAavE,GAAS8B,iBAAkC,KAAf7O,EAAIiD,MAAa,IAC9EkC,KAAIgR,IAAA,IAAC,IAAEnW,EAAG,MAAER,GAAO2W,EAAA,MAAK,CACvBnJ,GAAOhN,EAAKsR,GACZ+D,EAASrI,GAAOxN,EAAOuN,GAASe,aAAc5H,GAC/C,IACL,EAEAkQ,eAAe,EAEnB,CC5Ce,SAASC,GACtBC,EACAC,GAQA,MAAO,IACFA,EAEH1B,SAAAA,CAAUrV,EAAOkW,GACf,OAAOa,EAAM1B,UAAe,OAALrV,QAAK,IAALA,EAAAA,EAAS8W,EAAcZ,EAChD,EAEJ,C,+CCPO,SAASc,GAAQC,GAA+D,IAArBC,EAAG1T,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAKnE,GAAW,MAAPyT,EAAa,OAAO5K,GAAOG,KAAK,IACpC,GAAI2F,OAAOgF,UAAUF,IAAQnC,GAAAA,EAAUsC,YAAYH,IAAQC,EAAK,CAE9D,GADKpC,GAAAA,EAAUsC,YAAYH,KAAMA,EAAM,IAAInC,GAAAA,EAAUmC,KAChDA,EAAIE,YAAa,MAAM,IAAIrU,EAAW,iCAAgCmU,EAAII,aAC/E,IAAIC,EAAYL,EAAI/S,SAAS,IAE7B,OADIoT,EAAU7T,OAAS,IAAM,IAAG6T,EAAa,IAAGA,KACzCjL,GAAOG,KAAK8K,EAAW,MAChC,CACA,GAAmB,kBAARL,EACT,OAAO5K,GAAOG,KAAKyK,GAErB,MAAM,IAAI1U,CACZ,C,oBCCO,SAASgV,GACdC,EACAC,GAEA,MAAMC,EAAkBrL,GAAOG,KAAK,IAAIkB,GAAO8J,MAAaR,GAAQS,KAC9DE,EAAUrF,GAAKoF,GACrB,OAAOlK,GAAOmK,EAASpK,GAAS8B,gBAClC,CAUO,SAAS/D,GACdsM,EACAH,EACAI,GAEA,SAASC,EAAOb,GACd,MAAMc,EAAUf,GAAQC,GAAK,GAC7B,OAAOvK,GAAc,CAACL,GAAO2L,MAAM,GAAKD,EAAQtU,QAASsU,GAC3D,CAEA,MAAMJ,EAAUrF,GACdjG,GAAOG,KAAK,IAAIkB,GAAOkK,MAAcE,EAAOL,MAAW/J,GAAOmK,MAEhE,OAAOrK,GAAOmK,EAASpK,GAASiC,cAClC,CAEA,MAAMyI,GAAc,SAEb,SAASC,GAAeC,GAC7B,MAAO3W,EAAM4W,KAAWC,GAASF,EAAUjH,MAAM,KACjD,GAAqB,IAAjBmH,EAAM5U,OAAc,MAAM,IAAIvB,EAAc,YAAa,yBAA0BiW,GACvF,GAAIC,IAAWH,GAAY9H,MAAM,GAC/B,MAAM,IAAIjO,EAAc,YAAc,iBAAgB+V,KAAeE,GAEvE,GAAI,0BAA0BG,KAAK9W,GACjC,MAAM,IAAIU,EAAc,YAAa,uBAAwBiW,GAE/D,IAAII,EACJ,IACE,MAAMC,EAAI,IAAIC,IAAK,UAASjX,KAAQ4W,KACpC,GAAII,EAAEE,SAAWF,EAAEG,SAAWH,EAAEI,KAAOJ,EAAEK,OAASL,EAAElG,OAAS,IAAqB,MAAfkG,EAAEM,SACnE,MAAM,IAAI5W,EAAc,YAAa,QAASiW,GAEhDI,EAAWC,EAAEO,IACf,CAAE,MAAOtM,GACP,GAAIA,aAAiB3J,WAAa2J,EAAMpL,QAAQ6L,SAAS,eACvD,MAAM,IAAIhL,EAAc,YAAa,QAASiW,GAEhD,MAAM1L,CACR,CACA,IAAK,iBAAiB6L,KAAKC,GACzB,MAAM,IAAIrW,EAAc,YAAa,wBAAyBiW,GAEhE,GAAII,EAAS9U,OAAS,GAAKwU,GAAYxU,OACrC,MAAM,IAAIvB,EAAc,YAAa,eAAgBiW,GAEvD,OAAOI,CACT,CAQO,SAASS,GAAcxX,GAC5B,OAAOgM,GAAO8E,GAAK4F,GAAe1W,IAAQ+L,GAASsC,KACrD,CAUO,SAASoJ,GACdzX,GAEoB,IADpB0X,EAAY1V,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGuO,KAEf,OAAOvE,GACL8E,GAAK5F,GAAc,CACjBL,GAAOG,KAAK0L,GAAe1W,IAC3B6K,GAAOG,KAAK0M,EAAKhV,SAAS,IAAIiV,SAAS,GAAI,KAAM,UAEnD5L,GAASoC,WAEb,CAQO,SAASyJ,KAA+C,IAAvCzD,EAAWnS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG6I,GAAOG,KAAK,IAChD,OAAO,IAAIsI,GAAAA,EAAUzI,GAAOG,KAAKmJ,GAAKzR,SAAS,OAAQ,IAAIA,SAAS,GACtE,CAOO,SAASmV,GAAWlB,GACzBD,GAAeC,EACjB,CAQO,SAASmB,GAAYnB,GAC1B,IAEE,OADAkB,GAAWlB,IACJ,CACT,CAAE,MAAO1L,GACP,OAAO,CACT,CACF,CAGGc,GAASkC,eACTlC,GAASgC,cACThC,GAAS8B,gBACT9B,GAAS6B,QA4BL,SAASmK,GAAkB/X,GAChC,MAAMgY,EAAatB,GAAe1W,GAAMiC,OAASwU,GAAYxU,OAC7D,OAAOoR,GAAgB4E,KAAKC,IAAIF,EAAY5E,IAC9C,CA8CO,SAAS+E,GAAcnY,GAC5B,OAAO0W,GAAe1W,GAAMiC,OAAS,GAAKwU,GAAYxU,MACxD,CC7OA,QACE4R,SAAAA,CAAUrV,GACR,GAAImS,OAAOnS,GAAS,EAAG,MAAM,IAAIkC,EAAc,QAAS,wBAAyBlC,GACjF,OAAOgX,GAAQhX,GAAO,EACxB,EAEAsI,WAAAA,CAAYtI,GACV,OAAOoZ,GAAQpZ,EACjB,GCXF,IACEqV,SAAAA,CAAUrV,GACR,OAAO4Z,GAAKvE,UAAUrV,EACxB,EAEAsI,WAAAA,CAAYtI,GACV,OAAQ4Z,GAAKtR,YAAYtI,EAC3B,GCTa,SAAS6Z,GACtBC,EACA/C,GAQA,MAAO,IACFA,EAEH1B,SAAAA,CAAUrV,EAAOkW,EAAQlM,GACvB,OAAO+M,EAAM1B,UAAUyE,EAAO9Z,GAAQkW,EAAQlM,EAChD,EAEJ,CCde,SAAS+P,GAEtBC,EAAmBC,GAMnB,MAAO,CACL5E,SAAAA,CAAUrV,GACR,KAAkB,IAAbia,GAA8B,MAATja,IAAkBA,IAAUga,EACpD,MAAM,IAAI9X,EAAc,iBAAkB8X,EAAYha,GAExD,OAAOka,GAAU7E,UAAU2E,EAC7B,EAEA1R,WAAAA,CAAYqN,GACV,MAAM3V,EAAQka,GAAU5R,YAAYqN,GACpC,GAAI3V,IAAUga,EAAY,MAAM,IAAI9X,EAAc,iBAAkB8X,EAAYha,GAChF,OAAOga,CACT,EAEAA,aAEAG,oBAAiC,IAAbF,EAExB,C,oBChBaG,GAAkB,CAC7B7M,GAASkC,eACTlC,GAASsC,KACTtC,GAASoC,WACTpC,GAASgC,cACThC,GAAS8B,gBACT9B,GAAS6B,SAKI,SAASiL,KAKpB,QAAA3I,EAAAlO,UAAAC,OAJCkO,EAAS,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAATF,EAASE,GAAArO,UAAAqO,GAKZ,MAAO,CAMLwD,SAAAA,CAAUiF,GACR,MAAMC,EAAMD,EAAOnK,MAAM,EAAG,GAC5B,IAAKpD,GAAcwN,EAAKH,IAAkB,MAAM,IAAIxT,GAAiB2T,GACrE,IAAKxN,GAAcwN,EAAK5I,GACtB,MAAM,IAAIzP,EAAc,mBAAoByP,EAAU9O,KAAK,MAAO0X,GAEpE,MAAMC,EAAQJ,GAAgBK,QAAQF,GAAO,EAC7C,OAAOlO,GAAOG,KAAK,IAAIwK,GAAQwD,MAAW9M,GAAO4M,IACnD,EAOAhS,WAAAA,CAAYqN,GACV,MAAM6E,EAAQnO,GAAOG,KAAKmJ,GAAK+E,WAAW,EAAG,GACvCH,EAAMH,GAAgBI,EAAQ,GACpC,GAAW,MAAPD,EAAa,MAAM,IAAI9T,GAAoB+T,GAC/C,IAAKzN,GAAcwN,EAAK5I,GACtB,MAAM,IAAIzP,EAAc,mBAAoByP,EAAU9O,KAAK,MAAO0X,GAEpE,OAAO/M,GAAOmI,EAAIgF,SAAS,GAAIJ,EACjC,EAEJ,C,oBCxDe,SAASK,GACtB9I,EACAmI,GAMA,MAAO,CACL5E,SAAAA,CAAUwF,GACR,GAAmB,MAAfA,EAAqB,CACvB,IAAiB,IAAbZ,EAAmB,OAAO5N,GAAOG,KAAK,IAC1C,MAAM,IAAItK,EAAc,eAAgB,WAAY2Y,EACtD,CACA,OAAOnN,GAAOmN,EAChB,EAEAvS,WAAAA,CAAYgI,GACV,OAAO9C,GAAO8C,EAAQwB,EACxB,EAEJ,C,oBC1BA,QACEuD,SAAAA,CAAU/E,GACR,OAAOjE,GAAOG,KAAK8D,EACrB,EAEAhI,WAAAA,CAAYgI,GACV,OAAOA,CACT,GCEK,MAAM8G,GAAe0D,GACJ,kBAAXA,GACJ,CAAC,SAAU,SAAU,UAAU5N,gBAAgB4N,MAE/CC,MAAMD,IAAqB3I,OAAOgF,UAAU2D,IAAWhG,GAAAA,EAAUsC,YAAY0D,ICT/E,IAAKE,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,WAAjBA,EAAiB,oBAAjBA,EAAiB,sBAAjBA,EAAiB,oBAAjBA,EAAiB,oBAAjBA,EAAiB,sBAAjBA,EAAiB,mBAAjBA,CAAiB,MAa7B,MAAMC,GAAyB,CAC7B,CAACD,GAAkBE,IAAK,EACxB,CAACF,GAAkBG,UAAW,EAC9B,CAACH,GAAkBI,WAAY,EAC/B,CAACJ,GAAkBK,UAAW,EAC9B,CAACL,GAAkBM,UAAW,GAC9B,CAACN,GAAkBO,WAAY,GAC/B,CAACP,GAAkBQ,SAAU,IAWlBC,GAAeA,CAC1Bzb,EAA2C4F,KAGhC,IAFX,aAAE8V,EAAeV,GAAkBQ,OAAM,mBAAEG,EAAqBX,GAAkBQ,QACN5V,EAE5E,IAAKwR,GAAYpX,GAAQ,MAAM,IAAIkC,EAAc,QAAS,WAAYlC,GAEtE,OAAO,IAAI8U,GAAAA,EAA2B,kBAAV9U,EAAqBA,EAAMkE,WAAalE,GACjE4b,UAAUX,GAAuBS,GAAgBT,GAAuBU,IACxEtE,SAAS,ECxCd,WACKuC,GAGHiC,eAAAA,CAAgB7b,EAA2BkW,GACzC,OAAY,OAALlW,QAAK,IAALA,EAAAA,EAAS,GAClB,EAEAqV,SAAAA,CACErV,EACAkW,EAAUtQ,GAEF,IADR,aAAE8V,EAAeV,GAAkBQ,QAA8C5V,EAEjF,OAAOgU,GAAKvE,UACV9T,KAAKsa,gBACM,MAAT7b,EAAgByb,GAAazb,EAAO,CAAE0b,iBAAkB1b,EACxDkW,GAGN,GCfF,MAAM4F,GAAW,KACXC,GAAe,GACfC,GAAqB,EAYrBC,GAAmBC,IAA2B,IAAAC,EAClD,MAAMC,EAAa,CACjB,CAACjH,GAAIkH,wBAAyB,GAC9B,CAAClH,GAAImH,mBAAoB,EACzB,CAACnH,GAAIoH,mCAAoC,EACzC,CAACpH,GAAIqH,qCAAsC,EAC3C,CAACrH,GAAIsH,8BAA+B,EACpC,CAACtH,GAAIuH,+BAAgC,EACrC,CAACvH,GAAIwH,+BAAgC,EACrC,CAACxH,GAAIyH,kBAAmB,EACxB,CAACzH,GAAI0H,gBAAiB,GACtB,CAAC1H,GAAI2H,YAAa,EAClB,CAAC3H,GAAI4H,UAAW,EAChB,CAAC5H,GAAI6H,aAAc,IAEfC,EAAsD,QAAhDd,EAAGC,EAAWF,UAAkC,IAAAC,EAAAA,EAAI,EAChE,OAAO,IAAIrH,GAAAA,EAAUmI,EAASnB,GAAS,EAkBnCoB,GAAmBA,CACvBhB,EACAiB,EAAcvX,KAEA,IADd,YAAEwX,EAAW,YAAEC,GAA2DzX,EAE1E,OAAQsW,GACN,KAAK/G,GAAImI,iBACT,KAAKnI,GAAIoI,eACT,KAAKpI,GAAIqI,cACT,KAAKrI,GAAIsI,iBACP,OAAO,IAAI3I,GAAAA,EAAUqI,GAClBpI,MAAMgH,IACN2B,KACCjE,KAAKkE,KAAM,KAAQP,EAAe3D,KAAKmE,MAAO,OAAiB5B,MAErE,KAAK7G,GAAI4H,SACT,KAAK5H,GAAI6H,YACP,OAAO,IAAIlI,GAAAA,EAAUqI,GAAQU,MAAMR,GAAatI,MAAMgH,IACxD,QACE,OAAO,IAAIjH,GAAAA,EAAUqI,GAAQpI,MAAMgH,IACvC,EAGF,SAAS+B,GAAqB5H,GAC5B,MAAM6H,EAAU,CACd,CAAC5I,GAAImI,kBAAmB,iBACxB,CAACnI,GAAIoI,gBAAiB,iBACtB,CAACpI,GAAIqI,eAAgB,gBACrB,CAACrI,GAAIsI,kBAAmB,qBAGpB,IAAE/W,GAAQwP,EAChB,OAAKpJ,GAAcpG,EAAKqX,GACjB7H,EAAO6H,EAAQrX,IADmB,CAE3C,CAKO,SAASsX,GACdC,EACApI,EACAN,GAEA,MAAM,OAAE9R,GAAWiK,GAAOuQ,GACpBC,EAAWrI,EAASoI,GAE1B,IAAIZ,EAAc,EAKlB,OAJIa,EAASxX,MAAQyO,GAAI4H,UAAYmB,EAASxX,MAAQyO,GAAI6H,cACxDK,EAAc3P,GAAO6H,EAAQ2I,EAASpI,GAAGqI,YAAY1a,QAGhDwY,GAAgBiC,EAASxX,KAC7BgX,KAAKR,GAAiBgB,EAASxX,IAAKjD,EAAQ,CAC3C2Z,YAAaU,GAAqBI,GAAWb,iBAE9CtI,MAAML,GACX,CAOA,SAAS0J,GACPC,EACAxI,EACAN,GAEA,IACI+I,EADAC,EAAM,IAAIzJ,GAAAA,EAAU,GAExB,GACEwJ,EAAcC,EACdA,EAAMP,GAASK,EAAUE,GAAM1I,EAAUN,UACjCgJ,EAAIC,GAAGF,IACjB,OAAOC,CACT,CAEA,WACKE,GAEH5C,eAAAA,CACE6C,EAA0B9I,GAUlB,IATR,UACEyI,EAAS,SAAExI,EAAQ,QAAEN,EAAO,iBAAEoJ,EAAgB,eAAEC,GAOjDhJ,EAED,GAAwB,MAApB+I,EAA0B,OAAOA,EAAiBtH,UACtD,MAAMwH,EAAST,IACZG,GAAQF,EAAU,CAAEM,iBAAkBJ,KACvC1I,EACAN,GAEIvV,EAAQ,IAAI8U,GAAAA,EAAgB,OAAN4J,QAAM,IAANA,EAAAA,EAAUG,GACtC,GAAIA,EAAOC,GAAG9e,GAAQ,CACpB,IAAuB,IAAnB4e,EAAyB,OAAOC,EAAOxH,UAC3C,MAAM,IAAI/U,EAAsB,OAAMtC,EAAMkE,kCAAkC2a,IAChF,CACA,OAAO7e,EAAMqX,SACf,GC7JF,OACK6C,GAEH7E,SAAAA,CAAUrV,GACR,OAAOka,GAAU7E,UAAe,OAALrV,QAAK,IAALA,EAAAA,EAAS,EACtC,EAEA,aAAM+e,CACJ/e,EACAkW,EACAtQ,GAEA,IADA,OAAEoZ,EAAM,YAAEC,GAAuDrZ,EAEjE,IAAoB,IAAhBqZ,GAAkC,IAAVjf,GAAwB,MAATA,EAAe,CACxD,GAAc,MAAVgf,EAAgB,MAAM,IAAI9c,EAAc,SAAU,WAAY8c,GAClEhf,UAAgBgf,EAAOE,sBAAsBzc,MAC/C,CACA,OAAOzC,CACT,GChBa,SAASmf,GAAwCC,GAY9D,MAAO,IACFlF,GAEH,aAAM6E,CAAQ/e,EAAOkW,EAAQlM,GAC3B,GAAa,MAAThK,EAAe,OAAOA,EAC1B,MAAM,OAAEgf,EAAM,SAAEK,GAAarV,EACvB4N,EAAW5N,EAAQoV,GACnBhd,EAAc,wCACpB,GAAc,MAAV4c,EAAgB,MAAM,IAAI9c,EAAc,SAAUE,EAAa4c,GACnE,GAAgB,MAAZpH,EAAkB,MAAM,IAAI1V,EAAc,WAAYE,EAAawV,GACvE,aACQoH,EAAOM,oBAAoB1H,EAAS2H,QAAQ,OAAQ,OAAQ,CAAEF,aACjEG,OAAO/S,IACN,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAEgT,UAAW,EAAG,KAE3BA,SACJ,EAEAL,YAEJ,CCjCA,MAAMM,GAAahgB,MAAW0a,IAO9B,QAOE/E,SAAAA,CAAUsK,GACR,GAAIA,EAASlc,OAAS,GACpB,MAAM,IAAInB,EAAsB,qCAAoCqd,EAASlc,kBAG/E,OAAOkc,EAASha,KACbia,GAAY,CAAC5I,GAAQ4I,EAAQpf,KAAMkf,GAAWrK,UAAUuK,EAAQ5hB,MAErE,EAOAsK,WAAAA,CAAYqX,GACV,OAAOA,EAASha,KACdC,IAAA,IAAEpF,EAAKxC,GAAG4H,EAAA,MAAM,CAAEpF,IAAKA,EAAI0D,WAAYlG,GAAI0hB,GAAWpX,YAAYtK,GAAK,GAE3E,G,oBCvCF,QACEqX,SAAAA,CAAUrV,GACR,OAAOqM,GAAOG,KAAKxM,EACrB,EAEAsI,WAAAA,CAAYtI,GACV,OAAOA,EAAMkE,UACf,GCJF,IAIEmR,SAAAA,CAAUrV,GACR,OAAO+W,GAAM1B,UAAUrV,EACzB,EAKAsI,WAAAA,CAAYtI,GACV,OAAO+W,GAAMzO,YAAYtI,EAC3B,GCVF,OACKye,GAEH5C,eAAAA,CACE6C,EACAmB,GAEA,MAAM5b,EAAasV,GAAkBsG,EAASre,MACxCxB,EAAQ,IAAI8U,GAAAA,EAAgB,OAAN4J,QAAM,IAANA,EAAAA,EAAUza,GACtC,GAAIA,EAAW6a,GAAG9e,GAAQ,MAAM,IAAI+D,EAAyB/D,EAAOiE,GACpE,OAAOjE,EAAMqX,SACf,EAOAhC,SAAAA,CACErV,EACA6f,EACAC,GAEA,OAAOrB,GAAWpJ,UAAU1K,KAAKpJ,KAAMvB,EAAO6f,EAAUC,EAC1D,GCzBF,MAAMC,GAAcrgB,GAAQ6N,GAASsC,MAErC,WACKkQ,GAKH1K,SAAAA,CAAUrV,GACR,OAAO+f,GAAY1K,UAAUiE,GAAYtZ,GAASgZ,GAAchZ,GAASA,EAC3E,G,oBCNIggB,GAAS3T,GAAOG,KAAK,CAAC,IACtByT,GAAW5T,GAAOG,KAAK,CAAC,IACxB0T,GAAkB,KAClBR,GAAahgB,MAAW0a,IAO9B,QAOE/E,SAAAA,CAAUsK,GACR,GAAIA,EAASlc,OAAS,GACpB,MAAM,IAAInB,EAAsB,qCAAoCqd,EAASlc,kBAE/E,OAAOkc,EAASha,KAAIC,IAAiB,IAC/BsK,GADe,IAAE1P,EAAG,GAAExC,GAAI4H,EAG9B,GADI4L,GAAexT,KAAOoc,MAAkBlK,EAAU,CAAC8P,GAAQN,GAAWrK,UAAUrX,KAChFwT,GAAexT,EAAIuP,GAASsB,WAAY,CAC1C,MAAMxG,EAAOqF,GAAO1P,GACpB,GAAIqK,EAAK5E,OAASyc,GAChB,MAAM,IAAIhe,EAAc,cAAgB,gBAAege,GAAkB,UAAY,GAAE7X,EAAK5E,gBAE9FyM,EAAU,CAAC+P,GAAU5X,EACvB,CACA,GAAe,MAAX6H,EAAiB,MAAM,IAAI5J,GAAa,+BAA8BtI,KAC1E,MAAO,CAACgZ,GAAQxW,GAAM6L,GAAOC,OAAO4D,GAAS,GAEjD,EAOA5H,WAAAA,CAAYqX,GACV,OAAOA,EAASha,KAAIiQ,IAAiB,IAAfuK,EAAMC,GAAIxK,EAC9B,MAAMlP,EAAM0Z,EAAIzF,SAAS,EAAG,GACtBzK,EAAUkQ,EAAIzF,SAAS,GAC7B,IAAI3c,EAGJ,GAFI0I,EAAI6J,OAAOyP,MAAShiB,EAAK0hB,GAAWpX,YAAY4H,IAChDxJ,EAAI6J,OAAO0P,MAAWjiB,EAAKwP,GAAO0C,EAAS3C,GAASsB,YAC9C,MAAN7Q,EAAY,MAAM,IAAIsI,GAAa,6BAA4BI,KACnE,MAAO,CAAElG,IAAK2f,EAAKjc,WAAYlG,KAAI,GAEvC,G,oBCrDWqiB,GAAkB,CAC7B,CAACrL,GAAyBsL,MAAO,CAC/B,kBAAmB,CACjBC,UAAW,CAACtL,GAAUuL,OAAQC,WAAY,CAACvL,GAAWwL,OAExD,gBAAiB,CACfH,UAAW,GAAIE,WAAY,CAACvL,GAAWwL,KAAMxL,GAAWyL,SAE1D,cAAe,CACbJ,UAAW,GAAIE,WAAY,CAACvL,GAAW0L,MAAO1L,GAAWwL,QAG7D,CAAC1L,GAAyB6L,OAAQ,CAChC,kBAAmB,CACjBN,UAAW,CAACtL,GAAU6L,OAAQL,WAAY,CAACvL,GAAWwL,OAExD,gBAAiB,CACfH,UAAW,GAAIE,WAAY,CAACvL,GAAWwL,OAEzC,cAAe,CACbH,UAAW,GAAIE,WAAY,CAACvL,GAAW0L,MAAO1L,GAAWwL,SAUxD,SAASK,GACdC,EACA/iB,GACW,IAAAgjB,EACX,MAAMC,EAAWb,GAAgBW,GAAiB/iB,GAClD,MAAO,CACLsiB,UAAgC,QAAvBU,EAAEC,EAASX,UAAU,UAAE,IAAAU,EAAAA,EAAIhM,GAAUuL,MAC9CC,WAAYS,EAAST,WAAW,GAEpC,CAEA,QACEpL,SAAAA,CACErV,EACAkW,EAAUtQ,GAGF,IAAA8Y,EAAA,IAFR,yBAAEyC,EAA2BnM,GAAyBsL,MACC1a,EAIvD,OAFK,QAAL8Y,EAAA1e,SAAK,IAAA0e,IAAL1e,EAAU+gB,GAAmBI,EAA0B,oBAEhD9U,GAAOG,KAAK,CAACxM,EAAMugB,UAAW,EAAGvgB,EAAMygB,YAChD,EAEA,aAAM1B,CACJ/e,EACAkW,EAEAlM,GAEA,OAAa,MAAThK,EAAsBA,EACc,MAApCgK,EAAQmX,0BACyC,IAAjDlV,OAAOmV,KAAKpM,IAA0BvR,QACpB,MAAlBuG,EAAQgV,OACH+B,UACE/W,EAAQgV,OAAOqC,eAAeF,yBACrC,wBALJ,CASF,EAEA7Y,WAAAA,CAAYgI,GACV,MAAOgR,EAAG,CAAGC,GAAOjR,EACpB,MAAO,CAAEiQ,WAAYe,EAAIb,YAAac,EACxC,G,oBCjFF,QACElM,SAAAA,CAAUrV,GACR,OAAOqM,GAAOG,KAAK,CAACxM,EAAQ,EAAI,GAClC,EAEAsI,WAAAA,CAAYgI,GACV,OAAqB,IAAdA,EAAO,EAChB,GCDF,SAASkR,GACPC,EACApD,EACAxI,EACAN,GAEA,OAAOkM,GAAUzD,GAASK,EAAUoD,GAAS5L,EAAUN,GAASmM,UAAUhN,GAC5E,CAEA,WACKwF,GAEH7E,SAAAA,CACEqJ,EAA0B9Y,EAAAgQ,GAWlB,IAVR,IACElP,EAAG,UAAE2X,EAAS,SAAExI,EAAQ,QAAEN,EAAO,mBAAEoM,GAOpC/b,GACD,OAAE6b,EAAS,KAA0B7L,EAErC,GAA0B,MAAtB+L,EAA4B,OAAOzH,GAAU7E,UAAUsM,GAE3D,MAAMC,EAAclb,IAAQyO,GAAI4H,SAAWtI,GAAmB+M,GAC5DC,GACCI,GAAaxD,EAAU,CAAEsD,mBAAoBE,EAAUjD,gBAAgB,KACxE/I,EACAN,GAEIvV,EAAc,OAAN0e,QAAM,IAANA,EAAAA,EAAUkD,EACxB,GAAI5hB,EAAQ4hB,EACV,MAAM,IAAItf,EAAsB,aAAYtC,8BAAkC4hB,KAEhF,OAAO1H,GAAU7E,UAAUrV,EAC7B,GCvCF,OACKye,GAEH5C,eAAAA,GAA8E,IAA9D7b,EAAyBwD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGkR,GAAcxQ,WACxD,IAAKlE,EAAQ0U,GACX,MAAM,IAAIpS,EAAsB,aAAYtC,EAAMkE,kCAAkCwQ,MAEtF,OAAO1U,CACT,G,oBCTF,QACE8hB,mBAAAA,CAAoBC,EAA6Brb,GAC/C,MAAMsb,EAAO7M,GAAI0H,iBAAmBnW,GAAOyO,GAAI4H,WAAarW,EACxD,gBAAkB,cACtB,OAAOqa,GAAmBgB,EAAGC,GAAMvB,UACrC,EAEApL,SAAAA,CACErV,EAA6B4F,EAAAgQ,GAIrB,IAHR,IAAElP,GAAmBd,GACrB,yBAAEub,EAA2BnM,GAAyBsL,MACC1K,EAEvD,MAAMqM,EAAc,OAALjiB,QAAK,IAALA,EAAAA,EAASuB,KAAKugB,oBAAoBX,EAA0Bza,GAE3E,OAAO2F,GAAOG,KAAK,CAACyV,GACtB,EAEA,aAAMlD,CACJ/e,EAA6BwW,EAG7BxM,GACiC,IAHjC,IAAEtD,GAAmB8P,EAIrB,OAAa,MAATxW,EAAsBA,EACc,MAApCgK,EAAQmX,0BACyC,IAAjDlV,OAAOmV,KAAKpM,IAA0BvR,QACpB,MAAlBuG,EAAQgV,OACHzd,KAAKugB,2BACH9X,EAAQgV,OAAOqC,eAAeF,yBACrCza,QALJ,CASF,EAEA4B,WAAAA,CAAYgI,GACV,OAAOA,EAAO,EAChB,G,oBCvCa,SAAS4R,GAEtBC,GAIA,MAAM7L,EAASrK,OAAOqK,OAAO6L,GAAK1L,QAAQ2L,GAAmB,kBAANA,IACvD,MAAO,CACL/M,SAAAA,CAAUrV,GACR,GAAqB,kBAAVA,EAAoB,MAAM,IAAIkC,EAAc,QAAS,iBAAkBlC,GAClF,GAAIA,EAAQ,IAAM,MAAM,IAAIkC,EAAc,QAAS,sBAAuBlC,GAC1E,IAAK+M,GAAc/M,EAAOsW,GACxB,MAAM,IAAIpU,EAAc,QAAS,wBAAyBlC,GAE5D,OAAOqM,GAAOG,KAAK,CAACxM,GACtB,EAEAsI,WAAAA,CAAYgI,GACV,GAAsB,IAAlBA,EAAO7M,OACT,MAAM,IAAIvB,EAAc,SAAU,yBAA0BoO,EAAO7M,QAErE,MAAMzD,EAAQsQ,EAAO,GACrB,IAAKvD,GAAc/M,EAAOsW,GACxB,MAAM,IAAIpU,EAAc,QAAS,wBAAyBlC,GAE5D,OAAOA,CACT,EAEJ,CC7BA,QACEqV,SAAAA,CAAU5E,GACR,OAAOuG,GAAQvG,EACjB,EAEAnI,WAAAA,CAAYgI,GACV,OAAOA,EAAOpM,UAChB,GCHF,OACKua,GAEH,aAAMM,CACJ/e,EACAkW,EACAlM,GAEA,GAAa,MAAThK,EAAe,OAAOA,EAC1B,MAAM,OAAEgf,EAAM,SAAEnH,GAAa7N,EACvB5H,EAAc,2CACpB,GAAc,MAAV4c,EAAgB,MAAM,IAAI9c,EAAc,SAAUE,EAAa4c,GACnE,GAAgB,MAAZnH,EAAkB,MAAM,IAAI3V,EAAc,WAAYE,EAAayV,GACvE,aAAcmH,EAAOqD,kBAAkBxK,IAAWyK,SAASpe,UAC7D,G,gdCpB+C,MAAAsJ,OAAA+U,IAAAC,GAYd,IAK9BC,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,sBAARA,EAAAA,EAAQ,4BAARA,EAAAA,EAAQ,kBAARA,CAAQ,EAARA,IAAQ,IAAAC,GAAA,IAAApZ,QAAAqZ,GAAA,IAAArZ,QAAAsZ,GAAA,IAAAtZ,QAAAuZ,GAAA,IAAAvZ,QAAAwZ,GAAA,IAAAxZ,QAAAyZ,GAAA,IAAAzZ,QAAA0Z,GAAA,IAAAC,QAAAC,GAAA,IAAAD,QAQb,MAAME,GAKJ,cAAIC,GACF,OAAA5Y,EAAAA,EAAAA,GAAOjJ,KAAIohB,GACb,CAqBAvhB,WAAAA,CAAYiiB,EAAsBvR,EAAapL,EAAQ4c,GASrD,GAT6EC,GAAA,KAAAL,IAsF/EK,GAAA,KAAAP,IAAA/Y,GAAA,KAAAyY,GAAA,CAAAxY,UAAA,EAAAlK,WAAA,IAAAiK,GAAA,KAAA0Y,GAAA,CAAAzY,UAAA,EAAAlK,OA/Gc,IAAIiK,GAAA,KAAA2Y,GAAA,CAAA1Y,UAAA,EAAAlK,WAAA,IAAAiK,GAAA,KAAA4Y,GAAA,CAAA3Y,UAAA,EAAAlK,WAAA,IAAAiK,GAAA,KAAA6Y,GAAA,CAAA5Y,UAAA,EAAAlK,WAAA,IAAAiK,GAAA,KAAA8Y,GAAA,CAAA7Y,UAAA,EAAAlK,WAAA,KA0BhBmK,EAAAA,EAAAA,GAAA5I,KAAIshB,GAAa/Q,IACjB3H,EAAAA,EAAAA,GAAA5I,KAAIuhB,GAAQpc,IACZyD,EAAAA,EAAAA,GAAA5I,KAAIwhB,GAAaO,IACjBnZ,EAAAA,EAAAA,GAAA5I,KAAImhB,GAAaW,EAAO,GAAGnf,SAAS,SACpCiG,EAAAA,EAAAA,GAAA5I,KAAIqhB,GAAU3W,OAAOC,YACnBmX,EAAO,GAAG1d,KAAK6d,GAAS,CAACA,EAAK,GAAGtf,SAAS,OAAQsf,EAAK,QAGtB,OAA/BhZ,EAAAA,EAAAA,GAAAjJ,KAAIqhB,KAAApY,EAAAA,EAAAA,GAAQjJ,KAAImhB,KAOpBzW,OAAOE,SAAO3B,EAAAA,EAAAA,GAACjJ,KAAIqhB,KAASa,SAAQ7d,IAAiB,IAAfpF,EAAKgjB,GAAK5d,EAC9C,GAAI8d,GAAAP,GA7CJA,GAAMQ,IAAAhZ,KA6CFwY,GAAiBK,KAAUhjB,EAAK,MAAM,IAAIsF,GAC9C,MAAM,KAAE7H,GAAMylB,GAAGP,GA9CjBA,GAAMS,IAAAjZ,KA8CWwY,GAAkBK,GACnC,OAAQvlB,GACN,KAAKwkB,GAASoB,OACZL,EACGrT,MAAM,EAAG,IACTsG,QAAQqN,GAAMA,EAAErgB,SAChBggB,SAASK,IAK8B,OAAlCtZ,EAAAA,EAAAA,GAAAjJ,KAAIqhB,IAAQkB,EAAE5f,SAAS,UAAiBiG,EAAAA,EAAAA,GAAA5I,KAAIohB,IAAe,EAAK,IAExE,MACF,KAAKF,GAASsB,UACZ,GAA4C,OAAxCvZ,EAAAA,EAAAA,GAAAjJ,KAAIqhB,IAAQY,EAAK,GAAGtf,SAAS,QAC/B,MAAM,IAAI6B,GAAuB,+CAEnC,MACF,KAAK0c,GAASuB,KACZ,MACF,QACE,MAAM,IAAI1gB,EAAe,6BAA4BrF,KACzD,QAhCF,CACE,GAAwC,IAApCgO,OAAOmV,MAAI5W,EAAAA,EAAAA,GAACjJ,KAAIqhB,KAASnf,OAC3B,MAAM,IAAIsC,GAAuB,mCAEnCoE,EAAAA,EAAAA,GAAA5I,KAAIohB,IAAe,EAErB,CA4BF,CAEAsB,OAAAA,CAAQC,GACN,OAAO1Z,EAAAA,EAAAA,GAAAjJ,KAAImhB,OAAAlY,EAAAA,EAAAA,GAAe0Z,EAAIxB,GAChC,CA6BArN,SAAAA,GACE,MAAO,CACLhJ,GAAOG,MAAIhC,EAAAA,EAAAA,GAACjJ,KAAImhB,IAAY,OAC5BzW,OAAOE,SAAO3B,EAAAA,EAAAA,GAACjJ,KAAIqhB,KAASjd,KAAIiQ,IAAA,IAAEuO,EAASnkB,GAAM4V,EAAA,MAAM,CACrDvJ,GAAOG,KAAK2X,EAAS,OACrBnkB,EACD,IAEL,CA0CAokB,GAAAA,CAAI5jB,GACF,MAAM6jB,EAACC,GAAG/iB,KAAIyhB,GAAAuB,IAAA5Z,KAAJpJ,KAAamM,GAAOlN,GAAK0D,SAAS,QAC5C,OAAS,MAALmgB,EAAkBA,GACtB7Z,EAAAA,EAAAA,GAAOjJ,KAAIwhB,IAAApY,KAAJpJ,KAAeiM,GAAO6W,EAAG9W,GAASe,cAAY9D,EAAAA,EAAAA,GAAEjJ,KAAIuhB,IAC7D,CAmCA0B,QAAAA,GACE,OAAOvY,OAAOC,YAAYoY,GAAA/iB,KAAI2hB,GAAAuB,IAAA9Z,KAAJpJ,MAEvBkV,QAAOD,IAAA,IAAEkO,GAAElO,EAAA,OAAKhM,EAAAA,EAAAA,GAAAjJ,KAAIshB,MAAetV,GAAS8B,iBAAgC,KAAbqV,EAAEjhB,MAAa,IAC9EkC,KAAI+Q,IAAA,IAAEgO,EAAGtC,GAAE1L,EAAA,MAAK,CACflJ,GAAOnB,GAAOG,KAAKkY,EAAG,QAAMla,EAAAA,EAAAA,GAAEjJ,KAAIshB,MAAWrY,EAAAA,EAAAA,GAC7CjJ,KAAIwhB,IAAApY,KAAJpJ,KAAeiM,GAAO4U,EAAG7U,GAASe,cAAY9D,EAAAA,EAAAA,GAAEjJ,KAAIuhB,KACrD,IACL,EAzMU,SAAAa,GAiBOH,GACf,OAAOnX,GAAOG,KAAK8F,GAAKiQ,GAAUiB,KAAQtf,SAAS,MACrD,CAAC,SAAA0f,GA0DiBJ,GAChB,OAAQA,EAAK/f,QACX,KAAK,GACH,MAAO,CACLxF,KAAMwkB,GAASoB,UACQ,IAApBL,EAAK,IAAI/f,QAAgB,CAAEzD,MAAOwjB,EAAK,MAE9C,KAAK,EAAG,CACN,MAAMrd,EAASqd,EAAK,GAAG,IAAM,EAC7B,GAAIrd,EAAS,EAAG,MAAM,IAAID,GAAuBC,GACjD,MAAMlI,EAAOkI,GAAU,EAAIsc,GAASsB,UAAYtB,GAASuB,KACnD7T,EAAQ,CAAC,EAAG,GAAGjD,SAAS/G,GAAU,EAAI,EAC5C,MAAO,CACLlI,UACGA,IAASwkB,GAASuB,MAAQ,CAAEhkB,MAAOwjB,EAAK,IAC3CmB,KAAMnB,EAAK,GAAGtf,SAAS,OAAOiM,MAAMA,GAExC,CACA,QACE,MAAM,IAAInK,GAAuBwd,EAAK/f,QAE5C,CAAC,SAAA8gB,GAqBO1S,GACN,IAAI+S,GAAUpa,EAAAA,EAAAA,GAAGjJ,KAAImhB,IACjBliB,EAAMqR,EACV,MAAO,EAAM,CACX,MAAM2R,GAAOhZ,EAAAA,EAAAA,GAAAjJ,KAAIqhB,IAAQgC,GACzB,GAAY,MAARpB,EAAc,CAChB,IAAKjiB,KAAK6hB,WAAY,OACtB,MAAM,IAAI9f,EAAc,mCAC1B,CACA,MAAM,KAAErF,EAAI,MAAE+B,EAAK,KAAE2kB,GAAMjB,GAAGmB,GAhI9BA,GAAMjB,IAAAjZ,KAgIwBka,GAAkBrB,GAChD,OAAQvlB,GACN,KAAKwkB,GAASoB,OACZ,GAAmB,IAAfrjB,EAAIiD,OAAc,OAAOzD,EAC7B4kB,EAAapB,GAAO,KAAIhjB,EAAI,MAAM0D,SAAS,OAC3C1D,EAAMA,EAAIskB,UAAU,GACpB,MACF,KAAKrC,GAASsB,UACZ,GAAIvjB,EAAIskB,UAAU,EAAO,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMlhB,UAAYkhB,EAAM,OAC7CC,EAAapB,EAAK,GAAGtf,SAAS,OAC9B1D,EAAMA,EAAIskB,UAAUH,EAAKlhB,QACzB,MACF,KAAKgf,GAASuB,KACZ,GAAIW,IAASnkB,EAAK,OAClB,OAAOR,EACT,QACE,MAAM,IAAIsD,EAAe,6BAA4BrF,KAE3D,CACF,CAAC,SAAAwmB,KAcC,MAAMtY,EAAmC,GACnC4Y,EAAMA,CAACH,EAAoBpkB,KAC/B,MAAMgjB,GAAOhZ,EAAAA,EAAAA,GAAAjJ,KAAIqhB,IAAQgC,GACzB,GAAY,MAARpB,EAAc,CAChB,IAAKjiB,KAAK6hB,WAAY,OACtB,MAAM,IAAI9f,EAAc,mCAC1B,CACA,MAAM,KAAErF,EAAI,MAAE+B,EAAK,KAAE2kB,GAAMjB,GAAGmB,GAxK9BA,GAAMjB,IAAAjZ,KAwKwBka,GAAkBrB,GAChD,OAAQvlB,GACN,KAAKwkB,GAASoB,OACZL,EACGrT,MAAM,EAAG,IACTxK,KAAI,CAACmL,EAAGkU,IAA4B,CAAClU,EAAGkU,KACxCvO,QAAOwO,IAAA,IAAEnU,GAAEmU,EAAA,OAAKnU,EAAErN,MAAM,IACxBggB,SAAQyB,IAAA,IAAEpU,EAAGkU,GAAIE,EAAA,OAAKH,EAAIjU,EAAE5M,SAAS,OAAQ1D,EAAMwkB,EAAI9gB,SAAS,IAAI,IAC1D,MAATlE,GAAemM,EAAQtD,KAAK,CAACrI,EAAKR,IACtC,MACF,KAAKyiB,GAASsB,UACZgB,EAAIvB,EAAK,GAAGtf,SAAS,OAAQ1D,EAAMmkB,GACnC,MACF,KAAKlC,GAASuB,KACZ,GAAa,MAAThkB,EAAe,MAAM,IAAIuD,EAC7B4I,EAAQtD,KAAK,CAACrI,EAAMmkB,EAAM3kB,IAC1B,MACF,QACE,MAAM,IAAIsD,EAAe,6BAA4BrF,KACzD,EAGF,OADA8mB,GAAGva,EAAAA,EAAAA,GAACjJ,KAAImhB,IAAY,IACbvW,CACT,CAaa,SAASgZ,GAAkDrT,EAAapL,GAIrF,MAAO,CACL2O,SAAAA,CAAUrV,GACR,OAAOA,EAAMqV,WACf,EAEA/M,WAAAA,CAAYtI,EAAK2W,GAAgB,IAAd,SAAEd,GAAUc,EAC7B,OAAO,IAAIwM,GAAOnjB,EAAO8R,EAAUpL,EAAKmP,EAC1C,EAEJ,CC3Oe,SAASuP,GAAuC1e,GAa7D,MAAO,CACL2O,SAAAA,CAAUnF,EAAOtK,GAAe,IAAb,QAAE2P,GAAS3P,EAC5B,OAAO8H,GAAO6H,EAAQ,CAAE7O,MAAKwJ,YAC/B,EAEA5H,WAAAA,CAAYgI,EAAMsF,GAAgB,IAAd,SAAEC,GAAUD,EAC9B,OAAOC,EAAsBrI,GAAO8C,EAAQ/C,GAASe,aAAc5H,GAAKwJ,OAC1E,EAEA0G,eAAe,EAEnB,CDoMCiO,GA1MK1B,GERC,IAAKkC,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,oBAAhBA,EAAAA,EAAgB,oBAAhBA,CAAgB,MAMrB,MAAMC,GAAkB,CAC7BC,IAAK,4CACLngB,OAAQ,uCAGH,IAAKogB,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,cAAdA,EAAAA,EAAc,oBAAdA,EAAAA,EAAc,sBAAdA,CAAc,MAa1B,MAAMC,GAAWC,KAQXC,GAAgBD,GAAMvQ,GAAIyQ,UAU1BC,GAAuB5Y,GAAMyY,GAAMvQ,GAAIoB,aAQvCuP,GAAgBJ,GAAMvQ,GAAI4Q,UAY1BC,GAAergB,GAAI4H,GAAS8B,gBAAiB8F,GAAI8Q,UAUjDC,GAAcvgB,GAAI4H,GAASkC,eAAgB0F,GAAIgR,SAU/CC,GAAWzgB,GAAI4H,GAASsB,UAAWsG,GAAIkR,cAUvCC,GAAc3gB,GAAI4H,GAAS6B,QAAS+F,GAAI/F,SAUxCmX,GAAW5gB,GAAI4H,GAASsC,KAAMsF,GAAItF,MAUlC2W,GAAa7gB,GAAI4H,GAASgC,cAAe4F,GAAIsR,QAG7CC,GAAY7P,GAAY,KAASqD,IAEjCyM,GAAU9M,IACb7Z,IAAU,IAAA0e,EACT,MAAMkI,EAAW,KAEjB,GADK,QAALlI,EAAA1e,SAAK,IAAA0e,IAAL1e,EAAU4mB,GACN5mB,GAAS,GAAKA,GAAS4mB,EAAU,OAAO5mB,EAC5C,MAAM,IAAIkC,EAAc,UAAY,0BAAyB0kB,WAAmB5mB,EAAM,GAExFka,IAMW2M,GAAW,CAAC,CACvBngB,IAAKogB,GAAe3R,GAAIgR,SACxBhjB,QAAS2jB,GAAe,GACxBrP,MAAOyC,GACP6M,QAASnN,IACR,CACDlT,IAAKogB,GAAe3R,GAAIgR,SACxBhjB,QAAS2jB,GAAe,GAAG,GAC3BE,MAAOpN,GACPnC,MAAOyC,GACP6M,QAASnN,GACTqN,WAAYvnB,GAAQ6N,GAAS8B,gBAAiB9B,GAASsC,MACvDqX,UAAWC,GAAQ5Z,GAASY,oBAC3B,CACDzH,IAAKogB,GAAe3R,GAAIyQ,UACxBziB,QAAS2jB,GAAe,GAAG,GAC3BM,WAAYna,GAAM2F,IAClBuL,UAAWsH,IACV,CACD/e,IAAKogB,GAAe3R,GAAIkS,SACxBlkB,QAAS2jB,GAAe,GAAG,GAC3BlP,SAAUlY,GAAQ6N,GAASkC,gBAE3B6X,YAAa5nB,GAAQ6N,GAASkC,eAAgBlC,GAASsC,MACvDzK,OAAQqZ,GACRF,IAAG,GACHgJ,IAAG,GACH9P,MAAOA,GAAM,YACbvH,QAASiX,GAAQ5Z,GAASsB,WAAW,IACpC,CACDnI,IAAKogB,GAAe3R,GAAItF,MACxB1M,QAAS2jB,GAAe,GAAG,GAC3BU,UAAW9nB,GAAQ6N,GAASkC,gBAC5BkX,QAASzM,GACTuN,OAAQ7U,GACR8T,UAAWxM,GACXyF,SAAQA,IACP,CACDjZ,IAAKogB,GAAe3R,GAAIuS,gBACxBvkB,QAAS2jB,GAAe,GAAG,GAC3BU,UAAW9nB,GAAQ6N,GAASkC,gBAC5BgI,MAAOA,GAAM,aACbkQ,aAAcjoB,GAAQ6N,GAASoC,YAC/B4O,IAAG,GACHgJ,IAAGA,IACF,CACD7gB,IAAKogB,GAAe3R,GAAIyS,aACxBzkB,QAAS2jB,GAAe,GAAG,GAC3BU,UAAW9nB,GAAQ6N,GAASkC,gBAC5BgI,MAAOA,GAAM,aACbjW,KAAI,GACJqmB,SAAUjO,GACV5V,QAAO,GACPua,IAAG,GACHgJ,IAAGA,IACF,CACD7gB,IAAKogB,GAAe3R,GAAI2S,cACxB3kB,QAAS2jB,GAAe,GAAG,GAC3BU,UAAW9nB,GAAQ6N,GAASkC,gBAC5BgI,MAAOA,GAAM,aACbsQ,OAAM,GACNpB,WACAhH,SAAQ,GACR+G,aACAnI,IAAG,GACHgJ,IAAGA,IACF,CACD7gB,IAAKogB,GAAe3R,GAAI2S,cACxB3kB,QAAS2jB,GAAe,GACxBU,UAAW9nB,GAAQ6N,GAASkC,gBAC5BgI,MAAOA,GAAM,aACbsQ,OAAM,GACNpB,WACAhH,SAAUqI,GACVtB,aACAnI,IAAG,GACHgJ,IAAGA,IACF,CACD7gB,IAAKogB,GAAe3R,GAAI8S,gBACxB9kB,QAAS2jB,GAAe,GAAG,GAC3BU,UAAW9nB,GAAQ6N,GAASkC,gBAC5BgI,MAAOA,GAAM,aACbsQ,OAAM,GAENT,YAAa5nB,GAAQ6N,GAASkC,eAAgBlC,GAASsC,MACvD0O,IAAG,GACHgJ,IAAGA,IACF,CACD7gB,IAAKogB,GAAe3R,GAAI+S,cACxB/kB,QAAS2jB,GAAe,GAAG,GAC3BU,UAAW9nB,GAAQ6N,GAASkC,gBAC5BgI,MAAOA,GAAM,aACbsQ,OAAM,GACNxJ,IAAG,GACHgJ,IAAGA,IACF,CACD7gB,IAAKogB,GAAe3R,GAAI8Q,UACxB9iB,QAAS2jB,GAAe,GAAG,GAC3BqB,MAAOzoB,GAAQ6N,GAASkC,gBACxB2Y,UAAS,GACThgB,KAAM+e,GAAQ5Z,GAASY,mBACvBzG,IAAKyf,GAAQ5Z,GAASY,mBACtBka,OAAQC,GACRC,SAAUtb,GAAMvN,GAAQ6N,GAASkC,iBACjC+Y,QAAS/J,IACR,CACD/X,IAAKogB,GAAe3R,GAAIyH,kBACxBzZ,QAAS2jB,GAAe,GAAG,GAC3BtP,QAAS9X,GAAQ6N,GAASkC,gBAC1BgI,MAAOA,GAAM,WACbrP,KAAM+e,GAAQ5Z,GAASY,mBACvBia,UAAS,GACT7J,IAAG,GACHgJ,IAAG,GACHiB,QAAS3O,IACP,WAAe,IAAd7Z,EAAKwD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACP,GAAe,KAAVxD,EAAa,OAAOA,EACzB,MAAM,IAAIkC,EAAc,UAAW,sCAAuClC,EAC5E,GACAye,IAEFrZ,OAAQqZ,GACRoD,SAAQ,GACR4G,SAAQ,GACRC,SAAUvB,GAAQ5Z,GAASY,oBAC1B,CACDzH,IAAKogB,GAAe3R,GAAI0H,gBACxB1Z,QAAS2jB,GAAe,GAAG,GAC3B6B,SAAUjpB,GAAQ6N,GAASkC,gBAC3BgI,MAAOA,GAAM,YAEbmR,WAAYlpB,GAAQ6N,GAAS8B,gBAAiB9B,GAASsC,MACvD4Q,WAAU,GACVlC,IAAG,GACHgJ,IAAG,GACHniB,OAAQqZ,GACRoD,SAAQ,GACR4G,SAAQ,GACRC,SAAUvB,GAAQ5Z,GAASY,oBAC1B,CACDzH,IAAKogB,GAAe3R,GAAIkR,cACxBljB,QAAS2jB,GAAe,GAAG,GAC3B6B,SAAUjpB,GAAQ6N,GAASkC,gBAC3BoZ,YAAa3O,GACbzX,OAAQyX,GACR0O,WAAYlpB,GAAQ6N,GAAS8B,iBAE7BoZ,SAAU7O,GACVkP,QAAS5O,GACT6O,YAAa5B,GAAQ5Z,GAASY,mBAC9B6a,WAAYC,GAAYzD,IAGxB9d,IAAKuF,GAAM2F,KACV,CACDlM,IAAKogB,GAAe3R,GAAIsR,QACxBtjB,QAAS2jB,GAAe,GAAG,GAC3BU,UAAW9nB,GAAQ6N,GAASkC,gBAC5ByZ,YAAazY,GACb0Y,eAAgB1Y,GAChB6R,SAAU7D,GACV2K,eAAgBlP,GAChBuG,WAAUA,IACT,CACD/Z,IAAKogB,GAAe3R,GAAImI,kBACxBna,QAAS2jB,GAAe,GAAG,GAC3BU,UAAW9nB,GAAQ6N,GAASkC,gBAC5BgI,MAAOA,GAAM,aACbyR,YAAazY,GACb0Y,eAAgB1Y,GAChB6R,SAAU7D,GACV4K,cAAexS,GAAYwO,GAAiBiE,MAAOL,GAAY5D,KAC/D+D,eAAgBvS,GAAY,IAAKqD,IACjCqE,IAAG,GACHgJ,IAAG,GACH9G,WAAUA,IACT,CACD/Z,IAAKogB,GAAe3R,GAAIoI,gBACxBpa,QAAS2jB,GAAe,GAAG,GAE3BjP,SAAUnY,GAAQ6N,GAASgC,cAAehC,GAASsC,MACnD4H,MAAOA,GAAM,YACb4R,cAAexS,GAAYwO,GAAiBiE,MAAOL,GAAY5D,KAC/D+D,eAAgBvS,GAAY,IAAKqD,IACjCqE,IAAG,GACHgJ,IAAGA,IACF,CACD7gB,IAAKogB,GAAe3R,GAAIqI,eACxBra,QAAS2jB,GAAe,GAAG,GAC3BlP,SAAUlY,GAAQ6N,GAASkC,gBAC3BgI,MAAOA,GAAM,YAEbI,SAAUnY,GAAQ6N,GAASgC,cAAehC,GAASsC,MACnD0Z,MAAO9Y,GACP6R,SAAQ,GACRkH,aAAc3S,GAAYwO,GAAiBiE,MAAOL,GAAY5D,KAC9DoE,cAAe5S,GAAY,GAAIqD,IAC/BwP,gBAAiB7S,GAAYwO,GAAiBiE,MAAOL,GAAY5D,KACjEsE,iBAAkB9S,GAAY,GAAIqD,IAClCqE,IAAG,GACHgJ,IAAGA,IACF,CACD7gB,IAAKogB,GAAe3R,GAAIsI,kBACxBta,QAAS2jB,GAAe,GAAG,GAC3BjP,SAAUnY,GAAQ6N,GAASgC,eAC3BkI,MAAOA,GAAM,YACbmS,QAASzC,GAAQ5Z,GAASiC,eAC1Bqa,SAAUpZ,GACViZ,gBAAiB7S,GAAYwO,GAAiBiE,MAAOL,GAAY5D,KACjEsE,iBAAkB9S,GAAY,GAAIqD,IAClCqE,IAAG,GACHgJ,IAAGA,IACF,CACD7gB,IAAKogB,GAAe3R,GAAI2U,iBACxB3mB,QAAS2jB,GAAe,GAAG,GAC3BiD,UAAWrqB,GAAQ6N,GAASkC,gBAC5Bua,gBAAiBpQ,GACjBqQ,UAAWvqB,GAAQ6N,GAASkC,gBAC5Bya,gBAAiBtQ,GACjBuQ,eAAgBvQ,GAChBwQ,WAAYxQ,GACZ2N,IAAG,GACHhJ,IAAG,GACH8L,qBAAsBpd,GAAMvN,MAAW0a,KACvCkQ,qBAAsBrd,GAAMvN,MAAW0a,KACvCmQ,UAAWpD,GAAQ5Z,GAASkB,OAC5BgJ,MAAOA,GAAM,cACZ,CACD/Q,IAAKogB,GAAe3R,GAAIqV,sBACxBrnB,QAAS2jB,GAAe,GAAG,GAC3B2D,UAAW/qB,GAAQ6N,GAAS6B,SAC5Bsb,OAAQhrB,GAAQ6N,GAASkC,gBACzBkb,qBAAsB/Q,GACtBgR,qBAAsBhR,GACtB2N,IAAG,GACHhJ,IAAG,GACH9G,MAAOA,GAAM,WACZ,CACD/Q,IAAKogB,GAAe3R,GAAI0V,oBACxB1nB,QAAS2jB,GAAe,GAAG,GAC3B2D,UAAW/qB,GAAQ6N,GAAS6B,SAC5Bsb,OAAQhrB,GAAQ6N,GAASkC,gBACzBS,QAASiX,GAAQ5Z,GAASe,aAC1Bwc,IAAKhF,GACLyB,IAAG,GACHhJ,IAAG,GACH9G,MAAOA,GAAM,WACZ,CACD/Q,IAAKogB,GAAe3R,GAAI4V,gBACxB5nB,QAAS2jB,GAAe,GAAG,GAC3B2D,UAAW/qB,GAAQ6N,GAAS6B,SAC5Bsb,OAAQhrB,GAAQ6N,GAASkC,gBACzBS,QAASiX,GAAQ5Z,GAASe,aAC1Bwc,IAAKhF,GACLyB,IAAG,GACHhJ,IAAG,GACH9G,MAAOA,GAAM,WACZ,CACD/Q,IAAKogB,GAAe3R,GAAI6V,kBACxB7nB,QAAS2jB,GAAe,GAAG,GAC3B2D,UAAW/qB,GAAQ6N,GAAS6B,SAC5Bsb,OAAQhrB,GAAQ6N,GAASkC,gBACzBrK,OAAQwU,GACR2N,IAAG,GACHhJ,IAAG,GACHgM,UAAWpD,GAAQ5Z,GAASkB,OAC5Bwc,MAAO/Q,GACPzC,MAAOA,GAAM,WACZ,CACD/Q,IAAKogB,GAAe3R,GAAI+V,mBACxB/nB,QAAS2jB,GAAe,GAAG,GAC3B2D,UAAW/qB,GAAQ6N,GAAS6B,SAC5B+b,KAAMzrB,GAAQ6N,GAASkC,gBACvBrK,OAAQwU,GACR2N,IAAG,GACHhJ,IAAG,GACHgM,UAAWpD,GAAQ5Z,GAASkB,OAC5Bwc,MAAO/Q,GACPzC,MAAOA,GAAM,WACZ,CACD/Q,IAAKogB,GAAe3R,GAAIiW,iBACxBjoB,QAAS2jB,GAAe,GAAG,GAC3B2D,UAAW/qB,GAAQ6N,GAAS6B,SAC5Bsb,OAAQhrB,GAAQ6N,GAASkC,gBACzBkb,qBAAsB/Q,GACtBgR,qBAAsBhR,GACtB2N,IAAG,GACHhJ,IAAG,GACH9G,MAAOA,GAAM,WACZ,CACD/Q,IAAKogB,GAAe3R,GAAIkH,wBACxBlZ,QAAS2jB,GAAe,GAAG,GAC3B2D,UAAW/qB,GAAQ6N,GAAS6B,SAC5Bsb,OAAQhrB,GAAQ6N,GAASkC,gBACzBS,QAASiX,GAAQ5Z,GAASe,aAC1B2c,MAAO/Q,GACPlM,OAAQmZ,GAAQ5Z,GAASY,mBACzBoc,UAAWpD,GAAQ5Z,GAASkB,OAC5B4c,cAAelE,GAAQ5Z,GAASoB,YAChC4Y,IAAG,GACHhJ,IAAG,GACH9G,MAAOA,GAAM,WACZ,CACD/Q,IAAKogB,GAAe3R,GAAImH,mBACxBnZ,QAAS2jB,GAAe,GAAG,GAC3B2D,UAAW/qB,GAAQ6N,GAAS6B,SAC5B6b,MAAO/Q,GACPqQ,UAAWpD,GAAQ5Z,GAASkB,QAC3B,CACD/H,IAAKogB,GAAe3R,GAAI/F,SACxBjM,QAAS2jB,GAAe,GAAG,GAC3BiD,UAAWrqB,GAAQ6N,GAASkC,gBAC5Bwa,UAAWvqB,GAAQ6N,GAASkC,gBAC5B6b,cAAe1R,GACfoQ,gBAAiBpQ,GACjBsQ,gBAAiBtQ,GACjBuQ,eAAgBvQ,GAChByQ,qBAAsBpd,GAAMvN,MAAW0a,KACvCkQ,qBAAsBrd,GAAMvN,MAAW0a,KACvCmQ,UAAWpD,GAAQ5Z,GAASkB,OAC5Bwc,MAAO/Q,GACPqR,UAAW3R,GACXwQ,WAAYxQ,GACZ4R,YAAa5R,GACb6R,cAAetE,GAAQ5Z,GAASY,mBAChCud,cAAevE,GAAQ5Z,GAASY,oBAC/B,CACDzH,IAAKogB,GAAe3R,GAAIwW,uBACxBxoB,QAAS2jB,GAAe,GAAG,GAC3B2D,UAAW/qB,GAAQ6N,GAAS6B,SAC5Bsb,OAAQhrB,GAAQ6N,GAASkC,gBACzBS,QAASiX,GAAQ5Z,GAASe,aAC1BiZ,IAAG,GACHhJ,IAAG,GACH9G,MAAOA,GAAM,WACZ,CACD/Q,IAAKogB,GAAe3R,GAAIwH,+BACxBxZ,QAAS2jB,GAAe,GAAG,GAC3Bta,KAAM9M,GAAQ6N,GAASkC,gBACvBmc,GAAIlsB,GAAQ6N,GAASkC,gBACrBrK,OAAQwU,IACP,CACDlT,IAAKogB,GAAe3R,GAAIsH,8BACxBtZ,QAAS2jB,GAAe,GAAG,GAC3Bta,KAAM9M,GAAQ6N,GAASkC,gBACvBrK,OAAQwU,IACP,CACDlT,IAAKogB,GAAe3R,GAAIuH,+BACxBvZ,QAAS2jB,GAAe,GAAG,GAC3Bta,KAAM9M,GAAQ6N,GAASkC,gBACvBrK,OAAQwU,IACP,CACDlT,IAAKogB,GAAe3R,GAAIqH,qCACxBrZ,QAAS2jB,GAAe,GAAG,GAC3BqB,MAAOzoB,GAAQ6N,GAASkC,gBACxB2Y,UAAS,GACThgB,KAAM+e,GAAQ5Z,GAASY,mBACvBqa,QAAS5O,GACT8O,SAAUvB,GAAQ5Z,GAASY,oBAC1B,CACDzH,IAAKogB,GAAe3R,GAAIoH,mCACxBpZ,QAAS2jB,GAAe,GAAG,GAC3B+E,OAAQnsB,GAAQ6N,GAASkC,gBACzBqc,SAAUpsB,GAAQ6N,GAAS8B,iBAC3BoR,WAAU,GACVrb,OAAQwU,GACR8O,SAAUvB,GAAQ5Z,GAASY,mBAC3B4d,UAAWnZ,GACX6V,SAAQ,GACR5G,SAAQA,IACP,CACDnb,IAAKogB,GAAe3R,GAAI6W,0BACxB7oB,QAAS2jB,GAAe,GAAG,GAC3B2D,UAAW/qB,GAAQ6N,GAAS6B,SAC5B6b,MAAO/Q,GACP+R,KAAMxb,GACNyb,OAAQxsB,GAAQ6N,GAASkC,iBACxB,CACD/I,IAAKogB,GAAe3R,GAAI4Q,UACxB5iB,QAAS2jB,GAAe,GAAG,GAE3BqF,SAAUlf,GAAMmf,GAAO7e,GAASkC,eAAgB0F,GAAIgR,UACpDkG,MAAOpf,GAAMmf,GAAO7e,GAASsB,UAAWsG,GAAIkR,eAC5CiG,SAAUrf,GAAMmf,GAAO7e,GAAS6B,QAAS+F,GAAI/F,UAC7Cmd,UAAWtf,GAAMmf,GAAO7e,GAAS8B,gBAAiB8F,GAAI8Q,WACtDuG,GAAIvf,GAAMmf,GAAO7e,GAASsC,KAAMsF,GAAItF,OACpC4c,QAASxf,GAAMmf,GAAO7e,GAASgC,cAAe4F,GAAIsR,UACjD,CACD/f,IAAKogB,GAAe3R,GAAIxG,YACxBxL,QAAS2jB,GAAe,GAAG,GAC3ByF,UAAWG,GAAQvX,GAAIwX,gBACvBN,MAAOK,GAAQvX,GAAIyX,YACnBN,SAAUI,GAAQvX,GAAI0X,eACtBL,GAAIE,GAAQvX,GAAI2X,kBAChBL,QAASC,GAAQvX,GAAI4X,cACrBZ,SAAUO,GAAQvX,GAAI6X,gBACrB,CACDtmB,IAAKogB,GAAe3R,GAAIkB,OACxBlT,QAAS2jB,GAAe,GAAG,GAC3BxQ,OAAQuP,IACP,CACDnf,IAAKogB,GAAe3R,GAAIoB,YACxBpT,QAAS2jB,GAAe,GAAG,GAC3BtmB,IAAKoS,GACL5S,MAAO4S,IACN,CACDlM,IAAKogB,GAAe3R,GAAIwX,gBACxBxpB,QAAS2jB,GAAe,GAAG,GAC3B5W,QAAS8V,IACR,CACDtf,IAAKogB,GAAe3R,GAAIyX,YACxBzpB,QAAS2jB,GAAe,GAAG,GAC3B5W,QAASkW,IACR,CACD1f,IAAKogB,GAAe3R,GAAI0X,eACxB1pB,QAAS2jB,GAAe,GAAG,GAC3B5W,QAASoW,IACR,CACD5f,IAAKogB,GAAe3R,GAAI2X,kBACxB3pB,QAAS2jB,GAAe,GAAG,GAC3B5W,QAASqW,IACR,CACD7f,IAAKogB,GAAe3R,GAAI4X,cACxB5pB,QAAS2jB,GAAe,GAAG,GAC3B5W,QAASsW,IACR,CACD9f,IAAKogB,GAAe3R,GAAI6X,eACxB7pB,QAAS2jB,GAAe,GAAG,GAC3B5W,QAASgW,IACR,CACDxf,IAAKogB,GAAe3R,GAAI2H,YACxB3Z,QAAS2jB,GAAe,GAAG,GAC3BtP,QAAS9X,GAAQ6N,GAASkC,gBAC1BgI,MAAOA,GAAM,WACbrP,KAAM+e,GAAQ5Z,GAASY,mBACvB8e,QAASra,GACTwV,UAAS,GACT7J,IAAG,GACHgJ,IAAG,GACH1F,SAAQ,GACR4G,SAAQ,GACRC,SAAUvB,GAAQ5Z,GAASY,oBAC1B,CACDzH,IAAKogB,GAAe3R,GAAI4H,UACxB5Z,QAAS2jB,GAAe,GAAG,GAC3BoG,KAAMxtB,GAAQ6N,GAASkC,gBACvB0d,SAAUhG,GAAQ5Z,GAASY,mBAC3BsS,WAAU,GACVlC,IAAG,GACHsD,SAAQ,GACR4G,SAAQ,GACR3S,GAAI6P,IACH,CACDjf,IAAKogB,GAAe3R,GAAI6H,aACxB7Z,QAAS2jB,GAAe,GAAG,GAC3BsG,QAAS1tB,GAAQ6N,GAASkC,gBAC1BgI,MAAOA,GAAM,WACb8G,IAAG,GACHzI,GAAI6P,IACH,CACDjf,IAAKogB,GAAe3R,GAAIkY,kBACxBlqB,QAAS2jB,GAAe,GAAG,GAC3BvI,IAAKE,GACLgK,SAAQ,GACR3hB,OAAQqgB,GAAQ5Z,GAAS+B,WCnmBoC5B,OAAA4f,GAAA9f,OAAA+U,IAAAC,GAexD,SAAS+K,GACdC,EACArY,EACAzO,EACAvD,GAEA,MAAMsqB,EAAaD,EAAQ/W,QAAQiX,GAAMA,EAAEhnB,IAAIsT,aAAetT,IAC9D,GAA0B,IAAtB+mB,EAAWhqB,OAAc,MAAM,IAAIkD,GAAqB,GAAEwO,EAAIzO,OAASA,KAAQ,GACnF,GAAe,MAAXvD,EAAiB,CACnB,MAAMwqB,EAAgBF,EAAWhlB,MAAMmlB,GAAWA,EAAOzqB,QAAQgX,qBACjE,GAAqB,MAAjBwT,EAAuB,MAAM,IAAIrqB,EAAe,gCAA+B6R,EAAIzO,OAASA,MAChGvD,EAAUwqB,EAAcxqB,QAAQ6W,UAClC,CACA,MAAM4T,EAASH,EAAWhlB,MAAMilB,GAAMA,EAAEvqB,QAAQ6W,aAAe7W,IAC/D,GAAc,MAAVyqB,EAAgB,MAAM,IAAIjnB,GAAqB,GAAEwO,EAAIzO,OAASA,KAAQvD,GAC1E,OAAO8I,OAAOE,QAAQyhB,EACxB,CAEO,SAASC,GACdL,EACArY,EACAe,EAKA4X,EACAhc,GAEA,MAAM8b,EAASL,GAAUC,EAASrY,EAAKe,EAAOxP,IAAKwP,EAAO/S,SACpDkgB,EAASuK,EAAOjoB,KAAIC,IAAA,IAAEpF,EAAKuW,GAAMnR,EAAA,OACrCmR,EAAM1B,UAAUa,EAAO1V,GAAM,IAAK0V,KAAW4X,GAAe5X,EAAO,IAErE,OAAO1I,GAAO+U,GAAUc,GAASvR,EACnC,CAEO,SAASic,GACdP,EACArY,EACA6Y,EACAC,EACAH,GAEA,MAAMzK,EAASiK,GAAU5f,GAAOsgB,IAC1BtnB,GAAO0S,GAAQiK,EAAO,IACtBlgB,GAAWiW,GAAQiK,EAAO,IAC1BuK,EAASL,GAAUC,EAASrY,EAAKzO,EAAKvD,GAC5C,GAAmB,MAAf8qB,GAAuBA,IAAgBvnB,EACzC,MAAM,IAAIJ,GAAa,YAAW6O,EAAI8Y,eAAyB9Y,EAAIzO,cAErE,GAAI2c,EAAO5f,SAAWmqB,EAAOnqB,OAC3B,MAAM,IAAIvB,EAAc,aAAc0rB,EAAOnqB,OAAQ4f,EAAO5f,QAE9D,OAAOwI,OAAOC,YACZ0hB,EAAOjoB,KAAI,CAAAiQ,EAAgBsY,KAAK,IAAnB1sB,EAAMuV,GAAMnB,EAAA,MAAY,CACnCpU,EAAMuV,EAAMzO,YAAY+a,EAAO6K,GAAsBJ,GACtD,IAEL,CCzDO,SAASP,GAAU7mB,EAAUvD,GAClC,OAAOgrB,GAAgBtH,GAAU1R,GAAKzO,EAAKvD,EAC7C,CAkBO,SAASoS,GACdW,GAE6B,IAD7B,OAAEpS,GAAiCN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEvC,OAAOqqB,GAAWhH,GAAU1R,GAAKe,EAAQ,CAEvCL,YACAN,WACA8I,UAAY+P,GAAwB7Y,GAClC,IAAKW,KAAWkY,KAEX,OAANtqB,QAAM,IAANA,EAAAA,EAAUyJ,GAASe,YACxB,CAWO5C,eAAe2iB,GAAanY,GAWjC,aAVMvK,QAAQ2iB,IACZf,GAAUrX,EAAOxP,IAAKwP,EAAO/S,SAC1BwC,KAAI+F,UAAwB,IAAhBlL,EAAKuW,GAAMnR,EACD,MAAjBmR,EAAMgI,UAEV7I,EAAO1V,SAAauW,EAAMgI,QAAQ7I,EAAO1V,GAAM0V,EAAQA,GAAO,KAK7DX,GAAQW,EACjB,CASO,SAASL,GACdsI,EACAjC,GAEA,OAAO6R,GAAalH,GAAU1R,GAAKgJ,EAAWjC,EAAQ,CAEpDrG,aAEJ,CAQO,SAAS0Y,GAAYC,GAC1B,MAAMnmB,EAAwB,kBAAVmmB,GAAsBA,EAAM9Y,WAAW,OACvDhI,GAAO8gB,GACPA,EACJ,OAAOhhB,GAAO8E,GAAKjK,GAAOkF,GAAS+B,OACrC,CAQO,SAASmf,GACdC,GAEA,MAAMxY,EAASL,GAAS6Y,GACxB,GAAIvZ,GAAIyH,mBAAqB1G,EAAOxP,KAAOyO,GAAI2H,aAAe5G,EAAOxP,IACnE,MAAM,IAAIxE,EAAc,aAAc,iCAAkCgU,EAAOxP,KAEjF,OAAO6Q,GAAgBrB,EAAOsB,QAAStB,EAAOuB,MAChD,CC5GO,IAAKkX,GAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,sBAAbA,EAAAA,EAAa,sCAAbA,CAAa,MAQzB,MAAMC,GAAqBlvB,GAAQ6N,GAASgC,eACtCsf,GAAe,CACnBxZ,SAAAA,CAAUrV,GACR,OAAO4uB,GAAmBvZ,UAAU7H,GAAOE,GAAO1N,GAAQuN,GAASgC,eACrE,EACAjH,WAAAA,CAAYtI,GACV,OAAOwN,GAAOE,GAAOkhB,GAAmBtmB,YAAYtI,IAASuN,GAASiC,cACxE,GAMWge,GAAU,CAAC,CACtB9mB,IAAKogB,GAAe6H,GAAcG,cAClC3rB,QAAS2jB,GAAe,GAAG,GAC3BiI,eAAgBrvB,GAAQ6N,GAASkC,gBACjC9K,gBAAiBjF,GAAQ6N,GAAS8B,kBACjC,CACD3I,IAAKogB,GAAe6H,GAAcK,UAClC7rB,QAAS2jB,GAAe,GAAG,GAC3BiI,eAAgBrvB,GAAQ6N,GAASkC,gBACjCsY,OAAM,GACNpjB,gBAAiBjF,GAAQ6N,GAAS8B,kBACjC,CACD3I,IAAKogB,GAAe6H,GAAcM,cAClC9rB,QAAS2jB,GAAe,GAAG,GAC3BiI,eAAgBrvB,GAAQ6N,GAASkC,gBACjC9K,gBAAiBjF,GAAQ6N,GAAS8B,kBACjC,CACD3I,IAAKogB,GAAe6H,GAAclI,QAClCtjB,QAAS2jB,GAAe,GAAG,GAC3BiI,eAAgBrvB,GAAQ6N,GAASkC,gBACjC9K,gBAAiBjF,GAAQ6N,GAAS8B,kBACjC,CACD3I,IAAKogB,GAAe6H,GAAcngB,gBAClCrL,QAAS2jB,GAAe,GAAG,GAC3B8C,QAASiF,GACTlqB,gBAAiBjF,GAAQ6N,GAAS8B,mBC5C7B,SAAS6f,GAAehZ,GAC7B,OAAO2X,GAAWL,GAASmB,GAAezY,EAAQ,CAAC,EAAG3I,GAASsB,UACjE,CASO,SAASsgB,GACdhI,EACA8G,GAEA,OAAOF,GAAaP,GAASmB,GAAexH,EAAS8G,EAAa,CAAC,EACrE,C,oBCXMmB,GAAa,IAAI9lB,QAEhB,SAAS+lB,GACdpqB,EACAqqB,EACAC,GAEA,MAAMC,EAAW,CAACF,GACdC,GAASC,EAAS3mB,KAAK,YAC3B,MAAM4mB,EAAc/hB,GAAOzI,GAC3B,OAAOyH,GAAc,CAACL,GAAOG,KAAKgjB,EAAS3sB,KAAK,MAAOyP,GAAKmd,IAC9D,CAKe,MAAMC,WAAsB3kB,GAMzC3J,WAAAA,CAAY4R,GAGV,GAFA1R,QACA0R,EAAiC,kBAAdA,EAAyB3G,GAAOG,KAAKwG,EAAW,OAASA,EACnD,KAArBA,EAAUvP,OACZ,MAAM,IAAIvB,EAAc,YAAa,WAAY8Q,EAAUvP,QAE7D2rB,GAAWO,IAAIpuB,KAAMyR,GACrBzR,KAAK7B,QAAU8N,GACb+E,GAA0B6c,GAAWhL,IAAI7iB,OAAOuR,UAChDvF,GAASkC,eAEb,CAKA,eAAOmgB,GACL,OAAO,IAAIF,GAAc/c,KAAkBK,UAC7C,CAGA,UAAeC,CAAK5K,EAA2B2B,GAC7C,OAAOiJ,GAAK5K,EAAM+mB,GAAWhL,IAAI7iB,MACnC,CAEA,qBAAesuB,CACb5qB,GAE8B,IAD9B,QAAEsqB,EAAO,UAAED,KAActlB,GAAoDxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEjF,GAAiB,MAAb8rB,EACF,MAAM,IAAIptB,EAAc,YAAa,WAAYotB,GAEnD,MAAMG,EAAc/hB,GAAOzI,GACrB6qB,EAAkBT,GAAgBpqB,EAAaqqB,GAAuB,IAAZC,GAE1DnI,EAAa,OAAO7lB,KAAK0R,KAAK6c,EAAiB9lB,IACrD,OAAOuL,GAAQ,CAAE7O,IAAKyO,GAAIyQ,SAAUzH,UAAWsR,EAAarI,cAC9D,CAEA,iBAAe2I,CAAY1uB,EAAiB2I,GAC1C,OAAOzI,KAAK0R,KAAKO,GAAcnS,GAAU2I,EAC3C,CAEA,mBAAegB,CACb3C,EACA4C,GAI4B,IAH5B,KACEzJ,EAAI,QAAE2B,EAAO,UAAEmsB,EAAS,gBAAE3qB,KAAoBqF,GACFxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAElD,MAAMwsB,EAAQxb,GAAcnM,EAAM4C,EAAK,CACrCzJ,OAAM2B,UAASmsB,YAAW3qB,oBAEtB0O,QAAkB9R,KAAK0R,KAAK+c,EAAOhmB,GACzC,OAAOwD,GAAO6F,EAAW9F,GAASmC,UACpC,CAEA,8BAAexE,CACbvG,GAM4B,IAL5B,UAAE2qB,EAAS,yBAAEnO,EAAwB,SAAE8O,GAItCzsB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,GAAgB,MAAZysB,EAAkB,CACpB,MAAM/O,EAAwC,MAA5BC,EAAoCnM,GAAyBmM,GAA4B,UAC3G1Z,QAAQyoB,KAAM,gOAA+NhP,MAC/O,CACA,GAAIC,IAA6BnM,GAAyB6L,MAAO,CAC/D,MAAMrV,EAAa0jB,GAAe,CAChCxoB,KAAkB,IAAbupB,EAAoBtB,GAAclI,OAASkI,GAAcM,aAC9DF,eAAgBxtB,KAAK7B,QACrBiF,oBAEF,OAAOpD,KAAKgK,eAAeC,EAAY,CAAE8jB,aAC3C,CACA,GAAiB,MAAbA,EAAmB,MAAM,IAAIptB,EAAc,YAAa,WAAYotB,GACxE,MAAMpf,EAAUxD,GAAc,CAC5BL,GAAOG,KAAK8iB,GACZ5hB,GAAOnM,KAAK7B,SACZgO,GAAO/I,KAEH0O,QAAkB9R,KAAK0R,KAAK/C,GAClC,OAAO1C,GAAO6F,EAAW9F,GAASmC,UACpC,CAEA,kCAAevE,CACbxG,EACAnD,GAK4B,IAJ5B,UAAE8tB,EAAS,yBAAEnO,GAGZ3d,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,GAAI2d,IAA6BnM,GAAyB6L,MAAO,CAC/D,MAAMrV,EAAa0jB,GAAe,CAChCxoB,IAAKioB,GAAcK,SAAUD,eAAgBxtB,KAAK7B,QAASiF,kBAAiBojB,OAAQvmB,IAEtF,OAAOD,KAAKgK,eAAeC,EAAY,CAAE8jB,aAC3C,CACA,GAAiB,MAAbA,EAAmB,MAAM,IAAIptB,EAAc,YAAa,WAAYotB,GACxE,MAAMpf,EAAUxD,GAAc,CAC5BL,GAAOG,KAAK8iB,GACZ5hB,GAAOnM,KAAK7B,SACZgO,GAAOsL,GAAcxX,IACrBkM,GAAO/I,KAEH0O,QAAkB9R,KAAK0R,KAAK/C,GAClC,OAAO1C,GAAO6F,EAAW9F,GAASmC,UACpC,CAEA,sCAAetE,CACbzG,GAK4B,IAJ5B,UAAE2qB,EAAS,yBAAEnO,GAGZ3d,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,GAAI2d,IAA6BnM,GAAyB6L,MAAO,CAC/D,MAAMrV,EAAa0jB,GAAe,CAChCxoB,IAAKioB,GAAcG,aAAcC,eAAgBxtB,KAAK7B,QAASiF,oBAEjE,OAAOpD,KAAKgK,eAAeC,EAAY,CAAE8jB,aAC3C,CACA,GAAiB,MAAbA,EAAmB,MAAM,IAAIptB,EAAc,YAAa,WAAYotB,GACxE,MAAMpf,EAAUxD,GAAc,CAC5BL,GAAOG,KAAK8iB,GACZ5hB,GAAOnM,KAAK7B,SACZ2M,GAAOG,KAAK,QACZkB,GAAO/I,KAEH0O,QAAkB9R,KAAK0R,KAAK/C,GAClC,OAAO1C,GAAO6F,EAAW9F,GAASmC,UACpC,CAEA,yCAAerE,CACb1G,EACA2G,GAK4B,IAJ5B,UAAEgkB,EAAS,yBAAEnO,GAGZ3d,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,GAAI2d,IAA6BnM,GAAyB6L,MAAO,CAC/D,MAAMrV,EAAa0jB,GAAe,CAChCxoB,IAAKioB,GAAcngB,eAAgBob,QAASte,EAAe3G,oBAE7D,OAAOpD,KAAKgK,eAAeC,EAAY,CAAE8jB,aAC3C,CACA,MAAMa,EAAuBziB,GAAOpC,GAC9B8kB,EAAiB1iB,GAAOnM,KAAK7B,SAEnC,GAAqD,IAAjDywB,EAAqBE,QAAQD,GAC/B,MAAM,IAAIluB,EAAc,gBAAiB,+BAAgCoJ,GAE3E,GAAiB,MAAbgkB,EAAmB,MAAM,IAAIptB,EAAc,YAAa,WAAYotB,GACxE,MAAMpf,EAAUxD,GAAc,CAC5BL,GAAOG,KAAK8iB,GACZa,EACAziB,GAAO/I,KAEH0O,QAAkB9R,KAAK0R,KAAK/C,GAClC,OAAO1C,GAAO6F,EAAW9F,GAASmC,UACpC,CAEA,oBAAenE,CACbC,GAE4B,IAD5B,UAAE8jB,GAAmC9rB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEzC,GAAiB,MAAb8rB,EAAmB,MAAM,IAAIptB,EAAc,YAAa,WAAYotB,GACxE,MAAMpf,EAAUxD,GAAc,CAC5B6G,GAAqB,IAAIhH,WAAW,CAAC,IAAKF,GAAOG,KAAK8iB,GAAY5hB,GAAOlC,KAErE6H,QAAkB9R,KAAK0R,KAAK/C,GAClC,OAAO1C,GAAO6F,EAAW9F,GAASmC,UACpC,E,gBCtNa,SAAS4gB,GACtBntB,EACAC,EACAC,GAEA,MAAMktB,EAAiBnO,GAAwBA,EAC5ClR,MAAM,QAAQ,GAAGA,MAAM,KAAKvL,KAAK6qB,IAAOA,IAErCC,EAAoBF,EAAcptB,GAClCutB,EAAeH,EAAcntB,GAC7ButB,EAAeJ,EAAcltB,GAE7ButB,EAAOnX,KAAKoX,OAAOJ,KAAsBC,KAAiBC,GAAgB,EAC1EG,EAAsBC,GAAiCA,EAAWC,UACrEC,QAAO,CAACC,EAAKpN,EAAGkB,IAAQkM,EAAMpN,EAAI8M,GAAQ5L,GAAK,GAE5CmM,EAAUL,EAAmBL,GAC7BW,EAAWN,EAAmBJ,GAC9BW,EAAWP,EAAmBH,GACpC,OAAOQ,GAAWC,GAAYD,EAAUE,CAC1C,CCdO,MAAMC,GAAyBA,KACpC,MAAMC,EAAgB,IAAIC,IAE1B,MAAO,CACLC,OAAQ,CACNjwB,KAAM,iBACN,iBAAMkwB,CAAYC,EAASC,GAAM,IAAAC,EAC/B,MAAMrxB,EAAMmxB,EAAQG,QAAQ1N,IAAI,WAChCuN,EAAQG,QAAQC,OAAO,WACvB,MAAMC,EAActmB,SAAuCkmB,EAAKD,GAChE,GAAW,MAAPnxB,EAAa,OAAOwxB,IACxB,MAAMC,GAA6B,QAAvBJ,EAACN,EAAcnN,IAAI5jB,UAAI,IAAAqxB,EAAAA,EAAIlmB,QAAQC,WAAWsmB,KAAKF,GAI/D,OADAT,EAAc5B,IAAInvB,EAAKyxB,EAAIC,MAAKxmB,SAAYD,GAAM,OAAM,UACjDwmB,CACT,GAEFE,SAAU,UACX,EAGUC,GAA8BA,KACzC,MAAMC,EAAqB,IAAIb,IAE/B,MAAO,CACLC,OAAQ,CACNjwB,KAAM,uBACN,iBAAMkwB,CAAYC,EAASC,GAAM,IAAAU,EAC/B,GAAuB,QAAnBX,EAAQY,OAAkB,OAAOX,EAAKD,GAC1C,MAAMnxB,EAAMgyB,KAAKC,UAAU,CAACd,EAAQe,IAAKf,EAAQgB,OAC3C9I,EAAsC,QAA9ByI,EAAGD,EAAmBjO,IAAI5jB,UAAI,IAAA8xB,EAAAA,EAAIV,EAAKD,GACrDU,EAAmB1C,IAAInvB,EAAKqpB,GAC5B,IACE,aAAaA,CACf,CAAE,QACAwI,EAAmBN,OAAOvxB,EAC5B,CACF,GAEF2xB,SAAU,UACX,EAGUS,GAAuCA,KAClD,MAAMC,EAAc,IAAIrB,IAExB,MAAO,CACLC,OAAQ,CACNjwB,KAAM,iCACN,iBAAMkwB,CAAYC,EAASC,GAAM,IAAAkB,EAC/B,GAAuB,QAAnBnB,EAAQY,OAAkB,OAAOX,EAAKD,GAC1C,MAAMnxB,EAAMgyB,KAAKC,UAAU,CAACd,EAAQe,IAAKf,EAAQgB,OAC3C9I,EAA+B,QAAvBiJ,EAAGD,EAAYzO,IAAI5jB,UAAI,IAAAsyB,EAAAA,EAAIlB,EAAKD,GAE9C,OADAkB,EAAYlD,IAAInvB,EAAKqpB,GACdA,CACT,GAEFsI,SAAU,UACX,EAGUY,GACXC,IAA8B,CAE9BvB,OAAQ,CACNjwB,KAAM,kBACN,iBAAMkwB,CAAYC,EAASC,GACzB,IACE,aAAaA,EAAKD,EACpB,CAAE,MAAOllB,GAAO,IAAAwmB,EACd,KAAMxmB,aAAiBW,GAAAA,IAA+B,MAAjBX,EAAMklB,QAAiB,MAAMllB,EAClE,GAAkC,OAAhB,QAAdwmB,EAAAxmB,EAAMod,gBAAQ,IAAAoJ,OAAA,EAAdA,EAAgBC,YAAoB,MAAMzmB,EAE9C,IAAIkmB,EACJ,IACEA,EAAOH,KAAKW,MAAM1mB,EAAMod,SAASqJ,WACnC,CAAE,MAAOE,GACP,MAAM3mB,CACR,CACAA,EAAMpL,QAAW,GAAE,IAAIoX,IAAIhM,EAAMklB,QAAQe,KAAK5Z,SAAS3I,MAAM,WAC7D,MAAM9O,EAAU2xB,EAAWL,GAE3B,KADgB,KAAZtxB,IAAgBoL,EAAMpL,SAAY,IAAGA,KACnCoL,CACR,CACF,GAEF0lB,SAAU,YAGCkB,GAAwBA,CACnC7xB,EACA8xB,EACAC,EACAnwB,EACAC,KAAiB,CAEjB7B,KAAM,gBACN,iBAAMkwB,CAAYC,EAASC,GACzB,GAAI,IAAInZ,IAAIkZ,EAAQe,KAAK5Z,WAAawa,EAAY,OAAO1B,EAAKD,GAC9D,MAAMxuB,QAAgBowB,EACtB,GAAIpwB,aAAmBhC,MAAO,MAAMgC,EACpC,MAAMpE,EAAO,CAACoE,EAASC,EAAWC,GAClC,IAAKitB,MAAmBvxB,GAAO,MAAM,IAAIkE,EAAwBzB,KAASzC,GAC1E,OAAO6yB,EAAKD,EACd,IAGW6B,GAA0BA,CACrCC,EACAC,KAAyB,CAEzBjC,OAAQ,CACNjwB,KAAM,mBACN,iBAAMkwB,CAAYC,EAASC,GACzB,MAAM+B,EAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,KAE1CC,EAAY,IAAIhiB,MAAM6hB,GAAYI,KAAK,GAC1CluB,KAAI,CAACmuB,EAAG9O,MAAUA,EAAM,GAAKyO,IAAe,IACzCM,EAAcH,EAAU3C,QAAO,CAAC+C,EAAGC,IAAMD,EAAIC,IAC7CC,EAAgBN,EAAUjuB,KAAKkH,GAAQA,EAAKknB,EAAeL,IAEjE,IAAIjnB,EAAQ,IAAIW,GAAAA,EAAU,6BAC1B,IAAK,IAAI+mB,EAAU,EAAGA,GAAWV,EAAYU,GAAW,EAAG,CACzC,IAAZA,SAAqB1oB,GAAMyoB,EAAcC,EAAU,IACvD,IACE,aAAavC,EAAKD,EACpB,CAAE,MAAOyB,GAAG,IAAAgB,EAAAC,EACV,KAAMjB,aAAahmB,GAAAA,GAAY,MAAMgmB,EACrC,GAAIO,EAAmBzmB,SAA2B,QAAnBknB,EAAW,QAAXC,EAACjB,EAAEvJ,gBAAQ,IAAAwK,OAAA,EAAVA,EAAY5M,cAAM,IAAA2M,EAAAA,EAAI,GAAI,MAAMhB,EAChE3mB,EAAQ2mB,CACV,CACF,CACA,MAAM3mB,CACR,GAEF0lB,SAAU,Y,4BC5IL,MAAMmC,GAAqC,CAChDr2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,SACXC,gBAAiB,CACfliB,KAAM,CACJmiB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViB,OAAQ,CACNgyB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVmzB,SAAU,CACRF,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVozB,YAAa,CACXH,eAAgB,gBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+oB,UAAW,CACTkK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVqzB,MAAO,CACLJ,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGVszB,YAAa,CACXL,eAAgB,cAChBx2B,KAAM,CACJuD,KAAM,WAGVlC,OAAQ,CACNm1B,eAAgB,SAChBx2B,KAAM,CACJuD,KAAM,WAGVuzB,IAAK,CACHC,YAAa,CACXC,SAAU,GACVC,SAAU,IAEZT,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aAKdiW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV4zB,KAAM,CACJX,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV2B,QAAS,CACPsxB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV6zB,KAAM,CACJZ,eAAgB,OAChBx2B,KAAM,CACJuD,KAAM,WAGV8zB,QAAS,CACPb,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGV+zB,QAAS,CACPd,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGV6R,UAAW,CACTohB,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,cAOHg0B,GAAyC,CACpDv3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aACXC,gBAAiB,CACfiB,OAAQ,CACNhB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHk0B,GAAuC,CAClDz3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,WACXC,gBAAiB,CACfliB,KAAM,CACJmiB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViB,OAAQ,CACNgyB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVmzB,SAAU,CACRF,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVozB,YAAa,CACXH,eAAgB,gBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+oB,UAAW,CACTkK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVqzB,MAAO,CACLJ,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVszB,YAAa,CACXL,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVlC,OAAQ,CACNm1B,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVuzB,IAAK,CACHC,YAAa,CACXC,SAAU,GACVC,SAAU,IAEZT,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aAKdiW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV4zB,KAAM,CACJX,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV2B,QAAS,CACPsxB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV6zB,KAAM,CACJZ,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHm0B,GAA2C,CACtD13B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,eACXC,gBAAiB,CACfliB,KAAM,CACJmiB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHo0B,GAA6C,CACxD33B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBACXC,gBAAiB,CACf/xB,OAAQ,CACNgyB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHq0B,GAA+C,CAC1D53B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBACXC,gBAAiB,CACfliB,KAAM,CACJmiB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViB,OAAQ,CACNgyB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV8zB,QAAS,CACPb,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVmzB,SAAU,CACRF,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVozB,YAAa,CACXH,eAAgB,gBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+oB,UAAW,CACTkK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+zB,QAAS,CACPd,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV6R,UAAW,CACTohB,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4zB,KAAM,CACJX,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV2B,QAAS,CACPsxB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHs0B,GAAwC,CACnD73B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,YACXC,gBAAiB,CACfuB,aAAc,CACZtB,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBASZ3O,GAAuC,CAClD3nB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,WACXC,gBAAiB,CACf1e,GAAI,CACF2e,eAAgB,KAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,OAGfyB,YAAa,CACXvB,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVy0B,UAAW,CACTxB,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV8Q,KAAM,CACJmiB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4lB,WAAY,CACVqN,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,gBASP00B,GAAiC,CAC5CzB,eAAgB,KAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,KACX4B,WAAY,KACZC,yBAA0B,CACxB3B,eAAgB,OAChB4B,WAAY,QAEd7B,gBAAiB,CACflN,YAAa,CACXmN,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVoW,SAAU,CACR6c,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV0O,QAAS,CACPukB,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,WAGV80B,YAAa,CACX7B,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,WAGVwoB,gBAAiB,CACfyK,eAAgB,mBAChBx2B,KAAM,CACJuD,KAAM,WAGV+0B,YAAa,CACX9B,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,WAGV0oB,gBAAiB,CACfuK,eAAgB,mBAChBx2B,KAAM,CACJuD,KAAM,WAGV2oB,eAAgB,CACdsK,eAAgB,kBAChBx2B,KAAM,CACJuD,KAAM,WAGV4oB,WAAY,CACVqK,eAAgB,cAChBx2B,KAAM,CACJuD,KAAM,WAGV+oB,UAAW,CACTkK,eAAgB,aAChBx2B,KAAM,CACJuD,KAAM,WAGVg1B,YAAa,CACX/B,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cAGf9J,UAAW,CACTgK,eAAgB,aAChBx2B,KAAM,CACJuD,KAAM,WAGVkpB,OAAQ,CACN+J,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,WAGVypB,MAAO,CACLwJ,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV2pB,KAAM,CACJsJ,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGVwM,OAAQ,CACNymB,eAAgB,SAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBAGfkC,cAAe,CACbhC,eAAgB,iBAChBx2B,KAAM,CACJuD,KAAM,WAGVmpB,qBAAsB,CACpB8J,eAAgB,yBAChBx2B,KAAM,CACJuD,KAAM,WAGVopB,qBAAsB,CACpB6J,eAAgB,yBAChBx2B,KAAM,CACJuD,KAAM,WAGVspB,IAAK,CACH2J,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV6oB,qBAAsB,CACpBoK,eAAgB,yBAChBx2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aAKd8oB,qBAAsB,CACpBmK,eAAgB,yBAChBx2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aAKd0nB,YAAa,CACXuL,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,WAGV2nB,eAAgB,CACdsL,eAAgB,kBAChBx2B,KAAM,CACJuD,KAAM,WAGV8gB,SAAU,CACRmS,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WAGVk1B,UAAW,CACTjC,eAAgB,aAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBAGf/M,UAAW,CACTiN,eAAgB,aAChBx2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBx2B,KAAM,CACJuD,KAAM,WAGVqW,SAAU,CACR4c,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WAGV+nB,MAAO,CACLkL,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGVm1B,SAAU,CACRlC,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,QAGfqC,YAAa,CACXnC,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBAGf3K,QAAS,CACP6K,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGVqoB,SAAU,CACR4K,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGVmmB,aAAc,CACZ8M,eAAgB,gBAChBx2B,KAAM,CACJuD,KAAM,WAGVA,KAAM,CACJizB,eAAgB,OAChBx2B,KAAM,CACJuD,KAAM,WAGVqmB,SAAU,CACR4M,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WAGVwC,QAAS,CACPywB,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGVumB,OAAQ,CACN0M,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,WAGVmlB,QAAS,CACP8N,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGVme,SAAU,CACR8U,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBAKnB7N,UAAW,CACT+N,eAAgB,aAChBx2B,KAAM,CACJuD,KAAM,WAGVgW,QAAS,CACPid,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGV4G,KAAM,CACJqsB,eAAgB,OAChBx2B,KAAM,CACJuD,KAAM,WAGV+e,UAAW,CACTkU,eAAgB,aAChBx2B,KAAM,CACJuD,KAAM,WAGVgnB,QAAS,CACPiM,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,WAGVq1B,IAAK,CACHpC,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVinB,SAAU,CACRgM,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WAGVknB,SAAU,CACR+L,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WAGVmnB,SAAU,CACR8L,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WAGVonB,WAAY,CACV6L,eAAgB,cAChBx2B,KAAM,CACJuD,KAAM,WAGVyrB,QAAS,CACP+H,YAAa,CACX8B,QAAS,IAAIC,OAAO,2BAEtBtC,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGV0rB,KAAM,CACJuH,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV2rB,SAAU,CACRsH,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WAGVsU,GAAI,CACF2e,eAAgB,KAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aAGfnH,QAAS,CACPqH,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGV2B,QAAS,CACPsxB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVvD,KAAM,CACJw2B,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,OACNw1B,cAAe,CACb,UACA,kBACA,mBACA,oBACA,yBACA,uBACA,qBACA,iBACA,kBACA,wBACA,wBACA,mBACA,iBACA,gBACA,kBACA,iBACA,cACA,eACA,iBACA,eACA,mBACA,iBACA,aACA,WACA,oBAQCC,GAAwC,CACnDh5B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,YACXC,gBAAiB,CACfzK,UAAW,CACT0K,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aAKdyoB,UAAW,CACTwK,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,gBASP01B,GAA6C,CACxDj5B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBACX4B,WAAY,iBACZC,yBAA0B,CACxB3B,eAAgB,KAChB4B,WAAY,MAEd7B,gBAAiB,CACf2C,GAAI,CACF1C,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH41B,GAA0C,CACrDn5B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cACXC,gBAAiB,CACfv2B,KAAM,CACJ6Y,aAAc,QACdugB,YAAY,EACZ5C,eAAgB,OAChBx2B,KAAM,CACJuD,KAAM,WAGVxB,MAAO,CACLy0B,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH81B,GAAkC,CAC7Cr5B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,MACXC,gBAAiB,CACfv2B,KAAM,CACJw2B,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,OACNw1B,cAAe,CAAC,QAAS,WAG7Bh3B,MAAO,CACLy0B,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH+1B,GAA0C,CACrDt5B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cACXC,gBAAiB,CACfh0B,IAAK,CACHi0B,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVxD,GAAI,CACFy2B,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHg2B,GAA4C,CACvDv5B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBACXC,gBAAiB,CACfiD,MAAO,CACLhD,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHk2B,GAAyC,CACpDz5B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aACXC,gBAAiB,CACfmD,SAAU,CACRlD,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aAGfqD,YAAa,CACXnD,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,gBASP2kB,GAAsC,CACjDloB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,UACXC,gBAAiB,CACfx2B,GAAI,CACFy2B,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVulB,QAAS,CACP0N,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVq2B,QAAS,CACPpD,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,YAGVwgB,KAAM,CACJyS,eAAgB,OAChBx2B,KAAM,CACJuD,KAAM,OACNw1B,cAAe,CAAC,QAAS,iBAG7BpO,WAAY,CACV6L,eAAgB,cAChBx2B,KAAM,CACJuD,KAAM,WAGVyrB,QAAS,CACPwH,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,cAOHs2B,GAAgD,CAC3D75B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,oBACXC,gBAAiB,CACf/U,UAAW,CACTgV,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHu2B,GAA0C,CACrD95B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cACXC,gBAAiB,CACfwD,IAAK,CACHvD,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV2qB,SAAU,CACRsI,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,oBAKnB0D,IAAK,CACHxD,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,sBAKnB2D,SAAU,CACRphB,cAAc,EACd2d,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,eAOH22B,GAA4C,CACvDl6B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBACXC,gBAAiB,CACf4D,OAAQ,CACN3D,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH62B,GAA8C,CACzDp6B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBACXC,gBAAiB,CACf1e,GAAI,CACF2e,eAAgB,KAChBx2B,KAAM,CACJuD,KAAM,WAGV82B,QAAS,CACP7D,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,qBAORgE,GAA4C,CACvDt6B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBACXC,gBAAiB,CACfgE,SAAU,CACR/D,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVsqB,SAAU,CACR2I,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBx2B,KAAM,CACJuD,KAAM,WAGVq1B,IAAK,CACHpC,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVqqB,OAAQ,CACN4I,eAAgB,SAChBx2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBx2B,KAAM,CACJuD,KAAM,WAGVi3B,QAAS,CACPhE,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,yBAORmE,GAAgD,CAC3Dz6B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,oBACXC,gBAAiB,CACf1e,GAAI,CACF2e,eAAgB,KAChBx2B,KAAM,CACJuD,KAAM,WAGVsF,OAAQ,CACN2tB,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,WAGVm3B,SAAU,CACRlE,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,eAOHo3B,GAA4C,CACvD36B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBACXC,gBAAiB,CACfqE,QAAS,CACPpE,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBAKnB2D,SAAU,CACRzD,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,eASxBs3B,GAA2C,CACtD76B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,eACXC,gBAAiB,CACfv2B,KAAM,CACJw2B,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVygB,OAAQ,CACNwS,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVi0B,OAAQ,CACNhB,eAAgB,SAChBx2B,KAAM,CACJuD,KAAM,WAGVu3B,QAAS,CACPtE,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,0BAORyE,GAAiD,CAC5D/6B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,qBACXC,gBAAiB,CACf7L,SAAU,CACR8L,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVqnB,YAAa,CACX4L,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViB,OAAQ,CACNgyB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVonB,WAAY,CACV6L,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVinB,SAAU,CACRgM,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVsnB,QAAS,CACP2L,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVkG,IAAK,CACH+sB,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,YAKnBxL,YAAa,CACX0L,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwnB,WAAY,CACVyL,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,OACNw1B,cAAe,CAAC,KAAM,QAAS,eAO5BiC,GAAoC,CAC/Ch7B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,QACXC,gBAAiB,CACf90B,QAAS,CACP+0B,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV03B,OAAQ,CACNzE,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aAKd6G,KAAM,CACJosB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH23B,GAA2C,CACtDl7B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,eACXC,gBAAiB,CACf4E,SAAU,CACR3E,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,uBAGf8E,OAAQ,CACN5E,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aAGf+E,OAAQ,CACN7E,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,cAOH+3B,GAAuC,CAClDt7B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,WACXC,gBAAiB,CACf7L,SAAU,CACR8L,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViB,OAAQ,CACNgyB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVinB,SAAU,CACRgM,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVsnB,QAAS,CACP2L,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVunB,YAAa,CACX0L,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwnB,WAAY,CACVyL,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,OACNw1B,cAAe,CAAC,KAAM,WAG1BwC,YAAa,CACX/E,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,oBAORkF,GAAwC,CACnDx7B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,YACXC,gBAAiB,CACf1e,GAAI,CACF2e,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHk4B,GAA6C,CACxDz7B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBACXC,gBAAiB,CACf1tB,OAAQ,CACN2tB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHm4B,GAA6C,CACxD17B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBACXC,gBAAiB,CACfx2B,GAAI,CACFy2B,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVgW,QAAS,CACPid,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+e,UAAW,CACTkU,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV6mB,OAAQ,CACNoM,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,YAGVo4B,YAAa,CACXnF,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aAKdgnB,QAAS,CACPiM,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHq4B,GAAuC,CAClD57B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,WACXC,gBAAiB,CACfsF,SAAU,CACRrF,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHu4B,GAAkC,CAC7C97B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,MACXC,gBAAiB,CACf1J,IAAK,CACH2J,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHw4B,GAA+C,CAC1D/7B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBACXC,gBAAiB,CACfx2B,GAAI,CACFy2B,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV0nB,YAAa,CACXuL,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV2nB,eAAgB,CACdsL,eAAgB,kBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV8gB,SAAU,CACRmS,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHy4B,GAA4C,CACvDh8B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBACXC,gBAAiB,CACf0F,cAAe,CACbzF,eAAgB,iBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,qBASZhmB,GAA0C,CACrDtQ,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cACXC,gBAAiB,CACfx2B,GAAI,CACFy2B,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVoW,SAAU,CACR6c,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV24B,YAAa,CACX1F,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVqW,SAAU,CACR4c,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+nB,MAAO,CACLkL,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVqoB,SAAU,CACR4K,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVo1B,YAAa,CACXnC,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,QAGfhW,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH44B,GAAwC,CACnDn8B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,YACXC,gBAAiB,CACfx2B,GAAI,CACFy2B,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV2mB,MAAO,CACLsM,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVme,SAAU,CACR8U,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,qBASZnlB,GAAsC,CACjDnR,KAAM,CACJuD,KAAM,YACN+yB,UAAW,UACXC,gBAAiB,CACfx2B,GAAI,CACFy2B,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV80B,YAAa,CACX7B,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+0B,YAAa,CACX9B,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV8pB,cAAe,CACbmJ,eAAgB,iBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwoB,gBAAiB,CACfyK,eAAgB,mBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV0oB,gBAAiB,CACfuK,eAAgB,mBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV2oB,eAAgB,CACdsK,eAAgB,kBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVg1B,YAAa,CACX/B,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cAGfhK,UAAW,CACTkK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVypB,MAAO,CACLwJ,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+pB,UAAW,CACTkJ,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4oB,WAAY,CACVqK,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVgqB,YAAa,CACXiJ,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH64B,GAAyC,CACpDp8B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aACXC,gBAAiB,CACftI,OAAQ,CACNuI,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH84B,GAAqC,CAChDr8B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,SACXC,gBAAiB,CACf+F,oBAAqB,CACnB9F,eAAgB,yBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVg5B,UAAW,CACT/F,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVi5B,WAAY,CACVhG,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVk5B,QAAS,CACPjG,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,YAGVm5B,aAAc,CACZ3F,YAAa,CACX4F,iBAAkB,IAClBC,iBAAkB,GAEpBpG,eAAgB,gBAChBx2B,KAAM,CACJuD,KAAM,WAGVs5B,UAAW,CACTrG,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,YAGVu5B,UAAW,CACTtG,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,eAKnByG,YAAa,CACXvG,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVy5B,aAAc,CACZxG,eAAgB,gBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV05B,UAAW,CACTzG,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV25B,gBAAiB,CACf1G,eAAgB,mBAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,oBAGf6G,yBAA0B,CACxB3G,eAAgB,6BAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV8tB,UAAW,CACTmF,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV65B,WAAY,CACV5G,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV85B,gBAAiB,CACf7G,eAAgB,qBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+5B,eAAgB,CACd9G,eAAgB,mBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHg6B,GAAuC,CAClDv9B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,WACXC,gBAAiB,CACfrxB,QAAS,CACPsxB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVi6B,kBAAmB,CACjBhH,eAAgB,sBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHk6B,GAA8C,CACzDz9B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBACXC,gBAAiB,CACfmH,QAAS,CACPlH,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVo6B,SAAU,CACRnH,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH6lB,GAAsC,CACjDppB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,UACXC,gBAAiB,CACflN,YAAa,CACXmN,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVoW,SAAU,CACR6c,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV0O,QAAS,CACPukB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH8b,GAA+C,CAC1Drf,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBACXC,gBAAiB,CACftL,YAAa,CACXuL,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV2nB,eAAgB,CACdsL,eAAgB,kBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV8gB,SAAU,CACRmS,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVk1B,UAAW,CACTjC,eAAgB,aAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,QAGf/M,UAAW,CACTiN,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBx2B,KAAM,CACJuD,KAAM,cAOH+b,GAA6C,CACxDtf,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBACXC,gBAAiB,CACfjW,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVk1B,UAAW,CACTjC,eAAgB,aAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBAGf1c,SAAU,CACR4c,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,cAOHgc,GAA4C,CACvDvf,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBACXC,gBAAiB,CACf3c,SAAU,CACR4c,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+nB,MAAO,CACLkL,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV8gB,SAAU,CACRmS,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVm1B,SAAU,CACRlC,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,QAGfqC,YAAa,CACXnC,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBAGfhW,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVoW,SAAU,CACR6c,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,cAOHq6B,GAA8C,CACzD59B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBACXC,gBAAiB,CACf5K,QAAS,CACP6K,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVqoB,SAAU,CACR4K,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVo1B,YAAa,CACXnC,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBAGfhW,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVqW,SAAU,CACR4c,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,cAOHkmB,GAA6C,CACxDzpB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBACXC,gBAAiB,CACf7M,aAAc,CACZ8M,eAAgB,gBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVgmB,UAAW,CACTiN,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,cAOHomB,GAA0C,CACrD3pB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cACXC,gBAAiB,CACfhzB,KAAM,CACJizB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVqmB,SAAU,CACR4M,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwC,QAAS,CACPywB,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVgmB,UAAW,CACTiN,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,cAOHsmB,GAA2C,CACtD7pB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,eACXC,gBAAiB,CACfzM,OAAQ,CACN0M,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVmlB,QAAS,CACP8N,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVme,SAAU,CACR8U,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBAKnB7N,UAAW,CACT+N,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVgmB,UAAW,CACTiN,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,cAOHymB,GAA6C,CACxDhqB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBACXC,gBAAiB,CACfzM,OAAQ,CACN0M,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV8lB,YAAa,CACXmN,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVgmB,UAAW,CACTiN,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,cAOH0mB,GAA2C,CACtDjqB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,eACXC,gBAAiB,CACfzM,OAAQ,CACN0M,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVgmB,UAAW,CACTiN,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,cAOHs6B,GAA2C,CACtD79B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,eACXC,gBAAiB,CACf7M,aAAc,CACZ8M,eAAgB,gBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHu6B,GAAuC,CAClD99B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,WACXC,gBAAiB,CACfzM,OAAQ,CACN0M,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHsoB,GAA8C,CACzD7rB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBACXC,gBAAiB,CACf8B,YAAa,CACX7B,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwoB,gBAAiB,CACfyK,eAAgB,mBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+0B,YAAa,CACX9B,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV0oB,gBAAiB,CACfuK,eAAgB,mBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV2oB,eAAgB,CACdsK,eAAgB,kBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4oB,WAAY,CACVqK,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV+oB,UAAW,CACTkK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVg1B,YAAa,CACX/B,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBAORvJ,GAA+C,CAC1D/sB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBACXC,gBAAiB,CACf/J,UAAW,CACTgK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVkpB,OAAQ,CACN+J,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+oB,UAAW,CACTkK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVypB,MAAO,CACLwJ,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH0pB,GAAgD,CAC3DjtB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,oBACXC,gBAAiB,CACf/J,UAAW,CACTgK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV2pB,KAAM,CACJsJ,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+oB,UAAW,CACTkK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVypB,MAAO,CACLwJ,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH6a,GAAqD,CAChEpe,KAAM,CACJuD,KAAM,YACN+yB,UAAW,yBACXC,gBAAiB,CACf/J,UAAW,CACTgK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVkpB,OAAQ,CACN+J,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV0O,QAAS,CACPukB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVypB,MAAO,CACLwJ,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwM,OAAQ,CACNymB,eAAgB,SAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBAGfhK,UAAW,CACTkK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGVi1B,cAAe,CACbhC,eAAgB,iBAChBx2B,KAAM,CACJuD,KAAM,cAOHgpB,GAAmD,CAC9DvsB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,uBACXC,gBAAiB,CACf/J,UAAW,CACTgK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVkpB,OAAQ,CACN+J,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVmpB,qBAAsB,CACpB8J,eAAgB,yBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVopB,qBAAsB,CACpB6J,eAAgB,yBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHqpB,GAAiD,CAC5D5sB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,qBACXC,gBAAiB,CACf/J,UAAW,CACTgK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVkpB,OAAQ,CACN+J,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV0O,QAAS,CACPukB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGVspB,IAAK,CACH2J,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHupB,GAA6C,CACxD9sB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBACXC,gBAAiB,CACf/J,UAAW,CACTgK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVkpB,OAAQ,CACN+J,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV0O,QAAS,CACPukB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGVspB,IAAK,CACH2J,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH4pB,GAA8C,CACzDntB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBACXC,gBAAiB,CACf/J,UAAW,CACTgK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVkpB,OAAQ,CACN+J,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVmpB,qBAAsB,CACpB8J,eAAgB,yBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVopB,qBAAsB,CACpB6J,eAAgB,yBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHmqB,GAAoD,CAC/D1tB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,wBACXC,gBAAiB,CACf/J,UAAW,CACTgK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVkpB,OAAQ,CACN+J,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV0O,QAAS,CACPukB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,cAOHw6B,GAAoD,CAC/D/9B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,wBACXC,gBAAiB,CACf/J,UAAW,CACTgK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVkpB,OAAQ,CACN+J,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV6oB,qBAAsB,CACpBoK,eAAgB,yBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aAKd8oB,qBAAsB,CACpBmK,eAAgB,yBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aAKd+oB,UAAW,CACTkK,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVypB,MAAO,CACLwJ,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV0O,QAAS,CACPukB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,cAOHy6B,GAAqC,CAChDh+B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,SACXC,gBAAiB,CACf4D,OAAQ,CACN3D,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH06B,GAA0C,CACrDj+B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cACXC,gBAAiB,CACfzb,KAAM,CACJ0b,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVoX,KAAM,CACJ6b,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV26B,UAAW,CACT1H,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV46B,SAAU,CACR3H,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV66B,YAAa,CACX5H,eAAgB,eAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV86B,QAAS,CACP7H,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+6B,cAAe,CACb9H,eAAgB,iBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV8tB,UAAW,CACTmF,eAAgB,aAChBx2B,KAAM,CACJuD,KAAM,WAGVw5B,YAAa,CACXvG,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,WAGVy5B,aAAc,CACZxG,eAAgB,gBAChBx2B,KAAM,CACJuD,KAAM,WAGVg7B,WAAY,CACV/H,eAAgB,cAChBx2B,KAAM,CACJuD,KAAM,WAGVi7B,OAAQ,CACNhI,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,cAOHk7B,GAAoC,CAC/Cz+B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,QACXC,gBAAiB,CACfmI,MAAO,CACLlI,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aAKdo7B,QAAS,CACPnI,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,gBASPq7B,GAAwC,CACnD5+B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,YACXC,gBAAiB,CACfsI,UAAW,CACTrI,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,uBAGfwI,UAAW,CACTtI,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,uBAGfqI,QAAS,CACPnI,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHw7B,GAAiD,CAC5D/+B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,qBACXC,gBAAiB,CACfmH,QAAS,CACPlH,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,WAGVo6B,SAAU,CACRnH,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,cAOHy7B,GAAiD,CAC5Dh/B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,qBACXC,gBAAiB,CACf0I,SAAU,CACRzI,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGV27B,WAAY,CACV1I,eAAgB,aAChBx2B,KAAM,CACJuD,KAAM,cAOHob,GAA+C,CAC1D3e,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBACXC,gBAAiB,CACfhd,QAAS,CACPid,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV4G,KAAM,CACJqsB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+e,UAAW,CACTkU,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVgnB,QAAS,CACPiM,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVq1B,IAAK,CACHpC,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVinB,SAAU,CACRgM,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVknB,SAAU,CACR+L,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHqb,GAA6C,CACxD5e,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBACXC,gBAAiB,CACf7L,SAAU,CACR8L,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGVonB,WAAY,CACV6L,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVq1B,IAAK,CACHpC,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVinB,SAAU,CACRgM,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVknB,SAAU,CACR+L,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH47B,GAAyC,CACpDn/B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aACXC,gBAAiB,CACf1e,GAAI,CACF2e,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH67B,GAA0C,CACrDp/B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cACXC,gBAAiB,CACfrI,SAAU,CACRsI,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,WAGV+qB,UAAW,CACTkI,eAAgB,YAChBx2B,KAAM,CACJuD,KAAM,WAGV87B,gBAAiB,CACf7I,eAAgB,mBAChBx2B,KAAM,CACJuD,KAAM,WAGV+7B,OAAQ,CACN9I,eAAgB,SAChBx2B,KAAM,CACJuD,KAAM,WAGVirB,QAAS,CACPgI,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,WAGV04B,cAAe,CACbzF,eAAgB,iBAChBx2B,KAAM,CACJuD,KAAM,WAGVg8B,eAAgB,CACd/I,eAAgB,kBAChBx2B,KAAM,CACJuD,KAAM,WAGVi8B,MAAO,CACLhJ,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,cAOHk8B,GAAyC,CACpDz/B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aACXC,gBAAiB,CACfhd,QAAS,CACPid,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGV4G,KAAM,CACJqsB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+e,UAAW,CACTkU,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVq1B,IAAK,CACHpC,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVinB,SAAU,CACRgM,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGVknB,SAAU,CACR+L,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVyrB,QAAS,CACP+H,YAAa,CACX8B,QAAS,IAAIC,OAAO,2BAEtBtC,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHm8B,GAAuC,CAClD1/B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,WACXC,gBAAiB,CACftH,KAAM,CACJuH,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVq1B,IAAK,CACHpC,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVinB,SAAU,CACRgM,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+lB,IAAK,CACHkN,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,WAGV2rB,SAAU,CACRsH,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVsU,GAAI,CACF2e,eAAgB,KAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBAORvX,GAA0C,CACrD/e,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cACXC,gBAAiB,CACfpH,QAAS,CACPqH,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+c,IAAK,CACHkW,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGViW,MAAO,CACLgd,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,WAGVsU,GAAI,CACF2e,eAAgB,KAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBAORqJ,GAAoD,CAC/D3/B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,wBACXC,gBAAiB,CACf/M,OAAQ,CACNgN,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHq8B,GAA+C,CAC1DpJ,eAAgB,mBAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBACX4B,WAAY,iBACZC,yBAA0Bc,GAAej5B,KAAKm4B,yBAC9C5B,gBAAiB,IACZ0C,GAAej5B,KAAKu2B,gBACvBhoB,KAAM,CACJioB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVoqB,GAAI,CACF6I,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHs8B,GAAiD,CAC5DrJ,eAAgB,qBAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,qBACX4B,WAAY,iBACZC,yBAA0Bc,GAAej5B,KAAKm4B,yBAC9C5B,gBAAiB,IACZ0C,GAAej5B,KAAKu2B,gBACvB5I,GAAI,CACF6I,eAAgB,KAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHu8B,GAA8C,CACzDtJ,eAAgB,kBAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBACX4B,WAAY,iBACZC,yBAA0Bc,GAAej5B,KAAKm4B,yBAC9C5B,gBAAiB,IACZ0C,GAAej5B,KAAKu2B,gBACvBhoB,KAAM,CACJioB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHw8B,GAAkD,CAC7DvJ,eAAgB,sBAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,sBACX4B,WAAY,iBACZC,yBAA0Bc,GAAej5B,KAAKm4B,yBAC9C5B,gBAAiB,IACZ0C,GAAej5B,KAAKu2B,gBACvBrM,MAAO,CACLsM,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+e,UAAW,CACTkU,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4G,KAAM,CACJqsB,eAAgB,OAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aAGf/L,QAAS,CACPiM,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVknB,SAAU,CACR+L,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHy8B,GAAmD,CAC9DxJ,eAAgB,uBAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,uBACX4B,WAAY,iBACZC,yBAA0Bc,GAAej5B,KAAKm4B,yBAC9C5B,gBAAiB,IACZ0C,GAAej5B,KAAKu2B,gBACvB3I,OAAQ,CACN4I,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVsqB,SAAU,CACR2I,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVif,WAAY,CACVgU,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV4D,OAAQ,CACNqvB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVq1B,IAAK,CACHpC,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVinB,SAAU,CACRgM,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVknB,SAAU,CACR+L,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH08B,GAAuD,CAClEjgC,KAAM,CACJuD,KAAM,YACN+yB,UAAW,2BACXC,gBAAiB,IACZ4I,GAAWn/B,KAAKu2B,gBACnB5L,WAAY,CACV6L,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOT,IAAI28B,GAAiB,CAC1B,QAASjI,GACTgB,eAAgBA,GAChB,kCAAmC2G,GACnC,oCAAqCC,GACrC,iCAAkCC,GAClC,qCAAsCC,GACtC,sCAAuCC,IC7qIlC,MAAMG,GAA6B,CACxCC,cAAe,SACfC,OAAQ,CACNxnB,aAAc,mBACdugB,YAAY,EACZ5C,eAAgB,SAChBx2B,KAAM,CACJuD,KAAM,YAKC+8B,GAA+B,CAC1CF,cAAe,QACfC,OAAQ,CACN7J,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVg9B,cAAc,GAGHC,GAAuC,CAClDJ,cAAe,cACfC,OAAQ,CACNxnB,cAAc,EACd2d,eAAgB,gBAChBx2B,KAAM,CACJuD,KAAM,aAKC8Q,GAA8B,CACzC+rB,cAAe,OACfC,OAAQ,CACN7J,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,YAKCiB,GAAgC,CAC3C47B,cAAe,SACfC,OAAQ,CACNtJ,YAAa,CACX4F,iBAAkB,oBAClBC,iBAAkB,GAEpBpG,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,YAKC0sB,GAA+B,CAC1CmQ,cAAe,QACfC,OAAQ,CACNtJ,YAAa,CACX6F,iBAAkB,GAEpBpG,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,YAKC0qB,GAAgC,CAC3CmS,cAAe,SACfC,OAAQ,CACN7J,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,YAKC6d,GAAoC,CAC/Cgf,cAAe,CAAC,UAAW,YAC3BC,OAAQ,CACNxnB,aAAc,MACd2d,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,OACNw1B,cAAe,CAAC,MAAO,iBAKhB0H,GAAkC,CAC7CL,cAAe,CAAC,UAAW,eAC3BC,OAAQ,CACNxnB,aAAc,mBACdugB,YAAY,EACZ5C,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,YAKCmxB,GAA2B,CACtC0L,cAAe,OACfC,OAAQK,IAGGC,GAA4B,CACvCP,cAAe,OACfC,OAAQO,IAGGryB,GAAgC,CAC3C6xB,cAAe,CAAC,UAAW,QAC3BC,OAAQ,CACN7J,eAAgB,OAChBx2B,KAAM,CACJuD,KAAM,YAKCs9B,GAAiC,CAC5CT,cAAe,CAAC,UAAW,SAC3BC,OAAQ,CACNxnB,aAAc,GACdke,YAAa,CACX4F,iBAAkB,IAClBC,iBAAkB,GAEpBpG,eAAgB,QAChBx2B,KAAM,CACJuD,KAAM,YAKCvD,GAAgC,CAC3CogC,cAAe,CAAC,UAAW,QAC3BC,OAAQ,CACNxnB,aAAc,MACd2d,eAAgB,OAChBx2B,KAAM,CACJuD,KAAM,OACNw1B,cAAe,CAAC,OAAQ,SAAU,UAK3BpN,GAAiC,CAC5CyU,cAAe,UACfC,OAAQ,CACN7J,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,YAKCA,GAA8B,CACzC68B,cAAe,OACfC,OAAQ,CACN7J,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,YC3GL,MAAMu9B,WAAaC,GAAAA,EASxB59B,WAAAA,CAAYm9B,EAAev0B,GAA8B,IAAApE,EAAAq5B,EACvD,QAAcv7B,IAAV66B,EACF,MAAM,IAAIp9B,MAAM,0BAIb6I,IACHA,EAAU,CAAC,GAEb,MAAMk1B,EAA+B,CACnCC,mBAAoB,mCAGhBC,EAAkB,6BAClBC,EACJr1B,EAAQs1B,kBAAoBt1B,EAAQs1B,iBAAiBD,gBAChD,GAAEr1B,EAAQs1B,iBAAiBD,mBAAmBD,IAC9C,GAAEA,IAEHG,EAAsB,IACvBL,KACAl1B,EACHs1B,iBAAkB,CAChBD,mBAEFG,SAA6C,QAArC55B,EAAkB,QAAlBq5B,EAAEj1B,EAAQw1B,gBAAQ,IAAAP,EAAAA,EAAIj1B,EAAQy1B,eAAO,IAAA75B,EAAAA,EAAI,WAEnDtE,MAAMi+B,GAENh+B,KAAKg9B,MAAQA,CACf,CAMAmB,YAAAA,CACE11B,GAEA,OAAOzI,KAAKo+B,qBAAqB,CAAE31B,WAAW41B,GAChD,CAMA1gB,kBAAAA,CACElV,GAEA,OAAOzI,KAAKo+B,qBACV,CAAE31B,WACF61B,GAEJ,CAMAC,sBAAAA,CACE91B,GAEA,OAAOzI,KAAKo+B,qBACV,CAAE31B,WACF+1B,GAEJ,CAMAC,wBAAAA,CACEh2B,GAEA,OAAOzI,KAAKo+B,qBACV,CAAE31B,WACFi2B,GAEJ,CAMAC,kBAAAA,CACEl2B,GAEA,OAAOzI,KAAKo+B,qBACV,CAAE31B,WACFm2B,GAEJ,CAOAC,iBAAAA,CACE9tB,EACAtI,GAEA,OAAOzI,KAAKo+B,qBACV,CAAErtB,OAAMtI,WACRq2B,GAEJ,CAOAC,mBAAAA,CACE79B,EACAuH,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEl9B,SAAQuH,WACVu2B,GAEJ,CAOAC,yBAAAA,CACEluB,EACAtI,GAEA,OAAOzI,KAAKo+B,qBACV,CAAErtB,OAAMtI,WACRy2B,GAEJ,CAOAC,+BAAAA,CACEpuB,EACAtI,GAEA,OAAOzI,KAAKo+B,qBACV,CAAErtB,OAAMtI,WACR22B,GAEJ,CAQAC,sCAAAA,CACEtuB,EACA4b,EACAlkB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAErtB,OAAM4b,QAAOlkB,WACf62B,GAEJ,CAOAC,oCAAAA,CACExuB,EACAtI,GAEA,OAAOzI,KAAKo+B,qBACV,CAAErtB,OAAMtI,WACR+2B,GAEJ,CAMAC,oBAAAA,CACEh3B,GAEA,OAAOzI,KAAKo+B,qBACV,CAAE31B,WACFi3B,GAEJ,CAOAC,mBAAAA,CACE5uB,EACAtI,GAEA,OAAOzI,KAAKo+B,qBACV,CAAErtB,OAAMtI,WACRm3B,GAEJ,CAOAC,qBAAAA,CACE3+B,EACAuH,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEl9B,SAAQuH,WACVq3B,GAEJ,CAOAC,kBAAAA,CACEpV,EACAliB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQliB,WACVu3B,GAEJ,CAQAC,2BAAAA,CACEtV,EACAzpB,EACAuH,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQzpB,SAAQuH,WAClBy3B,GAEJ,CASAC,yBAAAA,CACExV,EACA5Z,EACAtI,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQ5Z,OAAMtI,WAChB23B,GAEJ,CAOAC,qCAAAA,CACE1V,EACAliB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQliB,WACV63B,GAEJ,CAQAviB,mBAAAA,CACE4M,EACAliB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQliB,WACV83B,GAEJ,CAUAC,kBAAAA,CACEpP,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACRg4B,GAEJ,CAOAC,oBAAAA,CACE3vB,EACAtI,GAEA,OAAOzI,KAAKo+B,qBACV,CAAErtB,OAAMtI,WACRk4B,GAEJ,CAMAC,wBAAAA,CACE7vB,EACAtI,GAEA,OAAOzI,KAAKo+B,qBACV,CAAErtB,OAAMtI,WACRo4B,GAEJ,CAOAC,eAAAA,CACE1P,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACRs4B,GAEJ,CAOAC,WAAAA,CACErW,EACAliB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQliB,WACVw4B,GAEJ,CAOAC,eAAAA,CACEvW,EACAliB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQliB,WACV04B,GAEJ,CAOAC,cAAAA,CACEzW,EACAliB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQliB,WACV44B,GAEJ,CAOAvgB,iBAAAA,CACE6J,EACAliB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQliB,WACV64B,GAEJ,CAOAC,wBAAAA,CACE5W,EACAliB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQliB,WACV+4B,GAEJ,CAQAC,gCAAAA,CACE9W,EACAtC,EACA5f,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQtC,UAAS5f,WACnBi5B,GAEJ,CAOAC,kBAAAA,CACE1hC,EACAwI,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEn+B,OAAMwI,WACRm5B,GAEJ,CAOAC,kBAAAA,CACElX,EACAliB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEzT,SAAQliB,WACVq5B,GAEJ,CAMAC,aAAAA,CACEt5B,GAEA,OAAOzI,KAAKo+B,qBAAqB,CAAE31B,WAAWu5B,GAChD,CAMAC,SAAAA,CAAUx5B,GACR,OAAOzI,KAAKo+B,qBAAqB,CAAE31B,WAAWy5B,GAChD,CAMAC,YAAAA,CACE15B,GAEA,OAAOzI,KAAKo+B,qBAAqB,CAAE31B,WAAW25B,GAChD,EAGF,MAAMC,GAAa5E,GAAAA,EAA4B6E,GAAqB,GAE9DjE,GAAsD,CAC1Djb,KAAM,kBACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,IAEN/D,GAA4D,CAChElb,KAAM,yBACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,IAEN7D,GAAgE,CACpEpb,KAAM,8BACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,IAEN3D,GAAkE,CACtEtb,KAAM,gCACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,IAENzD,GAA4D,CAChExb,KAAM,yBACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,IAENvD,GAA2D,CAC/D1b,KAAM,6BACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENrD,GAA6D,CACjE5b,KAAM,iCACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENnD,GAAmE,CACvE9b,KAAM,sCACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENjD,GAAyE,CAC7Ehc,KAAM,4CACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAEN/C,GACJ,CACElc,KAAM,0DACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,GAAiBA,IACnDE,iBAAkB,CAACF,IACnBP,WAAUA,IAER7C,GACJ,CACEpc,KAAM,kDACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAER3C,GAA8D,CAClEtc,KAAM,0BACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,IAENzC,GAA6D,CACjExc,KAAM,8BACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENvC,GAA+D,CACnE1c,KAAM,kCACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENrC,GAA4D,CAChE5c,KAAM,wBACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENnC,GAAqE,CACzE9c,KAAM,wCACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,GAAmBA,IACrDE,iBAAkB,CAACF,IACnBP,WAAUA,IAENjC,GAAmE,CACvEhd,KAAM,oCACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,GAAiBA,IACnDE,iBAAkB,CAACF,IACnBP,WAAUA,IAEN/B,GACJ,CACEld,KAAM,6CACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAER9B,GAA6D,CACjEnd,KAAM,mCACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,GAAwBA,IAC1CC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAEN5B,GAA4D,CAChErd,KAAM,cACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAmBA,IACtCI,UAAW,OACXX,WAAUA,IAEN1B,GAA8D,CAClEvd,KAAM,0BACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENxB,GAAkE,CACtEzd,KAAM,+BACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENtB,GAAyD,CAC7D3d,KAAM,mBACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAmBA,IACtCI,UAAW,OACXX,WAAUA,IAENpB,GAAqD,CACzD7d,KAAM,yBACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHA,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENlB,GAAyD,CAC7D/d,KAAM,8BACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENhB,GAAwD,CAC5Dje,KAAM,6BACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENf,GAA2D,CAC/Dle,KAAM,uBACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENb,GAAkE,CACtEpe,KAAM,+BACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CACfC,GACAA,GACAA,GACAA,IAEFC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENX,GACJ,CACEte,KAAM,0CACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,GAAmBA,IACrDE,iBAAkB,CAACF,IACnBP,WAAUA,IAERT,GAA4D,CAChExe,KAAM,mBACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENP,GAA4D,CAChE1e,KAAM,wBACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,GAAkBA,IAClCE,iBAAkB,CAACF,IACnBP,WAAUA,IAENL,GAAuD,CAC3D5e,KAAM,mBACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,KAGhBK,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,IAENH,GAAmD,CACvD9e,KAAM,aACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,KAGhBK,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,IAEND,GAAsD,CAC1Dhf,KAAM,wBACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACV/lC,KAAM,CAAEuD,KAAM,WAAY2zB,QAAS,CAAEl3B,KAAM,CAAEuD,KAAM,eAIzD0iC,gBAAiB,CAACC,IAClBC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,I,0SChvCZ,MAAMY,GAAsB,CAC1B,UAAW,WAAY,MAAO,SAAU,UAAW,gBACnD,kBAAmB,kBAAmB,iBAAkB,uBACxD,uBAAwB,WAAY,WAGhCC,GAAsB,CAC1B,OAAQ,MAAO,UAAW,WAC1B,QAAS,YAAa,SAAU,cAAe,iBAC/C,MAAO,UAAW,YAClB,UAAW,WAAY,YAAa,2BAA4B,oBAChE,UAAW,YAAa,SACf,IAAAC,GAAA,IAAAzhB,QAAA0hB,GAAA,IAAA1hB,QAAA2hB,GAAA,IAAA3hB,QAEX,MAAM4hB,WAAwBC,GAAQ1jC,WAAAA,GAAA,SAAAoC,WAAA+f,GAAA,KAAAqhB,IAAArhB,GAAA,KAAAohB,IAAAphB,GAAA,KAAAmhB,GAAA,CACpC,0BAAe/E,CACboF,EACAC,GAEA,MAAMjmC,EAAOgN,GACXg5B,GACAn/B,IAAA,IAAEpF,EAAKR,GAAM4F,EAAA,MAAK,CAACpF,EAAG8jB,GAAE/iB,KAAIojC,GAAAM,IAAAt6B,KAAJpJ,KAAgBvB,GAAO,IAEjD,OAAAskB,GAAO/iB,KAAIqjC,GAAAM,IAAAv6B,KAAJpJ,WAAsBD,MAAMq+B,qBAAqB5gC,EAAMimC,GAChE,EAkCD,SAAAG,GAhCU98B,EAAW+8B,GAIlB,OAAIxzB,MAAMyzB,QAAQh9B,GAAcA,EAAK1C,KAAK0e,GAACC,GAAK/iB,KAAImjC,GAAAS,IAAAx6B,KAAJpJ,KAAc8iB,EAAG+gB,KACrD,MAAR/8B,GAAgC,kBAATA,EAClB0D,GAAU1D,GAAM4c,IAAkB,IAAhBzkB,EAAKR,GAAMilB,EAClC,OAAa,MAATjlB,EAAsB,CAACQ,EAAKR,GAC5BwkC,GAAoBc,MAAM5gB,GAAMA,IAAMlkB,IAAa,CAACA,EAAK4kC,EAAUG,OAAOvlC,IAC1EykC,GAAoBa,MAAM5gB,GAAMA,IAAMlkB,IAAa,CAACA,EAAK4kC,EAAUtqB,OAAO9a,IACvE,CAACQ,EAAG8jB,GAAE/iB,KAAImjC,GAAAS,IAAAx6B,KAAJpJ,KAAcvB,EAAOolC,GAAW,IAG1C/8B,CACT,CAAC,SAAA48B,GAEU58B,GACT,OAAAic,GAAO/iB,KAAImjC,GAAAS,IAAAx6B,KAAJpJ,KAAc8G,EAAM,CACzBk9B,OAASvlC,GACHA,aAAiB8U,GAAAA,EAAkB9U,EAAMqX,UACtCrX,EAAMkE,WAEf4W,OAAS9a,GAAUA,EAAMkE,YAE7B,CAAC,SAAAghC,GAEU78B,GACT,OAAAic,GAAO/iB,KAAImjC,GAAAS,IAAAx6B,KAAJpJ,KAAc8G,EAAM,CACzBk9B,OAASvlC,GAAUoS,OAAOpS,GAC1B8a,OAAS9a,IAAWA,GAExB,CAAC,IAAAwlC,GAAA,IAAAl8B,QA2CY,MAAMy1B,WAAc8F,GAUjCzjC,WAAAA,CACEsxB,GAQA,IAPA,cACE+S,GAAgB,EAAK,WAAEhS,EAAa,EAAC,kBAAEC,EAAoB,OAAQ1pB,GAKpExG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAaL,GAVAlC,MAAMoxB,EAAK,CACTgT,yBAAyB,EACzBC,mBAAoB,CAClBrU,KACAc,KACAoB,GAAwBC,EAAYC,GACpCX,IAAyBJ,GAAsB,IAAGA,EAAK8C,eAEtDzrB,IACFC,GAAA,KAAAu7B,GAAA,CAAAt7B,UAAA,EAAAlK,WAAA,KACEylC,EAAe,CAClB,MAAMG,EAAgBrkC,KAAKiiC,YACrBjQ,EAAiBqS,EAAc1T,MAAKtc,IAAA,IAAC,YAAEolB,GAAaplB,EAAA,OAAKolB,CAAW,IAAGvuB,GAAUA,KACvFtC,EAAAA,EAAAA,GAAA5I,KAAIikC,GAAqBI,EAAc1T,MAAK1b,IAAA,IAAC,UAAE8Y,GAAW9Y,EAAA,OAAK8Y,CAAS,IAAG7iB,GAAUA,KACrFlL,KAAKskC,SAASC,UACZzS,GAAsB,OAAQ,aAAcE,EAAgB,QAAS,SAEzE,CACAhyB,KAAKk9B,aAAc,CACrB,CAMA,kBAAMsH,GAAgC,IAAAC,EAChC,QAAJA,GAAAx7B,EAAAA,EAAAA,GAAAjJ,KAAIikC,WAAA,IAAAQ,IAAA77B,EAAAA,EAAAA,GAAJ5I,KAAIikC,GAAuBjkC,KAAKiiC,YAAYtR,MAAKxb,IAAA,IAAC,UAAE4Y,GAAW5Y,EAAA,OAAK4Y,CAAS,KAC7E,MAAMA,QAAY9kB,EAAAA,EAAAA,GAAMjJ,KAAIikC,IAC5B,GAAIlW,aAAqBnuB,MAAO,MAAMmuB,EACtC,OAAOA,CACT,CAEA,iBAAMjO,GACJ,MAAM,YACJ2Z,EACA1L,UAAW2W,EAAa,UACxBlL,EAAS,eACTQ,SACQh6B,KAAKiiC,YAETriB,EAA2B4Z,EAC9BtkB,QAAOE,IAAA,IAAC,kBAAE8kB,GAAmB9kB,EAAA,OAAK4kB,GAAkBE,CAAiB,IACrExK,QACC,CAACC,EAAKgV,IAAOA,EAAEzK,kBAAoBvK,EAAIuK,kBAAoByK,EAAIhV,GAC/D,CAAEuK,mBAAoB,EAAGt4B,QAAS,IAEnCA,QACH,GAA0D,MAAtD6R,GAAyBmM,GAAmC,CAC9D,MAAMhe,EAAUge,EAAyBjd,WACnCiiC,EAAWl6B,OAAOqK,OAAOtB,IAC5ByB,QAAQ5J,GAAqB,kBAAPA,IAAiBlH,KAAKkH,IAAQA,IACjDzJ,EAAYqW,KAAKC,OAAOysB,GAAUjiC,WAClCb,GAAaoW,KAAKoX,OAAOsV,GAAY,GAAGjiC,WAC9C,MAAM,IAAIjB,EAAwB,qBAAsBE,EAASC,EAAWC,EAC9E,CAEA,MAAO,CACLqvB,IAAKnxB,KAAKg9B,MACV0H,gBACA9iC,QAAS63B,EACT7Z,2BAEJ,EC3La,SAASilB,GACtBnhC,GACwB,IAAAohC,EACxB,MAAMnwB,EAASL,GAAS5Q,GACxB,OAAQiR,EAAOxP,KACb,KAAKyO,GAAIyQ,SACP,OAAOwgB,GAA4B7wB,GAAQW,EAAOiI,YACpD,KAAKhJ,GAAI4H,SACP,OAAO7G,EAAOgX,KAChB,SAGF,MAAMzV,EAAgF,QAA3E4uB,EAAG9Y,GAAUrX,EAAOxP,IAAKwP,EAAO/S,SAASsF,MAAK7C,IAAA,IAAEpE,GAAKoE,EAAA,MAAc,UAATpE,CAAgB,WAAC,IAAA6kC,OAAA,EAAxEA,EAA2E,GACzF,GAAa,MAAT5uB,EAAe,MAAM,IAAIzV,EAAkB,mCAAkCmT,GAAIe,EAAOxP,QAC5F,KAAM,cAAe+Q,GAAQ,MAAM,IAAIlU,EACvC,MAAM7D,EAAUwW,EAAOuB,EAAM2H,WAC7B,OAAO1f,EAAQ6f,QAAQ,OAAQ,MACjC,CCUO,SAAS+mB,GACdrhC,GASQ,IARR,QACEsqB,EAAO,QAAEzG,EAAO,SAAExG,EAAQ,YAAEikB,GAM7B/iC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,MAAM0S,EAASL,GAAS5Q,GACxB,GAAIiR,EAAOxP,MAAQyO,GAAIyQ,SACrB,MAAM,IAAItjB,EAAqB,iFAGjC,IAAIkkC,EAAM,GAsCV,MArCI,QAAStwB,GAAsB,eAAZqZ,IACrBiX,GAAOp0B,OAAO8D,EAAOqI,MAEnBrI,EAAOxP,MAAQyO,GAAIyS,cACrB4e,GAAOp0B,OAAO8D,EAAOlS,UAEnBkS,EAAOxP,MAAQyO,GAAIqI,gBACrBgpB,GAAOp0B,OAAO8D,EAAOoM,WAEnBpM,EAAOxP,MAAQyO,GAAIsI,mBACrB+oB,GAAOp0B,OAAe,OAARkQ,QAAQ,IAARA,EAAAA,EAAY,IAExBpM,EAAOxP,MAAQyO,GAAIiW,mBACD,IAAhBmb,IAAsBC,GAAOp0B,OAAO8D,EAAOyU,wBAC3B,IAAhB4b,IAAuBC,GAAOp0B,OAAO8D,EAAO0U,yBAG9C1U,EAAOxP,MAAQyO,GAAIkS,SAAWnR,EAAO0B,WAAa1B,EAAOoR,aACxDpR,EAAOxP,MAAQyO,GAAIyH,kBAAoB1G,EAAOxP,MAAQyO,GAAI0H,gBAC1D3G,EAAOxP,MAAQyO,GAAI6V,mBAAiC,cAAZuE,IAE3CiX,GAAOp0B,OAAO8D,EAAO9Q,SAEnB8Q,EAAOxP,MAAQyO,GAAIyH,mBAAkB4pB,GAAOp0B,OAAO8D,EAAOsS,UAE3DtS,EAAOxP,MAAQyO,GAAIyH,kBAAoB1G,EAAOxP,MAAQyO,GAAI0H,gBACtD3G,EAAOxP,MAAQyO,GAAI2H,YAAc5G,EAAOxP,MAAQyO,GAAI4H,UAC1C,eAAZwS,IAEHiX,GAAOp0B,OAAO8D,EAAOuS,UAAYrW,OAAc,OAAP0W,QAAO,IAAPA,EAAAA,EAAW5S,EAAO2L,WAExD3L,EAAOxP,MAAQyO,GAAI4H,UAAY7G,EAAOxP,MAAQyO,GAAI6H,cACpDwpB,GAAOF,GACL/wB,GAAQW,EAAOJ,GAAGqI,WAClBjI,EAAOxP,MAAQyO,GAAI6H,YAAc,CAAEuS,QAAS,aAAgB,CAAC,IAG1DiX,CACT,CAQO,SAASC,GACdxhC,EACAqqB,EACAtlB,GAEA,MAAMkM,EAASL,GAAS5Q,EAAakQ,GAAIyQ,UACzC,GAAI1P,EAAOiI,UAAUzX,MAAQyO,GAAI4H,SAC/B,OAAOupB,GAAiB/wB,GAAQW,EAAOiI,WAAYnU,GAGrD,MAAM8L,EAAKP,GAAQW,EAAOiI,WACpBze,EAAU0mC,GAA4BtwB,IACrC4wB,EAAWC,GAAgB,EAAC,GAAM,GACtChhC,KAAKihC,GAAMxzB,GAAOic,GAAgBvZ,EAAIwZ,EAAWsX,GAAI1wB,EAAOkR,WAAW,GAAI1nB,KAC9E,IAAKgnC,IAAcC,EAAc,MAAM,IAAI3kC,EAAiB,0BAC5D,OAAOskC,GACL/wB,GAAQW,EAAOiI,WACf,IAAKuoB,GAAa,CAAEnX,QAAS,iBAAmBvlB,GAEpD,CASO0B,eAAem7B,GACpB5hC,EACAue,GAEiB,IADjB,QAAEsjB,KAAY98B,GAAyExG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEvF0S,EAASL,GAAS5Q,GACtB,MAAM8hC,EAAa7wB,EAAOxP,MAAQyO,GAAIyQ,SAChC9e,EAASigC,IAA0B,IAAZD,GAAoBvY,GAAYtpB,GAI7D,GAHIiR,EAAOxP,MAAQyO,GAAIyQ,WAAU1P,EAASA,EAAOiI,WAI5B,MAAnBnU,EAAQ8e,UAA8B,IAAXhiB,GACxB,CAACqO,GAAIyH,iBAAkBzH,GAAI0H,eAAgB1H,GAAI2H,WAAY3H,GAAI4H,UAAU7P,SAASgJ,EAAOxP,KAC5F,CACA,MAAM,SAAE0yB,EAAQ,OAAEC,SAAiB7V,EAAK2e,yBAAyBr7B,GAC3DkgC,EAAuB,OAAR5N,QAAQ,IAARA,EAAAA,EAAYC,EACjC,GAAoB,MAAhB2N,EACF,MAAM,IAAI1jC,EAAe,wDAAuDwD,KAElFkD,EAAQ8e,QAAUke,EAAale,OACjC,CAMA,GAJwB,MAApB9e,EAAQsY,UAAoBnN,GAAIsI,mBAAqBvH,EAAOxP,MAC9DsD,EAAQsY,gBAAkBkB,EAAKnB,kBAAkBnM,EAAO2B,WAAWyK,SAASpe,YAGnD,MAAvB8F,EAAQu8B,aAAuBpxB,GAAIiW,kBAAoBlV,EAAOxP,MAAmB,IAAZogC,EAAkB,CACzF,MAAM,YAAExQ,SAAsB9S,EAAK4f,mBAAmBltB,EAAOuU,WAC7DzgB,EAAQu8B,YAAcrwB,EAAOwU,SAAW4L,CAC1C,CAEA,OAAOyQ,EACHN,GAA2BxhC,QAAmBue,EAAKuiB,eAAgB/7B,GACnEs8B,GAAiBrhC,EAAa+E,EACpC,C,oBChIMi9B,GAA0B,GAEhCv7B,eAAew7B,GACbpxB,EACA0N,EACA2jB,GAEA,MAAMznC,EAAU0mC,GAA4B7wB,GAAQO,KAC7CsxB,GAAS,OAAE3kC,IAAU,yBAAE0e,EAAwB,cAAE8kB,UAAyBt6B,QAAQ2iB,IAAI,CAC3F9K,EAAK8d,mBAAmB5hC,GACrB8f,OAAO/S,IACN,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAEzO,GAAI0B,EAASqnB,QAAS,GAAItP,MAAO,EAAG,IAG9Cya,MAAMhB,IAAG,IAAWA,EAAKlzB,GAAIkzB,EAAIlzB,OACpCwlB,EAAKwc,2BACLxc,EAAKnC,gBAGP,aAAc1V,QAAQ2iB,IACpB2Y,GAAWthC,KAAI+F,SAAa0W,EAC1BtM,EACA,CACE0N,OAAM4jB,UAAS3kC,SAAQ0e,2BAA0B8kB,gBAAekB,sBAGnEE,MACL,CAYe37B,eAAe47B,GAC5BriC,EACAsiC,GAEA,MAAM/jB,EAAO,IAAIub,GAAKwI,EAAchJ,MAAO,CACzCkH,eAAe,EACfI,SAAU0B,EAAc1B,SAAS2B,QACjC7B,mBAAoB,CAAC/S,QAEvB,OAAOsU,GAA0BrxB,GAAS5Q,GAAcue,EAAM,GAChE,CC5DO,SAASikB,GACdxpC,EAA8B2H,GAGtB,IAFR,kBAAE8hC,EAAoB,KAAM,iBAAEC,EAAmB,IAAI,iBAAEC,EAAmB,KACUhiC,EAEpF,MAAMgrB,EAAO,CACXiX,MAAOH,EACPI,WAAYH,GACZ1pC,GACF,OAAOwb,KAAKC,IAAIkX,EAAO,EAAGgX,EAC5B,CDoDAX,GAAWp+B,MACT,CAACiN,EAAElQ,KAAgD,IAA9C,QAAEwhC,EAAO,cAAEnB,EAAa,cAAEkB,GAAevhC,EAC5C,GAAIkQ,EAAGpP,MAAQyO,GAAIyQ,SAAU,MAAO,GACpC,MAAM,UAAEzH,EAAS,WAAEiJ,GAAetR,EAClC,GAAiC,OAAnB,OAATqI,QAAS,IAATA,EAAAA,EAAaiJ,GAAqB,MAAO,GAC9C,GAA0B,IAAtBA,EAAW3jB,OAAc,MAAO,GACpC,MAAMK,EAASuI,GAAOG,KAAK,CACzBy5B,KACGkB,EAAcj6B,SAASiI,GAAI6H,aAAe,CAAC,YAAc,IAC5Dna,KAAK,MACDklC,EAAWr6B,GAAO6H,GAAQ4I,IAC1B2R,EAAkBpjB,GAAc,CAAC5I,EAAQikC,IACzCC,EAAsBt7B,GAAc,CAAC5I,EAAQwO,GAAKy1B,KACxD,OAAI30B,GAAO0c,EAAiB1I,EAAW,GAAIggB,EAAQppC,KAC9CoV,GAAO40B,EAAqB5gB,EAAW,GAAIggB,EAAQppC,IAAY,GAC7D,CAAC,CACNqD,QAAS,8IAETb,IAAK,mBACLynC,YAAa,CAAC,YAAa,eAC3B,IAEJv8B,MAAOoK,EAAEF,KAA8B,IACjCsyB,GADK,KAAE1kB,EAAI,cAAE2jB,GAAevxB,EAIhC,MAFI,cAAeE,IAAIoyB,EAAWpyB,EAAGqI,WACjC,OAAQrI,IAAIoyB,EAAWpyB,EAAGA,IACd,MAAZoyB,EAAyB,GACtBhB,GAA0BgB,EAAU1kB,EAAM,IAAI2jB,EAAerxB,EAAGpP,KAAK,IAE9E,CAACoP,EAAEU,KAAiB,IAAf,OAAE/T,GAAQ+T,EACb,MAAM,QAASV,EACA,IAAXA,EAAGyR,KAAazR,EAAGyR,KAAO9kB,EAAe,GACtC,CAAC,CACNpB,QAAU,OAAMyU,EAAGyR,6CAA6C9kB,IAChEjC,IAAK,aACLynC,YAAa,CAAC,SALW,EAMzB,IAEJv8B,MAAOoK,EAAEY,KAAuC,IAArC,QAAE0wB,EAAO,cAAED,EAAa,KAAE3jB,GAAM9M,EACzC,GAA6B,IAAzBywB,EAAc1jC,OAAc,MAAO,GACvC,MAAM0kC,QAAatB,GAA0BtxB,GAAQO,GAAK0N,GAAMhE,OAAM,IAAM,KAC5E,OAAI2oB,GAAQf,EAAQrgB,QAAgB,GAC7B,CAAC,CACN1lB,QAAU,mBAAkB+lC,EAAQrgB,+DAA+DohB,IACnG3nC,IAAK,sBACLynC,YAAa,CAAC,SAAU,MAAO,UAAW,WAAY,aACtD,IAEJ,CAACnyB,EAAEa,KAAkB,IACftV,GADD,QAAE+lC,GAASzwB,EAQd,OANIb,EAAGpP,MAAQyO,GAAIyQ,UAA6B,gBAAjBwhB,EAAQplB,MAAmD,IAAzBlM,EAAGsR,WAAW3jB,SAC7EpC,EAAU,0EAERyU,EAAGpP,MAAQyO,GAAI4H,UAA6B,UAAjBqqB,EAAQplB,OACrC3gB,EAAU,oDAEG,MAAXA,EAAwB,GACrB,CAAC,CAAEA,UAASb,IAAK,qBAAsBynC,YAAa,CAAC,QAAS,IAIvE,CAACnyB,EAAEmP,KAAmC,IAAAC,EAAAkjB,EAAA,IAAjC,yBAAEjnB,GAA0B8D,EAC/B,MAAMojB,EAAalzB,GAAIsR,SAAW3Q,EAAGpP,KAAOyO,GAAImI,mBAAqBxH,EAAGpP,IAClE4hC,EAAiBnzB,GAAIyH,mBAAqB9G,EAAGpP,KAAOyO,GAAI2H,aAAehH,EAAGpP,IAC1E6hC,EAAepzB,GAAI0H,iBAAmB/G,EAAGpP,KAAOyO,GAAI4H,WAAajH,EAAGpP,IACpEzI,EACyC,QADrCinB,EAAqC,QAArCkjB,EAAIC,EAAa,cAAgB,YAAI,IAAAD,EAAAA,EACzCE,EAAiB,kBAAoB,YAAI,IAAApjB,EAAAA,EACzCqjB,EAAe,gBAAkB,KACvC,GAAY,MAARtqC,EAAc,MAAO,GACzB,MAAMijB,EAAWb,GAAgBc,GAA0BljB,GAK3D,IAAImqB,EAGJ,GAFI,eAAgBtS,IAAIsS,EAAY,CAAE3H,WAAY3K,EAAG2K,aACjD,cAAe3K,IAAIsS,EAAYtS,EAAGsS,WACrB,MAAbA,EAAmB,MAAM,IAAI7kB,EACjC,OACG2d,EAAST,WAAWvT,SAASkb,EAAU3H,aACpC6nB,IAAmBpnB,EAASX,UAAUrT,SAASkb,EAAU7H,WAEtD,CAAC,CACNlf,QAAU,kBAAiBmxB,KAAKC,UAAUrK,8BAAsCoK,KAAKC,UAAUvR,KAC/F1gB,IAAK,0BACLynC,YAAa,CAAC,YAAa,gBAGxB,EAAE,IAEXv8B,MAAOoK,EAAE0yB,KAAe,IAAb,KAAEhlB,GAAMglB,EACjB,GAAIrzB,GAAI0H,iBAAmB/G,EAAGpP,IAAK,MAAO,GAE1C,GAAIoP,EAAG8S,WAAWlT,WAAW,OAAQ,MAAO,GAC5C,IACE,MAAM,OAAE2S,SAAiB7E,EAAK+e,YAAYzsB,EAAG8S,YAC7C,OAAIP,EAAe,GACZ,CAAC,CACNhnB,QAAU,YAAWyU,EAAG8S,2BACxBpoB,IAAK,oBACLynC,YAAa,CAAC,eAElB,CAAE,MAAOx7B,GAAO,IAAAwmB,EACd,KAAMxmB,aAAiBW,GAAAA,IAA4C,OAAhB,QAAd6lB,EAAAxmB,EAAMod,gBAAQ,IAAAoJ,OAAA,EAAdA,EAAgBC,YAAoB,MAAMzmB,EAC/E,MAAO,CAAC,CACNpL,QAASmxB,KAAKW,MAAM1mB,EAAMod,SAASqJ,YAAYuC,OAC/Cj1B,IAAK,mBACLynC,YAAa,CAAC,eAElB,KAGF,CAACnyB,EAAE2yB,KAAA,IAAE,yBAAEtnB,GAA0BsnB,EAAA,OAC/BtzB,GAAI2H,aAAehH,EAAGpP,KACjBsO,GAAyB6L,QAAUM,GACtB,IAAbrL,EAAG2B,MACN,CAAC,CACDpW,QAAU,WAAUyU,EAAG0B,8DACvBhX,IAAK,cACLynC,YAAa,CAAC,WAEd,EAAE,ICxKD,MAAMS,WAAuB1mC,EAKlCZ,WAAAA,CACEC,EACAsnC,EACA1jC,GAEA3D,MAAMD,GACNE,KAAKC,KAAO,iBACZD,KAAKonC,WAAaA,EAClBpnC,KAAK0D,YAAcA,CACrB,EAQKyG,eAAek9B,GAAShzB,GAAgD,IAA/C,OAAEoJ,GAA0BpJ,EAC1D,aAAcoJ,EAAOghB,4BAA4Bv9B,MACnD,CAYOiJ,eAAem9B,GACpBjmC,EAAkB4T,GAKoB,IAAAsyB,EAAA,IAJtC,OACEnmC,EAAS,EAAC,SAAEomC,EAAQ,OAAE/pB,KAAWhV,GAE0DwM,EAErF,QAARsyB,EAAAC,SAAQ,IAAAD,IAARC,EAAatB,GAAiB,aAAcz9B,IAC5C,MAAM6mB,QAAY+X,GAAU,CAAE5pB,WAAYrc,EAC1C,EAAG,CACD,MAAMmT,QAAWkJ,EAAOijB,qBAAqBr/B,GAC7C,IAAwB,IAApBkT,EAAGkgB,YAAoB,OAAOlgB,QAC5BrK,GAAMs9B,EACd,aAAeH,GAAU,CAAE5pB,WAAY6R,GACvC,MAAM,IAAInuB,EAAgBC,EAAQC,EACpC,CAWO8I,eAAes9B,GACpBvmC,EAAciU,GAGG,IAAAuyB,EAAA,IAEbC,GAJJ,SAAEH,EAAQ,OAAE/pB,KAAWhV,GACqD0M,EAEpE,QAARuyB,EAAAF,SAAQ,IAAAE,IAARF,EAAatB,GAAiB,QAASz9B,IAEvC,GACuB,MAAjBk/B,SAA6Bz9B,GAAMs9B,GACvCG,SAAuBlqB,EAAOghB,4BAA4Bv9B,aACnDymC,EAAgBzmC,GACzB,OAAOymC,CACT,CAWOx9B,eAAey9B,GACpBriC,EAAsB6P,GAGL,IAFjB,QAAEyyB,EAAU,EAAC,OAAEpqB,KAAWhV,GAC4C2M,EAEtE,MAAM,YAAEqf,SAAsBhX,EAAOijB,qBAAqBn7B,GACpDrE,QAAeumC,GAAYhT,EAAcoT,EAAS,CAAEpqB,YAAWhV,KAC7DgsB,YAAaqT,SAAyBrqB,EAAOijB,qBAAqBn7B,GAC1E,OAAQuiC,GACN,KAAM,EACJ,MAAM,IAAIxiC,GAAkBC,GAC9B,KAAKkvB,EACH,OAAOvzB,EACT,QACE,OAAO0mC,GAAiBriC,EAAQ,CAAEkY,SAAQoqB,aAAYp/B,IAE5D,CAcO0B,eAAe49B,GACpBC,EAA+BtkB,GAKK,IAJpC,OACEjG,EAAM,UAAEwqB,EAAS,OAAEp2B,GAAS,EAAI,UAAEq2B,GAAY,EAAI,QAAEL,EAAO,QAAE7Z,KAAYvlB,GAErDib,EAEtB,MAAMnP,QAAW0zB,EAAU3Z,gBAAgB0Z,EAAY,IAClDv/B,EACHgV,SACAuQ,UACAD,gBAAiBtQ,EAAO+mB,iBAG1B,IAAgB,IAAZxW,EAAkB,MAAO,CAAEjd,KAAMic,GAAYzY,GAAK0Y,MAAO1Y,GAE7D,GAAI1C,EAAQ,CACV,MAAMu1B,QAAmBrB,GAAkBxxB,EAAIkJ,GAC/C,GAAI2pB,EAAWllC,OAAS,EAAG,CACzB,MAAMpC,EAAW,oCACfsnC,EAAWhjC,KAAKyc,GAA2BA,EAAE/gB,UAASwB,KAAK,QAC7D,MAAM,IAAI6lC,GAAernC,EAASsnC,EAAY7yB,EAChD,CACF,CAEA,IACE,IAAI4zB,EACJ,IACEA,EAAuB,MAAbF,EAAqB,MAAKA,EAAU9pC,UAAY,IAC5D,CAAE,MAAO+M,GACPi9B,EAAU,IACZ,CACA,MAAM,OAAE5iC,SAAiBkY,EAAOqjB,gBAC9B,CAAEvsB,MACS,MAAX4zB,EAAkB,CAAEC,eAAgB,CAAEC,cAAe,CAAEF,aAAgB,CAAC,GAG1E,GAAID,EAAW,CACb,MAAMI,QAAmBhB,GAAK/hC,EAAQ,CAAEkY,YAAWhV,IAC7C8/B,EAAS,IACVD,EACHv3B,KAAMu3B,EAAWv3B,KACjBkc,MAAO1Y,GAGT,GAAe,MAAXszB,IAAoBA,EAAU,EAAG,CACnC,MAAMrnB,EAAuB,mBAAZqnB,OAAwB1lC,EAAY0lC,EACrD,MAAO,IACFU,EACHC,yBAA0BZ,GAAiBriC,EAAQ,CAAEkY,SAAQoqB,QAASrnB,KAAM/X,IAEhF,CACA,OAAO8/B,CACT,CACA,MAAO,CAAEx3B,KAAMxL,EAAQ0nB,MAAO1Y,EAChC,CAAE,MAAOrJ,GAEP,MADAa,GAAYb,GACNR,OAAO+9B,OAAOv9B,EAAO,CACzB+hB,MAAO1Y,EACPm0B,SAAUv+B,SAAY47B,GAAkBxxB,EAAIkJ,IAEhD,CACF,CA0BOtT,eAAew+B,GACpBxqC,EAAyDwlB,GAGhB,IAFzC,OAAEziB,EAAM,KAAE6P,EAAI,OAAE0M,GACuEkG,EAEvF,OAAc,MAAVziB,EAAuBuc,EAAOwiB,4BAA4B9hC,EAAS+C,GAC3D,MAAR6P,EAAqB0M,EAAO0iB,0BAA0BhiC,EAAS4S,GAC5D0M,EAAOsiB,mBAAmB5hC,EACnC,CAYOgM,eAAey+B,GACpBzqC,EAAiF0oC,GAGhE,IAFjB,OAAEtuB,EAASkB,GAAkBQ,UAAWxR,GACyBo+B,EAEjE,MAAMgC,EAAO1qC,EAAQgW,WAAW,OAC5BlI,GAAOE,GAAOhO,GAAU6N,GAASkC,gBACjC/P,GAEE,QAAEqnB,SAAkBmjB,GAAWE,EAAMpgC,GAASwV,OAAO/S,IACzD,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAEsa,QAAS,GAAI,IAGxB,OAAOtL,GAAasL,EAAS,CAAEpL,mBAAoB7B,GACrD,CASOpO,eAAes1B,GAAoBwH,GAEA,IADxC,OAAExpB,GAA0BwpB,EAE5B,OAAOxpB,EAAOgiB,sBAChB,CAUOt1B,eAAe2+B,GACpBC,EAA2C7B,GAEH,IADxC,OAAEzpB,GAA0BypB,EAE5B,MAA4B,kBAAjB6B,EAAkCtrB,EAAOoiB,sBAAsBkJ,GACnEtrB,EAAOkiB,oBAAoBoJ,EACpC,CAUO5+B,eAAe6+B,GACpBj4B,EAA4Bk4B,GAEY,IADxC,OAAExrB,GAA0BwrB,EAE5B,aAAcxrB,EAAO0hB,gCAAgCpuB,IAAOyjB,YAC9D,CAUOrqB,eAAe++B,GACpBH,EAA2CI,GAEL,IADtC,OAAE1rB,GAA0B0rB,EAE5B,MAA4B,kBAAjBJ,EAAkCtrB,EAAOshB,oBAAoBgK,GACjEtrB,EAAOohB,kBAAkBkK,EAClC,CAUO5+B,eAAei/B,GACpBr4B,EAA4Bs4B,GAEkB,IAD9C,OAAE5rB,GAA0B4rB,EAE5B,OAAO5rB,EAAOwhB,0BAA0BluB,EAC1C,CAUA,MAAMu4B,GAAoF,IAAIrZ,IAE9F9lB,eAAeo/B,GAAgBtqC,EAAawe,GAC1C,MAAM+rB,EAAKF,GAAiBzmB,IAAI5jB,GAEhC,GADAqqC,GAAiB9Y,OAAOvxB,GACd,MAANuqC,EAAY,MAAM,IAAIznC,EAAc,6BAExC,IAAI0nC,EACJ,IACE,MAAMhT,EAA2B,kBAAd+S,EAAG,GAAG/S,WACdyS,GAAYM,EAAG,GAAG/S,IAAK,CAAEhZ,YAAW1M,KAAOy4B,EAAG,GAAG/S,IAC5DgT,QAAkBhsB,EAAO+iB,mBAAmB,CAC1C/J,MACAE,SAAU6S,EAAG,GAAG7S,SAChBD,IAAK8S,EAAGplC,KAAKssB,IAAG,CAAQnc,GAAImc,EAAInc,OAChCqW,SAAUva,MAAMpF,KAAK,IAAIy+B,IAAIF,EAAGplC,KAAKssB,GAAQA,EAAIlD,mBAC9CppB,KAAKyyB,IAAM,CAAQA,SAAQhzB,OAAQkgB,GAAgBlgB,YAE1D,CAAE,MAAOqH,GAEP,YADAs+B,EAAGtnB,SAAQynB,IAAA,IAAC,OAAEC,GAAQD,EAAA,OAAKC,EAAO1+B,EAAM,GAE1C,CAEA,MAAM,QAAEosB,EAAO,SAAEX,GAAa8S,EAC9BnS,EAAQpV,SAAQ,CAAA2nB,EAAuCpmB,KAAQ,IAA9C,OAAE/C,EAAM,OAAEwT,KAAW4V,GAAeD,EACnD,MAAM,QACJx/B,EAAO,OAAEu/B,EAAM,GAAEr1B,EAAE,eAAEiZ,GACnBgc,EAAG/lB,GACQ,OAAX/C,EAAiBrW,EAAQ,IAAKy/B,EAAenT,aAC5CiT,EAAOl/B,OAAO+9B,OAAO,IAAIxjC,GAAYivB,GAAmB,CAAE3f,KAAIiZ,mBAAkB,GAEzF,CAaOrjB,eAAe4/B,GACpBx1B,EACAiZ,EAAsCwc,GAOD,IAAAC,EAAA,IANrC,IACExT,EAAG,SAAEE,EAAQ,QAAEuT,EAAO,OAAEzsB,GAE6DusB,EAIvF,MAAM/qC,GAAkB,IAAZirC,EAAmB,CAACzT,EAAKE,GAAUr1B,OAAS,YAClD6oC,EAAoC,QAA5BF,EAAGX,GAAiBzmB,IAAI5jB,UAAI,IAAAgrC,EAAAA,EAAI,GAE9C,OADAX,GAAiBlb,IAAInvB,EAAKkrC,GACnB,IAAI//B,SAAQ,CAACC,EAASu/B,KAAW,IAAAQ,EACtCD,EAAS7iC,KAAK,CACZiN,KAAIiZ,iBAAgBiJ,MAAKE,WAAUtsB,UAASu/B,YAE9B,IAAZM,EAIY,QAAhBE,EAAAD,EAASE,eAAO,IAAAD,IAAhBD,EAASE,QAAY//B,YAAW,KAAai/B,GAAgBtqC,EAAKwe,EAAO,KAHlE8rB,GAAgBtqC,EAAKwe,EAGiD,GAEjF,CASOtT,eAAemgC,GACpBjjB,EAAmCkjB,GAEG,IADtC,OAAE9sB,GAA0B8sB,EAE5B,OAAO9sB,EAAOyjB,gBAAgB7Z,EAChC,CASOld,eAAe62B,GACpB3Z,EAAmCmjB,GAES,IAD5C,OAAE/sB,GAA0B+sB,EAE5B,OAAO/sB,EAAOujB,YAAY3Z,EAC5B,CASOld,eAAesgC,GACpBxqC,EAAcyqC,GAEyB,IADvC,OAAEjtB,GAA0BitB,EAE5B,OAAOjtB,EAAOkkB,mBAAmB1hC,EACnC,CAcOkK,eAAewgC,GAGpBroC,EACArD,EAAW2rC,GAGqC,IAFhD,OAAE/4B,GAAS,EAAI,cAAEg5B,GAAgB,EAAK,OAAEptB,GACmBmtB,EAE3D,GAAI7yB,GAAYzV,GAAW,CACzB,GAAIuP,GAAUg5B,EAAe,CAC3B,MAAM5qC,QAAawd,EAAOkkB,mBAAmBr/B,GACvC+b,EAAUpe,EAAKme,SAASlX,MAAMy9B,GAAMA,EAAE1lC,MAAQA,IACpD,GAAe,MAAXof,EAAiB,MAAM,IAAIhc,EAAwBC,EAAUrD,GACjE,GAAI4rC,EAAe,OAAOxsB,EAAQ5hB,EACpC,CACA,OAAOgb,GAAcnV,EACvB,CACA,IAEE,OADA6J,GAAO7J,GACAA,CACT,CAAE,MAAO4I,GACP,MAAM,IAAItI,EAAsB,4BAA2BN,IAC7D,CACF,CC9cO6H,eAAe2gC,GACpB7qC,EACAwI,GAEA,MAAMsiC,QAAqBje,GAAa,IACnCrkB,EACHtD,IAAKyO,GAAI+S,aACTH,OAAQvmB,EACRgmB,UAAWxd,EAAQw/B,UAAU9pC,UAE/B,OAAO4pC,GAAgBgD,EAActiC,EACvC,CAmCO0B,eAAe6gC,GACpB/qC,EACAme,EAAqB/Z,GAEe,IADpC,eAAE4mC,KAAmBxiC,GAA4BpE,EAEjD,MAAM6mC,EAAc,KACI,IAAnBD,GAA2BvgC,OAAOC,mBAC5B8/B,GAAQxqC,EAAMwI,IAAU2V,SAASha,KAAIiQ,IAAA,IAAC,IAAEpV,EAAG,GAAExC,GAAI4X,EAAA,MAAK,CAACpV,EAAKxC,EAAG,QAErE2hB,GAGC+sB,EAAiBzgC,OAAOqK,OAAOm2B,GAClCnH,MAAMljB,GAAM5Q,GAAe4Q,EAAG7U,GAASsB,aACpC89B,SAAgB3iC,EAAQgV,OAAOqC,eAClCF,2BAA6BnM,GAAyBsL,KACzD,GAAIosB,GAAkBC,EACpB,MAAM,IAAI5pC,EAAyB,0EAGrC,MAAM6pC,QAAqBve,GAAa,IACnCrkB,EACHtD,IAAKyO,GAAI2S,aACT3kB,QAASupC,EAAiB,EAAI,EAC9B3kB,OAAQvmB,EACRgmB,UAAWxd,EAAQw/B,UAAU9pC,QAC7BigB,SAAU1T,OAAOE,QAAQsgC,GACtB9mC,KAAI6Q,IAAA,IAAEhW,EAAKxC,GAAgDwY,EAAA,MAAM,CAAEhW,MAAKxC,KAAI,MAGjF,OAAOsrC,GAAgBsD,EAAc5iC,EACvC,CAiCO0B,eAAemhC,GACpBrrC,EACA4lC,EACAp9B,GAEA,MAAM8iC,QAAuBze,GAAa,IACrCrkB,EACHtD,IAAKyO,GAAI8S,eACTF,OAAQvmB,EACRgmB,UAAWxd,EAAQw/B,UAAU9pC,QAC7B4nB,YAAa8f,IAGf,OAAOkC,GAAgBwD,EAAgB9iC,EACzC,CA2BO0B,eAAeqhC,GACpBvrC,EACAwrC,GA4BA,MAAMC,QAAkBjB,GAAQxqC,EAAMwrC,GACtC,OAAO/gC,OAAOihC,OAAO,IAChBD,EACHjvC,GAAIivC,EAAUjvC,GACdmqB,MAAO8kB,EAAU9kB,MACjB,YAAMna,CAAO2R,EAAU3V,GACrB,MAAO,UACIuiC,GAAW/qC,EAAMme,EAAU,IAAKqtB,KAAQhjC,aACxC+iC,GAAUvrC,EAAM,IAAKwrC,KAAQhjC,IAE1C,EACA,cAAMmjC,CAAS/F,EAASp9B,GACtB,MAAO,UACI6iC,GAAarrC,EAAM4lC,EAAS,IAAK4F,KAAQhjC,aACzC+iC,GAAUvrC,EAAM,IAAKwrC,KAAQhjC,IAE1C,EACA,YAAMojC,CAAOpjC,GACX,OAAOqiC,GAAW7qC,EAAM,IAAKwrC,KAAQhjC,GACvC,EACA,eAAMqjC,CAAU1mB,GAAuB,IAAd3c,EAAOxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClC,MAAO,UACI+oC,GAAW/qC,EAAM,CAAC,EAAG,IACzBwrC,KAAQhjC,EAAS2c,UAAS6lB,gBAAgB,aAEtCO,GAAUvrC,EAAM,IAAKwrC,KAAQhjC,IAE1C,GAEJ,CAwBO0B,eAAe4hC,GACpB9rC,EACA0X,EACAlP,GAEA,MAAMujC,QAAgBlf,GAAa,IAC9BrkB,EACHtD,IAAKyO,GAAIyS,YACTJ,UAAWxd,EAAQw/B,UAAU9pC,QAC7BmoB,SAAU3O,EACV1X,SAGIygB,QAAeqnB,GAAgBiE,EAASvjC,GAC9C,IAAK2P,GAAcnY,GAAO,CACxB,MAAMgsC,EAAkC,MAAtBvrB,EAAO+T,aAAuB/T,EAAO+T,YAAc,QAC3D+W,GAAUvrC,EAAMwI,GACtB,CAAC,EACL,OAAOiC,OAAO+9B,OAAO/nB,EAAQurB,EAC/B,CACA,OAAOvrB,CACT,CAiCOvW,eAAe+hC,GAAajsC,EAAgBwI,GAOjD,MAAMkP,EAAOnH,KACP4V,EAAe1O,GAAezX,EAAM0X,GAEpCw0B,QAAmBrf,GAAa,IACjCrkB,EACHtD,IAAKyO,GAAIuS,eACTF,UAAWxd,EAAQw/B,UAAU9pC,QAC7BioB,iBAGF,OAAO1b,OAAOihC,OAAO,UACV5D,GAAgBoE,EAAY1jC,GACrCkP,OACAyO,eACA,WAAMgmB,CAAMC,GACV,MAAM,QAAEzqC,KAAY0qC,GAAiB7jC,EACrC,OAAOsjC,GAAU9rC,EAAM0X,EAAM,IAAK20B,KAAiBD,GACrD,GAEJ,CA2BOliC,eAAeoiC,GACpBtsC,EACAwC,EACAgG,GAEA,OAAOsjC,GAAU9rC,EAAM,EAAG,IAAKwI,EAAShG,WAC1C,CCvXO0H,eAAeqiC,GACpB3oC,EACA4oC,EACAhkC,GAEA,OAAOs/B,SACCjb,GAAa,IACdrkB,EACHtD,IAAKyO,GAAIkS,QACTzP,SAAU5N,EAAQw/B,UAAU9pC,QAC5B4nB,kBAAmB4kB,GACjB8B,EACA,iBACAhkC,GAEF5E,WAEF4E,EAEJ,CAwBO0B,eAAeuiC,GACpBC,EACAF,EACAhkC,GAEA,IAAKkkC,EAAW,IAAMA,EAAW,EAC/B,MAAM,IAAIhsC,EAAc,WAAY,2BAA4BgsC,GAElE,MAAM5mB,QAAoB4kB,GACxB8B,EACA,iBACAhkC,GAEI4N,EAAW5N,EAAQw/B,UAAU9pC,QAC7BqnB,EAAU,IAAIjS,GAAAA,QACZq1B,GAAWgE,KAAKnkC,EAAQw/B,UAAxBW,CAAmCvyB,EAAU5N,IAE/CokC,EAAgBrnB,EAAQhS,MAAMm5B,GAAUG,aAAav5B,GAAAA,EAAUw5B,gBAC/D,IAAE/vB,GAAQ1I,SACRwY,GAAa,IACdrkB,EAAStD,IAAKyO,GAAIkS,QAASzP,WAAU0P,cAAaliB,OAAQgpC,IAE/Dj5B,GAAIkS,SAGAjiB,EAASgpC,EAAc1wB,KAAKa,GAAKO,GAAGiI,GAAWA,EAAQlJ,MAAMU,GAAO6vB,EAC1E,OAAO9E,SACCjb,GAAa,IACdrkB,EAAStD,IAAKyO,GAAIkS,QAASzP,WAAU0P,cAAaliB,WAEvD4E,EAEJ,CAaO0B,eAAe6iC,GACpBtpC,EACA+E,GAEA,OAAOs/B,SACCjb,GAAa,IACdrkB,EAAStD,IAAKyO,GAAI6H,YAAaoQ,QAASpjB,EAAQw/B,UAAU9pC,QAASoW,GAAI7Q,IAE5E+E,EAEJ,CClFO,SAASwkC,GACd32B,EACA42B,EAA+C7oC,GAGnC,IAAAkjC,EAAA,IAFZ,SAAEC,EAAQ,OAAE/pB,KAAWhV,GACiBpE,EAEhC,QAARkjC,EAAAC,SAAQ,IAAAD,IAARC,EAAatB,GAAiB,aAAcz9B,IAC5C,MAAM0kC,EAAgB,IAAIzD,IACpB0D,EAAkBjjC,UAA2B,IAAAkjC,EACjD,MAAMC,GAA0E,QAAhED,SAAQ5vB,EAAO8jB,yBAAyBjrB,IAAWqiB,qBAAa,IAAA0U,EAAAA,EAAI,IACjFn4B,QAAOb,IAAA,IAAC,GAAE5X,GAAI4X,EAAA,OAAM84B,EAAcI,IAAI9wC,EAAG,IAC5C6wC,EAAQprB,SAAS8F,IACfmlB,EAAcK,IAAIxlB,EAAMvrB,IACxBywC,EAAQllB,EAAM,GACd,EAGJ,IAAIylB,GAAU,EAUd,MAPA,WACE,OAAQA,QAEAL,IAAkBnvB,MAAM/X,QAAQgF,aAChChB,GAAMs9B,EAEf,EAND,GAOO,KAAQiG,GAAU,CAAI,CAC/B,CAYOtjC,eAAeujC,GACpBp3B,EACA+R,EAA8BpT,GAGb,IAAAyyB,EAAA,IAEbxmC,EACA8kB,EACAsC,GANJ,SAAEkf,EAAQ,OAAE/pB,KAAWhV,GACqDwM,EAEpE,QAARyyB,EAAAF,SAAQ,IAAAE,IAARF,EAAatB,GAAiB,aAAcz9B,IAI5C,EAAG,GACE6f,WAAUtC,aAAcvI,EAAOgkB,iCAAiCnrB,EAAU+R,IAC7E,MAAMslB,EAAiBxhC,GAAOmc,GAC9B,GAAIqlB,EAAezrC,OAAS,EAAG,OAAOyrC,EAAehrC,iBAC/CuH,GAAMs9B,GACZtmC,QAAemmC,GAAU,CAAE5pB,UAC7B,OAASuI,GAAO9kB,GAChB,MAAM,IAAID,EAAqBC,EACjC,CAUOiJ,eAAeyjC,GACpBt3B,EACA+R,EACA5f,GAEA,MAAMkK,QAAelK,EAAQgV,OAAOgkB,iCAAiCnrB,EAAU+R,GAC/E,MAAO,IACF1V,EACHk7B,aAAc1hC,GAAOwG,EAAOqV,OAAgCrlB,WAC5DmrC,gBAAiB3hC,GAAOwG,EAAO2V,UAAoC3lB,WACnEorC,QAAS5jC,MAAOme,EAAUmjB,IAExBuC,GAAe3lB,EAASC,EAAU,IAAK7f,KAAYgjC,IAErDwC,gBAAiB9jC,SAAeujC,GAAqBp3B,EAAU+R,EAAS,IAAK5f,KAAYgjC,IAE7F,CAwBOthC,eAAe+jC,GACpB53B,EACA0R,EACAvf,GAIA,MAAM4N,EAAW5N,EAAQw/B,UAAU9pC,QAE7BgwC,QAAsBrhB,GAAa,IACpCrkB,EACHtD,IAAKyO,GAAIqI,cACT3F,WACAD,WACA2R,WAEI,MAAE9R,GAAU5B,GAAS65B,EAAev6B,GAAIqI,eACxCoM,EAAUte,GAAcsM,EAAUH,EAAOI,GAC/C,MAAO,UACIyxB,GAAgBoG,EAAe1lC,YAC/BmlC,GAAet3B,EAAU+R,EAAS5f,GAE/C,CAiBO0B,eAAeikC,GAAgB3lC,GAGpC,MAAM6N,EAAWrK,GAAOE,GAAO1D,EAAQw/B,UAAU9pC,SAAU6N,GAASgC,eAC9DqgC,QAAuBvhB,GAAa,IACrCrkB,EACHtD,IAAKyO,GAAIoI,eACT1F,aAEF,MAAO,UACIyxB,GAAgBsG,EAAgB5lC,YAEhC6lC,GAAgBh4B,EAAU7N,GAEvC,CAiBO0B,eAAe6jC,GACpB3lB,EACAC,EACA7f,GAIA,MAAM6N,EAAWrK,GAAOE,GAAO1D,EAAQw/B,UAAU9pC,SAAU6N,GAASgC,eAC9DugC,QAAwBzhB,GAAa,IACtCrkB,EACHtD,IAAKyO,GAAIsI,iBACT5F,WACA+R,UACAC,aAEF,MAAO,UACIyf,GAAgBwG,EAAiB9lC,YAEjC6lC,GAAgBh4B,EAAU7N,GAEvC,CAaO0B,eAAemkC,GACpBh4B,EACA7N,GAEA,MAAO,UACIA,EAAQgV,OAAOqD,kBAAkBxK,GAC1Cg3B,eAAgB7kC,EAAQgV,OAAO8jB,yBAAyBjrB,IAAWqiB,iBAChEnuB,GACD,CACEgkC,YAAavB,GACbwB,UAAWP,GACXF,kBACAU,aAAcN,GACdO,SAAUf,KAEZz4B,IAAA,IAAElV,EAAM2uC,GAAQz5B,EAAA,MAAK,CACnBlV,EACA,WAAkB,QAAAkQ,EAAAlO,UAAAC,OAAd1E,EAAI,IAAA6S,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJ9S,EAAI8S,GAAArO,UAAAqO,GACN,MAAMu+B,EAAUrxC,EAAKA,EAAK0E,OAAS,GAInC,OAHe,MAAX2sC,GAAsC,kBAAZA,GAAwBA,EAAQhvC,cAAgB6K,OAC5EA,OAAO+9B,OAAOoG,EAAS,IAAKpmC,KAAYomC,IACnCrxC,EAAK8J,KAAKmB,GACVmmC,KACF,CAAC,eAAgB,kBAAkBjjC,SAAS1L,GAAQ,GAAK,CAACqW,MAC1D9Y,EAEP,EACD,IAGP,CA0BO2M,eAAe2kC,GACpBnnB,EACAC,EACAnf,GAIA,MAAMwd,EAAYxd,EAAQw/B,UAAU9pC,QAC9B4wC,QAAyBjiB,GAAa,IACvCrkB,EACHtD,IAAKyO,GAAImI,iBACTkK,YACA0B,cACAC,mBAEF,MAAO,UACImgB,GAAgBgH,EAAkBtmC,YAClC6lC,GAAgBriC,GAAOE,GAAO8Z,GAAYja,GAASgC,eAAgBvF,GAEhF,C,0SCzT+D,MAAAumC,QAAAC,IAAA78B,GAwC5B,IAAA88B,GAAA,IAAAxtB,QAAAytB,GAAA,IAAAztB,QAAA0tB,GAAA,IAAA1tB,QAAA2tB,GAAA,IAAA3tB,QAAA4tB,GAAA,IAAAvnC,QAkFnC,MAAM2c,GAKJ,cAAM6qB,GACJ,GAA8B,MAA1BvvC,KAAKvC,SAAS86B,SAAkB,OAAOv4B,KAAKvC,SAAS86B,SACzD,GAAgC,MAA5Bv4B,KAAKvC,SAAS+xC,WAAoB,MAAM,IAAIzuC,EAAqB,kCACrE,GAAgC,MAA5Bf,KAAKvC,SAASgyC,WAAoB,CACpC,MAAM,SAAElX,SAAmBv4B,KAAKvC,SAAS+xC,WACtCE,oBAAoB1vC,KAAKvC,SAASgyC,WAAYzvC,KAAKvC,SAASkyC,YAC/D3vC,KAAKvC,SAAS86B,SAAWA,CAC3B,CACA,GAAoC,MAAhCv4B,KAAKvC,SAASmyC,eAAwB,CACxC,MAAM,SAAErX,SAAmBv4B,KAAKvC,SAAS+xC,WAAWK,QAAQ7vC,KAAKvC,SAASmyC,gBAC1E5vC,KAAKvC,SAAS86B,SAAWA,CAC3B,CACA,GAA8B,MAA1Bv4B,KAAKvC,SAAS86B,SAChB,MAAM,IAAIx3B,EAAqB,uDAEjC,OAAOf,KAAKvC,SAAS86B,QACvB,CA8CA,4BAAMuX,CACJ/+B,EACAg/B,EACAtnC,GAEA,MAAM,SAAEovB,SAAmB73B,KAAKvC,SAASggB,OAAOmjB,yBAAyB7vB,GACzE,GAAgB,MAAZ8mB,EACF,MAAM,IAAIv3B,EAAe,6CAA4CyQ,KAEvE,MAAMi/B,EAAgBnY,EACtB,MAAO,IACL9U,GAAG/iB,KAAIkvC,GAAAe,IAAA7mC,KAAJpJ,KAAoBgwC,EAAeD,OAAQ5tC,EAAWsG,GACzDiY,OAAQsvB,EAEZ,CAEA,kBAAME,CACJjwC,EACA0U,GAEiB,IADjBlM,EAAgExG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEpE,MAAM,OAAEye,SAAiB1gB,KAAKmwC,MAAMlwC,EAAM0U,EAAQ,IAAKlM,EAAS2nC,YAAY,IAC5E,GAAc,MAAV1vB,EAAgB,MAAM,IAAI1e,EAC9B,MAAM,QAAEulB,GAAY7G,EAEpB,OAAOxI,KAAKmE,MAAgB,KAAVkL,EACpB,CAQA,aAAM8oB,CACJ17B,EACAlM,GAOG,IAAA6nC,EAAAC,EACH,MAAM,WAAEH,KAAe3E,GAAQ,IAAKzrC,KAAKvC,YAAagL,GAEtD,GAD8B,MAA1BzI,KAAKvC,SAAS86B,gBAAwBv4B,KAAKuvC,YAC5B,IAAfa,EAAqB,OAAOpwC,KAAKmwC,MAAM,OAAQx7B,EAAQ,IAAK82B,EAAK2E,eACrE,GAA6B,MAAzBpwC,KAAKvC,SAASU,QAAiB,MAAM,IAAI+E,GAE7C,GAAqB,MAAjBuoC,EAAIxD,UAAmB,MAAM,IAAIlnC,EAAqB,gCAC1D,MAAMkV,EAAUw1B,EAAIxD,UAAU9pC,QAC9B,GAA8B,MAA1B6B,KAAKvC,SAAS86B,SAAkB,MAAM,IAAIx3B,EAAqB,iCACnE,MAAMwT,QAAWuY,GAAa,IACzB2e,EACHtmC,IAAKyO,GAAIyH,iBACTiF,SAAsB,QAAdgwB,EAAE7E,EAAInrB,gBAAQ,IAAAgwB,EAAAA,QAAUtwC,KAAKkwC,aAAa,OAAQv7B,EAAQ82B,GAClEtkB,SAAUnnB,KAAKwwC,UAAUvkC,OAAOjM,KAAKywC,MAAO,OAAQ97B,GACpD9N,KAAM7G,KAAKvC,SAAS86B,SACpBtiB,aAEI,KAAElF,KAAS+F,SAAUiM,GAAM/iB,KAAImvC,GAAAuB,IAAAtnC,KAAJpJ,KAC/BuU,EACA,OACA,IAAKk3B,EAAKxD,UAAWwD,EAAIxD,YAG3B,OADAjoC,KAAKvC,SAASU,QAAU+uB,GAA4B3Y,GAC7C,IACFuC,KACqB,OAAT,QAAZy5B,EAAAz5B,EAAM4J,cAAM,IAAA6vB,OAAA,EAAZA,EAAcpqC,MAAe,CAC9BwqC,cAAe3wC,KAAK4wC,cAAc95B,EAAM4J,OAAOva,IAAKslC,IAEtD7kB,MAAO3Q,EACPvS,YAAaqN,EACb5S,QAAS6B,KAAKvC,SAASU,QAE3B,CA6BA,WAAMgyC,CACJrsC,EACA6Q,GAMmF,IAAAk8B,EAAA,IALnFpoC,EAIkExG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEtE,MAAM,WAAEmuC,EAAU,IAAE3Z,KAAQgV,GAAQ,IAAKzrC,KAAKvC,YAAagL,GACrDqoC,EAAK/tB,GAAG/iB,KAAIovC,GAAA2B,IAAA3nC,KAAJpJ,KAAqB8D,IAC7B,QAAE3F,EAAO,KAAE8B,GAASD,KAAKvC,SAEzB4pB,EAAqB,MAARpnB,EAAewX,GAAcxX,GAAQ9B,GAClD,OAAEsf,GAAWguB,EAEnB,GAAU,MAAN3nC,EAAY,MAAM,IAAIN,GAC1B,GAAW,SAAPM,IAAgC,IAAfssC,EAAqB,MAAM,IAAI/sC,GAA6B,wCACjF,GAAW,SAAPS,GAA+B,MAAd2nC,EAAI5nC,QAAkB+M,OAAO66B,EAAI5nC,QAAU,IAAMitC,EAAMxa,QAC1E,MAAM,IAAI1yB,GAAwB6nC,EAAI5nC,OAAQC,GAGhD,IAAIsjB,EACJ,IACE,GAAqB,MAAjBqkB,EAAIxD,UAAmB,MAAM,IAAIlmC,EAAc,wBACnDqlB,EAAWqkB,EAAIxD,UAAU9pC,OAC3B,CAAE,MAAO+M,GACP,MAAM8lC,GAAoC,IAAfZ,IACxBllC,aAAiB+lC,GAA+B,yGAAlB/lC,EAAMpL,SACjCoL,aAAiBzF,IACjByF,aAAiBnJ,GAAmC,yBAAlBmJ,EAAMpL,SAE9C,IAAKkxC,EAAoB,MAAM9lC,EAC/Bkc,EAAWrD,GAAgBC,GAC7B,CACA,MAAMmD,EAAWnnB,KAAKwwC,UAAUvkC,OAAOjM,KAAKywC,MAAO3sC,EAAI6Q,GAEvD,IAAmB,IAAfy7B,EAAqB,CACvB,GAAiB,MAAb3E,EAAIv1B,MAAe,CACrB,MAAMg7B,EAAmB,MAAPza,GAAe,CAAE,CAAgB,kBAARA,EAAmB,SAAW,QAASA,GAC5EoP,QAAgB8C,GAAWvhB,EAAU,IAAK8pB,EAAWzzB,WAAUQ,OAAO/S,IAC1E,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAEuV,KAAM,QAASvK,MAAO,EAAG,IAEpCu1B,EAAIv1B,MAAyB,gBAAjB2vB,EAAQplB,KAAyB,EAAIolB,EAAQ3vB,MAAQ,CACnE,CAEA,MAAMi7B,EAAQ,IAAK1F,EAAKhuB,SAAQ0J,YAChC,IAAI5S,EACJ,GAAW,SAAPzQ,EAAe,CACjB,GAA8B,MAA1B9D,KAAKvC,SAAS86B,SAAkB,MAAM,IAAIx3B,EAAqB,0CACnEwT,QAAWuY,GAAa,IACnBqkB,EAAOhsC,IAAKyO,GAAIyH,iBAAkBxU,KAAM7G,KAAKvC,SAAS86B,SAAUtiB,QAASmR,GAEhF,KAAO,CACL,GAAkB,MAAdC,EAAoB,MAAM,IAAI/jB,GAA4B,0CAC9DiR,QAAWuY,GAAa,IACnBqkB,EAAOhsC,IAAKyO,GAAI0H,eAAgB8L,WAAUC,cAEjD,CAEA,MAAM,QAAEmQ,KAAY4Z,SAAsBrH,GAASx1B,EAAI6S,EAAU,IAAKqkB,EAAKhV,QAC3E,GAAe,MAAXe,EACF,MAAM,IAAIz1B,EAAe,4CAA2CwS,KAEtE,MAAMy7B,EAAgBxY,EACtB,MAAO,IACF4Z,KACHruB,GAAG/iB,KAAIkvC,GAAAe,IAAA7mC,KAAJpJ,KAAoBgwC,EAAelsC,EAAIyQ,EAAIk3B,GAC9Cl3B,GAAID,GAASC,GACbmM,OAAQsvB,EACR/iB,MAAO1Y,EACPxD,KAAMic,GAAYzY,GAClBg0B,YAAQpmC,EAEZ,CAEA,GAAW,MAAPs0B,EAAa,MAAM,IAAI11B,EAAqB,uDAChD,GAAkB,MAAdsmB,EAAoB,MAAM,IAAI/jB,GAA4B,uCAC9D,MAAMiR,QAAWuY,GAAa,IACzB2e,EACHtmC,IAAKyO,GAAI0H,eACTgF,SAAsB,QAAduwB,EAAEpF,EAAInrB,gBAAQ,IAAAuwB,EAAAA,QAAU7wC,KAAKkwC,aAAapsC,EAAI6Q,EAAQ82B,GAC9DrkB,WACAC,aACAF,aAEF,GAAqB,MAAjBskB,EAAIxD,UAAmB,MAAM,IAAIlnC,EAAqB,gDAC1D,OAAAgiB,GAAO/iB,KAAImvC,GAAAuB,IAAAtnC,KAAJpJ,KAAqBuU,EAAIzQ,EAAI,IAAK2nC,EAAKxD,UAAWwD,EAAIxD,WAC/D,CA6CA2I,aAAAA,CACES,GAEgB,IADhB,YAAEC,KAAgB7F,GAAgExpC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEtF,OAAOovC,EACJjtC,KAAKmtC,IACJ,MAAM5Z,EAAS4Z,EAAM5Z,OAAOvzB,KAAKmL,GAAuBsB,OAAOtB,KAC/D,IAAIiiC,EACJ,IACEA,EAAYzuB,GAAG/iB,KAAIqvC,GAAAoC,IAAAroC,KAAJpJ,KAA6BuxC,EAAMpzC,QAASw5B,EAAO,GAAI8T,EACxE,CAAE,MAAOvgC,GACP,GAAgB,OAAXomC,QAAW,IAAXA,GAAAA,GAAyBpmC,aAAiBnH,GAA6B,OAAO,KACnF,MAAMmH,CACR,CACA,MAAMwmC,EAAU1xC,KAAKwwC,UAAUmB,YAAYH,EAAcD,EAAMzqC,KAAM6wB,IAC9D13B,EAAMzC,GAAQkN,OAAOE,QAAQ8mC,GAAS,GAC7C,MAAO,CACLzxC,OACAzC,OACA+sB,SAAU,CACRtqB,KAAMuxC,EACNrzC,QAASozC,EAAMpzC,SAElB,IACA+W,QAAQ2c,GAAmD,MAALA,GAC7D,CAEA,uBAAa+f,CAAUvtC,GAiBY,IAY7BpE,GA5BJ,WACEuvC,EAAU,OACV/xB,EAAM,SACN8a,EAAQ,IACR7uB,EAAG,QACHvL,EAAO,eACPyxC,EAAc,WACdH,EAAU,WACVE,EAAU,iBACVkC,KACGvF,GAKJjoC,EAED,GAAW,MAAPqF,GAA6B,MAAd8lC,EAAoB,CACrC,IAAIvK,EAGa,IAAA6M,EAAjB,GAFsB,MAAlBlC,IAAwB3K,QAAYuK,EAAWK,QAAQD,IACzC,MAAdH,IAAoBxK,QAAYuK,EAAWE,oBAAoBD,EAAYE,IACpE,MAAP1K,EACFv7B,EAAMu7B,EAAIv7B,IACF,QAARooC,EAAAvZ,SAAQ,IAAAuZ,IAARvZ,EAAa0M,EAAI1M,SAErB,CACA,GAAW,MAAP7uB,EAAa,MAAM,IAAInG,GAG3B,GAAe,MAAXpF,EAAiB,CACnBA,QAAgBwsC,GACdxsC,EACA,kBACA,CAAE0sC,eAAe,EAAMptB,WAEzB,MAAM2tB,SAAgB3tB,EAAOqC,eAC1BF,2BAA6BnM,GAAyBsL,MACpDqsB,GAAUrzB,GAAY5Z,KAAU8B,EAAO9B,EAC9C,CAEA,GAAe,MAAXA,GAAiC,MAAdsxC,GAAwC,MAAlBG,GAAsC,MAAZrX,EACrE,MAAM,IAAIj1B,GAA4B,gDAGxC,GAAe,MAAXnF,EAAiB,CACnB,MAAMosB,QAAiByW,GAAY7iC,EAAS,CAAEsf,WAC9C,GAAuB,MAAnB8M,EAASzD,OAAgB,MAAM,IAAI3jB,GAAsBhF,EAC/D,CAEA,IAAyB,IAArB0zC,EAA2B,CAC7B,GAAe,MAAX1zC,EAAiB,MAAM,IAAImF,GAA4B,oDAC3D,MAAMyuC,SAAwBzH,GAAoBnsC,EAAS,CAAEsf,YAAW8a,SACxE,IAAIyZ,GAAU,EACd,GAAgB,MAAZzZ,EAAkByZ,EAAUzZ,IAAawZ,OACxC,GAAkB,MAAdtC,EAAoB,CAC3B,GAAkB,MAAdD,EAAoB,MAAM,IAAIzuC,EAAqB,4CACvDixC,QAAgBxC,EAAWyC,qBAAqBF,EAAgBtC,EAAYE,EAC9E,MAAO,GAAsB,MAAlBC,EAAwB,CACjC,GAAkB,MAAdJ,EAAoB,MAAM,IAAIzuC,EAAqB,4CACvDixC,QAAgBxC,EAAW0C,SAASH,EAAgBnC,EACtD,CACA,IAAKoC,EACH,MAAM,IAAIhvC,GAAwD,OAAvB,OAAVysC,QAAU,IAAVA,EAAAA,EAAcG,GAA0B,cAAgB,WAE7F,CAEA,OAAO,IAAIuC,GAAuB,CAChC3C,aACA/xB,SACAgyB,aACAG,iBACArX,WACA7uB,MACAvL,UACA8B,OACA0vC,gBACGrD,GAEP,CAYAzsC,WAAAA,CAAWwU,GAagC,IAAA+9B,EAAA,SAb/B,IAAE1oC,KAAQ4iC,GAamBj4B,EAAA2N,GAAA,KAAAqtB,IAAArtB,GAAA,KAAAotB,IAAAptB,GAAA,KAAAmtB,IAAAntB,GAAA,KAAAktB,IAAAxmC,GAAA,KAAA4mC,GAAA,CAAA3mC,UAAA,EAAAlK,WAAA,IACvCuB,KAAKqyC,KAAO3oC,EACZ,MAAM4oC,EAAU5oC,EAAIA,EAAIxH,OAAS,GACjC,GAAwB,MAApBowC,EAAQ/nB,SACV,MAAM,IAAIxpB,EAAsB,uDAAsD2J,OAAOmV,KAAKyyB,oBAEpG1pC,EAAAA,EAAAA,GAAA5I,KAAIsvC,GAAgBgD,EAAQ/nB,UAC5BvqB,KAAKywC,OAAQxnC,EAAAA,EAAAA,GAAAjJ,KAAIsvC,IAAcrvC,KAC/BD,KAAKwwC,UAAY,IAAIvB,GAASvlC,GAC9B1J,KAAKvC,SAAW6uC,EAgBhB5hC,OAAO+9B,OACLzoC,KACA0K,OAAOC,aAAY1B,EAAAA,EAAAA,GAAAjJ,KAAIsvC,IAAciD,UAClCnuC,KAAI6Q,IAAyD,IAAxD,KAAEhV,EAAMgC,UAAWuwC,EAAO,SAAEpb,GAAuBniB,EACvD,MAAMm7B,EAAsB,SAATnwC,IAAoBm3B,EACvC,MAAO,CACLn3B,EACAkK,iBAAwB,QAAAgG,EAAAlO,UAAAC,OAAd1E,EAAI,IAAA6S,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJ9S,EAAI8S,GAAArO,UAAAqO,GACZ,MAAM7H,EAAUjL,EAAK0E,SAAWswC,EAAQtwC,OAAS,EAAI1E,EAAKi1C,MAAQ,CAAC,EACnE,GAAuB,kBAAZhqC,EAAsB,MAAM,IAAIwoC,EAAW,gCAA+BxoC,KACrF,MAAa,SAATxI,EAAwBmyC,EAAK/B,QAAQ7yC,EAAM,CAAE4yC,gBAAe3nC,IACzD2pC,EAAKjC,MAAMlwC,EAAMzC,EAAM,CAAE4yC,gBAAe3nC,GACjD,EACD,KAGT,EA7dY,SAAAwnC,GAAA96B,EAyBV46B,EACArsC,EACA+E,GACsC,IAClC3I,GALJ,WAAE2nB,EAAU,YAAED,EAAW,IAAErhB,GAAyBgP,EAMpD,OAAQsS,GACN,IAAK,KAAM,CACT,MAAMqpB,EAAK/tB,GAAG/iB,KAAIovC,GAAA2B,IAAA3nC,KAAJpJ,KAAqB+vC,GACnC,MAAO,CACL2C,cAAe1yC,KAAKwwC,UAAUrkC,OAAOnM,KAAKywC,MAAOK,EAAM7wC,KAAMunB,GAC7DmpB,cAAe3wC,KAAK4wC,cAAczqC,EAAKsC,GAE3C,CACA,IAAK,SACH3I,EAAUE,KAAKwwC,UAAUmC,iBAAiBnrB,GAC1C,MACF,IAAK,QACH1nB,EAAUqM,GAAOqb,GAAa7kB,WAC9B,MACF,QACE,MAAM,IAAIZ,EAAe,wBAAuB0lB,KAEpD,MAAM,IAAIhkB,GAAoB3D,EAAS4D,EACzC,CAAC,eAAAgtC,GAGCn8B,EACAw7B,EACAtnC,GAEA,MAAM8/B,QAAeR,GAAgBxzB,EAAI,IAAKvU,KAAKvC,YAAagL,IAChE,MAAO,CACLsI,KAAMw3B,EAAOx3B,KACbwD,GAAID,GAAoDi0B,EAAOtb,OAC/Dsb,SACAtb,MAAOsb,EAAOtb,SACW,MAAtBsb,EAAO9T,mBACFz0B,KAAK8vC,uBAAuBvH,EAAOx3B,KAAMg/B,EAAQtnC,GAG7D,CAAC,SAAAsoC,GAoFe9wC,GACd,MAAM6D,GAAKmF,EAAAA,EAAAA,GAAAjJ,KAAIsvC,IAAciD,UAAUrrC,MACpCm+B,GAAwBA,EAAEplC,OAASA,IAEtC,GAAU,MAAN6D,EACF,OAAOA,EAET,GAAa,SAAT7D,EACF,MAAO,CACLgC,UAAW,GAAIhC,KAAM,OAAQq2B,SAAS,EAAOsc,QAAS,OAAQxb,UAAU,GAG5E,MAAM,IAAIzzB,GAA4B1D,EACxC,CAAC,SAAAwxC,GA6GCoB,EACAC,EAAgB19B,GAER,IADR,sBAAE29B,GAAsD39B,EAExD,MAAM49B,EAAgB,IAAKhzC,KAAKvC,SAASs1C,yBAA0BA,GACnE,GAAgC,MAA5BC,EAAcH,GAAoB,OAAOG,EAAcH,GAG3D,MAAMnwB,EAAUA,CAAC+P,EAAQC,IAAoBzB,KAAKC,UAAUuB,KAAOxB,KAAKC,UAAUwB,GAE5E1H,EAAYhrB,KAAKqyC,KACpBjuC,KAAIsf,IAAA,IAAC,SAAE6G,GAAU7G,EAAA,OAAK6G,CAAQ,IAC9BrV,QAAQqV,GAAqB,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUgnB,QAC5BptC,EAAgB6mB,EACnB5mB,KAAKmmB,GAAa,CAACA,EAAStqB,KAAMsqB,EAASgnB,MAAM0B,WACjD7uC,KAAIuf,IAAA,IAAE1jB,EAAMoxC,GAAO1tB,EAAA,OAAK0tB,EAAOjtC,KAAKmtC,GACnC,CAACtxC,EAAMyK,OAAOmV,KAAK0xB,GAAO,GAAI7mC,OAAOqK,OAAOw8B,GAAO,KACnD,IACDzL,OACA5wB,QAAO2xB,IAAA,IAAE,CAAEqM,GAAUrM,EAAA,OAAKh2B,OAAQ,KAAIsiC,GAASD,GAAWvwC,SAAS,YAAcmwC,CAAQ,IACzF59B,QAAO,CAAA+xB,EAAaxjB,EAAK2vB,KAAG,IAAnB,CAAC,CAAG12C,GAAKuqC,EAAA,OAAgBmM,EAAIxkC,MAAM,EAAG6U,GAAKsgB,MAAMz4B,GAAOoX,EAAQpX,EAAG,GAAI5O,IAAM,IACzF,OAAQyH,EAAcjC,QACpB,KAAK,EAAG,MAAM,IAAI6B,GAA4B+uC,EAASnwC,WAAYkwC,GACnE,KAAK,EAAG,OAAO1uC,EAAc,GAAG,GAChC,QAAS,MAAM,IAAID,GAA8B2uC,EAAW1uC,GAEhE,CA+LF,MAAMguC,GAAgDztB,GAEtD,UCpmBA,SAAS2uB,GAAkBC,GACzB,IAAKA,EAAGn/B,WAAW,OAAQ,MAAM,IAAIxT,EAAc,KAAM,eAAgB2yC,EAC3E,CAqCenpC,eAAeopC,GAC5BnwC,EACAowC,EAAkCnvC,GASb,IARrB,UACE4jC,EAAS,YAAEwL,EAAW,SAAE/kB,KAAajmB,GAMtCpE,EAED,GAAImvC,EAAItxC,OAAS,EAAG,MAAM,IAAIvB,EAAc,MAAO,iBAAkB6yC,GACrE,MAAM,cAAE9O,EAAa,yBAAE9kB,SAAmCnX,EAAQgV,OAAOqC,cACnE4zB,EAAW,CAAE3lB,UAAW2W,EAAe9kB,4BAC7C,GAAmB,IAAf4zB,EAAItxC,OAAc,CACpB,IAAoB,IAAhBuxC,EACF,MAAM,IAAI9yC,EAAc,cAAe,cAAe8yC,GAExD,OAAOtnC,SACC87B,EAAUt+B,yBAAyBvG,EAAiB,IAAKswC,EAAUhlB,aAE7E,CAEA,MAAO/f,GAAW6kC,EAClB,GAAIz7B,GAAYpJ,GAAU,CACxB,IAAoB,IAAhB8kC,EACF,MAAM,IAAI9yC,EAAc,cAAe,cAAe8yC,GAExD,OAAOtnC,SACC87B,EAAUr+B,6BAA6BxG,EAAiBuL,EAAS+kC,GAE3E,CAGA,GADAL,GAAkB1kC,IACE,IAAhB8kC,EACF,MAAM,IAAI9yC,EAAc,cAAe,aAAc8yC,GAEvD,OAAOtnC,SACC87B,EAAUn+B,oCAAoC1G,EAAiBuL,EAAS+kC,GAElF,C,oBC1DOvpC,eAAewpC,GACpBC,EACAp2C,EAAW6G,GASP,IAAAwvC,EAAA,IARJ,UACE5L,EAAS,WAAEuH,EAAU,OAAE/xB,EAAM,SAAE8a,EAAQ,IAAE7uB,EAAG,eAAEkmC,EAAc,WAAEH,EAAU,WAAEE,KAAelnC,GACzDpE,EAOlC,MAAM4R,EAAUgyB,EAAU9pC,QAC1B,GAAqD,uBAA1CwqC,GAAW1yB,EAAS,CAAEwH,YAAWgD,KAC1C,MAAM,IAAI1f,EAAsB,WAAUkV,mBAG5C,MAAMsU,QAAiB7F,GAASktB,WAA4C,CAC1E3J,YAAWuH,aAAY/xB,SAAQ8a,WAAU7uB,MAAKkmC,iBAAgBH,aAAYE,eAGtEp7B,QAAWuY,GAAa,IACzBrkB,EACHtD,IAAKyO,GAAI2H,WACTkC,SACA5W,WAAY0jB,EAASglB,WACrBjvB,SAA0B,QAAlBuzB,EAAEprC,EAAQ6X,gBAAQ,IAAAuzB,EAAAA,QAAUtpB,EAAS2lB,aAAa,OAAQ1yC,EAAMiL,GACxEwN,UACAkR,SAAUoD,EAASimB,UAAUvkC,OAAOse,EAASkmB,MAAO,OAAQjzC,GAC5DkuB,QAAS3a,GAAK6iC,KAEVvsB,EAAa6F,GAA4B3Y,IACvCxD,KAAMrN,EAAW,MAAEupB,SAAgB8a,GAAgBxzB,EAAI,CAC7DkJ,SAAQwqB,YAAWuH,gBAAe/mC,IAGpC,OAAOiC,OAAOihC,OAAO,CACnB/kB,MAAO3Q,EACPvS,cACAupB,QACA6mB,aAAczsB,GAElB,CAyBOld,eAAe4pC,GACpBrwC,EAAgC2Q,GAEf,IADjB,IAAE2I,EAAG,SAAEkK,EAAQ,OAAEzJ,GAAqDpJ,EAEtE,MAAM,cAAEqwB,EAAa,yBAAE9kB,SAAmCnC,EAAOqC,cACjE,IAAInR,EAAUoC,GAAK5F,GAAc,CAACL,GAAOG,KAAKy5B,GAAgBv4B,GAAOzI,MACrE,GAAIkc,IAA6BnM,GAAyB6L,MAAO,CAC/D,GAAW,MAAPtC,EAAa,MAAM,IAAIrc,EAAc,MAAO,sBAAuBqc,GACvE,GAAgB,MAAZkK,EAAkB,MAAM,IAAIvmB,EAAc,WAAY,sBAAuBumB,GACjFvY,EAAUoC,GAAK5E,GAAO6H,GAAQ,CAC5B7O,IAAKyO,GAAIkY,iBACT9O,MACAkK,WACA3hB,OAAQ0G,GAAO0C,EAAS3C,GAAS+B,WAErC,CACA,OAAOY,CACT,CAUOxE,eAAe6pC,GACpBtwC,EAAgCuR,GAEf,IADjB,OAAEwI,GAA0BxI,EAE5B,MAAMlB,EAAWO,GAAS5Q,EAAakQ,GAAIyQ,UAC3C,GAAItQ,EAAS6I,UAAUzX,MAAQyO,GAAI4H,SACjC,MAAM,IAAI7a,EAAc,cAAe,sBAAuBiT,GAAIG,EAAS6I,UAAUzX,MAEvF,OAAO4uC,GAAgB//B,GAAQD,EAAS6I,UAAUrI,GAAGqI,WAAY,CAC/DI,IAAKjJ,EAAS6I,UAAUI,IACxBkK,SAAUnT,EAAS6I,UAAUsK,SAC7BzJ,UAEJ,CCvHO,SAASw2B,GACdC,GAEA,OAAO,IAAIC,MACT,CAAC,EACDzpC,OAAOC,YAAa,CAClB,QAAS,YAAa,iBAAkB,iBAAkB,2BAC1D,iBAAkB,eAAgB,UAAW,oBAAqB,MAAO,iBACzE,MAAO,OACGvG,KAAKnE,GAAS,CAACA,EAAM,SAACsP,GAChC,MAAMxR,EAASm2C,IAAqB,QAAA/jC,EAAAlO,UAAAC,OADM1E,EAAI,IAAA6S,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJ9S,EAAI8S,EAAA,GAAArO,UAAAqO,GAE9C,MAAM20B,EAAOmP,QAAQn0C,GAAclC,KAAWP,GAC9C,MAAsB,oBAARynC,GAA+B,QAAThlC,EAChCglC,EAAI2H,KAAK7uC,GACTknC,CACN,MAEJ,CAEA,MAAQkC,eAAgBkN,MAAOC,IAAsBC,EAE/CC,GAAU,IACXF,MACAG,KACAC,KACAC,EACHpB,0BAAyB,MACtBqB,GA4BL,MAAMC,GAMJh1C,WAAAA,GAA+C,IAAnC4I,EAA4BxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,GAACoF,EAAAA,GAAAA,GAAA,gBALb,CAAC,GAM/BqD,OAAO+9B,OAAOzoC,KAAK80C,SAAUrsC,EAC/B,CAQAssC,UAAAA,GAE4F,IAD1FC,EAA8B/yC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAElC,MAAO,IACFjC,KAAK80C,SACR7M,UAAWgM,IAAqB,IAAMj0C,KAAK80C,SAAS7M,YACpDxqB,OAAQw2B,IAAqB,IAAMj0C,KAAK80C,SAASr3B,SACjD+xB,WAAYyE,IAAqB,IAAMj0C,KAAK80C,SAAStF,gBAClDwF,EAEP,CAEA,aAAMhhC,CAAQvL,GACZ,OAAOqkB,GAAa,IAAK9sB,KAAK+0C,gBAAiBtsC,GACjD,CAEA,wBAAMwsC,CACJxsC,GAEA,OAAOic,GAASktB,WAAoB5xC,KAAK+0C,WAAWtsC,GACtD,EA0BFiC,OAAO+9B,OAAOoM,GAAaK,UAAW1qC,GACpCgqC,IACAnwC,IAAA,IAAEpE,EAAM2uC,GAAQvqC,EAAA,MAAK,CACnBpE,EACA,WAA2D,QAAAk1C,EAAAlzC,UAAAC,OAAb1E,EAAI,IAAA6S,MAAA8kC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJ53C,EAAI43C,GAAAnzC,UAAAmzC,GAChD53C,EAAK0E,OAAS0sC,EAAQ1sC,OACtB,MAAMuG,EAAUjL,EAAKA,EAAK0E,OAAS,GAEnC,OADA1E,EAAKA,EAAK0E,OAAS,GAAKlC,KAAK+0C,WAAWtsC,GACjCmmC,KAAWpxC,EACpB,EACD,KAKH,MAAM63C,GAAoBR,GAC1B,UCpIe,MAAMS,WAAkBT,GASrCh1C,WAAAA,GAIE,IAHA,MAAE01C,EAAQ,MAAO9sC,GAEhBxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAELlC,MAAM0I,IAASpB,EAAAA,GAAAA,GAAA,YAbS,IAAI4oB,KAe5BslB,EAAMrzB,SAAQ,CAAA7d,EAAqB4qB,KAAC,IAArB,KAAEhvB,EAAI,SAAEu1C,GAAUnxC,EAAA,OAAQrE,KAAKy1C,QAAQx1C,EAAMu1C,EAAgB,IAANvmB,EAAQ,GAChF,CAKA,eAAIymB,GACF,GAAgC,MAA5B11C,KAAK80C,SAAStF,WAChB,MAAM,IAAInvC,EAAc,sDAE1B,OAAOL,KAAK80C,SAAStF,UACvB,CAEA,OAAImG,GAEF,OADA31C,KAAK41C,sBACE51C,KAAK61C,KAAKhzB,IAAI7iB,KAAK81C,iBAC5B,CAaAL,OAAAA,CAAQx1C,EAAcgiB,GAAkC,IAAtBjkB,EAAMiE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACtC,GAAIjC,KAAK61C,KAAKtI,IAAIttC,GAAO,MAAM,IAAI4E,GAAmB5E,GAEtDD,KAAK61C,KAAKznB,IAAInuB,EAAMgiB,IAChBjkB,GAAmC,MAAzBgC,KAAK81C,mBACjB91C,KAAK+1C,WAAW91C,EAEpB,CAQA81C,UAAAA,CAAW91C,GACT,IAAKD,KAAK61C,KAAKtI,IAAIttC,GAAO,MAAM,IAAI6E,GAAmB,kBAAiB7E,iBACxED,KAAK81C,iBAAmB71C,CAC1B,CAOA+1C,eAAAA,GACE,OAAgC,MAAzBh2C,KAAK81C,gBACd,CAEUF,mBAAAA,GACR,IAAK51C,KAAKg2C,kBACR,MAAM,IAAIlxC,GAAkB,gEAEhC,CASA,iBAAMgb,GAEJ,OADA9f,KAAK41C,sBACE,CACL31C,KAAMD,KAAK81C,0BACF91C,KAAK21C,IAAI71B,cAEtB,CAOA,oBAAMm2B,GACJ,OAAO7rC,QAAQ2iB,IACb1c,MAAMpF,KAAKjL,KAAK61C,KAAKjrC,WAAWxG,KAAI+F,UAAA,IAAQlK,EAAMgiB,GAAK5N,EAAA,MAAM,CAC3DpU,gBACSgiB,EAAKnC,cACf,IAEL,CAGAo2B,SAAAA,GACE,MAAO,EACT,CAMAC,eAAAA,GAA2E,IAA3DtQ,EAAkB5jC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGjC,KAAK80C,SAAS7M,UACjD,GAAuB,kBAAZpC,EAAsB,MAAM,IAAIpkC,EAAoB,8BAC/D,GAAuB,kBAAZokC,EAAsB,OAAOA,EACxC,MAAM,IAAItkC,EAEL,sFAAkC60C,OAAOvQ,aAEhD,CAEA,WAAI1nC,GACF,OAAO6B,KAAKm2C,kBAAkBh4C,OAChC,CAEA,UAAMuT,CACJ5K,GAEqB,IADrB,UAAEmhC,KAAcx/B,GAAoCxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAExD,OAAOjC,KAAKm2C,gBAAgBlO,GAAWv2B,KAAK5K,EAAM2B,EACpD,CAEA,qBAAM6lB,CACJ/Z,GAE8B,IAD9B,UAAE0zB,KAAcx/B,GAAoFxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAExG,MAAM8rB,EAAsC,OAA1B/tB,KAAK81C,uBAAkC91C,KAAK21C,IAAInR,oBAAiBriC,EACnF,OAAOnC,KAAKm2C,gBAAgBlO,GAAW3Z,gBAAgB/Z,EAAI,CAAEwZ,eAActlB,GAC7E,CAEA,iBAAM+lB,CACJ1uB,GAEqB,IADrB,UAAEmoC,KAAcx/B,GAAgFxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEpG,OAAOjC,KAAKm2C,gBAAgBlO,GAAWzZ,YAAY1uB,EAAS2I,EAC9D,CAEA,mBAAMgB,CACJ3C,EACA4C,GAE4B,IAD5B,UAAEu+B,KAAcx/B,GAAkFxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEtG,OAAOjC,KAAKm2C,gBAAgBlO,GAAWx+B,cAAc3C,EAAM4C,EAAKjB,EAClE,CAKA,8BAAMkB,CACJvG,GAG4B,IAAAizC,EAAAC,EAAA,IAF5B,UAAErO,KAAcx/B,GACwCxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAM5D,OAJiB,QAAjBo0C,EAAA5tC,EAAQslB,iBAAS,IAAAsoB,IAAjB5tC,EAAQslB,UAAwC,OAA1B/tB,KAAK81C,uBACjB91C,KAAK21C,IAAInR,oBAAiBriC,GACJ,QAAhCm0C,EAAA7tC,EAAQmX,gCAAwB,IAAA02B,IAAhC7tC,EAAQmX,yBAAuD,OAA1B5f,KAAK81C,wBAC/B91C,KAAK21C,IAAI71B,eAAeF,8BAA2Bzd,GACvDnC,KAAKm2C,gBAAgBlO,GACzBt+B,yBAAyBvG,EAAiBqF,EAC/C,CAKA,kCAAMmB,CACJxG,EACAnD,GAG4B,IAAAs2C,EAAAC,EAAA,IAF5B,UAAEvO,KAAcx/B,GAC4CxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAMhE,OAJiB,QAAjBs0C,EAAA9tC,EAAQslB,iBAAS,IAAAwoB,IAAjB9tC,EAAQslB,UAAwC,OAA1B/tB,KAAK81C,uBACjB91C,KAAK21C,IAAInR,oBAAiBriC,GACJ,QAAhCq0C,EAAA/tC,EAAQmX,gCAAwB,IAAA42B,IAAhC/tC,EAAQmX,yBAAuD,OAA1B5f,KAAK81C,wBAC/B91C,KAAK21C,IAAI71B,eAAeF,8BAA2Bzd,GACvDnC,KAAKm2C,gBAAgBlO,GACzBr+B,6BAA6BxG,EAAiBnD,EAAMwI,EACzD,CAKA,sCAAMoB,CACJzG,GAG4B,IAAAqzC,EAAAC,EAAA,IAF5B,UAAEzO,KAAcx/B,GACgDxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAMpE,OAJiB,QAAjBw0C,EAAAhuC,EAAQslB,iBAAS,IAAA0oB,IAAjBhuC,EAAQslB,UAAwC,OAA1B/tB,KAAK81C,uBACjB91C,KAAK21C,IAAInR,oBAAiBriC,GACJ,QAAhCu0C,EAAAjuC,EAAQmX,gCAAwB,IAAA82B,IAAhCjuC,EAAQmX,yBAAuD,OAA1B5f,KAAK81C,wBAC/B91C,KAAK21C,IAAI71B,eAAeF,8BAA2Bzd,GACvDnC,KAAKm2C,gBAAgBlO,GACzBp+B,iCAAiCzG,EAAiBqF,EACvD,CAKA,yCAAMqB,CACJ1G,EACA2G,GAG4B,IAAA4sC,EAAAC,EAAA,IAF5B,UAAE3O,KAAcx/B,GACmDxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAMvE,OAJiB,QAAjB00C,EAAAluC,EAAQslB,iBAAS,IAAA4oB,IAAjBluC,EAAQslB,UAAwC,OAA1B/tB,KAAK81C,uBACjB91C,KAAK21C,IAAInR,oBAAiBriC,GACJ,QAAhCy0C,EAAAnuC,EAAQmX,gCAAwB,IAAAg3B,IAAhCnuC,EAAQmX,yBAAuD,OAA1B5f,KAAK81C,wBAC/B91C,KAAK21C,IAAI71B,eAAeF,8BAA2Bzd,GACvDnC,KAAKm2C,gBAAgBlO,GACzBn+B,oCAAoC1G,EAAiB2G,EAAetB,EACzE,CAEA,oBAAMuB,CACJC,GAG4B,IAAA4sC,EAAA,IAF5B,UAAE5O,KAAcx/B,GAC8BxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAIlD,OAFiB,QAAjB40C,EAAApuC,EAAQslB,iBAAS,IAAA8oB,IAAjBpuC,EAAQslB,UAAwC,OAA1B/tB,KAAK81C,uBACjB91C,KAAK21C,IAAInR,oBAAiBriC,GAC7BnC,KAAKm2C,gBAAgBlO,GAAWj+B,eAAeC,EAAYxB,EACpE,CAMSssC,UAAAA,GAIP,IAJkBC,EAA8B/yC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAKpD,MAAO,IACFjC,KAAK80C,SACRr3B,OAAQw2B,IAAqB,IAAMj0C,KAAK21C,MACxCnG,WAAYyE,IAAqB,IAAMj0C,KAAK01C,iBACzCV,EACH/M,UAAkC,MAAvB+M,EAAU/M,UACjBjoC,KAAKm2C,gBAAgBnB,EAAU/M,WAC/BgM,IAAqB,IAAMj0C,KAAKm2C,oBAExC,EC3Qa,MAAMW,WAAcxB,GAKjCz1C,WAAAA,GAGE,IAFA,SAAE+qB,KAAaniB,GAC6BxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEhDlC,MAAM0I,IAASpB,EAAAA,GAAAA,GAAA,gBAR0C,CAAC,GASlD,OAARujB,QAAQ,IAARA,GAAAA,EAAU1I,SAAQ,CAAC2jB,EAASpiB,IAAQzjB,KAAK+2C,WAAWlR,EAAS,CAAE7nC,OAAgB,IAARylB,KACzE,CAES0yB,eAAAA,GAAwE,IAAxDtQ,EAAkB5jC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGjC,KAAKg3C,gBACjD,GAAuB,kBAAZnR,EAAsB,CAC/B,MAAM1nC,EAAU0nC,EAEhB,GADA15B,GAAOhO,GACuB,MAA1B6B,KAAK4qB,SAASzsB,GAAkB,MAAM,IAAIiE,EAAwByjC,GACtEA,EAAU7lC,KAAK4qB,SAASzsB,EAC1B,CACA,OAAO4B,MAAMo2C,gBAAgBtQ,EAC/B,CAMSqQ,SAAAA,GACP,OAAOxrC,OAAOmV,KAAK7f,KAAK4qB,SAC1B,CASAmsB,UAAAA,CAAWlR,GAAmE,IAA7C,OAAE7nC,GAA8BiE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnE,MAAM,QAAE9D,GAAY0nC,EACpB7lC,KAAK4qB,SAASzsB,GAAW0nC,GACV,IAAX7nC,GAAiBgC,KAAKi3C,cAAc94C,EAC1C,CAOA+4C,aAAAA,CAAc/4C,GACZ,GAA8B,MAA1B6B,KAAK4qB,SAASzsB,GAAkB,MAAM,IAAIiE,EAAwBjE,UAC/D6B,KAAK4qB,SAASzsB,GACjB6B,KAAKg3C,kBAAoB74C,UAAgB6B,KAAKg3C,eACpD,CAOAC,aAAAA,CAAc94C,GAEZ,GADAgO,GAAOhO,GACuB,MAA1B6B,KAAK4qB,SAASzsB,GAAkB,MAAM,IAAIiE,EAAwBjE,GACtE6B,KAAKg3C,gBAAkB74C,CACzB,E,0SCnEkB,IAAAg5C,GAAA,IAAApvC,QAAAqvC,GAAA,IAAArvC,QAAAsvC,GAAA,IAAAtvC,QAAAuvC,GAAA,IAAA51B,QAAA61B,GAAA,IAAA71B,QAAA81B,GAAA,IAAA91B,QAAA+1B,GAAA,IAAA/1B,QAkCL,MAAMg2B,GAWnB73C,WAAAA,CACE83C,EACA5xC,EACAyuC,GAwFFxyB,GAAA,KAAAy1B,IAAAz1B,GAAA,KAAAw1B,IAAAx1B,GAAA,KAAAu1B,IAAAv1B,GAAA,KAAAs1B,IAAA5uC,GAAA,KAAAyuC,GAAA,CAAAxuC,UAAA,EAAAlK,MAjGa,IAAIwxB,MAAwEvnB,GAAA,KAAA0uC,GAAA,CAAAzuC,UAAA,EAAAlK,MAE5E,IAACiK,GAAA,KAAA2uC,GAAA,CAAA1uC,UAAA,EAAAlK,WAAA,IASZuB,KAAK23C,WAAaA,GAClB/uC,EAAAA,EAAAA,GAAA5I,KAAIq3C,GAAY7C,GAChBmD,EAAW9xC,QAAQkd,GAAA/iB,KAAIs3C,GAAAM,IAAgBhL,KAAK5sC,MAAO+F,EACrD,CAgEA,aAAMqqB,CACJnwB,EACA0U,GAGA,OADAoO,GAAA/iB,KAAIu3C,GAAAM,IAAAzuC,KAAJpJ,MAAI4I,EAAAA,EAAAA,GAAc5I,KAAIo3C,IAAAnuC,EAAAA,EAAAA,GAAJjJ,KAAIo3C,IAAe,GAAGn3C,EAAM0U,GACvC,IAAIvK,SAAQ,CAACC,EAASu/B,MAC3B3gC,EAAAA,EAAAA,GAAAjJ,KAAIm3C,IAAY/oB,KAAGnlB,EAAAA,EAAAA,GAACjJ,KAAIo3C,IAAa,CAAE/sC,UAASu/B,UAAS,GAE7D,CAOAkO,MAAAA,CAAqC73C,EAAY0U,GAC/CoO,GAAA/iB,KAAIu3C,GAAAM,IAAAzuC,KAAJpJ,UAAkBmC,EAAWlC,EAAM0U,EACrC,EAaD,eAAAijC,GA5FsBvuC,EAAuChB,GAC1D,GAAqB,SAAd,OAAHgB,QAAG,IAAHA,OAAG,EAAHA,EAAKL,SAAmB,MAAM,IAAInG,EAAuBouB,KAAKC,UAAU7nB,IAC5E,GAAI,WAAYA,GAAO,UAAWA,EAEhC,YADA0Z,GAAA/iB,KAAIy3C,GAAAM,IAAA3uC,KAAJpJ,KAAsBqJ,GAIxB,MAAM+mB,EAAU/mB,EAChB,IAAIqX,EACAxV,EACJ,IACE,KAAMklB,EAAQY,UAAM/nB,EAAAA,EAAAA,GAAIjJ,KAAIq3C,KAAY,MAAM,IAAIxvC,GAClD,MAAMmwC,EAAa5nB,EAAQY,OAC3BtQ,QAAezX,EAAAA,EAAAA,GAAAjJ,KAAIq3C,IAAUW,GAAY5nB,EAAQzb,OAAQtM,EAC3D,CAAE,MAAOwpB,GACP9lB,GAAY8lB,GACZ3mB,EAAQ2mB,CACV,CASA,GARkB,MAAdzB,EAAQ3zB,IACVsmB,GAAA/iB,KAAIw3C,GAAAS,IAAA7uC,KAAJpJ,KACEowB,EAAQ3zB,GACR2zB,EAAQY,OACRtQ,EACS,MAATxV,GAAiBA,aAAiBvE,GAAWuE,EAAQ,IAAItD,IAGhD,MAATsD,KAAmBA,aAAiBvE,IAAW,MAAMuE,CAC3D,CAAC,SAAA2sC,GAGCp7C,EACAu0B,EACArc,GAEA3U,KAAK23C,WAAWvxC,YAAY,CAC1B4C,QAAS,SACA,MAANvM,EAAa,CAAEA,MAAO,CAAC,EAC1Bu0B,YACa,MAAVrc,EAAiB,CAAEA,UAAW,CAAC,GAEtC,CAAC,SAAAsjC,GAGCx7C,EACAu0B,EACAtQ,EACAxV,GAEAlL,KAAK23C,WAAWvxC,YAAY,CAC1B4C,QAAS,MACTvM,KACAu0B,YACY,MAAT9lB,EAAgB,CAAEA,MAAOA,EAAMtE,UAAa,CAAE8Z,WAErD,CAAC,SAAAq3B,GAAA1zC,GA+BwF,IAAxE,GAAE5H,EAAE,MAAEyO,EAAK,OAAEwV,GAAmDrc,EAC/E,MAAM6zC,GAAYjvC,EAAAA,EAAAA,GAAAjJ,KAAIm3C,IAAYt0B,IAAIpmB,GACtC,GAAiB,MAAby7C,EAAmB,MAAM,IAAIp1C,EAAqBrG,GACzC,MAATyO,EAAegtC,EAAUtO,OAAOjjC,GAASI,YAAYmE,IACpDgtC,EAAU7tC,QAAQqW,IACvBzX,EAAAA,EAAAA,GAAAjJ,KAAIm3C,IAAY3mB,OAAO/zB,EACzB,CCpHK,MAAM07C,GAAc,E,gBC7B3B,MAAMC,GAAUC,GAAQ,CAAEC,eAAe,IAEnCC,GAA6B95C,IACjC,GAAqB,kBAAVA,GAAgC,OAAVA,GAAkBA,EAAMoB,cAAgB6K,OACvE,OAAOF,GAAU/L,GAAO4F,IAAA,IAAE8e,EAAGtC,GAAExc,EAAA,MAAK,CAAC8e,EAAGo1B,GAA0B13B,GAAG,IAEvE,GAAIxQ,MAAMyzB,QAAQrlC,GAChB,OAAOA,EAAM2F,KAAKqH,GAAS8sC,GAA0B9sC,KAEvD,GAAqB,kBAAVhN,GAAsB,IAAI8U,GAAAA,EAAU9U,GAAOkE,SAAS,MAAQlE,EAAO,CAC5E,MAAM+5C,EAAK,IAAIjlC,GAAAA,EAAU9U,GAEzB,OADA+5C,EAAG5xC,OAAS,IAAM4xC,EAAG71C,SAAS,IACvB61C,CACT,CACA,OAAO/5C,CAAK,EAGd,QACEyyB,UAAW,mBAAA/gB,EAAAlO,UAAAC,OAAI1E,EAAI,IAAA6S,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJ9S,EAAI8S,GAAArO,UAAAqO,GAAA,OACjB8nC,GAAQlnB,UAAUqnB,GAA0B/6C,EAAK,OAAQA,EAAKoR,MAAM,GAAG,EAEzEgjB,MAAOwmB,GAAQxmB,O,oBC4BF,MAAM6mB,WAAoB3B,GA2BvCj3C,WAAAA,CAAWwE,GAiBiC,IAjBhC,KACVpE,EAAI,GACJxD,EAAE,KACFC,EAAI,aACJg8C,EAAY,eACZC,EAAc,aACd5yC,EAAY,cACZ6yC,KACGnwC,GASqCpE,EACxCtE,MAAM0I,IAASpB,EAAAA,GAAAA,GAAA,gBAtCN,IAAI4oB,KAuCbjwB,KAAK04C,aAAeA,EACpB14C,KAAK24C,eAAiBA,EACtB34C,KAAK+F,aAAeA,EACpB/F,KAAK44C,cAAgBA,EACrB54C,KAAKC,KAAOA,EACZD,KAAKvD,GAAKA,EACVuD,KAAK64C,MAAQn8C,CACf,CAEAo8C,qBAAAA,CAAqBzkC,GAAoD,IAAnD,oBAAE0kC,GAAqC1kC,EAC3D,MAAM,QAAE2kC,EAAO,UAAEzd,GAAcv7B,KAAKi5C,cACpC,MAAO,CACLD,QAASD,EAAoBxL,IAAI,YAAcwL,EAAoBxL,IAAI,aACnEyL,EAAU,CAAC,EACfzd,UAAWwd,EAAoBxL,IAAI,aAAehS,EAAY,CAAC,EAEnE,CAEA2d,mBAAAA,GACuB,MAAjBl5C,KAAKm5C,UACT9oC,MAAMpF,KAAKjL,KAAKm5C,SAASt5B,QACtB3K,QAAQrW,GAAamB,KAAKo5C,sBAAsBv6C,KAChDuF,KAAKvF,GAAamB,KAAKq5C,WAAWx6C,KAClCqW,QAAQokC,GAA+C,IAApCA,EAAOP,oBAAoBQ,OAC9Cr3B,SAASo3B,GAAWA,EAAOE,IACzB1B,OAAOtxC,GAAQizC,cAAez5C,KAAK84C,sBAAsBQ,KAChE,CAESrC,aAAAA,CAAc94C,GACrB4B,MAAMk3C,cAAc94C,GACpB6B,KAAKk5C,qBACP,CAESnC,UAAAA,CAAWlR,EAAsBp9B,GACxC1I,MAAMg3C,WAAWlR,EAASp9B,GAC1BzI,KAAKk5C,qBACP,CAEAQ,QAAAA,GAEE,OADA15C,KAAK41C,sBACE,CAAE3zB,KAAM,CAAEkP,IAAKnxB,KAAK21C,IAAI3Y,MAAO/8B,KAAMD,KAAK81C,kBACnD,CAEA,gBAAeC,CAAW91C,GACxBF,MAAMg2C,WAAW91C,GACjB,MAAM8tB,QAAkB/tB,KAAK21C,IAAInR,eACjCn0B,MAAMpF,KAAKjL,KAAKm5C,SAASt5B,QACtB3K,QAAQrW,GAAamB,KAAKo5C,sBAAsBv6C,KAChDuF,KAAKvF,GAAamB,KAAKq5C,WAAWx6C,KAClCqjB,SAASo3B,IACRA,EAAOE,IAAI1B,OAAOtxC,GAAQmzC,cAAe,CACvC5rB,eACGurB,EAAOM,aAAe55C,KAAK05C,YAC9B,GAER,CAEAL,UAAAA,CAAWx6C,GACT,MAAMy6C,EAASt5C,KAAKm5C,SAASt2B,IAAIhkB,GACjC,GAAc,MAAVy6C,EAAgB,MAAM,IAAIv2C,EAAsBlE,GACpD,OAAOy6C,CACT,CAEAF,qBAAAA,CAAsBv6C,GACpB,OAAO4H,GAAWozC,YAAc75C,KAAKq5C,WAAWx6C,GAAUqnB,QACrDlmB,KAAKq5C,WAAWx6C,GAAU26C,IAAI7B,WAAW3xC,aAChD,CAEA8zC,oBAAAA,CAAqBj7C,GACnB,MAAMy6C,EAASt5C,KAAKq5C,WAAWx6C,GAC/By6C,EAAOE,IAAI7B,WAAWz4C,aACtBo6C,EAAOpzB,OAASzf,GAAWszC,aAC3BT,EAAOP,oBAAsB,IAAIrP,GACnC,CAMAsQ,eAAAA,CAAgBv9C,GACduD,KAAK85C,qBAAqBr9C,GAC1BuD,KAAKm5C,SAAS3oB,OAAO/zB,EACvB,CAOAw9C,YAAAA,CAAaC,GAGX,MAAMz9C,GAAK09C,EAAAA,GAAAA,KACX,IAAIC,EACJ,MAAMd,EAAyB,CAC7B78C,KACAypB,OAAQzf,GAAW4zC,+BACnBtB,oBAAqB,IAAIrP,IACzBkQ,aAAa,EACbJ,IAAK,IAAI9B,GACPwC,GACA,KACEl6C,KAAKm5C,SAAS3oB,OAAO/zB,GACrBuD,KAAK+F,aAAatJ,EAAI29C,EAAiB,GAEzC,CACE,CAAC5zC,GAAQ8zC,iBAAmB3lC,IAC1BylC,EAAmBzlC,EACnB3U,KAAK85C,qBAAqBr9C,EAAG,EAI/B,CAAC+J,GAAQX,SAAUsE,MAAA8K,EAEhB5M,KAAW,IAFY,KACxBpI,EAAI,QAAE2B,EAAO,MAAE24C,EAAK,YAAEX,GACvB3kC,EACC,GAAIrT,IAAYu2C,GAAa,MAAM,IAAI3wC,GAKvC,aAHMxH,KAAK04C,aAAaj8C,EAAI,CAAEwD,OAAMs6C,QAAOX,eAAevxC,GAC1DixC,EAAOpzB,OAASzf,GAAWozC,UAC3BP,EAAOM,YAAcA,EACd,UACI55C,KAAKw6C,mBACXZ,GAAe55C,KAAK05C,WACxB,EAEH,CAAClzC,GAAQi0C,kBAAmBtwC,MAAAgL,EAAwB9M,KAAW,IAA5B,KAAE3L,EAAI,MAAE+B,GAAO0W,EAChD,IAAKnV,KAAKo5C,sBAAsB38C,GAAK,MAAM,IAAIiL,GAE/C,OAAQhL,GACN,KAAK6J,GAAmBm0C,gBAEhB16C,KAAK24C,eAAel8C,EAAI,CAAEC,OAAM+B,SAAS4J,GAC/CixC,EAAOP,oBAAoBvL,IAAI/uC,GAC/B,MACF,KAAK8H,GAAmBo0C,YACtBrB,EAAOP,oBAAoBvoB,OAAO/xB,GAClC,MACF,QACE,MAAM,IAAIsD,EAAe,8BAA6BrF,KAG1D,MAAO,CACLk+C,aAAcvqC,MAAMpF,KAAKquC,EAAOP,qBAChC56C,QAAS6B,KAAK84C,sBAAsBQ,GACrC,EAEH,CAAC9yC,GAAQrI,SAAUgM,MAAOwK,EAAQtM,KAChC,IAAKrI,KAAKo5C,sBAAsB38C,GAAK,MAAM,IAAIiL,GAE/C,aADM1H,KAAK44C,cAAcn8C,EAAIkY,EAAQtM,GAC9BrI,KAAKk2C,WAAW,EAEzB,CAAC1vC,GAAQkL,MAAOvH,MAAAiL,EAId/M,KACG,IAJH,GACEkM,EAAE,UAAE0zB,EAAYjoC,KAAK7B,QAAO,aAAE08C,EAAY,QAAE7sB,GAC7C5Y,EAGD,IAAKpV,KAAKo5C,sBAAsB38C,GAAK,MAAM,IAAIiL,GAC/C,IAAK1H,KAAKk2C,YAAYvqC,SAASs8B,GAC7B,MAAM,IAAItgC,GAAuBsgC,GAGnC,MAAM1pB,EAAa,CACjB0pB,YAAW6S,WAAYzyC,EAAQ0yC,gBAAiBt+C,EAAIuxB,WAEtD,GAAI6sB,IAA4B,IAAZ7sB,EAClB,MAAO,CAAEgtB,wBAAyBh7C,KAAKsuB,gBAAgB/Z,EAAIgK,IAE7D,IACE,OAAO65B,GAAQxmB,MAAMwmB,GAAQlnB,UAAU,CACrC+pB,sBAAuBj7C,KAAK+nC,gBAAgBxzB,EAAI,IAAKgK,EAAY1M,QAAQ,MAE7E,CAAE,MAAO3G,GACP,MAAMk8B,QAAmBrB,GAAkBxxB,EAAIvU,KAAK21C,KACpD,GAAIvO,EAAWllC,OAAS,EAAG,MAAM,IAAIkF,GAA2BggC,GAChE,MAAMl8B,CACR,GAEF,CAAC1E,GAAQgoB,aAAcrkB,MAAAuZ,EAA8Crb,KAAW,IAAlD,QAAEvI,EAAO,UAAEmoC,EAAYjoC,KAAK7B,SAASulB,EACjE,IAAK1jB,KAAKo5C,sBAAsB38C,GAAK,MAAM,IAAIiL,GAC/C,IAAK1H,KAAKk2C,YAAYvqC,SAASs8B,GAC7B,MAAM,IAAItgC,GAAuBsgC,GAGnC,MAAM1pB,EAAa,CAAE0pB,YAAW6S,WAAYzyC,EAAQ0yC,gBAAiBt+C,GACrE,MAAO,CACLqV,UAAWhH,GAAOG,WAAWjL,KAAKwuB,YAAY1uB,EAASye,IAAa5b,SAAS,OAC9E,EAEH,CAAC6D,GAAQiD,eAAgBU,MAAAwZ,EAEtBtb,KAAW,IAFkB,OAC9BoK,EAAM,IAAE/I,EAAG,KAAE5C,EAAI,UAAEmhC,EAAYjoC,KAAK7B,SACrCwlB,EACC,IAAK3jB,KAAKo5C,sBAAsB38C,GAAK,MAAM,IAAIiL,GAC/C,IAAK1H,KAAKk2C,YAAYvqC,SAASs8B,GAC7B,MAAM,IAAItgC,GAAuBsgC,GAGnC,MAAM1pB,EAAa,IACd9L,EAAQw1B,YAAW6S,WAAYzyC,EAAQ0yC,gBAAiBt+C,GAE7D,MAAO,CACLqV,gBAAiB9R,KAAKyJ,cAAc3C,EAAM4C,EAAK6U,GAChD,EAEH,CAAC/X,GAAQmD,0BAA2BQ,MAAA08B,EAEjCx+B,KAAW,IAAA6yC,EAAAjU,EAAAC,EAAA+B,EAAA,IAF6B,gBACzC7lC,EAAe,KAAEnD,EAAI,cAAE8J,EAAa,SAAEoxC,EAAQ,UAAElT,EAAYjoC,KAAK7B,QAAO,SAAEuwB,GAC3EmY,EACC,IAAK7mC,KAAKo5C,sBAAsB38C,GAAK,MAAM,IAAIiL,GAC/C,IAAK1H,KAAKk2C,YAAYvqC,SAASs8B,GAC7B,MAAM,IAAItgC,GAAuBsgC,GAG3B,QAARiT,EAAAxsB,SAAQ,IAAAwsB,IAARxsB,GAAa,GACb,MAAMnQ,EAAa,CAAE0pB,YAAW6S,WAAYzyC,EAAQ0yC,gBAAiBt+C,GAC/DqV,QAM4D,QANhDm1B,EAIkE,QAJlEC,EAEkD,QAFlD+B,EACP,MAARhpC,EAAe,KAAOD,KACpB4J,6BAA6BxG,EAAiBnD,EAAMse,UAAW,IAAA0qB,EAAAA,EAC7C,MAAjBl/B,EAAwB,KAAO/J,KAChC8J,oCAAoC1G,EAAiB2G,EAAewU,UAAW,IAAA2oB,EAAAA,GACjE,IAAbiU,EAAoB,KAAOn7C,KAC5B6J,iCAAiCzG,EAAiBmb,UAAW,IAAA0oB,EAAAA,EAC7DjnC,KAAK2J,yBAAyBvG,EAAiB,IAAKmb,EAAYmQ,cAErE,MAAO,CAAE5c,YAAW,EAEtB,CAACtL,GAAQwD,gBAAiBG,MAAAg/B,EAAiD9gC,KAAW,IAArD,WAAE4B,EAAU,UAAEg+B,EAAYjoC,KAAK7B,SAASgrC,EACvE,IAAKnpC,KAAKo5C,sBAAsB38C,GAAK,MAAM,IAAIiL,GAC/C,IAAK1H,KAAKk2C,YAAYvqC,SAASs8B,GAAY,MAAM,IAAItgC,GAAuBsgC,GAC5E,MAAM1pB,EAAa,CAAE0pB,YAAW6S,WAAYzyC,EAAQ0yC,gBAAiBt+C,GAC/DqV,QAAkB9R,KAAKgK,eAAeC,EAAYsU,GACxD,MAAO,CAAEzM,YAAW,KAM5B,OADA9R,KAAKm5C,SAAS/qB,IAAI3xB,EAAI68C,GACf78C,CACT,CAMA,qBAAM2C,CAAgBP,GACpBmB,KAAKq5C,WAAWx6C,GAAU26C,IAAI1B,OAAOtxC,GAAQ40C,qBAAsBp7C,KAAKw6C,gBAC1E,CAMA,mBAAMA,GACJ,MAAO,CACL/9C,GAAIuD,KAAKvD,GACTwD,KAAMD,KAAKC,KACX8tB,gBAAiB/tB,KAAK21C,IAAInR,eAC1Bn8B,OAAQD,OAAOizC,SAAShzC,OACxB3L,KAAMsD,KAAK64C,MAEf,CAMAI,WAAAA,GACE,MAAO,CACLD,QAAiC,MAAxBh5C,KAAKg3C,gBAA0B,CAAE,CAACh3C,KAAKg3C,iBAAkB,CAAC,GAAM,CAAC,EAC1Ezb,UAAWv7B,KAAKk2C,YACbhhC,QAAQud,GAAMA,IAAMzyB,KAAKg3C,kBACzBtnB,QAAO,CAACC,EAAK8C,KAAM,IAAM9C,EAAK,CAAC8C,GAAI,CAAC,KAAM,CAAC,GAElD,ECjXK,MAAM/N,GAAuC,CAClDhoB,KAAM,CACJuD,KAAM,YACN+yB,UAAW,WACXC,gBAAiB,CACfpsB,KAAM,CACJqsB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwI,QAAS,CACPyqB,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBAORsoB,GAA0C,CACrD5+C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,cACXC,gBAAiB,CACf0c,WAAY,CACVzc,eAAgB,cAChBx2B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,UAG3Bs7C,QAAS,CACProB,eAAgB,WAChBx2B,KAAM,CACJuD,KAAM,cAOHI,GAA4C,CACvD3D,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBACXC,gBAAiB,CACfv2B,KAAM,CACJw2B,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVu7C,IAAK,CACHtoB,eAAgB,MAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aAGflzB,QAAS,CACPozB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVi3B,QAAS,CACPhE,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,cAOHw7C,GAAuC,CAClD/+C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,WACXC,gBAAiB,CACfyoB,KAAM,CACJxoB,eAAgB,OAChBx2B,KAAM,CACJuD,KAAM,WAGV07C,KAAM,CACJzoB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV27C,IAAK,CACH1oB,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH47C,GAA4C,CACvDn/C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBACXC,gBAAiB,CACfsF,SAAU,CACRrF,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVyJ,IAAK,CACHwpB,eAAgB,MAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,eASxB67C,GAAoD,CAC/Dp/C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,wBACXC,gBAAiB,CACfhwB,OAAQ,CACNiwB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwI,QAAS,CACPyqB,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBAGf+oB,SAAU,CACR7oB,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+7C,WAAY,CACV9oB,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVg8C,UAAW,CACT/oB,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHi8C,GAAsD,CACjEx/C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,0BACXC,gBAAiB,CACfsF,SAAU,CACRrF,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV87C,SAAU,CACR7oB,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV+7C,WAAY,CACV9oB,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVg8C,UAAW,CACT/oB,eAAgB,aAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHk8C,GAAgD,CAC3Dz/C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,oBACXC,gBAAiB,CACf8oB,SAAU,CACR7oB,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVygB,OAAQ,CACNwS,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,aAOpBm8C,GAAgD,CAC3D1/C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,oBACXC,gBAAiB,CACfhwB,OAAQ,CACNiwB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwI,QAAS,CACPyqB,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBAGf+oB,SAAU,CACR7oB,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVgC,UAAW,CACTixB,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,gBASPgvC,GAAuC,CAClDvyC,KAAM,CACJuD,KAAM,YACN+yB,UAAW,WACXC,gBAAiB,CACfgE,SAAU,CACR/D,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHo8C,GAAqD,CAChE3/C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,yBACXC,gBAAiB,CACfgE,SAAU,CACR/D,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVs4B,SAAU,CACRrF,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHq8C,GAA8C,CACzD5/C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBACXC,gBAAiB,CACf8oB,SAAU,CACR7oB,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVgC,UAAW,CACTixB,eAAgB,YAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,eASxBg0B,GAAyC,CACpDv3B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aACXC,gBAAiB,CACfiB,OAAQ,CACNhB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHs8C,GAAmD,CAC9D7/C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,uBACXC,gBAAiB,CACfhwB,OAAQ,CACNiwB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwI,QAAS,CACPyqB,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBAGfiE,SAAU,CACR/D,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV87C,SAAU,CACR7oB,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHu8C,GAA4C,CACvD9/C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBACXC,gBAAiB,CACfsF,SAAU,CACRrF,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHw8C,GAA4C,CACvD//C,KAAM,CACJuD,KAAM,YACN+yB,UAAW,gBACXC,gBAAiB,CACfypB,cAAe,CACbxpB,eAAgB,iBAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH08C,GAAoD,CAC/DjgD,KAAM,CACJuD,KAAM,YACN+yB,UAAW,wBACXC,gBAAiB,CACfsF,SAAU,CACRrF,eAAgB,WAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVgD,OAAQ,CACNiwB,eAAgB,SAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVwI,QAAS,CACPyqB,eAAgB,UAChBx2B,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBAOR4pB,GAA8C,CACzDlgD,KAAM,CACJuD,KAAM,YACN+yB,UAAW,kBACXC,gBAAiB,CACfrxB,QAAS,CACPsxB,eAAgB,UAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH48C,GAAyC,CACpDngD,KAAM,CACJuD,KAAM,YACN+yB,UAAW,aACXC,gBAAiB,CACf6pB,WAAY,CACV5pB,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOH88C,GAA+C,CAC1DrgD,KAAM,CACJuD,KAAM,YACN+yB,UAAW,mBACXC,gBAAiB,CACf+pB,WAAY,CACV9pB,eAAgB,cAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGV6G,KAAM,CACJosB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,cAOHg9C,GAA6C,CACxDvgD,KAAM,CACJuD,KAAM,YACN+yB,UAAW,iBACXC,gBAAiB,CACfnsB,KAAM,CACJosB,eAAgB,OAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,aC5gBpBk9B,GAAkC,CAC7CL,cAAe,CAAC,UAAW,eAC3BC,OAAQ,CACNxnB,aAAc,mBACdugB,YAAY,EACZ5C,eAAgB,eAChBx2B,KAAM,CACJuD,KAAM,YAKCmxB,GAA2B,CACtC0L,cAAe,OACfC,OAAQmgB,IAGGrgB,GAA6B,CACxCC,cAAe,SACfC,OAAQ,CACNxnB,aAAc,mBACdugB,YAAY,EACZ5C,eAAgB,SAChBx2B,KAAM,CACJuD,KAAM,YAKC+8B,GAA+B,CAC1CF,cAAe,QACfC,OAAQ,CACN7J,eAAgB,QAChBC,UAAU,EACVz2B,KAAM,CACJuD,KAAM,WAGVg9B,cAAc,GAGHI,GAA4B,CACvCP,cAAe,OACfC,OAAQogB,IAGGC,GAA4B,CACvCtgB,cAAe,OACfC,OAAQsgB,IAGGC,GAA4B,CACvCxgB,cAAe,OACfC,OAAQwgB,IAGGC,GAA4B,CACvC1gB,cAAe,OACfC,OAAQ0gB,IAGGC,GAA4B,CACvC5gB,cAAe,OACfC,OAAQ4gB,IAGGC,GAA4B,CACvC9gB,cAAe,OACfC,OAAQ8gB,IAGGC,GAA4B,CACvChhB,cAAe,OACfC,OAAQghB,IC7CH,MAAMC,WAAiBvgB,GAAAA,EAQ5B59B,WAAAA,CAAYm9B,EAAev0B,GAAkC,IAAApE,EAAAq5B,EAC3D,QAAcv7B,IAAV66B,EACF,MAAM,IAAIp9B,MAAM,0BAIb6I,IACHA,EAAU,CAAC,GAEb,MAAMk1B,EAAmC,CACvCC,mBAAoB,mCAGhBC,EAAkB,iCAClBC,EACJr1B,EAAQs1B,kBAAoBt1B,EAAQs1B,iBAAiBD,gBAChD,GAAEr1B,EAAQs1B,iBAAiBD,mBAAmBD,IAC9C,GAAEA,IAEHG,EAAsB,IACvBL,KACAl1B,EACHs1B,iBAAkB,CAChBD,mBAEFG,SAA6C,QAArC55B,EAAkB,QAAlBq5B,EAAEj1B,EAAQw1B,gBAAQ,IAAAP,EAAAA,EAAIj1B,EAAQy1B,eAAO,IAAA75B,EAAAA,EAAI,WAEnDtE,MAAMi+B,GAENh+B,KAAKg9B,MAAQA,CACf,CAOAihB,WAAAA,CACE7sB,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACRy1C,GAEJ,CAOAC,eAAAA,CACE/sB,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACR21C,GAEJ,CAOAC,gBAAAA,CACEjtB,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACR61C,GAEJ,CAOAC,wBAAAA,CACEntB,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACR+1C,GAEJ,CAOAC,cAAAA,CACErtB,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACRi2C,GAEJ,CAOAC,sBAAAA,CACEvtB,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACRm2C,GAEJ,CAOAC,oBAAAA,CACEztB,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACRq2C,GAEJ,CAOAC,oBAAAA,CACE3tB,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACRu2C,GAEJ,CAOAC,gBAAAA,CACE7tB,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACRy2C,GAEJ,CAOAC,kBAAAA,CACE/tB,EACA3oB,GAEA,OAAOzI,KAAKo+B,qBACV,CAAEhN,OAAM3oB,WACR22C,GAEJ,CAMAx9C,OAAAA,CAAQ6G,GACN,OAAOzI,KAAKo+B,qBAAqB,CAAE31B,WAAW42C,GAChD,CAMAvC,UAAAA,CAAWr0C,GACT,OAAOzI,KAAKo+B,qBAAqB,CAAE31B,WAAW62C,GAChD,CAMA3J,GAAAA,CAAIltC,GACF,OAAOzI,KAAKo+B,qBAAqB,CAAE31B,WAAW82C,GAChD,EAGF,MAAMld,GAAa5E,GAAAA,EAA4B6E,GAAqB,GAE9D4b,GAAqD,CACzD96B,KAAM,OACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACV/lC,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CACPl3B,KAAM,CAAEuD,KAAM,aAAcxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,aAK3D,IAAK,CACHwiC,WAAY,CACV/lC,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CAAEl3B,KAAM,CAAEuD,KAAM,YAAa+yB,UAAW,oBAGrD0P,SAAS,IAGbK,YAAaH,GACbC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAwBA,IAC3CI,UAAW,OACXX,WAAUA,IAEN+b,GAAyD,CAC7Dh7B,KAAM,WACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACV/lC,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CAAEl3B,KAAM,CAAEuD,KAAM,YAAa+yB,UAAW,oBAGrD0P,SAAS,IAGbK,YAAaH,GACbC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAwBA,IAC3CI,UAAW,OACXX,WAAUA,IAENic,GAA0D,CAC9Dl7B,KAAM,sBACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAY,CAAE/lC,KAAM,CAAEuD,KAAM,SAE9B,IAAK,CACHwiC,WAAY,CACV/lC,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CAAEl3B,KAAM,CAAEuD,KAAM,YAAa+yB,UAAW,oBAGrD0P,SAAS,IAGbK,YAAaH,GACbC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAwBA,IAC3CI,UAAW,OACXX,WAAUA,IAENmc,GAAkE,CACtEp7B,KAAM,+BACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACV/lC,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CAAEl3B,KAAM,CAAEuD,KAAM,YAAa+yB,UAAW,oBAGrD0P,SAAS,IAGbK,YAAaH,GACbC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAwBA,IAC3CI,UAAW,OACXX,WAAUA,IAENqc,GAAwD,CAC5Dt7B,KAAM,mBACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACV/lC,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CAAEl3B,KAAM,CAAEuD,KAAM,YAAa+yB,UAAW,oBAGrD0P,SAAS,IAGbK,YAAaH,GACbC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAwBA,IAC3CI,UAAW,OACXX,WAAUA,IAENuc,GAAgE,CACpEx7B,KAAM,4BACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAwBA,IAC3CI,UAAW,OACXX,WAAUA,IAENyc,GAA8D,CAClE17B,KAAM,0BACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACV/lC,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CAAEl3B,KAAM,CAAEuD,KAAM,YAAa+yB,UAAW,oBAGrD0P,SAAS,IAGbK,YAAaH,GACbC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAwBA,IAC3CI,UAAW,OACXX,WAAUA,IAEN2c,GAA8D,CAClE57B,KAAM,kBACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAwBA,IAC3CI,UAAW,OACXX,WAAUA,IAEN6c,GAA0D,CAC9D97B,KAAM,sBACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CAAC,EACN,IAAK,CACHC,WAAY,CACV/lC,KAAM,CACJuD,KAAM,WACN2zB,QAAS,CAAEl3B,KAAM,CAAEuD,KAAM,YAAa+yB,UAAW,oBAGrD0P,SAAS,IAGbK,YAAaH,GACbC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAwBA,IAC3CI,UAAW,OACXX,WAAUA,IAEN+c,GAA4D,CAChEh8B,KAAM,oBACNmf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbC,cAAe,CAACD,IAChBE,iBAAkB,CAACF,GAAwBA,IAC3CI,UAAW,OACXX,WAAUA,IAENgd,GAAiD,CACrDj8B,KAAM,WACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbG,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,IAENid,GAAoD,CACxDl8B,KAAM,eACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbG,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,IAENkd,GAA6C,CACjDn8B,KAAM,OACNmf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACV/lC,KAAM,CAAEuD,KAAM,aAAcxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,WAGvD,IAAK,CACHwiC,WAAYH,GACZI,SAAS,IAGbG,cAAe,CAACD,IAChBE,iBAAkB,CAACF,IACnBP,WAAUA,ICrfG,MAAemd,ICDf,MAAMC,WAAqBD,GAQxC3/C,WAAAA,CAAY6/C,GAA0E,IAArD,cAAExb,GAA4CjiC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAsBjF,GArBAlC,QACAC,KAAK21C,IAAM,IAAIgK,GAAYD,EAAa,CACtCvb,yBAAyB,EACzBC,mBAAoB,CAClB5S,IAAyBJ,IACvB,IAAItxB,EAAU,GAYd,MAXI,WAAYsxB,IACdtxB,GAAY,IAAGsxB,EAAK8C,SACC,MAAlB9C,EAAKwuB,UAAqB,OAAMxuB,EAAKwuB,YAAc,KAEtC,MAAbxuB,EAAK0C,KAAgB,KAAI7C,KAAKC,UAAUE,EAAK0C,SAAW,MAEzDzjB,MAAMyzB,QAAQ1S,KAChBtxB,GAAY,KAAIsxB,EACbhtB,KAAKytB,GAAO,GAAEA,EAAEn1B,QAAQm1B,EAAE2pB,IAAIG,QAAQ9pB,EAAE2pB,IAAII,QAAQ/pB,EAAE/xB,UAAuB,MAAb+xB,EAAEqF,QAAmB,KAAIrF,EAAEqF,WAAa,OACxG51B,KAAK,SAEHxB,CAAO,QAIE,IAAlBokC,EAAwB,CAC1B,MAAMlS,EAAiBhyB,KAAK21C,IAAImH,aAC7BnsB,MAAKtsB,IAAA,IAAC,WAAEy4C,GAAYz4C,EAAA,OAAKy4C,CAAU,IAAG5xC,GAAUA,IACnDlL,KAAK21C,IAAIrR,SAASC,UAChBzS,GAAsB,WAAY,eAAgBE,EAAgB,QAAS,SAE/E,CACF,CAEA,yBAAM0d,CACJD,EACAE,GAEA,IACE,MAAM1K,QAAYjlC,KAAK21C,IAAIwI,gBAAgB,CAAEt3C,KAAM4oC,EAAYhnC,QAAS,CAAEknC,gBAE1E,OAAO1K,CACT,CAAE,MAAO/5B,GACP,GAAIA,aAAiBW,GAAAA,GAAkC,MAArBX,EAAMY,WACtC,MAAM,IAAIzL,EAAc6K,EAAMpL,SAEhC,MAAMoL,CACR,CACF,CAGA,aAAM2kC,CAAQzsB,GACZ,MAAM,IAAI3hB,EAAoB,mDAChC,CAEA,6BAAMo+C,CACJpQ,EACAE,GAEA,IACE,aAAa3vC,KAAK21C,IAAIsI,YAAY,CAAEp3C,KAAM4oC,EAAYhnC,QAAS,CAAEknC,eACnE,CAAE,MAAOzkC,GACP,GAAIA,aAAiBW,GAAAA,GAAkC,MAArBX,EAAMY,WACtC,MAAM,IAAIzL,EAAc6K,EAAMpL,SAEhC,MAAMoL,CACR,CACF,CAGA,iBAAM40C,CAAY18B,GAChB,MAAM,IAAI3hB,EAAoB,mDAChC,CAEA,0BAAMwwC,CACJ1Z,EACAkX,EACAE,GAEA,IAEE,aADM3vC,KAAK21C,IAAIsJ,iBAAiB,CAAE1mB,WAAUt1B,OAAQwsC,EAAYhnC,QAAS,CAAEknC,iBACpE,CACT,CAAE,MACA,OAAO,CACT,CACF,CAGA,cAAMuC,CAAS3Z,EAAqCnV,GAClD,MAAM,IAAI3hB,EAAoB,mDAChC,CAEA,aAAMG,GACJ,aAAc5B,KAAK21C,IAAI/zC,WAAWA,OACpC,E,2DCzHA9E,EAAAA,EAAAA,IAAwC,OAAlCD,OADRkjD,EAAAA,EAAAA,IAAA,CAAA70C,MACiBtN,EAAAsN,U,QAAYtN,EAAAoiD,MAAI,E,CAIjC,QACEC,MAAO,CACLxhD,MAAO,CAAE/B,KAAM,CAACgO,OAAQ2F,MAAO+lC,OAAQxlC,OAAQxG,SAAU81C,QAAS,OAEpEp5C,KAAMA,KAAA,CACJk5C,KAAM,GACN90C,OAAO,IAETi1C,MAAO,CACL1hD,MAAO,CACL,aAAMmwC,CAAQnwC,GACPA,GAAOkyB,MAIZ3wB,KAAKggD,KAAO,wBACZhgD,KAAKkL,OAAQ,EACblL,KAAKggD,WAAavhD,EAAMkyB,MACrBjQ,GAAW1gB,KAAKogD,cAAc1/B,KAC9BxV,IACChF,QAAQyoB,KAAKzjB,GACblL,KAAKkL,OAAQ,EACNA,MAVTlL,KAAKggD,KAAOhgD,KAAKogD,cAAc3hD,EAanC,EACA4hD,WAAW,IAGf7L,QAAS,CACP4L,aAAAA,CAAc3hD,GACZ,MAAqB,kBAAVA,EAA2BA,EAC/BwyB,KAAKC,UACVzyB,GACA,CAAC0kB,EAAGtC,IAAoB,kBAANA,EAAkB,GAAEA,gBAAkBA,GACxD,EAEJ,I,YCrCJ,MAAMy/B,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,UlFgEA,IACE9wB,WAAY,CAAE+wB,MAAKA,IACnBz5C,KAAMA,KAAA,CACJjJ,YAAa2iD,WACb/gD,QAAS,GACTJ,eAAgB+I,OAAOq4C,SAAWr4C,OAClC/J,SAAU,GACVF,QAAS,GACTO,eAAgB,KAChBG,SAAU,KACVD,aAAc,KACdO,sBAAuB,OAEzBq1C,QAAS,CACP92C,QAAAA,GACO,eAAeqZ,KAAK/W,KAAKnC,cAAiBmC,KAAKnC,YAAYsW,WAAW,OACzEnU,KAAKnC,YAAc,UAAYmC,KAAKnC,aAEtCmC,KAAKP,QAAU,GACfO,KAAK0gD,WAAU,KACb1gD,KAAKP,QAAUO,KAAKnC,WAAW,GAEnC,EACAuB,eAAAA,EAAgB,SAAEooC,EAAW,IAAI,SAAEmZ,EAAW,GAAM,CAAC,GACnD,MAAM5iD,EAASiC,KAAKX,eAAiB+I,OAAOq4C,OAASzgD,KAAK4gD,MAAMC,KAAKC,cAC/DnJ,EAAa,IAAIzvC,GAA+B,CAAEnK,WACxDiC,KAAKnB,SAAWmB,KAAK+gD,MAAM9G,aAAatC,GAExC33C,KAAK+gD,MAAM3hD,gBAAgBY,KAAKnB,UAChC,MAAMmiD,EAAaC,aAAY,KAG7B,GAFAjhD,KAAK+gD,MAAM3hD,gBAAgBY,KAAKnB,UAChC8hD,GAAY,GACPA,EAAU,OAAO3gD,KAAKb,uBAAuB,GACjDqoC,GAEHxnC,KAAKb,sBAAwB,KAC3B+hD,cAAcF,GAEd,MAAM1H,EAASt5C,KAAK+gD,MAAM1H,WAAWr5C,KAAKnB,UACtCy6C,EAAOpzB,SAAWzf,GAAW4zC,gCAC/Br6C,KAAK+gD,MAAM/G,gBAAgBh6C,KAAKnB,UAElCmB,KAAKb,sBAAwB,IAAI,CAErC,EACAD,UAAAA,GAEE,MAAMo6C,EAASt5C,KAAK+gD,MAAM1H,WAAWr5C,KAAKnB,UACtCy6C,EAAOpzB,SAAWzf,GAAWozC,WAC/BP,EAAOE,IAAI1B,OAAOtxC,GAAQ8zC,gBAAiB,MAG7Ct6C,KAAK+gD,MAAM/G,gBAAgBh6C,KAAKnB,UAChCmB,KAAKnB,SAAW,IAClB,EACA,mBAAME,GACJiB,KAAK7B,QAAU6B,KAAK+gD,MAAM7K,YAAYhvC,MAAMurB,GAAMA,IAAMzyB,KAAK7B,UAC7D6B,KAAK+gD,MAAM9J,cAAcj3C,KAAK7B,QAChC,EACA,gBAAMa,GACJgB,KAAK3B,gBAAkB2B,KAAK+gD,MAAM9K,kBAC/B7xC,KAAI,EAAGnE,UAAWA,IAClBiH,MAAMjH,GAASA,IAASD,KAAK3B,WAChC2B,KAAK+gD,MAAMhL,WAAW/1C,KAAK3B,SAC7B,EACA8iD,kBAAAA,GACE,IAAKnhD,KAAKnB,SAER,YADAmB,KAAKpB,aAAe,MAGtB,MAAM06C,EAASt5C,KAAK+gD,MAAM1H,WAAWr5C,KAAKnB,UAC1CmB,KAAKpB,aAAe06C,EAAOpzB,MAC7B,GAEFk7B,OAAAA,GACEphD,KAAKtC,WAEL,MAAM2jD,EAAW,CAAC,EACZC,EAAsBC,GAAe,CAACC,EAAQjjC,EAAYlW,KAC9D,IAAKw/B,QAAQ,CACV,UAASwZ,EAASG,GAAQvhD,gBAAgBuhD,QAAan5C,aAAkBk5C,IAC1EhB,GAAM/L,QAAQ4L,cAAc7hC,IAC5Bjd,KAAK,OACL,MAAM,IAAIiG,EACZ,EAGF,MAAMk6C,UAA+BC,GACnC,qBAAMpzB,CAAgB/Z,GAAMwmC,gBAAiBt+C,EAAE,WAAEq+C,KAAeryC,GAAY,CAAC,GAC3E,GAAU,MAANhM,EAAY,CACd,MAAMgvC,EAAM,IAAKhjC,EAASk5C,WAAYrtC,GAASC,IAC3Ck3B,EAAI+D,aAAY/D,EAAI+D,WAAa,cACjC/D,EAAIhuB,SAAQguB,EAAIhuB,OAAS,UAC7B6jC,EAAoB,oBAAmB/sC,IAAvC+sC,CAA6C7kD,EAAIgvC,EAAKqP,EACxD,CACA,OAAO/6C,MAAMuuB,gBAAgB/Z,EAAI9L,EACnC,CAEA,iBAAM+lB,CAAY1uB,GAAWi7C,gBAAiBt+C,EAAE,WAAEq+C,KAAeryC,GAAY,CAAC,GAI5E,OAHU,MAANhM,GACF6kD,EAAoB,gBAAexhD,IAAnCwhD,CAA8C7kD,EAAIgM,EAASqyC,GAEtD/6C,MAAMyuB,YAAY1uB,EAAS2I,EACpC,CAEA,mBAAMgB,CAAc3C,EAAM4C,GAAOqxC,gBAAiBt+C,EAAE,WAAEq+C,KAAeryC,IACnE,GAAU,MAANhM,EAAY,CACd,MAAMmlD,GAAW,IAAI1vC,GAAAA,cAAeY,YAAYpJ,GAC1Cm4C,GAAc,IAAI1vC,GAAAA,0BAA2B2vC,eAAeh7C,EAAM86C,GAClEnW,EAAM,IAAKhjC,EAASiB,MAAKm4C,eAC/BP,EAAoB,mBAAkBx6C,IAAtCw6C,CAA8C7kD,EAAIgvC,EAAKqP,EACzD,CACA,OAAO/6C,MAAM0J,cAAc3C,EAAM4C,EAAKjB,EACxC,CAEA,8BAAMkB,CACJvG,GACE23C,gBAAiBt+C,EAAE,WAAEq+C,KAAeryC,IAEtC,GAAU,MAANhM,EAAY,CACd,MAAMgvC,EAAM,IAAKhjC,EAASrF,mBAC1Bk+C,EAAmB,8BAAnBA,CAAkD7kD,EAAIgvC,EAAKqP,EAC7D,CACA,OAAO/6C,MAAM4J,yBAAyBvG,EAAiBqF,EACzD,CAEA,kCAAMmB,CACJxG,EACAnD,GACE86C,gBAAiBt+C,EAAE,WAAEq+C,KAAeryC,IAEtC,GAAU,MAANhM,EAAY,CACd,MAAMgvC,EAAM,IAAKhjC,EAASrF,kBAAiBnD,QAC3CqhD,EAAmB,sCAAnBA,CAA0D7kD,EAAIgvC,EAAKqP,EACrE,CACA,OAAO/6C,MAAM6J,6BAA6BxG,EAAiBnD,EAAMwI,EACnE,CAEA,sCAAMoB,CACJzG,GACE23C,gBAAiBt+C,EAAE,WAAEq+C,KAAeryC,IAEtC,GAAU,MAANhM,EAAY,CACd,MAAMgvC,EAAM,IAAKhjC,EAASrF,mBAC1Bk+C,EAAmB,2CAAnBA,CAA+D7kD,EAAIgvC,EAAKqP,EAC1E,CACA,OAAO/6C,MAAM8J,iCAAiCzG,EAAiBqF,EACjE,CAEA,yCAAMqB,CACJ1G,EACA2G,GACEgxC,gBAAiBt+C,EAAE,WAAEq+C,KAAeryC,IAEtC,GAAU,MAANhM,EAAY,CACd,MAAMgvC,EAAM,IAAKhjC,EAASrF,kBAAiB2G,iBAC3Cu3C,EAAmB,8CAAnBA,CAAkE7kD,EAAIgvC,EAAKqP,EAC7E,CACA,OAAO/6C,MAAM+J,oCAAoC1G,EAAiB2G,EAAetB,EACnF,CAEA,oBAAMuB,CAAeC,GAAc8wC,gBAAiBt+C,EAAE,WAAEq+C,KAAeryC,IACrE,GAAU,MAANhM,EAAY,CACd,MAAMgvC,EAAM,IAAKhjC,KAAYmlB,GAAiB3jB,IAC9Cq3C,EAAmB,kBAAnBA,CAAsC7kD,EAAIgvC,EAAKqP,EACjD,CACA,OAAO/6C,MAAMiK,eAAeC,EAAYxB,EAC1C,CAEA,eAAO4lB,GAEL,OAAO,IAAIozB,EAAuBrwC,KAAkBK,UACtD,EAGFzR,KAAK+gD,MAAQ,IAAItI,GAAY,CAC3Bh8C,GAAI2L,OAAOC,OACX3L,KAAM4J,GAAY8B,OAClBmtC,MAAO,CACL,CAAEt1C,KAAM,SAAUu1C,SAAU,IAAIhY,GAAK,iCACrC,CAAEv9B,KAAM,aAAcu1C,SAAU,IAAIhY,GAAK,kCAE3C5S,SAAU,CACR,IAAI62B,EAAuB,oIAC3BA,EAAuBpzB,YAEzBmhB,WAAY,IAAIiQ,GAAa,iCAC7Bx/C,KAAM,gBACNy4C,aAAcA,CAAC8I,EAAQ7sC,EAAQtM,KAC7B,IAAKw/B,QAAS,UAASlzB,EAAO1U,gBAAgBuhD,QAAan5C,qBACzD,MAAM,IAAIZ,GAEZ45C,EAASG,GAAU7sC,EACnBrK,YAAW,IAAMtK,KAAKb,yBAAwB,EAEhDw5C,eAAgB2I,EAAmB,gBACnC1I,cAAe0I,EAAmB,gBAClCv7C,aAAelH,IACbqH,QAAQC,IAAI,sBAAuBtH,GACnCmB,KAAKnB,SAAW,IAAI,IAIpBmB,KAAKX,gBAAgBW,KAAKZ,kBAE9BY,KAAK3B,SAAW2B,KAAK+gD,MAAMjL,kBAC1B91C,KAAK7B,SAAW6B,KAAK+gD,MAAM7K,YAE5Bl2C,KAAK+hD,QACH,EAAG5jD,UAASE,cAAe,CAACF,EAASE,KACrC,EAAEF,MACA6B,KAAKtB,eAAiBsB,KAAK+gD,MAAMnY,WAAWzqC,EAAQ,GAEtD,CAAEkiD,WAAW,IAIfY,aAAY,IAAMjhD,KAAKmhD,sBAAsB,KAC7CnhD,KAAK+hD,QAAO,EAAGljD,cAAe,CAACA,KAAW,IAAMmB,KAAKmhD,sBAAsB,CAAEd,WAAW,GAC1F,GmF1RF,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS2B,GAAQ,CAAC,YAAY,qBAEzF,WCPAC,EAAAA,EAAAA,IAAUC,IAAKC,MAAM,O,sBCFjBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBngD,IAAjBogD,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUl5C,KAAKq5C,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAGpEI,EAAOD,OACf,CAGAH,EAAoBM,EAAID,E,WCzBxB,IAAIE,EAAW,GACfP,EAAoBQ,EAAI,SAASniC,EAAQoiC,EAAUh/C,EAAIi/C,GACtD,IAAGD,EAAH,CAMA,IAAIE,EAAeC,IACnB,IAASh0B,EAAI,EAAGA,EAAI2zB,EAAS1gD,OAAQ+sB,IAAK,CACrC6zB,EAAWF,EAAS3zB,GAAG,GACvBnrB,EAAK8+C,EAAS3zB,GAAG,GACjB8zB,EAAWH,EAAS3zB,GAAG,GAE3B,IAJA,IAGIi0B,GAAY,EACPC,EAAI,EAAGA,EAAIL,EAAS5gD,OAAQihD,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAar4C,OAAOmV,KAAKwiC,EAAoBQ,GAAGO,OAAM,SAASnkD,GAAO,OAAOojD,EAAoBQ,EAAE5jD,GAAK6jD,EAASK,GAAK,IAChKL,EAASO,OAAOF,IAAK,IAErBD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbN,EAASS,OAAOp0B,IAAK,GACrB,IAAIq0B,EAAIx/C,SACE3B,IAANmhD,IAAiB5iC,EAAS4iC,EAC/B,CACD,CACA,OAAO5iC,CArBP,CAJCqiC,EAAWA,GAAY,EACvB,IAAI,IAAI9zB,EAAI2zB,EAAS1gD,OAAQ+sB,EAAI,GAAK2zB,EAAS3zB,EAAI,GAAG,GAAK8zB,EAAU9zB,IAAK2zB,EAAS3zB,GAAK2zB,EAAS3zB,EAAI,GACrG2zB,EAAS3zB,GAAK,CAAC6zB,EAAUh/C,EAAIi/C,EAwB/B,C,eC5BAV,EAAoBv/B,EAAI,SAAS0/B,EAASe,GACzC,IAAI,IAAItkD,KAAOskD,EACXlB,EAAoBmB,EAAED,EAAYtkD,KAASojD,EAAoBmB,EAAEhB,EAASvjD,IAC5EyL,OAAO+4C,eAAejB,EAASvjD,EAAK,CAAEykD,YAAY,EAAM7gC,IAAK0gC,EAAWtkD,IAG3E,C,eCPAojD,EAAoBsB,EAAI,WACvB,GAA0B,kBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAO5jD,MAAQ,IAAI6jD,SAAS,cAAb,EAChB,CAAE,MAAOhyB,GACR,GAAsB,kBAAXzpB,OAAqB,OAAOA,MACxC,CACA,CAPuB,E,eCAxBi6C,EAAoBmB,EAAI,SAASM,EAAKC,GAAQ,OAAOr5C,OAAOwqC,UAAU8O,eAAe56C,KAAK06C,EAAKC,EAAO,C,eCCtG1B,EAAoBiB,EAAI,SAASd,GACX,qBAAXyB,QAA0BA,OAAOC,aAC1Cx5C,OAAO+4C,eAAejB,EAASyB,OAAOC,YAAa,CAAEzlD,MAAO,WAE7DiM,OAAO+4C,eAAejB,EAAS,aAAc,CAAE/jD,OAAO,GACvD,C,eCDA,IAAI0lD,EAAkB,CACrB,IAAK,GAaN9B,EAAoBQ,EAAEM,EAAI,SAASiB,GAAW,OAAoC,IAA7BD,EAAgBC,EAAgB,EAGrF,IAAIC,EAAuB,SAASC,EAA4Bx9C,GAC/D,IAKIw7C,EAAU8B,EALVtB,EAAWh8C,EAAK,GAChBy9C,EAAcz9C,EAAK,GACnB09C,EAAU19C,EAAK,GAGImoB,EAAI,EAC3B,GAAG6zB,EAAS/e,MAAK,SAAStnC,GAAM,OAA+B,IAAxB0nD,EAAgB1nD,EAAW,IAAI,CACrE,IAAI6lD,KAAYiC,EACZlC,EAAoBmB,EAAEe,EAAajC,KACrCD,EAAoBM,EAAEL,GAAYiC,EAAYjC,IAGhD,GAAGkC,EAAS,IAAI9jC,EAAS8jC,EAAQnC,EAClC,CAEA,IADGiC,GAA4BA,EAA2Bx9C,GACrDmoB,EAAI6zB,EAAS5gD,OAAQ+sB,IACzBm1B,EAAUtB,EAAS7zB,GAChBozB,EAAoBmB,EAAEW,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAO/B,EAAoBQ,EAAEniC,EAC9B,EAEI+jC,EAAqBt8C,KAAK,6BAA+BA,KAAK,8BAAgC,GAClGs8C,EAAmBviC,QAAQmiC,EAAqBzX,KAAK,KAAM,IAC3D6X,EAAmBn9C,KAAO+8C,EAAqBzX,KAAK,KAAM6X,EAAmBn9C,KAAKslC,KAAK6X,G,IC/CvF,IAAIC,EAAsBrC,EAAoBQ,OAAE1gD,EAAW,CAAC,MAAM,WAAa,OAAOkgD,EAAoB,MAAQ,IAClHqC,EAAsBrC,EAAoBQ,EAAE6B,E","sources":["webpack://wallet-iframe/./src/App.vue","webpack://wallet-iframe/../../src/utils/errors.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://wallet-iframe/../../src/aepp-wallet-communication/schema.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://wallet-iframe/../../src/account/Base.ts","webpack://wallet-iframe/../../src/utils/other.ts","webpack://wallet-iframe/../../src/utils/encoder-types.ts","webpack://wallet-iframe/../../src/utils/encoder.ts","webpack://wallet-iframe/../../src/utils/crypto.ts","webpack://wallet-iframe/../../src/utils/typed-data.ts","webpack://wallet-iframe/../../../src/tx/builder/constants.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/entry.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/array.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/map.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-default.ts","webpack://wallet-iframe/../../src/utils/bytes.ts","webpack://wallet-iframe/../../../src/tx/builder/helpers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/address.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/encoded.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/raw.ts","webpack://wallet-iframe/../../src/utils/bignumber.ts","webpack://wallet-iframe/../../src/utils/amount-formatter.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ttl.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/nonce.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/field.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-id.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers2.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ct-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/boolean.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-price.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/abi-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/enumeration.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/string.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/query-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/mptree.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/wrapped.ts","webpack://wallet-iframe/../../../src/tx/builder/schema.ts","webpack://wallet-iframe/../../../src/tx/builder/common.ts","webpack://wallet-iframe/../../../src/tx/builder/index.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/index.ts","webpack://wallet-iframe/../../src/account/Memory.ts","webpack://wallet-iframe/../../src/utils/semver-satisfies.ts","webpack://wallet-iframe/../../src/utils/autorest.ts","webpack://wallet-iframe/../../../../src/apis/node/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/node/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/node/node.ts","webpack://wallet-iframe/../src/Node.ts","webpack://wallet-iframe/../../src/tx/transaction-signer.ts","webpack://wallet-iframe/../../src/tx/execution-cost.ts","webpack://wallet-iframe/../../src/tx/validator.ts","webpack://wallet-iframe/../src/chain.ts","webpack://wallet-iframe/../src/aens.ts","webpack://wallet-iframe/../src/spend.ts","webpack://wallet-iframe/../src/oracle.ts","webpack://wallet-iframe/../../src/contract/Contract.ts","webpack://wallet-iframe/../../src/contract/delegation-signature.ts","webpack://wallet-iframe/../../src/contract/ga.ts","webpack://wallet-iframe/../src/AeSdkMethods.ts","webpack://wallet-iframe/../src/AeSdkBase.ts","webpack://wallet-iframe/../src/AeSdk.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://wallet-iframe/../../src/utils/json-big.ts","webpack://wallet-iframe/../src/AeSdkWallet.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/compiler/compiler.ts","webpack://wallet-iframe/../../../src/contract/compiler/Base.ts","webpack://wallet-iframe/../../../src/contract/compiler/Http.ts","webpack://wallet-iframe/./src/Value.vue","webpack://wallet-iframe/./src/Value.vue?2a90","webpack://wallet-iframe/./src/App.vue?7ccd","webpack://wallet-iframe/./src/main.js","webpack://wallet-iframe/webpack/bootstrap","webpack://wallet-iframe/webpack/runtime/chunk loaded","webpack://wallet-iframe/webpack/runtime/define property getters","webpack://wallet-iframe/webpack/runtime/global","webpack://wallet-iframe/webpack/runtime/hasOwnProperty shorthand","webpack://wallet-iframe/webpack/runtime/make namespace object","webpack://wallet-iframe/webpack/runtime/jsonp chunk loading","webpack://wallet-iframe/webpack/startup"],"sourcesContent":["<template>\n  <input id=\"toggle-aepp\" type=\"checkbox\" />\n  <h2>\n    Wallet Iframe\n    <label for=\"toggle-aepp\" />\n  </h2>\n\n  <div class=\"group\">\n    <div>\n      <div>Aepp URL</div>\n      <form\n        novalidate\n        @submit.prevent=\"navigate\"\n      >\n        <input\n          type=\"url\"\n          v-model=\"nextAeppUrl\"\n          @focus=\"$event.target.select()\"\n        >\n      </form>\n    </div>\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Node</div>\n      <div>{{ nodeName }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>RPC client</div>\n      <div>status: {{ clientStatus ?? 'no client' }}, id: {{ clientId ?? 'not defined' }}</div>\n    </div>\n\n    <button @click=\"switchAccount\">Switch Account</button>\n    <button @click=\"switchNode\">Switch Node</button>\n\n    <button\n      v-if=\"clientStatus === 'CONNECTED'\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else\n      @click=\"() => (stopSharingWalletInfo ?? shareWalletInfo)()\"\n    >\n      {{ stopSharingWalletInfo ? 'Stop sharing' : 'Share wallet info' }}\n    </button>\n  </div>\n\n  <iframe\n    v-if=\"!runningInFrame\"\n    ref=\"aepp\"\n    :src=\"aeppUrl\"\n  />\n</template>\n\n<script>\nimport {\n  MemoryAccount, generateKeyPair, AeSdkWallet, Node, CompilerHttp,\n  BrowserWindowMessageConnection, METHODS, WALLET_TYPE, RPC_STATUS,\n  RpcConnectionDenyError, RpcRejectedByUserError, unpackTx, unpackDelegation,\n} from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    nextAeppUrl: process.env.VUE_APP_AEPP_URL ?? `http://${location.hostname}:9001`,\n    aeppUrl: '',\n    runningInFrame: window.parent !== window,\n    nodeName: '',\n    address: '',\n    balancePromise: null,\n    clientId: null,\n    clientStatus: null,\n    stopSharingWalletInfo: null,\n  }),\n  methods: {\n    navigate() {\n      if (!/^https?:\\/\\//.test(this.nextAeppUrl) && !this.nextAeppUrl.startsWith('.')) {\n        this.nextAeppUrl = 'http://' + this.nextAeppUrl;\n      }\n      this.aeppUrl = '';\n      this.$nextTick(() => {\n        this.aeppUrl = this.nextAeppUrl;\n      });\n    },\n    shareWalletInfo({ interval = 5000, attempts = 5 } = {}) {\n      const target = this.runningInFrame ? window.parent : this.$refs.aepp.contentWindow;\n      const connection = new BrowserWindowMessageConnection({ target });\n      this.clientId = this.aeSdk.addRpcClient(connection);\n\n      this.aeSdk.shareWalletInfo(this.clientId);\n      const intervalId = setInterval(() => {\n        this.aeSdk.shareWalletInfo(this.clientId);\n        attempts -= 1;\n        if (!attempts) return this.stopSharingWalletInfo();\n      }, interval);\n\n      this.stopSharingWalletInfo = () => {\n        clearInterval(intervalId);\n        // TODO: replace with clientStatus\n        const client = this.aeSdk._getClient(this.clientId);\n        if (client.status === RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST) {\n          this.aeSdk.removeRpcClient(this.clientId);\n        }\n        this.stopSharingWalletInfo = null;\n      }\n    },\n    disconnect() {\n      // TODO: move to removeRpcClient (would be a semi-breaking change)\n      const client = this.aeSdk._getClient(this.clientId);\n      if (client.status === RPC_STATUS.CONNECTED) {\n        client.rpc.notify(METHODS.closeConnection, null);\n      }\n\n      this.aeSdk.removeRpcClient(this.clientId);\n      this.clientId = null;\n    },\n    async switchAccount() {\n      this.address = this.aeSdk.addresses().find((a) => a !== this.address);\n      this.aeSdk.selectAccount(this.address);\n    },\n    async switchNode() {\n      this.nodeName = (await this.aeSdk.getNodesInPool())\n        .map(({ name }) => name)\n        .find((name) => name !== this.nodeName);\n      this.aeSdk.selectNode(this.nodeName);\n    },\n    updateClientStatus() {\n      if (!this.clientId) {\n        this.clientStatus = null;\n        return;\n      }\n      const client = this.aeSdk._getClient(this.clientId);\n      this.clientStatus = client.status;\n    },\n  },\n  mounted() {\n    this.navigate();\n\n    const aeppInfo = {};\n    const genConfirmCallback = (actionName) => (aeppId, parameters, origin) => {\n      if (!confirm([\n        `Client ${aeppInfo[aeppId].name} with id ${aeppId} at ${origin} want to ${actionName}`,\n        Value.methods.valueToString(parameters),\n      ].join('\\n'))) {\n        throw new RpcRejectedByUserError();\n      }\n    };\n\n    class AccountMemoryProtected extends MemoryAccount {\n      async signTransaction(tx, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          const opt = { ...options, unpackedTx: unpackTx(tx) };\n          if (opt.onCompiler) opt.onCompiler = '<Compiler>';\n          if (opt.onNode) opt.onNode = '<Node>';\n          genConfirmCallback(`sign transaction ${tx}`)(id, opt, aeppOrigin);\n        }\n        return super.signTransaction(tx, options);\n      }\n\n      async signMessage(message, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign message ${message}`)(id, options, aeppOrigin);\n        }\n        return super.signMessage(message, options);\n      }\n\n      async signTypedData(data, aci, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const dataType = new TypeResolver().resolveType(aci);\n          const decodedData = new ContractByteArrayEncoder().decodeWithType(data, dataType);\n          const opt = { ...options, aci, decodedData };\n          genConfirmCallback(`sign typed data ${data}`)(id, opt, aeppOrigin);\n        }\n        return super.signTypedData(data, aci, options);\n      }\n\n      async signDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation to contract')(id, opt, aeppOrigin);\n        }\n        return super.signDelegationToContract(contractAddress, options);\n      }\n\n      async signNameDelegationToContract(\n        contractAddress,\n        name,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, name };\n          genConfirmCallback('sign delegation of name to contract')(id, opt, aeppOrigin);\n        }\n        return super.signNameDelegationToContract(contractAddress, name, options);\n      }\n\n      async signAllNamesDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation of all names to contract')(id, opt, aeppOrigin);\n        }\n        return super.signAllNamesDelegationToContract(contractAddress, options);\n      }\n\n      async signOracleQueryDelegationToContract(\n        contractAddress,\n        oracleQueryId,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, oracleQueryId };\n          genConfirmCallback('sign delegation of oracle query to contract')(id, opt, aeppOrigin);\n        }\n        return super.signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n      }\n\n      async signDelegation(delegation, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const opt = { ...options, ...unpackDelegation(delegation) };\n          genConfirmCallback('sign delegation')(id, opt, aeppOrigin);\n        }\n        return super.signDelegation(delegation, options);\n      }\n\n      static generate() {\n        // TODO: can inherit parent method after implementing https://github.com/aeternity/aepp-sdk-js/issues/1672\n        return new AccountMemoryProtected(generateKeyPair().secretKey);\n      }\n    }\n\n    this.aeSdk = new AeSdkWallet({\n      id: window.origin,\n      type: WALLET_TYPE.window,\n      nodes: [\n        { name: 'ae_uat', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'ae_mainnet', instance: new Node('https://mainnet.aeternity.io') },\n      ],\n      accounts: [\n        new AccountMemoryProtected('9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200'),\n        AccountMemoryProtected.generate(),\n      ],\n      onCompiler: new CompilerHttp('https://v7.compiler.aepps.com'),\n      name: 'Wallet Iframe',\n      onConnection: (aeppId, params, origin) => {\n        if (!confirm(`Client ${params.name} with id ${aeppId} at ${origin} want to connect`)) {\n          throw new RpcConnectionDenyError();\n        }\n        aeppInfo[aeppId] = params;\n        setTimeout(() => this.stopSharingWalletInfo());\n      },\n      onSubscription: genConfirmCallback('subscription'),\n      onAskAccounts: genConfirmCallback('get accounts'),\n      onDisconnect: (clientId) => {\n        console.log('disconnected client', clientId);\n        this.clientId = null;\n      },\n    });\n\n    if (this.runningInFrame) this.shareWalletInfo();\n\n    this.nodeName = this.aeSdk.selectedNodeName;\n    [this.address] = this.aeSdk.addresses();\n\n    this.$watch(\n      ({ address, nodeName }) => [address, nodeName],\n      ([address]) => {\n        this.balancePromise = this.aeSdk.getBalance(address);\n      },\n      { immediate: true },\n    );\n\n    // TODO: replace setInterval with subscription after refactoring\n    setInterval(() => this.updateClientStatus(), 1000);\n    this.$watch(({ clientId }) => [clientId], () => this.updateClientStatus(), { immediate: true });\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n\n<style lang=\"scss\" scoped>\ninput[id=toggle-aepp] {\n  display: none;\n}\n\nlabel[for=toggle-aepp]::after {\n  font-size: initial;\n  font-weight: initial;\n  text-decoration: underline dotted;\n  cursor: pointer;\n}\n\n@media (max-width: 450px), (max-height: 650px) {\n  input[id=toggle-aepp] {\n    &:checked ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Hide aepp';\n      }\n\n      .group {\n        display: none;\n      }\n    }\n\n    &:not(:checked) ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Show aepp';\n      }\n\n      iframe {\n        display: none;\n      }\n    }\n  }\n}\n</style>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegationToContract = 'delegationToContract.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  #target?: ImplPostMessage;\n\n  #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { AensName, ConsensusProtocolVersion, Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\nimport { NotImplementedError } from '../utils/errors';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param type - Type of data to sign\n   * @param data - Encoded data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signTypedData(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signTypedData method');\n  }\n\n  /**\n   * Sign delegation of AENS, oracle operations to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @param options.isOracle - Use to generate an oracle delegation signature in Ceres, otherwise an\n   * AENS preclaim delegation signature would be generated\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of an AENS name to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param name - AENS name to manage by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signNameDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signNameDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of all AENS names to a contract (not available in Iris)\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signAllNamesDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signAllNamesDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of oracle query to a contract\n   *\n   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded\n   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.\n   *\n   * Warning! Implementations needs to ensure that oracle query and contract exists unless\n   * https://github.com/aeternity/aesophia/issues/474 is fixed.\n   *\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param oracleQueryId - Oracle query ID to reply by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signOracleQueryDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signOracleQueryDelegationToContract method');\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegation(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegation method');\n  }\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid(maybeEncoded: string): maybeEncoded is Encoded.AccountAddress;\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Signs a message, and then verifies that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9;\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      const tx = unpackTx(encode(buf, Encoding.Transaction));\n      if (tag != null && tx.tag !== tag) throw new ArgumentError('Tag', Tag[tag], Tag[tx.tag]);\n      return tx;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param name - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param name - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n      ),\n    );\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag } from '../constants';\nimport coinAmount from './coin-amount';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the Base fee gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base fee\n * @example\n * ```js\n * TX_FEE_BASE('channelForceProgress') => new BigNumber(30 * 15000)\n * ```\n */\nconst TX_FEE_BASE_GAS = (txType: Tag): BigNumber => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ChannelOffChainUpdateCallContract]: 0,\n    [Tag.ChannelOffChainUpdateCreateContract]: 0,\n    [Tag.ChannelOffChainUpdateDeposit]: 0,\n    [Tag.ChannelOffChainUpdateWithdraw]: 0,\n    [Tag.ChannelOffChainUpdateTransfer]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return new BigNumber(factor * BASE_GAS);\n};\n\n/**\n * Calculate fee for Other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The Other fee\n * @example\n * ```js\n * TX_FEE_OTHER_GAS('oracleResponse',10, { relativeTtl: 10, innerTxSize: 10 })\n *  => new BigNumber(10).times(20).plus(Math.ceil(32000 * 10 / Math.floor(60 * 24 * 365 / 2)))\n * ```\n */\nconst TX_FEE_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): BigNumber => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return new BigNumber(txSize)\n        .times(GAS_PER_BYTE)\n        .plus(\n          Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL)),\n        );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return new BigNumber(txSize).minus(innerTxSize).times(GAS_PER_BYTE);\n    default:\n      return new BigNumber(txSize).times(GAS_PER_BYTE);\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate fee based on tx type and params\n */\nexport function buildFee(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_FEE_BASE_GAS(txObject.tag)\n    .plus(TX_FEE_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    }))\n    .times(MIN_GAS_PRICE);\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = buildFee(rebuildTx(fee), unpackTx, buildTx);\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee, _pickBiggerFee,\n    }: {\n      rebuildTx: (params: any) => Encoded.Transaction;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingMinFee?: BigNumber;\n      _pickBiggerFee?: boolean;\n    },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_pickBiggerFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n};\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    { onNode, absoluteTtl }: { onNode?: Node; absoluteTtl?: boolean },\n  ) {\n    if (absoluteTtl !== true && value !== 0 && value != null) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value += (await onNode.getCurrentKeyBlock()).height;\n    }\n    return value;\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & { strategy?: NextNonceStrategy; onNode?: Node },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\nimport { isAddressValid } from '../../../utils/crypto';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) payload = [ID_TAG, addressAny.serialize(id)];\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError('Raw pointer', `shorter than ${DATA_LENGTH_MAX + 1} bytes`, `${data.length} bytes`);\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(([bKey, bId]) => {\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray);\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n};\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildFee } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildFee(rebuildTx(gasMax), unpackTx, buildTx).dividedBy(MIN_GAS_PRICE);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _pickBiggerFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import coinAmount from './coin-amount';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE } from '../constants';\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, gasLimit, gasPrice, fee, address, pointers,\n  pointers2, queryFee, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, withDefault, withFormatting, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// # CONTRACT\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n// TODO: inline after dropping Iris compatibility\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\nconst nameTtl = withFormatting(\n  (value) => {\n    const NAME_TTL = 180000;\n    value ??= NAME_TTL;\n    if (value >= 1 && value <= NAME_TTL) return value;\n    throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n  },\n  shortUInt,\n);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(2),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers2,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types';\nimport {\n  ArgumentError, DecodeError, SchemaNotFoundError, InternalError,\n} from '../../utils/errors';\nimport {\n  Encoding, Encoded, encode, decode,\n} from '../../utils/encoder';\nimport { readInt } from './helpers';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null) throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) => (\n    field.serialize(params[key], { ...params, ...extraParams }, params)\n  ));\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name, field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId } from './helpers';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common';\nimport { ArgumentError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n * @param options - options\n * @param options.prefix - Output encoding\n * @returns Encoded transaction\n */\nexport function buildTx(params: TxParams): Encoded.Transaction;\nexport function buildTx<E extends TxEncoding>(\n  params: TxParams,\n  { prefix }: { prefix: E },\n): Encoded.Generic<E>;\nexport function buildTx(\n  params: TxParams,\n  { prefix }: { prefix?: TxEncoding } = {},\n): Encoded.Generic<TxEncoding> {\n  return packRecord(txSchema, Tag, params, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n    buildTx,\n    rebuildTx: (overrideParams: any) => buildTx(\n      { ...params, ...overrideParams },\n    ),\n  }, prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n  }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx or gaAttach\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  const params = unpackTx(contractTx);\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import SchemaTypes from '../SchemaTypes';\nimport { address, nameId, shortUIntConst } from '../field-types';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  AensWildcard = 1,\n  AensName = 2,\n  AensPreclaim = 3,\n  Oracle = 4,\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(DelegationTag.AensWildcard),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensName),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  nameId,\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensPreclaim),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.OracleResponse),\n  version: shortUIntConst(1, true),\n  queryId: queryIdField,\n  contractAddress: address(Encoding.ContractAddress),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { DelegationTag, schemas } from './schema';\nimport { DlgParams, DlgUnpacked } from './schema.generated';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash, messagePrefixLength,\n} from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { produceNameId } from '../tx/builder/helpers';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\nimport { packDelegation } from '../tx/builder/delegation';\n\nconst secretKeys = new WeakMap();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKeys.get(this)).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return sign(data, secretKeys.get(this));\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion, isOracle }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountMemory:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(produceNameId(name)),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      Buffer.from('AENS'),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    const oracleQueryIdDecoded = decode(oracleQueryId);\n    const addressDecoded = decode(this.address);\n    // TODO: remove after fixing https://github.com/aeternity/aesophia/issues/475\n    if (oracleQueryIdDecoded.compare(addressDecoded) === 0) {\n      throw new ArgumentError('oracleQueryId', 'not equal to account address', oracleQueryId);\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      oracleQueryIdDecoded,\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength, new Uint8Array([1]), Buffer.from(networkId), decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","export default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion: string,\n): boolean {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const versionComponents = getComponents(version);\n  const geComponents = getComponents(geVersion);\n  const ltComponents = getComponents(ltVersion);\n\n  const base = Math.max(...versionComponents, ...geComponents, ...ltComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  const vNumber = componentsToNumber(versionComponents);\n  const geNumber = componentsToNumber(geComponents);\n  const ltNumber = componentsToNumber(ltComponents);\n  return vNumber >= geNumber && vNumber < ltNumber;\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        // TODO: remove pause after fixing https://github.com/aeternity/aeternity/issues/3803\n        // gap to ensure that node won't reject the nonce\n        requestQueues.set(key, req.then(async () => pause(750), () => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        if (error.response?.bodyAsText == null) throw error;\n\n        let body;\n        try {\n          body = JSON.parse(error.response.bodyAsText);\n        } catch (e) {\n          throw error;\n        }\n        error.message = `${new URL(error.request.url).pathname.slice(1)} error`;\n        const message = getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  ignorePath: string,\n  versionPromise: Promise<string | Error>,\n  geVersion: string,\n  ltVersion: string,\n): PipelinePolicy => ({\n  name: 'version-check',\n  async sendRequest(request, next) {\n    if (new URL(request.url).pathname === ignorePath) return next(request);\n    const version = await versionPromise;\n    if (version instanceof Error) throw version;\n    const args = [version, geVersion, ltVersion] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n    return next(request);\n  },\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const statusesToNotRetry = [200, 400, 403, 410, 500];\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b);\n      const intervalsInMs = intervals.map((el) => (el / intervalSum) * retryOverallDelay);\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) await pause(intervalsInMs[attempt - 1]);\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  serializedName: \"Tx\",\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    uberParent: \"Tx\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\",\n    },\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\",\n        },\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  \"Tx.Tx\": Tx,\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n\nexport const from: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const type: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.from,\n    Parameters.limit,\n    Parameters.type,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationSpec } from '@azure/core-client';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  #networkIdPromise?: Promise<string | Error>;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => ` ${body.reason}`),\n      ],\n      ...options,\n    });\n    if (!ignoreVersion) {\n      const statusPromise = this.getStatus();\n      const versionPromise = statusPromise.then(({ nodeVersion }) => nodeVersion, (error) => error);\n      this.#networkIdPromise = statusPromise.then(({ networkId }) => networkId, (error) => error);\n      this.pipeline.addPolicy(\n        genVersionCheckPolicy('node', '/v3/status', versionPromise, '6.2.0', '7.0.0'),\n      );\n    }\n    this.intAsString = true;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    this.#networkIdPromise ??= this.getStatus().then(({ networkId }) => networkId);\n    const networkId = await this.#networkIdPromise;\n    if (networkId instanceof Error) throw networkId;\n    return networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param gasUsed - Amount of gas actually used to make calculation more accurate\n * @param queryFee - Oracle query fee\n * @param isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param isMined - Is transaction already mined or not\n * @param options - Options\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(),\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl >= height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.Oracle === tx.tag || Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n  // TODO: move to fee field of tx builder after dropping Iris\n  (tx, { consensusProtocolVersion }) => ((\n    Tag.GaAttachTx === tx.tag\n      && ConsensusProtocolVersion.Ceres === consensusProtocolVersion\n      && tx.nonce !== 1\n  ) ? [{\n      message: `Account ${tx.ownerId} can't become generalized because it is already used`,\n      key: 'AccountUsed',\n      checkedKeys: ['nonce'],\n    }]\n    : []),\n);\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError, isAccountNotFoundError, pause } from './utils/other';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { DRY_RUN_ACCOUNT } from './tx/builder/schema';\nimport { AensName } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError, TransactionError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\n\n/**\n * @category chain\n */\nexport function _getPollInterval(\n  type: 'block' | 'microblock', // TODO: rename to 'key-block' | 'micro-block'\n  { _expectedMineRate = 180000, _microBlockCycle = 3000, _maxPollInterval = 5000 }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; _maxPollInterval?: number },\n): number {\n  const base = {\n    block: _expectedMineRate,\n    microblock: _microBlockCycle,\n  }[type];\n  return Math.min(base / 3, _maxPollInterval);\n}\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @returns Current chain height\n */\nexport async function getHeight({ onNode }: { onNode: Node }): Promise<number> {\n  return (await onNode.getCurrentKeyBlockHeight()).height;\n}\n\n/**\n * Wait for a transaction to be mined\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, onNode, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= _getPollInterval('microblock', options);\n  const max = await getHeight({ onNode }) + blocks;\n  do {\n    const tx = await onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    await pause(interval);\n  } while (await getHeight({ onNode }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= _getPollInterval('block', options);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = (await onNode.getCurrentKeyBlockHeight()).height;\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @param options.onNode - Node to use\n * @param options.onAccount - Account to use\n * @param options.verify - Verify transaction before broadcast, throw error if not\n * @param options.waitMined - Ensure that transaction get into block\n * @param options.confirm - Number of micro blocks that should be mined after tx get included\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      __queue != null ? { requestOptions: { customHeaders: { __queue } } } : {},\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  onNode: Node;\n  onAccount: AccountBase;\n  verify?: boolean;\n  waitMined?: boolean;\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt, isAddressValid } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport { Tag, AensName, ConsensusProtocolVersion } from './tx/builder/constants';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { UnsupportedProtocolError } from './utils/errors';\nimport { sendTransaction, SendTransactionOptions, getName } from './chain';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @param options.extendPointers - Get the pointers from the node and merge with provided\n * ones. Pointers with the same type will be overwritten\n * @param options.onAccount - Make operation on specific account from sdk (you\n * pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameTtl - Name ttl represented in number of\n * blocks (Max value is 50000 blocks)\n * @param options.clientTtl a suggestion as to how long any\n * clients should cache this information\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const hasRawPointers = Object.values(allPointers)\n    .some((v) => isAddressValid(v, Encoding.Bytearray));\n  const isIris = (await options.onNode.getNodeInfo())\n    .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n  if (hasRawPointers && isIris) {\n    throw new UnsupportedProtocolError('Raw pointers are available only in Ceres, the current protocol is Iris');\n  }\n\n  const nameUpdateTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameUpdateTx,\n    version: hasRawPointers ? 2 : 1,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  extendPointers?: boolean;\n  clientTtl?: number;\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @returns\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl?: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl, options = {}) {\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid\n * @param options - options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameFee - Name Fee (By default calculated by sdk)\n * @returns the result of the claim\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport {\n  sendTransaction, getBalance, resolveName, SendTransactionOptions,\n} from './chain';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.PayingForTx, payerId: options.onAccount.address, tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport {\n  _getPollInterval, getHeight, sendTransaction, SendTransactionOptions,\n} from './chain';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, onNode, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  interval ??= _getPollInterval('microblock', options);\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= _getPollInterval('microblock', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ onNode });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @param options.queryTtl - queryTtl Oracle query time to leave\n * @param options.responseTtl - queryFee Oracle query response time to leave\n * @param options.queryFee - queryFee Oracle query fee\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query'>;\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @param options.oracleTtlType - Oracle time to leave for extend\n * @param options.oracleTtlValue - Oracle time to leave for extend\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'callerId' | 'oracleId'>;\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @param options.responseTtl - responseTtl Query response time to leave\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response'>;\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @param options.queryFee - Oracle query Fee\n * @param options - Options object\n * @param options.abiVersion - Always 0 (do not use virtual machine)\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat'>;\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { DRY_RUN_ACCOUNT } from '../tx/builder/schema';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun, sendTransaction,\n  SendTransactionOptions,\n} from '../chain';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await aeSdk.initializeContract({ sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(tx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      const isIris = (await onNode.getNodeInfo())\n        .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n      if (!isIris && isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  {\n    onAccount, omitAddress, isOracle, ...options\n  }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    isOracle?: boolean;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const { nodeNetworkId, consensusProtocolVersion } = await options.onNode.getNodeInfo();\n  const signOpts = { networkId: nodeNetworkId, consensusProtocolVersion };\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signDelegationToContract(contractAddress, { ...signOpts, isOracle }),\n    );\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, signOpts),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, signOpts),\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { sendTransaction, SendTransactionOptions, getAccount } from '../chain';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param sourceCode - Auth contract source code\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const contractId = buildContractIdByContractTx(tx);\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nexport function getValueOrErrorProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb() as object; // to get a native exception in case it missed\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get'\n        ? res.bind(target) // otherwise it fails with attempted to get private field on non-instance\n        : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nconst { InvalidTxError: _2, ...chainMethodsOther } = chainMethods;\n\nconst methods = {\n  ...chainMethodsOther,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(\n    mergeWith: AeSdkMethodsOptions = {},\n  ): AeSdkMethodsOptions & { onAccount: AccountBase; onCompiler: CompilerBase; onNode: Node } {\n    return {\n      ...this._options,\n      onAccount: getValueOrErrorProxy(() => this._options.onAccount),\n      onNode: getValueOrErrorProxy(() => this._options.onNode),\n      onCompiler: getValueOrErrorProxy(() => this._options.onCompiler),\n      ...mergeWith,\n    };\n  }\n\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this.getContext(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    return Contract.initialize<Methods>(this.getContext(options as AeSdkMethodsOptions));\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & { onAccount: OnAccount } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, getValueOrErrorProxy, AeSdkMethodsOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   */\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   */\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   */\n  async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signAllNamesDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signAllNamesDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   */\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & {\n    onNode: Node;\n    onAccount: AccountBase;\n    onCompiler: CompilerBase;\n  } {\n    return {\n      ...this._options,\n      onNode: getValueOrErrorProxy(() => this.api),\n      onCompiler: getValueOrErrorProxy(() => this.compilerApi),\n      ...mergeWith,\n      onAccount: mergeWith.onAccount != null\n        ? this._resolveAccount(mergeWith.onAccount)\n        : getValueOrErrorProxy(() => this._resolveAccount()),\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport { decode, Encoded } from './utils/encoder';\nimport { UnavailableAccountError } from './utils/errors';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  constructor(\n    { accounts, ...options }: { accounts?: AccountBase[] }\n    & ConstructorParameters<typeof AeSdkBase>[0] = {},\n  ) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  #callbacks = new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>();\n\n  #messageId = 0;\n\n  #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\nimport { AensName } from '../../tx/builder/constants';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegationToContract]: (\n    p: {\n      contractAddress: Encoded.ContractAddress;\n      name?: AensName;\n      oracleQueryId?: Encoded.OracleQueryId;\n      allNames?: boolean;\n      isOracle?: boolean;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (\n    p: {\n      delegation: Encoded.Bytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import JsonBig from 'json-bigint';\nimport BigNumber from 'bignumber.js';\nimport { mapObject } from './other';\n\nconst jsonBig = JsonBig({ storeAsString: true });\n\nconst convertValuesToBigNumbers = (value: any): any => {\n  if (typeof value === 'object' && value !== null && value.constructor === Object) {\n    return mapObject(value, ([k, v]) => [k, convertValuesToBigNumbers(v)]);\n  }\n  if (Array.isArray(value)) {\n    return value.map((item) => convertValuesToBigNumbers(item));\n  }\n  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {\n    const bn = new BigNumber(value);\n    bn.toJSON = () => bn.toString(10);\n    return bn;\n  }\n  return value;\n};\n\nexport default {\n  stringify: (...args: Parameters<typeof JsonBig['stringify']>): string => (\n    jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1))\n  ),\n  parse: jsonBig.parse,\n};\n","import { v4 as uuid } from '@aeternity/uuid';\nimport AeSdk from './AeSdk';\nimport verifyTransaction from './tx/validator';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport {\n  METHODS, RPC_STATUS, SUBSCRIPTION_TYPES, WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError, RpcPermissionDenyError, RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema';\nimport { InternalError, UnknownRpcClientError } from './utils/errors';\nimport AccountBase from './account/Base';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types';\nimport { Encoded } from './utils/encoder';\nimport jsonBig from './utils/json-big';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string, params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>, origin: string\n) => void;\n\ntype OnSubscription = (\n  clientId: string, params: Parameters<WalletApi[METHODS.subscribeAddress]>[0], origin: string\n) => void;\n\ntype OnDisconnect = (\n  clientId: string, params: Parameters<WalletApi[METHODS.closeConnection]>[0]\n) => void;\n\ntype OnAskAccounts = (\n  clientId: string, params: undefined, origin: string\n) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _getAccountsForClient({ addressSubscription }: RpcClientsInfo): Accounts {\n    const { current, connected } = this.getAccounts();\n    return {\n      current: addressSubscription.has('current') || addressSubscription.has('connected')\n        ? current : {},\n      connected: addressSubscription.has('connected') ? connected : {},\n    };\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .filter((client) => client.addressSubscription.size !== 0)\n      .forEach((client) => client.rpc\n        .notify(METHODS.updateAddress, this._getAccountsForClient(client)));\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...client.connectNode && this._getNode(),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return RPC_STATUS.CONNECTED === this._getClient(clientId).status\n      && this._getClient(clientId).rpc.connection.isConnected();\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = uuid();\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({\n            name, version, icons, connectNode,\n          }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...await this.getWalletInfo(),\n              ...connectNode && this._getNode(),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                // TODO: remove `type` as it always subscribe\n                await this.onSubscription(id, { type, value }, origin);\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this._getAccountsForClient(client),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            {\n              tx, onAccount = this.address, returnSigned, innerTx,\n            },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount, aeppOrigin: origin, aeppRpcClientId: id, innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(jsonBig.stringify({\n                transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n              }));\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async ({\n            domain, aci, data, onAccount = this.address,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain, onAccount, aeppOrigin: origin, aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n          [METHODS.signDelegationToContract]: async ({\n            contractAddress, name, oracleQueryId, allNames, onAccount = this.address, isOracle,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            isOracle ??= false;\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await (\n              (name == null ? null : this\n                .signNameDelegationToContract(contractAddress, name, parameters))\n              ?? (oracleQueryId == null ? null : this\n                .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, parameters))\n              ?? (allNames !== true ? null : this\n                .signAllNamesDelegationToContract(contractAddress, parameters))\n              ?? this.signDelegationToContract(contractAddress, { ...parameters, isOracle })\n            );\n            return { signature };\n          },\n          [METHODS.signDelegation]: async ({ delegation, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await this.signDelegation(delegation, parameters);\n            return { signature };\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: window.location.origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion }: { ignoreVersion?: boolean } = {}) {\n    super();\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    if (ignoreVersion !== true) {\n      const versionPromise = this.api.apiVersion()\n        .then(({ apiVersion }) => apiVersion, (error) => error);\n      this.api.pipeline.addPolicy(\n        genVersionCheckPolicy('compiler', '/api-version', versionPromise, '7.3.0', '8.0.0'),\n      );\n    }\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    try {\n      const res = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as { bytecode: Encoded.ContractBytearray; aci: Aci };\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=7883c6ac\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=0fa4fbfb&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\nimport \"./App.vue?vue&type=style&index=1&id=0fa4fbfb&lang=scss&scoped=true\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0fa4fbfb\"]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwallet_iframe\"] = self[\"webpackChunkwallet_iframe\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(35620); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","id","type","_createTextVNode","for","class","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","novalidate","onSubmit","_cache","_withModifiers","args","$options","navigate","$event","_ctx","nextAeppUrl","onFocus","target","select","_hoisted_5","_toDisplayString","address","_hoisted_6","nodeName","_hoisted_7","_createVNode","_component_Value","value","balancePromise","_hoisted_8","clientStatus","clientId","onClick","switchAccount","switchNode","key","disconnect","stopSharingWalletInfo","shareWalletInfo","runningInFrame","_createCommentVNode","ref","src","aeppUrl","_hoisted_9","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","arguments","length","undefined","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","UnknownRpcClientError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","_ref","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","connect","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","msg","_this$origin","postMessage","AccountBase","signTypedData","aci","signDelegationToContract","signNameDelegationToContract","signAllNamesDelegationToContract","signOracleQueryDelegationToContract","oracleQueryId","signDelegation","delegation","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","isAddressValid","maybeEncoded","_len","encodings","Array","_key","encoding","genSalt","random","BigUint64Array","nacl","Number","BigInt","MAX_SAFE_INTEGER","hash","generateKeyPairFromSecret","secret","keyPair","fromSecretKey","generateKeyPair","raw","publicBuffer","publicKey","secretBuffer","secretKey","sign","privateKey","detached","verify","signature","messagePrefix","messagePrefixLength","messageToHash","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","genEntryField","serialize","txParams","buildTx","ArrayBuffer","isView","startsWith","buf","_ref2","unpackTx","tx","genArrayField","itemHandler","items","params","buffers","genMapField","Mtree","values","MtreeValue","_ref3","filter","_ref4","_ref5","recursiveType","withDefault","defaultValue","field","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","senderId","oracleId","_int32","nonceBE","alloc","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","commitmentHash","salt","padStart","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","isAuctionName","uInt","withFormatting","format","genShortUIntConstField","constValue","optional","shortUInt","constValueOptional","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","readUIntBE","subarray","genEncodedField","encodedData","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","serializeAettos","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_FEE_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ChannelOffChainUpdateCallContract","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateTransfer","ContractCreateTx","ContractCallTx","GaAttachTx","GaMetaTx","PayingForTx","factor","TX_FEE_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","plus","ceil","floor","minus","getOracleRelativeTtl","ttlKeys","buildFee","builtTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","coinAmount","_value","_computingMinFee","_pickBiggerFee","minFee","gt","prepare","onNode","absoluteTtl","getCurrentKeyBlock","genNonceField","senderKey","strategy","getAccountNextNonce","replace","catch","nextNonce","addressAny","pointers","pointer","txFields","parameters","addressName","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","bKey","bId","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","Fate3","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","consensusProtocolVersion","keys","getNodeInfo","vm","abi","calculateGasLimitMax","gasMax","dividedBy","_computingGasLimit","gasLimitMax","gasLimit","_getProtocolDetails","c","kind","result","genEnumerationField","enm","v","getOracleByPubkey","queryFee","rlpEncode","_rlp","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","binary","unpTx","_classPrivateMethodInitSpec","node","forEach","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","get","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","k","path","searchFrom","_class","substring","rec","idx","_ref6","_ref7","genMPTreeField","genWrappedField","ORACLE_TTL_TYPES","DRY_RUN_ACCOUNT","pub","CallReturnType","entryAny","entry","entrySignedTx","SignedTx","entryMtreeValueArray","entryTreesPoi","TreesPoi","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","balance","flags","gaContract","gaAuthFun","encoded","signatures","SpendTx","recipientId","ttl","accountId","status","NamePreclaimTx","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","pointers2","NameTransferTx","NameRevokeTx","owner","ctVersion","active","boolean","referers","deposit","gasPrice","callData","callerId","contractId","callerNonce","gasUsed","returnValue","returnType","enumeration","queryFormat","responseFormat","oracleTtlValue","oracleTtlType","delta","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","to","caller","contract","callStack","ChannelClientReconnectTx","role","pubkey","accounts","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","authFun","gaId","authData","payerId","GaMetaTxAuthData","rlpDecode","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","unpackRecord","encodedRecord","expectedTag","index","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","DelegationTag","oracleAddressField","queryIdField","AensWildcard","accountAddress","AensName","AensPreclaim","packDelegation","unpackDelegation","secretKeys","getBufferToSign","networkId","innerTx","prefixes","rlpBinaryTx","AccountMemory","set","generate","signTransaction","txWithNetworkId","signMessage","dHash","isOracle","warn","oracleQueryIdDecoded","addressDecoded","compare","semverSatisfies","getComponents","i","versionComponents","geComponents","ltComponents","base","max","componentsToNumber","components","reverse","reduce","acc","vNumber","geNumber","ltNumber","genRequestQueuesPolicy","requestQueues","Map","policy","sendRequest","request","next","_requestQueues$get","headers","delete","getResponse","req","then","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","method","JSON","stringify","url","body","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","parse","e","genVersionCheckPolicy","ignorePath","versionPromise","genRetryOnFailurePolicy","retryCount","retryOverallDelay","statusesToNotRetry","intervals","fill","_","intervalSum","a","b","intervalsInMs","attempt","_e$response$status","_e$response","Header","className","modelProperties","serializedName","required","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","time","info","pofHash","txsHash","ErrorModel","reason","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","transactions","blockHeight","blockHash","Tx","uberParent","polymorphicDiscriminator","clientName","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","op","RelativeTTL","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","top","txs","txEvents","DryRunAccount","pubKey","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","results","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","NameEntry","PeerPubKey","Status","genesisKeyBlockHash","solutions","difficulty","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","limit","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeight","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHash","getKeyBlockByHashOperationSpec","getKeyBlockByHeight","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHash","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHash","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGeneration","getCurrentGenerationOperationSpec","getGenerationByHash","getGenerationByHashOperationSpec","getGenerationByHeight","getGenerationByHeightOperationSpec","getAccountByPubkey","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHash","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxs","protectedDryRunTxsOperationSpec","getTransactionByHash","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContract","getContractOperationSpec","getContractCode","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByName","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_networkIdPromise","ignoreVersion","allowInsecureConnection","additionalPolicies","statusPromise","pipeline","addPolicy","getNetworkId","_classPrivateFieldGet2","nodeNetworkId","p","versions","getTransactionSignerAddress","_getSchema$find","getExecutionCost","isInitiator","res","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","_getPollInterval","_expectedMineRate","_microBlockCycle","_maxPollInterval","block","microblock","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","_ref8","oracleCall","contractCreate","contractCall","_ref9","_ref10","InvalidTxError","validation","getHeight","poll","_interval","interval","awaitHeight","_interval2","currentHeight","waitForTxConfirm","confirm","newBlockHeight","sendTransaction","txUnsigned","onAccount","waitMined","__queue","requestOptions","customHeaders","pollResult","txData","confirmationHeight","assign","verifyTx","getAccount","getBalance","addr","getGeneration","hashOrHeight","getMicroBlockTransactions","_ref11","getKeyBlock","_ref12","getMicroBlockHeader","_ref13","txDryRunRequests","txDryRunHandler","rs","dryRunRes","Set","_ref14","reject","_ref15","resultPayload","txDryRun","_ref16","_txDryRunRequests$get","combine","requests","_requests$timeout","timeout","getContractByteCode","_ref17","_ref18","getName","_ref19","resolveName","_ref20","resolveByNode","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","hasRawPointers","isIris","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","transfer","revoke","extendTtl","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","claim","opts","otherOptions","aensBid","spend","recipientIdOrName","transferFunds","fraction","bind","desiredAmount","integerValue","ROUND_HALF_UP","payForTransaction","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$onNode$getOrac","queries","has","add","stopped","pollForQueryResponse","responseBuffer","getQueryObject","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","handler","lastArg","registerOracle","oracleRegisterTx","Encoder","Calldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","compile","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","callStatic","$deploy","_opt$gasLimit","_other$result","_calldata","_name","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_this","_aci","aciLast","functions","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","ensureOracleQuery","oq","createDelegationSignature","ids","omitAddress","signOpts","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","getValueOrErrorProxy","valueCb","Proxy","Reflect","_2","chainMethodsOther","chainMethods","methods","aensMethods","spendMethods","oracleMethods","contractGaMethods","AeSdkMethods","_options","getContext","mergeWith","initializeContract","prototype","_len2","_key2","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","compilerApi","api","ensureNodeConnected","pool","selectedNodeName","selectNode","isNodeConnected","getNodesInPool","addresses","_resolveAccount","String","_options$networkId","_options$consensusPro","_options$networkId2","_options$consensusPro2","_options$networkId3","_options$consensusPro3","_options$networkId4","_options$consensusPro4","_options$networkId5","AeSdk","addAccount","selectedAddress","selectAccount","removeAccount","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","connection","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","RPC_VERSION","jsonBig","JsonBig","storeAsString","convertValuesToBigNumbers","bn","AeSdkWallet","onConnection","onSubscription","onAskAccounts","_type","_getAccountsForClient","addressSubscription","current","getAccounts","_pushAccountsToApps","_clients","_isRpcClientConnected","_getClient","client","size","rpc","updateAddress","_getNode","updateNetwork","connectNode","CONNECTED","_disconnectRpcClient","DISCONNECTED","removeRpcClient","addRpcClient","clientConnection","uuid","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","icons","getWalletInfo","subscribeAddress","subscribe","unsubscribe","subscription","returnSigned","aeppOrigin","aeppRpcClientId","signedTransaction","transactionHash","_isOracle","allNames","readyToConnect","location","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","generateAciBySourceCode","generateAci","_normalizeClass","text","props","default","watch","valueToString","immediate","__exports__","Value","process","parent","$nextTick","attempts","$refs","aepp","contentWindow","aeSdk","intervalId","setInterval","clearInterval","updateClientStatus","mounted","aeppInfo","genConfirmCallback","actionName","aeppId","AccountMemoryProtected","MemoryAccount","unpackedTx","dataType","decodedData","decodeWithType","$watch","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}