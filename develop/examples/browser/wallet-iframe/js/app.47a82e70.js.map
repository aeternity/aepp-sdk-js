{"version":3,"file":"js/app.47a82e70.js","mappings":"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","sources":["webpack://wallet-iframe/./src/App.vue","webpack://wallet-iframe/../../src/utils/errors.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://wallet-iframe/../../src/aepp-wallet-communication/schema.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://wallet-iframe/../../src/account/Base.ts","webpack://wallet-iframe/../../src/utils/other.ts","webpack://wallet-iframe/../../src/utils/encoder-types.ts","webpack://wallet-iframe/../../src/utils/encoder.ts","webpack://wallet-iframe/../../src/utils/crypto.ts","webpack://wallet-iframe/../../src/utils/typed-data.ts","webpack://wallet-iframe/../../../src/tx/builder/constants.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ct-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/abi-version.ts","webpack://wallet-iframe/../../src/utils/bytes.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/address.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/array.ts","webpack://wallet-iframe/../../../src/tx/builder/helpers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/u-int.ts","webpack://wallet-iframe/../../src/utils/bignumber.ts","webpack://wallet-iframe/../../src/utils/amount-formatter.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/encoded.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/entry.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/enumeration.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-price.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/field.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-id.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/nonce.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/query-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/raw.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/string.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/transaction.ts","webpack://wallet-iframe/../../src/utils/wrap-proxy.ts","webpack://wallet-iframe/../src/chain.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ttl.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-default.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/constants.ts","webpack://wallet-iframe/../../../src/tx/builder/schema.ts","webpack://wallet-iframe/../../../src/tx/builder/common.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/boolean.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/map.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/mptree.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/wrapped.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/index.ts","webpack://wallet-iframe/../../../src/tx/builder/index.ts","webpack://wallet-iframe/../../src/account/Memory.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/index.ts","webpack://wallet-iframe/../../src/utils/semver-satisfies.ts","webpack://wallet-iframe/../../src/utils/autorest.ts","webpack://wallet-iframe/../../../../src/apis/node/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/node/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/node/node.ts","webpack://wallet-iframe/../src/Node.ts","webpack://wallet-iframe/../../src/tx/transaction-signer.ts","webpack://wallet-iframe/../../src/tx/execution-cost.ts","webpack://wallet-iframe/../../src/tx/validator.ts","webpack://wallet-iframe/../src/send-transaction.ts","webpack://wallet-iframe/../src/spend.ts","webpack://wallet-iframe/../../src/contract/Contract.ts","webpack://wallet-iframe/../../src/contract/ga.ts","webpack://wallet-iframe/../src/AeSdkMethods.ts","webpack://wallet-iframe/../src/AeSdkBase.ts","webpack://wallet-iframe/../src/AeSdk.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://wallet-iframe/../../src/utils/json-big.ts","webpack://wallet-iframe/../src/AeSdkWallet.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/compiler/compiler.ts","webpack://wallet-iframe/../../../src/contract/compiler/Base.ts","webpack://wallet-iframe/../../../src/contract/compiler/Http.ts","webpack://wallet-iframe/./src/Value.vue","webpack://wallet-iframe/./src/Value.vue?2a90","webpack://wallet-iframe/./src/App.vue?7ccd","webpack://wallet-iframe/./src/main.js","webpack://wallet-iframe/webpack/bootstrap","webpack://wallet-iframe/webpack/runtime/chunk loaded","webpack://wallet-iframe/webpack/runtime/define property getters","webpack://wallet-iframe/webpack/runtime/global","webpack://wallet-iframe/webpack/runtime/hasOwnProperty shorthand","webpack://wallet-iframe/webpack/runtime/make namespace object","webpack://wallet-iframe/webpack/runtime/jsonp chunk loading","webpack://wallet-iframe/webpack/startup"],"sourcesContent":["<template>\n  <input id=\"toggle-aepp\" type=\"checkbox\" />\n  <h2>\n    Wallet Iframe\n    <label for=\"toggle-aepp\" />\n  </h2>\n\n  <div class=\"group\">\n    <div>\n      <div>Aepp URL</div>\n      <form novalidate @submit.prevent=\"navigate\">\n        <input type=\"url\" v-model=\"nextAeppUrl\" @focus=\"$event.target.select()\" />\n      </form>\n    </div>\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Node</div>\n      <div>{{ nodeName }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>RPC client</div>\n      <div>status: {{ clientStatus ?? 'no client' }}, id: {{ clientId ?? 'not defined' }}</div>\n    </div>\n\n    <button @click=\"switchAccount\">Switch Account</button>\n    <button @click=\"switchNode\">Switch Node</button>\n\n    <button v-if=\"clientStatus === 'CONNECTED'\" @click=\"disconnect\">Disconnect</button>\n    <button v-else @click=\"() => (stopSharingWalletInfo ?? shareWalletInfo)()\">\n      {{ stopSharingWalletInfo ? 'Stop sharing' : 'Share wallet info' }}\n    </button>\n  </div>\n\n  <iframe v-if=\"!runningInFrame\" ref=\"aepp\" :src=\"aeppUrl\" />\n</template>\n\n<script>\nimport {\n  MemoryAccount,\n  AeSdkWallet,\n  Node,\n  CompilerHttp,\n  BrowserWindowMessageConnection,\n  METHODS,\n  WALLET_TYPE,\n  RPC_STATUS,\n  RpcConnectionDenyError,\n  RpcRejectedByUserError,\n  RpcNoNetworkById,\n  unpackTx,\n  unpackDelegation,\n} from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    nextAeppUrl: process.env.VUE_APP_AEPP_URL ?? `http://${location.hostname}:9001`,\n    aeppUrl: '',\n    runningInFrame: window.parent !== window,\n    nodeName: '',\n    address: '',\n    balancePromise: null,\n    clientId: null,\n    clientStatus: null,\n    stopSharingWalletInfo: null,\n  }),\n  methods: {\n    navigate() {\n      if (!/^https?:\\/\\//.test(this.nextAeppUrl) && !this.nextAeppUrl.startsWith('.')) {\n        this.nextAeppUrl = 'http://' + this.nextAeppUrl;\n      }\n      this.aeppUrl = '';\n      this.$nextTick(() => {\n        this.aeppUrl = this.nextAeppUrl;\n      });\n    },\n    shareWalletInfo({ interval = 5000, attempts = 5 } = {}) {\n      const target = this.runningInFrame ? window.parent : this.$refs.aepp.contentWindow;\n      const connection = new BrowserWindowMessageConnection({ target });\n      this.clientId = this.aeSdk.addRpcClient(connection);\n\n      this.aeSdk.shareWalletInfo(this.clientId);\n      const intervalId = setInterval(() => {\n        this.aeSdk.shareWalletInfo(this.clientId);\n        attempts -= 1;\n        if (!attempts) return this.stopSharingWalletInfo();\n      }, interval);\n\n      this.stopSharingWalletInfo = () => {\n        clearInterval(intervalId);\n        // TODO: replace with clientStatus\n        const client = this.aeSdk._getClient(this.clientId);\n        if (client.status === RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST) {\n          this.aeSdk.removeRpcClient(this.clientId);\n        }\n        this.stopSharingWalletInfo = null;\n      };\n    },\n    disconnect() {\n      // TODO: move to removeRpcClient (would be a semi-breaking change)\n      const client = this.aeSdk._getClient(this.clientId);\n      if (client.status === RPC_STATUS.CONNECTED) {\n        client.rpc.notify(METHODS.closeConnection, null);\n      }\n\n      this.aeSdk.removeRpcClient(this.clientId);\n      this.clientId = null;\n    },\n    async switchAccount() {\n      this.address = this.aeSdk.addresses().find((a) => a !== this.address);\n      this.aeSdk.selectAccount(this.address);\n    },\n    async switchNode() {\n      const names = (await this.aeSdk.getNodesInPool()).map(({ name }) => name);\n      this.nodeName = names[(names.indexOf(this.nodeName) + 1) % names.length];\n      this.aeSdk.selectNode(this.nodeName);\n    },\n    updateClientStatus() {\n      if (!this.clientId) {\n        this.clientStatus = null;\n        return;\n      }\n      const client = this.aeSdk._getClient(this.clientId);\n      this.clientStatus = client.status;\n    },\n  },\n  mounted() {\n    this.navigate();\n\n    const aeppInfo = {};\n    const genConfirmCallback = (actionName) => (aeppId, parameters, origin) => {\n      if (\n        !confirm(\n          `Client ${aeppInfo[aeppId].name} with id ${aeppId} at ${origin} want to ${actionName}` +\n            Value.methods.valueToString(parameters),\n        )\n      ) {\n        throw new RpcRejectedByUserError();\n      }\n    };\n\n    class AccountMemoryProtected extends MemoryAccount {\n      async signTransaction(tx, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          const opt = { ...options, unpackedTx: unpackTx(tx) };\n          if (opt.onCompiler) opt.onCompiler = '<Compiler>';\n          if (opt.onNode) opt.onNode = '<Node>';\n          genConfirmCallback(`sign transaction ${tx}`)(id, opt, aeppOrigin);\n        }\n        return super.signTransaction(tx, options);\n      }\n\n      async signMessage(message, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign message ${message}`)(id, options, aeppOrigin);\n        }\n        return super.signMessage(message, options);\n      }\n\n      async signTypedData(data, aci, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const dataType = new TypeResolver().resolveType(aci);\n          const decodedData = new ContractByteArrayEncoder().decodeWithType(data, dataType);\n          const opt = { ...options, aci, decodedData };\n          genConfirmCallback(`sign typed data ${data}`)(id, opt, aeppOrigin);\n        }\n        return super.signTypedData(data, aci, options);\n      }\n\n      async sign(data, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign raw data ${data}`)(id, options, aeppOrigin);\n        }\n        return super.sign(data, options);\n      }\n\n      async signDelegation(delegation, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const opt = { ...options, ...unpackDelegation(delegation) };\n          genConfirmCallback('sign delegation')(id, opt, aeppOrigin);\n        }\n        return super.signDelegation(delegation, options);\n      }\n\n      static generate() {\n        return new AccountMemoryProtected(super.generate().secretKey);\n      }\n    }\n\n    this.aeSdk = new AeSdkWallet({\n      id: window.origin,\n      type: WALLET_TYPE.window,\n      nodes: [\n        { name: 'ae_uat', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'ae_mainnet', instance: new Node('https://mainnet.aeternity.io') },\n      ],\n      accounts: [\n        new AccountMemoryProtected('sk_2CuofqWZHrABCrM7GY95YSQn8PyFvKQadnvFnpwhjUnDCFAWmf'),\n        AccountMemoryProtected.generate(),\n      ],\n      onCompiler: new CompilerHttp('https://v8.compiler.aepps.com'),\n      name: 'Wallet Iframe',\n      onConnection: (aeppId, params, origin) => {\n        if (!confirm(`Client ${params.name} with id ${aeppId} at ${origin} want to connect`)) {\n          throw new RpcConnectionDenyError();\n        }\n        aeppInfo[aeppId] = params;\n        setTimeout(() => this.stopSharingWalletInfo());\n      },\n      onSubscription: genConfirmCallback('subscription'),\n      onAskAccounts: genConfirmCallback('get accounts'),\n      onDisconnect: (clientId) => {\n        console.log('disconnected client', clientId);\n        this.clientId = null;\n      },\n      onAskToSelectNetwork: async (aeppId, parameters, origin) => {\n        await genConfirmCallback('select network')(aeppId, parameters, origin);\n        if (parameters.networkId) {\n          if (!this.aeSdk.pool.has(parameters.networkId)) {\n            throw new RpcNoNetworkById(parameters.networkId);\n          }\n          await this.aeSdk.selectNode(parameters.networkId);\n          this.nodeName = parameters.networkId;\n        } else {\n          this.aeSdk.pool.delete('by-aepp');\n          this.aeSdk.addNode('by-aepp', new Node(parameters.nodeUrl));\n          await this.aeSdk.selectNode('by-aepp');\n          this.nodeName = 'by-aepp';\n        }\n      },\n    });\n\n    if (this.runningInFrame) this.shareWalletInfo();\n\n    this.nodeName = this.aeSdk.selectedNodeName;\n    [this.address] = this.aeSdk.addresses();\n\n    this.$watch(\n      ({ address, nodeName }) => [address, nodeName],\n      ([address]) => {\n        this.balancePromise = this.aeSdk.getBalance(address);\n      },\n      { immediate: true },\n    );\n\n    // TODO: replace setInterval with subscription after refactoring\n    setInterval(() => this.updateClientStatus(), 1000);\n    this.$watch(\n      ({ clientId }) => [clientId],\n      () => this.updateClientStatus(),\n      { immediate: true },\n    );\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n\n<style lang=\"scss\" scoped>\ninput[id='toggle-aepp'] {\n  display: none;\n}\n\nlabel[for='toggle-aepp']::after {\n  font-size: initial;\n  font-weight: initial;\n  text-decoration: underline dotted;\n  cursor: pointer;\n}\n\n@media (max-width: 450px), (max-height: 650px) {\n  input[id='toggle-aepp'] {\n    &:checked ~ {\n      h2 label[for='toggle-aepp']::after {\n        content: 'Hide aepp';\n      }\n\n      .group {\n        display: none;\n      }\n    }\n\n    &:not(:checked) ~ {\n      h2 label[for='toggle-aepp']::after {\n        content: 'Show aepp';\n      }\n\n      iframe {\n        display: none;\n      }\n    }\n  }\n}\n</style>\n","// eslint-disable-next-line max-classes-per-file\nimport { BigNumber } from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants.js';\nimport * as Encoded from './encoder-types.js';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super(`Giving up after ${blocks} blocks mined, transaction hash: ${th}`);\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion?: string) {\n    super(\n      `Unsupported ${dependency} version ${version}. Supported: >= ${geVersion}` +\n        (ltVersion == null ? '' : ` < ${ltVersion}`),\n    );\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(\n      `the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`,\n    );\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. ` +\n        'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}` +\n        ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by` +\n        ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts` +\n        ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors.js';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected())\n      throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder.js';\nimport { BaseError, InternalError } from '../utils/errors.js';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  unsafeSign = 'data.unsafeSign',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcNoNetworkById extends RpcError {\n  static override code = 13;\n\n  override code = 13;\n\n  constructor(networkId: string) {\n    super(`Wallet can't find a network by id \"${networkId}\"`);\n    this.data = networkId;\n    this.name = 'RpcNoNetworkById';\n  }\n}\nrpcErrors.push(RpcNoNetworkById);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser.js';\nimport { MESSAGE_DIRECTION } from '../schema.js';\nimport { InternalError, RpcConnectionError } from '../../utils/errors.js';\n\nexport type ImplPostMessage = Pick<\n  Window,\n  'addEventListener' | 'removeEventListener' | 'postMessage'\n>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object' ||\n        (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      )\n        return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError(\"Can't send messages without target\");\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import { Encoded } from '../utils/encoder.js';\nimport Node from '../Node.js';\nimport CompilerBase from '../contract/compiler/Base.js';\nimport { Int } from '../tx/builder/constants.js';\nimport { AciValue, Domain } from '../utils/typed-data.js';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signDelegation(\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> =>\n  new Promise((resolve) => {\n    setTimeout(resolve, duration);\n  });\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV],\n    index: number,\n    array: Array<[string, InputV]>,\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer =>\n      Buffer.concat(\n        list.map((el) => Buffer.from(el)),\n        totalLength,\n      )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return (\n    error instanceof RestError &&\n    error.statusCode === 404 &&\n    error.message.includes('Account not found')\n  );\n}\n\n// based on https://stackoverflow.com/a/50375286\nexport type UnionToIntersection<Union> = (Union extends any ? (k: Union) => void : never) extends (\n  k: infer Intersection,\n) => void\n  ? Intersection\n  : never;\n\n// based on https://stackoverflow.com/a/61108377\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  AccountSecretKey = 'sk',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type AccountSecretKey = `${Encoding.AccountSecretKey}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import bs58 from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport { DecodeError, ArgumentError, InvalidChecksumError, PayloadLengthError } from './errors.js';\nimport { concatBuffers, isKeyOfObject } from './other.js';\nimport * as Encoded from './encoder-types.js';\nimport { Encoding } from './encoder-types.js';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.AccountSecretKey,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.AccountSecretKey]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58.encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58.decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError(\n    'prefix',\n    `one of ${[...base58Types, ...base64Types].join(', ')}`,\n    maybeType,\n  );\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(data: Uint8Array, type: Type): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import nacl from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other.js';\nimport { decode, encode, Encoded, Encoding } from './encoder.js';\nimport { ArgumentError } from './errors.js';\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length).buffer;\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(\n    concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length).buffer, msg]),\n  );\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder.js';\nimport { hash, messagePrefixLength } from './crypto.js';\nimport { concatBuffers } from './other.js';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue =\n  | 'void'\n  | 'unit'\n  | 'int'\n  | 'bool'\n  | 'string'\n  | 'bits'\n  | 'hash'\n  | 'signature'\n  | 'address'\n  | 'contract_pubkey'\n  | 'Chain.ttl'\n  | 'Chain.ga_meta_tx'\n  | 'Chain.paying_for_tx'\n  | 'Chain.base_tx'\n  | 'AENS.pointee'\n  | 'AENS.name'\n  | 'MCL_BLS12_381.fr'\n  | 'MCL_BLS12_381.fp'\n  | { 'Set.set': readonly [AciValue] }\n  | { bytes: number }\n  | { list: readonly [AciValue] }\n  | { map: readonly [AciValue, AciValue] }\n  | { tuple: readonly AciValue[] }\n  | { record: ReadonlyArray<{ name: string; type: AciValue }> }\n  | { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n  | { option: readonly [AciValue] }\n  | { oracle: readonly [AciValue, AciValue] }\n  | { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [\n      {\n        name: 'name',\n        type: { option: ['string'] },\n      },\n      {\n        name: 'version',\n        type: { option: ['int'] },\n      },\n      {\n        name: 'networkId',\n        type: { option: ['string'] },\n      },\n      {\n        name: 'contractAddress',\n        type: { option: ['contract_pubkey'] },\n      },\n    ],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(\n    concatBuffers([\n      messagePrefixLength,\n      new Uint8Array([0]),\n      hashDomain(domain),\n      hashJson(aci),\n      hash(decode(data)),\n    ]),\n  );\n}\n","import { BigNumber } from 'bignumber.js';\nimport { mapObject } from '../../utils/other.js';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9; // TODO: don't use number for ae\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject(\n  {\n    31: 3,\n    30: 5,\n    29: 8,\n    28: 13,\n    27: 21,\n    26: 34,\n    25: 55,\n    24: 89,\n    23: 144,\n    22: 233,\n    21: 377,\n    20: 610,\n    19: 987,\n    18: 1597,\n    17: 2584,\n    16: 4181,\n    15: 6765,\n    14: 10946,\n    13: 17711,\n    12: 28657,\n    11: 46368,\n    10: 75025,\n    9: 121393,\n    8: 196418,\n    7: 317811,\n    6: 514229,\n    5: 832040,\n    4: 1346269,\n    3: 2178309,\n    2: 3524578,\n    1: 5702887,\n  },\n  ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)],\n);\n\nexport enum ConsensusProtocolVersion {\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  SignedTx = 11,\n  SpendTx = 12,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelSnapshotSoloTx = 59,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants.js';\nimport Node from '../../../Node.js';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3],\n      abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [],\n      abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [],\n      abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    {\n      consensusProtocolVersion = ConsensusProtocolVersion.Ceres,\n    }: { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants.js';\nimport { getProtocolDetails } from './ct-version.js';\nimport Node from '../../../Node.js';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind =\n      Tag.ContractCallTx === tag || Tag.GaMetaTx === tag ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    {\n      consensusProtocolVersion = ConsensusProtocolVersion.Ceres,\n    }: { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors.js';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors.js';\nimport { toBytes } from '../../../utils/bytes.js';\nimport { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { isItemOfArray } from '../../../utils/other.js';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = (typeof idTagToEncoding)[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n  serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n  deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n} {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(itemHandler: {\n  serialize: (value: Input, params: unknown) => Binary;\n  deserialize: (value: Binary, params: unknown) => Output;\n}): {\n  serialize: (value: readonly Input[], params: unknown) => Binary[];\n  deserialize: (value: Binary[], params: unknown) => Output[];\n} {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { BigNumber } from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto.js';\nimport { decode, encode, Encoded, Encoding } from '../../utils/encoder.js';\nimport { toBytes } from '../../utils/bytes.js';\nimport { concatBuffers } from '../../utils/other.js';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants.js';\nimport { ceil } from '../../utils/bignumber.js';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors.js';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]));\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  if (name[2] === '-' && name[3] === '-') {\n    throw new ArgumentError(\n      'aens name',\n      'without \"-\" char in both the third and fourth positions',\n      maybeName,\n    );\n  }\n  if (name[0] === '-') {\n    throw new ArgumentError('aens name', 'starting with no \"-\" char', maybeName);\n  }\n  if (name.at(-1) === '-') {\n    throw new ArgumentError('aens name', 'ending with no \"-\" char', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(name: AensName, salt: number = genSalt()): Encoded.Commitment {\n  return encode(\n    hash(\n      concatBuffers([\n        Buffer.from(nameToPunycode(name)),\n        Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n      ]),\n    ),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<(typeof encodingToPointerKey)[number][0]>,\n): (typeof encodingToPointerKey)[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  {\n    startFee,\n    increment = NAME_FEE_BID_INCREMENT,\n  }: { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0))\n    throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT)\n    throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name)).times(\n      new BigNumber(NAME_FEE_BID_INCREMENT).plus(1),\n    ),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h =\n    (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null) ??\n    (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null) ??\n    (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null) ??\n    0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers.js';\nimport { Int } from '../constants.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { toBytes } from '../../../utils/bytes.js';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport { BigNumber } from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return (\n    ['number', 'object', 'string'].includes(typeof number) &&\n    // eslint-disable-next-line no-restricted-globals\n    (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number))\n  );\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber =>\n  bigNumber.integerValue(BigNumber.ROUND_CEIL);\n","import { BigNumber } from 'bignumber.js';\nimport { isBigNumber } from './bignumber.js';\nimport { ArgumentError } from './errors.js';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  {\n    denomination = AE_AMOUNT_FORMATS.AETTOS,\n    targetDenomination = AE_AMOUNT_FORMATS.AETTOS,\n  }: { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix =>\n  prefixes.reduce((p, n) =>\n    Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p,\n  );\n\nconst getLowerBoundPrefix = (exponent: number): Prefix =>\n  prefixes.find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int.js';\nimport { Int } from '../constants.js';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter.js';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { ArgumentError } from '../../../utils/errors.js';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n  serialize: Optional extends true\n    ? (value?: Encoded.Generic<E>) => Buffer\n    : (value: Encoded.Generic<E>) => Buffer;\n  deserialize: (value: Buffer) => Encoded.Generic<E>;\n} {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { EntryTag } from '../entry/constants.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\nexport default function genEntryField<T extends EntryTag = EntryTag>(\n  tag?: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { packEntry }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(packEntry({ ...txParams, ...(tag != null && { tag }) }));\n    },\n\n    deserialize(buf, { unpackEntry }) {\n      return unpackEntry(encode(buf, Encoding.Bytearray), tag);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors.js';\nimport { isItemOfArray } from '../../../utils/other.js';\n\nexport default function genEnumerationField<Enum extends { [key: string]: number | string }>(\n  enm: Enum,\n): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { BigNumber } from 'bignumber.js';\nimport coinAmount from './coin-amount.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors.js';\nimport { Int, MIN_GAS_PRICE } from '../constants.js';\nimport Node from '../../../Node.js';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter.js';\n\nconst gasPriceCache: WeakMap<Node, { time: number; gasPrice: bigint }> = new WeakMap();\n\nexport async function getCachedIncreasedGasPrice(node: Node): Promise<bigint> {\n  const cache = gasPriceCache.get(node);\n  if (cache != null && cache.time > Date.now() - 20 * 1000) {\n    return cache.gasPrice;\n  }\n\n  const { minGasPrice, utilization } = (await node.getRecentGasPrices())[0];\n  let gasPrice =\n    utilization < 70\n      ? 0n\n      : BigInt(new BigNumber(minGasPrice.toString()).times(1.01).integerValue().toFixed());\n\n  const maxSafeGasPrice = BigInt(MIN_GAS_PRICE) * 100000n; // max microblock fee is 600ae or 35usd\n  if (gasPrice > maxSafeGasPrice) {\n    console.warn(\n      `Estimated gas price ${gasPrice} exceeds the maximum safe value for unknown reason.` +\n        ` It will be limited to ${maxSafeGasPrice}.` +\n        ' To overcome this restriction provide `gasPrice`/`fee` in options.',\n    );\n    gasPrice = maxSafeGasPrice;\n  }\n\n  gasPriceCache.set(node, { gasPrice, time: Date.now() });\n  return gasPrice;\n}\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    {\n      onNode,\n      denomination,\n    }: {\n      onNode?: Node;\n      denomination?: AE_AMOUNT_FORMATS;\n    },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `gasPrice` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return formatAmount(gasPrice, { targetDenomination: denomination });\n  },\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(\n        `Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`,\n      );\n    }\n    return value;\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors.js';\nimport { Int, MIN_GAS_PRICE, Tag } from '../constants.js';\nimport uInt from './u-int.js';\nimport coinAmount from './coin-amount.js';\nimport { getCachedIncreasedGasPrice } from './gas-price.js';\nimport { isKeyOfObject } from '../../../utils/other.js';\nimport { decode, Encoded } from '../../../utils/encoder.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\nimport Node from '../../../Node.js';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the base gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base gas\n * @example\n * ```js\n * TX_BASE_GAS(Tag.ChannelForceProgressTx) => 30 * 15000\n * ```\n */\nconst TX_BASE_GAS = (txType: Tag): number => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return factor * BASE_GAS;\n};\n\n/**\n * Calculate gas for other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The other gas\n * @example\n * ```js\n * TX_OTHER_GAS(Tag.OracleResponseTx, 10, { relativeTtl: 12, innerTxSize: 0 })\n *  => 10 * 20 + Math.ceil(32000 * 12 / Math.floor(60 * 24 * 365 / 3))\n * ```\n */\nconst TX_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): number => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return (\n        txSize * GAS_PER_BYTE +\n        Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL))\n      );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return (txSize - innerTxSize) * GAS_PER_BYTE;\n    default:\n      return txSize * GAS_PER_BYTE;\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate gas based on tx type and params\n */\nexport function buildGas(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return (\n    TX_BASE_GAS(txObject.tag) +\n    TX_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject),\n      innerTxSize,\n    })\n  );\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = new BigNumber(MIN_GAS_PRICE).times(buildGas(rebuildTx(fee), unpackTx, buildTx));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\n// TODO: Get rid of this workaround. Transaction builder can't accept/return gas price instead of\n// fee because it may get a decimal gas price. So, it should accept the optional `gasPrice` even\n// if it is not a contract-related transaction. And use this `gasPrice` to calculate `fee`.\nconst gasPricePrefix = '_gas-price:';\n\nexport interface SerializeAettosParams {\n  rebuildTx: (params: any) => Encoded.Transaction;\n  unpackTx: typeof unpackTxType;\n  buildTx: typeof buildTxType;\n  _computingMinFee?: BigNumber;\n}\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode }: { onNode?: Node },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `fee` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return gasPricePrefix + gasPrice;\n  },\n\n  serializeAettos(\n    _value: string | undefined,\n    { rebuildTx, unpackTx, buildTx, _computingMinFee }: SerializeAettosParams,\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value =\n      _value?.startsWith(gasPricePrefix) === true\n        ? minFee.dividedBy(MIN_GAS_PRICE).times(_value.replace(gasPricePrefix, ''))\n        : new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1] & SerializeAettosParams,\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    if (typeof value === 'string' && value.startsWith(gasPricePrefix)) {\n      return uInt.serialize(this.serializeAettos(value, params, options));\n    }\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import uInt from './u-int.js';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors.js';\nimport { Tag, MAX_AUTH_FUN_GAS } from '../constants.js';\nimport shortUInt from './short-u-int.js';\nimport { buildGas } from './fee.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildGas(rebuildTx(gasMax), unpackTx, buildTx);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag,\n      rebuildTx,\n      unpackTx,\n      buildTx,\n      _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax =\n      tag === Tag.GaMetaTx\n        ? MAX_AUTH_FUN_GAS\n        : calculateGasLimitMax(\n            gasMax,\n            (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n            unpackTx,\n            buildTx,\n          );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field.js';\nimport { AensName } from '../constants.js';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers.js';\nimport { InsufficientNameFeeError } from '../../../utils/errors.js';\nimport coinAmount from './coin-amount.js';\nimport { AensName, Int } from '../constants.js';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(_value: string | undefined, txFields: { name: AensName }): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<(typeof coinAmount)['serialize']>[1],\n    parameters: Parameters<(typeof coinAmount)['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants.js';\nimport { produceNameId, isNameValid } from '../helpers.js';\nimport address from './address.js';\nimport { Encoded, Encoding } from '../../../utils/encoder.js';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other.js';\nimport shortUInt from './short-u-int.js';\nimport Node from '../../../Node.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { NextNonceStrategy } from '../../../apis/node/index.js';\nimport { Tag } from '../constants.js';\n\nexport default function genNonceField<SenderKey extends string>(\n  senderKey: SenderKey,\n): {\n  serialize: (value: number, params: { tag: Tag }) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    serialize(value: number, { tag }): Buffer {\n      if (Tag.GaAttachTx === tag && value !== 1) {\n        throw new ArgumentError('nonce', 'equal 1 if GaAttachTx', value);\n      }\n      return shortUInt.serialize(value);\n    },\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode\n          .getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node/index.js';\nimport { toBytes } from '../../../utils/bytes.js';\nimport { Encoded, Encoding, decode, encode } from '../../../utils/encoder.js';\nimport { isAddressValid } from '../../../utils/crypto.js';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors.js';\nimport address, { AddressEncodings, idTagToEncoding } from './address.js';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\ntype NamePointerRaw = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default <AllowRaw extends boolean>(\n  allowRaw: AllowRaw,\n): {\n  serialize: (pointers: Array<AllowRaw extends true ? NamePointerRaw : NamePointer>) => Buffer[][];\n  deserialize: (\n    pointers: Array<[key: Buffer, id: Buffer]>,\n  ) => Array<AllowRaw extends true ? NamePointerRaw : NamePointer>;\n} => ({\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers) {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(\n        `Expected 32 pointers or less, got ${pointers.length} instead`,\n      );\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) {\n        payload = [...(allowRaw ? [ID_TAG] : []), addressAny.serialize(id)];\n      }\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError(\n            'Raw pointer',\n            `shorter than ${DATA_LENGTH_MAX + 1} bytes`,\n            `${data.length} bytes`,\n          );\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers) {\n    return pointers.map(([bKey, bId]) => {\n      if (!allowRaw) return { key: bKey.toString(), id: addressAny.deserialize(bId) };\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      // TS can't figure out the real type depending on allowRaw\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray) as Encoded.AccountAddress;\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n});\n","import coinAmount from './coin-amount.js';\nimport { Int } from '../constants.js';\nimport Node from '../../../Node.js';\nimport { Encoded } from '../../../utils/encoder.js';\nimport { ArgumentError } from '../../../utils/errors.js';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors.js';\nimport shortUInt from './short-u-int.js';\n\nexport default function genShortUIntConstField<\n  Value extends number,\n  Optional extends boolean = false,\n>(\n  constValue: Value,\n  optional?: Optional,\n): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes.js';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { Tag } from '../constants.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\n\nexport default function genTransactionField<T extends Tag = Tag>(\n  tag?: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...(tag != null && { tag }) }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      return unpackTx(encode(buf, Encoding.Transaction), tag);\n    },\n  };\n}\n","import { ArgumentError } from './errors.js';\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(\n      (\n        [\n          'apply',\n          'construct',\n          'defineProperty',\n          'deleteProperty',\n          'getOwnPropertyDescriptor',\n          'getPrototypeOf',\n          'isExtensible',\n          'ownKeys',\n          'preventExtensions',\n          'set',\n          'setPrototypeOf',\n          'get',\n          'has',\n        ] as const\n      ).map((name) => [\n        name,\n        (t: {}, ...args: unknown[]) => {\n          const target = valueCb();\n          if (target == null) throw new ArgumentError('wrapped value', 'defined', target);\n          if (name === 'get' && args[0] === '_wrappedValue') return target;\n          const res = (Reflect[name] as any)(target, ...args);\n          return typeof res === 'function' && name === 'get' ? res.bind(target) : res;\n        },\n      ]),\n    ),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter.js';\nimport { isAccountNotFoundError, pause } from './utils/other.js';\nimport { unwrapProxy } from './utils/wrap-proxy.js';\nimport { isNameValid, produceNameId } from './tx/builder/helpers.js';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants.js';\nimport {\n  AensPointerContextError,\n  DryRunError,\n  InvalidAensNameError,\n  TxTimedOutError,\n  TxNotInChainError,\n  InternalError,\n} from './utils/errors.js';\nimport Node from './Node.js';\nimport { DryRunResult, DryRunResults, SignedTx } from './apis/node/index.js';\nimport { decode, encode, Encoded, Encoding } from './utils/encoder.js';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport async function _getPollInterval(\n  type: 'key-block' | 'micro-block',\n  {\n    _expectedMineRate,\n    _microBlockCycle,\n    onNode,\n  }: { _expectedMineRate?: number; _microBlockCycle?: number; onNode: Node },\n): Promise<number> {\n  const getVal = async (\n    t: string,\n    val: number | undefined,\n    devModeDef: number,\n    def: number,\n  ): Promise<number | null> => {\n    if (t !== type) return null;\n    if (val != null) return val;\n    return (await onNode?.getNetworkId()) === 'ae_dev' ? devModeDef : def;\n  };\n\n  const base =\n    (await getVal('key-block', _expectedMineRate, 0, 180000)) ??\n    (await getVal('micro-block', _microBlockCycle, 0, 3000)) ??\n    (() => {\n      throw new InternalError(`Unknown type: ${type}`);\n    })();\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight({\n  cached = false,\n  ...options\n}: {\n  onNode: Node;\n  cached?: boolean;\n} & Parameters<typeof _getPollInterval>[1]): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache != null && cache.time > Date.now() - (await _getPollInterval('key-block', options))) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Return transaction details if it is mined, fail otherwise.\n * If the transaction has ttl specified then would wait till it leaves the mempool.\n * Otherwise would fail if a specified amount of blocks were mined.\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail if transaction ttl is not set\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5,\n    interval,\n    ...options\n  }: { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): ReturnType<Node['getTransactionByHash']> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let max;\n  do {\n    const tx = await options.onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    if (max == null) {\n      max = tx.tx.ttl !== 0 ? -1 : (await getHeight({ ...options, cached: true })) + blocks;\n    }\n    await pause(interval);\n  } while (max === -1 ? true : (await getHeight({ ...options, cached: true })) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  {\n    interval,\n    ...options\n  }: { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(await _getPollInterval('key-block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight(options);\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  {\n    confirm = 3,\n    onNode,\n    ...options\n  }: { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  {\n    height,\n    hash,\n    onNode,\n  }: { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): ReturnType<Node['getAccountByPubkey']> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  {\n    format = AE_AMOUNT_FORMATS.AETTOS,\n    ...options\n  }: { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : (address as Encoded.AccountAddress | Encoded.ContractAddress);\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration({\n  onNode,\n}: {\n  onNode: Node;\n}): ReturnType<Node['getCurrentGeneration']> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getGenerationByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<SignedTx[]> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getKeyBlockByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getMicroBlockHeaderByHash']> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError(\"Can't get dry-run request\");\n\n  let dryRunRes;\n  try {\n    const top =\n      typeof rs[0].top === 'number' ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress))).map((pubKey) => ({\n        pubKey,\n        amount: DRY_RUN_ACCOUNT.amount,\n      })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const { resolve, reject, tx, accountAddress } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top,\n    txEvents,\n    combine,\n    onNode,\n  }: { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{ txEvents?: DryRunResults['txEvents'] } & DryRunResult> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx,\n      accountAddress,\n      top,\n      txEvents,\n      resolve,\n      reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => {\n      void txDryRunHandler(key, onNode);\n    });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContractCode']> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContract']> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getNameEntryByName']> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName<Type extends Encoding.AccountAddress | Encoding.ContractAddress>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  {\n    verify = true,\n    resolveByNode = false,\n    onNode,\n  }: { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int.js';\nimport Node from '../../../Node.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { _getPollInterval, getHeight } from '../../../chain.js';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    {\n      onNode,\n      absoluteTtl,\n      _isInternalBuild,\n      ...options\n    }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n      _isInternalBuild?: boolean;\n    } & Omit<Parameters<typeof _getPollInterval>[1], 'onNode'>,\n  ) {\n    if (absoluteTtl !== true && value !== 0 && (value != null || _isInternalBuild === true)) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value = (value ?? 3) + (await getHeight({ ...options, onNode, cached: true }));\n    }\n    return value;\n  },\n};\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n  serialize: (value: Input | undefined, params: unknown) => Binary;\n  deserialize: (value: Binary, params: unknown) => Output;\n} {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n  serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n  deserialize: (value: Binary) => Output;\n} {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","export enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n/**\n * @category entry building\n */\nexport enum EntryTag {\n  Account = 10,\n  Oracle = 20,\n  // OracleQuery = 21,\n  Name = 30,\n  // NameCommitment = 31,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  Channel = 58,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaMetaTxAuthData = 810,\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants.js';\nimport SchemaTypes from './SchemaTypes.js';\nimport abiVersion from './field-types/abi-version.js';\nimport address, { idTagToEncoding } from './field-types/address.js';\nimport array from './field-types/array.js';\nimport coinAmount from './field-types/coin-amount.js';\nimport ctVersion from './field-types/ct-version.js';\nimport encoded from './field-types/encoded.js';\nimport entry from './field-types/entry.js';\nimport enumeration from './field-types/enumeration.js';\nimport fee from './field-types/fee.js';\nimport gasLimit from './field-types/gas-limit.js';\nimport gasPrice from './field-types/gas-price.js';\nimport name from './field-types/name.js';\nimport nameFee from './field-types/name-fee.js';\nimport nameId from './field-types/name-id.js';\nimport nonce from './field-types/nonce.js';\nimport pointers from './field-types/pointers.js';\nimport queryFee from './field-types/query-fee.js';\nimport raw from './field-types/raw.js';\nimport shortUInt from './field-types/short-u-int.js';\nimport shortUIntConst from './field-types/short-u-int-const.js';\nimport string from './field-types/string.js';\nimport transaction from './field-types/transaction.js';\nimport ttl from './field-types/ttl.js';\nimport uInt from './field-types/u-int.js';\nimport withDefault from './field-types/with-default.js';\nimport withFormatting from './field-types/with-formatting.js';\nimport { Encoded, Encoding } from '../../utils/encoder.js';\nimport { ArgumentError } from '../../utils/errors.js';\nimport { EntryTag } from './entry/constants.js';\nimport { EntParams, EntUnpacked } from './entry/schema.generated.js';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface TransactionAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst transactionAny = transaction() as unknown as TransactionAny;\n\ninterface TransactionSignedTx {\n  serialize: (\n    value: (TxParams & { tag: Tag.SignedTx }) | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst transactionSignedTx = transaction(Tag.SignedTx) as unknown as TransactionSignedTx;\n\ninterface EntryTreesPoi {\n  serialize: (\n    value: (EntParams & { tag: EntryTag.TreesPoi }) | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => EntUnpacked & { tag: EntryTag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(EntryTag.TreesPoi) as unknown as EntryTreesPoi;\n\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\n/**\n * Name ttl represented in number of blocks (Max value is 50000 blocks)\n */\nconst nameTtl = withFormatting((value) => {\n  const NAME_TTL = 180000;\n  value ??= NAME_TTL;\n  if (value >= 1 && value <= NAME_TTL) return value;\n  throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n}, shortUInt);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [\n  {\n    tag: shortUIntConst(Tag.SignedTx),\n    version: shortUIntConst(1, true),\n    signatures: array(raw), // TODO: use sg_ (Encoding.Signature) instead\n    encodedTx: transactionAny,\n  },\n  {\n    tag: shortUIntConst(Tag.SpendTx),\n    version: shortUIntConst(1, true),\n    senderId: address(Encoding.AccountAddress),\n    // TODO: accept also an AENS name\n    recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n    amount: coinAmount,\n    fee,\n    ttl,\n    nonce: nonce('senderId'),\n    payload: encoded(Encoding.Bytearray, true),\n  },\n  {\n    tag: shortUIntConst(Tag.NamePreclaimTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    commitmentId: address(Encoding.Commitment),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameClaimTx),\n    version: shortUIntConst(2, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    name,\n    nameSalt: withDefault(0, uInt),\n    nameFee,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameUpdateTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    nameTtl,\n    pointers: pointers(false),\n    clientTtl,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameUpdateTx),\n    version: shortUIntConst(2),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    nameTtl,\n    pointers: pointers(true),\n    clientTtl,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameTransferTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    // TODO: accept also an AENS name\n    recipientId: address(Encoding.AccountAddress, Encoding.Name),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameRevokeTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.ContractCreateTx),\n    version: shortUIntConst(1, true),\n    ownerId: address(Encoding.AccountAddress),\n    nonce: nonce('ownerId'),\n    code: encoded(Encoding.ContractBytearray),\n    ctVersion,\n    fee,\n    ttl,\n    deposit: withFormatting((value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    }, coinAmount),\n    amount: coinAmount,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.ContractCallTx),\n    version: shortUIntConst(1, true),\n    callerId: address(Encoding.AccountAddress),\n    nonce: nonce('callerId'),\n    // TODO: accept also an AENS name\n    contractId: address(Encoding.ContractAddress, Encoding.Name),\n    abiVersion,\n    fee,\n    ttl,\n    amount: coinAmount,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.OracleRegisterTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    queryFormat: string,\n    responseFormat: string,\n    queryFee: coinAmount,\n    oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    oracleTtlValue: withDefault(500, shortUInt),\n    fee,\n    ttl,\n    abiVersion,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleExtendTx),\n    version: shortUIntConst(1, true),\n    // TODO: accept also an AENS name\n    oracleId: address(Encoding.OracleAddress, Encoding.Name),\n    nonce: nonce('oracleId'),\n    oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    oracleTtlValue: withDefault(500, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleQueryTx),\n    version: shortUIntConst(1, true),\n    senderId: address(Encoding.AccountAddress),\n    nonce: nonce('senderId'),\n    // TODO: accept also an AENS name\n    oracleId: address(Encoding.OracleAddress, Encoding.Name),\n    query: string,\n    queryFee,\n    queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    queryTtlValue: withDefault(10, shortUInt),\n    responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    responseTtlValue: withDefault(10, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleResponseTx),\n    version: shortUIntConst(1, true),\n    oracleId: address(Encoding.OracleAddress),\n    nonce: nonce('oracleId'),\n    queryId: encoded(Encoding.OracleQueryId),\n    response: string,\n    responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    responseTtlValue: withDefault(10, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCreateTx),\n    version: shortUIntConst(2, true),\n    initiator: address(Encoding.AccountAddress),\n    initiatorAmount: uInt,\n    responder: address(Encoding.AccountAddress),\n    responderAmount: uInt,\n    channelReserve: uInt,\n    lockPeriod: uInt,\n    ttl,\n    fee,\n    initiatorDelegateIds: array(address(...idTagToEncoding)),\n    responderDelegateIds: array(address(...idTagToEncoding)),\n    stateHash: encoded(Encoding.State),\n    nonce: nonce('initiator'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    initiatorAmountFinal: uInt,\n    responderAmountFinal: uInt,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    poi: entryTreesPoi,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSlashTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    poi: entryTreesPoi,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelDepositTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    amount: uInt,\n    ttl,\n    fee,\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelWithdrawTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    toId: address(Encoding.AccountAddress),\n    amount: uInt,\n    ttl,\n    fee,\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSettleTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    initiatorAmountFinal: uInt,\n    responderAmountFinal: uInt,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelForceProgressTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    round: shortUInt,\n    update: encoded(Encoding.ContractBytearray),\n    stateHash: encoded(Encoding.State),\n    offChainTrees: encoded(Encoding.StateTrees),\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelOffChainTx),\n    version: shortUIntConst(2, true),\n    channelId: address(Encoding.Channel),\n    round: shortUInt,\n    stateHash: encoded(Encoding.State),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.GaAttachTx),\n    version: shortUIntConst(1, true),\n    ownerId: address(Encoding.AccountAddress),\n    nonce: nonce('ownerId'),\n    code: encoded(Encoding.ContractBytearray),\n    authFun: raw,\n    ctVersion,\n    fee,\n    ttl,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.GaMetaTx),\n    version: shortUIntConst(2, true),\n    gaId: address(Encoding.AccountAddress),\n    authData: encoded(Encoding.ContractBytearray),\n    abiVersion,\n    fee,\n    gasLimit,\n    gasPrice,\n    tx: transactionSignedTx,\n  },\n  {\n    tag: shortUIntConst(Tag.PayingForTx),\n    version: shortUIntConst(1, true),\n    payerId: address(Encoding.AccountAddress),\n    nonce: nonce('payerId'),\n    fee,\n    tx: transactionSignedTx,\n  },\n] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types/interface.js';\nimport {\n  ArgumentError,\n  DecodeError,\n  SchemaNotFoundError,\n  InternalError,\n} from '../../utils/errors.js';\nimport { Encoding, Encoded, encode, decode } from '../../utils/encoder.js';\nimport { readInt } from './helpers.js';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null)\n      throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) =>\n    field.serialize(params[key], { ...params, ...extraParams }, params),\n  );\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name,\n      field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { EntryTag } from '../entry/constants.js';\nimport { encode, Encoding, Encoded, decode } from '../../../utils/encoder.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\nexport default function genMapField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { packEntry }) {\n      return decode(\n        packEntry({\n          tag: EntryTag.Mtree,\n          values: Object.entries(object).map(\n            ([key, value]) =>\n              ({\n                tag: EntryTag.MtreeValue,\n                key: decode(key as Encoded.Generic<E>),\n                value: decode(packEntry({ ...(value as any), tag })),\n              }) as const,\n          ),\n        }),\n      );\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      const { values } = unpackEntry(encode(buffer, Encoding.Bytearray), EntryTag.Mtree);\n      return Object.fromEntries(\n        values\n          // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n          .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n          .map(({ key, value }) => [\n            encode(key, encoding),\n            unpackEntry(encode(value, Encoding.Bytearray), tag),\n          ]),\n      ) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { EntryTag } from '../entry/constants.js';\nimport { hash } from '../../../utils/crypto.js';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport type { unpackEntry } from '../entry/index.js';\nimport type { EntUnpacked } from '../entry/schema.generated.js';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends EntryTag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackEntry: typeof unpackEntry;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpEnt - Implementation of unpackEntry use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpEnt: typeof unpackEntry) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackEntry = unpEnt;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(binary[1].map((node) => [node[0].toString('hex'), node[1]]));\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError(\"Can't find a node by root hash\");\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError(\"Can't find a node by hash in extension node\");\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...(node[16].length !== 0 && { value: node[16] }),\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...(type === NodeType.Leaf && { value: node[1] }),\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => [Buffer.from(mptHash, 'hex'), value]),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) {\n      // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError(\"Can't find node in complete tree\");\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): (EntUnpacked & { tag: T }) | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackEntry(encode(d, Encoding.Bytearray), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError(\"Can't find node in complete tree\");\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, EntUnpacked & { tag: T }> {\n    return Object.fromEntries(\n      this.#entriesRaw()\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n        .map(([k, v]) => [\n          encode(Buffer.from(k, 'hex'), this.#encoding),\n          this.#unpackEntry(encode(v, Encoding.Bytearray), this.#tag),\n        ]),\n    ) as Record<Encoded.Generic<E>, EntUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackEntry: typeof unpackEntry }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackEntry }) {\n      return new MPTree(value, encoding, tag, unpackEntry);\n    },\n  };\n}\n","import { EntryTag } from '../entry/constants.js';\nimport { encode, Encoding, decode } from '../../../utils/encoder.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\ntype TagWrapping =\n  | EntryTag.AccountsMtree\n  | EntryTag.CallsMtree\n  | EntryTag.ChannelsMtree\n  | EntryTag.ContractsMtree\n  | EntryTag.NameserviceMtree\n  | EntryTag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(\n  tag: T,\n): {\n  serialize: (\n    // TODO: replace with `(EntParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `(EntUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { packEntry }) {\n      return decode(packEntry({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      return unpackEntry<TagWrapping>(encode(buffer, Encoding.Bytearray), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import SchemaTypes from '../SchemaTypes.js';\nimport abiVersion from '../field-types/abi-version.js';\nimport address, { idTagToEncoding } from '../field-types/address.js';\nimport array from '../field-types/array.js';\nimport boolean from '../field-types/boolean.js';\nimport coinAmount from '../field-types/coin-amount.js';\nimport ctVersion from '../field-types/ct-version.js';\nimport encoded from '../field-types/encoded.js';\nimport entry from '../field-types/entry.js';\nimport enumeration from '../field-types/enumeration.js';\nimport gasLimit from '../field-types/gas-limit.js';\nimport gasPrice from '../field-types/gas-price.js';\nimport map from '../field-types/map.js';\nimport mptree from '../field-types/mptree.js';\nimport pointers from '../field-types/pointers.js';\nimport raw from '../field-types/raw.js';\nimport shortUInt from '../field-types/short-u-int.js';\nimport shortUIntConst from '../field-types/short-u-int-const.js';\nimport string from '../field-types/string.js';\nimport uInt from '../field-types/u-int.js';\nimport wrapped from '../field-types/wrapped.js';\nimport { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { EntryTag, CallReturnType } from './constants.js';\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<(EntParams & { tag: EntryTag.MtreeValue }) | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<EntUnpacked & { tag: EntryTag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(EntryTag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, EntParams & { tag: EntryTag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, EntUnpacked & { tag: EntryTag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, EntryTag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, EntParams & { tag: EntryTag.Account }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.AccountAddress, EntUnpacked & { tag: EntryTag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, EntryTag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, EntParams & { tag: EntryTag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.Bytearray, EntUnpacked & { tag: EntryTag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, EntryTag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (value: Record<Encoded.Channel, EntParams & { tag: EntryTag.Channel }>) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, EntUnpacked & { tag: EntryTag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, EntryTag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (value: Record<Encoded.Name, EntParams & { tag: EntryTag.Name }>) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, EntUnpacked & { tag: EntryTag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, EntryTag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (value: Record<Encoded.OracleAddress, EntParams & { tag: EntryTag.Oracle }>) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.OracleAddress, EntUnpacked & { tag: EntryTag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, EntryTag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [\n  {\n    tag: shortUIntConst(EntryTag.Account),\n    version: shortUIntConst(1),\n    nonce: shortUInt,\n    balance: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Account),\n    version: shortUIntConst(2, true),\n    flags: uInt,\n    nonce: shortUInt,\n    balance: uInt,\n    gaContract: address(Encoding.ContractAddress, Encoding.Name),\n    gaAuthFun: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.Name),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nameTtl: shortUInt,\n    status: raw,\n    /**\n     * a suggestion as to how long any clients should cache this information\n     */\n    clientTtl: shortUInt,\n    pointers,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Contract),\n    version: shortUIntConst(1, true),\n    owner: address(Encoding.AccountAddress),\n    ctVersion,\n    code: encoded(Encoding.ContractBytearray),\n    log: encoded(Encoding.ContractBytearray),\n    active: boolean,\n    referers: array(address(Encoding.AccountAddress)),\n    deposit: coinAmount,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ContractCall),\n    version: shortUIntConst(2, true),\n    callerId: address(Encoding.AccountAddress),\n    callerNonce: shortUInt,\n    height: shortUInt,\n    contractId: address(Encoding.ContractAddress),\n    // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n    gasPrice: uInt,\n    gasUsed: shortUInt,\n    returnValue: encoded(Encoding.ContractBytearray),\n    returnType: enumeration(CallReturnType),\n    // TODO: add serialization for\n    //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n    log: array(raw),\n  },\n  {\n    tag: shortUIntConst(EntryTag.Oracle),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    queryFormat: string,\n    responseFormat: string,\n    queryFee: coinAmount,\n    oracleTtlValue: shortUInt,\n    abiVersion,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Channel),\n    version: shortUIntConst(3, true),\n    initiator: address(Encoding.AccountAddress),\n    responder: address(Encoding.AccountAddress),\n    channelAmount: uInt,\n    initiatorAmount: uInt,\n    responderAmount: uInt,\n    channelReserve: uInt,\n    initiatorDelegateIds: array(address(...idTagToEncoding)),\n    responderDelegateIds: array(address(...idTagToEncoding)),\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    soloRound: uInt,\n    lockPeriod: uInt,\n    lockedUntil: uInt,\n    initiatorAuth: encoded(Encoding.ContractBytearray),\n    responderAuth: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateTransfer),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    to: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateDeposit),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateWithdraw),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCreateContract),\n    version: shortUIntConst(1, true),\n    owner: address(Encoding.AccountAddress),\n    ctVersion,\n    code: encoded(Encoding.ContractBytearray),\n    deposit: uInt,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCallContract),\n    version: shortUIntConst(1, true),\n    caller: address(Encoding.AccountAddress),\n    contract: address(Encoding.ContractAddress),\n    abiVersion,\n    amount: uInt,\n    callData: encoded(Encoding.ContractBytearray),\n    callStack: raw,\n    gasPrice,\n    gasLimit,\n  },\n  {\n    tag: shortUIntConst(EntryTag.TreesPoi),\n    version: shortUIntConst(1, true),\n    // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n    accounts: array(mptree(Encoding.AccountAddress, EntryTag.Account)),\n    calls: array(mptree(Encoding.Bytearray, EntryTag.ContractCall)),\n    channels: array(mptree(Encoding.Channel, EntryTag.Channel)),\n    contracts: array(mptree(Encoding.ContractAddress, EntryTag.Contract)),\n    ns: array(mptree(Encoding.Name, EntryTag.Name)),\n    oracles: array(mptree(Encoding.OracleAddress, EntryTag.Oracle)),\n  },\n  {\n    tag: shortUIntConst(EntryTag.StateTrees),\n    version: shortUIntConst(0, true),\n    contracts: wrapped(EntryTag.ContractsMtree) as unknown as MapContracts,\n    calls: wrapped(EntryTag.CallsMtree) as unknown as MapCalls,\n    channels: wrapped(EntryTag.ChannelsMtree) as unknown as MapChannels,\n    ns: wrapped(EntryTag.NameserviceMtree) as unknown as MapNames,\n    oracles: wrapped(EntryTag.OraclesMtree) as unknown as MapOracles,\n    accounts: wrapped(EntryTag.AccountsMtree) as unknown as MapAccounts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Mtree),\n    version: shortUIntConst(1, true),\n    values: entryMtreeValueArray,\n  },\n  {\n    tag: shortUIntConst(EntryTag.MtreeValue),\n    version: shortUIntConst(1, true),\n    key: raw,\n    value: raw,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ContractsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapContracts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.CallsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapCalls,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapChannels,\n  },\n  {\n    tag: shortUIntConst(EntryTag.NameserviceMtree),\n    version: shortUIntConst(1, true),\n    payload: mapNames,\n  },\n  {\n    tag: shortUIntConst(EntryTag.OraclesMtree),\n    version: shortUIntConst(1, true),\n    payload: mapOracles,\n  },\n  {\n    tag: shortUIntConst(EntryTag.AccountsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapAccounts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.GaMetaTxAuthData),\n    version: shortUIntConst(1, true),\n    fee: coinAmount,\n    gasPrice,\n    txHash: encoded(Encoding.TxHash),\n  },\n] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type EntParams = Schemas['TxParams'];\nexport type EntUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { packRecord, unpackRecord } from '../common.js';\nimport { schemas } from './schema.js';\nimport { EntryTag } from './constants.js';\nimport { EntParams, EntUnpacked } from './schema.generated.js';\n\nconst encodingTag = [\n  [EntryTag.CallsMtree, Encoding.CallStateTree],\n  [EntryTag.StateTrees, Encoding.StateTrees],\n  [EntryTag.TreesPoi, Encoding.Poi],\n] as const;\n\nexport function packEntry(params: EntParams & { tag: EntryTag.CallsMtree }): Encoded.CallStateTree;\nexport function packEntry(params: EntParams & { tag: EntryTag.StateTrees }): Encoded.StateTrees;\nexport function packEntry(params: EntParams & { tag: EntryTag.TreesPoi }): Encoded.Poi;\n/**\n * Pack entry\n * @category entry builder\n * @param params - Params of entry\n * @returns Encoded entry\n */\nexport function packEntry(params: EntParams): Encoded.Any;\nexport function packEntry(params: EntParams): Encoded.Any {\n  const encoding = encodingTag.find(([tag]) => tag === params.tag)?.[1] ?? Encoding.Bytearray;\n  return packRecord(schemas, EntryTag, params, { packEntry }, encoding);\n}\n\nexport function unpackEntry(\n  encoded: Encoded.CallStateTree,\n): EntUnpacked & { tag: EntryTag.CallsMtree };\nexport function unpackEntry(\n  encoded: Encoded.StateTrees,\n): EntUnpacked & { tag: EntryTag.StateTrees };\nexport function unpackEntry(encoded: Encoded.Poi): EntUnpacked & { tag: EntryTag.TreesPoi };\n/**\n * Unpack entry\n * @category entry builder\n * @param encoded - Encoded entry\n * @param expectedTag - Expected entry type\n * @returns Params of entry\n */\nexport function unpackEntry<T extends EntryTag>(\n  encoded: Encoded.Any,\n  expectedTag?: T,\n): EntUnpacked & { tag: T };\nexport function unpackEntry(encoded: Encoded.Any, expectedTag?: EntryTag): EntUnpacked {\n  expectedTag ??= encodingTag.find(([, enc]) => encoded.startsWith(enc))?.[0];\n  return unpackRecord(schemas, EntryTag, encoded, expectedTag, { unpackEntry }) as any;\n}\n","import { decode, encode, Encoded, Encoding } from '../../utils/encoder.js';\nimport { hash } from '../../utils/crypto.js';\nimport { Field } from './field-types/interface.js';\nimport { txSchema } from './schema.js';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated.js';\nimport { Tag } from './constants.js';\nimport { buildContractId } from './helpers.js';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common.js';\nimport { ArgumentError } from '../../utils/errors.js';\nimport { packEntry, unpackEntry } from './entry/index.js';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding =\n  | Encoding.Transaction\n  | Encoding.Poi\n  | Encoding.StateTrees\n  | Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction {\n  return packRecord(\n    txSchema,\n    Tag,\n    params,\n    {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      unpackTx,\n      buildTx,\n      rebuildTx: (overrideParams: any) => buildTx({ ...params, ...overrideParams }),\n      packEntry,\n    },\n    Encoding.Transaction,\n  );\n}\n\nexport type BuildTxOptions<TxType extends Tag, OmitFields extends string> = Omit<\n  TxParamsAsync & { tag: TxType },\n  'tag' | OmitFields\n>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version).map(async ([key, field]) => {\n      if (field.prepare == null) return;\n      // @ts-expect-error the type of `params[key]` can't be determined accurately\n      params[key] = await field.prepare(params[key], params, params);\n    }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, { unpackTx, unpackEntry }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_') ? decode(rawTx) : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import nacl from 'tweetnacl';\nimport AccountBase from './Base.js';\nimport { hash, messageToHash, messagePrefixLength } from '../utils/crypto.js';\nimport { ArgumentError } from '../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../utils/encoder.js';\nimport { concatBuffers } from '../utils/other.js';\nimport { hashTypedData, AciValue } from '../utils/typed-data.js';\nimport { buildTx } from '../tx/builder/index.js';\nimport { Tag } from '../tx/builder/constants.js';\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  readonly #secretKeyDecoded: Uint8Array;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(public readonly secretKey: Encoded.AccountSecretKey) {\n    super();\n    const keyPair = nacl.sign.keyPair.fromSeed(decode(secretKey));\n    this.#secretKeyDecoded = keyPair.secretKey;\n    this.address = encode(keyPair.publicKey, Encoding.AccountAddress);\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    const secretKey = encode(nacl.randomBytes(32), Encoding.AccountSecretKey);\n    return new AccountMemory(secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return nacl.sign.detached(Buffer.from(data), this.#secretKeyDecoded);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name,\n      version,\n      networkId,\n      contractAddress,\n      ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name,\n      version,\n      networkId,\n      contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength,\n      new Uint8Array([1]),\n      Buffer.from(networkId),\n      decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import SchemaTypes from '../SchemaTypes.js';\nimport address from '../field-types/address.js';\nimport nameId from '../field-types/name-id.js';\nimport shortUIntConst from '../field-types/short-u-int-const.js';\nimport { Encoded, Encoding, decode, encode } from '../../../utils/encoder.js';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  /**\n   * Delegation of all AENS names to a contract\n   */\n  AensWildcard = 1,\n  /**\n   * Delegation of an AENS name to a contract\n   */\n  AensName = 2,\n  /**\n   * Delegation of AENS preclaim to a contract\n   */\n  AensPreclaim = 3,\n  /**\n   * Delegation of oracle operations to a contract\n   */\n  Oracle = 4,\n  /**\n   * Delegation of oracle query to a contract\n   */\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\n/**\n * Oracle query ID to reply by a contract\n */\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * Address of a contract to delegate permissions to\n */\nconst contractAddress = address(Encoding.ContractAddress);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [\n  {\n    tag: shortUIntConst(DelegationTag.AensWildcard),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.AensName),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    /**\n     * AENS name to manage by a contract\n     */\n    nameId,\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.AensPreclaim),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.Oracle),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.OracleResponse),\n    version: shortUIntConst(1, true),\n    queryId: queryIdField,\n    contractAddress,\n  },\n] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { packRecord, unpackRecord } from '../common.js';\nimport { DelegationTag, schemas } from './schema.js';\nimport { DlgParams, DlgUnpacked } from './schema.generated.js';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","function verCmp(a: string, b: string): number {\n  const getComponents = (v: string): number[] =>\n    v\n      .split(/[-+]/)[0]\n      .split('.')\n      .map((i) => +i);\n\n  const aComponents = getComponents(a);\n  const bComponents = getComponents(b);\n\n  const base = Math.max(...aComponents, ...bComponents) + 1;\n  const componentsToNumber = (components: number[]): number =>\n    components.reverse().reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  return componentsToNumber(aComponents) - componentsToNumber(bComponents);\n}\n\nexport default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion?: string,\n): boolean {\n  return verCmp(version, geVersion) >= 0 && (ltVersion == null || verCmp(version, ltVersion) < 0);\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport {\n  AdditionalPolicyConfig,\n  FullOperationResponse,\n  OperationOptions,\n  createSerializer as createSerializerOrig,\n} from '@azure/core-client';\nimport { pause } from './other.js';\nimport semverSatisfies from './semver-satisfies.js';\nimport { InternalError, UnexpectedTsError, UnsupportedVersionError } from './errors.js';\n\nconst bigIntPrefix = '_sdk-big-int-';\n\nexport const createSerializer = (\n  ...args: Parameters<typeof createSerializerOrig>\n): ReturnType<typeof createSerializerOrig> => {\n  const serializer = createSerializerOrig(...args);\n  const { serialize, deserialize } = serializer;\n  return Object.assign(serializer, {\n    serialize(\n      ...[mapper, object, objectName, options]: Parameters<typeof serialize>\n    ): ReturnType<typeof serialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || object == null) {\n        return serialize.call(this, mapper, object, objectName, options);\n      }\n      if (typeof object !== 'bigint') {\n        objectName ??= mapper.serializedName;\n        throw new Error(`${objectName} with value ${object} must be of type bigint.`);\n      }\n      return object.toString();\n    },\n\n    deserialize(\n      ...[mapper, responseBody, objectName, options]: Parameters<typeof deserialize>\n    ): ReturnType<typeof deserialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || responseBody == null) {\n        if (typeof responseBody === 'string' && responseBody.startsWith(bigIntPrefix)) {\n          console.warn(`AeSdk internal error: BigInt value ${responseBody} handled incorrectly`);\n          responseBody = +responseBody.replace(bigIntPrefix, '');\n        }\n        const result = deserialize.call(this, mapper, responseBody, objectName, options);\n        // TODO: remove after fixing https://github.com/aeternity/ae_mdw/issues/1891\n        // and https://github.com/aeternity/aeternity/issues/4386\n        if (result instanceof Date) return new Date(+result / 1000);\n        return result;\n      }\n      if (typeof responseBody === 'number' && responseBody > Number.MAX_SAFE_INTEGER) {\n        throw new InternalError(`Number ${responseBody} is not accurate to be converted to BigInt`);\n      }\n      return BigInt(responseBody.toString().replace(bigIntPrefix, ''));\n    },\n  });\n};\n\nconst safeLength = Number.MAX_SAFE_INTEGER.toString().length;\nconst bigIntPropertyRe = new RegExp(String.raw`(\"\\w+\":\\s*)(\\d{${safeLength},})(\\s*[,}])`, 'm');\nconst bigIntArrayItemRe = new RegExp(String.raw`([[,]\\s*)(\\d{${safeLength},})\\b`, 'm');\nexport const parseBigIntPolicy: PipelinePolicy = {\n  name: 'parse-big-int',\n  async sendRequest(request, next) {\n    const response = await next(request);\n    if (response.bodyAsText == null) return response;\n    // TODO: replace with https://caniuse.com/mdn-javascript_builtins_json_parse_reviver_parameter_context_argument when it gets support in FF and Safari\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntPropertyRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntPropertyRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, name, value, end] = match;\n        return [\n          name,\n          +value > Number.MAX_SAFE_INTEGER ? `\"${bigIntPrefix}${value}\"` : value,\n          end,\n        ].join('');\n      },\n    );\n    // FIXME: may break strings inside json\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntArrayItemRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntArrayItemRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, prefix, value] = match;\n        return `${prefix}\"${bigIntPrefix}${value}\"`;\n      },\n    );\n    return response;\n  },\n};\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(\n          key,\n          req.catch(() => {}),\n        );\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (\n          !(error instanceof RestError) ||\n          error.request == null ||\n          error.message.startsWith('Error ')\n        )\n          throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        const body = (error.response as FullOperationResponse).parsedBody;\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  versionCb: (options: OperationOptions) => Promise<string>,\n  geVersion: string,\n  ltVersion: string,\n  ignoreVersion: boolean,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'version-check',\n    async sendRequest(request, next) {\n      if (request.headers.has('__version-check')) {\n        request.headers.delete('__version-check');\n        return next(request);\n      }\n      const options = { requestOptions: { customHeaders: { '__version-check': 'true' } } };\n      const args = [await versionCb(options), geVersion, ltVersion] as const;\n      if (!semverSatisfies(...args)) {\n        const error = new UnsupportedVersionError(name, ...args);\n        if (ignoreVersion) console.warn(error.message);\n        else throw error;\n      }\n      return next(request);\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount)\n        .fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      errorCode: {\n        serializedName: \"error_code\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: -1,\n        },\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedTx: {\n        serializedName: \"encoded_tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedKey: {\n        serializedName: \"encoded_key\",\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const AuctionEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuctionEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      startedAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"started_at\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      endsAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ends_at\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      highestBidder: {\n        serializedName: \"highest_bidder\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBid: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"highest_bid\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      soloRound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockedUntil: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Currency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunit: {\n        serializedName: \"subunit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunitsPerUnit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"subunits_per_unit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fiatConverstionUrl: {\n        serializedName: \"fiat_converstion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fiatConversionUrl: {\n        serializedName: \"fiat_conversion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      logo: {\n        serializedName: \"logo\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\",\n        },\n      },\n      primaryColour: {\n        serializedName: \"primary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      secondaryColour: {\n        serializedName: \"secondary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkName: {\n        serializedName: \"network_name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Image: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMinimum: 0,\n            },\n            type: {\n              // @ts-expect-error we are extending autorest with BigInt support\n              name: \"BigInt\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PinningTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PinningTx\",\n    modelProperties: {\n      epoch: {\n        serializedName: \"epoch\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      parentPayload: {\n        serializedName: \"parent_payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastLeader: {\n        serializedName: \"last_leader\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      parentType: {\n        serializedName: \"parent_type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      parentNetworkId: {\n        serializedName: \"parent_network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HCContractPubkeys: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HCContractPubkeys\",\n    modelProperties: {\n      staking: {\n        serializedName: \"staking\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      election: {\n        serializedName: \"election\",\n        type: {\n          name: \"String\",\n        },\n      },\n      rewards: {\n        serializedName: \"rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GasPricesItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GasPricesItem\",\n    modelProperties: {\n      minGasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"min_gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      utilization: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"utilization\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      minutes: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"minutes\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      difficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      hashrate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      uptime: {\n        serializedName: \"uptime\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      effectiveAtHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SyncStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SyncStatus\",\n    modelProperties: {\n      progress: {\n        serializedName: \"progress\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      speed: {\n        serializedName: \"speed\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      estimate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"estimate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      firstSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lastSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"verified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      unverified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"unverified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"accounts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contracts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contracts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractOracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      locked: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleQueries: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pendingRewards: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      total: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"total\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers.js\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const nameHash: OperationURLParameter = {\n  parameterPath: \"nameHash\",\n  mapper: {\n    serializedName: \"name_hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n","import { createSerializer } from \"../../utils/autorest.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters.js\";\nimport * as Mappers from \"./models/mappers.js\";\nimport {\n  NodeOptionalParams,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAuctionEntryByNameOptionalParams,\n  GetAuctionEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetCurrencyOptionalParams,\n  GetCurrencyResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetPinningTxOptionalParams,\n  GetPinningTxResponse,\n  GetHyperchainContractPubkeysOptionalParams,\n  GetHyperchainContractPubkeysResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetNameEntryByNameHashOptionalParams,\n  GetNameEntryByNameHashResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetRecentGasPricesOptionalParams,\n  GetRecentGasPricesResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n  GetSyncStatusOptionalParams,\n  GetSyncStatusResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n} from \"./models/index.js\";\n\nexport class Node extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get auction entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getAuctionEntryByName(\n    name: string,\n    options?: GetAuctionEntryByNameOptionalParams,\n  ): Promise<GetAuctionEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getAuctionEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get the currency metadata of a node\n   * @param options The options parameters.\n   */\n  getCurrency(\n    options?: GetCurrencyOptionalParams,\n  ): Promise<GetCurrencyResponse> {\n    return this.sendOperationRequest({ options }, getCurrencyOperationSpec);\n  }\n\n  /**\n   * Dry-run unsigned transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx\n   * and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the pinning transaction for the current epoch. Returns both the individual parameters as well as\n   * the parent chain type (aeternity, btc etc.), network id and a packaged 80 byte readymade payload for\n   * that chain type.\n   * @param options The options parameters.\n   */\n  getPinningTx(\n    options?: GetPinningTxOptionalParams,\n  ): Promise<GetPinningTxResponse> {\n    return this.sendOperationRequest({ options }, getPinningTxOperationSpec);\n  }\n\n  /**\n   * Get the pubkeys for the configured hyperchain contracts for staking, election and rewards\n   * @param options The options parameters.\n   */\n  getHyperchainContractPubkeys(\n    options?: GetHyperchainContractPubkeysOptionalParams,\n  ): Promise<GetHyperchainContractPubkeysResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getHyperchainContractPubkeysOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param nameHash The name hash of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByNameHash(\n    nameHash: string,\n    options?: GetNameEntryByNameHashOptionalParams,\n  ): Promise<GetNameEntryByNameHashResponse> {\n    return this.sendOperationRequest(\n      { nameHash, options },\n      getNameEntryByNameHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get minimum gas prices in recent blocks\n   * @param options The options parameters.\n   */\n  getRecentGasPrices(\n    options?: GetRecentGasPricesOptionalParams,\n  ): Promise<GetRecentGasPricesResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getRecentGasPricesOperationSpec,\n    );\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n\n  /**\n   * Get the sync status of a node\n   * @param options The options parameters.\n   */\n  getSyncStatus(\n    options?: GetSyncStatusOptionalParams,\n  ): Promise<GetSyncStatusResponse> {\n    return this.sendOperationRequest({ options }, getSyncStatusOperationSpec);\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAuctionEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/auctions/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AuctionEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrencyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/currency\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Currency,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPinningTxOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/hyperchain/pin-tx\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PinningTx,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getHyperchainContractPubkeysOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/hyperchain/contracts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HCContractPubkeys,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getNameEntryByNameHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/hash/{name_hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.nameHash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecentGasPricesOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/recent-gas-prices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"GasPricesItem\" } },\n        },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSyncStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/sync-status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SyncStatus,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport { OperationOptions } from '@azure/core-client';\nimport { userAgentPolicyName, setClientRequestIdPolicyName } from '@azure/core-rest-pipeline';\nimport {\n  genRequestQueuesPolicy,\n  genCombineGetRequestsPolicy,\n  genErrorFormatterPolicy,\n  parseBigIntPolicy,\n  genVersionCheckPolicy,\n  genRetryOnFailurePolicy,\n} from './utils/autorest.js';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node/index.js';\nimport { UnsupportedVersionError } from './utils/errors.js';\nimport { ConsensusProtocolVersion } from './tx/builder/constants.js';\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends NodeApi {\n  readonly #ignoreVersion: boolean;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Print warning instead of throwing exception if node\n   * or consensus protocol version is not supported, use with caution\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false,\n      retryCount = 3,\n      retryOverallDelay = 800,\n      ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    const getVersion = async (opts: OperationOptions): Promise<string> =>\n      (await this._getCachedStatus(opts)).nodeVersion;\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genVersionCheckPolicy('node', getVersion, '7.1.0', '8.0.0', ignoreVersion),\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) =>\n          [' ', body.reason, body.errorCode == null ? '' : ` (${body.errorCode})`].join(''),\n        ),\n      ],\n      ...options,\n    });\n    this.#ignoreVersion = ignoreVersion;\n    this.pipeline.addPolicy(parseBigIntPolicy, { phase: 'Deserialize' });\n    this.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n    // TODO: use instead our retry policy\n    this.pipeline.removePolicy({ name: 'defaultRetryPolicy' });\n  }\n\n  #cachedStatusPromise?: ReturnType<NodeApi['getStatus']>;\n\n  async _getCachedStatus(options?: OperationOptions): ReturnType<NodeApi['getStatus']> {\n    if (this.#cachedStatusPromise != null) return this.#cachedStatusPromise;\n    return this.getStatus(options);\n  }\n\n  override async getStatus(\n    ...args: Parameters<NodeApi['getStatus']>\n  ): ReturnType<NodeApi['getStatus']> {\n    const promise = super.getStatus(...args);\n    promise.then(\n      () => {\n        this.#cachedStatusPromise = promise;\n      },\n      () => {},\n    );\n    return promise;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    return (await this._getCachedStatus()).networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce((acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc), {\n        effectiveAtHeight: -1,\n        version: 0,\n      }).version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number')\n        .map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      const error = new UnsupportedVersionError(\n        'consensus protocol',\n        version,\n        geVersion,\n        ltVersion,\n      );\n      if (this.#ignoreVersion) console.warn(error.message);\n      else throw error;\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder.js';\nimport { buildTx, getSchema, unpackTx } from './builder/index.js';\nimport { Tag } from './builder/constants.js';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors.js';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null)\n    throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder.js';\nimport { buildTx, buildTxHash, unpackTx } from './builder/index.js';\nimport { Tag } from './builder/constants.js';\nimport { verify } from '../utils/crypto.js';\nimport { getBufferToSign } from '../account/Memory.js';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors.js';\nimport Node from '../Node.js';\nimport getTransactionSignerAddress from './transaction-signer.js';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx,\n    gasUsed,\n    queryFee,\n    isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError(\n      \"Transaction shouldn't be a SignedTx, use `getExecutionCostBySignedTx` instead\",\n    );\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    (params.tag === Tag.SpendTx ||\n      params.tag === Tag.ContractCreateTx ||\n      params.tag === Tag.ContractCallTx ||\n      params.tag === Tag.ChannelDepositTx) &&\n    innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx ||\n      params.tag === Tag.ContractCallTx ||\n      params.tag === Tag.GaAttachTx ||\n      params.tag === Tag.GaMetaTx) &&\n    innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false].map((f) =>\n    verify(getBufferToSign(tx, networkId, f), params.signatures[0], address),\n  );\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError(\"Can't verify signature\");\n  return getExecutionCost(buildTx(params.encodedTx), {\n    ...(isInnerTx && { innerTx: 'freeloader' }),\n    ...options,\n  });\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null &&\n    txHash !== false &&\n    [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, isAddressValid, verify } from '../utils/crypto.js';\nimport { TxUnpacked } from './builder/schema.generated.js';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version.js';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants.js';\nimport { buildTx, unpackTx } from './builder/index.js';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other.js';\nimport { Encoded, Encoding, decode } from '../utils/encoder.js';\nimport Node from '../Node.js';\nimport { Account } from '../apis/node/index.js';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest.js';\nimport { UnexpectedTsError } from '../utils/errors.js';\nimport getTransactionSignerAddress from './transaction-signer.js';\nimport { getExecutionCostUsingNode } from './execution-cost.js';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: Account & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  },\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node\n      .getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (\n    await Promise.all(\n      validators.map(async (v) =>\n        v(tx, {\n          node,\n          account,\n          height,\n          consensusProtocolVersion,\n          nodeNetworkId,\n          parentTxTypes,\n        }),\n      ),\n    )\n  ).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const pipeline = nodeNotCached.pipeline.clone();\n  pipeline.removePolicy({ name: 'parse-big-int' });\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline,\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  node._getCachedStatus = async () => nodeNotCached._getCachedStatus();\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from(\n      [nodeNetworkId, ...(parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [])].join('-'),\n    );\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (\n      verify(txWithNetworkId, signatures[0], account.id) ||\n      verify(txHashWithNetworkId, signatures[0], account.id)\n    )\n      return [];\n    return [\n      {\n        message:\n          'Signature cannot be verified, please ensure that you transaction have' +\n          ' the correct prefix and the correct private key for the sender address',\n        key: 'InvalidSignature',\n        checkedKeys: ['encodedTx', 'signatures'],\n      },\n    ];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [\n      {\n        message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n        key: 'ExpiredTTL',\n        checkedKeys: ['ttl'],\n      },\n    ];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [\n      {\n        message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n        key: 'InsufficientBalance',\n        checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n      },\n    ];\n  },\n  async (tx, { node }) => {\n    if (tx.tag !== Tag.SpendTx || isAddressValid(tx.recipientId, Encoding.Name)) return [];\n    const recipient = await node.getAccountByPubkey(tx.recipientId).catch((error) => {\n      if (!isAccountNotFoundError(error)) throw error;\n      return null;\n    });\n    if (recipient == null || recipient.payable === true) return [];\n    return [\n      {\n        message: 'Recipient account is not payable',\n        key: 'RecipientAccountNotPayable',\n        checkedKeys: ['recipientId'],\n      },\n    ];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = \"Generalized account can't be used to generate SignedTx with signatures\";\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = \"Basic account can't be used to generate GaMetaTx\";\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type =\n      (oracleCall ? 'oracle-call' : null) ??\n      (contractCreate ? 'contract-create' : null) ??\n      (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion) ||\n      (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [\n        {\n          message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n          key: 'VmAndAbiVersionMismatch',\n          checkedKeys: ['ctVersion', 'abiVersion'],\n        },\n      ];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [\n        {\n          message: `Contract ${tx.contractId} is not active`,\n          key: 'ContractNotActive',\n          checkedKeys: ['contractId'],\n        },\n      ];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [\n        {\n          message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n          key: 'ContractNotFound',\n          checkedKeys: ['contractId'],\n        },\n      ];\n    }\n  },\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator.js';\nimport { ensureError } from './utils/other.js';\nimport { TransactionError } from './utils/errors.js';\nimport Node from './Node.js';\nimport { SignedTx } from './apis/node/index.js';\nimport { Encoded } from './utils/encoder.js';\nimport AccountBase from './account/Base.js';\nimport { buildTxHash } from './tx/builder/index.js';\nimport { poll, waitForTxConfirm } from './chain.js';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(message: string, validation: ValidatorResult[], transaction: Encoded.Transaction) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode,\n    onAccount,\n    verify = true,\n    waitMined = true,\n    confirm,\n    innerTx,\n    ...options\n  }: SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${validation\n        .map((v: { message: string }) => v.message)\n        .join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      {\n        requestOptions: {\n          customHeaders: {\n            // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n            '__retry-code': '400',\n            ...(__queue != null ? { __queue } : {}),\n          },\n        },\n      },\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] &\n  Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'> &\n  Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<SignedTx> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","import { BigNumber } from 'bignumber.js';\nimport { getBalance, resolveName } from './chain.js';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction.js';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder/index.js';\nimport { ArgumentError } from './utils/errors.js';\nimport { Encoded } from './utils/encoder.js';\nimport { Tag, AensName } from './tx/builder/constants.js';\n\n// TODO: name verify should not overlap with transaction verify\ntype ResolveNameOptions = Omit<Parameters<typeof resolveName>[2], 'onNode' | 'verify'>;\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(recipientIdOrName, 'account_pubkey', options),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<\n  Tag.SpendTx,\n  'senderId' | 'recipientId' | 'amount' | 'onNode'\n> &\n  ResolveNameOptions &\n  SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(recipientIdOrName, 'account_pubkey', options);\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(await getBalance.bind(options.onAccount)(senderId, options));\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<\n  Tag.SpendTx,\n  'senderId' | 'recipientId' | 'amount' | 'onNode'\n> &\n  ResolveNameOptions &\n  SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions\n  extends BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>,\n    SendTransactionOptions {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { Tag, AensName, DRY_RUN_ACCOUNT } from '../tx/builder/constants.js';\nimport {\n  buildContractIdByContractTx,\n  unpackTx,\n  buildTxAsync,\n  BuildTxOptions,\n  buildTxHash,\n} from '../tx/builder/index.js';\nimport { decode, Encoded } from '../utils/encoder.js';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors.js';\nimport { hash as calcHash } from '../utils/crypto.js';\nimport {\n  ContractCallObject as NodeContractCallObject,\n  Event as NodeEvent,\n} from '../apis/node/index.js';\nimport CompilerBase, { Aci } from './compiler/Base.js';\nimport Node from '../Node.js';\nimport { getAccount, getContract, getContractByteCode, resolveName, txDryRun } from '../chain.js';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction.js';\nimport { TxUnpacked } from '../tx/builder/schema.generated.js';\nimport { Optional, isAccountNotFoundError } from '../utils/other.js';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers.js';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends NodeContractCallObject {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase {\n  [key: string]: (...args: any[]) => any;\n}\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]: M[Name] extends (...args: infer Args) => any\n    ? (\n        ...args: [\n          ...Args,\n          ...(\n            | []\n            | [\n                Name extends 'init'\n                  ? Parameters<Contract<M>['$deploy']>[1]\n                  : Parameters<Contract<M>['$call']>[2],\n              ]\n          ),\n        ]\n      ) => ReturnType<Contract<M>['$call']>\n    : never;\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = (keyof M & string) | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> = Fn extends 'init'\n  ? M extends { init: any }\n    ? Parameters<M['init']>\n    : []\n  : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await Contract.initialize({ ...aeSdk.getContext(), sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null)\n      throw new IllegalArgumentError(\"Can't compile without compiler\");\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler.compileBySourceCode(\n        this.$options.sourceCode,\n        this.$options.fileSystem,\n      );\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError(\"Can't compile without sourceCode and sourceCodePath\");\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        if (/Expected \\d+ arguments, got \\d+/.test(message)) {\n          throw new ContractError(\n            `ACI doesn't match called contract. Error provided by node: ${message}`,\n          );\n        }\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...(txData.blockHeight != null &&\n        (await this.$getCallResultByTxHash(txData.hash, fnName, options))),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2] &\n      Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<\n    Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }\n  > {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError(\"Can't deploy without account\");\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null)\n      throw new IllegalArgumentError(\"Can't deploy without bytecode\");\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? (await this._estimateGas('init', params, opt)),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(tx, 'init', {\n      ...opt,\n      onAccount: opt.onAccount,\n    });\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...(other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      }),\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find((f: { name: string }) => f.name === name);\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [],\n        name: 'init',\n        payable: false,\n        returns: 'unit',\n        stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>> &\n      Parameters<Contract<M>['$decodeEvents']>[1] &\n      Optional<SendTransactionOptions, 'onAccount' | 'onNode'> &\n      Omit<Parameters<typeof txDryRun>[2], 'onNode'> & { callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true)\n      throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount =\n        callStatic === true &&\n        ((error instanceof TypeError &&\n          error.message ===\n            'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead') ||\n          error instanceof NoWalletConnectedError ||\n          (error instanceof InternalError && error.message === 'Use fallback account'));\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null)\n          throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt,\n          tag: Tag.ContractCreateTx,\n          code: this.$options.bytecode,\n          ownerId: callerId,\n        });\n      } else {\n        if (contractId == null)\n          throw new MissingContractAddressError(\"Can't dry-run contract without address\");\n        tx = await buildTxAsync({\n          ...txOpt,\n          tag: Tag.ContractCallTx,\n          callerId,\n          contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null)\n      throw new IllegalArgumentError(\"Can't handle `top` option in on-chain contract call\");\n    if (contractId == null)\n      throw new MissingContractAddressError(\"Can't call contract without address\");\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? (await this._estimateGas(fn, params, opt)),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null)\n      throw new IllegalArgumentError(\"Can't call contract on chain without account\");\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) =>\n        events.map((event: {}) => [name, Object.keys(event)[0], Object.values(event)[0]]),\n      )\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0:\n        throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1:\n        return matchedEvents[0][0];\n      default:\n        throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, event.topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, event.topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      })\n      .filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>({\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    address,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n    validateBytecode,\n    ...otherOptions\n  }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n    validateBytecode?: boolean;\n    aci?: Aci;\n    address?: Encoded.ContractAddress | AensName;\n  }): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = (await resolveName(address, 'contract_pubkey', {\n        resolveByNode: true,\n        onNode,\n      })) as Encoded.ContractAddress;\n      if (isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError(\"Can't create instance by ACI without address\");\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null)\n        throw new MissingContractAddressError(\"Can't validate bytecode without contract address\");\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null)\n          throw new IllegalArgumentError(\"Can't validate bytecode without compiler\");\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null)\n          throw new IllegalArgumentError(\"Can't validate bytecode without compiler\");\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError(\n          (sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode',\n        );\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({\n    aci,\n    ...otherOptions\n  }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(\n        `The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`,\n      );\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(\n        this.#aciContract.functions.map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object')\n                throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        }),\n      ),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: (typeof Contract)['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants.js';\nimport {\n  buildContractIdByContractTx,\n  buildTx,\n  buildTxAsync,\n  BuildTxOptions,\n  unpackTx,\n} from '../tx/builder/index.js';\nimport { hash } from '../utils/crypto.js';\nimport { decode, encode, Encoded, Encoding } from '../utils/encoder.js';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors.js';\nimport { concatBuffers } from '../utils/other.js';\nimport Contract from './Contract.js';\nimport Node from '../Node.js';\nimport { getAccount } from '../chain.js';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction.js';\nimport CompilerBase from './compiler/Base.js';\nimport { packEntry } from '../tx/builder/entry/index.js';\nimport { EntryTag } from '../tx/builder/entry/constants.js';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount,\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n    ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<\n  Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>\n> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount,\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? (await contract._estimateGas('init', args, options)),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode,\n    onAccount,\n    onCompiler,\n    ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions\n  extends BuildTxOptions<\n      Tag.GaAttachTx,\n      'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit' | 'onNode'\n    >,\n    SendTransactionOptions,\n    Pick<\n      Parameters<typeof Contract.initialize>[0],\n      'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n    > {\n  onCompiler: CompilerBase;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(\n      decode(\n        packEntry({\n          tag: EntryTag.GaMetaTxAuthData,\n          fee,\n          gasPrice,\n          txHash: encode(payload, Encoding.TxHash),\n        }),\n      ),\n    );\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain.js';\nimport { sendTransaction } from './send-transaction.js';\nimport * as spendMethods from './spend.js';\nimport * as contractGaMethods from './contract/ga.js';\nimport { buildTxAsync } from './tx/builder/index.js';\nimport { mapObject, UnionToIntersection } from './utils/other.js';\nimport { wrapWithProxy } from './utils/wrap-proxy.js';\nimport Node from './Node.js';\nimport { TxParamsAsync } from './tx/builder/schema.generated.js';\nimport AccountBase from './account/Base.js';\nimport { Encoded } from './utils/encoder.js';\nimport CompilerBase from './contract/compiler/Base.js';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...spendMethods,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions<Methods extends { [key: string]: Function }> = {\n  [Name in keyof Methods]: Methods[Name] extends (...args: infer Args) => any\n    ? Args[Decrement<Args['length']>]\n    : never;\n};\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    // TODO: remove `any` at the same time as AeSdk class\n    return buildTxAsync({ ...(this.getContext() as any), ...options });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K;\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n      /**\n       * Make operation on specific account by providing address (to use account from sdk) or instance\n       * of AccountBase (like MemoryAccount)\n       */\n      onAccount: OnAccount;\n    }\n  : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<\n  [Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>]\n>;\n\ntype TransformMethods<Methods extends { [key: string]: Function }> = {\n  [Name in keyof Methods]: Methods[Name] extends (\n    ...args: [...infer Args, infer Options]\n  ) => infer Ret\n    ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n    : never;\n};\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(\n  AeSdkMethods.prototype,\n  mapObject<Function, Function>(methods, ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ]),\n);\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node.js';\nimport AccountBase from './account/Base.js';\nimport {\n  CompilerError,\n  DuplicateNodeError,\n  NodeNotFoundError,\n  NotImplementedError,\n  TypeError,\n} from './utils/errors.js';\nimport { Encoded } from './utils/encoder.js';\nimport { wrapWithProxy } from './utils/wrap-proxy.js';\nimport CompilerBase from './contract/compiler/Base.js';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods.js';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor({\n    nodes = [],\n    ...options\n  }: AeSdkMethodsOptions & {\n    nodes?: Array<{ name: string; instance: Node }>;\n  } = {}) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError(\"You can't use Compiler API. Compiler is not ready!\");\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError(\"You can't use Node API. Node is not connected or not defined!\");\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...(await this.api.getNodeInfo()),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...(await node.getNodeInfo()),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), ' +\n        `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??=\n      this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...(mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      }),\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase.js';\nimport { OnAccount } from './AeSdkMethods.js';\nimport AccountBase from './account/Base.js';\nimport { decode, Encoded } from './utils/encoder.js';\nimport { UnavailableAccountError } from './utils/errors.js';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  /**\n   * @param options - Options\n   */\n  constructor({\n    accounts,\n    ...options\n  }: { accounts?: AccountBase[] } & ConstructorParameters<typeof AeSdkBase>[0] = {}) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema.js';\nimport BrowserConnection from '../connection/Browser.js';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors.js';\nimport { ensureError } from '../../utils/other.js';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>;\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient<\n  RemoteApi extends RpcApi<RemoteApi>,\n  LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = new Map<\n    number,\n    { resolve: (v: any) => void; reject: (e: Error) => void }\n  >();\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...(id != null ? { id } : {}),\n      method,\n      ...(params != null ? { params } : {}),\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...(error != null ? { error: error.toJSON() } : { result }),\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest((this.#messageId += 1), name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { Encoded } from '../../utils/encoder.js';\nimport { Domain, AciValue } from '../../utils/typed-data.js';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema.js';\nimport { SignedTx } from '../../apis/node/index.js';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport type NetworkToSelect = { networkId: string } | { nodeUrl: string };\n\nexport interface WalletApi {\n  [METHODS.connect]: (p: {\n    name: string;\n    icons?: Icons;\n    version: typeof RPC_VERSION;\n    connectNode: boolean;\n  }) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (p: {\n    type: SUBSCRIPTION_TYPES;\n    value: 'connected' | 'current';\n  }) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.unsafeSign]: (p: {\n    data: Encoded.Bytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.sign]: (p: {\n    tx: Encoded.Transaction;\n    onAccount: Encoded.AccountAddress;\n    returnSigned: boolean;\n    /**\n     * @deprecated Wallet provided networkId will be used (current network)\n     * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n     * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n     */\n    networkId: string;\n    innerTx?: boolean;\n  }) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<SignedTx> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>;\n\n  [METHODS.signMessage]: (p: {\n    message: string;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (p: {\n    domain: Domain;\n    aci: AciValue;\n    data: Encoded.ContractBytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (p: {\n    delegation: Encoded.Bytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.updateNetwork]: (a: NetworkToSelect) => Promise<null>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import JsonBig from 'json-bigint';\nimport { BigNumber } from 'bignumber.js';\nimport { mapObject } from './other.js';\n\nconst jsonBig = JsonBig({ storeAsString: true });\n\nconst convertValuesToBigNumbers = (value: any): any => {\n  if (typeof value === 'object' && value !== null && value.constructor === Object) {\n    return mapObject(value, ([k, v]) => [k, convertValuesToBigNumbers(v)]);\n  }\n  if (Array.isArray(value)) {\n    return value.map((item) => convertValuesToBigNumbers(item));\n  }\n  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {\n    const bn = new BigNumber(value);\n    bn.toJSON = () => bn.toString(10);\n    return bn;\n  }\n  return value;\n};\n\nexport default {\n  stringify: (...args: Parameters<(typeof JsonBig)['stringify']>): string =>\n    jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1)),\n  parse: jsonBig.parse,\n};\n","import nacl from 'tweetnacl';\nimport AeSdk from './AeSdk.js';\nimport verifyTransaction from './tx/validator.js';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient.js';\nimport {\n  METHODS,\n  RPC_STATUS,\n  SUBSCRIPTION_TYPES,\n  WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError,\n  RpcPermissionDenyError,\n  RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema.js';\nimport { InternalError, UnknownRpcClientError } from './utils/errors.js';\nimport AccountBase from './account/Base.js';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser.js';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  NetworkToSelect,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types.js';\nimport { Encoded, Encoding, encode, decode } from './utils/encoder.js';\nimport jsonBig from './utils/json-big.js';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string,\n  params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>,\n  origin: string,\n) => void;\n\ntype OnSubscription = (\n  clientId: string,\n  params: Parameters<WalletApi[METHODS.subscribeAddress]>[0],\n  origin: string,\n) => void;\n\ntype OnDisconnect = (\n  clientId: string,\n  params: Parameters<WalletApi[METHODS.closeConnection]>[0],\n) => void;\n\ntype OnAskAccounts = (clientId: string, params: undefined, origin: string) => void;\n\ntype OnAskToSelectNetwork = (clientId: string, params: NetworkToSelect, origin: string) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  onAskToSelectNetwork: OnAskToSelectNetwork;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onAskToSelectNetwork - Call-back function for incoming AEPP select network\n   * request. If the request is fine then this function should change the current network.\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    onAskToSelectNetwork,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n    onAskToSelectNetwork: OnAskToSelectNetwork;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.onAskToSelectNetwork = onAskToSelectNetwork;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _getAccountsForClient({ addressSubscription }: RpcClientsInfo): Accounts {\n    const { current, connected } = this.getAccounts();\n    return {\n      current:\n        addressSubscription.has('current') || addressSubscription.has('connected') ? current : {},\n      connected: addressSubscription.has('connected') ? connected : {},\n    };\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .filter((client) => client.addressSubscription.size !== 0)\n      .forEach((client) =>\n        client.rpc.notify(METHODS.updateAddress, this._getAccountsForClient(client)),\n      );\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...(client.connectNode && this._getNode()),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return (\n      RPC_STATUS.CONNECTED === this._getClient(clientId).status &&\n      this._getClient(clientId).rpc.connection.isConnected()\n    );\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = Buffer.from(nacl.randomBytes(8)).toString('base64');\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({ name, version, icons, connectNode }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...(await this.getWalletInfo()),\n              ...(connectNode && this._getNode()),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                // TODO: remove `type` as it always subscribe\n                await this.onSubscription(id, { type, value }, origin);\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this._getAccountsForClient(client),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            { tx, onAccount = this.address, returnSigned, innerTx },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount,\n              aeppOrigin: origin,\n              aeppRpcClientId: id,\n              innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(\n                jsonBig.stringify({\n                  transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n                }),\n              );\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async (\n            { domain, aci, data, onAccount = this.address },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain,\n              onAccount,\n              aeppOrigin: origin,\n              aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n          [METHODS.unsafeSign]: async ({ data, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = encode(await this.sign(decode(data), parameters), Encoding.Signature);\n            return { signature };\n          },\n          [METHODS.signDelegation]: async ({ delegation, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await this.signDelegation(delegation, parameters);\n            return { signature };\n          },\n          [METHODS.updateNetwork]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskToSelectNetwork(id, params, origin);\n            return null;\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    const { origin } = window.location;\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: origin === 'file://' ? '*' : origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers.js\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters.js\";\nimport * as Mappers from \"./models/mappers.js\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models/index.js\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder.js';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import {\n  RestError,\n  userAgentPolicyName,\n  setClientRequestIdPolicyName,\n} from '@azure/core-rest-pipeline';\nimport { OperationOptions } from '@azure/core-client';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler/index.js';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest.js';\nimport CompilerBase, { Aci, CompileResult } from './Base.js';\nimport { Encoded } from '../../utils/encoder.js';\nimport { CompilerError, NotImplementedError } from '../../utils/errors.js';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Print warning instead of throwing exception if compiler version\n   * is not supported, use with caution\n   */\n  constructor(compilerUrl: string, { ignoreVersion = false }: { ignoreVersion?: boolean } = {}) {\n    super();\n\n    let version: string | undefined;\n    const getVersion = async (opts: OperationOptions): Promise<string> => {\n      if (version != null) return version;\n      version = (await this.api.apiVersion(opts)).apiVersion;\n      return version;\n    };\n\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genVersionCheckPolicy('compiler', getVersion, '8.0.0', '9.0.0', ignoreVersion),\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason}${\n              body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map(\n                (e) =>\n                  `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`,\n              )\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    this.api.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.api.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(value, (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v), 2);\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=429c3b06\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=86ac1354&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\nimport \"./App.vue?vue&type=style&index=1&id=86ac1354&lang=scss&scoped=true\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-86ac1354\"]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwallet_iframe\"] = self[\"webpackChunkwallet_iframe\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(10286); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["class","_createElementBlock","_Fragment","_createElementVNode","id","type","_createTextVNode","for","_hoisted_1","novalidate","onSubmit","_cache","_withModifiers","args","$options","navigate","$event","_ctx","nextAeppUrl","onFocus","target","select","_toDisplayString","address","nodeName","_createVNode","_component_Value","value","balancePromise","clientStatus","clientId","onClick","switchAccount","switchNode","key","disconnect","stopSharingWalletInfo","shareWalletInfo","runningInFrame","_createCommentVNode","ref","src","aeppUrl","_hoisted_2","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","TxTimedOutError","blocks","th","TypeError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","UnknownRpcClientError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","join","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","connect","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcNoNetworkById","networkId","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","_classPrivateFieldSet","listener","_message$data$jsonrpc","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","AccountBase","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","AccountSecretKey","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","encode","decode","string","base58","bs58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","isAddressValid","maybeEncoded","encodings","encoding","hash","blake2b","verify","signature","nacl","detached","messagePrefix","messagePrefixLength","varuintEncode","messageToHash","hashJson","_canonicalize","canonicalize","hashDomain","domain","domainAci","record","option","domainType","TypeResolver","resolveType","fateValue","ContractByteArrayEncoder","encodeWithType","hashTypedData","aci","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","ProtocolToVmAbi","Ceres","vmVersion","Fate3","abiVersion","Fate","NoAbi","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","Fate2","serialize","params","consensusProtocolVersion","_value","prepare","keys","onNode","getNodeInfo","vm","abi","_getProtocolDetails","c","kind","ContractCallTx","GaMetaTx","result","toBytes","val","big","Number","isInteger","isBigNumber","toFixed","hexString","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","at","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","uInt","serializeAettos","genEncodedField","optional","encodedData","genEntryField","txParams","packEntry","ArrayBuffer","isView","startsWith","unpackEntry","genEnumerationField","enm","values","filter","v","gasPriceCache","getCachedIncreasedGasPrice","node","cache","get","time","Date","now","gasPrice","minGasPrice","utilization","getRecentGasPrices","BigInt","integerValue","maxSafeGasPrice","warn","set","coinAmount","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ContractCreateTx","GaAttachTx","PayingForTx","factor","TX_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","ceil","floor","getOracleRelativeTtl","ttlKeys","buildGas","builtTx","unpackTx","buildTx","txObject","tx","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","gasPricePrefix","_computingMinFee","_canIncreaseFee","minFee","dividedBy","replace","gt","calculateGasLimitMax","gasMax","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","field","txFields","parameters","addressName","genNonceField","senderKey","strategy","senderId","getAccountNextNonce","catch","nextNonce","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","addressAny","allowRaw","pointers","bKey","bId","oracleId","getOracleByPubkey","queryFee","genShortUIntConstField","constValue","constValueOptional","genTransactionField","wrapWithProxy","valueCb","Proxy","res","Reflect","bind","unwrapProxy","_wrappedValue","_getPollInterval","_expectedMineRate","_microBlockCycle","_ref","_await$getVal","getVal","devModeDef","def","getNetworkId","base","heightCache","getHeight","cached","height","getCurrentKeyBlockHeight","poll","interval","_interval","max","getTransactionByHash","blockHeight","ttl","awaitHeight","_interval2","currentHeight","waitForTxConfirm","confirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","getBalance","format","addr","balance","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","Map","txDryRunHandler","rs","delete","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accounts","Array","Set","accountAddress","pubKey","forEach","reject","results","reason","resultPayload","idx","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","pointer","p","absoluteTtl","_isInternalBuild","withDefault","defaultValue","withFormatting","CallReturnType","EntryTag","ORACLE_TTL_TYPES","transactionAny","transactionSignedTx","SignedTx","entryTreesPoi","entry","TreesPoi","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","signatures","raw","SpendTx","recipientId","encoded","NamePreclaimTx","accountId","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","NameTransferTx","NameRevokeTx","ctVersion","deposit","callData","callerId","queryFormat","responseFormat","oracleTtlType","delta","enumeration","oracleTtlValue","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","ChannelSnapshotSoloTx","authFun","gaId","authData","payerId","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","binary","rlpEncode","unpackRecord","encodedRecord","expectedTag","rlpDecode","index","genMapField","Mtree","MtreeValue","recursiveType","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackEntry","_MPTree_brand","WeakSet","MPTree","isComplete","unpEnt","_classPrivateMethodInitSpec","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","d","_assertClassBrand","_getRaw","toObject","_entriesRaw","k","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","entryMtreeValueArray","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","flags","gaContract","gaAuthFun","status","owner","active","boolean","referers","callerNonce","gasUsed","returnValue","returnType","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelOffChainUpdateTransfer","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","contract","callStack","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","GaMetaTxAuthData","encodingTag","_encodingTag$find$","_expectedTag","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","getBufferToSign","innerTx","prefixes","rlpBinaryTx","_secretKeyDecoded","AccountMemory","secretKey","keyPair","fromSeed","publicKey","generate","sign","signTransaction","txWithNetworkId","signMessage","signTypedData","dHash","signDelegation","delegation","DelegationTag","oracleAddressField","queryIdField","AensWildcard","AensName","AensPreclaim","unpackDelegation","verCmp","a","b","getComponents","i","aComponents","bComponents","componentsToNumber","components","reverse","reduce","acc","semverSatisfies","bigIntPrefix","createSerializer","serializer","createSerializerOrig","mapper","objectName","_objectName","serializedName","responseBody","MAX_SAFE_INTEGER","safeLength","bigIntPropertyRe","RegExp","String","bigIntArrayItemRe","parseBigIntPolicy","sendRequest","request","next","bodyAsText","replaceAll","matched","match","end","genRequestQueuesPolicy","requestQueues","policy","_requestQueues$get","headers","getResponse","then","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","method","JSON","stringify","url","body","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","parsedBody","genVersionCheckPolicy","versionCb","ignoreVersion","has","requestOptions","customHeaders","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","NaN","statusesToNotRetry","intervals","fill","_","intervalSum","intervalsInMs","e","attempt","urlParsed","searchParams","_e$response$status","className","modelProperties","required","constraints","InclusiveMinimum","InclusiveMaximum","payable","allowedValues","ErrorModel","errorCode","NextNonceResponse","SignedTxs","element","blockHash","Tx","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","Delegates","OffChainUpdate","uberParent","polymorphicDiscriminator","clientName","op","RelativeTTL","isConstant","Ttl","NamePointer","encodedKey","AuctionEntry","startedAt","endsAt","highestBidder","highestBid","ContractObject","referrerIds","ByteCode","bytecode","PoI","Currency","symbol","subunit","subunitsPerUnit","fiatConverstionUrl","fiatConversionUrl","logo","primaryColour","secondaryColour","networkName","Image","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","Event","topics","Generation","keyBlock","microBlocks","KeyBlock","prevHash","prevKeyHash","miner","beneficiary","pow","MinItems","MaxItems","info","Header","pofHash","txsHash","PinningTx","epoch","parentPayload","lastLeader","parentType","parentNetworkId","HCContractPubkeys","staking","election","rewards","HashResponse","HeightResponse","MicroBlockHeader","CountResponse","count","NameEntry","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","PeerPubKey","pubkey","GasPricesItem","minutes","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","uptime","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","SyncStatus","progress","speed","estimate","EncodedTx","PostTxResponse","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","ChannelSetDelegatesTx","CheckTxInPoolResponse","CommitmentId","UnsignedTx","GAAttachTx","GAMetaTx","NameHash","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","OracleRespondTx","PeerCount","connected","available","blocked","PeerCountConnected","PeerCountAvailable","verified","unverified","Peers","peers","PubKey","TokenSupply","contractOracles","locked","pendingRewards","total","OffChainCallContract","OffChainDeposit","OffChainNewContract","OffChainTransfer","OffChainWithdrawal","CreateContractUnsignedTx","discriminators","accept","parameterPath","$host","skipEncoding","contentType","DryRunInputMapper","nameHash","fromParam","limit","typeParam","body1","EncodedTxMapper","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","sendOperationRequest","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHashOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountNextNonceOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAuctionEntryByName","getAuctionEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getCurrency","getCurrencyOperationSpec","protectedDryRunTxsOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getTopHeader","getTopHeaderOperationSpec","getPinningTx","getPinningTxOperationSpec","getHyperchainContractPubkeys","getHyperchainContractPubkeysOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getNameEntryByNameOperationSpec","getNameEntryByNameHash","getNameEntryByNameHashOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getRecentGasPricesOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","getSyncStatus","getSyncStatusOperationSpec","postTransaction","postTransactionOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","Mappers","httpMethod","responses","bodyMapper","isError","urlParameters","Parameters","headerParameters","queryParameters","requestBody","mediaType","_ignoreVersion","_cachedStatusPromise","NodeApi","getVersion","_getCachedStatus","opts","allowInsecureConnection","additionalPolicies","pipeline","addPolicy","phase","removePolicy","userAgentPolicyName","setClientRequestIdPolicyName","promise","nodeNetworkId","versions","getTransactionSignerAddress","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","recipient","_ref2","oracleCall","contractCreate","contractCall","parse","InvalidTxError","validation","sendTransaction","txUnsigned","onAccount","waitMined","__queue","pollResult","txData","confirmationHeight","verifyTx","spend","recipientIdOrName","transferFunds","fraction","desiredAmount","ROUND_HALF_UP","plus","minus","payForTransaction","_Contract_brand","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","compile","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult","_estimateGas","$call","callStatic","$deploy","_opt$gasLimit","opt","_calldata","_name","_sendAndProcess","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent","decoded","decodeEvent","initialize","validateBytecode","otherOptions","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","Calldata","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","contractAddressToName","addressToName","variant","eventName","calcHash","arr","some","createGeneralizedAccount","authFnName","_options$gasLimit","freeze","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","methods","chainMethods","spendMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","getContext","mergeWith","prototype","handler","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","compilerApi","_resolveAccount","ensureNodeConnected","pool","selectedNodeName","selectNode","isNodeConnected","getNodesInPool","addresses","_options$networkId","AeSdk","addAccount","selectedAddress","selectAccount","removeAccount","_callbacks","_messageId","_methods","_RpcClient_brand","RpcClient","connection","_handleMessage","_sendRequest","notify","_processResponse","methodName","_sendResponse","callbacks","RPC_VERSION","jsonBig","JsonBig","storeAsString","convertValuesToBigNumbers","isArray","bn","AeSdkWallet","onConnection","onSubscription","onAskAccounts","onAskToSelectNetwork","_type","_getAccountsForClient","addressSubscription","current","getAccounts","_pushAccountsToApps","_clients","_isRpcClientConnected","_getClient","client","size","rpc","updateAddress","_getNode","updateNetwork","connectNode","CONNECTED","_disconnectRpcClient","DISCONNECTED","removeRpcClient","addRpcClient","clientConnection","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","icons","getWalletInfo","subscribeAddress","subscribe","add","unsubscribe","subscription","returnSigned","aeppOrigin","aeppRpcClientId","signedTransaction","transactionHash","unsafeSign","readyToConnect","location","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","cmpOut","warning","generateAciBySourceCode","generateAci","_normalizeClass","text","props","default","watch","valueToString","immediate","__exports__","Value","process","parent","$nextTick","attempts","$refs","aepp","contentWindow","aeSdk","intervalId","setInterval","clearInterval","names","updateClientStatus","mounted","aeppInfo","genConfirmCallback","actionName","aeppId","AccountMemoryProtected","MemoryAccount","unpackedTx","dataType","decodedData","decodeWithType","nodeUrl","$watch","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}