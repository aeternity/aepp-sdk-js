{"version":3,"file":"js/app.09bec376.js","mappings":"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","sources":["webpack://wallet-iframe/./src/App.vue","webpack://wallet-iframe/../../src/utils/errors.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://wallet-iframe/../../src/aepp-wallet-communication/schema.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://wallet-iframe/../../src/account/Base.ts","webpack://wallet-iframe/../../src/utils/other.ts","webpack://wallet-iframe/../../src/utils/encoder-types.ts","webpack://wallet-iframe/../../src/utils/encoder.ts","webpack://wallet-iframe/../../src/utils/crypto.ts","webpack://wallet-iframe/../../src/utils/typed-data.ts","webpack://wallet-iframe/../../../src/tx/builder/constants.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ct-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/abi-version.ts","webpack://wallet-iframe/../../src/utils/bytes.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/address.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/array.ts","webpack://wallet-iframe/../../../src/tx/builder/helpers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/u-int.ts","webpack://wallet-iframe/../../src/utils/bignumber.ts","webpack://wallet-iframe/../../src/utils/amount-formatter.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/encoded.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/entry.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/enumeration.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-price.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/field.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-id.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/nonce.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/query-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/raw.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/string.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/transaction.ts","webpack://wallet-iframe/../../src/utils/wrap-proxy.ts","webpack://wallet-iframe/../src/chain.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ttl.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-default.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/constants.ts","webpack://wallet-iframe/../../../src/tx/builder/schema.ts","webpack://wallet-iframe/../../../src/tx/builder/common.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/boolean.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/map.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/mptree.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/wrapped.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/index.ts","webpack://wallet-iframe/../../../src/tx/builder/index.ts","webpack://wallet-iframe/../../src/account/Memory.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/index.ts","webpack://wallet-iframe/../../src/utils/semver-satisfies.ts","webpack://wallet-iframe/../../src/utils/autorest.ts","webpack://wallet-iframe/../../../../src/apis/node/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/node/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/node/node.ts","webpack://wallet-iframe/../src/Node.ts","webpack://wallet-iframe/../../src/tx/transaction-signer.ts","webpack://wallet-iframe/../../src/tx/execution-cost.ts","webpack://wallet-iframe/../../src/tx/validator.ts","webpack://wallet-iframe/../src/send-transaction.ts","webpack://wallet-iframe/../src/spend.ts","webpack://wallet-iframe/../../src/contract/Contract.ts","webpack://wallet-iframe/../../src/contract/ga.ts","webpack://wallet-iframe/../src/AeSdkMethods.ts","webpack://wallet-iframe/../src/AeSdkBase.ts","webpack://wallet-iframe/../src/AeSdk.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://wallet-iframe/../../src/utils/json-big.ts","webpack://wallet-iframe/../src/AeSdkWallet.ts","webpack://wallet-iframe/./src/Value.vue","webpack://wallet-iframe/./src/Value.vue?2a90","webpack://wallet-iframe/./src/App.vue?7ccd","webpack://wallet-iframe/./src/main.js","webpack://wallet-iframe/webpack/bootstrap","webpack://wallet-iframe/webpack/runtime/chunk loaded","webpack://wallet-iframe/webpack/runtime/define property getters","webpack://wallet-iframe/webpack/runtime/global","webpack://wallet-iframe/webpack/runtime/hasOwnProperty shorthand","webpack://wallet-iframe/webpack/runtime/make namespace object","webpack://wallet-iframe/webpack/runtime/jsonp chunk loading","webpack://wallet-iframe/webpack/startup"],"sourcesContent":["<template>\n  <input id=\"toggle-aepp\" type=\"checkbox\" />\n  <h2>\n    Wallet Iframe\n    <label for=\"toggle-aepp\" />\n  </h2>\n\n  <div class=\"group\">\n    <div>\n      <div>Aepp URL</div>\n      <form novalidate @submit.prevent=\"navigate\">\n        <input type=\"url\" v-model=\"nextAeppUrl\" @focus=\"$event.target.select()\" />\n      </form>\n    </div>\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Node</div>\n      <div>{{ nodeName }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>RPC client</div>\n      <div>status: {{ clientStatus ?? 'no client' }}, id: {{ clientId ?? 'not defined' }}</div>\n    </div>\n\n    <button @click=\"switchAccount\">Switch Account</button>\n    <button @click=\"switchNode\">Switch Node</button>\n\n    <button v-if=\"clientStatus === 'CONNECTED'\" @click=\"disconnect\">Disconnect</button>\n    <button v-else @click=\"() => (stopSharingWalletInfo ?? shareWalletInfo)()\">\n      {{ stopSharingWalletInfo ? 'Stop sharing' : 'Share wallet info' }}\n    </button>\n  </div>\n\n  <iframe v-if=\"!runningInFrame\" ref=\"aepp\" :src=\"aeppUrl\" />\n</template>\n\n<script>\nimport {\n  MemoryAccount,\n  AeSdkWallet,\n  Node,\n  BrowserWindowMessageConnection,\n  METHODS,\n  WALLET_TYPE,\n  RPC_STATUS,\n  RpcConnectionDenyError,\n  RpcRejectedByUserError,\n  RpcNoNetworkById,\n  unpackTx,\n  unpackDelegation,\n} from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    nextAeppUrl: process.env.VUE_APP_AEPP_URL ?? `http://${location.hostname}:9001`,\n    aeppUrl: '',\n    runningInFrame: window.parent !== window,\n    nodeName: '',\n    address: '',\n    balancePromise: null,\n    clientId: null,\n    clientStatus: null,\n    stopSharingWalletInfo: null,\n  }),\n  methods: {\n    navigate() {\n      if (!/^https?:\\/\\//.test(this.nextAeppUrl) && !this.nextAeppUrl.startsWith('.')) {\n        this.nextAeppUrl = 'http://' + this.nextAeppUrl;\n      }\n      this.aeppUrl = '';\n      this.$nextTick(() => {\n        this.aeppUrl = this.nextAeppUrl;\n      });\n    },\n    shareWalletInfo({ interval = 5000, attempts = 5 } = {}) {\n      const target = this.runningInFrame ? window.parent : this.$refs.aepp.contentWindow;\n      const connection = new BrowserWindowMessageConnection({ target });\n      this.clientId = this.aeSdk.addRpcClient(connection);\n\n      this.aeSdk.shareWalletInfo(this.clientId);\n      const intervalId = setInterval(() => {\n        this.aeSdk.shareWalletInfo(this.clientId);\n        attempts -= 1;\n        if (!attempts) return this.stopSharingWalletInfo();\n      }, interval);\n\n      this.stopSharingWalletInfo = () => {\n        clearInterval(intervalId);\n        // TODO: replace with clientStatus\n        const client = this.aeSdk._getClient(this.clientId);\n        if (client.status === RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST) {\n          this.aeSdk.removeRpcClient(this.clientId);\n        }\n        this.stopSharingWalletInfo = null;\n      };\n    },\n    disconnect() {\n      // TODO: move to removeRpcClient (would be a semi-breaking change)\n      const client = this.aeSdk._getClient(this.clientId);\n      if (client.status === RPC_STATUS.CONNECTED) {\n        client.rpc.notify(METHODS.closeConnection, null);\n      }\n\n      this.aeSdk.removeRpcClient(this.clientId);\n      this.clientId = null;\n    },\n    async switchAccount() {\n      this.address = this.aeSdk.addresses().find((a) => a !== this.address);\n      this.aeSdk.selectAccount(this.address);\n    },\n    async switchNode() {\n      const names = (await this.aeSdk.getNodesInPool()).map(({ name }) => name);\n      this.nodeName = names[(names.indexOf(this.nodeName) + 1) % names.length];\n      this.aeSdk.selectNode(this.nodeName);\n    },\n    updateClientStatus() {\n      if (!this.clientId) {\n        this.clientStatus = null;\n        return;\n      }\n      const client = this.aeSdk._getClient(this.clientId);\n      this.clientStatus = client.status;\n    },\n  },\n  mounted() {\n    this.navigate();\n\n    const aeppInfo = {};\n    const genConfirmCallback = (actionName) => (aeppId, parameters, origin) => {\n      if (\n        !confirm(\n          `Client ${aeppInfo[aeppId].name} with id ${aeppId} at ${origin} want to ${actionName}` +\n            Value.methods.valueToString(parameters),\n        )\n      ) {\n        throw new RpcRejectedByUserError();\n      }\n    };\n\n    class AccountMemoryProtected extends MemoryAccount {\n      async signTransaction(tx, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          const opt = { ...options, unpackedTx: unpackTx(tx) };\n          if (opt.onCompiler) opt.onCompiler = '<Compiler>';\n          if (opt.onNode) opt.onNode = '<Node>';\n          genConfirmCallback(`sign transaction ${tx}`)(id, opt, aeppOrigin);\n        }\n        return super.signTransaction(tx, options);\n      }\n\n      async signMessage(message, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign message ${message}`)(id, options, aeppOrigin);\n        }\n        return super.signMessage(message, options);\n      }\n\n      async signTypedData(data, aci, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const dataType = new TypeResolver().resolveType(aci);\n          const decodedData = new ContractByteArrayEncoder().decodeWithType(data, dataType);\n          const opt = { ...options, aci, decodedData };\n          genConfirmCallback(`sign typed data ${data}`)(id, opt, aeppOrigin);\n        }\n        return super.signTypedData(data, aci, options);\n      }\n\n      async unsafeSign(data, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign raw data ${data}`)(id, options, aeppOrigin);\n        }\n        return super.unsafeSign(data, options);\n      }\n\n      async signDelegation(delegation, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const opt = { ...options, ...unpackDelegation(delegation) };\n          genConfirmCallback('sign delegation')(id, opt, aeppOrigin);\n        }\n        return super.signDelegation(delegation, options);\n      }\n\n      static generate() {\n        return new AccountMemoryProtected(super.generate().secretKey);\n      }\n    }\n\n    this.aeSdk = new AeSdkWallet({\n      id: window.origin,\n      type: WALLET_TYPE.window,\n      nodes: [\n        { name: 'ae_uat', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'ae_mainnet', instance: new Node('https://mainnet.aeternity.io') },\n      ],\n      accounts: [\n        new AccountMemoryProtected('sk_2CuofqWZHrABCrM7GY95YSQn8PyFvKQadnvFnpwhjUnDCFAWmf'),\n        AccountMemoryProtected.generate(),\n      ],\n      name: 'Wallet Iframe',\n      onConnection: (aeppId, params, origin) => {\n        if (!confirm(`Client ${params.name} with id ${aeppId} at ${origin} want to connect`)) {\n          throw new RpcConnectionDenyError();\n        }\n        aeppInfo[aeppId] = params;\n        setTimeout(() => this.stopSharingWalletInfo());\n      },\n      onSubscription: genConfirmCallback('subscription'),\n      onAskAccounts: genConfirmCallback('get accounts'),\n      onDisconnect: (clientId) => {\n        console.log('disconnected client', clientId);\n        this.clientId = null;\n      },\n      onAskToSelectNetwork: async (aeppId, parameters, origin) => {\n        await genConfirmCallback('select network')(aeppId, parameters, origin);\n        if (parameters.networkId) {\n          if (!this.aeSdk.pool.has(parameters.networkId)) {\n            throw new RpcNoNetworkById(parameters.networkId);\n          }\n          await this.aeSdk.selectNode(parameters.networkId);\n          this.nodeName = parameters.networkId;\n        } else {\n          this.aeSdk.pool.delete('by-aepp');\n          this.aeSdk.addNode('by-aepp', new Node(parameters.nodeUrl));\n          await this.aeSdk.selectNode('by-aepp');\n          this.nodeName = 'by-aepp';\n        }\n      },\n    });\n\n    if (this.runningInFrame) this.shareWalletInfo();\n\n    this.nodeName = this.aeSdk.selectedNodeName;\n    [this.address] = this.aeSdk.addresses();\n\n    this.$watch(\n      ({ address, nodeName }) => [address, nodeName],\n      ([address]) => {\n        this.balancePromise = this.aeSdk.getBalance(address);\n      },\n      { immediate: true },\n    );\n\n    // TODO: replace setInterval with subscription after refactoring\n    setInterval(() => this.updateClientStatus(), 1000);\n    this.$watch(\n      ({ clientId }) => [clientId],\n      () => this.updateClientStatus(),\n      { immediate: true },\n    );\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n\n<style lang=\"scss\" scoped>\ninput[id='toggle-aepp'] {\n  display: none;\n}\n\nlabel[for='toggle-aepp']::after {\n  font-size: initial;\n  font-weight: initial;\n  text-decoration: underline dotted;\n  cursor: pointer;\n}\n\n@media (max-width: 450px), (max-height: 650px) {\n  input[id='toggle-aepp'] {\n    &:checked ~ {\n      h2 label[for='toggle-aepp']::after {\n        content: 'Hide aepp';\n      }\n\n      .group {\n        display: none;\n      }\n    }\n\n    &:not(:checked) ~ {\n      h2 label[for='toggle-aepp']::after {\n        content: 'Show aepp';\n      }\n\n      iframe {\n        display: none;\n      }\n    }\n  }\n}\n</style>\n","// eslint-disable-next-line max-classes-per-file\nimport { BigNumber } from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants.js';\nimport * as Encoded from './encoder-types.js';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super(`Giving up after ${blocks} blocks mined, transaction hash: ${th}`);\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion?: string) {\n    super(\n      `Unsupported ${dependency} version ${version}. Supported: >= ${geVersion}` +\n        (ltVersion == null ? '' : ` < ${ltVersion}`),\n    );\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(\n      `the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`,\n    );\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode' | 'ACI', details: string = '') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain` + details);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. ` +\n        'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}` +\n        ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by` +\n        ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts` +\n        ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors.js';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected())\n      throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder.js';\nimport { BaseError, InternalError } from '../utils/errors.js';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  unsafeSign = 'data.unsafeSign',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcNoNetworkById extends RpcError {\n  static override code = 13;\n\n  override code = 13;\n\n  constructor(networkId: string) {\n    super(`Wallet can't find a network by id \"${networkId}\"`);\n    this.data = networkId;\n    this.name = 'RpcNoNetworkById';\n  }\n}\nrpcErrors.push(RpcNoNetworkById);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser.js';\nimport { MESSAGE_DIRECTION } from '../schema.js';\nimport { InternalError, RpcConnectionError } from '../../utils/errors.js';\n\nexport type ImplPostMessage = Pick<\n  Window,\n  'addEventListener' | 'removeEventListener' | 'postMessage'\n>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object' ||\n        (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      )\n        return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError(\"Can't send messages without target\");\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import { Encoded } from '../utils/encoder.js';\nimport Node from '../Node.js';\nimport CompilerBase from '../contract/compiler/Base.js';\nimport { Int } from '../tx/builder/constants.js';\nimport { AciValue, Domain } from '../utils/typed-data.js';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   * @deprecated Use `unsafeSign` method instead\n   */\n  abstract sign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract unsafeSign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signDelegation(\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> =>\n  new Promise((resolve) => {\n    setTimeout(resolve, duration);\n  });\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV],\n    index: number,\n    array: Array<[string, InputV]>,\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer =>\n      Buffer.concat(\n        list.map((el) => Buffer.from(el)),\n        totalLength,\n      )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return (\n    error instanceof RestError &&\n    error.statusCode === 404 &&\n    error.message.includes('Account not found')\n  );\n}\n\n// based on https://stackoverflow.com/a/50375286\nexport type UnionToIntersection<Union> = (Union extends any ? (k: Union) => void : never) extends (\n  k: infer Intersection,\n) => void\n  ? Intersection\n  : never;\n\n// based on https://stackoverflow.com/a/61108377\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  AccountSecretKey = 'sk',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type AccountSecretKey = `${Encoding.AccountSecretKey}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import bs58 from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport { DecodeError, ArgumentError, InvalidChecksumError, PayloadLengthError } from './errors.js';\nimport { concatBuffers, isKeyOfObject } from './other.js';\nimport * as Encoded from './encoder-types.js';\nimport { Encoding } from './encoder-types.js';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.AccountSecretKey,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.AccountSecretKey]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58.encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58.decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError(\n    'prefix',\n    `one of ${[...base58Types, ...base64Types].join(', ')}`,\n    maybeType,\n  );\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(data: Uint8Array, type: Type): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import nacl from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\n\nimport { concatBuffers, isItemOfArray } from './other.js';\nimport { decode, encode, Encoded, Encoding } from './encoder.js';\nimport { ArgumentError } from './errors.js';\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nexport function encodeVarUInt(value: number): Buffer {\n  if (value < 0xfd) {\n    return Buffer.from([value]);\n  }\n  if (value <= 0xffff) {\n    return concatBuffers([Buffer.from([0xfd]), Buffer.from(new Uint16Array([value]).buffer)]);\n  }\n  if (value <= 0xffffffff) {\n    return concatBuffers([Buffer.from([0xfe]), Buffer.from(new Uint32Array([value]).buffer)]);\n  }\n  return concatBuffers([\n    Buffer.from([0xff]),\n    Buffer.from(new BigUint64Array([BigInt(value)]).buffer),\n  ]);\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = encodeVarUInt(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, encodeVarUInt(msg.length), msg]));\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder.js';\nimport { hash, messagePrefixLength } from './crypto.js';\nimport { concatBuffers } from './other.js';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue =\n  | 'void'\n  | 'unit'\n  | 'int'\n  | 'bool'\n  | 'string'\n  | 'bits'\n  | 'hash'\n  | 'signature'\n  | 'address'\n  | 'contract_pubkey'\n  | 'Chain.ttl'\n  | 'Chain.ga_meta_tx'\n  | 'Chain.paying_for_tx'\n  | 'Chain.base_tx'\n  | 'AENS.pointee'\n  | 'AENS.name'\n  | 'MCL_BLS12_381.fr'\n  | 'MCL_BLS12_381.fp'\n  | { 'Set.set': readonly [AciValue] }\n  | { bytes: number }\n  | { list: readonly [AciValue] }\n  | { map: readonly [AciValue, AciValue] }\n  | { tuple: readonly AciValue[] }\n  | { record: ReadonlyArray<{ name: string; type: AciValue }> }\n  | { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n  | { option: readonly [AciValue] }\n  | { oracle: readonly [AciValue, AciValue] }\n  | { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [\n      {\n        name: 'name',\n        type: { option: ['string'] },\n      },\n      {\n        name: 'version',\n        type: { option: ['int'] },\n      },\n      {\n        name: 'networkId',\n        type: { option: ['string'] },\n      },\n      {\n        name: 'contractAddress',\n        type: { option: ['contract_pubkey'] },\n      },\n    ],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(\n    concatBuffers([\n      messagePrefixLength,\n      new Uint8Array([0]),\n      hashDomain(domain),\n      hashJson(aci),\n      hash(decode(data)),\n    ]),\n  );\n}\n","import { BigNumber } from 'bignumber.js';\nimport { mapObject } from '../../utils/other.js';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9; // TODO: don't use number for ae\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject(\n  {\n    31: 3,\n    30: 5,\n    29: 8,\n    28: 13,\n    27: 21,\n    26: 34,\n    25: 55,\n    24: 89,\n    23: 144,\n    22: 233,\n    21: 377,\n    20: 610,\n    19: 987,\n    18: 1597,\n    17: 2584,\n    16: 4181,\n    15: 6765,\n    14: 10946,\n    13: 17711,\n    12: 28657,\n    11: 46368,\n    10: 75025,\n    9: 121393,\n    8: 196418,\n    7: 317811,\n    6: 514229,\n    5: 832040,\n    4: 1346269,\n    3: 2178309,\n    2: 3524578,\n    1: 5702887,\n  },\n  ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)],\n);\n\nexport enum ConsensusProtocolVersion {\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  SignedTx = 11,\n  SpendTx = 12,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  /**\n   * @deprecated use `OracleRespondTx` instead\n   */\n  OracleResponseTx = 24,\n  // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values\n  OracleRespondTx = 24,\n  OracleExtendTx = 25,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelSnapshotSoloTx = 59,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants.js';\nimport Node from '../../../Node.js';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3],\n      abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [],\n      abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [],\n      abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    {\n      consensusProtocolVersion = ConsensusProtocolVersion.Ceres,\n    }: { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants.js';\nimport { getProtocolDetails } from './ct-version.js';\nimport Node from '../../../Node.js';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind =\n      Tag.ContractCallTx === tag || Tag.GaMetaTx === tag ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    {\n      consensusProtocolVersion = ConsensusProtocolVersion.Ceres,\n    }: { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors.js';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors.js';\nimport { toBytes } from '../../../utils/bytes.js';\nimport { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { isItemOfArray } from '../../../utils/other.js';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = (typeof idTagToEncoding)[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n  serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n  deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n} {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(itemHandler: {\n  serialize: (value: Input, params: unknown) => Binary;\n  deserialize: (value: Binary, params: unknown) => Output;\n}): {\n  serialize: (value: readonly Input[], params: unknown) => Binary[];\n  deserialize: (value: Binary[], params: unknown) => Output[];\n} {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { BigNumber } from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto.js';\nimport { decode, encode, Encoded, Encoding } from '../../utils/encoder.js';\nimport { toBytes } from '../../utils/bytes.js';\nimport { concatBuffers } from '../../utils/other.js';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants.js';\nimport { ceil } from '../../utils/bignumber.js';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors.js';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]));\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  if (name[2] === '-' && name[3] === '-') {\n    throw new ArgumentError(\n      'aens name',\n      'without \"-\" char in both the third and fourth positions',\n      maybeName,\n    );\n  }\n  if (name[0] === '-') {\n    throw new ArgumentError('aens name', 'starting with no \"-\" char', maybeName);\n  }\n  if (name.at(-1) === '-') {\n    throw new ArgumentError('aens name', 'ending with no \"-\" char', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(name: AensName, salt: number = genSalt()): Encoded.Commitment {\n  return encode(\n    hash(\n      concatBuffers([\n        Buffer.from(nameToPunycode(name)),\n        Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n      ]),\n    ),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<(typeof encodingToPointerKey)[number][0]>,\n): (typeof encodingToPointerKey)[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  {\n    startFee,\n    increment = NAME_FEE_BID_INCREMENT,\n  }: { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0))\n    throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT)\n    throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name)).times(\n      new BigNumber(NAME_FEE_BID_INCREMENT).plus(1),\n    ),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h =\n    (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null) ??\n    (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null) ??\n    (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null) ??\n    0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers.js';\nimport { Int } from '../constants.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { toBytes } from '../../../utils/bytes.js';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport { BigNumber } from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return (\n    ['number', 'object', 'string'].includes(typeof number) &&\n    // eslint-disable-next-line no-restricted-globals\n    (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number))\n  );\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber =>\n  bigNumber.integerValue(BigNumber.ROUND_CEIL);\n","import { BigNumber } from 'bignumber.js';\nimport { isBigNumber } from './bignumber.js';\nimport { ArgumentError } from './errors.js';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  {\n    denomination = AE_AMOUNT_FORMATS.AETTOS,\n    targetDenomination = AE_AMOUNT_FORMATS.AETTOS,\n  }: { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix =>\n  prefixes.reduce((p, n) =>\n    Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p,\n  );\n\nconst getLowerBoundPrefix = (exponent: number): Prefix =>\n  prefixes.find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int.js';\nimport { Int } from '../constants.js';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter.js';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { ArgumentError } from '../../../utils/errors.js';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n  serialize: Optional extends true\n    ? (value?: Encoded.Generic<E>) => Buffer\n    : (value: Encoded.Generic<E>) => Buffer;\n  deserialize: (value: Buffer) => Encoded.Generic<E>;\n} {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { EntryTag } from '../entry/constants.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\nexport default function genEntryField<T extends EntryTag = EntryTag>(\n  tag?: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { packEntry }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(packEntry({ ...txParams, ...(tag != null && { tag }) }));\n    },\n\n    deserialize(buf, { unpackEntry }) {\n      return unpackEntry(encode(buf, Encoding.Bytearray), tag);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors.js';\nimport { isItemOfArray } from '../../../utils/other.js';\n\nexport default function genEnumerationField<Enum extends { [key: string]: number | string }>(\n  enm: Enum,\n): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { BigNumber } from 'bignumber.js';\nimport coinAmount from './coin-amount.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors.js';\nimport { Int, MIN_GAS_PRICE } from '../constants.js';\nimport Node from '../../../Node.js';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter.js';\n\nconst gasPriceCache: WeakMap<Node, { time: number; gasPrice: bigint }> = new WeakMap();\n\nexport async function getCachedIncreasedGasPrice(node: Node): Promise<bigint> {\n  const cache = gasPriceCache.get(node);\n  if (cache != null && cache.time > Date.now() - 20 * 1000) {\n    return cache.gasPrice;\n  }\n\n  const { minGasPrice, utilization } = (await node.getRecentGasPrices())[0];\n  let gasPrice =\n    utilization < 70\n      ? 0n\n      : BigInt(new BigNumber(minGasPrice.toString()).times(1.01).integerValue().toFixed());\n\n  const maxSafeGasPrice = BigInt(MIN_GAS_PRICE) * 100000n; // max microblock fee is 600ae or 35usd\n  if (gasPrice > maxSafeGasPrice) {\n    console.warn(\n      `Estimated gas price ${gasPrice} exceeds the maximum safe value for unknown reason.` +\n        ` It will be limited to ${maxSafeGasPrice}.` +\n        ' To overcome this restriction provide `gasPrice`/`fee` in options.',\n    );\n    gasPrice = maxSafeGasPrice;\n  }\n\n  gasPriceCache.set(node, { gasPrice, time: Date.now() });\n  return gasPrice;\n}\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    {\n      onNode,\n      denomination,\n    }: {\n      onNode?: Node;\n      denomination?: AE_AMOUNT_FORMATS;\n    },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `gasPrice` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return formatAmount(gasPrice, { targetDenomination: denomination });\n  },\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(\n        `Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`,\n      );\n    }\n    return value;\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors.js';\nimport { Int, MIN_GAS_PRICE, Tag } from '../constants.js';\nimport uInt from './u-int.js';\nimport coinAmount from './coin-amount.js';\nimport { getCachedIncreasedGasPrice } from './gas-price.js';\nimport { isKeyOfObject } from '../../../utils/other.js';\nimport { decode, Encoded } from '../../../utils/encoder.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\nimport Node from '../../../Node.js';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the base gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base gas\n * @example\n * ```js\n * TX_BASE_GAS(Tag.ChannelForceProgressTx) => 30 * 15000\n * ```\n */\nconst TX_BASE_GAS = (txType: Tag): number => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return factor * BASE_GAS;\n};\n\n/**\n * Calculate gas for other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The other gas\n * @example\n * ```js\n * TX_OTHER_GAS(Tag.OracleRespondTx, 10, { relativeTtl: 12, innerTxSize: 0 })\n *  => 10 * 20 + Math.ceil(32000 * 12 / Math.floor(60 * 24 * 365 / 3))\n * ```\n */\nconst TX_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): number => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleRespondTx:\n      return (\n        txSize * GAS_PER_BYTE +\n        Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL))\n      );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return (txSize - innerTxSize) * GAS_PER_BYTE;\n    default:\n      return txSize * GAS_PER_BYTE;\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleRespondTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate gas based on tx type and params\n */\nexport function buildGas(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return (\n    TX_BASE_GAS(txObject.tag) +\n    TX_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject),\n      innerTxSize,\n    })\n  );\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = new BigNumber(MIN_GAS_PRICE).times(buildGas(rebuildTx(fee), unpackTx, buildTx));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\n// TODO: Get rid of this workaround. Transaction builder can't accept/return gas price instead of\n// fee because it may get a decimal gas price. So, it should accept the optional `gasPrice` even\n// if it is not a contract-related transaction. And use this `gasPrice` to calculate `fee`.\nconst gasPricePrefix = '_gas-price:';\n\nexport interface SerializeAettosParams {\n  rebuildTx: (params: any) => Encoded.Transaction;\n  unpackTx: typeof unpackTxType;\n  buildTx: typeof buildTxType;\n  _computingMinFee?: BigNumber;\n}\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode }: { onNode?: Node },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `fee` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return gasPricePrefix + gasPrice;\n  },\n\n  serializeAettos(\n    _value: string | undefined,\n    { rebuildTx, unpackTx, buildTx, _computingMinFee }: SerializeAettosParams,\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value =\n      _value?.startsWith(gasPricePrefix) === true\n        ? minFee.dividedBy(MIN_GAS_PRICE).times(_value.replace(gasPricePrefix, ''))\n        : new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1] & SerializeAettosParams,\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    if (typeof value === 'string' && value.startsWith(gasPricePrefix)) {\n      return uInt.serialize(this.serializeAettos(value, params, options));\n    }\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import uInt from './u-int.js';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors.js';\nimport { Tag, MAX_AUTH_FUN_GAS } from '../constants.js';\nimport shortUInt from './short-u-int.js';\nimport { buildGas } from './fee.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildGas(rebuildTx(gasMax), unpackTx, buildTx);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag,\n      rebuildTx,\n      unpackTx,\n      buildTx,\n      _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax =\n      tag === Tag.GaMetaTx\n        ? MAX_AUTH_FUN_GAS\n        : calculateGasLimitMax(\n            gasMax,\n            (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n            unpackTx,\n            buildTx,\n          );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field.js';\nimport { AensName } from '../constants.js';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers.js';\nimport { InsufficientNameFeeError } from '../../../utils/errors.js';\nimport coinAmount from './coin-amount.js';\nimport { AensName, Int } from '../constants.js';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(_value: string | undefined, txFields: { name: AensName }): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<(typeof coinAmount)['serialize']>[1],\n    parameters: Parameters<(typeof coinAmount)['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants.js';\nimport { produceNameId, isNameValid } from '../helpers.js';\nimport address from './address.js';\nimport { Encoded, Encoding } from '../../../utils/encoder.js';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other.js';\nimport shortUInt from './short-u-int.js';\nimport Node from '../../../Node.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { Enum1 as NextNonceStrategy } from '../../../apis/node/index.js';\nimport { Tag } from '../constants.js';\n\nexport default function genNonceField<SenderKey extends string>(\n  senderKey: SenderKey,\n): {\n  serialize: (value: number, params: { tag: Tag }) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    serialize(value: number, { tag }): Buffer {\n      if (Tag.GaAttachTx === tag && value !== 1) {\n        throw new ArgumentError('nonce', 'equal 1 if GaAttachTx', value);\n      }\n      return shortUInt.serialize(value);\n    },\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode\n          .getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node/index.js';\nimport { toBytes } from '../../../utils/bytes.js';\nimport { Encoded, Encoding, decode, encode } from '../../../utils/encoder.js';\nimport { isAddressValid } from '../../../utils/crypto.js';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors.js';\nimport address, { AddressEncodings, idTagToEncoding } from './address.js';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\ntype NamePointerRaw = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default <AllowRaw extends boolean>(\n  allowRaw: AllowRaw,\n): {\n  serialize: (pointers: Array<AllowRaw extends true ? NamePointerRaw : NamePointer>) => Buffer[][];\n  deserialize: (\n    pointers: Array<[key: Buffer, id: Buffer]>,\n  ) => Array<AllowRaw extends true ? NamePointerRaw : NamePointer>;\n} => ({\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers) {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(\n        `Expected 32 pointers or less, got ${pointers.length} instead`,\n      );\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) {\n        payload = [...(allowRaw ? [ID_TAG] : []), addressAny.serialize(id)];\n      }\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError(\n            'Raw pointer',\n            `shorter than ${DATA_LENGTH_MAX + 1} bytes`,\n            `${data.length} bytes`,\n          );\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers) {\n    return pointers.map(([bKey, bId]) => {\n      if (!allowRaw) return { key: bKey.toString(), id: addressAny.deserialize(bId) };\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      // TS can't figure out the real type depending on allowRaw\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray) as Encoded.AccountAddress;\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n});\n","import coinAmount from './coin-amount.js';\nimport { Int } from '../constants.js';\nimport Node from '../../../Node.js';\nimport { Encoded } from '../../../utils/encoder.js';\nimport { ArgumentError } from '../../../utils/errors.js';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors.js';\nimport shortUInt from './short-u-int.js';\n\nexport default function genShortUIntConstField<\n  Value extends number,\n  Optional extends boolean = false,\n>(\n  constValue: Value,\n  optional?: Optional,\n): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes.js';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { Tag } from '../constants.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\n\nexport default function genTransactionField<T extends Tag = Tag>(\n  tag?: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...(tag != null && { tag }) }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      return unpackTx(encode(buf, Encoding.Transaction), tag);\n    },\n  };\n}\n","import { ArgumentError } from './errors.js';\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(\n      (\n        [\n          'apply',\n          'construct',\n          'defineProperty',\n          'deleteProperty',\n          'getOwnPropertyDescriptor',\n          'getPrototypeOf',\n          'isExtensible',\n          'ownKeys',\n          'preventExtensions',\n          'set',\n          'setPrototypeOf',\n          'get',\n          'has',\n        ] as const\n      ).map((name) => [\n        name,\n        (t: {}, ...args: unknown[]) => {\n          const target = valueCb();\n          if (target == null) throw new ArgumentError('wrapped value', 'defined', target);\n          if (name === 'get' && args[0] === '_wrappedValue') return target;\n          const res = (Reflect[name] as any)(target, ...args);\n          return typeof res === 'function' && name === 'get' ? res.bind(target) : res;\n        },\n      ]),\n    ),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter.js';\nimport { isAccountNotFoundError, pause } from './utils/other.js';\nimport { unwrapProxy } from './utils/wrap-proxy.js';\nimport { isNameValid, produceNameId } from './tx/builder/helpers.js';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants.js';\nimport {\n  AensPointerContextError,\n  DryRunError,\n  InvalidAensNameError,\n  TxTimedOutError,\n  TxNotInChainError,\n  InternalError,\n} from './utils/errors.js';\nimport Node from './Node.js';\nimport { DryRunResult, DryRunResults, SignedTx } from './apis/node/index.js';\nimport { decode, encode, Encoded, Encoding } from './utils/encoder.js';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport async function _getPollInterval(\n  type: 'key-block' | 'micro-block',\n  {\n    _expectedMineRate,\n    _microBlockCycle,\n    onNode,\n  }: { _expectedMineRate?: number; _microBlockCycle?: number; onNode: Node },\n): Promise<number> {\n  const getVal = async (\n    t: string,\n    val: number | undefined,\n    devModeDef: number,\n    def: number,\n  ): Promise<number | null> => {\n    if (t !== type) return null;\n    if (val != null) return val;\n    return (await onNode?.getNetworkId()) === 'ae_dev' ? devModeDef : def;\n  };\n\n  const base =\n    (await getVal('key-block', _expectedMineRate, 0, 180000)) ??\n    (await getVal('micro-block', _microBlockCycle, 0, 3000)) ??\n    (() => {\n      throw new InternalError(`Unknown type: ${type}`);\n    })();\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight({\n  cached = false,\n  ...options\n}: {\n  onNode: Node;\n  cached?: boolean;\n} & Parameters<typeof _getPollInterval>[1]): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache != null && cache.time > Date.now() - (await _getPollInterval('key-block', options))) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Return transaction details if it is mined, fail otherwise.\n * If the transaction has ttl specified then would wait till it leaves the mempool.\n * Otherwise would fail if a specified amount of blocks were mined.\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail if transaction ttl is not set\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5,\n    interval,\n    ...options\n  }: { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): ReturnType<Node['getTransactionByHash']> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let max;\n  do {\n    const tx = await options.onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    if (max == null) {\n      max = tx.tx.ttl !== 0 ? -1 : (await getHeight({ ...options, cached: true })) + blocks;\n    }\n    await pause(interval);\n  } while (max === -1 ? true : (await getHeight({ ...options, cached: true })) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  {\n    interval,\n    ...options\n  }: { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(await _getPollInterval('key-block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight(options);\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  {\n    confirm = 3,\n    onNode,\n    ...options\n  }: { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  {\n    height,\n    hash,\n    onNode,\n  }: { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): ReturnType<Node['getAccountByPubkey']> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  {\n    format = AE_AMOUNT_FORMATS.AETTOS,\n    ...options\n  }: { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : (address as Encoded.AccountAddress | Encoded.ContractAddress);\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration({\n  onNode,\n}: {\n  onNode: Node;\n}): ReturnType<Node['getCurrentGeneration']> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getGenerationByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<SignedTx[]> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getKeyBlockByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getMicroBlockHeaderByHash']> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError(\"Can't get dry-run request\");\n\n  let dryRunRes;\n  try {\n    const top =\n      typeof rs[0].top === 'number' ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress))).map((pubKey) => ({\n        pubKey,\n        amount: DRY_RUN_ACCOUNT.amount,\n      })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const { resolve, reject, tx, accountAddress } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top,\n    txEvents,\n    combine,\n    onNode,\n  }: { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{ txEvents?: DryRunResults['txEvents'] } & DryRunResult> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx,\n      accountAddress,\n      top,\n      txEvents,\n      resolve,\n      reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => {\n      void txDryRunHandler(key, onNode);\n    });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContractCode']> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContract']> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getNameEntryByName']> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName<Type extends Encoding.AccountAddress | Encoding.ContractAddress>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  {\n    verify = true,\n    resolveByNode = false,\n    onNode,\n  }: { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int.js';\nimport Node from '../../../Node.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { _getPollInterval, getHeight } from '../../../chain.js';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    {\n      onNode,\n      absoluteTtl,\n      _isInternalBuild,\n      ...options\n    }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n      _isInternalBuild?: boolean;\n    } & Omit<Parameters<typeof _getPollInterval>[1], 'onNode'>,\n  ) {\n    if (absoluteTtl !== true && value !== 0 && (value != null || _isInternalBuild === true)) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value = (value ?? 3) + (await getHeight({ ...options, onNode, cached: true }));\n    }\n    return value;\n  },\n};\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n  serialize: (value: Input | undefined, params: unknown) => Binary;\n  deserialize: (value: Binary, params: unknown) => Output;\n} {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n  serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n  deserialize: (value: Binary) => Output;\n} {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","export enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n/**\n * @category entry building\n */\nexport enum EntryTag {\n  Account = 10,\n  Oracle = 20,\n  // OracleQuery = 21,\n  Name = 30,\n  // NameCommitment = 31,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  Channel = 58,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaMetaTxAuthData = 810,\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants.js';\nimport SchemaTypes from './SchemaTypes.js';\nimport abiVersion from './field-types/abi-version.js';\nimport address, { idTagToEncoding } from './field-types/address.js';\nimport array from './field-types/array.js';\nimport coinAmount from './field-types/coin-amount.js';\nimport ctVersion from './field-types/ct-version.js';\nimport encoded from './field-types/encoded.js';\nimport entry from './field-types/entry.js';\nimport enumeration from './field-types/enumeration.js';\nimport fee from './field-types/fee.js';\nimport gasLimit from './field-types/gas-limit.js';\nimport gasPrice from './field-types/gas-price.js';\nimport name from './field-types/name.js';\nimport nameFee from './field-types/name-fee.js';\nimport nameId from './field-types/name-id.js';\nimport nonce from './field-types/nonce.js';\nimport pointers from './field-types/pointers.js';\nimport queryFee from './field-types/query-fee.js';\nimport raw from './field-types/raw.js';\nimport shortUInt from './field-types/short-u-int.js';\nimport shortUIntConst from './field-types/short-u-int-const.js';\nimport string from './field-types/string.js';\nimport transaction from './field-types/transaction.js';\nimport ttl from './field-types/ttl.js';\nimport uInt from './field-types/u-int.js';\nimport withDefault from './field-types/with-default.js';\nimport withFormatting from './field-types/with-formatting.js';\nimport { Encoded, Encoding } from '../../utils/encoder.js';\nimport { ArgumentError } from '../../utils/errors.js';\nimport { EntryTag } from './entry/constants.js';\nimport { EntParams, EntUnpacked } from './entry/schema.generated.js';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface TransactionAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst transactionAny = transaction() as unknown as TransactionAny;\n\ninterface TransactionSignedTx {\n  serialize: (\n    value: (TxParams & { tag: Tag.SignedTx }) | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst transactionSignedTx = transaction(Tag.SignedTx) as unknown as TransactionSignedTx;\n\ninterface EntryTreesPoi {\n  serialize: (\n    value: (EntParams & { tag: EntryTag.TreesPoi }) | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => EntUnpacked & { tag: EntryTag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(EntryTag.TreesPoi) as unknown as EntryTreesPoi;\n\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\n/**\n * Name ttl represented in number of blocks (Max value is 50000 blocks)\n */\nconst nameTtl = withFormatting((value) => {\n  const NAME_TTL = 180000;\n  value ??= NAME_TTL;\n  if (value >= 1 && value <= NAME_TTL) return value;\n  throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n}, shortUInt);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [\n  {\n    tag: shortUIntConst(Tag.SignedTx),\n    version: shortUIntConst(1, true),\n    signatures: array(raw), // TODO: use sg_ (Encoding.Signature) instead\n    encodedTx: transactionAny,\n  },\n  {\n    tag: shortUIntConst(Tag.SpendTx),\n    version: shortUIntConst(1, true),\n    senderId: address(Encoding.AccountAddress),\n    // TODO: accept also an AENS name\n    recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n    amount: coinAmount,\n    fee,\n    ttl,\n    nonce: nonce('senderId'),\n    payload: encoded(Encoding.Bytearray, true),\n  },\n  {\n    tag: shortUIntConst(Tag.NamePreclaimTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    commitmentId: address(Encoding.Commitment),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameClaimTx),\n    version: shortUIntConst(2, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    name,\n    nameSalt: withDefault(0, uInt),\n    nameFee,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameUpdateTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    nameTtl,\n    pointers: pointers(false),\n    clientTtl,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameUpdateTx),\n    version: shortUIntConst(2),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    nameTtl,\n    pointers: pointers(true),\n    clientTtl,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameTransferTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    // TODO: accept also an AENS name\n    recipientId: address(Encoding.AccountAddress, Encoding.Name),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameRevokeTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.ContractCreateTx),\n    version: shortUIntConst(1, true),\n    ownerId: address(Encoding.AccountAddress),\n    nonce: nonce('ownerId'),\n    code: encoded(Encoding.ContractBytearray),\n    ctVersion,\n    fee,\n    ttl,\n    deposit: withFormatting((value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    }, coinAmount),\n    amount: coinAmount,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.ContractCallTx),\n    version: shortUIntConst(1, true),\n    callerId: address(Encoding.AccountAddress),\n    nonce: nonce('callerId'),\n    // TODO: accept also an AENS name\n    contractId: address(Encoding.ContractAddress, Encoding.Name),\n    abiVersion,\n    fee,\n    ttl,\n    amount: coinAmount,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.OracleRegisterTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    queryFormat: string,\n    responseFormat: string,\n    queryFee: coinAmount,\n    oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    oracleTtlValue: withDefault(500, shortUInt),\n    fee,\n    ttl,\n    abiVersion,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleExtendTx),\n    version: shortUIntConst(1, true),\n    // TODO: accept also an AENS name\n    oracleId: address(Encoding.OracleAddress, Encoding.Name),\n    nonce: nonce('oracleId'),\n    oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    oracleTtlValue: withDefault(500, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleQueryTx),\n    version: shortUIntConst(1, true),\n    senderId: address(Encoding.AccountAddress),\n    nonce: nonce('senderId'),\n    // TODO: accept also an AENS name\n    oracleId: address(Encoding.OracleAddress, Encoding.Name),\n    query: string,\n    queryFee,\n    queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    queryTtlValue: withDefault(10, shortUInt),\n    responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    responseTtlValue: withDefault(10, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleRespondTx),\n    version: shortUIntConst(1, true),\n    oracleId: address(Encoding.OracleAddress),\n    nonce: nonce('oracleId'),\n    queryId: encoded(Encoding.OracleQueryId),\n    response: string,\n    responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    responseTtlValue: withDefault(10, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCreateTx),\n    version: shortUIntConst(2, true),\n    initiator: address(Encoding.AccountAddress),\n    initiatorAmount: uInt,\n    responder: address(Encoding.AccountAddress),\n    responderAmount: uInt,\n    channelReserve: uInt,\n    lockPeriod: uInt,\n    ttl,\n    fee,\n    initiatorDelegateIds: array(address(...idTagToEncoding)),\n    responderDelegateIds: array(address(...idTagToEncoding)),\n    stateHash: encoded(Encoding.State),\n    nonce: nonce('initiator'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    initiatorAmountFinal: uInt,\n    responderAmountFinal: uInt,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    poi: entryTreesPoi,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSlashTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    poi: entryTreesPoi,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelDepositTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    amount: uInt,\n    ttl,\n    fee,\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelWithdrawTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    toId: address(Encoding.AccountAddress),\n    amount: uInt,\n    ttl,\n    fee,\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSettleTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    initiatorAmountFinal: uInt,\n    responderAmountFinal: uInt,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelForceProgressTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    round: shortUInt,\n    update: encoded(Encoding.ContractBytearray),\n    stateHash: encoded(Encoding.State),\n    offChainTrees: encoded(Encoding.StateTrees),\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelOffChainTx),\n    version: shortUIntConst(2, true),\n    channelId: address(Encoding.Channel),\n    round: shortUInt,\n    stateHash: encoded(Encoding.State),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.GaAttachTx),\n    version: shortUIntConst(1, true),\n    ownerId: address(Encoding.AccountAddress),\n    nonce: nonce('ownerId'),\n    code: encoded(Encoding.ContractBytearray),\n    authFun: raw,\n    ctVersion,\n    fee,\n    ttl,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.GaMetaTx),\n    version: shortUIntConst(2, true),\n    gaId: address(Encoding.AccountAddress),\n    authData: encoded(Encoding.ContractBytearray),\n    abiVersion,\n    fee,\n    gasLimit,\n    gasPrice,\n    tx: transactionSignedTx,\n  },\n  {\n    tag: shortUIntConst(Tag.PayingForTx),\n    version: shortUIntConst(1, true),\n    payerId: address(Encoding.AccountAddress),\n    nonce: nonce('payerId'),\n    fee,\n    tx: transactionSignedTx,\n  },\n] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types/interface.js';\nimport {\n  ArgumentError,\n  DecodeError,\n  SchemaNotFoundError,\n  InternalError,\n} from '../../utils/errors.js';\nimport { Encoding, Encoded, encode, decode } from '../../utils/encoder.js';\nimport { readInt } from './helpers.js';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null)\n      throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) =>\n    field.serialize(params[key], { ...params, ...extraParams }, params),\n  );\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name,\n      field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { EntryTag } from '../entry/constants.js';\nimport { encode, Encoding, Encoded, decode } from '../../../utils/encoder.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\nexport default function genMapField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { packEntry }) {\n      return decode(\n        packEntry({\n          tag: EntryTag.Mtree,\n          values: Object.entries(object).map(\n            ([key, value]) =>\n              ({\n                tag: EntryTag.MtreeValue,\n                key: decode(key as Encoded.Generic<E>),\n                value: decode(packEntry({ ...(value as any), tag })),\n              }) as const,\n          ),\n        }),\n      );\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      const { values } = unpackEntry(encode(buffer, Encoding.Bytearray), EntryTag.Mtree);\n      return Object.fromEntries(\n        values\n          // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n          .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n          .map(({ key, value }) => [\n            encode(key, encoding),\n            unpackEntry(encode(value, Encoding.Bytearray), tag),\n          ]),\n      ) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { EntryTag } from '../entry/constants.js';\nimport { hash } from '../../../utils/crypto.js';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport type { unpackEntry } from '../entry/index.js';\nimport type { EntUnpacked } from '../entry/schema.generated.js';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends EntryTag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackEntry: typeof unpackEntry;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpEnt - Implementation of unpackEntry use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpEnt: typeof unpackEntry) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackEntry = unpEnt;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(binary[1].map((node) => [node[0].toString('hex'), node[1]]));\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError(\"Can't find a node by root hash\");\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError(\"Can't find a node by hash in extension node\");\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...(node[16].length !== 0 && { value: node[16] }),\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...(type === NodeType.Leaf && { value: node[1] }),\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => [Buffer.from(mptHash, 'hex'), value]),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) {\n      // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError(\"Can't find node in complete tree\");\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): (EntUnpacked & { tag: T }) | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackEntry(encode(d, Encoding.Bytearray), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError(\"Can't find node in complete tree\");\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, EntUnpacked & { tag: T }> {\n    return Object.fromEntries(\n      this.#entriesRaw()\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n        .map(([k, v]) => [\n          encode(Buffer.from(k, 'hex'), this.#encoding),\n          this.#unpackEntry(encode(v, Encoding.Bytearray), this.#tag),\n        ]),\n    ) as Record<Encoded.Generic<E>, EntUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackEntry: typeof unpackEntry }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackEntry }) {\n      return new MPTree(value, encoding, tag, unpackEntry);\n    },\n  };\n}\n","import { EntryTag } from '../entry/constants.js';\nimport { encode, Encoding, decode } from '../../../utils/encoder.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\ntype TagWrapping =\n  | EntryTag.AccountsMtree\n  | EntryTag.CallsMtree\n  | EntryTag.ChannelsMtree\n  | EntryTag.ContractsMtree\n  | EntryTag.NameserviceMtree\n  | EntryTag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(\n  tag: T,\n): {\n  serialize: (\n    // TODO: replace with `(EntParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `(EntUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { packEntry }) {\n      return decode(packEntry({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      return unpackEntry<TagWrapping>(encode(buffer, Encoding.Bytearray), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import SchemaTypes from '../SchemaTypes.js';\nimport abiVersion from '../field-types/abi-version.js';\nimport address, { idTagToEncoding } from '../field-types/address.js';\nimport array from '../field-types/array.js';\nimport boolean from '../field-types/boolean.js';\nimport coinAmount from '../field-types/coin-amount.js';\nimport ctVersion from '../field-types/ct-version.js';\nimport encoded from '../field-types/encoded.js';\nimport entry from '../field-types/entry.js';\nimport enumeration from '../field-types/enumeration.js';\nimport gasLimit from '../field-types/gas-limit.js';\nimport gasPrice from '../field-types/gas-price.js';\nimport map from '../field-types/map.js';\nimport mptree from '../field-types/mptree.js';\nimport pointers from '../field-types/pointers.js';\nimport raw from '../field-types/raw.js';\nimport shortUInt from '../field-types/short-u-int.js';\nimport shortUIntConst from '../field-types/short-u-int-const.js';\nimport string from '../field-types/string.js';\nimport uInt from '../field-types/u-int.js';\nimport wrapped from '../field-types/wrapped.js';\nimport { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { EntryTag, CallReturnType } from './constants.js';\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<(EntParams & { tag: EntryTag.MtreeValue }) | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<EntUnpacked & { tag: EntryTag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(EntryTag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, EntParams & { tag: EntryTag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, EntUnpacked & { tag: EntryTag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, EntryTag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, EntParams & { tag: EntryTag.Account }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.AccountAddress, EntUnpacked & { tag: EntryTag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, EntryTag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, EntParams & { tag: EntryTag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.Bytearray, EntUnpacked & { tag: EntryTag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, EntryTag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (value: Record<Encoded.Channel, EntParams & { tag: EntryTag.Channel }>) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, EntUnpacked & { tag: EntryTag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, EntryTag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (value: Record<Encoded.Name, EntParams & { tag: EntryTag.Name }>) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, EntUnpacked & { tag: EntryTag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, EntryTag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (value: Record<Encoded.OracleAddress, EntParams & { tag: EntryTag.Oracle }>) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.OracleAddress, EntUnpacked & { tag: EntryTag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, EntryTag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [\n  {\n    tag: shortUIntConst(EntryTag.Account),\n    version: shortUIntConst(1),\n    nonce: shortUInt,\n    balance: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Account),\n    version: shortUIntConst(2, true),\n    flags: uInt,\n    nonce: shortUInt,\n    balance: uInt,\n    gaContract: address(Encoding.ContractAddress, Encoding.Name),\n    gaAuthFun: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.Name),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nameTtl: shortUInt,\n    status: raw,\n    /**\n     * a suggestion as to how long any clients should cache this information\n     */\n    clientTtl: shortUInt,\n    pointers,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Contract),\n    version: shortUIntConst(1, true),\n    owner: address(Encoding.AccountAddress),\n    ctVersion,\n    code: encoded(Encoding.ContractBytearray),\n    log: encoded(Encoding.ContractBytearray),\n    active: boolean,\n    referers: array(address(Encoding.AccountAddress)),\n    deposit: coinAmount,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ContractCall),\n    version: shortUIntConst(2, true),\n    callerId: address(Encoding.AccountAddress),\n    callerNonce: shortUInt,\n    height: shortUInt,\n    contractId: address(Encoding.ContractAddress),\n    // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n    gasPrice: uInt,\n    gasUsed: shortUInt,\n    returnValue: encoded(Encoding.ContractBytearray),\n    returnType: enumeration(CallReturnType),\n    // TODO: add serialization for\n    //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n    log: array(raw),\n  },\n  {\n    tag: shortUIntConst(EntryTag.Oracle),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    queryFormat: string,\n    responseFormat: string,\n    queryFee: coinAmount,\n    oracleTtlValue: shortUInt,\n    abiVersion,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Channel),\n    version: shortUIntConst(3, true),\n    initiator: address(Encoding.AccountAddress),\n    responder: address(Encoding.AccountAddress),\n    channelAmount: uInt,\n    initiatorAmount: uInt,\n    responderAmount: uInt,\n    channelReserve: uInt,\n    initiatorDelegateIds: array(address(...idTagToEncoding)),\n    responderDelegateIds: array(address(...idTagToEncoding)),\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    soloRound: uInt,\n    lockPeriod: uInt,\n    lockedUntil: uInt,\n    initiatorAuth: encoded(Encoding.ContractBytearray),\n    responderAuth: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateTransfer),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    to: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateDeposit),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateWithdraw),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCreateContract),\n    version: shortUIntConst(1, true),\n    owner: address(Encoding.AccountAddress),\n    ctVersion,\n    code: encoded(Encoding.ContractBytearray),\n    deposit: uInt,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCallContract),\n    version: shortUIntConst(1, true),\n    caller: address(Encoding.AccountAddress),\n    contract: address(Encoding.ContractAddress),\n    abiVersion,\n    amount: uInt,\n    callData: encoded(Encoding.ContractBytearray),\n    callStack: raw,\n    gasPrice,\n    gasLimit,\n  },\n  {\n    tag: shortUIntConst(EntryTag.TreesPoi),\n    version: shortUIntConst(1, true),\n    // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n    accounts: array(mptree(Encoding.AccountAddress, EntryTag.Account)),\n    calls: array(mptree(Encoding.Bytearray, EntryTag.ContractCall)),\n    channels: array(mptree(Encoding.Channel, EntryTag.Channel)),\n    contracts: array(mptree(Encoding.ContractAddress, EntryTag.Contract)),\n    ns: array(mptree(Encoding.Name, EntryTag.Name)),\n    oracles: array(mptree(Encoding.OracleAddress, EntryTag.Oracle)),\n  },\n  {\n    tag: shortUIntConst(EntryTag.StateTrees),\n    version: shortUIntConst(0, true),\n    contracts: wrapped(EntryTag.ContractsMtree) as unknown as MapContracts,\n    calls: wrapped(EntryTag.CallsMtree) as unknown as MapCalls,\n    channels: wrapped(EntryTag.ChannelsMtree) as unknown as MapChannels,\n    ns: wrapped(EntryTag.NameserviceMtree) as unknown as MapNames,\n    oracles: wrapped(EntryTag.OraclesMtree) as unknown as MapOracles,\n    accounts: wrapped(EntryTag.AccountsMtree) as unknown as MapAccounts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Mtree),\n    version: shortUIntConst(1, true),\n    values: entryMtreeValueArray,\n  },\n  {\n    tag: shortUIntConst(EntryTag.MtreeValue),\n    version: shortUIntConst(1, true),\n    key: raw,\n    value: raw,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ContractsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapContracts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.CallsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapCalls,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapChannels,\n  },\n  {\n    tag: shortUIntConst(EntryTag.NameserviceMtree),\n    version: shortUIntConst(1, true),\n    payload: mapNames,\n  },\n  {\n    tag: shortUIntConst(EntryTag.OraclesMtree),\n    version: shortUIntConst(1, true),\n    payload: mapOracles,\n  },\n  {\n    tag: shortUIntConst(EntryTag.AccountsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapAccounts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.GaMetaTxAuthData),\n    version: shortUIntConst(1, true),\n    fee: coinAmount,\n    gasPrice,\n    txHash: encoded(Encoding.TxHash),\n  },\n] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type EntParams = Schemas['TxParams'];\nexport type EntUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { packRecord, unpackRecord } from '../common.js';\nimport { schemas } from './schema.js';\nimport { EntryTag } from './constants.js';\nimport { EntParams, EntUnpacked } from './schema.generated.js';\n\nconst encodingTag = [\n  [EntryTag.CallsMtree, Encoding.CallStateTree],\n  [EntryTag.StateTrees, Encoding.StateTrees],\n  [EntryTag.TreesPoi, Encoding.Poi],\n] as const;\n\nexport function packEntry(params: EntParams & { tag: EntryTag.CallsMtree }): Encoded.CallStateTree;\nexport function packEntry(params: EntParams & { tag: EntryTag.StateTrees }): Encoded.StateTrees;\nexport function packEntry(params: EntParams & { tag: EntryTag.TreesPoi }): Encoded.Poi;\n/**\n * Pack entry\n * @category entry builder\n * @param params - Params of entry\n * @returns Encoded entry\n */\nexport function packEntry(params: EntParams): Encoded.Any;\nexport function packEntry(params: EntParams): Encoded.Any {\n  const encoding = encodingTag.find(([tag]) => tag === params.tag)?.[1] ?? Encoding.Bytearray;\n  return packRecord(schemas, EntryTag, params, { packEntry }, encoding);\n}\n\nexport function unpackEntry(\n  encoded: Encoded.CallStateTree,\n): EntUnpacked & { tag: EntryTag.CallsMtree };\nexport function unpackEntry(\n  encoded: Encoded.StateTrees,\n): EntUnpacked & { tag: EntryTag.StateTrees };\nexport function unpackEntry(encoded: Encoded.Poi): EntUnpacked & { tag: EntryTag.TreesPoi };\n/**\n * Unpack entry\n * @category entry builder\n * @param encoded - Encoded entry\n * @param expectedTag - Expected entry type\n * @returns Params of entry\n */\nexport function unpackEntry<T extends EntryTag>(\n  encoded: Encoded.Any,\n  expectedTag?: T,\n): EntUnpacked & { tag: T };\nexport function unpackEntry(encoded: Encoded.Any, expectedTag?: EntryTag): EntUnpacked {\n  expectedTag ??= encodingTag.find(([, enc]) => encoded.startsWith(enc))?.[0];\n  return unpackRecord(schemas, EntryTag, encoded, expectedTag, { unpackEntry }) as any;\n}\n","import { decode, encode, Encoded, Encoding } from '../../utils/encoder.js';\nimport { hash } from '../../utils/crypto.js';\nimport { Field } from './field-types/interface.js';\nimport { txSchema } from './schema.js';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated.js';\nimport { Tag } from './constants.js';\nimport { buildContractId } from './helpers.js';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common.js';\nimport { ArgumentError } from '../../utils/errors.js';\nimport { packEntry, unpackEntry } from './entry/index.js';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding =\n  | Encoding.Transaction\n  | Encoding.Poi\n  | Encoding.StateTrees\n  | Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction {\n  return packRecord(\n    txSchema,\n    Tag,\n    params,\n    {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      unpackTx,\n      buildTx,\n      rebuildTx: (overrideParams: any) => buildTx({ ...params, ...overrideParams }),\n      packEntry,\n    },\n    Encoding.Transaction,\n  );\n}\n\nexport type BuildTxOptions<TxType extends Tag, OmitFields extends string> = Omit<\n  TxParamsAsync & { tag: TxType },\n  'tag' | OmitFields\n>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version).map(async ([key, field]) => {\n      if (field.prepare == null) return;\n      // @ts-expect-error the type of `params[key]` can't be determined accurately\n      params[key] = await field.prepare(params[key], params, params);\n    }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, { unpackTx, unpackEntry }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_') ? decode(rawTx) : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import nacl from 'tweetnacl';\nimport AccountBase from './Base.js';\nimport { hash, messageToHash, messagePrefixLength } from '../utils/crypto.js';\nimport { ArgumentError } from '../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../utils/encoder.js';\nimport { concatBuffers } from '../utils/other.js';\nimport { hashTypedData, AciValue } from '../utils/typed-data.js';\nimport { buildTx } from '../tx/builder/index.js';\nimport { Tag } from '../tx/builder/constants.js';\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  readonly #secretKeyDecoded: Uint8Array;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(public readonly secretKey: Encoded.AccountSecretKey) {\n    super();\n    const keyPair = nacl.sign.keyPair.fromSeed(decode(secretKey));\n    this.#secretKeyDecoded = keyPair.secretKey;\n    this.address = encode(keyPair.publicKey, Encoding.AccountAddress);\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    const secretKey = encode(nacl.randomBytes(32), Encoding.AccountSecretKey);\n    return new AccountMemory(secretKey);\n  }\n\n  /**\n   * @deprecated Use `unsafeSign` method instead\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return this.unsafeSign(data, options);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async unsafeSign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return nacl.sign.detached(Buffer.from(data), this.#secretKeyDecoded);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.unsafeSign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.unsafeSign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name,\n      version,\n      networkId,\n      contractAddress,\n      ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name,\n      version,\n      networkId,\n      contractAddress,\n    });\n    const signature = await this.unsafeSign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength,\n      new Uint8Array([1]),\n      Buffer.from(networkId),\n      decode(delegation),\n    ]);\n    const signature = await this.unsafeSign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import SchemaTypes from '../SchemaTypes.js';\nimport address from '../field-types/address.js';\nimport nameId from '../field-types/name-id.js';\nimport shortUIntConst from '../field-types/short-u-int-const.js';\nimport { Encoded, Encoding, decode, encode } from '../../../utils/encoder.js';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  /**\n   * Delegation of all AENS names to a contract\n   */\n  AensWildcard = 1,\n  /**\n   * Delegation of an AENS name to a contract\n   */\n  AensName = 2,\n  /**\n   * Delegation of AENS preclaim to a contract\n   */\n  AensPreclaim = 3,\n  /**\n   * Delegation of oracle operations to a contract\n   */\n  Oracle = 4,\n  /**\n   * Delegation of oracle query to a contract\n   */\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\n/**\n * Oracle query ID to reply by a contract\n */\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * Address of a contract to delegate permissions to\n */\nconst contractAddress = address(Encoding.ContractAddress);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [\n  {\n    tag: shortUIntConst(DelegationTag.AensWildcard),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.AensName),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    /**\n     * AENS name to manage by a contract\n     */\n    nameId,\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.AensPreclaim),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.Oracle),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.OracleResponse),\n    version: shortUIntConst(1, true),\n    queryId: queryIdField,\n    contractAddress,\n  },\n] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { packRecord, unpackRecord } from '../common.js';\nimport { DelegationTag, schemas } from './schema.js';\nimport { DlgParams, DlgUnpacked } from './schema.generated.js';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","function verCmp(a: string, b: string): number {\n  const getComponents = (v: string): number[] =>\n    v\n      .split(/[-+]/)[0]\n      .split('.')\n      .map((i) => +i);\n\n  const aComponents = getComponents(a);\n  const bComponents = getComponents(b);\n\n  const base = Math.max(...aComponents, ...bComponents) + 1;\n  const componentsToNumber = (components: number[]): number =>\n    components.reverse().reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  return componentsToNumber(aComponents) - componentsToNumber(bComponents);\n}\n\nexport default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion?: string,\n): boolean {\n  return verCmp(version, geVersion) >= 0 && (ltVersion == null || verCmp(version, ltVersion) < 0);\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport {\n  AdditionalPolicyConfig,\n  FullOperationResponse,\n  OperationOptions,\n  createSerializer as createSerializerOrig,\n} from '@azure/core-client';\nimport { pause } from './other.js';\nimport semverSatisfies from './semver-satisfies.js';\nimport { InternalError, UnexpectedTsError, UnsupportedVersionError } from './errors.js';\n\nconst bigIntPrefix = '_sdk-big-int-';\n\nexport const createSerializer = (\n  ...args: Parameters<typeof createSerializerOrig>\n): ReturnType<typeof createSerializerOrig> => {\n  const serializer = createSerializerOrig(...args);\n  const { serialize, deserialize } = serializer;\n  return Object.assign(serializer, {\n    serialize(\n      ...[mapper, object, objectName, options]: Parameters<typeof serialize>\n    ): ReturnType<typeof serialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || object == null) {\n        return serialize.call(this, mapper, object, objectName, options);\n      }\n      if (typeof object !== 'bigint') {\n        objectName ??= mapper.serializedName;\n        throw new Error(`${objectName} with value ${object} must be of type bigint.`);\n      }\n      return object.toString();\n    },\n\n    deserialize(\n      ...[mapper, responseBody, objectName, options]: Parameters<typeof deserialize>\n    ): ReturnType<typeof deserialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || responseBody == null) {\n        if (typeof responseBody === 'string' && responseBody.startsWith(bigIntPrefix)) {\n          console.warn(`AeSdk internal error: BigInt value ${responseBody} handled incorrectly`);\n          responseBody = +responseBody.replace(bigIntPrefix, '');\n        }\n        const result = deserialize.call(this, mapper, responseBody, objectName, options);\n        // TODO: remove after fixing https://github.com/aeternity/ae_mdw/issues/1891\n        // and https://github.com/aeternity/aeternity/issues/4386\n        if (result instanceof Date) return new Date(+result / 1000);\n        return result;\n      }\n      if (typeof responseBody === 'number' && responseBody > Number.MAX_SAFE_INTEGER) {\n        throw new InternalError(`Number ${responseBody} is not accurate to be converted to BigInt`);\n      }\n      return BigInt(responseBody.toString().replace(bigIntPrefix, ''));\n    },\n  });\n};\n\nconst safeLength = Number.MAX_SAFE_INTEGER.toString().length;\nconst bigIntPropertyRe = new RegExp(String.raw`(\"\\w+\":\\s*)(\\d{${safeLength},})(\\s*[,}])`, 'm');\nconst bigIntArrayItemRe = new RegExp(String.raw`([[,]\\s*)(\\d{${safeLength},})\\b`, 'm');\nexport const parseBigIntPolicy: PipelinePolicy = {\n  name: 'parse-big-int',\n  async sendRequest(request, next) {\n    const response = await next(request);\n    if (response.bodyAsText == null) return response;\n    // TODO: replace with https://caniuse.com/mdn-javascript_builtins_json_parse_reviver_parameter_context_argument when it gets support in FF and Safari\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntPropertyRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntPropertyRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, name, value, end] = match;\n        return [\n          name,\n          +value > Number.MAX_SAFE_INTEGER ? `\"${bigIntPrefix}${value}\"` : value,\n          end,\n        ].join('');\n      },\n    );\n    // FIXME: may break strings inside json\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntArrayItemRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntArrayItemRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, prefix, value] = match;\n        return `${prefix}\"${bigIntPrefix}${value}\"`;\n      },\n    );\n    return response;\n  },\n};\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(\n          key,\n          req.catch(() => {}),\n        );\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (\n          !(error instanceof RestError) ||\n          error.request == null ||\n          error.message.startsWith('Error ')\n        )\n          throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        const body = (error.response as FullOperationResponse).parsedBody;\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  versionCb: (options: OperationOptions) => Promise<string>,\n  geVersion: string,\n  ltVersion: string,\n  ignoreVersion: boolean,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'version-check',\n    async sendRequest(request, next) {\n      if (request.headers.has('__version-check')) {\n        request.headers.delete('__version-check');\n        return next(request);\n      }\n      const options = { requestOptions: { customHeaders: { '__version-check': 'true' } } };\n      const args = [await versionCb(options), geVersion, ltVersion] as const;\n      if (!semverSatisfies(...args)) {\n        const error = new UnsupportedVersionError(name, ...args);\n        if (ignoreVersion) console.warn(error.message);\n        else throw error;\n      }\n      return next(request);\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount)\n        .fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      errorCode: {\n        serializedName: \"error_code\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: -1,\n        },\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedTx: {\n        serializedName: \"encoded_tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedKey: {\n        serializedName: \"encoded_key\",\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const AuctionEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuctionEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      startedAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"started_at\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      endsAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ends_at\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      highestBidder: {\n        serializedName: \"highest_bidder\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBid: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"highest_bid\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      soloRound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockedUntil: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Currency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunit: {\n        serializedName: \"subunit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunitsPerUnit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"subunits_per_unit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fiatConverstionUrl: {\n        serializedName: \"fiat_converstion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fiatConversionUrl: {\n        serializedName: \"fiat_conversion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      logo: {\n        serializedName: \"logo\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\",\n        },\n      },\n      primaryColour: {\n        serializedName: \"primary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      secondaryColour: {\n        serializedName: \"secondary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkName: {\n        serializedName: \"network_name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Image: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMinimum: 0,\n            },\n            type: {\n              // @ts-expect-error we are extending autorest with BigInt support\n              name: \"BigInt\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PinningTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PinningTx\",\n    modelProperties: {\n      epoch: {\n        serializedName: \"epoch\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      parentPayload: {\n        serializedName: \"parent_payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastLeader: {\n        serializedName: \"last_leader\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      parentType: {\n        serializedName: \"parent_type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      parentNetworkId: {\n        serializedName: \"parent_network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HCContractPubkeys: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HCContractPubkeys\",\n    modelProperties: {\n      staking: {\n        serializedName: \"staking\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      election: {\n        serializedName: \"election\",\n        type: {\n          name: \"String\",\n        },\n      },\n      rewards: {\n        serializedName: \"rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GasPricesItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GasPricesItem\",\n    modelProperties: {\n      minGasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"min_gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      utilization: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"utilization\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      minutes: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"minutes\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      difficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      hashrate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      uptime: {\n        serializedName: \"uptime\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      effectiveAtHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SyncStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SyncStatus\",\n    modelProperties: {\n      progress: {\n        serializedName: \"progress\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      speed: {\n        serializedName: \"speed\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      estimate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"estimate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      firstSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lastSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"verified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      unverified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"unverified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"accounts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contracts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contracts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractOracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      locked: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleQueries: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pendingRewards: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      total: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"total\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers.js\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const nameHash: OperationURLParameter = {\n  parameterPath: \"nameHash\",\n  mapper: {\n    serializedName: \"name_hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n","import { createSerializer } from \"../../utils/autorest.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters.js\";\nimport * as Mappers from \"./models/mappers.js\";\nimport {\n  NodeOptionalParams,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAuctionEntryByNameOptionalParams,\n  GetAuctionEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetCurrencyOptionalParams,\n  GetCurrencyResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetPinningTxOptionalParams,\n  GetPinningTxResponse,\n  GetHyperchainContractPubkeysOptionalParams,\n  GetHyperchainContractPubkeysResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetNameEntryByNameHashOptionalParams,\n  GetNameEntryByNameHashResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetRecentGasPricesOptionalParams,\n  GetRecentGasPricesResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n  GetSyncStatusOptionalParams,\n  GetSyncStatusResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n} from \"./models/index.js\";\n\nexport class Node extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get auction entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getAuctionEntryByName(\n    name: string,\n    options?: GetAuctionEntryByNameOptionalParams,\n  ): Promise<GetAuctionEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getAuctionEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get the currency metadata of a node\n   * @param options The options parameters.\n   */\n  getCurrency(\n    options?: GetCurrencyOptionalParams,\n  ): Promise<GetCurrencyResponse> {\n    return this.sendOperationRequest({ options }, getCurrencyOperationSpec);\n  }\n\n  /**\n   * Dry-run unsigned transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx\n   * and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the pinning transaction for the current epoch. Returns both the individual parameters as well as\n   * the parent chain type (aeternity, btc etc.), network id and a packaged 80 byte readymade payload for\n   * that chain type.\n   * @param options The options parameters.\n   */\n  getPinningTx(\n    options?: GetPinningTxOptionalParams,\n  ): Promise<GetPinningTxResponse> {\n    return this.sendOperationRequest({ options }, getPinningTxOperationSpec);\n  }\n\n  /**\n   * Get the pubkeys for the configured hyperchain contracts for staking, election and rewards\n   * @param options The options parameters.\n   */\n  getHyperchainContractPubkeys(\n    options?: GetHyperchainContractPubkeysOptionalParams,\n  ): Promise<GetHyperchainContractPubkeysResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getHyperchainContractPubkeysOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param nameHash The name hash of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByNameHash(\n    nameHash: string,\n    options?: GetNameEntryByNameHashOptionalParams,\n  ): Promise<GetNameEntryByNameHashResponse> {\n    return this.sendOperationRequest(\n      { nameHash, options },\n      getNameEntryByNameHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get minimum gas prices in recent blocks\n   * @param options The options parameters.\n   */\n  getRecentGasPrices(\n    options?: GetRecentGasPricesOptionalParams,\n  ): Promise<GetRecentGasPricesResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getRecentGasPricesOperationSpec,\n    );\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n\n  /**\n   * Get the sync status of a node\n   * @param options The options parameters.\n   */\n  getSyncStatus(\n    options?: GetSyncStatusOptionalParams,\n  ): Promise<GetSyncStatusResponse> {\n    return this.sendOperationRequest({ options }, getSyncStatusOperationSpec);\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAuctionEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/auctions/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AuctionEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrencyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/currency\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Currency,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPinningTxOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/hyperchain/pin-tx\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PinningTx,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getHyperchainContractPubkeysOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/hyperchain/contracts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HCContractPubkeys,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getNameEntryByNameHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/hash/{name_hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.nameHash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecentGasPricesOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/recent-gas-prices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"GasPricesItem\" } },\n        },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSyncStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/sync-status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SyncStatus,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport { OperationOptions } from '@azure/core-client';\nimport { userAgentPolicyName, setClientRequestIdPolicyName } from '@azure/core-rest-pipeline';\nimport {\n  genRequestQueuesPolicy,\n  genCombineGetRequestsPolicy,\n  genErrorFormatterPolicy,\n  parseBigIntPolicy,\n  genVersionCheckPolicy,\n  genRetryOnFailurePolicy,\n} from './utils/autorest.js';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node/index.js';\nimport { UnsupportedVersionError } from './utils/errors.js';\nimport { ConsensusProtocolVersion } from './tx/builder/constants.js';\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends NodeApi {\n  readonly #ignoreVersion: boolean;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Print warning instead of throwing exception if node\n   * or consensus protocol version is not supported, use with caution\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false,\n      retryCount = 3,\n      retryOverallDelay = 800,\n      ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    const getVersion = async (opts: OperationOptions): Promise<string> =>\n      (await this._getCachedStatus(opts)).nodeVersion;\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genVersionCheckPolicy('node', getVersion, '7.1.0', '8.0.0', ignoreVersion),\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) =>\n          [' ', body.reason, body.errorCode == null ? '' : ` (${body.errorCode})`].join(''),\n        ),\n      ],\n      ...options,\n    });\n    this.#ignoreVersion = ignoreVersion;\n    this.pipeline.addPolicy(parseBigIntPolicy, { phase: 'Deserialize' });\n    this.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n    // TODO: use instead our retry policy\n    this.pipeline.removePolicy({ name: 'defaultRetryPolicy' });\n  }\n\n  #cachedStatusPromise?: ReturnType<NodeApi['getStatus']>;\n\n  async _getCachedStatus(options?: OperationOptions): ReturnType<NodeApi['getStatus']> {\n    if (this.#cachedStatusPromise != null) return this.#cachedStatusPromise;\n    return this.getStatus(options);\n  }\n\n  override async getStatus(\n    ...args: Parameters<NodeApi['getStatus']>\n  ): ReturnType<NodeApi['getStatus']> {\n    const promise = super.getStatus(...args);\n    promise.then(\n      () => {\n        this.#cachedStatusPromise = promise;\n      },\n      () => {},\n    );\n    return promise;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    return (await this._getCachedStatus()).networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce((acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc), {\n        effectiveAtHeight: -1,\n        version: 0,\n      }).version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number')\n        .map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      const error = new UnsupportedVersionError(\n        'consensus protocol',\n        version,\n        geVersion,\n        ltVersion,\n      );\n      if (this.#ignoreVersion) console.warn(error.message);\n      else throw error;\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder.js';\nimport { buildTx, getSchema, unpackTx } from './builder/index.js';\nimport { Tag } from './builder/constants.js';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors.js';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null)\n    throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder.js';\nimport { buildTx, buildTxHash, unpackTx } from './builder/index.js';\nimport { Tag } from './builder/constants.js';\nimport { verify } from '../utils/crypto.js';\nimport { getBufferToSign } from '../account/Memory.js';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors.js';\nimport Node from '../Node.js';\nimport getTransactionSignerAddress from './transaction-signer.js';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx,\n    gasUsed,\n    queryFee,\n    isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError(\n      \"Transaction shouldn't be a SignedTx, use `getExecutionCostBySignedTx` instead\",\n    );\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleRespondTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    (params.tag === Tag.SpendTx ||\n      params.tag === Tag.ContractCreateTx ||\n      params.tag === Tag.ContractCallTx ||\n      params.tag === Tag.ChannelDepositTx) &&\n    innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx ||\n      params.tag === Tag.ContractCallTx ||\n      params.tag === Tag.GaAttachTx ||\n      params.tag === Tag.GaMetaTx) &&\n    innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false].map((f) =>\n    verify(getBufferToSign(tx, networkId, f), params.signatures[0], address),\n  );\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError(\"Can't verify signature\");\n  return getExecutionCost(buildTx(params.encodedTx), {\n    ...(isInnerTx && { innerTx: 'freeloader' }),\n    ...options,\n  });\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null &&\n    txHash !== false &&\n    [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleRespondTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, isAddressValid, verify } from '../utils/crypto.js';\nimport { TxUnpacked } from './builder/schema.generated.js';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version.js';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants.js';\nimport { buildTx, unpackTx } from './builder/index.js';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other.js';\nimport { Encoded, Encoding, decode } from '../utils/encoder.js';\nimport Node from '../Node.js';\nimport { Account } from '../apis/node/index.js';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest.js';\nimport { UnexpectedTsError } from '../utils/errors.js';\nimport getTransactionSignerAddress from './transaction-signer.js';\nimport { getExecutionCostUsingNode } from './execution-cost.js';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: Account & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  },\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node\n      .getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (\n    await Promise.all(\n      validators.map(async (v) =>\n        v(tx, {\n          node,\n          account,\n          height,\n          consensusProtocolVersion,\n          nodeNetworkId,\n          parentTxTypes,\n        }),\n      ),\n    )\n  ).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const pipeline = nodeNotCached.pipeline.clone();\n  pipeline.removePolicy({ name: 'parse-big-int' });\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline,\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  node._getCachedStatus = async () => nodeNotCached._getCachedStatus();\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from(\n      [nodeNetworkId, ...(parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [])].join('-'),\n    );\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (\n      verify(txWithNetworkId, signatures[0], account.id) ||\n      verify(txHashWithNetworkId, signatures[0], account.id)\n    )\n      return [];\n    return [\n      {\n        message:\n          'Signature cannot be verified, please ensure that you transaction have' +\n          ' the correct prefix and the correct private key for the sender address',\n        key: 'InvalidSignature',\n        checkedKeys: ['encodedTx', 'signatures'],\n      },\n    ];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [\n      {\n        message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n        key: 'ExpiredTTL',\n        checkedKeys: ['ttl'],\n      },\n    ];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [\n      {\n        message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n        key: 'InsufficientBalance',\n        checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n      },\n    ];\n  },\n  async (tx, { node }) => {\n    if (tx.tag !== Tag.SpendTx || isAddressValid(tx.recipientId, Encoding.Name)) return [];\n    const recipient = await node.getAccountByPubkey(tx.recipientId).catch((error) => {\n      if (!isAccountNotFoundError(error)) throw error;\n      return null;\n    });\n    if (recipient == null || recipient.payable === true) return [];\n    return [\n      {\n        message: 'Recipient account is not payable',\n        key: 'RecipientAccountNotPayable',\n        checkedKeys: ['recipientId'],\n      },\n    ];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = \"Generalized account can't be used to generate SignedTx with signatures\";\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = \"Basic account can't be used to generate GaMetaTx\";\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type =\n      (oracleCall ? 'oracle-call' : null) ??\n      (contractCreate ? 'contract-create' : null) ??\n      (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion) ||\n      (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [\n        {\n          message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n          key: 'VmAndAbiVersionMismatch',\n          checkedKeys: ['ctVersion', 'abiVersion'],\n        },\n      ];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [\n        {\n          message: `Contract ${tx.contractId} is not active`,\n          key: 'ContractNotActive',\n          checkedKeys: ['contractId'],\n        },\n      ];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [\n        {\n          message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n          key: 'ContractNotFound',\n          checkedKeys: ['contractId'],\n        },\n      ];\n    }\n  },\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator.js';\nimport { ensureError } from './utils/other.js';\nimport { TransactionError } from './utils/errors.js';\nimport Node from './Node.js';\nimport { SignedTx } from './apis/node/index.js';\nimport { Encoded } from './utils/encoder.js';\nimport AccountBase from './account/Base.js';\nimport { buildTxHash } from './tx/builder/index.js';\nimport { poll, waitForTxConfirm } from './chain.js';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(message: string, validation: ValidatorResult[], transaction: Encoded.Transaction) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode,\n    onAccount,\n    verify = true,\n    waitMined = true,\n    confirm,\n    innerTx,\n    ...options\n  }: SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${validation\n        .map((v: { message: string }) => v.message)\n        .join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      {\n        requestOptions: {\n          customHeaders: {\n            // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n            '__retry-code': '400',\n            ...(__queue != null ? { __queue } : {}),\n          },\n        },\n      },\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] &\n  Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'> &\n  Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<SignedTx> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","import { BigNumber } from 'bignumber.js';\nimport { getBalance, resolveName } from './chain.js';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction.js';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder/index.js';\nimport { ArgumentError } from './utils/errors.js';\nimport { Encoded } from './utils/encoder.js';\nimport { Tag, AensName } from './tx/builder/constants.js';\n\n// TODO: name verify should not overlap with transaction verify\ntype ResolveNameOptions = Omit<Parameters<typeof resolveName>[2], 'onNode' | 'verify'>;\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(recipientIdOrName, 'account_pubkey', options),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<\n  Tag.SpendTx,\n  'senderId' | 'recipientId' | 'amount' | 'onNode'\n> &\n  ResolveNameOptions &\n  SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(recipientIdOrName, 'account_pubkey', options);\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(await getBalance.bind(options.onAccount)(senderId, options));\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<\n  Tag.SpendTx,\n  'senderId' | 'recipientId' | 'amount' | 'onNode'\n> &\n  ResolveNameOptions &\n  SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions\n  extends BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>,\n    SendTransactionOptions {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { Tag, AensName, DRY_RUN_ACCOUNT } from '../tx/builder/constants.js';\nimport {\n  buildContractIdByContractTx,\n  unpackTx,\n  buildTxAsync,\n  BuildTxOptions,\n  buildTxHash,\n} from '../tx/builder/index.js';\nimport { decode, Encoded } from '../utils/encoder.js';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors.js';\nimport { hash as calcHash } from '../utils/crypto.js';\nimport {\n  ContractCallObject as NodeContractCallObject,\n  Event as NodeEvent,\n} from '../apis/node/index.js';\nimport CompilerBase, { Aci } from './compiler/Base.js';\nimport Node from '../Node.js';\nimport { getAccount, getContract, getContractByteCode, resolveName, txDryRun } from '../chain.js';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction.js';\nimport { TxUnpacked } from '../tx/builder/schema.generated.js';\nimport { Optional, isAccountNotFoundError } from '../utils/other.js';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers.js';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends NodeContractCallObject {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase {\n  [key: string]: (...args: any[]) => any;\n}\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]: M[Name] extends (...args: infer Args) => infer Ret\n    ? (\n        ...args: [\n          ...Args,\n          ...(\n            | []\n            | [\n                Name extends 'init'\n                  ? Parameters<Contract<M>['$deploy']>[1]\n                  : Parameters<Contract<M>['$call']>[2],\n              ]\n          ),\n        ]\n      ) => Promise<\n        Omit<Awaited<ReturnType<Contract<M>['$call']>>, 'decodedResult'> & {\n          // TODO: accurate would be to add `| undefined` because of `waitMined`, but better to drop `waitMined`\n          decodedResult: Ret;\n        }\n      >\n    : never;\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = (keyof M & string) | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> = Fn extends 'init'\n  ? M extends { init: any }\n    ? Parameters<M['init']>\n    : []\n  : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await Contract.initialize({ ...aeSdk.getContext(), sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null)\n      throw new IllegalArgumentError(\"Can't compile without compiler\");\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler.compileBySourceCode(\n        this.$options.sourceCode,\n        this.$options.fileSystem,\n      );\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError(\"Can't compile without sourceCode and sourceCodePath\");\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        if (/Expected \\d+ arguments, got \\d+/.test(message)) {\n          throw new BytecodeMismatchError('ACI', `. Error provided by node: \"${message}\".`);\n        }\n        if (/Trying to call undefined function: <<\\d+,\\d+,\\d+,\\d+>>/.test(message)) {\n          throw new BytecodeMismatchError(\n            'ACI',\n            `. Error provided by node: \"${message}\", function name: ${fnName}.`,\n          );\n        }\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      // TODO: disallow `waitMined: false` to make `decodedResult` required\n      ...(txData.blockHeight != null &&\n        (await this.$getCallResultByTxHash(txData.hash, fnName, options))),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2] &\n      Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<\n    Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }\n  > {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError(\"Can't deploy without account\");\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null)\n      throw new IllegalArgumentError(\"Can't deploy without bytecode\");\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? (await this._estimateGas('init', params, opt)),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(tx, 'init', {\n      ...opt,\n      onAccount: opt.onAccount,\n    });\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...(other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      }),\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find((f: { name: string }) => f.name === name);\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [],\n        name: 'init',\n        payable: false,\n        returns: 'unit',\n        stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>> &\n      Parameters<Contract<M>['$decodeEvents']>[1] &\n      Optional<SendTransactionOptions, 'onAccount' | 'onNode'> &\n      Omit<Parameters<typeof txDryRun>[2], 'onNode'> & { callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true)\n      throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount =\n        callStatic === true &&\n        ((error instanceof TypeError &&\n          error.message ===\n            'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead') ||\n          error instanceof NoWalletConnectedError ||\n          (error instanceof InternalError && error.message === 'Use fallback account'));\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null)\n          throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt,\n          tag: Tag.ContractCreateTx,\n          code: this.$options.bytecode,\n          ownerId: callerId,\n        });\n      } else {\n        if (contractId == null)\n          throw new MissingContractAddressError(\"Can't dry-run contract without address\");\n        tx = await buildTxAsync({\n          ...txOpt,\n          tag: Tag.ContractCallTx,\n          callerId,\n          contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null)\n      throw new IllegalArgumentError(\"Can't handle `top` option in on-chain contract call\");\n    if (contractId == null)\n      throw new MissingContractAddressError(\"Can't call contract without address\");\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? (await this._estimateGas(fn, params, opt)),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null)\n      throw new IllegalArgumentError(\"Can't call contract on chain without account\");\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) =>\n        events.map((event: {}) => [name, Object.keys(event)[0], Object.values(event)[0]]),\n      )\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0:\n        throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1:\n        return matchedEvents[0][0];\n      default:\n        throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, event.topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, event.topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      })\n      .filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>({\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    address,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n    validateBytecode,\n    ...otherOptions\n  }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n    validateBytecode?: boolean;\n    aci?: Aci;\n    address?: Encoded.ContractAddress | AensName;\n  }): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = (await resolveName(address, 'contract_pubkey', {\n        resolveByNode: true,\n        onNode,\n      })) as Encoded.ContractAddress;\n      if (isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError(\"Can't create instance by ACI without address\");\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null)\n        throw new MissingContractAddressError(\"Can't validate bytecode without contract address\");\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null)\n          throw new IllegalArgumentError(\"Can't validate bytecode without compiler\");\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null)\n          throw new IllegalArgumentError(\"Can't validate bytecode without compiler\");\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError(\n          (sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode',\n        );\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({\n    aci,\n    ...otherOptions\n  }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(\n        `The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`,\n      );\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(\n        this.#aciContract.functions.map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object')\n                throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        }),\n      ),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: (typeof Contract)['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants.js';\nimport {\n  buildContractIdByContractTx,\n  buildTx,\n  buildTxAsync,\n  BuildTxOptions,\n  unpackTx,\n} from '../tx/builder/index.js';\nimport { hash } from '../utils/crypto.js';\nimport { decode, encode, Encoded, Encoding } from '../utils/encoder.js';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors.js';\nimport { concatBuffers } from '../utils/other.js';\nimport Contract from './Contract.js';\nimport Node from '../Node.js';\nimport { getAccount } from '../chain.js';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction.js';\nimport CompilerBase from './compiler/Base.js';\nimport { packEntry } from '../tx/builder/entry/index.js';\nimport { EntryTag } from '../tx/builder/entry/constants.js';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount,\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n    ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<\n  Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>\n> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount,\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? (await contract._estimateGas('init', args, options)),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode,\n    onAccount,\n    onCompiler,\n    ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions\n  extends BuildTxOptions<\n      Tag.GaAttachTx,\n      'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit' | 'onNode'\n    >,\n    SendTransactionOptions,\n    Pick<\n      Parameters<typeof Contract.initialize>[0],\n      'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n    > {\n  onCompiler: CompilerBase;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(\n      decode(\n        packEntry({\n          tag: EntryTag.GaMetaTxAuthData,\n          fee,\n          gasPrice,\n          txHash: encode(payload, Encoding.TxHash),\n        }),\n      ),\n    );\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain.js';\nimport { sendTransaction } from './send-transaction.js';\nimport * as spendMethods from './spend.js';\nimport * as contractGaMethods from './contract/ga.js';\nimport { buildTxAsync } from './tx/builder/index.js';\nimport { mapObject, UnionToIntersection } from './utils/other.js';\nimport { wrapWithProxy } from './utils/wrap-proxy.js';\nimport Node from './Node.js';\nimport { TxParamsAsync } from './tx/builder/schema.generated.js';\nimport AccountBase from './account/Base.js';\nimport { Encoded } from './utils/encoder.js';\nimport CompilerBase from './contract/compiler/Base.js';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...spendMethods,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions<Methods extends { [key: string]: Function }> = {\n  [Name in keyof Methods]: Methods[Name] extends (...args: infer Args) => any\n    ? Args[Decrement<Args['length']>]\n    : never;\n};\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    // TODO: remove `any` at the same time as AeSdk class\n    return buildTxAsync({ ...(this.getContext() as any), ...options });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K;\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n      /**\n       * Make operation on specific account by providing address (to use account from sdk) or instance\n       * of AccountBase (like MemoryAccount)\n       */\n      onAccount: OnAccount;\n    }\n  : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<\n  [Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>]\n>;\n\ntype TransformMethods<Methods extends { [key: string]: Function }> = {\n  [Name in keyof Methods]: Methods[Name] extends (\n    ...args: [...infer Args, infer Options]\n  ) => infer Ret\n    ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n    : never;\n};\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(\n  AeSdkMethods.prototype,\n  mapObject<Function, Function>(methods, ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ]),\n);\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node.js';\nimport AccountBase from './account/Base.js';\nimport {\n  CompilerError,\n  DuplicateNodeError,\n  NodeNotFoundError,\n  NotImplementedError,\n  TypeError,\n} from './utils/errors.js';\nimport { Encoded } from './utils/encoder.js';\nimport { wrapWithProxy } from './utils/wrap-proxy.js';\nimport CompilerBase from './contract/compiler/Base.js';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods.js';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor({\n    nodes = [],\n    ...options\n  }: AeSdkMethodsOptions & {\n    nodes?: Array<{ name: string; instance: Node }>;\n  } = {}) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError(\"You can't use Compiler API. Compiler is not ready!\");\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError(\"You can't use Node API. Node is not connected or not defined!\");\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...(await this.api.getNodeInfo()),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...(await node.getNodeInfo()),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), ' +\n        `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   * @deprecated Use `unsafeSign` method instead\n   */\n  async sign(\n    data: string | Uint8Array,\n    options: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this.unsafeSign(data, options);\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async unsafeSign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).unsafeSign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??=\n      this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...(mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      }),\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase.js';\nimport { OnAccount } from './AeSdkMethods.js';\nimport AccountBase from './account/Base.js';\nimport { decode, Encoded } from './utils/encoder.js';\nimport { UnavailableAccountError } from './utils/errors.js';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  /**\n   * @param options - Options\n   */\n  constructor({\n    accounts,\n    ...options\n  }: { accounts?: AccountBase[] } & ConstructorParameters<typeof AeSdkBase>[0] = {}) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema.js';\nimport BrowserConnection from '../connection/Browser.js';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors.js';\nimport { ensureError } from '../../utils/other.js';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>;\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient<\n  RemoteApi extends RpcApi<RemoteApi>,\n  LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = new Map<\n    number,\n    { resolve: (v: any) => void; reject: (e: Error) => void }\n  >();\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...(id != null ? { id } : {}),\n      method,\n      ...(params != null ? { params } : {}),\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...(error != null ? { error: error.toJSON() } : { result }),\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest((this.#messageId += 1), name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { Encoded } from '../../utils/encoder.js';\nimport { Domain, AciValue } from '../../utils/typed-data.js';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema.js';\nimport { SignedTx } from '../../apis/node/index.js';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport type NetworkToSelect = { networkId: string } | { nodeUrl: string };\n\nexport interface WalletApi {\n  [METHODS.connect]: (p: {\n    name: string;\n    icons?: Icons;\n    version: typeof RPC_VERSION;\n    connectNode: boolean;\n  }) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (p: {\n    type: SUBSCRIPTION_TYPES;\n    value: 'connected' | 'current';\n  }) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.unsafeSign]: (p: {\n    data: Encoded.Bytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.sign]: (p: {\n    tx: Encoded.Transaction;\n    onAccount: Encoded.AccountAddress;\n    returnSigned: boolean;\n    /**\n     * @deprecated Wallet provided networkId will be used (current network)\n     * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n     * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n     */\n    networkId: string;\n    innerTx?: boolean;\n  }) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<SignedTx> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>;\n\n  [METHODS.signMessage]: (p: {\n    message: string;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (p: {\n    domain: Domain;\n    aci: AciValue;\n    data: Encoded.ContractBytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (p: {\n    delegation: Encoded.Bytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.updateNetwork]: (a: NetworkToSelect) => Promise<null>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import JsonBig from 'json-bigint';\nimport { BigNumber } from 'bignumber.js';\nimport { mapObject } from './other.js';\n\nconst jsonBig = JsonBig({ storeAsString: true });\n\nconst convertValuesToBigNumbers = (value: any): any => {\n  if (typeof value === 'object' && value !== null && value.constructor === Object) {\n    return mapObject(value, ([k, v]) => [k, convertValuesToBigNumbers(v)]);\n  }\n  if (Array.isArray(value)) {\n    return value.map((item) => convertValuesToBigNumbers(item));\n  }\n  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {\n    const bn = new BigNumber(value);\n    bn.toJSON = () => bn.toString(10);\n    return bn;\n  }\n  return value;\n};\n\nexport default {\n  stringify: (...args: Parameters<(typeof JsonBig)['stringify']>): string =>\n    jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1)),\n  parse: jsonBig.parse,\n};\n","import nacl from 'tweetnacl';\nimport AeSdk from './AeSdk.js';\nimport verifyTransaction from './tx/validator.js';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient.js';\nimport {\n  METHODS,\n  RPC_STATUS,\n  SUBSCRIPTION_TYPES,\n  WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError,\n  RpcPermissionDenyError,\n  RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema.js';\nimport { InternalError, UnknownRpcClientError } from './utils/errors.js';\nimport AccountBase from './account/Base.js';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser.js';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  NetworkToSelect,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types.js';\nimport { Encoded, Encoding, encode, decode } from './utils/encoder.js';\nimport jsonBig from './utils/json-big.js';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string,\n  params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>,\n  origin: string,\n) => void;\n\ntype OnSubscription = (\n  clientId: string,\n  params: Parameters<WalletApi[METHODS.subscribeAddress]>[0],\n  origin: string,\n) => void;\n\ntype OnDisconnect = (\n  clientId: string,\n  params: Parameters<WalletApi[METHODS.closeConnection]>[0],\n) => void;\n\ntype OnAskAccounts = (clientId: string, params: undefined, origin: string) => void;\n\ntype OnAskToSelectNetwork = (clientId: string, params: NetworkToSelect, origin: string) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  onAskToSelectNetwork: OnAskToSelectNetwork;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onAskToSelectNetwork - Call-back function for incoming AEPP select network\n   * request. If the request is fine then this function should change the current network.\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    onAskToSelectNetwork,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n    onAskToSelectNetwork: OnAskToSelectNetwork;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.onAskToSelectNetwork = onAskToSelectNetwork;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _getAccountsForClient({ addressSubscription }: RpcClientsInfo): Accounts {\n    const { current, connected } = this.getAccounts();\n    return {\n      current:\n        addressSubscription.has('current') || addressSubscription.has('connected') ? current : {},\n      connected: addressSubscription.has('connected') ? connected : {},\n    };\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .filter((client) => client.addressSubscription.size !== 0)\n      .forEach((client) =>\n        client.rpc.notify(METHODS.updateAddress, this._getAccountsForClient(client)),\n      );\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...(client.connectNode && this._getNode()),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return (\n      RPC_STATUS.CONNECTED === this._getClient(clientId).status &&\n      this._getClient(clientId).rpc.connection.isConnected()\n    );\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = Buffer.from(nacl.randomBytes(8)).toString('base64');\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({ name, version, icons, connectNode }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...(await this.getWalletInfo()),\n              ...(connectNode && this._getNode()),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                // TODO: remove `type` as it always subscribe\n                await this.onSubscription(id, { type, value }, origin);\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this._getAccountsForClient(client),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            { tx, onAccount = this.address, returnSigned, innerTx },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount,\n              aeppOrigin: origin,\n              aeppRpcClientId: id,\n              innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(\n                jsonBig.stringify({\n                  transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n                }),\n              );\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async (\n            { domain, aci, data, onAccount = this.address },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain,\n              onAccount,\n              aeppOrigin: origin,\n              aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n          [METHODS.unsafeSign]: async ({ data, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = encode(\n              await this.unsafeSign(decode(data), parameters),\n              Encoding.Signature,\n            );\n            return { signature };\n          },\n          [METHODS.signDelegation]: async ({ delegation, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await this.signDelegation(delegation, parameters);\n            return { signature };\n          },\n          [METHODS.updateNetwork]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskToSelectNetwork(id, params, origin);\n            return null;\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    const { origin } = window.location;\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: origin === 'file://' ? '*' : origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(value, (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v), 2);\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=429c3b06\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=b43a3c46&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\nimport \"./App.vue?vue&type=style&index=1&id=b43a3c46&lang=scss&scoped=true\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-b43a3c46\"]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwallet_iframe\"] = self[\"webpackChunkwallet_iframe\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(61399); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["class","_createElementBlock","_Fragment","_createElementVNode","id","type","_createTextVNode","for","_hoisted_1","novalidate","onSubmit","_cache","_withModifiers","args","$options","navigate","$event","_ctx","nextAeppUrl","onFocus","target","select","_toDisplayString","address","nodeName","_createVNode","_component_Value","value","balancePromise","clientStatus","clientId","onClick","switchAccount","switchNode","key","disconnect","stopSharingWalletInfo","shareWalletInfo","runningInFrame","_createCommentVNode","ref","src","aeppUrl","_hoisted_2","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","TxTimedOutError","blocks","th","TypeError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","UnknownRpcClientError","BytecodeMismatchError","source","details","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","join","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","connect","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcNoNetworkById","networkId","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","_classPrivateFieldSet","listener","_message$data$jsonrpc","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","AccountBase","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","AccountSecretKey","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","encode","decode","string","base58","bs58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","isAddressValid","maybeEncoded","encodings","encoding","hash","blake2b","verify","signature","nacl","detached","encodeVarUInt","Uint16Array","Uint32Array","BigUint64Array","BigInt","messagePrefix","messagePrefixLength","messageToHash","hashJson","_canonicalize","canonicalize","hashDomain","domain","domainAci","record","option","domainType","TypeResolver","resolveType","fateValue","ContractByteArrayEncoder","encodeWithType","hashTypedData","aci","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","ProtocolToVmAbi","Ceres","vmVersion","Fate3","abiVersion","Fate","NoAbi","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","Fate2","serialize","params","consensusProtocolVersion","_value","prepare","keys","onNode","getNodeInfo","vm","abi","_getProtocolDetails","c","kind","ContractCallTx","GaMetaTx","result","toBytes","val","big","Number","isInteger","isBigNumber","toFixed","hexString","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","at","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","uInt","serializeAettos","genEncodedField","optional","encodedData","genEntryField","txParams","packEntry","ArrayBuffer","isView","startsWith","unpackEntry","genEnumerationField","enm","values","filter","v","gasPriceCache","getCachedIncreasedGasPrice","node","cache","get","time","Date","now","gasPrice","minGasPrice","utilization","getRecentGasPrices","integerValue","maxSafeGasPrice","warn","set","coinAmount","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ContractCreateTx","GaAttachTx","PayingForTx","factor","TX_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleRespondTx","ceil","floor","getOracleRelativeTtl","ttlKeys","buildGas","builtTx","unpackTx","buildTx","txObject","tx","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","gasPricePrefix","_computingMinFee","_canIncreaseFee","minFee","dividedBy","replace","gt","calculateGasLimitMax","gasMax","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","field","txFields","parameters","addressName","genNonceField","senderKey","strategy","senderId","getAccountNextNonce","catch","nextNonce","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","addressAny","allowRaw","pointers","bKey","bId","oracleId","getOracleByPubkey","queryFee","genShortUIntConstField","constValue","constValueOptional","genTransactionField","wrapWithProxy","valueCb","Proxy","res","Reflect","bind","unwrapProxy","_wrappedValue","_getPollInterval","_expectedMineRate","_microBlockCycle","_ref","_await$getVal","getVal","devModeDef","def","getNetworkId","base","heightCache","getHeight","cached","height","getCurrentKeyBlockHeight","poll","interval","_interval","max","getTransactionByHash","blockHeight","ttl","awaitHeight","_interval2","currentHeight","waitForTxConfirm","confirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","getBalance","format","addr","balance","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","Map","txDryRunHandler","rs","delete","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accounts","Array","Set","accountAddress","pubKey","forEach","reject","results","reason","resultPayload","idx","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","pointer","p","absoluteTtl","_isInternalBuild","withDefault","defaultValue","withFormatting","CallReturnType","EntryTag","ORACLE_TTL_TYPES","transactionAny","transactionSignedTx","SignedTx","entryTreesPoi","entry","TreesPoi","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","signatures","raw","SpendTx","recipientId","encoded","NamePreclaimTx","accountId","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","NameTransferTx","NameRevokeTx","ctVersion","deposit","callData","callerId","queryFormat","responseFormat","oracleTtlType","delta","enumeration","oracleTtlValue","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","ChannelSnapshotSoloTx","authFun","gaId","authData","payerId","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","binary","rlpEncode","unpackRecord","encodedRecord","expectedTag","rlpDecode","index","genMapField","Mtree","MtreeValue","recursiveType","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackEntry","_MPTree_brand","WeakSet","MPTree","isComplete","unpEnt","_classPrivateMethodInitSpec","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","d","_assertClassBrand","_getRaw","toObject","_entriesRaw","k","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","entryMtreeValueArray","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","flags","gaContract","gaAuthFun","status","owner","active","boolean","referers","callerNonce","gasUsed","returnValue","returnType","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelOffChainUpdateTransfer","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","contract","callStack","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","GaMetaTxAuthData","encodingTag","_encodingTag$find$","_expectedTag","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","getBufferToSign","innerTx","prefixes","rlpBinaryTx","_secretKeyDecoded","AccountMemory","secretKey","keyPair","fromSeed","publicKey","generate","sign","unsafeSign","signTransaction","txWithNetworkId","signMessage","signTypedData","dHash","signDelegation","delegation","DelegationTag","oracleAddressField","queryIdField","AensWildcard","AensName","AensPreclaim","unpackDelegation","verCmp","a","b","getComponents","i","aComponents","bComponents","componentsToNumber","components","reverse","reduce","acc","semverSatisfies","bigIntPrefix","createSerializer","serializer","createSerializerOrig","mapper","objectName","_objectName","serializedName","responseBody","MAX_SAFE_INTEGER","safeLength","bigIntPropertyRe","RegExp","String","bigIntArrayItemRe","parseBigIntPolicy","sendRequest","request","next","bodyAsText","replaceAll","matched","match","end","genRequestQueuesPolicy","requestQueues","policy","_requestQueues$get","headers","getResponse","then","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","method","JSON","stringify","url","body","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","parsedBody","genVersionCheckPolicy","versionCb","ignoreVersion","has","requestOptions","customHeaders","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","NaN","statusesToNotRetry","intervals","fill","_","intervalSum","intervalsInMs","e","attempt","urlParsed","searchParams","_e$response$status","className","modelProperties","required","constraints","InclusiveMinimum","InclusiveMaximum","payable","allowedValues","ErrorModel","errorCode","NextNonceResponse","SignedTxs","element","blockHash","Tx","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","Delegates","OffChainUpdate","uberParent","polymorphicDiscriminator","clientName","op","RelativeTTL","isConstant","Ttl","NamePointer","encodedKey","AuctionEntry","startedAt","endsAt","highestBidder","highestBid","ContractObject","referrerIds","ByteCode","bytecode","PoI","Currency","symbol","subunit","subunitsPerUnit","fiatConverstionUrl","fiatConversionUrl","logo","primaryColour","secondaryColour","networkName","Image","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","Event","topics","Generation","keyBlock","microBlocks","KeyBlock","prevHash","prevKeyHash","miner","beneficiary","pow","MinItems","MaxItems","info","Header","pofHash","txsHash","PinningTx","epoch","parentPayload","lastLeader","parentType","parentNetworkId","HCContractPubkeys","staking","election","rewards","HashResponse","HeightResponse","MicroBlockHeader","CountResponse","count","NameEntry","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","PeerPubKey","pubkey","GasPricesItem","minutes","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","uptime","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","SyncStatus","progress","speed","estimate","EncodedTx","PostTxResponse","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","ChannelSetDelegatesTx","CheckTxInPoolResponse","CommitmentId","UnsignedTx","GAAttachTx","GAMetaTx","NameHash","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","PeerCount","connected","available","blocked","PeerCountConnected","PeerCountAvailable","verified","unverified","Peers","peers","PubKey","TokenSupply","contractOracles","locked","pendingRewards","total","OffChainCallContract","OffChainDeposit","OffChainNewContract","OffChainTransfer","OffChainWithdrawal","CreateContractUnsignedTx","discriminators","accept","parameterPath","$host","skipEncoding","contentType","DryRunInputMapper","nameHash","fromParam","limit","typeParam","body1","EncodedTxMapper","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","sendOperationRequest","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHashOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountNextNonceOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAuctionEntryByName","getAuctionEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getCurrency","getCurrencyOperationSpec","protectedDryRunTxsOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getTopHeader","getTopHeaderOperationSpec","getPinningTx","getPinningTxOperationSpec","getHyperchainContractPubkeys","getHyperchainContractPubkeysOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getNameEntryByNameOperationSpec","getNameEntryByNameHash","getNameEntryByNameHashOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getRecentGasPricesOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","getSyncStatus","getSyncStatusOperationSpec","postTransaction","postTransactionOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","Mappers","httpMethod","responses","bodyMapper","isError","urlParameters","Parameters","headerParameters","queryParameters","requestBody","mediaType","_ignoreVersion","_cachedStatusPromise","NodeApi","getVersion","_getCachedStatus","opts","allowInsecureConnection","additionalPolicies","pipeline","addPolicy","phase","removePolicy","userAgentPolicyName","setClientRequestIdPolicyName","promise","nodeNetworkId","versions","getTransactionSignerAddress","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","recipient","_ref2","oracleCall","contractCreate","contractCall","parse","InvalidTxError","validation","sendTransaction","txUnsigned","onAccount","waitMined","__queue","pollResult","txData","confirmationHeight","verifyTx","spend","recipientIdOrName","transferFunds","fraction","desiredAmount","ROUND_HALF_UP","plus","minus","payForTransaction","_Contract_brand","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","compile","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult","_estimateGas","$call","callStatic","$deploy","_opt$gasLimit","opt","_calldata","_name","_sendAndProcess","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent","decoded","decodeEvent","initialize","validateBytecode","otherOptions","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","Calldata","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","contractAddressToName","addressToName","variant","eventName","calcHash","arr","some","createGeneralizedAccount","authFnName","_options$gasLimit","freeze","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","methods","chainMethods","spendMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","getContext","mergeWith","prototype","handler","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","compilerApi","_resolveAccount","ensureNodeConnected","pool","selectedNodeName","selectNode","isNodeConnected","getNodesInPool","addresses","_options$networkId","AeSdk","addAccount","selectedAddress","selectAccount","removeAccount","_callbacks","_messageId","_methods","_RpcClient_brand","RpcClient","connection","_handleMessage","_sendRequest","notify","_processResponse","methodName","_sendResponse","callbacks","RPC_VERSION","jsonBig","JsonBig","storeAsString","convertValuesToBigNumbers","isArray","bn","AeSdkWallet","onConnection","onSubscription","onAskAccounts","onAskToSelectNetwork","_type","_getAccountsForClient","addressSubscription","current","getAccounts","_pushAccountsToApps","_clients","_isRpcClientConnected","_getClient","client","size","rpc","updateAddress","_getNode","updateNetwork","connectNode","CONNECTED","_disconnectRpcClient","DISCONNECTED","removeRpcClient","addRpcClient","clientConnection","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","icons","getWalletInfo","subscribeAddress","subscribe","add","unsubscribe","subscription","returnSigned","aeppOrigin","aeppRpcClientId","signedTransaction","transactionHash","readyToConnect","location","_normalizeClass","text","props","default","watch","valueToString","immediate","__exports__","Value","process","parent","$nextTick","attempts","$refs","aepp","contentWindow","aeSdk","intervalId","setInterval","clearInterval","names","updateClientStatus","mounted","aeppInfo","genConfirmCallback","actionName","aeppId","AccountMemoryProtected","MemoryAccount","unpackedTx","dataType","decodedData","decodeWithType","nodeUrl","$watch","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}