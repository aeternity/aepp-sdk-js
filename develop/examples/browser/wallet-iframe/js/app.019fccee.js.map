{"version":3,"file":"js/app.019fccee.js","mappings":"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","sources":["webpack://wallet-iframe/./src/App.vue","webpack://wallet-iframe/../../src/utils/errors.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://wallet-iframe/../../src/aepp-wallet-communication/schema.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://wallet-iframe/../../src/account/Base.ts","webpack://wallet-iframe/../../src/utils/other.ts","webpack://wallet-iframe/../../src/utils/encoder-types.ts","webpack://wallet-iframe/../../src/utils/encoder.ts","webpack://wallet-iframe/../../src/utils/crypto.ts","webpack://wallet-iframe/../../src/utils/typed-data.ts","webpack://wallet-iframe/../../../src/tx/builder/constants.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ct-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/abi-version.ts","webpack://wallet-iframe/../../src/utils/bytes.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/address.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/array.ts","webpack://wallet-iframe/../../../src/tx/builder/helpers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/u-int.ts","webpack://wallet-iframe/../../src/utils/bignumber.ts","webpack://wallet-iframe/../../src/utils/amount-formatter.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/encoded.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/entry.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/enumeration.ts","webpack://wallet-iframe/../../src/utils/semver-satisfies.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-price.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/field.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-id.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/nonce.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers2.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/query-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/raw.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/string.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/transaction.ts","webpack://wallet-iframe/../../src/utils/wrap-proxy.ts","webpack://wallet-iframe/../src/chain.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ttl.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-default.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/constants.ts","webpack://wallet-iframe/../../../src/tx/builder/schema.ts","webpack://wallet-iframe/../../../src/tx/builder/common.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/boolean.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/map.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/mptree.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/wrapped.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/index.ts","webpack://wallet-iframe/../../../src/tx/builder/index.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/index.ts","webpack://wallet-iframe/../../src/account/Memory.ts","webpack://wallet-iframe/../../src/utils/autorest.ts","webpack://wallet-iframe/../../../../src/apis/node/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/node/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/node/node.ts","webpack://wallet-iframe/../src/Node.ts","webpack://wallet-iframe/../../src/tx/transaction-signer.ts","webpack://wallet-iframe/../../src/tx/execution-cost.ts","webpack://wallet-iframe/../../src/tx/validator.ts","webpack://wallet-iframe/../src/send-transaction.ts","webpack://wallet-iframe/../src/aens.ts","webpack://wallet-iframe/../src/spend.ts","webpack://wallet-iframe/../../src/contract/delegation-signature.ts","webpack://wallet-iframe/../../src/contract/Contract.ts","webpack://wallet-iframe/../../src/contract/ga.ts","webpack://wallet-iframe/../src/AeSdkMethods.ts","webpack://wallet-iframe/../src/AeSdkBase.ts","webpack://wallet-iframe/../src/AeSdk.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://wallet-iframe/../../src/utils/json-big.ts","webpack://wallet-iframe/../src/AeSdkWallet.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/compiler/compiler.ts","webpack://wallet-iframe/../../../src/contract/compiler/Base.ts","webpack://wallet-iframe/../../../src/contract/compiler/Http.ts","webpack://wallet-iframe/./src/Value.vue","webpack://wallet-iframe/./src/Value.vue?2a90","webpack://wallet-iframe/./src/App.vue?7ccd","webpack://wallet-iframe/./src/main.js","webpack://wallet-iframe/webpack/bootstrap","webpack://wallet-iframe/webpack/runtime/chunk loaded","webpack://wallet-iframe/webpack/runtime/define property getters","webpack://wallet-iframe/webpack/runtime/global","webpack://wallet-iframe/webpack/runtime/hasOwnProperty shorthand","webpack://wallet-iframe/webpack/runtime/make namespace object","webpack://wallet-iframe/webpack/runtime/jsonp chunk loading","webpack://wallet-iframe/webpack/startup"],"sourcesContent":["<template>\n  <input id=\"toggle-aepp\" type=\"checkbox\" />\n  <h2>\n    Wallet Iframe\n    <label for=\"toggle-aepp\" />\n  </h2>\n\n  <div class=\"group\">\n    <div>\n      <div>Aepp URL</div>\n      <form\n        novalidate\n        @submit.prevent=\"navigate\"\n      >\n        <input\n          type=\"url\"\n          v-model=\"nextAeppUrl\"\n          @focus=\"$event.target.select()\"\n        >\n      </form>\n    </div>\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Node</div>\n      <div>{{ nodeName }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>RPC client</div>\n      <div>status: {{ clientStatus ?? 'no client' }}, id: {{ clientId ?? 'not defined' }}</div>\n    </div>\n\n    <button @click=\"switchAccount\">Switch Account</button>\n    <button @click=\"switchNode\">Switch Node</button>\n\n    <button\n      v-if=\"clientStatus === 'CONNECTED'\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else\n      @click=\"() => (stopSharingWalletInfo ?? shareWalletInfo)()\"\n    >\n      {{ stopSharingWalletInfo ? 'Stop sharing' : 'Share wallet info' }}\n    </button>\n  </div>\n\n  <iframe\n    v-if=\"!runningInFrame\"\n    ref=\"aepp\"\n    :src=\"aeppUrl\"\n  />\n</template>\n\n<script>\nimport {\n  MemoryAccount, generateKeyPair, AeSdkWallet, Node, CompilerHttp,\n  BrowserWindowMessageConnection, METHODS, WALLET_TYPE, RPC_STATUS,\n  RpcConnectionDenyError, RpcRejectedByUserError, unpackTx, unpackDelegation,\n} from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    nextAeppUrl: process.env.VUE_APP_AEPP_URL ?? `http://${location.hostname}:9001`,\n    aeppUrl: '',\n    runningInFrame: window.parent !== window,\n    nodeName: '',\n    address: '',\n    balancePromise: null,\n    clientId: null,\n    clientStatus: null,\n    stopSharingWalletInfo: null,\n  }),\n  methods: {\n    navigate() {\n      if (!/^https?:\\/\\//.test(this.nextAeppUrl) && !this.nextAeppUrl.startsWith('.')) {\n        this.nextAeppUrl = 'http://' + this.nextAeppUrl;\n      }\n      this.aeppUrl = '';\n      this.$nextTick(() => {\n        this.aeppUrl = this.nextAeppUrl;\n      });\n    },\n    shareWalletInfo({ interval = 5000, attempts = 5 } = {}) {\n      const target = this.runningInFrame ? window.parent : this.$refs.aepp.contentWindow;\n      const connection = new BrowserWindowMessageConnection({ target });\n      this.clientId = this.aeSdk.addRpcClient(connection);\n\n      this.aeSdk.shareWalletInfo(this.clientId);\n      const intervalId = setInterval(() => {\n        this.aeSdk.shareWalletInfo(this.clientId);\n        attempts -= 1;\n        if (!attempts) return this.stopSharingWalletInfo();\n      }, interval);\n\n      this.stopSharingWalletInfo = () => {\n        clearInterval(intervalId);\n        // TODO: replace with clientStatus\n        const client = this.aeSdk._getClient(this.clientId);\n        if (client.status === RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST) {\n          this.aeSdk.removeRpcClient(this.clientId);\n        }\n        this.stopSharingWalletInfo = null;\n      }\n    },\n    disconnect() {\n      // TODO: move to removeRpcClient (would be a semi-breaking change)\n      const client = this.aeSdk._getClient(this.clientId);\n      if (client.status === RPC_STATUS.CONNECTED) {\n        client.rpc.notify(METHODS.closeConnection, null);\n      }\n\n      this.aeSdk.removeRpcClient(this.clientId);\n      this.clientId = null;\n    },\n    async switchAccount() {\n      this.address = this.aeSdk.addresses().find((a) => a !== this.address);\n      this.aeSdk.selectAccount(this.address);\n    },\n    async switchNode() {\n      const names = (await this.aeSdk.getNodesInPool()).map(({ name }) => name);\n      this.nodeName = names[(names.indexOf(this.nodeName) + 1) % names.length];\n      this.aeSdk.selectNode(this.nodeName);\n    },\n    updateClientStatus() {\n      if (!this.clientId) {\n        this.clientStatus = null;\n        return;\n      }\n      const client = this.aeSdk._getClient(this.clientId);\n      this.clientStatus = client.status;\n    },\n  },\n  mounted() {\n    this.navigate();\n\n    const aeppInfo = {};\n    const genConfirmCallback = (actionName) => (aeppId, parameters, origin) => {\n      if (!confirm([\n        `Client ${aeppInfo[aeppId].name} with id ${aeppId} at ${origin} want to ${actionName}`,\n        Value.methods.valueToString(parameters),\n      ].join('\\n'))) {\n        throw new RpcRejectedByUserError();\n      }\n    };\n\n    class AccountMemoryProtected extends MemoryAccount {\n      async signTransaction(tx, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          const opt = { ...options, unpackedTx: unpackTx(tx) };\n          if (opt.onCompiler) opt.onCompiler = '<Compiler>';\n          if (opt.onNode) opt.onNode = '<Node>';\n          genConfirmCallback(`sign transaction ${tx}`)(id, opt, aeppOrigin);\n        }\n        return super.signTransaction(tx, options);\n      }\n\n      async signMessage(message, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign message ${message}`)(id, options, aeppOrigin);\n        }\n        return super.signMessage(message, options);\n      }\n\n      async signTypedData(data, aci, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const dataType = new TypeResolver().resolveType(aci);\n          const decodedData = new ContractByteArrayEncoder().decodeWithType(data, dataType);\n          const opt = { ...options, aci, decodedData };\n          genConfirmCallback(`sign typed data ${data}`)(id, opt, aeppOrigin);\n        }\n        return super.signTypedData(data, aci, options);\n      }\n\n      async signDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation to contract')(id, opt, aeppOrigin);\n        }\n        return super.signDelegationToContract(contractAddress, options);\n      }\n\n      async signNameDelegationToContract(\n        contractAddress,\n        name,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, name };\n          genConfirmCallback('sign delegation of name to contract')(id, opt, aeppOrigin);\n        }\n        return super.signNameDelegationToContract(contractAddress, name, options);\n      }\n\n      async signAllNamesDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation of all names to contract')(id, opt, aeppOrigin);\n        }\n        return super.signAllNamesDelegationToContract(contractAddress, options);\n      }\n\n      async signOracleQueryDelegationToContract(\n        contractAddress,\n        oracleQueryId,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, oracleQueryId };\n          genConfirmCallback('sign delegation of oracle query to contract')(id, opt, aeppOrigin);\n        }\n        return super.signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n      }\n\n      async sign(data, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign raw data ${data}`)(id, options, aeppOrigin);\n        }\n        return super.sign(data, options);\n      }\n\n      async signDelegation(delegation, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const opt = { ...options, ...unpackDelegation(delegation) };\n          genConfirmCallback('sign delegation')(id, opt, aeppOrigin);\n        }\n        return super.signDelegation(delegation, options);\n      }\n\n      static generate() {\n        // TODO: can inherit parent method after implementing https://github.com/aeternity/aepp-sdk-js/issues/1672\n        return new AccountMemoryProtected(generateKeyPair().secretKey);\n      }\n    }\n\n    this.aeSdk = new AeSdkWallet({\n      id: window.origin,\n      type: WALLET_TYPE.window,\n      nodes: [\n        { name: 'ae_uat', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'ae_mainnet', instance: new Node('https://mainnet.aeternity.io') },\n        { name: 'ae_next', instance: new Node('https://next.aeternity.io') },\n      ],\n      accounts: [\n        new AccountMemoryProtected('9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200'),\n        AccountMemoryProtected.generate(),\n      ],\n      onCompiler: new CompilerHttp('https://v7.compiler.aepps.com'),\n      name: 'Wallet Iframe',\n      onConnection: (aeppId, params, origin) => {\n        if (!confirm(`Client ${params.name} with id ${aeppId} at ${origin} want to connect`)) {\n          throw new RpcConnectionDenyError();\n        }\n        aeppInfo[aeppId] = params;\n        setTimeout(() => this.stopSharingWalletInfo());\n      },\n      onSubscription: genConfirmCallback('subscription'),\n      onAskAccounts: genConfirmCallback('get accounts'),\n      onDisconnect: (clientId) => {\n        console.log('disconnected client', clientId);\n        this.clientId = null;\n      },\n    });\n\n    if (this.runningInFrame) this.shareWalletInfo();\n\n    this.nodeName = this.aeSdk.selectedNodeName;\n    [this.address] = this.aeSdk.addresses();\n\n    this.$watch(\n      ({ address, nodeName }) => [address, nodeName],\n      ([address]) => {\n        this.balancePromise = this.aeSdk.getBalance(address);\n      },\n      { immediate: true },\n    );\n\n    // TODO: replace setInterval with subscription after refactoring\n    setInterval(() => this.updateClientStatus(), 1000);\n    this.$watch(({ clientId }) => [clientId], () => this.updateClientStatus(), { immediate: true });\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n\n<style lang=\"scss\" scoped>\ninput[id=toggle-aepp] {\n  display: none;\n}\n\nlabel[for=toggle-aepp]::after {\n  font-size: initial;\n  font-weight: initial;\n  text-decoration: underline dotted;\n  cursor: pointer;\n}\n\n@media (max-width: 450px), (max-height: 650px) {\n  input[id=toggle-aepp] {\n    &:checked ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Hide aepp';\n      }\n\n      .group {\n        display: none;\n      }\n    }\n\n    &:not(:checked) ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Show aepp';\n      }\n\n      iframe {\n        display: none;\n      }\n    }\n  }\n}\n</style>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  unsafeSign = 'data.unsafeSign',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegationToContract = 'delegationToContract.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { AensName, ConsensusProtocolVersion, Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\nimport { NotImplementedError } from '../utils/errors';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signTypedData(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signTypedData method');\n  }\n\n  /**\n   * Sign delegation of AENS, oracle operations to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @param options.isOracle - Use to generate an oracle delegation signature in Ceres, otherwise an\n   * AENS preclaim delegation signature would be generated\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of an AENS name to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param name - AENS name to manage by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signNameDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signNameDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of all AENS names to a contract (not available in Iris)\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signAllNamesDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signAllNamesDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of oracle query to a contract\n   *\n   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded\n   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.\n   *\n   * Warning! Implementations needs to ensure that oracle query and contract exists unless\n   * https://github.com/aeternity/aesophia/issues/474 is fixed.\n   *\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param oracleQueryId - Oracle query ID to reply by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signOracleQueryDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signOracleQueryDelegationToContract method');\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegation(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegation method');\n  }\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\n// based on https://stackoverflow.com/a/61108377/6176994\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Signs a message, and then verifies that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9; // TODO: don't use number for ae\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  SignedTx = 11,\n  SpendTx = 12,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelClientReconnectTx = 575,\n  ChannelSnapshotSoloTx = 59,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { EntryTag } from '../entry/constants';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\nexport default function genEntryField<T extends EntryTag = EntryTag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { packEntry }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(packEntry({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackEntry }) {\n      return unpackEntry(encode(buf, Encoding.Bytearray), tag);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","function verCmp(a: string, b: string): number {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const aComponents = getComponents(a);\n  const bComponents = getComponents(b);\n\n  const base = Math.max(...aComponents, ...bComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  return componentsToNumber(aComponents) - componentsToNumber(bComponents);\n}\n\nexport default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion?: string,\n): boolean {\n  return verCmp(version, geVersion) >= 0\n    && (ltVersion == null || verCmp(version, ltVersion) < 0);\n}\n","import BigNumber from 'bignumber.js';\nimport coinAmount from './coin-amount';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE } from '../constants';\nimport Node from '../../../Node';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\nimport semverSatisfies from '../../../utils/semver-satisfies';\n\nconst gasPriceCache: WeakMap<Node, { time: number; gasPrice: bigint }> = new WeakMap();\n\nexport async function getCachedIncreasedGasPrice(node: Node): Promise<bigint> {\n  const cache = gasPriceCache.get(node);\n  if (cache != null && cache.time > Date.now() - 20 * 1000) {\n    return cache.gasPrice;\n  }\n\n  // TODO: remove after requiring node@6.13.0\n  const { nodeVersion } = await node._getCachedStatus();\n  if (!semverSatisfies(nodeVersion, '6.13.0')) return 0n;\n\n  const { minGasPrice, utilization } = (await node.getRecentGasPrices())[0];\n  let gasPrice = utilization < 70 ? 0n : BigInt(\n    new BigNumber(minGasPrice.toString()).times(1.01).integerValue().toFixed(),\n  );\n\n  const maxSafeGasPrice = BigInt(MIN_GAS_PRICE) * 100000n; // max microblock fee is 600ae or 35usd\n  if (gasPrice > maxSafeGasPrice) {\n    console.warn([\n      `Estimated gas price ${gasPrice} exceeds the maximum safe value for unknown reason.`,\n      `It will be limited to ${maxSafeGasPrice}.`,\n      'To overcome this restriction provide `gasPrice`/`fee` in options.',\n    ].join(' '));\n    gasPrice = maxSafeGasPrice;\n  }\n\n  gasPriceCache.set(node, { gasPrice, time: Date.now() });\n  return gasPrice;\n}\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode, denomination }: {\n      onNode?: Node;\n      denomination?: AE_AMOUNT_FORMATS;\n    },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `gasPrice` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return formatAmount(gasPrice, { targetDenomination: denomination });\n  },\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE, Tag } from '../constants';\nimport uInt from './u-int';\nimport coinAmount from './coin-amount';\nimport { getCachedIncreasedGasPrice } from './gas-price';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\nimport Node from '../../../Node';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the base gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base gas\n * @example\n * ```js\n * TX_BASE_GAS(Tag.ChannelForceProgressTx) => 30 * 15000\n * ```\n */\nconst TX_BASE_GAS = (txType: Tag): number => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return factor * BASE_GAS;\n};\n\n/**\n * Calculate gas for other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The other gas\n * @example\n * ```js\n * TX_OTHER_GAS(Tag.OracleResponseTx, 10, { relativeTtl: 12, innerTxSize: 0 })\n *  => 10 * 20 + Math.ceil(32000 * 12 / Math.floor(60 * 24 * 365 / 3))\n * ```\n */\nconst TX_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): number => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return txSize * GAS_PER_BYTE\n        + Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL));\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return (txSize - innerTxSize) * GAS_PER_BYTE;\n    default:\n      return txSize * GAS_PER_BYTE;\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate gas based on tx type and params\n */\nexport function buildGas(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_BASE_GAS(txObject.tag)\n    + TX_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    });\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = new BigNumber(MIN_GAS_PRICE).times(buildGas(rebuildTx(fee), unpackTx, buildTx));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\n// TODO: Get rid of this workaround. Transaction builder can't accept/return gas price instead of\n// fee because it may get a decimal gas price. So, it should accept the optional `gasPrice` even\n// if it is not a contract-related transaction. And use this `gasPrice` to calculate `fee`.\nconst gasPricePrefix = '_gas-price:';\n\nexport interface SerializeAettosParams {\n  rebuildTx: (params: any) => Encoded.Transaction;\n  unpackTx: typeof unpackTxType;\n  buildTx: typeof buildTxType;\n  _computingMinFee?: BigNumber;\n}\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode }: { onNode?: Node },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `fee` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return gasPricePrefix + gasPrice;\n  },\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee,\n    }: SerializeAettosParams,\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value?.startsWith(gasPricePrefix) === true\n      ? minFee.dividedBy(MIN_GAS_PRICE).times(_value.replace(gasPricePrefix, ''))\n      : new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1] & SerializeAettosParams,\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    if (typeof value === 'string' && value.startsWith(gasPricePrefix)) {\n      return uInt.serialize(this.serializeAettos(value, params, options));\n    }\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildGas } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildGas(rebuildTx(gasMax), unpackTx, buildTx);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\nimport { isAddressValid } from '../../../utils/crypto';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) payload = [ID_TAG, addressAny.serialize(id)];\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError('Raw pointer', `shorter than ${DATA_LENGTH_MAX + 1} bytes`, `${data.length} bytes`);\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(([bKey, bId]) => {\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray);\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genTransactionField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      return unpackTx(encode(buf, Encoding.Transaction), tag);\n    },\n  };\n}\n","import { ArgumentError } from './errors';\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb();\n      if (target == null) throw new ArgumentError('wrapped value', 'defined', target);\n      if (name === 'get' && args[0] === '_wrappedValue') return target;\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get' ? res.bind(target) : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport { isAccountNotFoundError, pause } from './utils/other';\nimport { unwrapProxy } from './utils/wrap-proxy';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport async function _getPollInterval(\n  type: 'key-block' | 'micro-block',\n  { _expectedMineRate, _microBlockCycle, onNode }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; onNode: Node },\n): Promise<number> {\n  const getVal = async (\n    t: string,\n    val: number | undefined,\n    devModeDef: number,\n    def: number,\n  ): Promise<number | null> => {\n    if (t !== type) return null;\n    if (val != null) return val;\n    return await onNode?.getNetworkId() === 'ae_dev' ? devModeDef : def;\n  };\n\n  const base = await getVal('key-block', _expectedMineRate, 0, 180000)\n    ?? await getVal('micro-block', _microBlockCycle, 0, 3000)\n    ?? (() => { throw new InternalError(`Unknown type: ${type}`); })();\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight(\n  { cached = false, ...options }: {\n    onNode: Node;\n    cached?: boolean;\n  } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache != null && cache.time > Date.now() - await _getPollInterval('key-block', options)) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Return transaction details if it is mined, fail otherwise.\n * If the transaction has ttl specified then would wait till it leaves the mempool.\n * Otherwise would fail if a specified amount of blocks were mined.\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail if transaction ttl is not set\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let max;\n  do {\n    const tx = await options.onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    if (max == null) {\n      max = tx.tx.ttl !== 0 ? -1\n        : await getHeight({ ...options, cached: true }) + blocks;\n    }\n    await pause(interval);\n  } while (max === -1 ? true : await getHeight({ ...options, cached: true }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(await _getPollInterval('key-block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight(options);\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { _getPollInterval, getHeight } from '../../../chain';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    {\n      onNode, absoluteTtl, _isInternalBuild, ...options\n    }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n      _isInternalBuild?: boolean;\n    } & Omit<Parameters<typeof _getPollInterval>[1], 'onNode'>,\n  ) {\n    if (absoluteTtl !== true && value !== 0 && (value != null || _isInternalBuild === true)) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value = (value ?? 3) + await getHeight({ ...options, onNode, cached: true });\n    }\n    return value;\n  },\n};\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","export enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n/**\n * @category entry building\n */\nexport enum EntryTag {\n  Account = 10,\n  Oracle = 20,\n  // OracleQuery = 21,\n  Name = 30,\n  // NameCommitment = 31,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  Channel = 58,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaMetaTxAuthData = 810,\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport abiVersion from './field-types/abi-version';\nimport address, { idTagToEncoding } from './field-types/address';\nimport array from './field-types/array';\nimport coinAmount from './field-types/coin-amount';\nimport ctVersion from './field-types/ct-version';\nimport encoded from './field-types/encoded';\nimport entry from './field-types/entry';\nimport enumeration from './field-types/enumeration';\nimport fee from './field-types/fee';\nimport gasLimit from './field-types/gas-limit';\nimport gasPrice from './field-types/gas-price';\nimport name from './field-types/name';\nimport nameFee from './field-types/name-fee';\nimport nameId from './field-types/name-id';\nimport nonce from './field-types/nonce';\nimport pointers from './field-types/pointers';\nimport pointers2 from './field-types/pointers2';\nimport queryFee from './field-types/query-fee';\nimport raw from './field-types/raw';\nimport shortUInt from './field-types/short-u-int';\nimport shortUIntConst from './field-types/short-u-int-const';\nimport string from './field-types/string';\nimport transaction from './field-types/transaction';\nimport ttl from './field-types/ttl';\nimport uInt from './field-types/u-int';\nimport withDefault from './field-types/with-default';\nimport withFormatting from './field-types/with-formatting';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { EntryTag } from './entry/constants';\nimport { EntParams, EntUnpacked } from './entry/schema.generated';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface TransactionAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst transactionAny = transaction() as unknown as TransactionAny;\n\ninterface TransactionSignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst transactionSignedTx = transaction(Tag.SignedTx) as unknown as TransactionSignedTx;\n\ninterface EntryTreesPoi {\n  serialize: (\n    value: EntParams & { tag: EntryTag.TreesPoi } | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => EntUnpacked & { tag: EntryTag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(EntryTag.TreesPoi) as unknown as EntryTreesPoi;\n\n// TODO: inline after dropping Iris compatibility\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\nconst nameTtl = withFormatting(\n  (value) => {\n    const NAME_TTL = 180000;\n    value ??= NAME_TTL;\n    if (value >= 1 && value <= NAME_TTL) return value;\n    throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n  },\n  shortUInt,\n);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: transactionAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(2),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers2,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: transactionSignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: transactionSignedTx,\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types/interface';\nimport {\n  ArgumentError, DecodeError, SchemaNotFoundError, InternalError,\n} from '../../utils/errors';\nimport {\n  Encoding, Encoded, encode, decode,\n} from '../../utils/encoder';\nimport { readInt } from './helpers';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null) throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) => (\n    field.serialize(params[key], { ...params, ...extraParams }, params)\n  ));\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name, field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { EntryTag } from '../entry/constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\nexport default function genMapField<E extends Encoding, T extends EntryTag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { packEntry: typeof packEntryType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { packEntry }) {\n      return decode(packEntry({\n        tag: EntryTag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: EntryTag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(packEntry({ ...value as any, tag })),\n        } as const)),\n      }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      const { values } = unpackEntry(encode(buffer, Encoding.Bytearray), EntryTag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackEntry(encode(value, Encoding.Bytearray), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { EntryTag } from '../entry/constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackEntry } from '../entry';\nimport type { EntUnpacked } from '../entry/schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends EntryTag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackEntry: typeof unpackEntry;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpEnt - Implementation of unpackEntry use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpEnt: typeof unpackEntry) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackEntry = unpEnt;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): EntUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackEntry(encode(d, Encoding.Bytearray), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, EntUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackEntry(encode(v, Encoding.Bytearray), this.#tag),\n      ])) as Record<Encoded.Generic<E>, EntUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n    serialize: (value: MPTree<E, T>) => MPTreeBinary;\n    deserialize: (value: MPTreeBinary, o: { unpackEntry: typeof unpackEntry }) => MPTree<E, T>;\n  } {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackEntry }) {\n      return new MPTree(value, encoding, tag, unpackEntry);\n    },\n  };\n}\n","import { EntryTag } from '../entry/constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\ntype TagWrapping = EntryTag.AccountsMtree | EntryTag.CallsMtree | EntryTag.ChannelsMtree\n| EntryTag.ContractsMtree | EntryTag.NameserviceMtree | EntryTag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(EntParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { packEntry: typeof packEntryType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `(EntUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { packEntry }) {\n      return decode(packEntry({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      return unpackEntry<TagWrapping>(encode(buffer, Encoding.Bytearray), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import SchemaTypes from '../SchemaTypes';\nimport abiVersion from '../field-types/abi-version';\nimport address, { idTagToEncoding } from '../field-types/address';\nimport array from '../field-types/array';\nimport boolean from '../field-types/boolean';\nimport coinAmount from '../field-types/coin-amount';\nimport ctVersion from '../field-types/ct-version';\nimport encoded from '../field-types/encoded';\nimport entry from '../field-types/entry';\nimport enumeration from '../field-types/enumeration';\nimport gasLimit from '../field-types/gas-limit';\nimport gasPrice from '../field-types/gas-price';\nimport map from '../field-types/map';\nimport mptree from '../field-types/mptree';\nimport pointers from '../field-types/pointers';\nimport raw from '../field-types/raw';\nimport shortUInt from '../field-types/short-u-int';\nimport shortUIntConst from '../field-types/short-u-int-const';\nimport string from '../field-types/string';\nimport uInt from '../field-types/u-int';\nimport wrapped from '../field-types/wrapped';\nimport {\n  Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { EntryTag, CallReturnType } from './constants';\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<EntParams & { tag: EntryTag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<EntUnpacked & { tag: EntryTag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(EntryTag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, EntParams & { tag: EntryTag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, EntUnpacked & { tag: EntryTag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, EntryTag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, EntParams & { tag: EntryTag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.AccountAddress,\n  EntUnpacked & { tag: EntryTag.Account }\n  >;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, EntryTag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, EntParams & { tag: EntryTag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.Bytearray,\n  EntUnpacked & { tag: EntryTag.ContractCall }\n  >;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, EntryTag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, EntParams & { tag: EntryTag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, EntUnpacked & { tag: EntryTag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, EntryTag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, EntParams & { tag: EntryTag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, EntUnpacked & { tag: EntryTag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, EntryTag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, EntParams & { tag: EntryTag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.OracleAddress,\n  EntUnpacked & { tag: EntryTag.Oracle }\n  >;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, EntryTag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(EntryTag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(EntryTag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(EntryTag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(EntryTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(EntryTag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(EntryTag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, EntryTag.Account)),\n  calls: array(mptree(Encoding.Bytearray, EntryTag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, EntryTag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, EntryTag.Contract)),\n  ns: array(mptree(Encoding.Name, EntryTag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, EntryTag.Oracle)),\n}, {\n  tag: shortUIntConst(EntryTag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(EntryTag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(EntryTag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(EntryTag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(EntryTag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(EntryTag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(EntryTag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(EntryTag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(EntryTag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(EntryTag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(EntryTag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(EntryTag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(EntryTag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(EntryTag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(EntryTag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type EntParams = Schemas['TxParams'];\nexport type EntUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { schemas } from './schema';\nimport { EntryTag } from './constants';\nimport { EntParams, EntUnpacked } from './schema.generated';\n\nconst encodingTag = [\n  [EntryTag.CallsMtree, Encoding.CallStateTree],\n  [EntryTag.StateTrees, Encoding.StateTrees],\n  [EntryTag.TreesPoi, Encoding.Poi],\n] as const;\n\nexport function packEntry(params: EntParams & { tag: EntryTag.CallsMtree }): Encoded.CallStateTree;\nexport function packEntry(params: EntParams & { tag: EntryTag.StateTrees }): Encoded.StateTrees;\nexport function packEntry(params: EntParams & { tag: EntryTag.TreesPoi }): Encoded.Poi;\n/**\n * Pack entry\n * @category entry builder\n * @param params - Params of entry\n * @returns Encoded entry\n */\nexport function packEntry(params: EntParams): Encoded.Any;\nexport function packEntry(params: EntParams): Encoded.Any {\n  const encoding = encodingTag.find(([tag]) => tag === params.tag)?.[1] ?? Encoding.Bytearray;\n  return packRecord(schemas, EntryTag, params, { packEntry }, encoding);\n}\n\nexport function unpackEntry(\n  encoded: Encoded.CallStateTree,\n): EntUnpacked & { tag: EntryTag.CallsMtree };\nexport function unpackEntry(\n  encoded: Encoded.StateTrees,\n): EntUnpacked & { tag: EntryTag.StateTrees };\nexport function unpackEntry(\n  encoded: Encoded.Poi,\n): EntUnpacked & { tag: EntryTag.TreesPoi };\n/**\n * Unpack entry\n * @category entry builder\n * @param encoded - Encoded entry\n * @param expectedTag - Expected entry type\n * @returns Params of entry\n */\nexport function unpackEntry<T extends EntryTag>(\n  encoded: Encoded.Any,\n  expectedTag?: T,\n): EntUnpacked & { tag: T };\nexport function unpackEntry(\n  encoded: Encoded.Any,\n  expectedTag?: EntryTag,\n): EntUnpacked {\n  expectedTag ??= encodingTag.find(([, enc]) => encoded.startsWith(enc))?.[0];\n  return unpackRecord(schemas, EntryTag, encoded, expectedTag, { unpackEntry }) as any;\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { Field } from './field-types/interface';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId } from './helpers';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common';\nimport { ArgumentError } from '../../utils/errors';\nimport { packEntry, unpackEntry } from './entry';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction {\n  return packRecord(txSchema, Tag, params, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n    buildTx,\n    rebuildTx: (overrideParams: any) => buildTx(\n      { ...params, ...overrideParams },\n    ),\n    packEntry,\n  }, Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, { unpackTx, unpackEntry }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import SchemaTypes from '../SchemaTypes';\nimport address from '../field-types/address';\nimport nameId from '../field-types/name-id';\nimport shortUIntConst from '../field-types/short-u-int-const';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  AensWildcard = 1,\n  AensName = 2,\n  AensPreclaim = 3,\n  Oracle = 4,\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(DelegationTag.AensWildcard),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensName),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  nameId,\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensPreclaim),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.OracleResponse),\n  version: shortUIntConst(1, true),\n  queryId: queryIdField,\n  contractAddress: address(Encoding.ContractAddress),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { DelegationTag, schemas } from './schema';\nimport { DlgParams, DlgUnpacked } from './schema.generated';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash, messagePrefixLength,\n} from '../utils/crypto';\nimport { ArgumentError, UnexpectedTsError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { produceNameId } from '../tx/builder/helpers';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\nimport { packDelegation } from '../tx/builder/delegation';\n\nconst secretKeys = new WeakMap<AccountMemory, Uint8Array>();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKey).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    const secretKey = secretKeys.get(this);\n    if (secretKey == null) throw new UnexpectedTsError();\n    return sign(data, secretKey);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion, isOracle }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountMemory:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(produceNameId(name)),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      Buffer.from('AENS'),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    const oracleQueryIdDecoded = decode(oracleQueryId);\n    const addressDecoded = decode(this.address);\n    // TODO: remove after fixing https://github.com/aeternity/aesophia/issues/475\n    if (oracleQueryIdDecoded.compare(addressDecoded) === 0) {\n      throw new ArgumentError('oracleQueryId', 'not equal to account address', oracleQueryId);\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      oracleQueryIdDecoded,\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength, new Uint8Array([1]), Buffer.from(networkId), decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import { RestError, PipelineResponse } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig, FullOperationResponse, OperationOptions } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(key, req.catch(() => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        const body = (error.response as FullOperationResponse).parsedBody;\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  versionCb: (options: OperationOptions) => Promise<string>,\n  geVersion: string,\n  ltVersion: string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'version-check',\n    async sendRequest(request, next) {\n      if (request.headers.has('__version-check')) {\n        request.headers.delete('__version-check');\n        return next(request);\n      }\n      const options = { requestOptions: { customHeaders: { '__version-check': 'true' } } };\n      const args = [await versionCb(options), geVersion, ltVersion] as const;\n      if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n      return next(request);\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      errorCode: {\n        serializedName: \"error_code\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedTx: {\n        serializedName: \"encoded_tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const AuctionEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuctionEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      startedAt: {\n        serializedName: \"started_at\",\n        type: {\n          name: \"String\",\n        },\n      },\n      endsAt: {\n        serializedName: \"ends_at\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBidder: {\n        serializedName: \"highest_bidder\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBid: {\n        serializedName: \"highest_bid\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SyncStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SyncStatus\",\n    modelProperties: {\n      progress: {\n        serializedName: \"progress\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      speed: {\n        serializedName: \"speed\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      estimate: {\n        serializedName: \"estimate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hashrate: {\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      uptime: {\n        serializedName: \"uptime\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Currency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunit: {\n        serializedName: \"subunit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunitsPerUnit: {\n        serializedName: \"subunits_per_unit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fiatConverstionUrl: {\n        serializedName: \"fiat_converstion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      logo: {\n        serializedName: \"logo\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\",\n        },\n      },\n      primaryColour: {\n        serializedName: \"primary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      secondaryColour: {\n        serializedName: \"secondary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkName: {\n        serializedName: \"network_name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Image: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GasPricesItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GasPricesItem\",\n    modelProperties: {\n      minGasPrice: {\n        serializedName: \"min_gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      utilization: {\n        serializedName: \"utilization\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      minutes: {\n        serializedName: \"minutes\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\",\n        },\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetAuctionEntryByNameOptionalParams,\n  GetAuctionEntryByNameResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetSyncStatusOptionalParams,\n  GetSyncStatusResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n  GetCurrencyOptionalParams,\n  GetCurrencyResponse,\n  GetRecentGasPricesOptionalParams,\n  GetRecentGasPricesResponse,\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Dry-run unsigned transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx\n   * and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get auction entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getAuctionEntryByName(\n    name: string,\n    options?: GetAuctionEntryByNameOptionalParams,\n  ): Promise<GetAuctionEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getAuctionEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the sync status of a node\n   * @param options The options parameters.\n   */\n  getSyncStatus(\n    options?: GetSyncStatusOptionalParams,\n  ): Promise<GetSyncStatusResponse> {\n    return this.sendOperationRequest({ options }, getSyncStatusOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n\n  /**\n   * Get the currency metadata of a node\n   * @param options The options parameters.\n   */\n  getCurrency(\n    options?: GetCurrencyOptionalParams,\n  ): Promise<GetCurrencyResponse> {\n    return this.sendOperationRequest({ options }, getCurrencyOperationSpec);\n  }\n\n  /**\n   * Get minimum gas prices in recent blocks\n   * @param options The options parameters.\n   */\n  getRecentGasPrices(\n    options?: GetRecentGasPricesOptionalParams,\n  ): Promise<GetRecentGasPricesResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getRecentGasPricesOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAuctionEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/auctions/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AuctionEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSyncStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/sync-status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SyncStatus,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrencyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/currency\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Currency,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecentGasPricesOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/recent-gas-prices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"GasPricesItem\" } },\n        },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationOptions, OperationSpec } from '@azure/core-client';\nimport { userAgentPolicyName, setClientRequestIdPolicyName } from '@azure/core-rest-pipeline';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'minGasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round', 'minutes', 'utilization', 'difficulty', 'hashrate',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    const getVersion = async (opts: OperationOptions): Promise<string> => (\n      (await this._getCachedStatus(opts)).nodeVersion\n    );\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('node', getVersion, '6.2.0', '8.0.0')],\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => [\n          ' ', body.reason, body.errorCode == null ? '' : ` (${body.errorCode})`,\n        ].join('')),\n      ],\n      ...options,\n    });\n    this.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n    // TODO: use instead our retry policy\n    this.pipeline.removePolicy({ name: 'defaultRetryPolicy' });\n    this.intAsString = true;\n  }\n\n  #cachedStatusPromise?: ReturnType<Node['getStatus']>;\n\n  async _getCachedStatus(options?: OperationOptions): ReturnType<Node['getStatus']> {\n    if (this.#cachedStatusPromise != null) return this.#cachedStatusPromise;\n    return this.getStatus(options);\n  }\n\n  // eslint-disable-next-line rulesdir/tsdoc-syntax\n  /** @ts-expect-error use code generation to create node class? */\n  override async getStatus(\n    ...args: Parameters<InstanceType<NodeTransformedApi>['getStatus']>\n  ): ReturnType<InstanceType<NodeTransformedApi>['getStatus']> {\n    const promise = super.getStatus(...args);\n    promise.then(() => { this.#cachedStatusPromise = promise; }, () => {});\n    return promise;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    return (await this._getCachedStatus()).networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, isAddressValid, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, Encoding, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  async (tx, { node }) => {\n    if (tx.tag !== Tag.SpendTx || isAddressValid(tx.recipientId, Encoding.Name)) return [];\n    const recipient = await node.getAccountByPubkey(tx.recipientId).catch((error) => {\n      if (!isAccountNotFoundError(error)) throw error;\n      return null;\n    });\n    if (recipient == null || recipient.payable === true) return [];\n    return [{\n      message: 'Recipient account is not payable',\n      key: 'RecipientAccountNotPayable',\n      checkedKeys: ['recipientId'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n  // TODO: move to fee field of tx builder after dropping Iris\n  (tx, { consensusProtocolVersion }) => ((\n    Tag.GaAttachTx === tx.tag\n      && ConsensusProtocolVersion.Ceres === consensusProtocolVersion\n      && tx.nonce !== 1\n  ) ? [{\n      message: `Account ${tx.ownerId} can't become generalized because it is already used`,\n      key: 'AccountUsed',\n      checkedKeys: ['nonce'],\n    }]\n    : []),\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError } from './utils/other';\nimport { TransactionError } from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport { SignedTx } from './apis/node';\nimport { Encoded } from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\nimport { poll, waitForTxConfirm } from './chain';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction({ tx }, {\n      requestOptions: {\n        customHeaders: {\n          // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n          '__retry-code': '400',\n          ...__queue != null ? { __queue } : {},\n        },\n      },\n    });\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt, isAddressValid } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport { Tag, AensName, ConsensusProtocolVersion } from './tx/builder/constants';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { UnsupportedProtocolError } from './utils/errors';\nimport { getName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const hasRawPointers = Object.values(allPointers)\n    .some((v) => isAddressValid(v, Encoding.Bytearray));\n  const isIris = (await options.onNode.getNodeInfo())\n    .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n  if (hasRawPointers && isIris) {\n    throw new UnsupportedProtocolError('Raw pointers are available only in Ceres, the current protocol is Iris');\n  }\n\n  const nameUpdateTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameUpdateTx,\n    version: hasRawPointers ? 2 : 1,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  /**\n   * Get the pointers from the node and merge with provided ones. Pointers with the same key will be\n   * overwritten.\n   */\n  extendPointers?: boolean;\n  /**\n   * a suggestion as to how long any clients should cache this information\n   */\n  clientTtl?: number;\n  /**\n   * Name ttl represented in number of blocks (Max value is 50000 blocks)\n   */\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl?: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl, options = {}) {\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid or claiming without preclaim (in Ceres)\n * @param options - options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport { getBalance, resolveName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  {\n    onAccount, omitAddress, isOracle, ...options\n  }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    isOracle?: boolean;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const { nodeNetworkId, consensusProtocolVersion } = await options.onNode.getNodeInfo();\n  const signOpts = { networkId: nodeNetworkId, consensusProtocolVersion };\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signDelegationToContract(contractAddress, { ...signOpts, isOracle }),\n    );\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, signOpts),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, signOpts),\n  );\n}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport {\n  Tag, AensName, ConsensusProtocolVersion, DRY_RUN_ACCOUNT,\n} from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun,\n} from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await Contract.initialize({ ...aeSdk.getContext(), sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        if (/Expected \\d+ arguments, got \\d+/.test(message)) {\n          throw new ContractError(`ACI doesn't match called contract. Error provided by node: ${message}`);\n        }\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      const isIris = (await onNode.getNodeInfo())\n        .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n      if (!isIris && isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { getAccount } from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport CompilerBase from './compiler/Base';\nimport { packEntry } from '../tx/builder/entry';\nimport { EntryTag } from '../tx/builder/entry/constants';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(packEntry({\n      tag: EntryTag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport { sendTransaction } from './send-transaction';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...aensMethods,\n  ...spendMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this.getContext(), ...options });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n    /**\n     * Make operation on specific account by providing address (to use account from sdk) or instance\n     * of AccountBase (like MemoryAccount)\n     */\n    onAccount: OnAccount;\n  } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param name - AENS name\n   * @param options - Options\n   */\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signAllNamesDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signAllNamesDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param oracleQueryId - Oracle query id\n   * @param options - Options\n   */\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      },\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport { decode, Encoded } from './utils/encoder';\nimport { UnavailableAccountError } from './utils/errors';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  /**\n   * @param options - Options\n   */\n  constructor(\n    { accounts, ...options }: { accounts?: AccountBase[] }\n    & ConstructorParameters<typeof AeSdkBase>[0] = {},\n  ) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = (\n    new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>()\n  );\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\nimport { AensName } from '../../tx/builder/constants';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.unsafeSign]: (\n    p: { data: Encoded.Bytearray; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegationToContract]: (\n    p: {\n      contractAddress: Encoded.ContractAddress;\n      name?: AensName;\n      oracleQueryId?: Encoded.OracleQueryId;\n      allNames?: boolean;\n      isOracle?: boolean;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (\n    p: {\n      delegation: Encoded.Bytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import JsonBig from 'json-bigint';\nimport BigNumber from 'bignumber.js';\nimport { mapObject } from './other';\n\nconst jsonBig = JsonBig({ storeAsString: true });\n\nconst convertValuesToBigNumbers = (value: any): any => {\n  if (typeof value === 'object' && value !== null && value.constructor === Object) {\n    return mapObject(value, ([k, v]) => [k, convertValuesToBigNumbers(v)]);\n  }\n  if (Array.isArray(value)) {\n    return value.map((item) => convertValuesToBigNumbers(item));\n  }\n  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {\n    const bn = new BigNumber(value);\n    bn.toJSON = () => bn.toString(10);\n    return bn;\n  }\n  return value;\n};\n\nexport default {\n  stringify: (...args: Parameters<typeof JsonBig['stringify']>): string => (\n    jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1))\n  ),\n  parse: jsonBig.parse,\n};\n","import { v4 as uuid } from '@aeternity/uuid';\nimport AeSdk from './AeSdk';\nimport verifyTransaction from './tx/validator';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport {\n  METHODS, RPC_STATUS, SUBSCRIPTION_TYPES, WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError, RpcPermissionDenyError, RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema';\nimport { InternalError, UnknownRpcClientError } from './utils/errors';\nimport AccountBase from './account/Base';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types';\nimport {\n  Encoded, Encoding, encode, decode,\n} from './utils/encoder';\nimport jsonBig from './utils/json-big';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string, params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>, origin: string\n) => void;\n\ntype OnSubscription = (\n  clientId: string, params: Parameters<WalletApi[METHODS.subscribeAddress]>[0], origin: string\n) => void;\n\ntype OnDisconnect = (\n  clientId: string, params: Parameters<WalletApi[METHODS.closeConnection]>[0]\n) => void;\n\ntype OnAskAccounts = (\n  clientId: string, params: undefined, origin: string\n) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _getAccountsForClient({ addressSubscription }: RpcClientsInfo): Accounts {\n    const { current, connected } = this.getAccounts();\n    return {\n      current: addressSubscription.has('current') || addressSubscription.has('connected')\n        ? current : {},\n      connected: addressSubscription.has('connected') ? connected : {},\n    };\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .filter((client) => client.addressSubscription.size !== 0)\n      .forEach((client) => client.rpc\n        .notify(METHODS.updateAddress, this._getAccountsForClient(client)));\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...client.connectNode && this._getNode(),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return RPC_STATUS.CONNECTED === this._getClient(clientId).status\n      && this._getClient(clientId).rpc.connection.isConnected();\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = uuid();\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({\n            name, version, icons, connectNode,\n          }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...await this.getWalletInfo(),\n              ...connectNode && this._getNode(),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                // TODO: remove `type` as it always subscribe\n                await this.onSubscription(id, { type, value }, origin);\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this._getAccountsForClient(client),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            {\n              tx, onAccount = this.address, returnSigned, innerTx,\n            },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount, aeppOrigin: origin, aeppRpcClientId: id, innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(jsonBig.stringify({\n                transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n              }));\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async ({\n            domain, aci, data, onAccount = this.address,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain, onAccount, aeppOrigin: origin, aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n          [METHODS.signDelegationToContract]: async ({\n            contractAddress, name, oracleQueryId, allNames, onAccount = this.address, isOracle,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            isOracle ??= false;\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await (\n              (name == null ? null : this\n                .signNameDelegationToContract(contractAddress, name, parameters))\n              ?? (oracleQueryId == null ? null : this\n                .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, parameters))\n              ?? (allNames !== true ? null : this\n                .signAllNamesDelegationToContract(contractAddress, parameters))\n              ?? this.signDelegationToContract(contractAddress, { ...parameters, isOracle })\n            );\n            return { signature };\n          },\n          [METHODS.unsafeSign]: async ({ data, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = encode(await this.sign(decode(data), parameters), Encoding.Signature);\n            return { signature };\n          },\n          [METHODS.signDelegation]: async ({ delegation, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await this.signDelegation(delegation, parameters);\n            return { signature };\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    const { origin } = window.location;\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: origin === 'file://' ? '*' : origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import {\n  RestError, userAgentPolicyName, setClientRequestIdPolicyName,\n} from '@azure/core-rest-pipeline';\nimport { OperationOptions } from '@azure/core-client';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci, CompileResult } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion = false }: { ignoreVersion?: boolean } = {}) {\n    super();\n\n    let version: string | undefined;\n    const getVersion = async (opts: OperationOptions): Promise<string> => {\n      if (version != null) return version;\n      version = (await this.api.apiVersion(opts)).apiVersion;\n      return version;\n    };\n\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('compiler', getVersion, '7.3.0', '9.0.0')],\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    this.api.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.api.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      cmpOut.warnings ??= []; // TODO: remove after requiring http compiler above or equal to 8.0.0\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=7883c6ac\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=40b913fe&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\nimport \"./App.vue?vue&type=style&index=1&id=40b913fe&lang=scss&scoped=true\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-40b913fe\"]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwallet_iframe\"] = self[\"webpackChunkwallet_iframe\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(40787); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","id","type","_createTextVNode","for","class","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","novalidate","onSubmit","_cache","_withModifiers","args","$options","navigate","$event","_ctx","nextAeppUrl","onFocus","target","select","_hoisted_5","_toDisplayString","address","_hoisted_6","nodeName","_hoisted_7","_createVNode","_component_Value","value","balancePromise","_hoisted_8","clientStatus","clientId","onClick","switchAccount","switchNode","key","disconnect","stopSharingWalletInfo","shareWalletInfo","runningInFrame","_createCommentVNode","ref","src","aeppUrl","_hoisted_9","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","TxTimedOutError","blocks","th","join","TypeError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","UnknownRpcClientError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","connect","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","AccountBase","signTypedData","aci","signDelegationToContract","signNameDelegationToContract","signAllNamesDelegationToContract","signOracleQueryDelegationToContract","oracleQueryId","signDelegation","delegation","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","isAddressValid","maybeEncoded","encodings","encoding","genSalt","random","BigUint64Array","nacl","Number","BigInt","MAX_SAFE_INTEGER","hash","generateKeyPairFromSecret","secret","keyPair","fromSecretKey","generateKeyPair","raw","publicBuffer","publicKey","secretBuffer","secretKey","sign","privateKey","detached","verify","signature","messagePrefix","messagePrefixLength","messageToHash","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","Fate3","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","serialize","params","consensusProtocolVersion","_value","prepare","keys","onNode","getNodeInfo","vm","abi","_getProtocolDetails","c","kind","ContractCallTx","GaMetaTx","result","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","commitmentHash","salt","padStart","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","isAuctionName","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","uInt","serializeAettos","genEncodedField","optional","encodedData","genEntryField","txParams","packEntry","ArrayBuffer","isView","startsWith","unpackEntry","genEnumerationField","enm","values","filter","v","verCmp","a","b","getComponents","i","aComponents","bComponents","base","max","componentsToNumber","components","reverse","reduce","acc","n","idx","semverSatisfies","gasPriceCache","getCachedIncreasedGasPrice","node","cache","get","time","Date","now","gasPrice","nodeVersion","_getCachedStatus","minGasPrice","utilization","getRecentGasPrices","integerValue","maxSafeGasPrice","warn","set","coinAmount","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ContractCreateTx","GaAttachTx","PayingForTx","factor","TX_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","ceil","floor","getOracleRelativeTtl","ttlKeys","buildGas","builtTx","unpackTx","buildTx","txObject","tx","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","gasPricePrefix","_computingMinFee","_canIncreaseFee","minFee","dividedBy","replace","gt","calculateGasLimitMax","gasMax","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","field","txFields","parameters","addressName","genNonceField","senderKey","strategy","senderId","getAccountNextNonce","catch","nextNonce","addressAny","pointers","pointer","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","bKey","bId","oracleId","getOracleByPubkey","queryFee","genShortUIntConstField","constValue","constValueOptional","genTransactionField","wrapWithProxy","valueCb","Proxy","res","Reflect","bind","unwrapProxy","_wrappedValue","_getPollInterval","_expectedMineRate","_microBlockCycle","_ref","_await$getVal","getVal","devModeDef","def","getNetworkId","heightCache","getHeight","cached","height","getCurrentKeyBlockHeight","poll","interval","_interval","getTransactionByHash","blockHeight","ttl","awaitHeight","_interval2","currentHeight","waitForTxConfirm","confirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","getBalance","format","addr","balance","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","Map","txDryRunHandler","rs","delete","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accounts","Array","Set","accountAddress","pubKey","forEach","reject","results","reason","resultPayload","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","p","absoluteTtl","_isInternalBuild","withDefault","defaultValue","withFormatting","CallReturnType","EntryTag","ORACLE_TTL_TYPES","transactionAny","transactionSignedTx","SignedTx","entryTreesPoi","entry","TreesPoi","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","signatures","SpendTx","recipientId","encoded","NamePreclaimTx","accountId","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","pointers2","NameTransferTx","NameRevokeTx","ctVersion","deposit","callData","callerId","queryFormat","responseFormat","oracleTtlType","delta","enumeration","oracleTtlValue","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","ChannelSnapshotSoloTx","ChannelClientReconnectTx","role","pubkey","authFun","gaId","authData","payerId","rlpDecode","rlpEncode","_rlp","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","binary","unpackRecord","encodedRecord","expectedTag","index","genMapField","Mtree","MtreeValue","recursiveType","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackEntry","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","unpEnt","_classPrivateMethodInitSpec","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","Extension","Leaf","isEqual","tree","mptHash","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","k","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","entryMtreeValueArray","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","flags","gaContract","gaAuthFun","status","owner","active","boolean","referers","callerNonce","gasUsed","returnValue","returnType","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelOffChainUpdateTransfer","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","contract","callStack","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","GaMetaTxAuthData","encodingTag","_encodingTag$find$","_encodingTag$find","_expectedTag","_encodingTag$find2","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","DelegationTag","oracleAddressField","queryIdField","AensWildcard","AensName","AensPreclaim","packDelegation","unpackDelegation","secretKeys","getBufferToSign","networkId","innerTx","prefixes","rlpBinaryTx","AccountMemory","generate","signTransaction","txWithNetworkId","signMessage","dHash","isOracle","oracleQueryIdDecoded","addressDecoded","compare","genRequestQueuesPolicy","requestQueues","policy","sendRequest","request","next","_requestQueues$get","headers","getResponse","then","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","method","JSON","stringify","url","body","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","parsedBody","genVersionCheckPolicy","versionCb","has","requestOptions","customHeaders","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","NaN","statusesToNotRetry","intervals","fill","_","intervalSum","intervalsInMs","e","attempt","urlParsed","searchParams","_e$response$status","_e$response","Header","className","modelProperties","serializedName","required","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","info","pofHash","txsHash","ErrorModel","errorCode","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","blockHash","Tx","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","uberParent","polymorphicDiscriminator","clientName","op","RelativeTTL","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","AuctionEntry","startedAt","endsAt","highestBidder","highestBid","NameEntry","PeerPubKey","SyncStatus","progress","speed","estimate","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","uptime","listening","protocols","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","Currency","symbol","subunit","subunitsPerUnit","fiatConverstionUrl","logo","primaryColour","secondaryColour","networkName","Image","GasPricesItem","minutes","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","fromParam","limit","typeParam","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxsOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getAuctionEntryByName","getAuctionEntryByNameOperationSpec","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getSyncStatus","getSyncStatusOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","getCurrency","getCurrencyOperationSpec","getRecentGasPricesOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_cachedStatusPromise","ignoreVersion","getVersion","opts","allowInsecureConnection","additionalPolicies","pipeline","removePolicy","userAgentPolicyName","setClientRequestIdPolicyName","promise","nodeNetworkId","versions","getTransactionSignerAddress","_getSchema$find","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","recipient","_ref2","oracleCall","contractCreate","contractCall","parse","InvalidTxError","validation","sendTransaction","txUnsigned","onAccount","waitMined","__queue","pollResult","txData","confirmationHeight","verifyTx","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","hasRawPointers","isIris","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","transfer","revoke","extendTtl","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","claim","otherOptions","aensBid","spend","recipientIdOrName","transferFunds","fraction","desiredAmount","ROUND_HALF_UP","plus","minus","payForTransaction","ensureOracleQuery","oq","createDelegationSignature","ids","omitAddress","signOpts","Encoder","Calldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","compile","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","callStatic","$deploy","_opt$gasLimit","_other$result","_calldata","_name","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","methods","chainMethods","aensMethods","spendMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","getContext","mergeWith","prototype","handler","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","compilerApi","_resolveAccount","ensureNodeConnected","pool","selectedNodeName","selectNode","isNodeConnected","getNodesInPool","addresses","String","_options$networkId","_options$consensusPro","_options$networkId2","_options$consensusPro2","_options$networkId3","_options$consensusPro3","_options$networkId4","_options$consensusPro4","_options$networkId5","AeSdk","addAccount","selectedAddress","selectAccount","removeAccount","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","connection","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","RPC_VERSION","jsonBig","JsonBig","storeAsString","convertValuesToBigNumbers","bn","AeSdkWallet","onConnection","onSubscription","onAskAccounts","_type","_getAccountsForClient","addressSubscription","current","getAccounts","_pushAccountsToApps","_clients","_isRpcClientConnected","_getClient","client","size","rpc","updateAddress","_getNode","updateNetwork","connectNode","CONNECTED","_disconnectRpcClient","DISCONNECTED","removeRpcClient","addRpcClient","clientConnection","uuid","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","icons","getWalletInfo","subscribeAddress","subscribe","add","unsubscribe","subscription","returnSigned","aeppOrigin","aeppRpcClientId","signedTransaction","transactionHash","allNames","_isOracle","_ref3","unsafeSign","readyToConnect","location","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","_cmpOut$warnings","cmpOut","warning","generateAciBySourceCode","generateAci","_normalizeClass","text","props","default","watch","valueToString","immediate","__exports__","Value","process","parent","$nextTick","attempts","$refs","aepp","contentWindow","aeSdk","intervalId","setInterval","clearInterval","names","updateClientStatus","mounted","aeppInfo","genConfirmCallback","actionName","aeppId","AccountMemoryProtected","MemoryAccount","unpackedTx","dataType","decodedData","decodeWithType","$watch","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}