{"version":3,"file":"js/app.1bc2c82f.js","mappings":"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","sources":["webpack://wallet-iframe/./src/App.vue","webpack://wallet-iframe/../../src/utils/errors.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://wallet-iframe/../../src/aepp-wallet-communication/schema.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://wallet-iframe/../../src/account/Base.ts","webpack://wallet-iframe/../../src/utils/other.ts","webpack://wallet-iframe/../../src/utils/encoder-types.ts","webpack://wallet-iframe/../../src/utils/encoder.ts","webpack://wallet-iframe/../../src/utils/crypto.ts","webpack://wallet-iframe/../../src/utils/typed-data.ts","webpack://wallet-iframe/../../../src/tx/builder/constants.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/entry.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/array.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/map.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-default.ts","webpack://wallet-iframe/../../src/utils/bytes.ts","webpack://wallet-iframe/../../../src/tx/builder/helpers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/address.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/encoded.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/raw.ts","webpack://wallet-iframe/../../src/utils/bignumber.ts","webpack://wallet-iframe/../../src/utils/amount-formatter.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ttl.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/nonce.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/field.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-id.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers2.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ct-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/boolean.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-price.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/abi-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/enumeration.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/string.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/query-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/mptree.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/wrapped.ts","webpack://wallet-iframe/../../../src/tx/builder/schema.ts","webpack://wallet-iframe/../../../src/tx/builder/common.ts","webpack://wallet-iframe/../../../src/tx/builder/index.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/index.ts","webpack://wallet-iframe/../../src/account/Memory.ts","webpack://wallet-iframe/../../src/utils/semver-satisfies.ts","webpack://wallet-iframe/../../src/utils/autorest.ts","webpack://wallet-iframe/../../../../src/apis/node/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/node/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/node/node.ts","webpack://wallet-iframe/../src/Node.ts","webpack://wallet-iframe/../../src/tx/transaction-signer.ts","webpack://wallet-iframe/../../src/tx/execution-cost.ts","webpack://wallet-iframe/../../src/tx/validator.ts","webpack://wallet-iframe/../src/chain.ts","webpack://wallet-iframe/../src/aens.ts","webpack://wallet-iframe/../src/spend.ts","webpack://wallet-iframe/../src/oracle.ts","webpack://wallet-iframe/../../src/contract/Contract.ts","webpack://wallet-iframe/../../src/contract/delegation-signature.ts","webpack://wallet-iframe/../../src/contract/ga.ts","webpack://wallet-iframe/../src/AeSdkMethods.ts","webpack://wallet-iframe/../src/AeSdkBase.ts","webpack://wallet-iframe/../src/AeSdk.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://wallet-iframe/../../src/utils/json-big.ts","webpack://wallet-iframe/../src/AeSdkWallet.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/compiler/compiler.ts","webpack://wallet-iframe/../../../src/contract/compiler/Base.ts","webpack://wallet-iframe/../../../src/contract/compiler/Http.ts","webpack://wallet-iframe/./src/Value.vue","webpack://wallet-iframe/./src/Value.vue?2a90","webpack://wallet-iframe/./src/App.vue?7ccd","webpack://wallet-iframe/./src/main.js","webpack://wallet-iframe/webpack/bootstrap","webpack://wallet-iframe/webpack/runtime/chunk loaded","webpack://wallet-iframe/webpack/runtime/define property getters","webpack://wallet-iframe/webpack/runtime/global","webpack://wallet-iframe/webpack/runtime/hasOwnProperty shorthand","webpack://wallet-iframe/webpack/runtime/make namespace object","webpack://wallet-iframe/webpack/runtime/jsonp chunk loading","webpack://wallet-iframe/webpack/startup"],"sourcesContent":["<template>\n  <input id=\"toggle-aepp\" type=\"checkbox\" />\n  <h2>\n    Wallet Iframe\n    <label for=\"toggle-aepp\" />\n  </h2>\n\n  <div class=\"group\">\n    <div>\n      <div>Aepp URL</div>\n      <form\n        novalidate\n        @submit.prevent=\"navigate\"\n      >\n        <input\n          type=\"url\"\n          v-model=\"nextAeppUrl\"\n          @focus=\"$event.target.select()\"\n        >\n      </form>\n    </div>\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Node</div>\n      <div>{{ nodeName }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>RPC client</div>\n      <div>status: {{ clientStatus ?? 'no client' }}, id: {{ clientId ?? 'not defined' }}</div>\n    </div>\n\n    <button @click=\"switchAccount\">Switch Account</button>\n    <button @click=\"switchNode\">Switch Node</button>\n\n    <button\n      v-if=\"clientStatus === 'CONNECTED'\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else\n      @click=\"() => (stopSharingWalletInfo ?? shareWalletInfo)()\"\n    >\n      {{ stopSharingWalletInfo ? 'Stop sharing' : 'Share wallet info' }}\n    </button>\n  </div>\n\n  <iframe\n    v-if=\"!runningInFrame\"\n    ref=\"aepp\"\n    :src=\"aeppUrl\"\n  />\n</template>\n\n<script>\nimport {\n  MemoryAccount, generateKeyPair, AeSdkWallet, Node, CompilerHttp,\n  BrowserWindowMessageConnection, METHODS, WALLET_TYPE, RPC_STATUS,\n  RpcConnectionDenyError, RpcRejectedByUserError, unpackTx, unpackDelegation,\n} from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    nextAeppUrl: process.env.VUE_APP_AEPP_URL ?? `http://${location.hostname}:9001`,\n    aeppUrl: '',\n    runningInFrame: window.parent !== window,\n    nodeName: '',\n    address: '',\n    balancePromise: null,\n    clientId: null,\n    clientStatus: null,\n    stopSharingWalletInfo: null,\n  }),\n  methods: {\n    navigate() {\n      if (!/^https?:\\/\\//.test(this.nextAeppUrl) && !this.nextAeppUrl.startsWith('.')) {\n        this.nextAeppUrl = 'http://' + this.nextAeppUrl;\n      }\n      this.aeppUrl = '';\n      this.$nextTick(() => {\n        this.aeppUrl = this.nextAeppUrl;\n      });\n    },\n    shareWalletInfo({ interval = 5000, attempts = 5 } = {}) {\n      const target = this.runningInFrame ? window.parent : this.$refs.aepp.contentWindow;\n      const connection = new BrowserWindowMessageConnection({ target });\n      this.clientId = this.aeSdk.addRpcClient(connection);\n\n      this.aeSdk.shareWalletInfo(this.clientId);\n      const intervalId = setInterval(() => {\n        this.aeSdk.shareWalletInfo(this.clientId);\n        attempts -= 1;\n        if (!attempts) return this.stopSharingWalletInfo();\n      }, interval);\n\n      this.stopSharingWalletInfo = () => {\n        clearInterval(intervalId);\n        // TODO: replace with clientStatus\n        const client = this.aeSdk._getClient(this.clientId);\n        if (client.status === RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST) {\n          this.aeSdk.removeRpcClient(this.clientId);\n        }\n        this.stopSharingWalletInfo = null;\n      }\n    },\n    disconnect() {\n      // TODO: move to removeRpcClient (would be a semi-breaking change)\n      const client = this.aeSdk._getClient(this.clientId);\n      if (client.status === RPC_STATUS.CONNECTED) {\n        client.rpc.notify(METHODS.closeConnection, null);\n      }\n\n      this.aeSdk.removeRpcClient(this.clientId);\n      this.clientId = null;\n    },\n    async switchAccount() {\n      this.address = this.aeSdk.addresses().find((a) => a !== this.address);\n      this.aeSdk.selectAccount(this.address);\n    },\n    async switchNode() {\n      this.nodeName = (await this.aeSdk.getNodesInPool())\n        .map(({ name }) => name)\n        .find((name) => name !== this.nodeName);\n      this.aeSdk.selectNode(this.nodeName);\n    },\n    updateClientStatus() {\n      if (!this.clientId) {\n        this.clientStatus = null;\n        return;\n      }\n      const client = this.aeSdk._getClient(this.clientId);\n      this.clientStatus = client.status;\n    },\n  },\n  mounted() {\n    this.navigate();\n\n    const aeppInfo = {};\n    const genConfirmCallback = (actionName) => (aeppId, parameters, origin) => {\n      if (!confirm([\n        `Client ${aeppInfo[aeppId].name} with id ${aeppId} at ${origin} want to ${actionName}`,\n        Value.methods.valueToString(parameters),\n      ].join('\\n'))) {\n        throw new RpcRejectedByUserError();\n      }\n    };\n\n    class AccountMemoryProtected extends MemoryAccount {\n      async signTransaction(tx, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          const opt = { ...options, unpackedTx: unpackTx(tx) };\n          if (opt.onCompiler) opt.onCompiler = '<Compiler>';\n          if (opt.onNode) opt.onNode = '<Node>';\n          genConfirmCallback(`sign transaction ${tx}`)(id, opt, aeppOrigin);\n        }\n        return super.signTransaction(tx, options);\n      }\n\n      async signMessage(message, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign message ${message}`)(id, options, aeppOrigin);\n        }\n        return super.signMessage(message, options);\n      }\n\n      async signTypedData(data, aci, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const dataType = new TypeResolver().resolveType(aci);\n          const decodedData = new ContractByteArrayEncoder().decodeWithType(data, dataType);\n          const opt = { ...options, aci, decodedData };\n          genConfirmCallback(`sign typed data ${data}`)(id, opt, aeppOrigin);\n        }\n        return super.signTypedData(data, aci, options);\n      }\n\n      async signDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation to contract')(id, opt, aeppOrigin);\n        }\n        return super.signDelegationToContract(contractAddress, options);\n      }\n\n      async signNameDelegationToContract(\n        contractAddress,\n        name,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, name };\n          genConfirmCallback('sign delegation of name to contract')(id, opt, aeppOrigin);\n        }\n        return super.signNameDelegationToContract(contractAddress, name, options);\n      }\n\n      async signAllNamesDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation of all names to contract')(id, opt, aeppOrigin);\n        }\n        return super.signAllNamesDelegationToContract(contractAddress, options);\n      }\n\n      async signOracleQueryDelegationToContract(\n        contractAddress,\n        oracleQueryId,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, oracleQueryId };\n          genConfirmCallback('sign delegation of oracle query to contract')(id, opt, aeppOrigin);\n        }\n        return super.signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n      }\n\n      async signDelegation(delegation, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const opt = { ...options, ...unpackDelegation(delegation) };\n          genConfirmCallback('sign delegation')(id, opt, aeppOrigin);\n        }\n        return super.signDelegation(delegation, options);\n      }\n\n      static generate() {\n        // TODO: can inherit parent method after implementing https://github.com/aeternity/aepp-sdk-js/issues/1672\n        return new AccountMemoryProtected(generateKeyPair().secretKey);\n      }\n    }\n\n    this.aeSdk = new AeSdkWallet({\n      id: window.origin,\n      type: WALLET_TYPE.window,\n      nodes: [\n        { name: 'ae_uat', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'ae_mainnet', instance: new Node('https://mainnet.aeternity.io') },\n      ],\n      accounts: [\n        new AccountMemoryProtected('9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200'),\n        AccountMemoryProtected.generate(),\n      ],\n      onCompiler: new CompilerHttp('https://v7.compiler.aepps.com'),\n      name: 'Wallet Iframe',\n      onConnection: (aeppId, params, origin) => {\n        if (!confirm(`Client ${params.name} with id ${aeppId} at ${origin} want to connect`)) {\n          throw new RpcConnectionDenyError();\n        }\n        aeppInfo[aeppId] = params;\n        setTimeout(() => this.stopSharingWalletInfo());\n      },\n      onSubscription: genConfirmCallback('subscription'),\n      onAskAccounts: genConfirmCallback('get accounts'),\n      onDisconnect: (clientId) => {\n        console.log('disconnected client', clientId);\n        this.clientId = null;\n      },\n    });\n\n    if (this.runningInFrame) this.shareWalletInfo();\n\n    this.nodeName = this.aeSdk.selectedNodeName;\n    [this.address] = this.aeSdk.addresses();\n\n    this.$watch(\n      ({ address, nodeName }) => [address, nodeName],\n      ([address]) => {\n        this.balancePromise = this.aeSdk.getBalance(address);\n      },\n      { immediate: true },\n    );\n\n    // TODO: replace setInterval with subscription after refactoring\n    setInterval(() => this.updateClientStatus(), 1000);\n    this.$watch(({ clientId }) => [clientId], () => this.updateClientStatus(), { immediate: true });\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n\n<style lang=\"scss\" scoped>\ninput[id=toggle-aepp] {\n  display: none;\n}\n\nlabel[for=toggle-aepp]::after {\n  font-size: initial;\n  font-weight: initial;\n  text-decoration: underline dotted;\n  cursor: pointer;\n}\n\n@media (max-width: 450px), (max-height: 650px) {\n  input[id=toggle-aepp] {\n    &:checked ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Hide aepp';\n      }\n\n      .group {\n        display: none;\n      }\n    }\n\n    &:not(:checked) ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Show aepp';\n      }\n\n      iframe {\n        display: none;\n      }\n    }\n  }\n}\n</style>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegationToContract = 'delegationToContract.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { AensName, ConsensusProtocolVersion, Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\nimport { NotImplementedError } from '../utils/errors';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signTypedData(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signTypedData method');\n  }\n\n  /**\n   * Sign delegation of AENS, oracle operations to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @param options.isOracle - Use to generate an oracle delegation signature in Ceres, otherwise an\n   * AENS preclaim delegation signature would be generated\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of an AENS name to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param name - AENS name to manage by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signNameDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signNameDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of all AENS names to a contract (not available in Iris)\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signAllNamesDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signAllNamesDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of oracle query to a contract\n   *\n   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded\n   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.\n   *\n   * Warning! Implementations needs to ensure that oracle query and contract exists unless\n   * https://github.com/aeternity/aesophia/issues/474 is fixed.\n   *\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param oracleQueryId - Oracle query ID to reply by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signOracleQueryDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signOracleQueryDelegationToContract method');\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegation(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegation method');\n  }\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Signs a message, and then verifies that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9;\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      const tx = unpackTx(encode(buf, Encoding.Transaction));\n      if (tag != null && tx.tag !== tag) throw new ArgumentError('Tag', Tag[tag], Tag[tx.tag]);\n      return tx;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n      ),\n    );\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag } from '../constants';\nimport coinAmount from './coin-amount';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the Base fee gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base fee\n * @example\n * ```js\n * TX_FEE_BASE('channelForceProgress') => new BigNumber(30 * 15000)\n * ```\n */\nconst TX_FEE_BASE_GAS = (txType: Tag): BigNumber => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ChannelOffChainUpdateCallContract]: 0,\n    [Tag.ChannelOffChainUpdateCreateContract]: 0,\n    [Tag.ChannelOffChainUpdateDeposit]: 0,\n    [Tag.ChannelOffChainUpdateWithdraw]: 0,\n    [Tag.ChannelOffChainUpdateTransfer]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return new BigNumber(factor * BASE_GAS);\n};\n\n/**\n * Calculate fee for Other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The Other fee\n * @example\n * ```js\n * TX_FEE_OTHER_GAS('oracleResponse',10, { relativeTtl: 10, innerTxSize: 10 })\n *  => new BigNumber(10).times(20).plus(Math.ceil(32000 * 10 / Math.floor(60 * 24 * 365 / 2)))\n * ```\n */\nconst TX_FEE_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): BigNumber => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return new BigNumber(txSize)\n        .times(GAS_PER_BYTE)\n        .plus(\n          Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL)),\n        );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return new BigNumber(txSize).minus(innerTxSize).times(GAS_PER_BYTE);\n    default:\n      return new BigNumber(txSize).times(GAS_PER_BYTE);\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate fee based on tx type and params\n */\nexport function buildFee(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_FEE_BASE_GAS(txObject.tag)\n    .plus(TX_FEE_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    }))\n    .times(MIN_GAS_PRICE);\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = buildFee(rebuildTx(fee), unpackTx, buildTx);\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee, _pickBiggerFee,\n    }: {\n      rebuildTx: (params: any) => Encoded.Transaction;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingMinFee?: BigNumber;\n      _pickBiggerFee?: boolean;\n    },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_pickBiggerFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n};\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    { onNode, absoluteTtl }: { onNode?: Node; absoluteTtl?: boolean },\n  ) {\n    if (absoluteTtl !== true && value !== 0 && value != null) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value += (await onNode.getCurrentKeyBlock()).height;\n    }\n    return value;\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & { strategy?: NextNonceStrategy; onNode?: Node },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\nimport { isAddressValid } from '../../../utils/crypto';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) payload = [ID_TAG, addressAny.serialize(id)];\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError('Raw pointer', `shorter than ${DATA_LENGTH_MAX + 1} bytes`, `${data.length} bytes`);\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(([bKey, bId]) => {\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray);\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n};\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildFee } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildFee(rebuildTx(gasMax), unpackTx, buildTx).dividedBy(MIN_GAS_PRICE);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _pickBiggerFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import coinAmount from './coin-amount';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE } from '../constants';\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, gasLimit, gasPrice, fee, address, pointers,\n  pointers2, queryFee, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, withDefault, withFormatting, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// # CONTRACT\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n// TODO: inline after dropping Iris compatibility\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\nconst nameTtl = withFormatting(\n  (value) => {\n    const NAME_TTL = 180000;\n    value ??= NAME_TTL;\n    if (value >= 1 && value <= NAME_TTL) return value;\n    throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n  },\n  shortUInt,\n);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(2),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers2,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types';\nimport {\n  ArgumentError, DecodeError, SchemaNotFoundError, InternalError,\n} from '../../utils/errors';\nimport {\n  Encoding, Encoded, encode, decode,\n} from '../../utils/encoder';\nimport { readInt } from './helpers';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null) throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) => (\n    field.serialize(params[key], { ...params, ...extraParams }, params)\n  ));\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name, field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId } from './helpers';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common';\nimport { ArgumentError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction;\n/**\n * Build node entry with a custom encoding\n * @param params - Entry params\n * @param options - Options\n * @param options.prefix - Output encoding\n */\nexport function buildTx<E extends TxEncoding>(\n  params: TxParams,\n  { prefix }: { prefix: E },\n): Encoded.Generic<E>;\nexport function buildTx(\n  params: TxParams,\n  { prefix }: { prefix?: TxEncoding } = {},\n): Encoded.Generic<TxEncoding> {\n  return packRecord(txSchema, Tag, params, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n    buildTx,\n    rebuildTx: (overrideParams: any) => buildTx(\n      { ...params, ...overrideParams },\n    ),\n  }, prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n  }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx or gaAttach\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  const params = unpackTx(contractTx);\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import SchemaTypes from '../SchemaTypes';\nimport { address, nameId, shortUIntConst } from '../field-types';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  AensWildcard = 1,\n  AensName = 2,\n  AensPreclaim = 3,\n  Oracle = 4,\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(DelegationTag.AensWildcard),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensName),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  nameId,\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensPreclaim),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.OracleResponse),\n  version: shortUIntConst(1, true),\n  queryId: queryIdField,\n  contractAddress: address(Encoding.ContractAddress),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { DelegationTag, schemas } from './schema';\nimport { DlgParams, DlgUnpacked } from './schema.generated';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash, messagePrefixLength,\n} from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { produceNameId } from '../tx/builder/helpers';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\nimport { packDelegation } from '../tx/builder/delegation';\n\nconst secretKeys = new WeakMap();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKeys.get(this)).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return sign(data, secretKeys.get(this));\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion, isOracle }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountMemory:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(produceNameId(name)),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      Buffer.from('AENS'),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    const oracleQueryIdDecoded = decode(oracleQueryId);\n    const addressDecoded = decode(this.address);\n    // TODO: remove after fixing https://github.com/aeternity/aesophia/issues/475\n    if (oracleQueryIdDecoded.compare(addressDecoded) === 0) {\n      throw new ArgumentError('oracleQueryId', 'not equal to account address', oracleQueryId);\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      oracleQueryIdDecoded,\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength, new Uint8Array([1]), Buffer.from(networkId), decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","export default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion: string,\n): boolean {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const versionComponents = getComponents(version);\n  const geComponents = getComponents(geVersion);\n  const ltComponents = getComponents(ltVersion);\n\n  const base = Math.max(...versionComponents, ...geComponents, ...ltComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  const vNumber = componentsToNumber(versionComponents);\n  const geNumber = componentsToNumber(geComponents);\n  const ltNumber = componentsToNumber(ltComponents);\n  return vNumber >= geNumber && vNumber < ltNumber;\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        // TODO: remove pause after fixing https://github.com/aeternity/aeternity/issues/3803\n        // gap to ensure that node won't reject the nonce\n        requestQueues.set(key, req.then(async () => pause(750), () => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        let body;\n        try {\n          body = JSON.parse(error.response.bodyAsText);\n        } catch (e) {\n          body = null;\n        }\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  ignorePath: string,\n  versionPromise: Promise<string | Error>,\n  geVersion: string,\n  ltVersion: string,\n): PipelinePolicy => ({\n  name: 'version-check',\n  async sendRequest(request, next) {\n    if (new URL(request.url).pathname === ignorePath) return next(request);\n    const version = await versionPromise;\n    if (version instanceof Error) throw version;\n    const args = [version, geVersion, ltVersion] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n    return next(request);\n  },\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const statusesToNotRetry = [200, 400, 403, 410, 500];\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((el) => (el / intervalSum) * retryOverallDelay);\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) await pause(intervalsInMs[attempt - 1]);\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  serializedName: \"Tx\",\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    uberParent: \"Tx\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\",\n    },\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hashrate: {\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\",\n        },\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  \"Tx.Tx\": Tx,\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationSpec } from '@azure/core-client';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  #networkIdPromise?: Promise<string | Error>;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => ` ${body.reason}`),\n      ],\n      ...options,\n    });\n    if (!ignoreVersion) {\n      const statusPromise = this.getStatus();\n      const versionPromise = statusPromise.then(({ nodeVersion }) => nodeVersion, (error) => error);\n      this.#networkIdPromise = statusPromise.then(({ networkId }) => networkId, (error) => error);\n      this.pipeline.addPolicy(\n        genVersionCheckPolicy('node', '/v3/status', versionPromise, '6.2.0', '7.0.0'),\n      );\n    }\n    this.intAsString = true;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    this.#networkIdPromise ??= this.getStatus().then(({ networkId }) => networkId);\n    const networkId = await this.#networkIdPromise;\n    if (networkId instanceof Error) throw networkId;\n    return networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(),\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl >= height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.Oracle === tx.tag || Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n  // TODO: move to fee field of tx builder after dropping Iris\n  (tx, { consensusProtocolVersion }) => ((\n    Tag.GaAttachTx === tx.tag\n      && ConsensusProtocolVersion.Ceres === consensusProtocolVersion\n      && tx.nonce !== 1\n  ) ? [{\n      message: `Account ${tx.ownerId} can't become generalized because it is already used`,\n      key: 'AccountUsed',\n      checkedKeys: ['nonce'],\n    }]\n    : []),\n);\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError, isAccountNotFoundError, pause } from './utils/other';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { DRY_RUN_ACCOUNT } from './tx/builder/schema';\nimport { AensName } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError, TransactionError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport function _getPollInterval(\n  type: 'block' | 'microblock', // TODO: rename to 'key-block' | 'micro-block'\n  { _expectedMineRate = 180000, _microBlockCycle = 3000, _maxPollInterval = 5000 }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; _maxPollInterval?: number },\n): number {\n  const base = {\n    block: _expectedMineRate,\n    microblock: _microBlockCycle,\n  }[type];\n  return Math.min(base / 3, _maxPollInterval);\n}\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @returns Current chain height\n */\nexport async function getHeight({ onNode }: { onNode: Node }): Promise<number> {\n  return (await onNode.getCurrentKeyBlockHeight()).height;\n}\n\n/**\n * Wait for a transaction to be mined\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, onNode, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= _getPollInterval('microblock', options);\n  const max = await getHeight({ onNode }) + blocks;\n  do {\n    const tx = await onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    await pause(interval);\n  } while (await getHeight({ onNode }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= _getPollInterval('block', options);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = (await onNode.getCurrentKeyBlockHeight()).height;\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      __queue != null ? { requestOptions: { customHeaders: { __queue } } } : {},\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt, isAddressValid } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport { Tag, AensName, ConsensusProtocolVersion } from './tx/builder/constants';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { UnsupportedProtocolError } from './utils/errors';\nimport { sendTransaction, SendTransactionOptions, getName } from './chain';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const hasRawPointers = Object.values(allPointers)\n    .some((v) => isAddressValid(v, Encoding.Bytearray));\n  const isIris = (await options.onNode.getNodeInfo())\n    .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n  if (hasRawPointers && isIris) {\n    throw new UnsupportedProtocolError('Raw pointers are available only in Ceres, the current protocol is Iris');\n  }\n\n  const nameUpdateTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameUpdateTx,\n    version: hasRawPointers ? 2 : 1,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  /**\n   * Get the pointers from the node and merge with provided ones. Pointers with the same key will be\n   * overwritten.\n   */\n  extendPointers?: boolean;\n  /**\n   * a suggestion as to how long any clients should cache this information\n   */\n  clientTtl?: number;\n  /**\n   * Name ttl represented in number of blocks (Max value is 50000 blocks)\n   */\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl?: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl, options = {}) {\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid or claiming without preclaim (in Ceres)\n * @param options - options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport {\n  sendTransaction, getBalance, resolveName, SendTransactionOptions,\n} from './chain';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.PayingForTx, payerId: options.onAccount.address, tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport {\n  _getPollInterval, getHeight, sendTransaction, SendTransactionOptions,\n} from './chain';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, onNode, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  interval ??= _getPollInterval('microblock', options);\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= _getPollInterval('microblock', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ onNode });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query'>;\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'callerId' | 'oracleId'>;\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response'>;\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat'>;\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { DRY_RUN_ACCOUNT } from '../tx/builder/schema';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun, sendTransaction,\n  SendTransactionOptions,\n} from '../chain';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await aeSdk.initializeContract({ sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(tx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      const isIris = (await onNode.getNodeInfo())\n        .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n      if (!isIris && isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  {\n    onAccount, omitAddress, isOracle, ...options\n  }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    isOracle?: boolean;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const { nodeNetworkId, consensusProtocolVersion } = await options.onNode.getNodeInfo();\n  const signOpts = { networkId: nodeNetworkId, consensusProtocolVersion };\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signDelegationToContract(contractAddress, { ...signOpts, isOracle }),\n    );\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, signOpts),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, signOpts),\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { sendTransaction, SendTransactionOptions, getAccount } from '../chain';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const contractId = buildContractIdByContractTx(tx);\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nexport function getValueOrErrorProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb() as object; // to get a native exception in case it missed\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get'\n        ? res.bind(target) // otherwise it fails with attempted to get private field on non-instance\n        : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nconst { InvalidTxError: _2, ...chainMethodsOther } = chainMethods;\n\nconst methods = {\n  ...chainMethodsOther,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(\n    mergeWith: AeSdkMethodsOptions = {},\n  ): AeSdkMethodsOptions & { onAccount: AccountBase; onCompiler: CompilerBase; onNode: Node } {\n    return {\n      ...this._options,\n      onAccount: getValueOrErrorProxy(() => this._options.onAccount),\n      onNode: getValueOrErrorProxy(() => this._options.onNode),\n      onCompiler: getValueOrErrorProxy(() => this._options.onCompiler),\n      ...mergeWith,\n    };\n  }\n\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this.getContext(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    return Contract.initialize<Methods>(this.getContext(options as AeSdkMethodsOptions));\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n    /**\n     * Make operation on specific account by providing address (to use account from sdk) or instance\n     * of AccountBase (like MemoryAccount)\n     */\n    onAccount: OnAccount;\n  } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, getValueOrErrorProxy, AeSdkMethodsOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param name - AENS name\n   * @param options - Options\n   */\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signAllNamesDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signAllNamesDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param oracleQueryId - Oracle query id\n   * @param options - Options\n   */\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & {\n    onNode: Node;\n    onAccount: AccountBase;\n    onCompiler: CompilerBase;\n  } {\n    return {\n      ...this._options,\n      onNode: getValueOrErrorProxy(() => this.api),\n      onCompiler: getValueOrErrorProxy(() => this.compilerApi),\n      ...mergeWith,\n      onAccount: mergeWith.onAccount != null\n        ? this._resolveAccount(mergeWith.onAccount)\n        : getValueOrErrorProxy(() => this._resolveAccount()),\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport { decode, Encoded } from './utils/encoder';\nimport { UnavailableAccountError } from './utils/errors';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  /**\n   * @param options - Options\n   */\n  constructor(\n    { accounts, ...options }: { accounts?: AccountBase[] }\n    & ConstructorParameters<typeof AeSdkBase>[0] = {},\n  ) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = (\n    new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>()\n  );\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\nimport { AensName } from '../../tx/builder/constants';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegationToContract]: (\n    p: {\n      contractAddress: Encoded.ContractAddress;\n      name?: AensName;\n      oracleQueryId?: Encoded.OracleQueryId;\n      allNames?: boolean;\n      isOracle?: boolean;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (\n    p: {\n      delegation: Encoded.Bytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import JsonBig from 'json-bigint';\nimport BigNumber from 'bignumber.js';\nimport { mapObject } from './other';\n\nconst jsonBig = JsonBig({ storeAsString: true });\n\nconst convertValuesToBigNumbers = (value: any): any => {\n  if (typeof value === 'object' && value !== null && value.constructor === Object) {\n    return mapObject(value, ([k, v]) => [k, convertValuesToBigNumbers(v)]);\n  }\n  if (Array.isArray(value)) {\n    return value.map((item) => convertValuesToBigNumbers(item));\n  }\n  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {\n    const bn = new BigNumber(value);\n    bn.toJSON = () => bn.toString(10);\n    return bn;\n  }\n  return value;\n};\n\nexport default {\n  stringify: (...args: Parameters<typeof JsonBig['stringify']>): string => (\n    jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1))\n  ),\n  parse: jsonBig.parse,\n};\n","import { v4 as uuid } from '@aeternity/uuid';\nimport AeSdk from './AeSdk';\nimport verifyTransaction from './tx/validator';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport {\n  METHODS, RPC_STATUS, SUBSCRIPTION_TYPES, WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError, RpcPermissionDenyError, RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema';\nimport { InternalError, UnknownRpcClientError } from './utils/errors';\nimport AccountBase from './account/Base';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types';\nimport { Encoded } from './utils/encoder';\nimport jsonBig from './utils/json-big';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string, params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>, origin: string\n) => void;\n\ntype OnSubscription = (\n  clientId: string, params: Parameters<WalletApi[METHODS.subscribeAddress]>[0], origin: string\n) => void;\n\ntype OnDisconnect = (\n  clientId: string, params: Parameters<WalletApi[METHODS.closeConnection]>[0]\n) => void;\n\ntype OnAskAccounts = (\n  clientId: string, params: undefined, origin: string\n) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _getAccountsForClient({ addressSubscription }: RpcClientsInfo): Accounts {\n    const { current, connected } = this.getAccounts();\n    return {\n      current: addressSubscription.has('current') || addressSubscription.has('connected')\n        ? current : {},\n      connected: addressSubscription.has('connected') ? connected : {},\n    };\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .filter((client) => client.addressSubscription.size !== 0)\n      .forEach((client) => client.rpc\n        .notify(METHODS.updateAddress, this._getAccountsForClient(client)));\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...client.connectNode && this._getNode(),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return RPC_STATUS.CONNECTED === this._getClient(clientId).status\n      && this._getClient(clientId).rpc.connection.isConnected();\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = uuid();\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({\n            name, version, icons, connectNode,\n          }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...await this.getWalletInfo(),\n              ...connectNode && this._getNode(),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                // TODO: remove `type` as it always subscribe\n                await this.onSubscription(id, { type, value }, origin);\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this._getAccountsForClient(client),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            {\n              tx, onAccount = this.address, returnSigned, innerTx,\n            },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount, aeppOrigin: origin, aeppRpcClientId: id, innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(jsonBig.stringify({\n                transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n              }));\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async ({\n            domain, aci, data, onAccount = this.address,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain, onAccount, aeppOrigin: origin, aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n          [METHODS.signDelegationToContract]: async ({\n            contractAddress, name, oracleQueryId, allNames, onAccount = this.address, isOracle,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            isOracle ??= false;\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await (\n              (name == null ? null : this\n                .signNameDelegationToContract(contractAddress, name, parameters))\n              ?? (oracleQueryId == null ? null : this\n                .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, parameters))\n              ?? (allNames !== true ? null : this\n                .signAllNamesDelegationToContract(contractAddress, parameters))\n              ?? this.signDelegationToContract(contractAddress, { ...parameters, isOracle })\n            );\n            return { signature };\n          },\n          [METHODS.signDelegation]: async ({ delegation, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await this.signDelegation(delegation, parameters);\n            return { signature };\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: window.location.origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci, CompileResult } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion }: { ignoreVersion?: boolean } = {}) {\n    super();\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    if (ignoreVersion !== true) {\n      const versionPromise = this.api.apiVersion()\n        .then(({ apiVersion }) => apiVersion, (error) => error);\n      this.api.pipeline.addPolicy(\n        genVersionCheckPolicy('compiler', '/api-version', versionPromise, '7.3.0', '9.0.0'),\n      );\n    }\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      cmpOut.warnings ??= []; // TODO: remove after requiring http compiler above or equal to 8.0.0\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=7883c6ac\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=0fa4fbfb&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\nimport \"./App.vue?vue&type=style&index=1&id=0fa4fbfb&lang=scss&scoped=true\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0fa4fbfb\"]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwallet_iframe\"] = self[\"webpackChunkwallet_iframe\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [999], function() { return __webpack_require__(96088); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","id","type","_createTextVNode","for","class","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","novalidate","onSubmit","_cache","_withModifiers","args","$options","navigate","$event","_ctx","nextAeppUrl","onFocus","target","select","_hoisted_5","_toDisplayString","address","_hoisted_6","nodeName","_hoisted_7","_createVNode","_component_Value","value","balancePromise","_hoisted_8","clientStatus","clientId","onClick","switchAccount","switchNode","key","disconnect","stopSharingWalletInfo","shareWalletInfo","runningInFrame","_createCommentVNode","ref","src","aeppUrl","_hoisted_9","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","UnknownRpcClientError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","connect","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","AccountBase","signTypedData","aci","signDelegationToContract","signNameDelegationToContract","signAllNamesDelegationToContract","signOracleQueryDelegationToContract","oracleQueryId","signDelegation","delegation","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","isAddressValid","maybeEncoded","encodings","encoding","genSalt","random","BigUint64Array","nacl","Number","BigInt","MAX_SAFE_INTEGER","hash","generateKeyPairFromSecret","secret","keyPair","fromSecretKey","generateKeyPair","raw","publicBuffer","publicKey","secretBuffer","secretKey","sign","privateKey","detached","verify","signature","messagePrefix","messagePrefixLength","messageToHash","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","genEntryField","serialize","txParams","buildTx","ArrayBuffer","isView","startsWith","buf","unpackTx","tx","genArrayField","itemHandler","items","params","buffers","genMapField","Mtree","values","MtreeValue","filter","recursiveType","withDefault","defaultValue","field","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","senderId","oracleId","_int32","nonceBE","alloc","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","commitmentHash","salt","padStart","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","isAuctionName","uInt","withFormatting","format","genShortUIntConstField","constValue","optional","shortUInt","constValueOptional","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","readUIntBE","subarray","genEncodedField","encodedData","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","serializeAettos","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_FEE_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ChannelOffChainUpdateCallContract","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateTransfer","ContractCreateTx","ContractCallTx","GaAttachTx","GaMetaTx","PayingForTx","factor","TX_FEE_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","plus","ceil","floor","minus","getOracleRelativeTtl","ttlKeys","buildFee","builtTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","coinAmount","_value","_computingMinFee","_pickBiggerFee","minFee","gt","prepare","onNode","absoluteTtl","getCurrentKeyBlock","genNonceField","senderKey","strategy","getAccountNextNonce","replace","catch","nextNonce","addressAny","pointers","pointer","txFields","parameters","addressName","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","bKey","bId","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","Fate3","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","consensusProtocolVersion","keys","getNodeInfo","vm","abi","calculateGasLimitMax","gasMax","dividedBy","_computingGasLimit","gasLimitMax","gasLimit","_getProtocolDetails","c","kind","result","genEnumerationField","enm","v","getOracleByPubkey","queryFee","rlpEncode","_rlp","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","binary","unpTx","_classPrivateMethodInitSpec","node","forEach","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","get","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","k","path","_key","searchFrom","_MPTree","substring","rec","idx","genMPTreeField","genWrappedField","ORACLE_TTL_TYPES","DRY_RUN_ACCOUNT","pub","CallReturnType","entryAny","entry","entrySignedTx","SignedTx","entryMtreeValueArray","entryTreesPoi","TreesPoi","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","balance","flags","gaContract","gaAuthFun","encoded","signatures","SpendTx","recipientId","ttl","accountId","status","NamePreclaimTx","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","pointers2","NameTransferTx","NameRevokeTx","owner","ctVersion","active","boolean","referers","deposit","gasPrice","callData","callerId","contractId","callerNonce","gasUsed","returnValue","returnType","enumeration","queryFormat","responseFormat","oracleTtlValue","oracleTtlType","delta","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","to","caller","contract","callStack","ChannelClientReconnectTx","role","pubkey","accounts","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","authFun","gaId","authData","payerId","GaMetaTxAuthData","rlpDecode","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","unpackRecord","encodedRecord","expectedTag","index","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","DelegationTag","oracleAddressField","queryIdField","AensWildcard","accountAddress","AensName","AensPreclaim","packDelegation","unpackDelegation","secretKeys","getBufferToSign","networkId","innerTx","prefixes","rlpBinaryTx","AccountMemory","set","generate","signTransaction","txWithNetworkId","signMessage","dHash","isOracle","warn","oracleQueryIdDecoded","addressDecoded","compare","semverSatisfies","getComponents","i","versionComponents","geComponents","ltComponents","base","max","componentsToNumber","components","reverse","reduce","acc","vNumber","geNumber","ltNumber","genRequestQueuesPolicy","requestQueues","Map","policy","sendRequest","request","next","_requestQueues$get","headers","delete","getResponse","req","then","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","method","JSON","stringify","url","body","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","parse","e","genVersionCheckPolicy","ignorePath","versionPromise","genRetryOnFailurePolicy","retryCount","retryOverallDelay","statusesToNotRetry","intervals","Array","fill","_","intervalSum","a","b","intervalsInMs","attempt","_e$response$status","_e$response","Header","className","modelProperties","serializedName","required","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","time","info","pofHash","txsHash","ErrorModel","reason","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","transactions","blockHeight","blockHash","Tx","uberParent","polymorphicDiscriminator","clientName","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","op","RelativeTTL","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","top","txs","txEvents","DryRunAccount","pubKey","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","results","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","NameEntry","PeerPubKey","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","fromParam","limit","typeParam","Node","coreClient","_ref","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeight","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHash","getKeyBlockByHashOperationSpec","getKeyBlockByHeight","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHash","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHash","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGeneration","getCurrentGenerationOperationSpec","getGenerationByHash","getGenerationByHashOperationSpec","getGenerationByHeight","getGenerationByHeightOperationSpec","getAccountByPubkey","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHash","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxs","protectedDryRunTxsOperationSpec","getTransactionByHash","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContract","getContractOperationSpec","getContractCode","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByName","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_networkIdPromise","ignoreVersion","allowInsecureConnection","additionalPolicies","statusPromise","pipeline","addPolicy","getNetworkId","_classPrivateFieldGet2","nodeNetworkId","p","versions","getTransactionSignerAddress","_getSchema$find","getExecutionCost","isInitiator","res","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","_getPollInterval","_expectedMineRate","_microBlockCycle","_maxPollInterval","block","microblock","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","_ref2","oracleCall","contractCreate","contractCall","InvalidTxError","validation","getHeight","poll","interval","_interval","awaitHeight","_interval2","currentHeight","waitForTxConfirm","confirm","newBlockHeight","sendTransaction","txUnsigned","onAccount","waitMined","__queue","requestOptions","customHeaders","pollResult","txData","confirmationHeight","assign","verifyTx","getAccount","getBalance","addr","getGeneration","hashOrHeight","getMicroBlockTransactions","getKeyBlock","getMicroBlockHeader","txDryRunRequests","txDryRunHandler","rs","dryRunRes","Set","reject","resultPayload","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","getName","resolveName","resolveByNode","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","hasRawPointers","isIris","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","transfer","revoke","extendTtl","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","claim","opts","otherOptions","aensBid","spend","recipientIdOrName","transferFunds","fraction","bind","desiredAmount","integerValue","ROUND_HALF_UP","payForTransaction","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$onNode$getOrac","queries","has","add","stopped","pollForQueryResponse","responseBuffer","getQueryObject","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","handler","lastArg","registerOracle","oracleRegisterTx","Encoder","Calldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","compile","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","callStatic","$deploy","_opt$gasLimit","_other$result","_calldata","_name","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","ensureOracleQuery","oq","createDelegationSignature","ids","omitAddress","signOpts","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","getValueOrErrorProxy","valueCb","Proxy","Reflect","_2","chainMethodsOther","chainMethods","methods","aensMethods","spendMethods","oracleMethods","contractGaMethods","AeSdkMethods","_options","getContext","mergeWith","initializeContract","prototype","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","compilerApi","api","ensureNodeConnected","pool","selectedNodeName","selectNode","isNodeConnected","getNodesInPool","addresses","_resolveAccount","String","_options$networkId","_options$consensusPro","_options$networkId2","_options$consensusPro2","_options$networkId3","_options$consensusPro3","_options$networkId4","_options$consensusPro4","_options$networkId5","AeSdk","addAccount","selectedAddress","selectAccount","removeAccount","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","connection","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","RPC_VERSION","jsonBig","JsonBig","storeAsString","convertValuesToBigNumbers","bn","AeSdkWallet","onConnection","onSubscription","onAskAccounts","_type","_getAccountsForClient","addressSubscription","current","getAccounts","_pushAccountsToApps","_clients","_isRpcClientConnected","_getClient","client","size","rpc","updateAddress","_getNode","updateNetwork","connectNode","CONNECTED","_disconnectRpcClient","DISCONNECTED","removeRpcClient","addRpcClient","clientConnection","uuid","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","icons","getWalletInfo","subscribeAddress","subscribe","unsubscribe","subscription","returnSigned","aeppOrigin","aeppRpcClientId","signedTransaction","transactionHash","allNames","_isOracle","_ref3","readyToConnect","location","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","_cmpOut$warnings","cmpOut","warning","generateAciBySourceCode","generateAci","_normalizeClass","text","props","default","watch","valueToString","immediate","__exports__","Value","process","parent","$nextTick","attempts","$refs","aepp","contentWindow","aeSdk","intervalId","setInterval","clearInterval","updateClientStatus","mounted","aeppInfo","genConfirmCallback","actionName","aeppId","AccountMemoryProtected","MemoryAccount","unpackedTx","dataType","decodedData","decodeWithType","$watch","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}