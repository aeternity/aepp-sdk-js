{"version":3,"file":"js/app.af73a599.js","mappings":"0hKACEA,EAAAA,EAAAA,IAA0C,SAAnCC,GAAG,cAAcC,KAAK,Y,qBAC7BF,EAAAA,EAAAA,IAGK,YALPG,EAAAA,EAAAA,IAEM,oBAEFH,EAAAA,EAAAA,IAA2B,SAApBI,IAAI,kBAAa,K,GAGrBC,MAAM,S,UAEPL,EAAAA,EAAAA,IAAmB,WAAd,YAAQ,K,UAabA,EAAAA,EAAAA,IAAkB,WAAb,WAAO,K,UAIZA,EAAAA,EAAAA,IAAe,WAAV,QAAI,K,UAITA,EAAAA,EAAAA,IAAkB,WAAb,WAAO,K,UAIZA,EAAAA,EAAAA,IAAqB,WAAhB,cAAU,K,EAlCrB,Q,oEAAAM,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,MACEC,EACAC,GAKAT,EAAAA,EAAAA,IA8CM,MA9CNU,EA8CM,EA7CJV,EAAAA,EAAAA,IAYM,YAXJW,GACAX,EAAAA,EAAAA,IASO,QARLY,WAAA,GACCC,SAAMC,EAAA,KAAAA,EAAA,IAZfC,EAAAA,EAAAA,KAAA,IAAAC,IAYyBC,EAAAC,UAAAD,EAAAC,YAAAF,IAAQ,e,WAEzBhB,EAAAA,EAAAA,IAIC,SAHCE,KAAK,MAff,sBAAAY,EAAA,KAAAA,EAAA,GAAAK,GAgBmBC,EAAAC,YAAWF,GACnBG,QAAKR,EAAA,KAAAA,EAAA,GAAAK,GAAEA,EAAOI,OAAOC,W,iBADbJ,EAAAC,gBAAW,OAK1BrB,EAAAA,EAAAA,IAGM,YAFJyB,GACAzB,EAAAA,EAAAA,IAAwB,YAAA0B,EAAAA,EAAAA,IAAhBN,EAAAO,SAAO,MAEjB3B,EAAAA,EAAAA,IAGM,YAFJ4B,GACA5B,EAAAA,EAAAA,IAAyB,YAAA0B,EAAAA,EAAAA,IAAjBN,EAAAS,UAAQ,MAElB7B,EAAAA,EAAAA,IAGM,YAFJ8B,GACAC,EAAAA,EAAAA,IAAiCC,EAAA,CAAzBC,MAAOb,EAAAc,gBAAc,qBAE/BlC,EAAAA,EAAAA,IAGM,YAFJmC,GACAnC,EAAAA,EAAAA,IAAyF,WAApF,YAAQ0B,EAAAA,EAAAA,IAAGN,EAAAgB,cAAgB,aAAc,UAAMV,EAAAA,EAAAA,IAAGN,EAAAiB,UAAY,eAAJ,MAGjErC,EAAAA,EAAAA,IAAsD,UAA7CsC,QAAKxB,EAAA,KAAAA,EAAA,OAAAE,IAAEC,EAAAsB,eAAAtB,EAAAsB,iBAAAvB,KAAe,mBAC/BhB,EAAAA,EAAAA,IAAgD,UAAvCsC,QAAKxB,EAAA,KAAAA,EAAA,OAAAE,IAAEC,EAAAuB,YAAAvB,EAAAuB,cAAAxB,KAAY,eAGH,cAAjBI,EAAAgB,eAAY,WADpB9B,EAAAA,EAAAA,IAKS,UA9CbmC,IAAA,EA2COH,QAAKxB,EAAA,KAAAA,EAAA,OAAAE,IAAEC,EAAAyB,YAAAzB,EAAAyB,cAAA1B,KACT,mBAED,WACAV,EAAAA,EAAAA,IAKS,UApDbmC,IAAA,EAiDOH,QAAKxB,EAAA,KAAAA,EAAA,QAASM,EAAAuB,uBAAyB1B,EAAA2B,sB,QAErCxB,EAAAuB,sBAAwB,eAAiB,qBAApB,MAKnBvB,EAAAyB,gBAxDXC,EAAAA,EAAAA,IAAA,SAwDyB,WADvBxC,EAAAA,EAAAA,IAIE,UA3DJmC,IAAA,EAyDIM,IAAI,OACHC,IAAK5B,EAAA6B,S,OA1DVC,KAAA,G,CCSO,MAAeC,UAAkBC,MACtCC,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAMK,MAAMC,UAAqBP,EAChCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,cACd,EAMK,MAAME,UAAkBR,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAMK,MAAMG,UAAkBT,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAgBK,MAAMI,UAAsBV,EACjCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,eACd,EAMK,MAAMK,UAAsBX,EACjCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,eACd,EAMK,MAAMM,UAA0BZ,EACrCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,mBACd,EAMK,MAAMO,UAAkBb,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAMK,MAAMQ,UAAyBd,EACpCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,kBACd,EAMK,MAAMS,UAAoBf,EAC/BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,aACd,EAMK,MAAMU,UAAsBhB,EACjCE,WAAAA,CAAYe,EAAsBC,EAAsBC,GACtDf,MAAM,GAAGa,eAA0BC,UAAoBC,aACvDd,KAAKC,KAAO,eACd,EAMK,MAAMc,UAA6BR,EACxCV,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,sBACd,EAoCK,MAAMe,UAA+BrB,EAC1CE,WAAAA,GACEE,MAAM,oCACNC,KAAKC,KAAO,wBACd,EAgBK,MAAMgB,UAAwBtB,EACnCE,WAAAA,CAAYqB,EAAgBC,GAC1BpB,MAAM,CACJ,mBAAmBmB,iBACnB,qBAAqBC,KACrBC,KAAK,OACPpB,KAAKC,KAAO,iBACd,EAMK,MAAMoB,UAAkB1B,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EA0BK,MAAMqB,UAA4B3B,EACvCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,qBACd,EAMK,MAAMsB,UAAgC5B,EAC3CE,WAAAA,CAAY2B,EAAoBC,EAAiBC,EAAmBC,GAClE5B,MAAM,eAAeyB,aAAsBC,oBAA0BC,OAAeC,KACpF3B,KAAKC,KAAO,yBACd,EAgBK,MAAM2B,UAAsBjC,EACjCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,eACd,EAMK,MAAM4B,UAA0BD,EACrC/B,WAAAA,CAAYC,EAAU,2CACpBC,MAAMD,GACNE,KAAKC,KAAO,mBACd,EAMK,MAAM6B,UAAgC5B,EAC3CL,WAAAA,CAAY1B,GACV4B,MAAM,eAAe5B,mBACrB6B,KAAKC,KAAO,yBACd,EAMK,MAAM8B,UAAgC5B,EAC3CN,WAAAA,CAAYmC,EAAmCC,GAC7ClC,MAAM,QAAQiC,6BAAoCC,KAClDjC,KAAKC,KAAO,yBACd,EAMK,MAAMiC,UAAiC/B,EAC5CN,WAAAA,CAAYsC,EAAoBC,GAC9BrC,MAAM,oBAAoBoC,EAAQE,4DAA4DD,EAAWC,cACzGrC,KAAKC,KAAO,0BACd,EAMK,MAAMqC,UAA6BnC,EACxCN,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,sBACd,EAMK,MAAMsC,UAA+BnC,EAC1CP,WAAAA,CAAYC,GACVC,MAAM,6BAA6BD,KACnCE,KAAKC,KAAO,wBACd,EAMK,MAAMuC,UAA6BpC,EACxCP,WAAAA,CAAYpD,GACVsD,MAAM,0CAA0CtD,KAChDuD,KAAKC,KAAO,sBACd,EAgBK,MAAMwC,UAA8BrC,EACzCP,WAAAA,CAAYpD,GACVsD,MAAM,qBAAqBtD,kBAC3BuD,KAAKC,KAAO,uBACd,EA4FK,MAAMyC,UAA8BpC,EACzCT,WAAAA,CAAY8C,GACV5C,MAAM,YAAY4C,6DAClB3C,KAAKC,KAAO,uBACd,EAMK,MAAM2C,UAA+BtC,EAC1CT,WAAAA,GACEE,MAAM,6BACNC,KAAKC,KAAO,wBACd,EAMK,MAAM4C,UAA8BvC,EACzCT,WAAAA,CAAYiD,GACV/C,MAAM,yBAAyB+C,gBAC/B9C,KAAKC,KAAO,uBACd,EAMK,MAAM8C,UAAqCzC,EAChDT,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,8BACd,EAMK,MAAM+C,UAAoC1C,EAC/CT,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,6BACd,EAMK,MAAMgD,UAAgC3C,EAC3CT,WAAAA,GACEE,MAAM,0DACNC,KAAKC,KAAO,yBACd,EAMK,MAAMiD,WAAiC5C,EAC5CT,WAAAA,GACEE,MAAM,6BACNC,KAAKC,KAAO,0BACd,EAMK,MAAMkD,WAA4B7C,EAGvCT,WAAAA,CAAYC,EAAiBsD,GAC3BrD,MAAM,qBAA+B,MAAXD,EAAkB,GAAK,MAAMA,OACvDE,KAAKC,KAAO,sBACZD,KAAKoD,YAAcA,CACrB,EAMK,MAAMC,WAAoC/C,EAC/CT,WAAAA,CAAYI,GACVF,MAAM,YAAYE,+BAClBD,KAAKC,KAAO,6BACd,EAMK,MAAMqD,WAAgChD,EAC3CT,WAAAA,CAAY0D,EAAaC,GACvBzD,MACE,mBAAmBwD,mBAAwBC,mEAG7CxD,KAAKC,KAAO,yBACd,EAMK,MAAMwD,WAAoCnD,EAC/CT,WAAAA,CAAY6D,EAAuBC,GACjC5D,MACE,4BAA4B2D,sBAAkCC,yDAGhE3D,KAAKC,KAAO,6BACd,EAMK,MAAM2D,WAAsCtD,EACjDT,WAAAA,CAAY8D,EAAuCE,GACjD9D,MACE,kCAAkC8D,EAAc,GAAG,6CAC7CF,QAAmBE,EAAcC,KAAI,EAAE7D,KAAU,IAAIA,OAASmB,KAAK,wGAG3EpB,KAAKC,KAAO,+BACd,EAMK,MAAM8D,WAA6BxD,EACxCV,WAAAA,GACEE,MAAM,oBACNC,KAAKC,KAAO,sBACd,EAMK,MAAM+D,WAAoCzD,EAC/CV,WAAAA,GACEE,MAAM,0CACNC,KAAKC,KAAO,6BACd,EAMK,MAAMgE,WAA+B1D,EAC1CV,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,wBACd,EAMK,MAAMiE,WAA+B3D,EAC1CV,WAAAA,CAAYsE,GACVpE,MAAM,wBAAwBoE,KAC9BnE,KAAKC,KAAO,wBACd,EAMK,MAAMmE,WAA+B7D,EAC1CV,WAAAA,CAAYwE,GACVtE,MAAM,wBAAwBsE,KAC9BrE,KAAKC,KAAO,wBACd,EAMK,MAAMqE,WAA2B9D,EACtCX,WAAAA,CAAYI,GACVF,MAAM,kBAAkBE,mBACxBD,KAAKC,KAAO,oBACd,EAMK,MAAMsE,WAA0B/D,EACrCX,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,mBACd,EAMK,MAAMuE,WAAoB/D,EAC/BZ,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,aACd,EAMK,MAAMwE,WAA2BhE,EACtCZ,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,oBACd,EAMK,MAAMyE,WAAoBjE,EAC/BZ,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,aACd,EA0BK,MAAM0E,WAA4BlE,EACvCZ,WAAAA,CAAY+E,GACV7E,MAAM,qBAAqB6E,gBAC3B5E,KAAKC,KAAO,qBACd,EAMK,MAAM4E,WAA4BpE,EACvCZ,WAAAA,CAAYZ,EAAawC,GACvB1B,MAAM,8CAA8Cd,aAAewC,KACnEzB,KAAKC,KAAO,qBACd,EAMK,MAAM6E,WAAyBrE,EACpCZ,WAAAA,CAAYoC,GACVlC,MAAM,qBAAqBkC,gBAC3BjC,KAAKC,KAAO,aACd,EAMK,MAAM8E,WAA0BtE,EACrCZ,WAAAA,CAAYmF,GACVjF,MAAM,eAAeiF,2BACrBhF,KAAKC,KAAO,mBACd,EAMK,MAAMgF,WAA8BvE,EACzCb,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,uBACd,EAMK,MAAMiF,WAA+BxE,EAC1Cb,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,wBACd,EAMK,MAAMkF,WAA2BzE,EACtCb,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,oBACd,ECvvBa,MAAemF,GAGlBvF,WAAAA,EAAY,MAAEwF,GAAQ,IAC9BrF,KAAKqF,MAAQA,CACf,CAOAC,OAAAA,CAEEC,EAEAC,GAEA,GAAIxF,KAAKyF,cAAe,MAAM,IAAIR,GAAsB,wBAC1D,CAKA/F,UAAAA,GACE,IAAKc,KAAKyF,cAAe,MAAM,IAAIP,GAAuB,kDAC5D,CAKUQ,cAAAA,CAAe5F,GACnBE,KAAKqF,OAAOM,QAAQC,IAAI,mBAAoB9F,EAClD,CAKA+F,WAAAA,CAAY/F,GACNE,KAAKqF,OAAOM,QAAQC,IAAI,gBAAiB9F,EAC/C,E,wBCvCK,IAAWgG,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,2BAAjBA,EAAiB,qBAAjBA,CAAiB,MAQjBC,GAAW,SAAXA,GAAW,OAAXA,EAAW,mBAAXA,EAAW,yBAAXA,CAAW,MAQXC,GAAkB,SAAlBA,GAAkB,OAAlBA,EAAkB,yBAAlBA,EAAkB,6BAAlBA,CAAkB,MAQlBC,GAAO,SAAPA,GAAO,OAAPA,EAAO,gDAAPA,EAAO,kCAAPA,EAAO,yBAAPA,EAAO,6BAAPA,EAAO,gCAAPA,EAAO,2BAAPA,EAAO,8BAAPA,EAAO,kCAAPA,EAAO,oCAAPA,EAAO,wCAAPA,EAAO,oCAAPA,EAAO,sCAAPA,CAAO,MAkBPC,GAAU,SAAVA,GAAU,OAAVA,EAAU,yBAAVA,EAAU,+BAAVA,EAAU,mEAAVA,CAAU,MAY5B,MAAMC,GAAsE,GAKrE,MAAeC,WAAiBzG,EAOrC0G,MAAAA,GACE,MAAO,CACLC,KAAMtG,KAAKsG,KACXxG,QAASE,KAAKF,QACdyG,KAAMvG,KAAKuG,KAEf,CAEA,kBAAOC,CAAYC,GACjB,MAAMC,EAASP,GAAUQ,MAAMC,GAAOA,EAAGN,OAASG,EAAKH,OACvD,GAAc,MAAVI,EAAgB,MAAM,IAAI9E,EAAc,kCAAkC6E,EAAKH,QACnF,OAAO,IAAII,EAAOD,EAAKF,KACzB,EAMK,MAAMM,WAAmCT,GAK9CvG,WAAAA,CAAY0G,GACVxG,MAAM,wBAAuB+G,EAAAA,GAAAA,GAAA,YAHf,GAId9G,KAAKuG,KAAOA,EACZvG,KAAKC,KAAO,4BACd,GACD6G,EAAAA,GAAAA,GAVYD,GAA0B,OACd,GAUzBV,GAAUY,KAAKF,IAKR,MAAMG,WAA+BZ,GAK1CvG,WAAAA,CAAY0G,GACVxG,MAAM,+BAA8B+G,EAAAA,GAAAA,GAAA,YAHtB,GAId9G,KAAKuG,KAAOA,EACZvG,KAAKC,KAAO,wBACd,GACD6G,EAAAA,GAAAA,GAVYE,GAAsB,OACV,GAUzBb,GAAUY,KAAKC,IAKR,MAAMC,WAAoCb,GAK/CvG,WAAAA,GACEE,MAAM,iCAAgC+G,EAAAA,GAAAA,GAAA,YAHxB,GAId9G,KAAKC,KAAO,6BACd,GACD6G,EAAAA,GAAAA,GATYG,GAA2B,OACf,GASzBd,GAAUY,KAAKE,IAKR,MAAMC,WAA+Bd,GAK1CvG,WAAAA,CAAY0G,GACVxG,MAAM,wCAAuC+G,EAAAA,GAAAA,GAAA,YAH/B,GAId9G,KAAKuG,KAAOA,EACZvG,KAAKC,KAAO,wBACd,GACD6G,EAAAA,GAAAA,GAVYI,GAAsB,OACV,GAUzBf,GAAUY,KAAKG,IAKR,MAAMC,WAA6Bf,GAKxCvG,WAAAA,GACEE,MAAM,wCAAuC+G,EAAAA,GAAAA,GAAA,YAH/B,IAId9G,KAAKC,KAAO,sBACd,GACD6G,EAAAA,GAAAA,GATYK,GAAoB,OACR,IASzBhB,GAAUY,KAAKI,IAKR,MAAMC,WAA+BhB,GAK1CvG,WAAAA,CAAY1B,GACV4B,MAAM,sCAAsC5B,MAAW2I,EAAAA,GAAAA,GAAA,YAHzC,IAId9G,KAAKuG,KAAOpI,EACZ6B,KAAKC,KAAO,wBACd,GACD6G,EAAAA,GAAAA,GAVYM,GAAsB,OACV,IAUzBjB,GAAUY,KAAKK,IAKR,MAAMC,WAAyBjB,GAKpCvG,WAAAA,GACEE,MAAM,iEAAgE+G,EAAAA,GAAAA,GAAA,YAHxD,IAId9G,KAAKC,KAAO,kBACd,GACD6G,EAAAA,GAAAA,GATYO,GAAgB,OACJ,IASzBlB,GAAUY,KAAKM,IAKR,MAAMC,WAA+BlB,GAK1CvG,WAAAA,GACEE,MAAM,qBAAoB+G,EAAAA,GAAAA,GAAA,aAHX,OAIf9G,KAAKC,KAAO,wBACd,E,2YACD6G,EAAAA,GAAAA,GATYQ,GAAsB,QACT,OAS1BnB,GAAUY,KAAKO,IChN2B,IAAAC,GAAA,IAAAC,QAAAC,GAAA,IAAAD,QAAAE,GAAA,IAAAF,QAQ3B,MAAMG,WAAuCvC,GAyB1DvF,WAAAA,EAAY,OACV9B,EAAM,KACN6J,EAAOC,OAAM,OACbC,EAAM,cACNC,EAAa,iBACbC,EAAmBlC,GAAkBmC,WAClCC,GAQD,CAAC,GACHnI,MAAMmI,GA/BRC,GAAA,KAAAZ,QAAa,GAEbY,GAAA,KAASV,QAAO,GAEhBU,GAAA,KAAST,QAAK,GA4BZU,GAAKX,GAALzH,KAAejC,GACfqK,GAAKV,GAAL1H,KAAa4H,GACb5H,KAAK8H,OAASA,EACd9H,KAAK+H,cAAgBA,EACrB/H,KAAKgI,iBAAmBA,CAC1B,CAEAvC,WAAAA,GACE,OAAwB,MAAjBzF,KAAKqI,QACd,CAES/C,OAAAA,CACPC,EACAC,GAEAzF,MAAMuF,QAAQC,EAAWC,GACzBxF,KAAKqI,SAAYvI,IAA+B,IAAAwI,EAE9C,GAC0B,kBAAjBxI,EAAQyG,MAC6C,SAApC,QAArB+B,EAACxI,EAAQyG,KAAKgC,eAAO,IAAAD,EAAAA,EAAIxI,EAAQyG,KAAKA,MAAMgC,SAC/C,OACF,GAAmB,MAAfvI,KAAK8H,QAAkB9H,KAAK8H,SAAWhI,EAAQgI,OAAQ,OAC3D,GAAoB,MAAhBU,GAAKf,GAALzH,OAAwBwI,GAAKf,GAALzH,QAAiBF,EAAQ6C,OAAQ,OAC7D3C,KAAK0F,eAAe5F,GACpB,IAAI,KAAEyG,GAASzG,EACf,GAAiB,MAAbyG,EAAK7J,KAAc,CACrB,GAAIoD,EAAQyG,KAAK7J,OAASsD,KAAKgI,iBAAkB,OACjDzB,EAAOA,EAAKA,IACd,CACAhB,EAAUgB,EAAMzG,EAAQgI,OAAQhI,EAAQ6C,OAAO,EAEjD6F,GAAKd,GAAL1H,MAAWyI,iBAAiB,UAAWzI,KAAKqI,UAC5CD,GAAKb,GAALvH,KAAqBwF,EACvB,CAEStG,UAAAA,GAEP,GADAa,MAAMb,aACe,MAAjBc,KAAKqI,UAA0C,MAAtBG,GAAKjB,GAALvH,MAC3B,MAAM,IAAI4B,EAAc,2CAE1B4G,GAAKd,GAAL1H,MAAW0I,oBAAoB,UAAW1I,KAAKqI,iBACxCrI,KAAKqI,SACZG,GAAKjB,GAALvH,MAAkB2I,KAAlB3I,MACAoI,GAAKb,GAALvH,UAAqB4I,EACvB,CAES/C,WAAAA,CAAYgD,GAAgB,IAAAC,EACnC,GAAoB,MAAhBN,GAAKf,GAALzH,MAAsB,MAAM,IAAImF,GAAmB,sCACvD,MAAMrF,EAAgC,MAAtBE,KAAK+H,cAAwB,CAAErL,KAAMsD,KAAK+H,cAAexB,KAAMsC,GAAQA,EACvF9I,MAAM8F,YAAY/F,GAClB0I,GAAKf,GAALzH,MAAa+I,YAAYjJ,EAAoB,QAAbgJ,EAAE9I,KAAK8H,cAAM,IAAAgB,EAAAA,EAAI,IACnD,E,8ECpFa,MAAeE,I,4DCjBjBC,GAAQC,SAA2C,IAAIC,SAASC,IAC3EC,WAAWD,EAASE,EAAS,IAGlBC,GAAYA,CACvBC,EACAhG,IAG6BiG,OAAOC,YAAYD,OAAOE,QAAQH,GAAQ1F,IAAIN,IAGvEoG,GAAmB,MACvB,IAEE,OADAC,GAAOC,OAAO,CAACC,WAAWC,KAAK,OACxB,CACT,CAAE,MAAOC,GACP,OAAO,CACT,CACD,EAPwB,GASZC,GAAgBN,GACzB,CAACO,EAA6BC,IAC9BP,GAAOC,OAAOK,EAAKrG,KAAKuG,GAAOR,GAAOG,KAAKK,KAAMD,GAEjDP,GAAOC,OAOJ,SAASQ,GACdrL,EACAuK,GAEA,OAAOvK,KAAOuK,CAChB,CAOO,SAASe,GAAiBC,EAAWC,GAC1C,OAAOA,EAAMC,SAASF,EACxB,CAEO,SAASG,GAAuBV,GACrC,OAAOA,aAAiBW,GAAAA,IAAkC,MAArBX,EAAMY,YACtCZ,EAAMnK,QAAQ4K,SAAS,oBAC9B,CAUO,SAASI,GAAYb,GAC1B,KAAIA,aAAiBrK,OACrB,MAAMqK,CACR,CC7DO,IAAKc,GAAQ,SAARA,GAAQ,OAARA,EAAQ,qBAARA,EAAQ,uBAARA,EAAQ,qBAARA,EAAQ,oBAARA,EAAQ,uBAARA,EAAQ,gBAARA,EAAQ,wBAARA,EAAQ,0BAARA,EAAQ,yBAARA,EAAQ,2BAARA,EAAQ,oBAARA,EAAQ,eAARA,EAAQ,sBAARA,EAAQ,oBAARA,EAAQ,sBAARA,EAAQ,uBAARA,EAAQ,uBAARA,EAAQ,yBAARA,EAAQ,kBAARA,EAAQ,mBAARA,EAAQ,mBAARA,EAAQ,aAARA,EAAQ,cAARA,EAAQ,YAARA,EAAQ,mBAARA,EAAQ,sBAARA,EAAQ,kBAARA,CAAQ,M,gDCgBb,SAASC,GAAWC,GACzB,OAAO,IAAIC,IAASC,OAAOF,GAAOG,QACpC,CAKA,MAAMC,GAAc,CAClBN,GAASO,kBACTP,GAASQ,iBACTR,GAASS,mBACTT,GAASU,YACTV,GAASW,YACTX,GAASY,eACTZ,GAASa,MACTb,GAASc,IACTd,GAASe,WACTf,GAASgB,cACThB,GAASiB,WAELC,GAAc,CAClBlB,GAASmB,aACTnB,GAASoB,eACTpB,GAASqB,aACTrB,GAASsB,YACTtB,GAASuB,eACTvB,GAASwB,QACTxB,GAASyB,gBACTzB,GAAS0B,OACT1B,GAAS2B,cACT3B,GAAS4B,cACT5B,GAAS6B,eACT7B,GAAS8B,iBACT9B,GAAS+B,UACT/B,GAASgC,WACThC,GAASiC,WACTjC,GAASkC,MAMLC,GAAkB,CACtB,CAACnC,GAASmB,cAAe,GACzB,CAACnB,GAASoB,gBAAiB,GAC3B,CAACpB,GAASqB,cAAe,GACzB,CAACrB,GAASsB,aAAc,GACxB,CAACtB,GAASuB,gBAAiB,GAC3B,CAACvB,GAASwB,SAAU,GACpB,CAACxB,GAASyB,iBAAkB,GAC5B,CAACzB,GAAS0B,QAAS,GACnB,CAAC1B,GAAS2B,eAAgB,GAC1B,CAAC3B,GAAS4B,eAAgB,GAC1B,CAAC5B,GAAS6B,gBAAiB,GAC3B,CAAC7B,GAAS8B,kBAAmB,GAC7B,CAAC9B,GAAS+B,WAAY,GACtB,CAAC/B,GAASgC,YAAa,GACvB,CAAChC,GAASiC,YAAa,GACvB,CAACjC,GAASa,OAAQ,IAGpB,SAASuB,GAAkB5G,EAAkB7J,GAC3C,IAAK4N,GAAc5N,EAAMwQ,IAAkB,OAC3C,MAAME,EAASF,GAAgBxQ,GAC/B,GAAc,MAAV0Q,GAAkB7G,EAAK8G,SAAWD,EACtC,MAAM,IAAI3I,GAAmB,qBAAqB2I,gBAAqB7G,EAAK8G,iBAC9E,CAEA,MAAMC,GAAeC,GAAgCvC,GAAWA,GAAWuC,IAAUC,MAAM,EAAG,GAExFC,GAAeF,GAAgCrD,GAAc,CAACqD,EAASD,GAAYC,KAEzF,SAASG,GAAWC,GAClB,MAAMJ,EAAUI,EAAOH,MAAM,GAAI,GACjC,IAAKF,GAAYC,GAASK,OAAOD,EAAOH,OAAO,IAAK,MAAM,IAAIzJ,GAC9D,OAAOwJ,CACT,CAEA,MAAMM,GAAS,CACbC,OAASH,GAAuBF,GAAYE,GAAQtL,SAAS,UAC7D0L,OAASC,GAAmBN,GAAW7D,GAAOG,KAAKgE,EAAQ,YAGvDC,GAAS,CACbH,OAASH,GAAuBO,GAAAA,EAAKJ,OAAOL,GAAYE,IACxDI,OAASC,GAAmBN,GAAW7D,GAAOG,KAAKkE,GAAAA,EAAKH,OAAOC,MAG3DG,GAAaC,IACjB,MAAMC,EAAahD,GAAY1E,MAAM2H,GAAMA,IAAMF,IACjD,GAAkB,MAAdC,EAAoB,MAAO,CAACA,EAAYR,IAC5C,MAAMU,EAAatC,GAAYtF,MAAM2H,GAAMA,IAAMF,IACjD,GAAkB,MAAdG,EAAoB,MAAO,CAACA,EAAYN,IAC5C,MAAM,IAAItN,EAAc,SAAU,UAAU,IAAIsL,MAAgBZ,IAAajK,KAAK,QAASgN,EAAU,EAShG,SAASL,GAAOxH,GACrB,MAAOtE,EAAQuM,EAAgBC,GAASlI,EAAKmI,MAAM,KACnD,GAAsB,MAAlBF,EAAwB,MAAM,IAAIhK,GAAY,mCAAmC+B,KACrF,GAAa,MAATkI,EAAe,MAAM,IAAIjK,GAAY,oCAAoC+B,KAC7E,MAAO7J,EAAMiS,GAAWR,GAAUlM,GAC5BsL,EAAUoB,EAAQZ,OAAOS,GAE/B,OADArB,GAAkBI,EAAS7Q,GACpB6Q,CACT,CAQO,SAASO,GACdvH,EACA7J,GAEA,MAAO,CAAEiS,GAAWR,GAAUzR,GAE9B,OADAyQ,GAAkB5G,EAAM7J,GACjB,GAAGA,KAAQiS,EAAQb,OAAOvH,IACnC,C,qBC/I6CqI,QAAAA,IAAAC,IACaf,OAAAgB,IAAAC,GAsBnD,SAASC,GAAeC,KAAyBC,GAC7B,IAArBA,EAAU7B,SAAc6B,EAAY,CAACnE,GAAS6B,iBAClD,IACEmB,GAAOkB,GACP,MAAME,EAAWF,EAAaP,MAAM,KAAK,GACzC,IAAKnE,GAAc4E,EAAUD,GAC3B,MAAM,IAAIvO,EACR,sBACAuO,EAAU7B,OAAS,EAAI,UAAU6B,EAAU9N,KAAK,QAAU8N,EAAU,GACpEC,GAGJ,OAAO,CACT,CAAE,MAAOlF,GACP,OAAO,CACT,CACF,CA4BO,SAASmF,GAAKnE,GACnB,OAAOpB,GAAOG,KAAK4E,GAAQ3D,OAAOrC,EAAW,IAC/C,CA0BO,SAASyG,GACd9I,EACA+I,EACAnR,GAEA,OAAOoR,GAAAA,KAAUC,SAASH,OAAO9I,EAAM+I,EAAWvB,GAAO5P,GAC3D,CAEA,MAAMsR,GAAgB5F,GAAOG,KAAK,8BAA+B,QACpD0F,GAAsBZ,GAAcW,GAAcpC,QAGxD,SAASsC,GAAc7P,GAC5B,MAAM+I,EAAMgB,GAAOG,KAAKlK,EAAS,QACjC,OAAOsP,GAAKlF,GAAc,CAACwF,GAAqBD,GAAeX,GAAcjG,EAAIwE,QAASxE,IAC5F,C,4BCjHkF,mBAAA+G,GAAA,yBAAAC,IAAAC,GAS3E,SAASC,GAASxJ,GAAuB,IAAAyJ,EAC9C,OAAOZ,GAAuB,QAAnBY,EAACC,GAAa1J,UAAK,IAAAyJ,EAAAA,EAAI,GACpC,CA4BO,SAASE,GAAWC,GACzB,MAAMC,EAAY,CAChBC,OAAQ,CAAC,CACPpQ,KAAM,OACNvD,KAAM,CAAE4T,OAAQ,CAAC,YAChB,CACDrQ,KAAM,UACNvD,KAAM,CAAE4T,OAAQ,CAAC,SAChB,CACDrQ,KAAM,YACNvD,KAAM,CAAE4T,OAAQ,CAAC,YAChB,CACDrQ,KAAM,kBACNvD,KAAM,CAAE4T,OAAQ,CAAC,uBAGfC,GAAa,IAAIX,IAAeY,YAAYJ,EAAW,CAAC,GACxDK,GAAY,IAAIZ,IAA2Ba,eAAeP,EAAQI,GACxE,OAAOnB,GAAKrB,GAAO0C,GACrB,CAEO,SAASE,GACdpK,EACAqK,EACAT,GAEA,OAAOf,GAAKlF,GAAc,CACxBwF,GAAqB,IAAI3F,WAAW,CAAC,IAAKmG,GAAWC,GAASJ,GAASa,GAAMxB,GAAKrB,GAAOxH,MAE7F,C,gBCjEO,MAAMsK,GAAkB,CAC7BC,IAAK,4CACLvN,OAAQ,uCAGGwN,GAAmB,IAGnBC,GAAgB,IAEhBC,GAAsB,KAKtBC,GAAsB,GAItBC,GAAkB5H,GAAU,CACvC,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,GAAI,MACJ,GAAI,MACJ,GAAI,MACJ,GAAI,MACJ,GAAI,MACJ,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,QACH,EAAG,QACH,EAAG,QACH,EAAG,UACF,EAAEtK,EAAKR,KAAW,CAACQ,EAAK,IAAImS,GAAAA,EAAU3S,GAAO4S,MAAMJ,OAE/C,IAAKK,GAAwB,SAAxBA,GAAwB,OAAxBA,EAAAA,EAAwB,oBAAxBA,CAAwB,MAQxBC,GAAS,SAATA,GAAS,OAATA,EAAAA,EAAS,kBAATA,EAAAA,EAAS,sBAATA,EAAAA,EAAS,4DAATA,EAAAA,EAAS,4DAATA,EAAAA,EAAS,kBAATA,EAAAA,EAAS,sDAATA,EAAAA,EAAS,oBAATA,EAAAA,EAAS,oBAATA,CAAS,MAeTC,GAAU,SAAVA,GAAU,OAAVA,EAAAA,EAAU,oBAAVA,EAAAA,EAAU,sBAAVA,EAAAA,EAAU,kBAAVA,CAAU,MAaVC,GAAG,SAAHA,GAAG,OAAHA,EAAAA,EAAG,2BAAHA,EAAAA,EAAG,yBAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,qCAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,iCAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,mCAAHA,EAAAA,EAAG,mCAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,yCAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,6CAAHA,EAAAA,EAAG,wDAAHA,EAAAA,EAAG,mDAAHA,EAAAA,EAAG,+CAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,yCAAHA,EAAAA,EAAG,6CAAHA,EAAAA,EAAG,4DAAHA,EAAAA,EAAG,qDAAHA,EAAAA,EAAG,+BAAHA,EAAAA,EAAG,2BAAHA,EAAAA,EAAG,iCAAHA,CAAG,M,oBCrFFC,GAAkB,CAC7B,CAACJ,GAAyBK,OAAQ,CAChC,kBAAmB,CACjBC,UAAW,CAACL,GAAUM,OAAQC,WAAY,CAACN,GAAWO,OAExD,gBAAiB,CACfH,UAAW,GAAIE,WAAY,CAACN,GAAWO,OAEzC,cAAe,CACbH,UAAW,GAAIE,WAAY,CAACN,GAAWQ,MAAOR,GAAWO,SAUxD,SAASE,GACdC,EACAxV,GACW,IAAAyV,EACX,MAAMC,EAAWV,GAAgBQ,GAAiBxV,GAClD,MAAO,CACLkV,UAAgC,QAAvBO,EAAEC,EAASR,UAAU,UAAE,IAAAO,EAAAA,EAAIZ,GAAUc,MAC9CP,WAAYM,EAASN,WAAW,GAEpC,CAEA,QACEQ,SAAAA,CACE7T,EACA8T,GACA,yBAAEC,EAA2BlB,GAAyBK,QAE9C,IAAAc,EAGR,OAFK,QAALA,EAAAhU,SAAK,IAAAgU,IAALhU,EAAUwT,GAAmBO,EAA0B,oBAEhD3I,GAAOG,KAAK,CAACvL,EAAMmT,UAAW,EAAGnT,EAAMqT,YAChD,EAEA,aAAMY,CACJjU,EACA8T,EAEArK,GAEA,OAAa,MAATzJ,EAAsBA,EACc,MAApCyJ,EAAQsK,0BACyC,IAAjD/I,OAAOkJ,KAAKrB,IAA0BjE,QACpB,MAAlBnF,EAAQ0K,OACHX,UACE/J,EAAQ0K,OAAOC,eAAeL,yBACrC,wBALJ,CASF,EAEAhM,WAAAA,CAAYmH,GACV,MAAOmF,EAAG,CAAGC,GAAOpF,EACpB,MAAO,CAAEiE,WAAYkB,EAAIhB,YAAaiB,EACxC,G,oBClEF,QACEC,mBAAAA,CAAoBC,EAA6BrO,GAC/C,MAAMsO,EAAOzB,GAAI0B,iBAAmBvO,GAAO6M,GAAI2B,WAAaxO,EACxD,gBAAkB,cACtB,OAAOqN,GAAmBgB,EAAGC,GAAMpB,UACrC,EAEAQ,SAAAA,CACE7T,GACA,IAAEmG,IACF,yBAAE4N,EAA2BlB,GAAyBK,QAGtD,MAAM0B,EAAc,OAAL5U,QAAK,IAALA,EAAAA,EAASuB,KAAKgT,oBAAoBR,EAA0B5N,GAE3E,OAAOiF,GAAOG,KAAK,CAACqJ,GACtB,EAEA,aAAMX,CACJjU,GACA,IAAEmG,GAEFsD,GAEA,OAAa,MAATzJ,EAAsBA,EACc,MAApCyJ,EAAQsK,0BACyC,IAAjD/I,OAAOkJ,KAAKrB,IAA0BjE,QACpB,MAAlBnF,EAAQ0K,OACH5S,KAAKgT,2BACH9K,EAAQ0K,OAAOC,eAAeL,yBACrC5N,QALJ,CASF,EAEA4B,WAAAA,CAAYmH,GACV,OAAOA,EAAO,EAChB,G,oBChCK,SAAS2F,GAAQC,EAA0CC,GAAM,GAKtE,GAAW,MAAPD,EAAa,OAAO1J,GAAOG,KAAK,IACpC,GAAIyJ,OAAOC,UAAUH,IAAQnC,GAAAA,EAAUuC,YAAYJ,IAAQC,EAAK,CAE9D,GADKpC,GAAAA,EAAUuC,YAAYJ,KAAMA,EAAM,IAAInC,GAAAA,EAAUmC,KAChDA,EAAIG,YAAa,MAAM,IAAIrS,EAAU,iCAAiCkS,EAAIK,aAC/E,IAAIC,EAAYN,EAAIlR,SAAS,IAE7B,OADIwR,EAAUxG,OAAS,IAAM,IAAGwG,EAAY,IAAIA,KACzChK,GAAOG,KAAK6J,EAAW,MAChC,CACA,GAAmB,kBAARN,EACT,OAAO1J,GAAOG,KAAKuJ,GAErB,MAAM,IAAIvS,CACZ,C,oBCda8S,GAAkB,CAC7B/I,GAAS6B,eACT7B,GAASkC,KACTlC,GAASgC,WACThC,GAAS2B,cACT3B,GAASyB,gBACTzB,GAASwB,SAKI,SAASwH,MACnB7E,GAKH,MAAO,CAMLoD,SAAAA,CAAU0B,GACR,MAAMC,EAAMD,EAAOxG,MAAM,EAAG,GAC5B,IAAKjD,GAAc0J,EAAKH,IAAkB,MAAM,IAAIhP,GAAiBmP,GACrE,IAAK1J,GAAc0J,EAAK/E,GACtB,MAAM,IAAIvO,EAAc,mBAAoBuO,EAAU9N,KAAK,MAAO6S,GAEpE,MAAMC,EAAQJ,GAAgBK,QAAQF,GAAO,EAC7C,OAAOpK,GAAOG,KAAK,IAAIsJ,GAAQY,MAAWnG,GAAOiG,IACnD,EAOAxN,WAAAA,CAAY4N,GACV,MAAMF,EAAQrK,GAAOG,KAAKoK,GAAKC,WAAW,EAAG,GACvCJ,EAAMH,GAAgBI,EAAQ,GACpC,GAAW,MAAPD,EAAa,MAAM,IAAItP,GAAoBuP,GAC/C,IAAK3J,GAAc0J,EAAK/E,GACtB,MAAM,IAAIvO,EAAc,mBAAoBuO,EAAU9N,KAAK,MAAO6S,GAEpE,OAAOnG,GAAOsG,EAAIE,SAAS,GAAIL,EACjC,EAEJ,CC7De,SAASM,GACtBC,GAQA,MAAO,CACLlC,SAAAA,CAAUmC,EAAOlC,GACf,OAAOkC,EAAM3Q,KAAK0G,GAASgK,EAAYlC,UAAU9H,EAAM+H,IACzD,EAEA/L,WAAAA,CAAYkO,EAASnC,GACnB,OAAOmC,EAAQ5Q,KAAK6J,GAAW6G,EAAYhO,YAAYmH,EAAQ4E,IACjE,EAEJ,C,+CCUO,SAASoC,GACdC,EACAC,GAEA,MAAMC,EAAkBjL,GAAOG,KAAK,IAAI+D,GAAO6G,MAAatB,GAAQuB,KAC9DE,EAAU3F,GAAK0F,GACrB,OAAOhH,GAAOiH,EAAShK,GAASyB,gBAClC,CA0BA,MAAMwI,GAAc,SAEb,SAASC,GAAeC,GAC7B,MAAOjV,EAAMkV,KAAWC,GAASF,EAAUxG,MAAM,KACjD,GAAqB,IAAjB0G,EAAM/H,OAAc,MAAM,IAAI1M,EAAc,YAAa,yBAA0BuU,GACvF,GAAIC,IAAWH,GAAYxH,MAAM,GAC/B,MAAM,IAAI7M,EAAc,YAAa,iBAAiBqU,KAAeE,GAEvE,GAAI,0BAA0BG,KAAKpV,GACjC,MAAM,IAAIU,EAAc,YAAa,uBAAwBuU,GAE/D,GAAgB,MAAZjV,EAAK,IAA0B,MAAZA,EAAK,GAC1B,MAAM,IAAIU,EAAc,YAAa,0DAA2DuU,GAElG,GAAgB,MAAZjV,EAAK,GACP,MAAM,IAAIU,EAAc,YAAa,4BAA6BuU,GAEpE,GAAoB,MAAhBjV,EAAKqV,IAAI,GACX,MAAM,IAAI3U,EAAc,YAAa,0BAA2BuU,GAElE,IAAIK,EACJ,IACE,MAAMC,EAAI,IAAIC,IAAI,UAAUxV,KAAQkV,KACpC,GAAIK,EAAEE,SAAWF,EAAEG,SAAWH,EAAEI,KAAOJ,EAAEK,OAASL,EAAEpG,OAAS,IAAqB,MAAfoG,EAAEM,SACnE,MAAM,IAAInV,EAAc,YAAa,QAASuU,GAEhDK,EAAWC,EAAEO,IACf,CAAE,MAAO9L,GACP,GAAIA,aAAiB5I,WAAa4I,EAAMnK,QAAQ4K,SAAS,eACvD,MAAM,IAAI/J,EAAc,YAAa,QAASuU,GAEhD,MAAMjL,CACR,CACA,IAAK,iBAAiBoL,KAAKE,GACzB,MAAM,IAAI5U,EAAc,YAAa,wBAAyBuU,GAEhE,GAAIK,EAASlI,OAAS,GAAK2H,GAAY3H,OACrC,MAAM,IAAI1M,EAAc,YAAa,eAAgBuU,GAEvD,OAAOK,CACT,CAQO,SAASS,GAAc/V,GAC5B,OAAO6N,GAAOsB,GAAK6F,GAAehV,IAAQ8K,GAASkC,KACrD,CA6BO,SAASgJ,GAAQ7B,EAAcvK,GAAOG,KAAK,KAChD,OAAO,IAAIoH,GAAAA,EAAUvH,GAAOG,KAAKoK,GAAK/R,SAAS,OAAQ,IAAIA,SAAS,GACtE,CAOO,SAAS6T,GAAWhB,GACzBD,GAAeC,EACjB,CAQO,SAASiB,GAAYjB,GAC1B,IAEE,OADAgB,GAAWhB,IACJ,CACT,CAAE,MAAOjL,GACP,OAAO,CACT,CACF,CAGGc,GAAS6B,eACT7B,GAAS2B,cACT3B,GAASyB,gBACTzB,GAASwB,QA4BL,SAAS6J,GAAkBnW,GAChC,MAAMoW,EAAapB,GAAehV,GAAMoN,OAAS2H,GAAY3H,OAC7D,OAAO8D,GAAgBmF,KAAKC,IAAIF,EAAYnF,IAC9C,CCtMA,QACEoB,SAAAA,CAAU7T,GACR,GAAIgV,OAAOhV,GAAS,EAAG,MAAM,IAAIkC,EAAc,QAAS,wBAAyBlC,GACjF,OAAO6U,GAAQ7U,GAAO,EACxB,EAEA+H,WAAAA,CAAY/H,GACV,OAAOwX,GAAQxX,EACjB,GCJK,MAAMkV,GAAe6C,GACJ,kBAAXA,GACJ,CAAC,SAAU,SAAU,UAAU9L,gBAAgB8L,MAE/CC,MAAMD,IAAqB/C,OAAOC,UAAU8C,IAAWpF,GAAAA,EAAUuC,YAAY6C,ICT/E,IAAKE,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,WAAjBA,EAAiB,oBAAjBA,EAAiB,sBAAjBA,EAAiB,oBAAjBA,EAAiB,oBAAjBA,EAAiB,sBAAjBA,EAAiB,mBAAjBA,CAAiB,MAa7B,MAAMC,GAAyB,CAC7B,CAACD,GAAkBE,IAAK,EACxB,CAACF,GAAkBG,UAAW,EAC9B,CAACH,GAAkBI,WAAY,EAC/B,CAACJ,GAAkBK,UAAW,EAC9B,CAACL,GAAkBM,UAAW,GAC9B,CAACN,GAAkBO,WAAY,GAC/B,CAACP,GAAkBQ,SAAU,IAWlBC,GAAeA,CAC1B1Y,GACE2Y,eAAeV,GAAkBQ,OAAQG,qBAAqBX,GAAkBQ,WAGlF,IAAKvD,GAAYlV,GAAQ,MAAM,IAAIkC,EAAc,QAAS,WAAYlC,GAEtE,OAAO,IAAI2S,GAAAA,EAA2B,kBAAV3S,EAAqBA,EAAM4D,WAAa5D,GACjE6Y,UAAUX,GAAuBS,GAAgBT,GAAuBU,IACxEzD,SAAS,ECxCd,WACK2D,GAGHC,eAAAA,CAAgB/Y,EAA2B8T,EAAYrK,GACrD,OAAY,OAALzJ,QAAK,IAALA,EAAAA,EAAS,GAClB,EAEA6T,SAAAA,CACE7T,EACA8T,GACA,aAAE6E,EAAeV,GAAkBQ,UAAWhP,IAE9C,OAAOqP,GAAKjF,UACVtS,KAAKwX,gBACM,MAAT/Y,EAAgB0Y,GAAa1Y,EAAO,CAAE2Y,iBAAkB3Y,EACxD8T,EACArK,GAGN,G,oBCnBa,SAASuP,GACtBtI,EACAuI,GAMA,MAAO,CACLpF,SAAAA,CAAUqF,GACR,GAAmB,MAAfA,EAAqB,CACvB,IAAiB,IAAbD,EAAmB,OAAO7N,GAAOG,KAAK,IAC1C,MAAM,IAAIrJ,EAAc,eAAgB,WAAYgX,EACtD,CACA,OAAO5J,GAAO4J,EAChB,EAEAnR,WAAAA,CAAYmH,GACV,OAAOG,GAAOH,EAAQwB,EACxB,EAEJ,C,oBCpBe,SAASyI,GAA6ChT,GAanE,MAAO,CACL0N,SAAAA,CAAUuF,GAAU,UAAEC,IACpB,OAAIC,YAAYC,OAAOH,GAAkBhO,GAAOG,KAAK6N,GAC7B,kBAAbA,GAAyBA,EAASI,WAAW,OAC/ClK,GAAO8J,GAET9J,GAAO+J,EAAU,IAAKD,KAAoB,MAAPjT,GAAe,CAAEA,SAC7D,EAEA4B,WAAAA,CAAY4N,GAAK,YAAE8D,IACjB,OAAOA,EAAYpK,GAAOsG,EAAKrJ,GAASiB,WAAYpH,EACtD,EAEJ,C,oBC7Be,SAASuT,GAEtBC,GAIA,MAAMC,EAAS5O,OAAO4O,OAAOD,GAAKE,QAAQC,GAAmB,kBAANA,IACvD,MAAO,CACLjG,SAAAA,CAAU7T,GACR,GAAqB,kBAAVA,EAAoB,MAAM,IAAIkC,EAAc,QAAS,iBAAkBlC,GAClF,GAAIA,EAAQ,IAAM,MAAM,IAAIkC,EAAc,QAAS,sBAAuBlC,GAC1E,IAAK8L,GAAc9L,EAAO4Z,GACxB,MAAM,IAAI1X,EAAc,QAAS,wBAAyBlC,GAE5D,OAAOoL,GAAOG,KAAK,CAACvL,GACtB,EAEA+H,WAAAA,CAAYmH,GACV,GAAsB,IAAlBA,EAAON,OACT,MAAM,IAAI1M,EAAc,SAAU,yBAA0BgN,EAAON,QAErE,MAAM5O,EAAQkP,EAAO,GACrB,IAAKpD,GAAc9L,EAAO4Z,GACxB,MAAM,IAAI1X,EAAc,QAAS,wBAAyBlC,GAE5D,OAAOA,CACT,EAEJ,CCxBA,MAAM+Z,GAAmE,IAAIhR,QAEtE0B,eAAeuP,GAA2BC,GAC/C,MAAMC,EAAQH,GAAcI,IAAIF,GAChC,GAAa,MAATC,GAAiBA,EAAME,KAAOC,KAAKC,MAAQ,IAC7C,OAAOJ,EAAMK,SAGf,MAAM,YAAEC,EAAW,YAAEC,UAAuBR,EAAKS,sBAAsB,GACvE,IAAIH,EAAWE,EAAc,GAAK,GAAKE,OACrC,IAAIhI,GAAAA,EAAU6H,EAAY5W,YAAYgP,MAAM,MAAMgI,eAAezF,WAGnE,MAAM0F,EAA0C,QAAxBF,OAAOpI,IAW/B,OAVIgI,EAAWM,IACb3T,QAAQ4T,KAAK,CACX,uBAAuBP,uDACvB,yBAAyBM,KACzB,qEACAlY,KAAK,MACP4X,EAAWM,GAGbd,GAAcgB,IAAId,EAAM,CAAEM,WAAUH,KAAMC,KAAKC,QACxCC,CACT,CAGA,WACKS,GAEH,aAAM/G,CACJjU,EACA8T,GACA,OAAEK,EAAM,aAAEwE,IAKV,GAAa,MAAT3Y,EAAe,OAAOA,EAC1B,GAAc,MAAVmU,EACF,MAAM,IAAIjS,EAAc,SAAU,2CAA4CiS,GAEhF,MAAMoG,QAAiBP,GAA2B7F,GAClD,OAAiB,KAAboG,EACG7B,GAAa6B,EAAU,CAAE3B,mBAAoBD,SADpD,CAEF,EAEAI,eAAAA,CAAgB/Y,EAA4BuS,GAAc3O,YACxD,IAAK5D,EAAQuS,GACX,MAAM,IAAIjQ,EAAqB,aAAatC,EAAM4D,kCAAkC2O,MAEtF,OAAOvS,CACT,GCjDF,MAAMib,GAAW,KACXC,GAAe,GACfC,GAAqB,EAYrBC,GAAeC,IAAwB,IAAAC,EAC3C,MAAMC,EAAa,CACjB,CAACvI,GAAIwI,wBAAyB,GAC9B,CAACxI,GAAIyI,mBAAoB,EACzB,CAACzI,GAAI0I,kBAAmB,EACxB,CAAC1I,GAAI0B,gBAAiB,GACtB,CAAC1B,GAAI2I,YAAa,EAClB,CAAC3I,GAAI2B,UAAW,EAChB,CAAC3B,GAAI4I,aAAc,IAEfC,EAAsD,QAAhDP,EAAGC,EAAWF,UAAkC,IAAAC,EAAAA,EAAI,EAChE,OAAOO,EAASZ,EAAQ,EAkBpBa,GAAeA,CACnBT,EACAU,GACEC,cAAaC,kBAEf,OAAQZ,GACN,KAAKrI,GAAIkJ,iBACT,KAAKlJ,GAAImJ,eACT,KAAKnJ,GAAIoJ,cACT,KAAKpJ,GAAIqJ,iBACP,OAAON,EAASb,GACZrD,KAAKyE,KAAM,KAAQN,EAAenE,KAAK0E,MAAO,OAAiBpB,KACrE,KAAKnI,GAAI2B,SACT,KAAK3B,GAAI4I,YACP,OAAQG,EAASE,GAAef,GAClC,QACE,OAAOa,EAASb,GACpB,EAGF,SAASsB,GAAqB1I,GAC5B,MAAM2I,EAAU,CACd,CAACzJ,GAAIkJ,kBAAmB,iBACxB,CAAClJ,GAAImJ,gBAAiB,iBACtB,CAACnJ,GAAIoJ,eAAgB,gBACrB,CAACpJ,GAAIqJ,kBAAmB,qBAGpB,IAAElW,GAAQ2N,EAChB,OAAKjI,GAAc1F,EAAKsW,GACjB3I,EAAO2I,EAAQtW,IADmB,CAE3C,CAKO,SAASuW,GACdC,EACAC,EACAC,GAEA,MAAM,OAAEjO,GAAWU,GAAOqN,GACpBG,EAAWF,EAASD,GAE1B,IAAIV,EAAc,EAKlB,OAJIa,EAAS3W,MAAQ6M,GAAI2B,UAAYmI,EAAS3W,MAAQ6M,GAAI4I,cACxDK,EAAc3M,GAAOuN,EAAQC,EAASC,GAAGC,YAAYpO,QAGhDwM,GAAY0B,EAAS3W,KACxB2V,GAAagB,EAAS3W,IAAKyI,EAAQ,CACnCoN,YAAaQ,GAAqBM,GAAWb,eAEnD,CAOA,SAASgB,GACPC,EACAN,EACAC,GAEA,IACIM,EADAC,EAAM,IAAIzK,GAAAA,EAAU,GAExB,GACEwK,EAAcC,EACdA,EAAM,IAAIzK,GAAAA,EAAUJ,IAAeK,MAAM8J,GAASQ,EAAUE,GAAMR,EAAUC,WACpEO,EAAIC,GAAGF,IACjB,OAAOC,CACT,CAKA,MAAME,GAAiB,cASvB,WACKtC,GAEH,aAAM/G,CACJjU,EACA8T,GACA,OAAEK,IAEF,GAAa,MAATnU,EAAe,OAAOA,EAC1B,GAAc,MAAVmU,EACF,MAAM,IAAIjS,EAAc,SAAU,sCAAuCiS,GAE3E,MAAMoG,QAAiBP,GAA2B7F,GAClD,OAAiB,KAAboG,EACG+C,GAAiB/C,OADxB,CAEF,EAEAxB,eAAAA,CACE/E,GACA,UACEkJ,EAAS,SAAEN,EAAQ,QAAEC,EAAO,iBAAEU,IAEhC,gBAAEC,IAEF,GAAwB,MAApBD,EAA0B,OAAOA,EAAiBpI,UACtD,MAAMsI,EAASR,IACZG,GAAQF,EAAU,CAAEK,iBAAkBH,KACvCR,EACAC,GAEI7c,GAA+C,IAAvCgU,GAAQwF,WAAW8D,IAC7BG,EAAOC,UAAUnL,IAAeK,MAAMoB,EAAO2J,QAAQL,GAAgB,KACrE,IAAI3K,GAAAA,EAAgB,OAANqB,QAAM,IAANA,EAAAA,EAAUyJ,GAC5B,GAAIA,EAAOG,GAAG5d,GAAQ,CACpB,IAAwB,IAApBwd,EAA0B,OAAOC,EAAOtI,UAC5C,MAAM,IAAI7S,EAAqB,OAAOtC,EAAM4D,kCAAkC6Z,IAChF,CACA,OAAOzd,EAAMmV,SACf,EAEAtB,SAAAA,CACE7T,EACA8T,EACArK,GAEA,MAAqB,kBAAVzJ,GAAsBA,EAAMwZ,WAAW8D,IACzCxE,GAAKjF,UAAUtS,KAAKwX,gBAAgB/Y,EAAO8T,EAAQrK,IAErDuR,GAAWnH,UAAU3J,KAAK3I,KAAMvB,EAAO8T,EAAQrK,EACxD,GC3LF,IACEoK,SAAAA,CAAU7T,GACR,OAAO8Y,GAAKjF,UAAU7T,EACxB,EAEA+H,WAAAA,CAAY/H,GACV,OAAQ8Y,GAAK/Q,YAAY/H,EAC3B,GCHF,SAAS6d,GACPC,EACAZ,EACAN,EACAC,GAEA,OAAOiB,GAAUpB,GAASQ,EAAUY,GAASlB,EAAUC,EACzD,CAEA,WACKkB,GAEHlK,SAAAA,CACEG,GACA,IACE7N,EAAG,UAAE+W,EAAS,SAAEN,EAAQ,QAAEC,EAAO,mBAAEmB,IAQrC,OAAEF,EAAS,MAEX,GAA0B,MAAtBE,EAA4B,OAAOD,GAAUlK,UAAUmK,GAE3D,MAAMC,EAAc9X,IAAQ6M,GAAI2B,SAAWrC,GAAmBuL,GAC5DC,GACCI,GAAahB,EAAU,CAAEc,mBAAoBE,EAAUV,iBAAiB,KACzEZ,EACAC,GAEI7c,EAAc,OAANgU,QAAM,IAANA,EAAAA,EAAUiK,EACxB,GAAIje,EAAQie,EACV,MAAM,IAAI3b,EAAqB,aAAatC,8BAAkCie,KAEhF,OAAOF,GAAUlK,UAAU7T,EAC7B,G,oBC5CF,QACE6T,SAAAA,CAAU7T,GACR,OAAOoL,GAAOG,KAAKvL,EACrB,EAEA+H,WAAAA,CAAY/H,GACV,OAAOA,EAAM4D,UACf,GCJF,IAIEiQ,SAAAA,CAAU7T,GACR,OAAOme,GAAMtK,UAAU7T,EACzB,EAKA+H,WAAAA,CAAY/H,GACV,OAAOme,GAAMpW,YAAY/H,EAC3B,GCVF,OACKgb,GAEHjC,eAAAA,CACE/E,EACAoK,GAEA,MAAMza,EAAagU,GAAkByG,EAAS5c,MACxCxB,EAAQ,IAAI2S,GAAAA,EAAgB,OAANqB,QAAM,IAANA,EAAAA,EAAUrQ,GACtC,GAAIA,EAAWia,GAAG5d,GAAQ,MAAM,IAAIyD,EAAyBzD,EAAO2D,GACpE,OAAO3D,EAAMmV,SACf,EAOAtB,SAAAA,CACE7T,EACAoe,EACAC,GAEA,OAAOrD,GAAWnH,UAAU3J,KAAK3I,KAAMvB,EAAOoe,EAAUC,EAC1D,GCzBF,MAAMC,GAAc5e,GAAQ4M,GAASkC,MAErC,WACK8P,GAKHzK,SAAAA,CAAU7T,GACR,OAAOse,GAAYzK,UAAU6D,GAAY1X,GAASuX,GAAcvX,GAASA,EAC3E,GCRa,SAASue,GAAwCC,GAgB9D,MAAO,IACFT,GAEHlK,SAAAA,CAAU7T,GAAe,IAAEmG,IACzB,GAAI6M,GAAI2I,aAAexV,GAAiB,IAAVnG,EAC5B,MAAM,IAAIkC,EAAc,QAAS,wBAAyBlC,GAE5D,OAAO+d,GAAUlK,UAAU7T,EAC7B,EAEA,aAAMiU,CAAQjU,EAAO8T,EAAQrK,GAC3B,GAAa,MAATzJ,EAAe,OAAOA,EAG1B,MAAM,OAAEmU,EAAM,SAAEsK,GAAahV,EACvBiV,EAAWjV,EAAQ+U,GACnBpc,EAAc,wCACpB,GAAc,MAAV+R,EAAgB,MAAM,IAAIjS,EAAc,SAAUE,EAAa+R,GACnE,GAAgB,MAAZuK,EAAkB,MAAM,IAAIxc,EAAc,WAAYE,EAAasc,GACvE,aACQvK,EAAOwK,oBAAoBD,EAASf,QAAQ,OAAQ,OAAQ,CAAEc,aACjEG,OAAOpT,IACN,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAEqT,UAAW,EAAG,KAE3BA,SACJ,EAEAL,YAEJ,C,oBC5CMM,GAAS1T,GAAOG,KAAK,CAAC,IACtBwT,GAAW3T,GAAOG,KAAK,CAAC,IACxByT,GAAkB,KAClBC,GAAavf,MAAW2V,IAU9B,OAA0C6J,IAAkB,CAY1DrL,SAAAA,CAAUsL,GACR,GAAIA,EAASvQ,OAAS,GACpB,MAAM,IAAItM,EAAqB,qCAAqC6c,EAASvQ,kBAE/E,OAAOuQ,EAAS9Z,KAAI,EAAG7E,MAAKxC,SAC1B,IAAI8Q,EAIJ,GAHIyB,GAAevS,KAAOqX,MACxBvG,EAAU,IAAIoQ,EAAW,CAACJ,IAAU,GAAIG,GAAWpL,UAAU7V,KAE3DuS,GAAevS,EAAIsO,GAASiB,WAAY,CAC1C,MAAMzF,EAAOwH,GAAOtR,GACpB,GAAI8J,EAAK8G,OAASoQ,GAChB,MAAM,IAAI9c,EAAc,cAAe,gBAAgB8c,GAAkB,UAAW,GAAGlX,EAAK8G,gBAE9FE,EAAU,CAACiQ,GAAUjX,EACvB,CACA,GAAe,MAAXgH,EAAiB,MAAM,IAAI/I,GAAY,+BAA+B/H,KAC1E,MAAO,CAAC6W,GAAQrU,GAAM4K,GAAOC,OAAOyD,GAAS,GAEjD,EAOA/G,WAAAA,CAAYoX,GACV,OAAOA,EAAS9Z,KAAI,EAAE+Z,EAAMC,MAC1B,IAAKH,EAAU,MAAO,CAAE1e,IAAK4e,EAAKxb,WAAY5F,GAAIihB,GAAWlX,YAAYsX,IACzE,MAAMlZ,EAAMkZ,EAAIxJ,SAAS,EAAG,GACtB/G,EAAUuQ,EAAIxJ,SAAS,GAC7B,IAAI7X,EAIJ,GAHImI,EAAIgJ,OAAO2P,MAAS9gB,EAAKihB,GAAWlX,YAAY+G,IAEhD3I,EAAIgJ,OAAO4P,MAAW/gB,EAAKqR,GAAOP,EAASxC,GAASiB,YAC9C,MAANvP,EAAY,MAAM,IAAI+H,GAAY,6BAA6BI,KACnE,MAAO,CAAE3F,IAAK4e,EAAKxb,WAAY5F,KAAI,GAEvC,IC/DF,OACKgd,GAEH,aAAM/G,CACJjU,EACA8T,EACArK,GAEA,GAAa,MAATzJ,EAAe,OAAOA,EAC1B,MAAM,OAAEmU,EAAM,SAAEmL,GAAa7V,EACvBrH,EAAc,2CACpB,GAAc,MAAV+R,EAAgB,MAAM,IAAIjS,EAAc,SAAUE,EAAa+R,GACnE,GAAgB,MAAZmL,EAAkB,MAAM,IAAIpd,EAAc,WAAYE,EAAakd,GACvE,aAAcnL,EAAOoL,kBAAkBD,IAAWE,SAAS5b,UAC7D,G,oBCvBF,QACEiQ,SAAAA,CAAU3E,GACR,OAAO9D,GAAOG,KAAK2D,EACrB,EAEAnH,WAAAA,CAAYmH,GACV,OAAOA,CACT,GCJa,SAASuQ,GAEtBC,EAAmBzG,GAMnB,MAAO,CACLpF,SAAAA,CAAU7T,GACR,KAAkB,IAAbiZ,GAA8B,MAATjZ,IAAkBA,IAAU0f,EACpD,MAAM,IAAIxd,EAAc,iBAAkBwd,EAAY1f,GAExD,OAAO+d,GAAUlK,UAAU6L,EAC7B,EAEA3X,WAAAA,CAAY4N,GACV,MAAM3V,EAAQ+d,GAAUhW,YAAY4N,GACpC,GAAI3V,IAAU0f,EAAY,MAAM,IAAIxd,EAAc,iBAAkBwd,EAAY1f,GAChF,OAAO0f,CACT,EAEAA,aAEAC,oBAAiC,IAAb1G,EAExB,CC3BA,QACEpF,SAAAA,CAAUtE,GACR,OAAOsF,GAAQtF,EACjB,EAEAxH,WAAAA,CAAYmH,GACV,OAAOA,EAAOtL,UAChB,G,oBCHa,SAASgc,GAAyCzZ,GAa/D,MAAO,CACL0N,SAAAA,CAAUuF,GAAU,QAAEyD,IACpB,OAAIvD,YAAYC,OAAOH,GAAkBhO,GAAOG,KAAK6N,GAC7B,kBAAbA,GAAyBA,EAASI,WAAW,OAC/ClK,GAAO8J,GAET9J,GAAOuN,EAAQ,IAAKzD,KAAoB,MAAPjT,GAAe,CAAEA,SAC3D,EAEA4B,WAAAA,CAAY4N,GAAK,SAAEiH,IACjB,OAAOA,EAASvN,GAAOsG,EAAKrJ,GAASU,aAAc7G,EACrD,EAEJ,C,+DC9BO,SAAS0Z,GACdC,GAEA,OAAO,IAAIC,MACT,CAAC,EACD/U,OAAOC,YAAa,CAClB,QAAS,YAAa,iBAAkB,iBAAkB,2BAC1D,iBAAkB,eAAgB,UAAW,oBAAqB,MAAO,iBACzE,MAAO,OACG5F,KAAK7D,GAAS,CAACA,EAAM,CAACqO,KAAU9Q,KAC1C,MAAMO,EAASwgB,IACf,GAAc,MAAVxgB,EAAgB,MAAM,IAAI4C,EAAc,gBAAiB,UAAW5C,GACxE,GAAa,QAATkC,GAA8B,kBAAZzC,EAAK,GAAwB,OAAOO,EAC1D,MAAM0gB,EAAOC,QAAQze,GAAclC,KAAWP,GAC9C,MAAsB,oBAARihB,GAA+B,QAATxe,EAAiBwe,EAAIE,KAAK5gB,GAAU0gB,CAAG,MAGjF,CAEO,SAASG,GAAkCngB,GAAqB,IAAAogB,EACrE,OAAyD,QAAzDA,EAAQpgB,EAAoCogB,qBAAa,IAAAA,EAAAA,EAAIpgB,CAC/D,CCHOyK,eAAe4V,GACpBpiB,GACA,kBAAEqiB,EAAiB,iBAAEC,EAAgB,OAAEpM,IAEtB,IAAAqM,EAAAC,EACjB,MAAMC,EAASjW,MACboF,EACAiF,EACA6L,EACAC,IAEI/Q,IAAM5R,EAAa,KACZ,MAAP6W,EAAoBA,EACgB,iBAA3BX,GAAQ0M,gBAA8BF,EAAaC,EAG5DE,EACqD,QADjDN,EAA0D,QAA1DC,QAASC,EAAO,YAAaJ,EAAmB,EAAG,aAAO,IAAAG,EAAAA,QACzDC,EAAO,cAAeH,EAAkB,EAAG,YAAK,IAAAC,EAAAA,EACtD,MAAS,MAAM,IAAIrd,EAAc,iBAAiBlF,IAAU,EAA5D,GACL,OAAO4Z,KAAK0E,MAAMuE,EAAO,EAC3B,CAEA,MAAMC,GAA+D,IAAIhY,QAWlE0B,eAAeuW,IACpB,OAAEC,GAAS,KAAUxX,IAKrB,MAAM0K,EAASgM,GAAY1W,EAAQ0K,QACnC,GAAI8M,EAAQ,CACV,MAAM/G,EAAQ6G,GAAY5G,IAAIhG,GAC9B,GAAa,MAAT+F,GAAiBA,EAAME,KAAOC,KAAKC,YAAc+F,GAAiB,YAAa5W,GACjF,OAAOyQ,EAAMgH,MAEjB,CACA,MAAM,OAAEA,SAAiB/M,EAAOgN,2BAEhC,OADAJ,GAAYhG,IAAI5G,EAAQ,CAAE+M,SAAQ9G,KAAMC,KAAKC,QACtC4G,CACT,CAcOzW,eAAe2W,GACpB1e,GACA,OACED,EAAS,EAAC,SAAE4e,KAAa5X,IAGe,IAAA6X,EAE1C,IAAIC,EADI,QAARD,EAAAD,SAAQ,IAAAC,IAARD,QAAmBhB,GAAiB,cAAe5W,IAEnD,EAAG,CACD,MAAMsT,QAAWtT,EAAQ0K,OAAOqN,qBAAqB9e,GACrD,IAAwB,IAApBqa,EAAG0E,YAAoB,OAAO1E,EACvB,MAAPwE,IACFA,EAAoB,IAAdxE,EAAGA,GAAG2E,KAAa,QACfV,GAAU,IAAKvX,EAASwX,QAAQ,IAAUxe,SAEhD+H,GAAM6W,EACd,QAAkB,IAATE,SAA0BP,GAAU,IAAKvX,EAASwX,QAAQ,IAAUM,GAC7E,MAAM,IAAI/e,EAAgBC,EAAQC,EACpC,CAWO+H,eAAekX,GACpBT,GACA,SAAEG,KAAa5X,IAEE,IAAAmY,EAEjB,IAAIC,EADI,QAARD,EAAAP,SAAQ,IAAAO,IAARP,EAAaxJ,KAAKC,UAAUuI,GAAiB,YAAa5W,GAAU,MAEpE,GACuB,MAAjBoY,SAA6BrX,GAAM6W,GACvCQ,QAAsBb,GAAUvX,SACzBoY,EAAgBX,GACzB,OAAOW,CACT,CAWOpX,eAAeqX,GACpBvb,GACA,QAAEwb,EAAU,EAAC,OAAE5N,KAAW1K,IAG1B,MAAM,YAAEgY,SAAsBtN,EAAOqN,qBAAqBjb,GACpD2a,QAAeS,GAAYF,EAAcM,EAAS,CAAE5N,YAAW1K,KAC7DgY,YAAaO,SAAyB7N,EAAOqN,qBAAqBjb,GAC1E,OAAQyb,GACN,KAAM,EACJ,MAAM,IAAI1b,GAAkBC,GAC9B,KAAKkb,EACH,OAAOP,EACT,QACE,OAAOY,GAAiBvb,EAAQ,CAAE4N,SAAQ4N,aAAYtY,IAE5D,CAWOgB,eAAewX,GACpBviB,GACA,OAAEwhB,EAAM,KAAEvQ,EAAI,OAAEwD,IAGhB,OAAc,MAAV+M,EAAuB/M,EAAO+N,4BAA4BxiB,EAASwhB,GAC3D,MAARvQ,EAAqBwD,EAAOgO,0BAA0BziB,EAASiR,GAC5DwD,EAAOiO,mBAAmB1iB,EACnC,CAYO+K,eAAe4X,GACpB3iB,GACA,OAAE4iB,EAASrK,GAAkBQ,UAAWhP,IAGxC,MAAM8Y,EAAO7iB,EAAQ8Z,WAAW,OAC5BnK,GAAOC,GAAO5P,GAAU4M,GAAS6B,gBACjCzO,GAEE,QAAE8iB,SAAkBP,GAAWM,EAAM9Y,GAASmV,OAAOpT,IACzD,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAEgX,QAAS,GAAI,IAGxB,OAAO9J,GAAa8J,EAAS,CAAE5J,mBAAoB0J,GACrD,CASO7X,eAAegY,IACpB,OAAEtO,IAEF,OAAOA,EAAOsO,sBAChB,CAUOhY,eAAeiY,GACpBC,GACA,OAAExO,IAEF,MAA4B,kBAAjBwO,EAAkCxO,EAAOyO,sBAAsBD,GACnExO,EAAO0O,oBAAoBF,EACpC,CAUOlY,eAAeqY,GACpBnS,GACA,OAAEwD,IAEF,aAAcA,EAAO4O,gCAAgCpS,IAAOqS,YAC9D,CAUOvY,eAAewY,GACpBN,GACA,OAAExO,IAEF,MAA4B,kBAAjBwO,EAAkCxO,EAAO+O,oBAAoBP,GACjExO,EAAOgP,kBAAkBR,EAClC,CAUOlY,eAAe2Y,GACpBzS,GACA,OAAEwD,IAEF,OAAOA,EAAOkP,0BAA0B1S,EAC1C,CAUA,MAAM2S,GAAoF,IAAIC,IAE9F9Y,eAAe+Y,GAAgBhjB,EAAa2T,GAC1C,MAAMsP,EAAKH,GAAiBnJ,IAAI3Z,GAEhC,GADA8iB,GAAiBI,OAAOljB,GACd,MAANijB,EAAY,MAAM,IAAItgB,EAAc,6BAExC,IAAIwgB,EACJ,IACE,MAAMC,EAA2B,kBAAdH,EAAG,GAAGG,WACdX,GAAYQ,EAAG,GAAGG,IAAK,CAAEzP,YAAWxD,KAAO8S,EAAG,GAAGG,IAC5DD,QAAkBxP,EAAO0P,mBAAmB,CAC1CD,MACAE,SAAUL,EAAG,GAAGK,SAChBC,IAAKN,EAAGpe,KAAK2e,IAAG,CAAQjH,GAAIiH,EAAIjH,OAChCkH,SAAUC,MAAM3Y,KAAK,IAAI4Y,IAAIV,EAAGpe,KAAK2e,GAAQA,EAAII,mBAC9C/e,KAAKgf,IAAM,CAAQA,SAAQvf,OAAQsN,GAAgBtN,YAE1D,CAAE,MAAO0G,GAEP,YADAiY,EAAGa,SAAQ,EAAGC,YAAaA,EAAO/Y,IAEpC,CAEA,MAAM,QAAEgZ,EAAO,SAAEV,GAAaH,EAC9Ba,EAAQF,SAAQ,EAAG1P,SAAQ6P,YAAWC,GAAiBC,KACrD,MAAM,QACJha,EAAO,OAAE4Z,EAAM,GAAExH,EAAE,eAAEqH,GACnBX,EAAGkB,GACQ,OAAX/P,EAAiBjK,EAAQ,IAAK+Z,EAAeZ,aAC5CS,EAAOvZ,OAAO4Z,OAAO,IAAI3e,GAAYwe,GAAmB,CAAE1H,KAAIqH,mBAAkB,GAEzF,CAaO3Z,eAAeoa,GACpB9H,EACAqH,GACA,IACER,EAAG,SAAEE,EAAQ,QAAEgB,EAAO,OAAE3Q,IAGwC,IAAA4Q,EAClE,MAAMvkB,GAAkB,IAAZskB,EAAmB,CAAClB,EAAKE,GAAUnhB,OAAS,YAClDqiB,EAAoC,QAA5BD,EAAGzB,GAAiBnJ,IAAI3Z,UAAI,IAAAukB,EAAAA,EAAI,GAE9C,OADAzB,GAAiBvI,IAAIva,EAAKwkB,GACnB,IAAIta,SAAQ,CAACC,EAAS4Z,KAAW,IAAAU,EACtCD,EAAS1c,KAAK,CACZyU,KAAIqH,iBAAgBR,MAAKE,WAAUnZ,UAAS4Z,YAE9B,IAAZO,EAIY,QAAhBG,EAAAD,EAASE,eAAO,IAAAD,IAAhBD,EAASE,QAAYta,YAAW,KAAa4Y,GAAgBhjB,EAAK2T,EAAO,KAHlEqP,GAAgBhjB,EAAK2T,EAGiD,GAEjF,CASO1J,eAAe0a,GACpBC,GACA,OAAEjR,IAEF,OAAOA,EAAOkR,gBAAgBD,EAChC,CASO3a,eAAe6a,GACpBF,GACA,OAAEjR,IAEF,OAAOA,EAAOmR,YAAYF,EAC5B,CASO3a,eAAe8a,GACpB/jB,GACA,OAAE2S,IAEF,OAAOA,EAAOqR,mBAAmBhkB,EACnC,CAcOiJ,eAAegb,GAGpBliB,EACA/C,GACA,OAAEoQ,GAAS,EAAI,cAAE8U,GAAgB,EAAK,OAAEvR,IAGxC,GAAIuD,GAAYnU,GAAW,CACzB,GAAIqN,GAAU8U,EAAe,CAC3B,MAAMlkB,QAAa2S,EAAOqR,mBAAmBjiB,GACvCoiB,EAAUnkB,EAAK2d,SAASjX,MAAM0d,GAAMA,EAAEplB,MAAQA,IACpD,GAAe,MAAXmlB,EAAiB,MAAM,IAAIriB,EAAwBC,EAAU/C,GACjE,GAAIklB,EAAe,OAAOC,EAAQ3nB,EACpC,CACA,OAAOuZ,GAAchU,EACvB,CACA,IAEE,OADA+L,GAAO/L,GACAA,CACT,CAAE,MAAOiI,GACP,MAAM,IAAI3H,EAAqB,4BAA4BN,IAC7D,CACF,CCnaA,WACKwa,GAEHlK,SAAAA,CAAU7T,GACR,OAAO+d,GAAUlK,UAAe,OAAL7T,QAAK,IAALA,EAAAA,EAAS,EACtC,EAEA,aAAMiU,CACJjU,EACA8T,GAEA,OACEK,EAAM,YAAE0R,EAAW,iBAAEC,KAAqBrc,IAO5C,IAAoB,IAAhBoc,GAAkC,IAAV7lB,IAAyB,MAATA,IAAsC,IAArB8lB,GAA4B,KAAA9R,EACvF,GAAc,MAAVG,EAAgB,MAAM,IAAIjS,EAAc,SAAU,WAAYiS,GAClEnU,GAAc,QAANgU,EAAChU,SAAK,IAAAgU,EAAAA,EAAI,SAAWgN,GAAU,IAAKvX,EAAS0K,SAAQ8M,QAAQ,GACvE,CACA,OAAOjhB,CACT,GChCa,SAAS+lB,GACtBC,EACA7H,GAQA,MAAO,IACFA,EAEHtK,SAAAA,CAAU7T,EAAO8T,GACf,OAAOqK,EAAMtK,UAAe,OAAL7T,QAAK,IAALA,EAAAA,EAASgmB,EAAclS,EAChD,EAEJ,CCjBe,SAASmS,GACtB3D,EACAnE,GAQA,MAAO,IACFA,EAEHtK,SAAAA,CAAU7T,EAAO8T,EAAQrK,GACvB,OAAO0U,EAAMtK,UAAUyO,EAAOtiB,GAAQ8T,EAAQrK,EAChD,EAEJ,CCjBO,IAAKyc,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,cAAdA,EAAAA,EAAc,oBAAdA,EAAAA,EAAc,sBAAdA,CAAc,MASdC,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,yBAARA,EAAAA,EAAQ,uBAARA,EAAAA,EAAQ,mBAARA,EAAAA,EAAQ,2BAARA,EAAAA,EAAQ,mCAARA,EAAAA,EAAQ,sEAARA,EAAAA,EAAQ,oEAARA,EAAAA,EAAQ,sEAARA,EAAAA,EAAQ,kFAARA,EAAAA,EAAQ,8EAARA,EAAAA,EAAQ,yBAARA,EAAAA,EAAQ,2BAARA,EAAAA,EAAQ,+BAARA,EAAAA,EAAQ,qBAARA,EAAAA,EAAQ,+BAARA,EAAAA,EAAQ,wCAARA,EAAAA,EAAQ,gCAARA,EAAAA,EAAQ,sCAARA,EAAAA,EAAQ,4CAARA,EAAAA,EAAQ,oCAARA,EAAAA,EAAQ,sCAARA,EAAAA,EAAQ,4CAARA,CAAQ,MC8BRC,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,oBAAhBA,EAAAA,EAAgB,oBAAhBA,CAAgB,MAY5B,MAAMC,GAAiB1hB,KAQjB2hB,GAAsB3hB,GAAYqO,GAAIuT,UAUtCC,GAAgBC,GAAMN,GAASO,UAE/BC,GAAYZ,GAAY,KAAShI,IAKjC6I,GAAUX,IACbjmB,IAAU,IAAAgU,EACT,MAAM6S,EAAW,KAEjB,GADK,QAAL7S,EAAAhU,SAAK,IAAAgU,IAALhU,EAAU6mB,GACN7mB,GAAS,GAAKA,GAAS6mB,EAAU,OAAO7mB,EAC5C,MAAM,IAAIkC,EAAc,UAAW,0BAA0B2kB,WAAmB7mB,EAAM,GAExF+d,IAMW+I,GAAW,CAAC,CACvB3gB,IAAK4gB,GAAe/T,GAAIuT,UACxBvjB,QAAS+jB,GAAe,GAAG,GAC3BC,WAAYhb,GAAMib,IAClBjK,UAAWqJ,IACV,CACDlgB,IAAK4gB,GAAe/T,GAAIkU,SACxBlkB,QAAS+jB,GAAe,GAAG,GAC3BrI,SAAUhf,GAAQ4M,GAAS6B,gBAE3BgZ,YAAaznB,GAAQ4M,GAAS6B,eAAgB7B,GAASyB,gBAAiBzB,GAASkC,MACjF1J,OAAQkW,GACRoC,IAAG,GACHsE,IAAG,GACHtL,MAAOA,GAAM,YACbtH,QAASsY,GAAQ9a,GAASiB,WAAW,IACpC,CACDpH,IAAK4gB,GAAe/T,GAAIqU,gBACxBrkB,QAAS+jB,GAAe,GAAG,GAC3BO,UAAW5nB,GAAQ4M,GAAS6B,gBAC5BiI,MAAOA,GAAM,aACbmR,aAAc7nB,GAAQ4M,GAASgC,YAC/B8O,IAAG,GACHsE,IAAGA,IACF,CACDvb,IAAK4gB,GAAe/T,GAAIwU,aACxBxkB,QAAS+jB,GAAe,GAAG,GAC3BO,UAAW5nB,GAAQ4M,GAAS6B,gBAC5BiI,MAAOA,GAAM,aACb5U,KAAI,GACJimB,SAAU1B,GAAY,EAAGjN,IACzBpV,QAAO,GACP0Z,IAAG,GACHsE,IAAGA,IACF,CACDvb,IAAK4gB,GAAe/T,GAAI0U,cACxB1kB,QAAS+jB,GAAe,GAAG,GAC3BO,UAAW5nB,GAAQ4M,GAAS6B,gBAC5BiI,MAAOA,GAAM,aACbuR,OAAM,GACNf,WACAzH,SAAUA,IAAS,GACnBwH,aACAvJ,IAAG,GACHsE,IAAGA,IACF,CACDvb,IAAK4gB,GAAe/T,GAAI0U,cACxB1kB,QAAS+jB,GAAe,GACxBO,UAAW5nB,GAAQ4M,GAAS6B,gBAC5BiI,MAAOA,GAAM,aACbuR,OAAM,GACNf,WACAzH,SAAUA,IAAS,GACnBwH,aACAvJ,IAAG,GACHsE,IAAGA,IACF,CACDvb,IAAK4gB,GAAe/T,GAAI4U,gBACxB5kB,QAAS+jB,GAAe,GAAG,GAC3BO,UAAW5nB,GAAQ4M,GAAS6B,gBAC5BiI,MAAOA,GAAM,aACbuR,OAAM,GAENR,YAAaznB,GAAQ4M,GAAS6B,eAAgB7B,GAASkC,MACvD4O,IAAG,GACHsE,IAAGA,IACF,CACDvb,IAAK4gB,GAAe/T,GAAI6U,cACxB7kB,QAAS+jB,GAAe,GAAG,GAC3BO,UAAW5nB,GAAQ4M,GAAS6B,gBAC5BiI,MAAOA,GAAM,aACbuR,OAAM,GACNvK,IAAG,GACHsE,IAAGA,IACF,CACDvb,IAAK4gB,GAAe/T,GAAI0I,kBACxB1Y,QAAS+jB,GAAe,GAAG,GAC3B5Q,QAASzW,GAAQ4M,GAAS6B,gBAC1BiI,MAAOA,GAAM,WACbvO,KAAMuf,GAAQ9a,GAASO,mBACvBib,UAAS,GACT1K,IAAG,GACHsE,IAAG,GACHqG,QAAS9B,IACP,CAACjmB,EAAQ,KACP,GAAe,KAAVA,EAAa,OAAOA,EACzB,MAAM,IAAIkC,EAAc,UAAW,sCAAuClC,EAAM,GAElFgb,IAEFlW,OAAQkW,GACRkD,SAAQ,GACR3D,SAAQ,GACRyN,SAAUZ,GAAQ9a,GAASO,oBAC1B,CACD1G,IAAK4gB,GAAe/T,GAAI0B,gBACxB1R,QAAS+jB,GAAe,GAAG,GAC3BkB,SAAUvoB,GAAQ4M,GAAS6B,gBAC3BiI,MAAOA,GAAM,YAEbgP,WAAY1lB,GAAQ4M,GAASyB,gBAAiBzB,GAASkC,MACvD6E,WAAU,GACV+J,IAAG,GACHsE,IAAG,GACH5c,OAAQkW,GACRkD,SAAQ,GACR3D,SAAQ,GACRyN,SAAUZ,GAAQ9a,GAASO,oBAC1B,CACD1G,IAAK4gB,GAAe/T,GAAIkJ,kBACxBlZ,QAAS+jB,GAAe,GAAG,GAC3BO,UAAW5nB,GAAQ4M,GAAS6B,gBAC5BiI,MAAOA,GAAM,aACb8R,YAAa3Y,GACb4Y,eAAgB5Y,GAChBiQ,SAAUxE,GACVoN,cAAerC,GAAYK,GAAiBiC,MAAOC,GAAYlC,KAC/DmC,eAAgBxC,GAAY,IAAKhI,IACjCX,IAAG,GACHsE,IAAG,GACHrO,WAAUA,IACT,CACDlN,IAAK4gB,GAAe/T,GAAImJ,gBACxBnZ,QAAS+jB,GAAe,GAAG,GAE3BzH,SAAU5f,GAAQ4M,GAAS2B,cAAe3B,GAASkC,MACnD4H,MAAOA,GAAM,YACbgS,cAAerC,GAAYK,GAAiBiC,MAAOC,GAAYlC,KAC/DmC,eAAgBxC,GAAY,IAAKhI,IACjCX,IAAG,GACHsE,IAAGA,IACF,CACDvb,IAAK4gB,GAAe/T,GAAIoJ,eACxBpZ,QAAS+jB,GAAe,GAAG,GAC3BrI,SAAUhf,GAAQ4M,GAAS6B,gBAC3BiI,MAAOA,GAAM,YAEbkJ,SAAU5f,GAAQ4M,GAAS2B,cAAe3B,GAASkC,MACnDga,MAAOjZ,GACPiQ,SAAQ,GACRiJ,aAAc1C,GAAYK,GAAiBiC,MAAOC,GAAYlC,KAC9DsC,cAAe3C,GAAY,GAAIhI,IAC/B4K,gBAAiB5C,GAAYK,GAAiBiC,MAAOC,GAAYlC,KACjEwC,iBAAkB7C,GAAY,GAAIhI,IAClCX,IAAG,GACHsE,IAAGA,IACF,CACDvb,IAAK4gB,GAAe/T,GAAIqJ,kBACxBrZ,QAAS+jB,GAAe,GAAG,GAC3BzH,SAAU5f,GAAQ4M,GAAS2B,eAC3BmI,MAAOA,GAAM,YACbyS,QAASzB,GAAQ9a,GAAS4B,eAC1B4a,SAAUvZ,GACVoZ,gBAAiB5C,GAAYK,GAAiBiC,MAAOC,GAAYlC,KACjEwC,iBAAkB7C,GAAY,GAAIhI,IAClCX,IAAG,GACHsE,IAAGA,IACF,CACDvb,IAAK4gB,GAAe/T,GAAI+V,iBACxB/lB,QAAS+jB,GAAe,GAAG,GAC3BiC,UAAWtpB,GAAQ4M,GAAS6B,gBAC5B8a,gBAAiBnQ,GACjBoQ,UAAWxpB,GAAQ4M,GAAS6B,gBAC5Bgb,gBAAiBrQ,GACjBsQ,eAAgBtQ,GAChBuQ,WAAYvQ,GACZ4I,IAAG,GACHtE,IAAG,GACHkM,qBAAsBtd,GAAMtM,MAAW2V,KACvCkU,qBAAsBvd,GAAMtM,MAAW2V,KACvCmU,UAAWpC,GAAQ9a,GAASa,OAC5BiJ,MAAOA,GAAM,cACZ,CACDjQ,IAAK4gB,GAAe/T,GAAIyW,sBACxBzmB,QAAS+jB,GAAe,GAAG,GAC3B2C,UAAWhqB,GAAQ4M,GAASwB,SAC5B6b,OAAQjqB,GAAQ4M,GAAS6B,gBACzByb,qBAAsB9Q,GACtB+Q,qBAAsB/Q,GACtB4I,IAAG,GACHtE,IAAG,GACHhH,MAAOA,GAAM,WACZ,CACDjQ,IAAK4gB,GAAe/T,GAAI8W,oBACxB9mB,QAAS+jB,GAAe,GAAG,GAC3B2C,UAAWhqB,GAAQ4M,GAASwB,SAC5B6b,OAAQjqB,GAAQ4M,GAAS6B,gBACzBW,QAASsY,GAAQ9a,GAASU,aAC1B+c,IAAKvD,GACL9E,IAAG,GACHtE,IAAG,GACHhH,MAAOA,GAAM,WACZ,CACDjQ,IAAK4gB,GAAe/T,GAAIgX,gBACxBhnB,QAAS+jB,GAAe,GAAG,GAC3B2C,UAAWhqB,GAAQ4M,GAASwB,SAC5B6b,OAAQjqB,GAAQ4M,GAAS6B,gBACzBW,QAASsY,GAAQ9a,GAASU,aAC1B+c,IAAKvD,GACL9E,IAAG,GACHtE,IAAG,GACHhH,MAAOA,GAAM,WACZ,CACDjQ,IAAK4gB,GAAe/T,GAAIiX,kBACxBjnB,QAAS+jB,GAAe,GAAG,GAC3B2C,UAAWhqB,GAAQ4M,GAASwB,SAC5B6b,OAAQjqB,GAAQ4M,GAAS6B,gBACzBrJ,OAAQgU,GACR4I,IAAG,GACHtE,IAAG,GACHoM,UAAWpC,GAAQ9a,GAASa,OAC5B+c,MAAOnM,GACP3H,MAAOA,GAAM,WACZ,CACDjQ,IAAK4gB,GAAe/T,GAAImX,mBACxBnnB,QAAS+jB,GAAe,GAAG,GAC3B2C,UAAWhqB,GAAQ4M,GAASwB,SAC5Bsc,KAAM1qB,GAAQ4M,GAAS6B,gBACvBrJ,OAAQgU,GACR4I,IAAG,GACHtE,IAAG,GACHoM,UAAWpC,GAAQ9a,GAASa,OAC5B+c,MAAOnM,GACP3H,MAAOA,GAAM,WACZ,CACDjQ,IAAK4gB,GAAe/T,GAAIqX,iBACxBrnB,QAAS+jB,GAAe,GAAG,GAC3B2C,UAAWhqB,GAAQ4M,GAASwB,SAC5B6b,OAAQjqB,GAAQ4M,GAAS6B,gBACzByb,qBAAsB9Q,GACtB+Q,qBAAsB/Q,GACtB4I,IAAG,GACHtE,IAAG,GACHhH,MAAOA,GAAM,WACZ,CACDjQ,IAAK4gB,GAAe/T,GAAIwI,wBACxBxY,QAAS+jB,GAAe,GAAG,GAC3B2C,UAAWhqB,GAAQ4M,GAASwB,SAC5B6b,OAAQjqB,GAAQ4M,GAAS6B,gBACzBW,QAASsY,GAAQ9a,GAASU,aAC1Bkd,MAAOnM,GACPrR,OAAQ0a,GAAQ9a,GAASO,mBACzB2c,UAAWpC,GAAQ9a,GAASa,OAC5Bmd,cAAelD,GAAQ9a,GAASe,YAChCqU,IAAG,GACHtE,IAAG,GACHhH,MAAOA,GAAM,WACZ,CACDjQ,IAAK4gB,GAAe/T,GAAIyI,mBACxBzY,QAAS+jB,GAAe,GAAG,GAC3B2C,UAAWhqB,GAAQ4M,GAASwB,SAC5Boc,MAAOnM,GACPyL,UAAWpC,GAAQ9a,GAASa,QAC3B,CACDhH,IAAK4gB,GAAe/T,GAAIuX,uBACxBvnB,QAAS+jB,GAAe,GAAG,GAC3B2C,UAAWhqB,GAAQ4M,GAASwB,SAC5B6b,OAAQjqB,GAAQ4M,GAAS6B,gBACzBW,QAASsY,GAAQ9a,GAASU,aAC1B0U,IAAG,GACHtE,IAAG,GACHhH,MAAOA,GAAM,WACZ,CACDjQ,IAAK4gB,GAAe/T,GAAIwX,0BACxBxnB,QAAS+jB,GAAe,GAAG,GAC3B2C,UAAWhqB,GAAQ4M,GAASwB,SAC5Boc,MAAOnM,GACP0M,KAAMlb,GACNmb,OAAQhrB,GAAQ4M,GAAS6B,iBACxB,CACDhI,IAAK4gB,GAAe/T,GAAI2I,YACxB3Y,QAAS+jB,GAAe,GAAG,GAC3B5Q,QAASzW,GAAQ4M,GAAS6B,gBAC1BiI,MAAOA,GAAM,WACbvO,KAAMuf,GAAQ9a,GAASO,mBACvB8d,QAAS1D,GACTa,UAAS,GACT1K,IAAG,GACHsE,IAAG,GACHxD,SAAQ,GACR3D,SAAQ,GACRyN,SAAUZ,GAAQ9a,GAASO,oBAC1B,CACD1G,IAAK4gB,GAAe/T,GAAI2B,UACxB3R,QAAS+jB,GAAe,GAAG,GAC3B6D,KAAMlrB,GAAQ4M,GAAS6B,gBACvB0c,SAAUzD,GAAQ9a,GAASO,mBAC3BwG,WAAU,GACV+J,IAAG,GACHc,SAAQ,GACR3D,SAAQ,GACRwC,GAAIuJ,IACH,CACDngB,IAAK4gB,GAAe/T,GAAI4I,aACxB5Y,QAAS+jB,GAAe,GAAG,GAC3B+D,QAASprB,GAAQ4M,GAAS6B,gBAC1BiI,MAAOA,GAAM,WACbgH,IAAG,GACHL,GAAIuJ,K,gBCnYyD,MAAAhX,OAAAyb,GAAA1b,OAAA2b,IAAAC,GAexD,SAASC,GACdC,EACAnY,EACA7M,EACAnD,GAEA,MAAMooB,EAAaD,EAAQtR,QAAQwR,GAAMA,EAAEllB,IAAIuZ,aAAevZ,IAC9D,GAA0B,IAAtBilB,EAAWxc,OAAc,MAAM,IAAIxI,GAAoB,GAAG4M,EAAI7M,OAASA,KAAQ,GACnF,GAAe,MAAXnD,EAAiB,CACnB,MAAMsoB,EAAgBF,EAAWljB,MAAMqjB,GAAWA,EAAOvoB,QAAQ2c,qBACjE,GAAqB,MAAjB2L,EAAuB,MAAM,IAAInoB,EAAc,gCAAgC6P,EAAI7M,OAASA,MAChGnD,EAAUsoB,EAActoB,QAAQ0c,UAClC,CACA,MAAM6L,EAASH,EAAWljB,MAAMmjB,GAAMA,EAAEroB,QAAQ0c,aAAe1c,IAC/D,GAAc,MAAVuoB,EAAgB,MAAM,IAAInlB,GAAoB,GAAG4M,EAAI7M,OAASA,KAAQnD,GAC1E,OAAOgI,OAAOE,QAAQqgB,EACxB,CAEO,SAASC,GACdL,EACAnY,EACAc,EAKA2X,EACA/a,GAEA,MAAM6a,EAASL,GAAUC,EAASnY,EAAKc,EAAO3N,IAAK2N,EAAO9Q,SACpD0oB,EAASH,EAAOlmB,KAAI,EAAE7E,EAAK2d,KAC/BA,EAAMtK,UAAUC,EAAOtT,GAAM,IAAKsT,KAAW2X,GAAe3X,KAE9D,OAAOzE,GAAO2b,GAAUU,GAAShb,EACnC,CAEO,SAASib,GACdR,EACAnY,EACA4Y,EACAC,EACAJ,GAEA,MAAMC,EAASX,GAAUzb,GAAOsc,IAC1BzlB,GAAOqR,GAAQkU,EAAO,IACtB1oB,GAAWwU,GAAQkU,EAAO,IAC1BH,EAASL,GAAUC,EAASnY,EAAK7M,EAAKnD,GAC5C,GAAmB,MAAf6oB,GAAuBA,IAAgB1lB,EACzC,MAAM,IAAIJ,GAAY,YAAYiN,EAAI6Y,eAAyB7Y,EAAI7M,cAErE,GAAIulB,EAAO9c,SAAW2c,EAAO3c,OAC3B,MAAM,IAAI1M,EAAc,aAAcqpB,EAAO3c,OAAQ8c,EAAO9c,QAE9D,OAAO5D,OAAOC,YACZsgB,EAAOlmB,KAAI,EAAE7D,EAAM2c,GAAQ2N,IAAU,CACnCtqB,EAAM2c,EAAMpW,YAAY2jB,EAAOI,GAAsBL,MAG3D,C,oBCzEA,QACE5X,SAAAA,CAAU7T,GACR,OAAOoL,GAAOG,KAAK,CAACvL,EAAQ,EAAI,GAClC,EAEA+H,WAAAA,CAAYmH,GACV,OAAqB,IAAdA,EAAO,EAChB,GCDa,SAAS6c,GAAoDrb,EAAavK,GAavF,MAAO,CACL0N,SAAAA,CAAU9I,GAAQ,UAAEsO,IAClB,OAAO/J,GAAO+J,EAAU,CACtBlT,IAAKggB,GAAS6F,MACdpS,OAAQ5O,OAAOE,QAAQH,GAAQ1F,KAAI,EAAE7E,EAAKR,MAAW,CACnDmG,IAAKggB,GAAS8F,WACdzrB,IAAK8O,GAAO9O,GACZR,MAAOsP,GAAO+J,EAAU,IAAKrZ,EAAcmG,eAGjD,EAEA4B,WAAAA,CAAYmH,GAAQ,YAAEuK,IACpB,MAAM,OAAEG,GAAWH,EAAYpK,GAAOH,EAAQ5C,GAASiB,WAAY4Y,GAAS6F,OAC5E,OAAOhhB,OAAOC,YAAY2O,EAEvBC,QAAO,EAAGrZ,SAAUkQ,IAAapE,GAASyB,iBAAkC,KAAfvN,EAAIoO,SACjEvJ,KAAI,EAAG7E,MAAKR,WAAY,CACvBqP,GAAO7O,EAAKkQ,GACZ+I,EAAYpK,GAAOrP,EAAOsM,GAASiB,WAAYpH,MAErD,EAEA+lB,eAAe,EAEnB,C,ucC5CiD,MAAA7c,OAAA2b,IAAAC,GAYd,IAK9BkB,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,sBAARA,EAAAA,EAAQ,4BAARA,EAAAA,EAAQ,kBAARA,CAAQ,EAARA,IAAQ,IAAAC,GAAA,IAAArjB,QAAAsjB,GAAA,IAAAtjB,QAAAujB,GAAA,IAAAvjB,QAAAwjB,GAAA,IAAAxjB,QAAAyjB,GAAA,IAAAzjB,QAAA0jB,GAAA,IAAA1jB,QAAA2jB,GAAA,IAAAC,QAQb,MAAMC,GAKJ,cAAIC,GACF,OAAO9iB,GAAKsiB,GAAL9qB,KACT,CAqBAH,WAAAA,CAAYsqB,EAAsBhb,EAAavK,EAAQ2mB,GASrD,GA6EFC,GAAA,KAAAL,IAjHAhjB,GAAA,KAAS0iB,QAAS,GAElB1iB,GAAA,KAAA2iB,IAAc,GAMd3iB,GAAA,KAAS4iB,QAAM,GAEf5iB,GAAA,KAAS6iB,QAAS,GAElB7iB,GAAA,KAAS8iB,QAAI,GAEb9iB,GAAA,KAAS+iB,QAAY,GAcnB9iB,GAAK4iB,GAALhrB,KAAiBmP,GACjB/G,GAAK6iB,GAALjrB,KAAY4E,GACZwD,GAAK8iB,GAALlrB,KAAoBurB,GACpBnjB,GAAKyiB,GAAL7qB,KAAiBmqB,EAAO,GAAG9nB,SAAS,QACpC+F,GAAK2iB,GAAL/qB,KAAcyJ,OAAOC,YACnBygB,EAAO,GAAGrmB,KAAK4U,GAAS,CAACA,EAAK,GAAGrW,SAAS,OAAQqW,EAAK,QAGtB,MAA/BlQ,GAAKuiB,GAAL/qB,MAAYwI,GAAKqiB,GAAL7qB,OAOhByJ,OAAOE,QAAQnB,GAAKuiB,GAAL/qB,OAAa+iB,SAAQ,EAAE9jB,EAAKyZ,MACzC,GAAI+S,GAAgB9iB,KAAhB0iB,GAAiB3S,KAAUzZ,EAAK,MAAM,IAAI+E,GAC9C,MAAM,KAAEtH,GAASgvB,GAAiB/iB,KAAjB0iB,GAAkB3S,GACnC,OAAQhc,GACN,KAAKkuB,GAASe,OACZjT,EACGlL,MAAM,EAAG,IACT8K,QAAQsT,GAAMA,EAAEve,SAChB0V,SAAS6I,IAK8B,MAAlCpjB,GAAKuiB,GAAL/qB,MAAY4rB,EAAEvpB,SAAS,SAAiB+F,GAAK0iB,GAAL9qB,MAAmB,EAAH,IAEhE,MACF,KAAK4qB,GAASiB,UACZ,GAA4C,MAAxCrjB,GAAKuiB,GAAL/qB,MAAY0Y,EAAK,GAAGrW,SAAS,QAC/B,MAAM,IAAI4B,GAAuB,+CAEnC,MACF,KAAK2mB,GAASkB,KACZ,MACF,QACE,MAAM,IAAIlqB,EAAc,6BAA6BlF,KACzD,QAhCF,CACE,GAAwC,IAApC+M,OAAOkJ,KAAKnK,GAAKuiB,GAAL/qB,OAAaqN,OAC3B,MAAM,IAAIpJ,GAAuB,kCAEnCmE,GAAK0iB,GAAL9qB,MAAmB,EAErB,CA4BF,CAEA+rB,OAAAA,CAAQC,GACN,OAAOxjB,GAAKqiB,GAAL7qB,QAAmBwI,GAAKqiB,GAALmB,EAC5B,CA6BA1Z,SAAAA,GACE,MAAO,CACLzI,GAAOG,KAAKxB,GAAKqiB,GAAL7qB,MAAgB,OAC5ByJ,OAAOE,QAAQnB,GAAKuiB,GAAL/qB,OAAa8D,KAAI,EAAEmoB,EAASxtB,KAAY,CACrDoL,GAAOG,KAAKiiB,EAAS,OACrBxtB,KAGN,CA0CAma,GAAAA,CAAI3Z,GACF,MAAMitB,EAAIC,GAAAhB,GAAAnrB,KAAKosB,IAAOzjB,KAAZ3I,KAAa+N,GAAO9O,GAAKoD,SAAS,QAC5C,OAAS,MAAL6pB,EAAkBA,EACf1jB,GAAK0iB,GAALlrB,MAAiB2I,KAAjB3I,KAAkB8N,GAAOoe,EAAGnhB,GAASiB,WAAYxD,GAAKyiB,GAALjrB,MAC1D,CAmCAqsB,QAAAA,GACE,OAAO5iB,OAAOC,YAAYyiB,GAAAhB,GAAAnrB,KAAKssB,IAAW3jB,KAAhB3I,MAEvBsY,QAAO,EAAEiU,KAAO/jB,GAAKwiB,GAALhrB,QAAmB+K,GAASyB,iBAAgC,KAAb+f,EAAElf,SACjEvJ,KAAI,EAAEyoB,EAAGhU,KAAO,CACfzK,GAAOjE,GAAOG,KAAKuiB,EAAG,OAAQ/jB,GAAKwiB,GAALhrB,OAC9BwI,GAAK0iB,GAALlrB,MAAiB2I,KAAjB3I,KAAkB8N,GAAOyK,EAAGxN,GAASiB,WAAYxD,GAAKyiB,GAALjrB,UAEvD,EAzMU,SAAAyrB,GAiBO/S,GACf,OAAO7O,GAAOG,KAAKoF,GAAKqa,GAAU/Q,KAAQrW,SAAS,MACrD,CAAC,SAAAqpB,GA0DiBhT,GAChB,OAAQA,EAAKrL,QACX,KAAK,GACH,MAAO,CACL3Q,KAAMkuB,GAASe,UACQ,IAApBjT,EAAK,IAAIrL,QAAgB,CAAE5O,MAAOia,EAAK,MAE9C,KAAK,EAAG,CACN,MAAMrU,EAASqU,EAAK,GAAG,IAAM,EAC7B,GAAIrU,EAAS,EAAG,MAAM,IAAID,GAAuBC,GACjD,MAAM3H,EAAO2H,GAAU,EAAIumB,GAASiB,UAAYjB,GAASkB,KACnDte,EAAQ,CAAC,EAAG,GAAG9C,SAASrG,GAAU,EAAI,EAC5C,MAAO,CACL3H,UACGA,IAASkuB,GAASkB,MAAQ,CAAErtB,MAAOia,EAAK,IAC3C8T,KAAM9T,EAAK,GAAGrW,SAAS,OAAOmL,MAAMA,GAExC,CACA,QACE,MAAM,IAAItJ,GAAuBwU,EAAKrL,QAE5C,CAAC,SAAA+e,GAqBOK,GACN,IAAIC,EAAalkB,GAAKqiB,GAAL7qB,MACbf,EAAMwtB,EACV,MAAO,EAAM,CACX,MAAM/T,EAAOlQ,GAAKuiB,GAAL/qB,MAAY0sB,GACzB,GAAY,MAARhU,EAAc,CAChB,IAAK1Y,KAAKsrB,WAAY,OACtB,MAAM,IAAI1pB,EAAc,mCAC1B,CACA,MAAM,KAAElF,EAAI,MAAE+B,EAAK,KAAE+tB,GAASd,GAAiB/iB,KAAjBgkB,GAAkBjU,GAChD,OAAQhc,GACN,KAAKkuB,GAASe,OACZ,GAAmB,IAAf1sB,EAAIoO,OAAc,OAAO5O,EAC7BiuB,EAAahU,GAAM,KAAKzZ,EAAI,MAAMoD,SAAS,OAC3CpD,EAAMA,EAAI2tB,UAAU,GACpB,MACF,KAAKhC,GAASiB,UACZ,GAAI5sB,EAAI2tB,UAAU,EAAGJ,GAAMnf,UAAYmf,EAAM,OAC7CE,EAAahU,EAAK,GAAGrW,SAAS,OAC9BpD,EAAMA,EAAI2tB,UAAUJ,EAAKnf,QACzB,MACF,KAAKud,GAASkB,KACZ,GAAIU,IAASvtB,EAAK,OAClB,OAAOR,EACT,QACE,MAAM,IAAImD,EAAc,6BAA6BlF,KAE3D,CACF,CAAC,SAAA4vB,KAcC,MAAM3iB,EAAmC,GACnCkjB,EAAMA,CAACH,EAAoBztB,KAC/B,MAAMyZ,EAAOlQ,GAAKuiB,GAAL/qB,MAAY0sB,GACzB,GAAY,MAARhU,EAAc,CAChB,IAAK1Y,KAAKsrB,WAAY,OACtB,MAAM,IAAI1pB,EAAc,mCAC1B,CACA,MAAM,KAAElF,EAAI,MAAE+B,EAAK,KAAE+tB,GAASd,GAAiB/iB,KAAjBgkB,GAAkBjU,GAChD,OAAQhc,GACN,KAAKkuB,GAASe,OACZjT,EACGlL,MAAM,EAAG,IACT1J,KAAI,CAACwK,EAAG8U,IAA4B,CAAC9U,EAAG8U,KACxC9K,QAAO,EAAEhK,KAAOA,EAAEjB,SAClB0V,SAAQ,EAAEzU,EAAG8U,KAASyJ,EAAIve,EAAEjM,SAAS,OAAQpD,EAAMmkB,EAAI/gB,SAAS,OACtD,MAAT5D,GAAekL,EAAQ5C,KAAK,CAAC9H,EAAKR,IACtC,MACF,KAAKmsB,GAASiB,UACZgB,EAAInU,EAAK,GAAGrW,SAAS,OAAQpD,EAAMutB,GACnC,MACF,KAAK5B,GAASkB,KACZ,GAAa,MAATrtB,EAAe,MAAM,IAAIoD,EAC7B8H,EAAQ5C,KAAK,CAAC9H,EAAMutB,EAAM/tB,IAC1B,MACF,QACE,MAAM,IAAImD,EAAc,6BAA6BlF,KACzD,EAGF,OADAmwB,EAAIrkB,GAAKqiB,GAAL7qB,MAAgB,IACb2J,CACT,CAaa,SAASmjB,GACtB3d,EACAvK,GAKA,MAAO,CACL0N,SAAAA,CAAU7T,GACR,OAAOA,EAAM6T,WACf,EAEA9L,WAAAA,CAAY/H,GAAO,YAAEyZ,IACnB,OAAO,IAAImT,GAAO5sB,EAAO0Q,EAAUvK,EAAKsT,EAC1C,EAEJ,CC9Oe,SAAS6U,GAAuCnoB,GAa7D,MAAO,CACL0N,SAAAA,CAAU/E,GAAS,UAAEuK,IACnB,OAAO/J,GAAO+J,EAAU,CAAElT,MAAK2I,YACjC,EAEA/G,WAAAA,CAAYmH,GAAQ,YAAEuK,IACpB,OAAOA,EAAyBpK,GAAOH,EAAQ5C,GAASiB,WAAYpH,GAAK2I,OAC3E,EAEAod,eAAe,EAEnB,CDoMCgC,GA1MKtB,GESN,MAAM2B,GAAuBviB,GAAMya,GAAMN,GAAS8F,aAY5CuC,GAAenpB,GAAIiH,GAASyB,gBAAiBoY,GAASsI,UAatDC,GAAcrpB,GAAIiH,GAAS6B,eAAgBgY,GAASwI,SAapDC,GAAWvpB,GAAIiH,GAASiB,UAAW4Y,GAAS0I,cAU5CC,GAAczpB,GAAIiH,GAASwB,QAASqY,GAASrY,SAU7CihB,GAAW1pB,GAAIiH,GAASkC,KAAM2X,GAAS3X,MAavCwgB,GAAa3pB,GAAIiH,GAAS2B,cAAekY,GAAS8I,QAK3C9D,GAAU,CAAC,CACtBhlB,IAAK4gB,GAAeZ,GAASwI,SAC7B3rB,QAAS+jB,GAAe,GACxB3Q,MAAO2H,GACPyE,QAAS1J,IACR,CACD3S,IAAK4gB,GAAeZ,GAASwI,SAC7B3rB,QAAS+jB,GAAe,GAAG,GAC3BmI,MAAOpW,GACP1C,MAAO2H,GACPyE,QAAS1J,GACTqW,WAAYzvB,GAAQ4M,GAASyB,gBAAiBzB,GAASkC,MACvD4gB,UAAWhI,GAAQ9a,GAASO,oBAC3B,CACD1G,IAAK4gB,GAAeZ,GAAS3X,MAC7BxL,QAAS+jB,GAAe,GAAG,GAC3BO,UAAW5nB,GAAQ4M,GAAS6B,gBAC5ByY,QAAS7I,GACTsR,OAAQpI,GAIRN,UAAW5I,GACXoB,SAAQA,IACP,CACDhZ,IAAK4gB,GAAeZ,GAASsI,UAC7BzrB,QAAS+jB,GAAe,GAAG,GAC3BuI,MAAO5vB,GAAQ4M,GAAS6B,gBACxB2Z,UAAS,GACTjgB,KAAMuf,GAAQ9a,GAASO,mBACvB1F,IAAKigB,GAAQ9a,GAASO,mBACtB0iB,OAAQC,GACRC,SAAUzjB,GAAMtM,GAAQ4M,GAAS6B,iBACjC4Z,QAAS/M,IACR,CACD7U,IAAK4gB,GAAeZ,GAAS0I,cAC7B7rB,QAAS+jB,GAAe,GAAG,GAC3BkB,SAAUvoB,GAAQ4M,GAAS6B,gBAC3BuhB,YAAa3R,GACbmD,OAAQnD,GACRqH,WAAY1lB,GAAQ4M,GAASyB,iBAE7BwM,SAAUzB,GACV6W,QAAS5R,GACT6R,YAAaxI,GAAQ9a,GAASO,mBAC9BgjB,WAAYvH,GAAYpC,IAGxB/e,IAAK6E,GAAMib,KACV,CACD9gB,IAAK4gB,GAAeZ,GAAS8I,QAC7BjsB,QAAS+jB,GAAe,GAAG,GAC3BO,UAAW5nB,GAAQ4M,GAAS6B,gBAC5B+Z,YAAa3Y,GACb4Y,eAAgB5Y,GAChBiQ,SAAUxE,GACVuN,eAAgBxK,GAChB1K,WAAUA,IACT,CACDlN,IAAK4gB,GAAeZ,GAASrY,SAC7B9K,QAAS+jB,GAAe,GAAG,GAC3BiC,UAAWtpB,GAAQ4M,GAAS6B,gBAC5B+a,UAAWxpB,GAAQ4M,GAAS6B,gBAC5B2hB,cAAehX,GACfmQ,gBAAiBnQ,GACjBqQ,gBAAiBrQ,GACjBsQ,eAAgBtQ,GAChBwQ,qBAAsBtd,GAAMtM,MAAW2V,KACvCkU,qBAAsBvd,GAAMtM,MAAW2V,KACvCmU,UAAWpC,GAAQ9a,GAASa,OAC5B+c,MAAOnM,GACPgS,UAAWjX,GACXuQ,WAAYvQ,GACZkX,YAAalX,GACbmX,cAAe7I,GAAQ9a,GAASO,mBAChCqjB,cAAe9I,GAAQ9a,GAASO,oBAC/B,CACD1G,IAAK4gB,GAAeZ,GAASgK,+BAC7BntB,QAAS+jB,GAAe,GAAG,GAC3Bxb,KAAM7L,GAAQ4M,GAAS6B,gBACvBiiB,GAAI1wB,GAAQ4M,GAAS6B,gBACrBrJ,OAAQgU,IACP,CACD3S,IAAK4gB,GAAeZ,GAASkK,8BAC7BrtB,QAAS+jB,GAAe,GAAG,GAC3Bxb,KAAM7L,GAAQ4M,GAAS6B,gBACvBrJ,OAAQgU,IACP,CACD3S,IAAK4gB,GAAeZ,GAASmK,+BAC7BttB,QAAS+jB,GAAe,GAAG,GAC3Bxb,KAAM7L,GAAQ4M,GAAS6B,gBACvBrJ,OAAQgU,IACP,CACD3S,IAAK4gB,GAAeZ,GAASoK,qCAC7BvtB,QAAS+jB,GAAe,GAAG,GAC3BuI,MAAO5vB,GAAQ4M,GAAS6B,gBACxB2Z,UAAS,GACTjgB,KAAMuf,GAAQ9a,GAASO,mBACvBkb,QAASjP,GACTkP,SAAUZ,GAAQ9a,GAASO,oBAC1B,CACD1G,IAAK4gB,GAAeZ,GAASqK,mCAC7BxtB,QAAS+jB,GAAe,GAAG,GAC3B0J,OAAQ/wB,GAAQ4M,GAAS6B,gBACzBuiB,SAAUhxB,GAAQ4M,GAASyB,iBAC3BsF,WAAU,GACVvO,OAAQgU,GACRkP,SAAUZ,GAAQ9a,GAASO,mBAC3B8jB,UAAW1J,GACX1M,SAAQ,GACR2D,SAAQA,IACP,CACD/X,IAAK4gB,GAAeZ,GAASO,UAC7B1jB,QAAS+jB,GAAe,GAAG,GAE3B9C,SAAUjY,GAAM4kB,GAAOtkB,GAAS6B,eAAgBgY,GAASwI,UACzDkC,MAAO7kB,GAAM4kB,GAAOtkB,GAASiB,UAAW4Y,GAAS0I,eACjDiC,SAAU9kB,GAAM4kB,GAAOtkB,GAASwB,QAASqY,GAASrY,UAClDijB,UAAW/kB,GAAM4kB,GAAOtkB,GAASyB,gBAAiBoY,GAASsI,WAC3DuC,GAAIhlB,GAAM4kB,GAAOtkB,GAASkC,KAAM2X,GAAS3X,OACzCyiB,QAASjlB,GAAM4kB,GAAOtkB,GAAS2B,cAAekY,GAAS8I,UACtD,CACD9oB,IAAK4gB,GAAeZ,GAAS9Y,YAC7BrK,QAAS+jB,GAAe,GAAG,GAC3BgK,UAAWG,GAAQ/K,GAASgL,gBAC5BN,MAAOK,GAAQ/K,GAASiL,YACxBN,SAAUI,GAAQ/K,GAASkL,eAC3BL,GAAIE,GAAQ/K,GAASmL,kBACrBL,QAASC,GAAQ/K,GAASoL,cAC1BtN,SAAUiN,GAAQ/K,GAASqL,gBAC1B,CACDrrB,IAAK4gB,GAAeZ,GAAS6F,OAC7BhpB,QAAS+jB,GAAe,GAAG,GAC3BnN,OAAQ2U,IACP,CACDpoB,IAAK4gB,GAAeZ,GAAS8F,YAC7BjpB,QAAS+jB,GAAe,GAAG,GAC3BvmB,IAAKymB,GACLjnB,MAAOinB,IACN,CACD9gB,IAAK4gB,GAAeZ,GAASgL,gBAC7BnuB,QAAS+jB,GAAe,GAAG,GAC3BjY,QAAS0f,IACR,CACDroB,IAAK4gB,GAAeZ,GAASiL,YAC7BpuB,QAAS+jB,GAAe,GAAG,GAC3BjY,QAAS8f,IACR,CACDzoB,IAAK4gB,GAAeZ,GAASkL,eAC7BruB,QAAS+jB,GAAe,GAAG,GAC3BjY,QAASggB,IACR,CACD3oB,IAAK4gB,GAAeZ,GAASmL,kBAC7BtuB,QAAS+jB,GAAe,GAAG,GAC3BjY,QAASigB,IACR,CACD5oB,IAAK4gB,GAAeZ,GAASoL,cAC7BvuB,QAAS+jB,GAAe,GAAG,GAC3BjY,QAASkgB,IACR,CACD7oB,IAAK4gB,GAAeZ,GAASqL,eAC7BxuB,QAAS+jB,GAAe,GAAG,GAC3BjY,QAAS4f,IACR,CACDvoB,IAAK4gB,GAAeZ,GAASsL,kBAC7BzuB,QAAS+jB,GAAe,GAAG,GAC3B3J,IAAKpC,GACLT,SAAQ,GACRhU,OAAQ6gB,GAAQ9a,GAAS0B,UChRrB0jB,GAAc,CAClB,CAACvL,GAASiL,WAAY9kB,GAASgB,eAC/B,CAAC6Y,GAAS9Y,WAAYf,GAASe,YAC/B,CAAC8Y,GAASO,SAAUpa,GAASc,MAaxB,SAASiM,GAAUvF,GAAgC,IAAA6d,EACxD,MAAMjhB,EAA+D,QAAvDihB,EAAGD,GAAYxpB,MAAK,EAAE/B,KAASA,IAAQ2N,EAAO3N,QAAO,UAAE,IAAAwrB,EAAAA,EAAIrlB,GAASiB,UAClF,OAAOie,GAAWL,GAAShF,GAAUrS,EAAQ,CAAEuF,cAAa3I,EAC9D,CAsBO,SAAS+I,GACd2N,EACAyE,GACa,IAAA+F,EAEb,OADW,QAAXA,EAAA/F,SAAW,IAAA+F,IAAX/F,EAAgB6F,GAAYxpB,MAAK,EAAE,CAAEsN,KAAS4R,EAAQ5N,WAAWhE,OAAQ,IAClEmW,GAAaR,GAAShF,GAAUiB,EAASyE,EAAa,CAAEpS,gBACjE,CCpCO,SAASyR,GAAU/kB,EAAUnD,GAClC,OAAO6uB,GAAgB/K,GAAU9T,GAAK7M,EAAKnD,EAC7C,CAUO,SAAS6Z,GAAQ/I,GACtB,OAAO0X,GAAW1E,GAAU9T,GAAKc,EAAQ,CAEvC8I,YACAC,WACAK,UAAY4U,GAAwBjV,GAClC,IAAK/I,KAAWge,IAElBzY,UAASA,IACR/M,GAASU,YACd,CAYOvC,eAAesnB,GAAaje,GAWjC,aAVMpJ,QAAQsnB,IACZ9G,GAAUpX,EAAO3N,IAAK2N,EAAO9Q,SAC1BqC,KAAIoF,OAAQjK,EAAK2d,MACK,MAAjBA,EAAMlK,UAEVH,EAAOtT,SAAa2d,EAAMlK,QAAQH,EAAOtT,GAAMsT,EAAQA,GAAO,KAK7D+I,GAAQ/I,EACjB,CASO,SAAS8I,GACdI,EACA3B,GAEA,OAAOsQ,GAAa7E,GAAU9T,GAAKgK,EAAW3B,EAAQ,CAAEuB,YAAUnD,YAAWA,IAC/E,CAQO,SAASwY,GAAYC,GAC1B,MAAMpqB,EAAwB,kBAAVoqB,GAAsBA,EAAM1Y,WAAW,OACvDlK,GAAO4iB,GACPA,EACJ,OAAO7iB,GAAOsB,GAAK7I,GAAOwE,GAAS0B,OACrC,CAQO,SAASmkB,GACdC,GAEA,IAAIte,EAAS8I,GAASwV,GAEtB,GADIpf,GAAIuT,WAAazS,EAAO3N,MAAK2N,EAASA,EAAOkJ,WAC7ChK,GAAI0I,mBAAqB5H,EAAO3N,KAAO6M,GAAI2I,aAAe7H,EAAO3N,IACnE,MAAM,IAAIjE,EAAc,aAAc,iCAAkC4R,EAAO3N,KAEjF,OAAO+P,GAAgBpC,EAAOqC,QAASrC,EAAOsC,MAChD,C,8ZC/FO,SAASic,GACd1tB,EACA2tB,EACAC,GAEA,MAAMC,EAAW,CAACF,GACdC,GAASC,EAASlqB,KAAK,YAC3B,MAAMmqB,EAAcnjB,GAAO3K,GAC3B,OAAO8G,GAAc,CAACL,GAAOG,KAAKinB,EAAS7vB,KAAK,MAAOgO,GAAK8hB,IAC9D,CAEA,IAAAC,GAAA,IAAA3pB,QAGe,MAAM4pB,WAAsBpoB,GAQzCnJ,WAAAA,CAA4BwxB,GAC1BtxB,QANFoI,GAAA,KAASgpB,QAAiB,GAAa,KAKXE,UAAAA,EAE1B,MAAMC,EAAU/hB,GAAAA,KAAU+hB,QAAQC,SAASxjB,GAAOsjB,IAClDjpB,GAAK+oB,GAALnxB,KAAyBsxB,EAAQD,WACjCrxB,KAAK7B,QAAU2P,GAAOwjB,EAAQE,UAAWzmB,GAAS6B,eACpD,CAKA,eAAO6kB,GACL,MAAMJ,EAAYvjB,GAAOyB,GAAAA,YAAiB,IAAKxE,GAAS8B,kBACxD,OAAO,IAAIukB,GAAcC,EAC3B,CAGA,UAAeK,CAAKnrB,EAA2B2B,GAC7C,OAAOqH,GAAAA,KAAUC,SAAS3F,GAAOG,KAAKzD,GAAOiC,GAAK2oB,GAALnxB,MAC/C,CAEA,qBAAe2xB,CACbvuB,GACA,QAAE4tB,EAAO,UAAED,KAAc7oB,GAAuD,CAAC,GAEjF,GAAiB,MAAb6oB,EACF,MAAM,IAAIpwB,EAAc,YAAa,WAAYowB,GAEnD,MAAMG,EAAcnjB,GAAO3K,GACrBwuB,EAAkBd,GAAgB1tB,EAAa2tB,GAAuB,IAAZC,GAE1DvL,EAAa,OAAOzlB,KAAK0xB,KAAKE,EAAiB1pB,IACrD,OAAOoT,GAAQ,CAAE1W,IAAK6M,GAAIuT,SAAUvJ,UAAWyV,EAAazL,cAC9D,CAEA,iBAAeoM,CAAY/xB,EAAiBoI,GAC1C,OAAOlI,KAAK0xB,KAAK/hB,GAAc7P,GAAUoI,EAC3C,CAEA,mBAAe4pB,CACbvrB,EACAqK,GACA,KACE3Q,EAAI,QAAEwB,EAAO,UAAEsvB,EAAS,gBAAEjuB,KAAoBoF,GACC,CAAC,GAElD,MAAM6pB,EAAQphB,GAAcpK,EAAMqK,EAAK,CACrC3Q,OAAMwB,UAASsvB,YAAWjuB,oBAEtBwM,QAAkBtP,KAAK0xB,KAAKK,EAAO7pB,GACzC,OAAO4F,GAAOwB,EAAWvE,GAAS+B,UACpC,CAEA,oBAAeklB,CACbC,GACA,UAAElB,GAAsC,CAAC,GAEzC,GAAiB,MAAbA,EAAmB,MAAM,IAAIpwB,EAAc,YAAa,WAAYowB,GACxE,MAAMxjB,EAAUrD,GAAc,CAC5BwF,GAAqB,IAAI3F,WAAW,CAAC,IAAKF,GAAOG,KAAK+mB,GAAYhjB,GAAOkkB,KAErE3iB,QAAkBtP,KAAK0xB,KAAKnkB,GAClC,OAAOO,GAAOwB,EAAWvE,GAAS+B,UACpC,ECrFK,IAAKolB,GAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,sBAAbA,EAAAA,EAAa,sCAAbA,CAAa,MAuBzB,MAAMC,GAAqBh0B,GAAQ4M,GAAS2B,eAItC0lB,GAAe,CACnB9f,SAAAA,CAAU7T,GACR,OAAO0zB,GAAmB7f,UAAUxE,GAAOC,GAAOtP,GAAQsM,GAAS2B,eACrE,EACAlG,WAAAA,CAAY/H,GACV,OAAOqP,GAAOC,GAAOokB,GAAmB3rB,YAAY/H,IAASsM,GAAS4B,cACxE,GAMI7J,GAAkB3E,GAAQ4M,GAASyB,iBAK5Bod,GAAU,CAAC,CACtBhlB,IAAK4gB,GAAe0M,GAAcG,cAClC5wB,QAAS+jB,GAAe,GAAG,GAC3B3C,eAAgB1kB,GAAQ4M,GAAS6B,gBACjC9J,oBACC,CACD8B,IAAK4gB,GAAe0M,GAAcI,UAClC7wB,QAAS+jB,GAAe,GAAG,GAC3B3C,eAAgB1kB,GAAQ4M,GAAS6B,gBAIjCwZ,OAAM,GACNtjB,oBACC,CACD8B,IAAK4gB,GAAe0M,GAAcK,cAClC9wB,QAAS+jB,GAAe,GAAG,GAC3B3C,eAAgB1kB,GAAQ4M,GAAS6B,gBACjC9J,oBACC,CACD8B,IAAK4gB,GAAe0M,GAAcxE,QAClCjsB,QAAS+jB,GAAe,GAAG,GAC3B3C,eAAgB1kB,GAAQ4M,GAAS6B,gBACjC9J,oBACC,CACD8B,IAAK4gB,GAAe0M,GAAcvmB,gBAClClK,QAAS+jB,GAAe,GAAG,GAC3B8B,QAAS8K,GACTtvB,qBC7DK,SAAS0vB,GACd3M,EACAyE,GAEA,OAAOF,GAAaR,GAASsI,GAAerM,EAASyE,EAAa,CAAC,EACrE,C,gBC3BA,SAASmI,GAAOC,EAAWC,GACzB,MAAMC,EAAiBra,GAAwBA,EAC5C7J,MAAM,QAAQ,GAAGA,MAAM,KAAK5K,KAAK+uB,IAAOA,IAErCC,EAAcF,EAAcF,GAC5BK,EAAcH,EAAcD,GAE5BpT,EAAOjJ,KAAK0J,OAAO8S,KAAgBC,GAAe,EAClDC,EAAsBC,GAAiCA,EAAWC,UACrEC,QAAO,CAACC,EAAKxH,EAAGxI,IAAQgQ,EAAMxH,EAAIrM,GAAQ6D,GAAK,GAElD,OAAO4P,EAAmBF,GAAeE,EAAmBD,EAC9D,CAEe,SAASM,GACtB5xB,EACAC,EACAC,GAEA,OAAO8wB,GAAOhxB,EAASC,IAAc,IAClB,MAAbC,GAAqB8wB,GAAOhxB,EAASE,GAAa,EAC1D,CCZA,MAAM2xB,GAAe,gBAERC,GAAmBA,IAC3B/1B,KAEH,MAAMg2B,GAAaC,EAAAA,GAAAA,OAAwBj2B,IACrC,UAAE8U,EAAS,YAAE9L,GAAgBgtB,EACnC,OAAO/pB,OAAO4Z,OAAOmQ,EAAY,CAC/BlhB,SAAAA,KACMohB,EAAQlqB,EAAQmqB,EAAYzrB,IAGhC,GAAyB,WAArBwrB,EAAOh3B,KAAKuD,MAA+B,MAAVuJ,EACnC,OAAO8I,EAAU3J,KAAK3I,KAAM0zB,EAAQlqB,EAAQmqB,EAAYzrB,GAE1B,IAAA0rB,EAAhC,GAAsB,kBAAXpqB,EAET,MADU,QAAVoqB,EAAAD,SAAU,IAAAC,IAAVD,EAAeD,EAAOG,gBAChB,IAAIj0B,MAAM,GAAG+zB,gBAAyBnqB,6BAE9C,OAAOA,EAAOnH,UAChB,EAEAmE,WAAAA,KACMktB,EAAQI,EAAcH,EAAYzrB,IAGtC,GAAyB,WAArBwrB,EAAOh3B,KAAKuD,MAAqC,MAAhB6zB,EAKnC,MAJ4B,kBAAjBA,GAA6BA,EAAa7b,WAAWqb,MAC9D3tB,QAAQ4T,KAAK,sCAAsCua,yBACnDA,GAAgBA,EAAa1X,QAAQkX,GAAc,KAE9C9sB,EAAYmC,KAAK3I,KAAM0zB,EAAQI,EAAcH,EAAYzrB,GAElE,GAA4B,kBAAjB4rB,GAA6BA,EAAergB,OAAOsgB,iBAC5D,MAAM,IAAInyB,EAAc,UAAUkyB,+CAEpC,OAAO1a,OAAO0a,EAAazxB,WAAW+Z,QAAQkX,GAAc,IAC9D,GACA,EAIEU,GAAmB,iCACnBC,GAAoB,wBACbC,GAAoC,CAC/Cj0B,KAAM,gBACN,iBAAMk0B,CAAYC,EAASC,GACzB,MAAM9M,QAAiB8M,EAAKD,GAC5B,OAA2B,MAAvB7M,EAAS+M,aAEb/M,EAAS+M,WAAa/M,EAAS+M,WAAWC,WACxC,IAAIC,OAAOR,GAAkB,MAC5BS,IACC,MAAMC,EAAQD,EAAQC,MAAMV,IAC5B,GAAa,MAATU,EAAe,MAAM,IAAI7yB,EAC7B,MAAO,CAAE5B,EAAMxB,EAAOk2B,GAAOD,EAC7B,MAAO,CACLz0B,GACCxB,EAAQgV,OAAOsgB,iBAAmB,IAAIT,KAAe70B,KAAWA,EACjEk2B,GACAvzB,KAAK,GAAG,IAIdmmB,EAAS+M,WAAa/M,EAAS+M,WAAWC,WACxC,IAAIC,OAAOP,GAAmB,MAC7BQ,IACC,MAAMC,EAAQD,EAAQC,MAAMT,IAC5B,GAAa,MAATS,EAAe,MAAM,IAAI7yB,EAC7B,MAAO,CAAEI,EAAQxD,GAASi2B,EAC1B,MAAO,GAAGzyB,KAAUqxB,KAAe70B,IAAQ,KAtBP8oB,CA0B1C,GAGWqN,GAAyBA,KACpC,MAAMC,EAAgB,IAAI7S,IAE1B,MAAO,CACL8S,OAAQ,CACN70B,KAAM,iBACN,iBAAMk0B,CAAYC,EAASC,GAAM,IAAAU,EAC/B,MAAM91B,EAAMm1B,EAAQY,QAAQpc,IAAI,WAChCwb,EAAQY,QAAQ7S,OAAO,WACvB,MAAM8S,EAAc/rB,SAAuCmrB,EAAKD,GAChE,GAAW,MAAPn1B,EAAa,OAAOg2B,IACxB,MAAMxS,GAA6B,QAAvBsS,EAACF,EAAcjc,IAAI3Z,UAAI,IAAA81B,EAAAA,EAAI5rB,QAAQC,WAAW8rB,KAAKD,GAE/D,OADAJ,EAAcrb,IAAIva,EAAKwjB,EAAIpF,OAAM,UAC1BoF,CACT,GAEF0S,SAAU,UACX,EAGUC,GAA8BA,KACzC,MAAMC,EAAqB,IAAIrT,IAE/B,MAAO,CACL8S,OAAQ,CACN70B,KAAM,uBACN,iBAAMk0B,CAAYC,EAASC,GAAM,IAAAiB,EAC/B,GAAuB,QAAnBlB,EAAQmB,OAAkB,OAAOlB,EAAKD,GAC1C,MAAMn1B,EAAMu2B,KAAKC,UAAU,CAACrB,EAAQsB,IAAKtB,EAAQuB,OAC3CpO,EAAsC,QAA9B+N,EAAGD,EAAmBzc,IAAI3Z,UAAI,IAAAq2B,EAAAA,EAAIjB,EAAKD,GACrDiB,EAAmB7b,IAAIva,EAAKsoB,GAC5B,IACE,aAAaA,CACf,CAAE,QACA8N,EAAmBlT,OAAOljB,EAC5B,CACF,GAEFk2B,SAAU,UACX,EAGUS,GAAuCA,KAClD,MAAMC,EAAc,IAAI7T,IAExB,MAAO,CACL8S,OAAQ,CACN70B,KAAM,iCACN,iBAAMk0B,CAAYC,EAASC,GAAM,IAAAyB,EAC/B,GAAuB,QAAnB1B,EAAQmB,OAAkB,OAAOlB,EAAKD,GAC1C,MAAMn1B,EAAMu2B,KAAKC,UAAU,CAACrB,EAAQsB,IAAKtB,EAAQuB,OAC3CpO,EAA+B,QAAvBuO,EAAGD,EAAYjd,IAAI3Z,UAAI,IAAA62B,EAAAA,EAAIzB,EAAKD,GAE9C,OADAyB,EAAYrc,IAAIva,EAAKsoB,GACdA,CACT,GAEF4N,SAAU,UACX,EAGUY,GACXC,IAA8B,CAE9BlB,OAAQ,CACN70B,KAAM,kBACN,iBAAMk0B,CAAYC,EAASC,GACzB,IACE,aAAaA,EAAKD,EACpB,CAAE,MAAOnqB,GACP,KACIA,aAAiBW,GAAAA,KACC,MAAjBX,EAAMmqB,SACNnqB,EAAMnK,QAAQmY,WAAW,UAC5B,MAAMhO,EACR,MAAMhI,EAAS,GAAG,IAAIwT,IAAIxL,EAAMmqB,QAAQsB,KAAK5f,SAAStI,MAAM,WAE5D,GAAkC,MAA9BvD,EAAMsd,UAAU+M,WAElB,KADsB,KAAlBrqB,EAAMnK,UAAgBmK,EAAMnK,QAAU,GAAGmC,MAAWgI,EAAM3D,QACxD2D,EAGR,MAAM0rB,EAAQ1rB,EAAMsd,SAAmC0O,WACvDhsB,EAAMnK,QAAUmC,EAChB,MAAMnC,EAAkB,MAAR61B,EAAe,IAAI1rB,EAAMsd,SAASuG,qBAAuBkI,EAAWL,GAEpF,KADgB,KAAZ71B,IAAgBmK,EAAMnK,SAAW,IAAIA,KACnCmK,CACR,CACF,GAEFkrB,SAAU,YAGCe,GAAwBA,CACnCj2B,EACAk2B,EACAz0B,EACAC,KAAiB,CAEjBmzB,OAAQ,CACN70B,KAAM,gBACN,iBAAMk0B,CAAYC,EAASC,GACzB,GAAID,EAAQY,QAAQoB,IAAI,mBAEtB,OADAhC,EAAQY,QAAQ7S,OAAO,mBAChBkS,EAAKD,GAEd,MAAMlsB,EAAU,CAAEmuB,eAAgB,CAAEC,cAAe,CAAE,kBAAmB,UAClE94B,EAAO,OAAO24B,EAAUjuB,GAAUxG,EAAWC,GACnD,IAAK0xB,MAAmB71B,GAAO,MAAM,IAAI+D,EAAwBtB,KAASzC,GAC1E,OAAO62B,EAAKD,EACd,GAEFe,SAAU,YAGCoB,GAA0BA,CACrCC,EACAC,KAAyB,CAEzB3B,OAAQ,CACN70B,KAAM,mBACN,iBAAMk0B,CAAYC,EAASC,GAAM,IAAAqC,EAC/B,MAAMC,EAA+C,QAAtCD,EAAGtC,EAAQY,QAAQpc,IAAI,uBAAe,IAAA8d,EAAAA,EAAIE,IACzDxC,EAAQY,QAAQ7S,OAAO,gBACvB,MAAM0U,EAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKve,QAAQrF,GAAMA,KAAO0jB,IAEpEG,EAAY,IAAInU,MAAM6T,GAAYO,KAAK,GAC1CjzB,KAAI,CAACkzB,EAAG5T,MAAUA,EAAM,GAAKoT,IAAe,IACzCS,EAAcH,EAAU3D,QAAO,CAACT,EAAGC,IAAMD,EAAIC,GAAG,GAChDuE,EAAgBJ,EAAUhzB,KAAKqzB,GAAM7gB,KAAK0E,MAAOmc,EAAIF,EAAeR,KAE1E,IAAIxsB,EAAQ,IAAIW,GAAAA,GAAU,6BAC1B,IAAK,IAAIwsB,EAAU,EAAGA,GAAWZ,EAAYY,GAAW,EAAG,CACzD,GAAgB,IAAZA,EAAe,OACXnuB,GAAMiuB,EAAcE,EAAU,IACpC,MAAMC,EAAY,IAAI5hB,IAAI2e,EAAQsB,KAClC2B,EAAUC,aAAa9d,IAAI,cAAe4d,EAAQ/0B,YAClD+xB,EAAQsB,IAAM2B,EAAUh1B,UAC1B,CACA,IACE,aAAagyB,EAAKD,EACpB,CAAE,MAAO+C,GAAG,IAAAI,EACV,KAAMJ,aAAavsB,GAAAA,IAAY,MAAMusB,EACrC,GAAIN,EAAmBnsB,SAA2B,QAAnB6sB,EAACJ,EAAE5P,UAAUuG,cAAM,IAAAyJ,EAAAA,EAAI,GAAI,MAAMJ,EAChEltB,EAAQktB,CACV,CACF,CACA,MAAMltB,CACR,GAEFkrB,SAAU,YCzOC/H,GAAsC,CACjD1wB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,UACXC,gBAAiB,CACfh7B,GAAI,CACFo3B,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVghB,QAAS,CACP0W,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV63B,QAAS,CACPjE,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,YAGViT,KAAM,CACJ2gB,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,OACN83B,cAAe,CAAC,QAAS,iBAG7BlU,WAAY,CACVgQ,eAAgB,cAChBn3B,KAAM,CACJuD,KAAM,WAGVmpB,QAAS,CACPyK,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,cAOH+3B,GAAyC,CACpDt7B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aACXC,gBAAiB,CACfvU,OAAQ,CACN2Q,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVg4B,UAAW,CACTpE,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,cAOHi4B,GAAgD,CAC3Dx7B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,oBACXC,gBAAiB,CACfna,UAAW,CACTqa,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHk4B,GAAwC,CACnDz7B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,YACXC,gBAAiB,CACfhW,aAAc,CACZoS,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBASZxS,GAAuC,CAClDtoB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACfjc,GAAI,CACFqY,eAAgB,KAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,OAGftX,YAAa,CACXyX,YAAa,CACXE,iBAAkB,oBAClBD,kBAAmB,GAErB/D,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVo4B,UAAW,CACTxE,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVmP,KAAM,CACJykB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVwb,UAAW,CACToY,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,WAGVwlB,WAAY,CACVoO,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,gBASPq4B,GAAiC,CAC5C57B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,KACXC,gBAAiB,CACf7R,YAAa,CACXiO,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChBn3B,KAAM,CAEJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGVkd,SAAU,CACR0W,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVsN,QAAS,CACPsmB,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,WAGVs4B,YAAa,CACX1E,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,WAGVynB,gBAAiB,CACfiQ,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,mBAChBn3B,KAAM,CAEJuD,KAAM,WAGVu4B,YAAa,CACX3E,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,WAGV2nB,gBAAiB,CACf+P,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,mBAChBn3B,KAAM,CAEJuD,KAAM,WAGV4nB,eAAgB,CACd8P,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,kBAChBn3B,KAAM,CAEJuD,KAAM,WAGV6nB,WAAY,CACV6P,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,cAChBn3B,KAAM,CACJuD,KAAM,WAGVgoB,UAAW,CACT4L,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,WAGVw4B,YAAa,CACX5E,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cAGfrP,UAAW,CACT0L,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,WAGVmoB,OAAQ,CACNyL,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,WAGV0oB,MAAO,CACLgP,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGV4oB,KAAM,CACJgL,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVkL,OAAQ,CACN0oB,eAAgB,SAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBAGfkB,cAAe,CACb7E,eAAgB,iBAChBn3B,KAAM,CACJuD,KAAM,WAGVooB,qBAAsB,CACpBsP,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,yBAChBn3B,KAAM,CAEJuD,KAAM,WAGVqoB,qBAAsB,CACpBqP,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,yBAChBn3B,KAAM,CAEJuD,KAAM,WAGVuoB,IAAK,CACHqL,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV8nB,qBAAsB,CACpB8L,eAAgB,yBAChBn3B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,aAKd+nB,qBAAsB,CACpB6L,eAAgB,yBAChBn3B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,aAKd0mB,YAAa,CACXkN,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,WAGV2mB,eAAgB,CACdiN,eAAgB,kBAChBn3B,KAAM,CACJuD,KAAM,WAGVge,SAAU,CACR0Z,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChBn3B,KAAM,CAEJuD,KAAM,WAGV04B,UAAW,CACT9E,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBAGfzR,UAAW,CACT8N,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChBn3B,KAAM,CACJuD,KAAM,WAGV8d,SAAU,CACR8V,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,WAGVgnB,MAAO,CACL4M,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGV24B,SAAU,CACR/E,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,QAGfqB,YAAa,CACXhF,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBAGflQ,QAAS,CACPuM,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WAGVsnB,SAAU,CACRsM,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WAGV+lB,aAAc,CACZ6N,eAAgB,gBAChBn3B,KAAM,CACJuD,KAAM,WAGVA,KAAM,CACJ4zB,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,WAGVimB,SAAU,CACRyR,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,WAGVkC,QAAS,CACPw1B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,WAChBn3B,KAAM,CAEJuD,KAAM,WAGVmmB,OAAQ,CACNyN,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,WAGVolB,QAAS,CACPsS,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WAGV2d,SAAU,CACRiW,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBAKnBpS,UAAW,CACTuS,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,WAGV2U,QAAS,CACPif,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WAGVqG,KAAM,CACJutB,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,WAGV2R,UAAW,CACT+lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,WAGVumB,QAAS,CACPmR,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,UAChBn3B,KAAM,CAEJuD,KAAM,WAGV64B,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV+Y,SAAU,CACR2e,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChBn3B,KAAM,CAEJuD,KAAM,WAGVwmB,SAAU,CACRoN,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,WAGVymB,SAAU,CACRmN,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,WAGV4jB,WAAY,CACVgQ,eAAgB,cAChBn3B,KAAM,CACJuD,KAAM,WAGVmpB,QAAS,CACPuO,YAAa,CACXoB,QAAS,IAAIvE,OAAO,2BAEtBX,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WAGVopB,KAAM,CACJwK,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVqpB,SAAU,CACRuK,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,WAGVub,GAAI,CACFqY,eAAgB,KAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aAGfjO,QAAS,CACPsK,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WAGVwB,QAAS,CACPk2B,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVvD,KAAM,CACJm3B,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,OACN83B,cAAe,CACb,UACA,kBACA,mBACA,oBACA,yBACA,uBACA,qBACA,iBACA,kBACA,wBACA,wBACA,mBACA,iBACA,gBACA,kBACA,iBACA,cACA,eACA,iBACA,eACA,mBACA,iBACA,aACA,WACA,oBAQCiB,GAAwC,CACnDt8B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,YACXC,gBAAiB,CACfhQ,UAAW,CACToM,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,aAKd0nB,UAAW,CACTkM,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,gBASPg5B,GAA6C,CACxDv8B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBACX0B,WAAY,iBACZC,yBAA0B,CACxBtF,eAAgB,KAChBuF,WAAY,MAEd3B,gBAAiB,CACf4B,GAAI,CACFxF,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHq5B,GAA0C,CACrD58B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cACXC,gBAAiB,CACf/6B,KAAM,CACJ+nB,aAAc,QACd8U,YAAY,EACZ1F,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,WAGVxB,MAAO,CACLk5B,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHu5B,GAAkC,CAC7C98B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,MACXC,gBAAiB,CACf/6B,KAAM,CACJm3B,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,OACN83B,cAAe,CAAC,QAAS,WAG7Bt5B,MAAO,CACLk5B,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHw5B,GAA0C,CACrD/8B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cACXC,gBAAiB,CACfx4B,IAAK,CACH40B,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVy5B,WAAY,CACV7F,eAAgB,cAChBn3B,KAAM,CACJuD,KAAM,WAGVxD,GAAI,CACFo3B,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH05B,GAA2C,CACtDj9B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,eACXC,gBAAiB,CACfh7B,GAAI,CACFo3B,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV25B,UAAW,CACTjC,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,WAGV45B,OAAQ,CACNlC,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV65B,cAAe,CACbjG,eAAgB,iBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV85B,WAAY,CACVpC,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHsM,GAAsC,CACjD7P,KAAM,CACJuD,KAAM,YACNu3B,UAAW,UACXC,gBAAiB,CACfh7B,GAAI,CACFo3B,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVs4B,YAAa,CACX1E,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVu4B,YAAa,CACX3E,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsuB,cAAe,CACboJ,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,iBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVynB,gBAAiB,CACfiQ,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,mBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV2nB,gBAAiB,CACf+P,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,mBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4nB,eAAgB,CACd8P,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,kBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVw4B,YAAa,CACX5E,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cAGfvP,UAAW,CACT4L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0oB,MAAO,CACLgP,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVuuB,UAAW,CACTmJ,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV6nB,WAAY,CACV6P,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVwuB,YAAa,CACXkJ,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH+5B,GAA6C,CACxDt9B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBACXC,gBAAiB,CACfh7B,GAAI,CACFo3B,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2U,QAAS,CACPif,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2R,UAAW,CACT+lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV+tB,OAAQ,CACN6F,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,YAGVg6B,YAAa,CACXpG,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,aAKdumB,QAAS,CACPmR,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,cAOHi6B,GAAuC,CAClDx9B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACf0C,SAAU,CACRtG,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHm6B,GAAkC,CAC7C19B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,MACXC,gBAAiB,CACfjP,IAAK,CACHqL,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHo6B,GAAuC,CAClD39B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACfx3B,KAAM,CACJ4zB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVq6B,OAAQ,CACNzG,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVs6B,QAAS,CACP1G,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVu6B,gBAAiB,CACf7C,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,oBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVw6B,mBAAoB,CAClB5G,eAAgB,uBAChBn3B,KAAM,CACJuD,KAAM,WAGVy6B,kBAAmB,CACjB7G,eAAgB,sBAChBn3B,KAAM,CACJuD,KAAM,WAGV06B,KAAM,CACJ9G,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,UAGfoD,cAAe,CACb/G,eAAgB,iBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV46B,gBAAiB,CACfhH,eAAgB,mBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV66B,YAAa,CACXjH,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH86B,GAAoC,CAC/Cr+B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,QACXC,gBAAiB,CACf/6B,KAAM,CACJm3B,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,WAGVsG,KAAM,CACJstB,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,cAOH+6B,GAA0C,CACrDt+B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cACXC,gBAAiB,CACfpV,IAAK,CACHwR,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGVyiB,SAAU,CACRmR,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,oBAKnBhV,IAAK,CACHqR,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,sBAKnBjV,SAAU,CACRkC,cAAc,EACdoP,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,eAOHg7B,GAA4C,CACvDv+B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACf3U,OAAQ,CACN+Q,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,cAOHi7B,GAA8C,CACzDx+B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBACXC,gBAAiB,CACfjc,GAAI,CACFqY,eAAgB,KAChBn3B,KAAM,CACJuD,KAAM,WAGV+E,OAAQ,CACN6uB,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,WAGVk7B,QAAS,CACPtH,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,qBAOR4D,GAA4C,CACvD1+B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACf4D,SAAU,CACRxH,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkvB,SAAU,CACR0E,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChBn3B,KAAM,CAEJuD,KAAM,WAGV64B,IAAK,CACHnB,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGVivB,OAAQ,CACN2E,eAAgB,SAChBn3B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChBn3B,KAAM,CACJuD,KAAM,WAGVq7B,QAAS,CACPzH,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,yBAOR+D,GAAgD,CAC3D7+B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,oBACXC,gBAAiB,CACfjc,GAAI,CACFqY,eAAgB,KAChBn3B,KAAM,CACJuD,KAAM,WAGV+E,OAAQ,CACN6uB,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,WAGVu7B,SAAU,CACR3H,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,eAOHw7B,GAA4C,CACvD/+B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACfxU,QAAS,CACP4Q,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBAKnBjV,SAAU,CACRsR,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,eASxBy7B,GAA2C,CACtDh/B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,eACXC,gBAAiB,CACf/6B,KAAM,CACJm3B,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVoT,OAAQ,CACNwgB,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVijB,OAAQ,CACN2Q,eAAgB,SAChBn3B,KAAM,CACJuD,KAAM,WAGV07B,QAAS,CACP9H,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,0BAORoE,GAAiD,CAC5Dl/B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,qBACXC,gBAAiB,CACf/Q,SAAU,CACRmN,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkuB,YAAa,CACXwJ,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0f,OAAQ,CACNgY,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4jB,WAAY,CACVgQ,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV+Y,SAAU,CACR2e,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVmuB,QAAS,CACPuJ,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2F,IAAK,CACHiuB,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,YAKnBnJ,YAAa,CACXwF,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVquB,WAAY,CACVuF,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,OACN83B,cAAe,CAAC,KAAM,QAAS,eAO5B8D,GAAoC,CAC/Cn/B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,QACXC,gBAAiB,CACft5B,QAAS,CACP01B,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV67B,OAAQ,CACNjI,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACPT,YAAa,CACXC,iBAAkB,GAEpBl7B,KAAM,CAEJuD,KAAM,aAKdsG,KAAM,CACJstB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH87B,GAAyC,CACpDr/B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aACXC,gBAAiB,CACfuE,SAAU,CACRnI,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aAGfyE,YAAa,CACXpI,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,gBASPi8B,GAAuC,CAClDx/B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACfroB,KAAM,CACJykB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0f,OAAQ,CACNgY,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVk8B,SAAU,CACRtI,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVm8B,YAAa,CACXvI,eAAgB,gBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVgoB,UAAW,CACT4L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVo8B,MAAO,CACLxI,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVq8B,YAAa,CACXzI,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVlC,OAAQ,CACN45B,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVs8B,IAAK,CACH5E,YAAa,CACX6E,SAAU,GACVC,SAAU,IAEZ5I,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACPT,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBl7B,KAAM,CACJuD,KAAM,aAKd4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGV4Y,KAAM,CACJ8e,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVwB,QAAS,CACPk2B,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVy8B,KAAM,CACJ7I,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH08B,GAAqC,CAChDjgC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,SACXC,gBAAiB,CACfroB,KAAM,CACJykB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0f,OAAQ,CACNgY,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVk8B,SAAU,CACRtI,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVm8B,YAAa,CACXvI,eAAgB,gBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVgoB,UAAW,CACT4L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVo8B,MAAO,CACLxI,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVq8B,YAAa,CACXzI,eAAgB,cAChBn3B,KAAM,CACJuD,KAAM,WAGVlC,OAAQ,CACN45B,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,SAChBn3B,KAAM,CACJuD,KAAM,WAGVs8B,IAAK,CACH5E,YAAa,CACX6E,SAAU,GACVC,SAAU,IAEZ5I,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACPT,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBl7B,KAAM,CACJuD,KAAM,aAKd4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGV4Y,KAAM,CACJ8e,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVwB,QAAS,CACPk2B,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVy8B,KAAM,CACJ7I,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,WAGV28B,QAAS,CACP/I,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WAGV48B,QAAS,CACPhJ,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WAGVqP,UAAW,CACTukB,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,cAOH68B,GAA2C,CACtDpgC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,eACXC,gBAAiB,CACfroB,KAAM,CACJykB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH88B,GAA6C,CACxDrgC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBACXC,gBAAiB,CACf9X,OAAQ,CACNgY,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH+8B,GAA+C,CAC1DtgC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBACXC,gBAAiB,CACfroB,KAAM,CACJykB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0f,OAAQ,CACNgY,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV28B,QAAS,CACP/I,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVk8B,SAAU,CACRtI,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVm8B,YAAa,CACXvI,eAAgB,gBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVgoB,UAAW,CACT4L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV48B,QAAS,CACPhJ,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVqP,UAAW,CACTukB,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4Y,KAAM,CACJ8e,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVwB,QAAS,CACPk2B,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHg9B,GAA4C,CACvDvgC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACfyF,MAAO,CACLvF,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHk9B,GAAwC,CACnDzgC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,YACXC,gBAAiB,CACfh7B,GAAI,CACFo3B,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV8tB,MAAO,CACL8F,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2d,SAAU,CACRiW,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,qBASZ4F,GAA+C,CAC1D1gC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBACXC,gBAAiB,CACfh7B,GAAI,CACFo3B,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0mB,YAAa,CACXkN,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2mB,eAAgB,CACdiN,eAAgB,kBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVge,SAAU,CACR0Z,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHo9B,GAA4C,CACvD3gC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACf6F,cAAe,CACbzJ,eAAgB,iBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,qBASZ9rB,GAA0C,CACrDhP,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cACXC,gBAAiB,CACfh7B,GAAI,CACFo3B,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkd,SAAU,CACR0W,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVs9B,YAAa,CACX5F,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV8d,SAAU,CACR8V,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVgnB,MAAO,CACL4M,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsnB,SAAU,CACRsM,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV44B,YAAa,CACXhF,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,QAGf3b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,cAOHu9B,GAAyC,CACpD9gC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aACXC,gBAAiB,CACftO,OAAQ,CACN0K,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHw9B,GAA4C,CACvD/gC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACfxe,YAAa,CACX0e,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,gBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGViZ,YAAa,CACXye,YAAa,CACXE,iBAAkB,IAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVy9B,QAAS,CACP/F,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH09B,GAAqC,CAChDjhC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,SACXC,gBAAiB,CACfmG,oBAAqB,CACnB/J,eAAgB,yBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV49B,UAAW,CACTlG,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV69B,WAAY,CACVnG,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV89B,SAAU,CACRpG,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV+9B,QAAS,CACPnK,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,YAGVg+B,aAAc,CACZtG,YAAa,CACXE,iBAAkB,IAClBD,iBAAkB,GAEpB/D,eAAgB,gBAChBn3B,KAAM,CACJuD,KAAM,WAGVi+B,OAAQ,CACNrK,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVk+B,UAAW,CACTtK,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,YAGVm+B,UAAW,CACTvK,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,eAKnB6G,YAAa,CACXxK,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVq+B,aAAc,CACZzK,eAAgB,gBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVs+B,UAAW,CACT5G,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVu+B,gBAAiB,CACf3K,eAAgB,mBAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,oBAGfiH,yBAA0B,CACxB9G,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,6BAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV8wB,UAAW,CACT8C,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVy+B,WAAY,CACV7K,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0+B,gBAAiB,CACf9K,eAAgB,qBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2+B,eAAgB,CACdjH,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,mBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH4+B,GAAuC,CAClDniC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACfh2B,QAAS,CACPk2B,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV6+B,kBAAmB,CACjBnH,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,sBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH8+B,GAA8C,CACzDriC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBACXC,gBAAiB,CACfuH,QAAS,CACPrH,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVg/B,SAAU,CACRtH,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHi/B,GAAyC,CACpDxiC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aACXC,gBAAiB,CACf0H,SAAU,CACRtL,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVlC,OAAQ,CACN45B,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVm/B,MAAO,CACLvL,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVo/B,SAAU,CACR1H,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHq/B,GAAwC,CACnD5iC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,YACXC,gBAAiB,CACfjc,GAAI,CACFqY,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHs/B,GAA6C,CACxD7iC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBACXC,gBAAiB,CACfzyB,OAAQ,CACN6uB,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHu/B,GAA2C,CACtD9iC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,eACXC,gBAAiB,CACfgI,SAAU,CACR5L,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,uBAGfkI,OAAQ,CACN7L,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aAGfmI,OAAQ,CACN9L,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,cAOH2/B,GAAuC,CAClDljC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACf/Q,SAAU,CACRmN,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0f,OAAQ,CACNgY,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV+Y,SAAU,CACR2e,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVmuB,QAAS,CACPuJ,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVouB,YAAa,CACXwF,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVquB,WAAY,CACVuF,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,OACN83B,cAAe,CAAC,KAAM,WAG1B8H,YAAa,CACXhM,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,oBAORtP,GAAmD,CAC9DxrB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,uBACXC,gBAAiB,CACftP,UAAW,CACT0L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVmoB,OAAQ,CACNyL,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVooB,qBAAsB,CACpBsP,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,yBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVqoB,qBAAsB,CACpBqP,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,yBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHsoB,GAAiD,CAC5D7rB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,qBACXC,gBAAiB,CACftP,UAAW,CACT0L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVmoB,OAAQ,CACNyL,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsN,QAAS,CACPsmB,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVuoB,IAAK,CACHqL,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHunB,GAA8C,CACzD9qB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBACXC,gBAAiB,CACfc,YAAa,CACX1E,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVynB,gBAAiB,CACfiQ,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,mBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVu4B,YAAa,CACX3E,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2nB,gBAAiB,CACf+P,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,mBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4nB,eAAgB,CACd8P,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,kBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV6nB,WAAY,CACV6P,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVgoB,UAAW,CACT4L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVw4B,YAAa,CACX5E,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBAOR9O,GAA+C,CAC1DhsB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBACXC,gBAAiB,CACftP,UAAW,CACT0L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVmoB,OAAQ,CACNyL,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVgoB,UAAW,CACT4L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0oB,MAAO,CACLgP,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHga,GAAqD,CAChEvd,KAAM,CACJuD,KAAM,YACNu3B,UAAW,yBACXC,gBAAiB,CACftP,UAAW,CACT0L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVmoB,OAAQ,CACNyL,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsN,QAAS,CACPsmB,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0oB,MAAO,CACLgP,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkL,OAAQ,CACN0oB,eAAgB,SAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBAGfvP,UAAW,CACT4L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVy4B,cAAe,CACb7E,eAAgB,iBAChBn3B,KAAM,CACJuD,KAAM,cAOH6/B,GAAoD,CAC/DpjC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,wBACXC,gBAAiB,CACftP,UAAW,CACT0L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVmoB,OAAQ,CACNyL,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV8nB,qBAAsB,CACpB8L,eAAgB,yBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,aAKd+nB,qBAAsB,CACpB6L,eAAgB,yBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,aAKdgoB,UAAW,CACT4L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0oB,MAAO,CACLgP,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsN,QAAS,CACPsmB,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,cAOH6oB,GAA8C,CACzDpsB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBACXC,gBAAiB,CACftP,UAAW,CACT0L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVmoB,OAAQ,CACNyL,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVooB,qBAAsB,CACpBsP,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,yBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVqoB,qBAAsB,CACpBqP,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,yBAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHwoB,GAA6C,CACxD/rB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBACXC,gBAAiB,CACftP,UAAW,CACT0L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVmoB,OAAQ,CACNyL,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsN,QAAS,CACPsmB,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVuoB,IAAK,CACHqL,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH+oB,GAAoD,CAC/DtsB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,wBACXC,gBAAiB,CACftP,UAAW,CACT0L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVmoB,OAAQ,CACNyL,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsN,QAAS,CACPsmB,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,cAOH2oB,GAAgD,CAC3DlsB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,oBACXC,gBAAiB,CACftP,UAAW,CACT0L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4oB,KAAM,CACJgL,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVgoB,UAAW,CACT4L,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0oB,MAAO,CACLgP,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH8/B,GAAoD,CAC/DrjC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,wBACXC,gBAAiB,CACf3J,OAAQ,CACN+F,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH+/B,GAA2C,CACtDtjC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,eACXC,gBAAiB,CACfzR,aAAc,CACZ6N,eAAgB,gBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHkT,GAA6C,CACxDzW,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBACXC,gBAAiB,CACf/Q,SAAU,CACRmN,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGV4jB,WAAY,CACVgQ,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV64B,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV+Y,SAAU,CACR2e,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVwmB,SAAU,CACRoN,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHka,GAA+C,CAC1Dzd,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBACXC,gBAAiB,CACf7iB,QAAS,CACPif,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVqG,KAAM,CACJutB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2R,UAAW,CACT+lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVumB,QAAS,CACPmR,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV64B,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV+Y,SAAU,CACR2e,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGVwmB,SAAU,CACRoN,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHggC,GAAyC,CACpDvjC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aACXC,gBAAiB,CACfjc,GAAI,CACFqY,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHigC,GAAyC,CACpDxjC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aACXC,gBAAiB,CACf7iB,QAAS,CACPif,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVqG,KAAM,CACJutB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2R,UAAW,CACT+lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV64B,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV+Y,SAAU,CACR2e,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGVwmB,SAAU,CACRoN,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVmpB,QAAS,CACPuO,YAAa,CACXoB,QAAS,IAAIvE,OAAO,2BAEtBX,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHkgC,GAAuC,CAClDzjC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACfpO,KAAM,CACJwK,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV64B,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV+Y,SAAU,CACR2e,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGVqpB,SAAU,CACRuK,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVub,GAAI,CACFqY,eAAgB,KAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBAORvR,GAA0C,CACrDvpB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cACXC,gBAAiB,CACfx3B,KAAM,CACJ4zB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVimB,SAAU,CACRyR,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkC,QAAS,CACPw1B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,WAChBn3B,KAAM,CAEJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV8lB,UAAW,CACT8N,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,cAOHmgC,GAAuC,CAClD1jC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACfrR,OAAQ,CACNyN,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH6lB,GAA6C,CACxDppB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBACXC,gBAAiB,CACfzR,aAAc,CACZ6N,eAAgB,gBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV8lB,UAAW,CACT8N,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,cAOHqmB,GAA2C,CACtD5pB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,eACXC,gBAAiB,CACfrR,OAAQ,CACNyN,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV8lB,UAAW,CACT8N,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,cAOHomB,GAA6C,CACxD3pB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBACXC,gBAAiB,CACfrR,OAAQ,CACNyN,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2lB,YAAa,CACXiO,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV8lB,UAAW,CACT8N,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,cAOHkmB,GAA2C,CACtDzpB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,eACXC,gBAAiB,CACfrR,OAAQ,CACNyN,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVolB,QAAS,CACPsS,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2d,SAAU,CACRiW,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBAKnBpS,UAAW,CACTuS,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV8lB,UAAW,CACT8N,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,cAOHogC,GAA0C,CACrD3jC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cACXC,gBAAiB,CACf1hB,KAAM,CACJ8d,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2V,KAAM,CACJ+hB,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVqgC,UAAW,CACT3I,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsgC,SAAU,CACR5I,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVugC,YAAa,CACX3M,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVwgC,QAAS,CACP5M,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVygC,cAAe,CACb/I,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,iBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV8wB,UAAW,CACT8C,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,WAGVo+B,YAAa,CACXxK,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,WAGVq+B,aAAc,CACZzK,eAAgB,gBAChBn3B,KAAM,CACJuD,KAAM,WAGV0gC,WAAY,CACV9M,eAAgB,cAChBn3B,KAAM,CACJuD,KAAM,WAGV2gC,OAAQ,CACN/M,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,cAOH2a,GAA6C,CACxDle,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBACXC,gBAAiB,CACf5b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV04B,UAAW,CACT9E,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBAGfzZ,SAAU,CACR8V,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,cAOH4a,GAA4C,CACvDne,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACf1Z,SAAU,CACR8V,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVgnB,MAAO,CACL4M,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVge,SAAU,CACR0Z,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV24B,SAAU,CACR/E,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,QAGfqB,YAAa,CACXhF,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBAGf3b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGVkd,SAAU,CACR0W,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,cAOH0a,GAA+C,CAC1Dje,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBACXC,gBAAiB,CACf9Q,YAAa,CACXkN,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2mB,eAAgB,CACdiN,eAAgB,kBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVge,SAAU,CACR0Z,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV04B,UAAW,CACT9E,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,QAGfzR,UAAW,CACT8N,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChBn3B,KAAM,CACJuD,KAAM,cAOH4gC,GAA8C,CACzDnkC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBACXC,gBAAiB,CACfnQ,QAAS,CACPuM,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsnB,SAAU,CACRsM,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV44B,YAAa,CACXhF,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBAGf3b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGV8d,SAAU,CACR8V,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,cAOHoa,GAA0C,CACrD3d,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cACXC,gBAAiB,CACflO,QAAS,CACPsK,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVub,GAAI,CACFqY,eAAgB,KAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBAORsJ,GAAwC,CACnDpkC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,YACXC,gBAAiB,CACfsJ,UAAW,CACTlN,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,uBAGfwJ,UAAW,CACTnN,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,uBAGfyJ,QAAS,CACPtJ,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHihC,GAAiD,CAC5DxkC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,qBACXC,gBAAiB,CACfuH,QAAS,CACPrH,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,WAGVg/B,SAAU,CACRtH,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,cAOHkhC,GAAiD,CAC5DzkC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,qBACXC,gBAAiB,CACf2J,SAAU,CACRzJ,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WAGVohC,WAAY,CACV1J,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,aAChBn3B,KAAM,CACJuD,KAAM,cAOHqhC,GAAoC,CAC/C5kC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,QACXC,gBAAiB,CACf8J,MAAO,CACL1N,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,aAKdghC,QAAS,CACPpN,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,gBASPuhC,GAAqC,CAChD9kC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,SACXC,gBAAiB,CACf3U,OAAQ,CACN+Q,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH0lB,GAAsC,CACjDjpB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,UACXC,gBAAiB,CACf7R,YAAa,CACXiO,eAAgB,eAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV4b,IAAK,CACH8b,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVkgB,IAAK,CACHwX,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,WAGVkd,SAAU,CACR0W,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4U,MAAO,CACL8iB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,WAGVsN,QAAS,CACPsmB,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHwhC,GAA0C,CACrD/kC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cACXC,gBAAiB,CACf/U,SAAU,CACRiV,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,WAGVuvB,UAAW,CACTmI,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChBn3B,KAAM,CACJuD,KAAM,WAGVyhC,gBAAiB,CACf/J,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,mBAChBn3B,KAAM,CACJuD,KAAM,WAGV0hC,OAAQ,CACNhK,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChBn3B,KAAM,CACJuD,KAAM,WAGVyvB,QAAS,CACPiI,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,WAGVq9B,cAAe,CACb3F,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,iBAChBn3B,KAAM,CACJuD,KAAM,WAGV2hC,eAAgB,CACdjK,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,kBAChBn3B,KAAM,CACJuD,KAAM,WAGV4hC,MAAO,CACLlK,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,cAOH6hC,GAAmD,CAC9DjO,eAAgB,uBAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,uBACX0B,WAAY,iBACZC,yBAA0BF,GAAev8B,KAAKy8B,yBAC9C1B,gBAAiB,IACZwB,GAAev8B,KAAK+6B,gBACvBvI,OAAQ,CACN2E,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVkvB,SAAU,CACR0E,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGV64B,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV+Y,SAAU,CACR2e,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVwmB,SAAU,CACRoN,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH8hC,GAA8C,CACzDlO,eAAgB,kBAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBACX0B,WAAY,iBACZC,yBAA0BF,GAAev8B,KAAKy8B,yBAC9C1B,gBAAiB,IACZwB,GAAev8B,KAAK+6B,gBACvBztB,KAAM,CACJ6pB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,cAOH+hC,GAAkD,CAC7DnO,eAAgB,sBAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,sBACX0B,WAAY,iBACZC,yBAA0BF,GAAev8B,KAAKy8B,yBAC9C1B,gBAAiB,IACZwB,GAAev8B,KAAK+6B,gBACvB1J,MAAO,CACL8F,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2R,UAAW,CACT+lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV6R,WAAY,CACV6lB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpB/D,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVqG,KAAM,CACJutB,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aAGfhR,QAAS,CACPmR,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,WAGVwmB,SAAU,CACRoN,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHgiC,GAA+C,CAC1DpO,eAAgB,mBAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBACX0B,WAAY,iBACZC,yBAA0BF,GAAev8B,KAAKy8B,yBAC9C1B,gBAAiB,IACZwB,GAAev8B,KAAK+6B,gBACvBztB,KAAM,CACJ6pB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV4uB,GAAI,CACFgF,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,cAOHiiC,GAAiD,CAC5DrO,eAAgB,qBAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,qBACX0B,WAAY,iBACZC,yBAA0BF,GAAev8B,KAAKy8B,yBAC9C1B,gBAAiB,IACZwB,GAAev8B,KAAK+6B,gBACvB5I,GAAI,CACFgF,eAAgB,KAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsD,OAAQ,CACNo0B,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CAEJuD,KAAM,cAOHkiC,GAAuD,CAClEzlC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,2BACXC,gBAAiB,IACZwI,GAAWvjC,KAAK+6B,gBACnB5T,WAAY,CACVgQ,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOT,IAAImiC,GAAiB,CAC1BnJ,eAAgBA,GAChB,sCAAuC6I,GACvC,iCAAkCC,GAClC,qCAAsCC,GACtC,kCAAmCC,GACnC,oCAAqCC,IC1zKhC,MAAMG,GAA6B,CACxCC,cAAe,SACf5O,OAAQ,CACNjP,aAAc,mBACd8U,YAAY,EACZ1F,eAAgB,SAChBn3B,KAAM,CACJuD,KAAM,YAKCsiC,GAA+B,CAC1CD,cAAe,QACf5O,OAAQ,CACNG,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVuiC,cAAc,GAGHrZ,GAAgC,CAC3CmZ,cAAe,SACf5O,OAAQ,CACNG,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,YAKCmP,GAA8B,CACzCkzB,cAAe,OACf5O,OAAQ,CACNG,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,YAKC0f,GAAgC,CAC3C2iB,cAAe,SACf5O,OAAQ,CACNiE,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpB/D,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,YAKCid,GAAoC,CAC/ColB,cAAe,CAAC,UAAW,YAC3B5O,OAAQ,CACNjP,aAAc,MACdoP,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,OACN83B,cAAe,CAAC,MAAO,iBAKhB93B,GAA8B,CACzCqiC,cAAe,OACf5O,OAAQ,CACNG,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,YAKCwiC,GAAkC,CAC7CH,cAAe,CAAC,UAAW,eAC3B5O,OAAQ,CACNjP,aAAc,mBACd8U,YAAY,EACZ1F,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,YAKC01B,GAA2B,CACtC2M,cAAe,OACf5O,OAAQgP,IAGGnY,GAA+B,CAC1C+X,cAAe,QACf5O,OAAQ,CACNiE,YAAa,CACXC,iBAAkB,GAEpB/D,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,YAKC0iC,GAAkC,CAC7CL,cAAe,WACf5O,OAAQ,CACNG,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,YAKC2iC,GAAqC,CAChDN,cAAe,CAAC,UAAW,QAC3B5O,OAAQ,CACNG,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,YAKC4iC,GAAiC,CAC5CP,cAAe,CAAC,UAAW,SAC3B5O,OAAQ,CACNjP,aAAc,GACdkT,YAAa,CACXE,iBAAkB,IAClBD,iBAAkB,GAEpB/D,eAAgB,QAChBn3B,KAAM,CACJuD,KAAM,YAKC6iC,GAAqC,CAChDR,cAAe,CAAC,UAAW,QAC3B5O,OAAQ,CACNjP,aAAc,MACdoP,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,OACN83B,cAAe,CAAC,OAAQ,SAAU,UAK3BzQ,GAAiC,CAC5Cgb,cAAe,UACf5O,OAAQ,CACNG,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,YAKC8iC,GAA4B,CACvCT,cAAe,OACf5O,OAAQsP,IClGH,MAAMC,WAAaC,GAAAA,GAQxBrjC,WAAAA,CAAY0iC,EAAer6B,GAA8B,IAAA+W,EAAAkkB,EACvD,QAAcv6B,IAAV25B,EACF,MAAM,IAAI3iC,MAAM,0BAIbsI,IACHA,EAAU,CAAC,GAEb,MAAMk7B,EAA+B,CACnCC,mBAAoB,mCAGhBC,EAAiB,6BACjBC,EACJr7B,EAAQs7B,kBAAoBt7B,EAAQs7B,iBAAiBD,gBACjD,GAAGr7B,EAAQs7B,iBAAiBD,mBAAmBD,IAC/C,GAAGA,IAEHG,EAAsB,IACvBL,KACAl7B,EACHs7B,iBAAkB,CAChBD,mBAEFG,SAA6C,QAArCzkB,EAAkB,QAAlBkkB,EAAEj7B,EAAQw7B,gBAAQ,IAAAP,EAAAA,EAAIj7B,EAAQy7B,eAAO,IAAA1kB,EAAAA,EAAI,WAEnDlf,MAAM0jC,GAENzjC,KAAKuiC,MAAQA,CACf,CAOA1hB,kBAAAA,CACEsI,EACAjhB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQjhB,WACV27B,GAEJ,CASAjjB,yBAAAA,CACEuI,EACA/Z,EACAlH,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQ/Z,OAAMlH,WAChB47B,GAEJ,CAQAnjB,2BAAAA,CACEwI,EACAxJ,EACAzX,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQxJ,SAAQzX,WAClB67B,GAEJ,CAQA3mB,mBAAAA,CACE+L,EACAjhB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQjhB,WACV87B,GAEJ,CAOAC,qCAAAA,CACE9a,EACAjhB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQjhB,WACVg8B,GAEJ,CAOAC,qBAAAA,CACElkC,EACAiI,GAEA,OAAOlI,KAAK4jC,qBACV,CAAE3jC,OAAMiI,WACRk8B,GAEJ,CAOAC,kBAAAA,CACElb,EACAjhB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQjhB,WACVo8B,GAEJ,CAOAvgB,WAAAA,CACEoF,EACAjhB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQjhB,WACVq8B,GAEJ,CAOAzgB,eAAAA,CACEqF,EACAjhB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQjhB,WACVs8B,GAEJ,CAOAC,cAAAA,CACEtb,EACAjhB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQjhB,WACVw8B,GAEJ,CAMAC,WAAAA,CACEz8B,GAEA,OAAOlI,KAAK4jC,qBAAqB,CAAE17B,WAAW08B,GAChD,CAUAtiB,kBAAAA,CACEqT,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACR28B,GAEJ,CAMA3jB,oBAAAA,CACEhZ,GAEA,OAAOlI,KAAK4jC,qBACV,CAAE17B,WACF48B,GAEJ,CAOAxjB,mBAAAA,CACElS,EACAlH,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEx0B,OAAMlH,WACR68B,GAEJ,CAOA1jB,qBAAAA,CACE1B,EACAzX,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjkB,SAAQzX,WACV88B,GAEJ,CAMAC,YAAAA,CACE/8B,GAEA,OAAOlI,KAAK4jC,qBAAqB,CAAE17B,WAAWg9B,GAChD,CAMAC,kBAAAA,CACEj9B,GAEA,OAAOlI,KAAK4jC,qBACV,CAAE17B,WACFk9B,GAEJ,CAMAC,sBAAAA,CACEn9B,GAEA,OAAOlI,KAAK4jC,qBACV,CAAE17B,WACFo9B,GAEJ,CAMA1lB,wBAAAA,CACE1X,GAEA,OAAOlI,KAAK4jC,qBACV,CAAE17B,WACFq9B,GAEJ,CAOA3jB,iBAAAA,CACExS,EACAlH,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEx0B,OAAMlH,WACRs9B,GAEJ,CAOA7jB,mBAAAA,CACEhC,EACAzX,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjkB,SAAQzX,WACVu9B,GAEJ,CAMAC,kBAAAA,CACEx9B,GAEA,OAAOlI,KAAK4jC,qBACV,CAAE17B,WACFy9B,GAEJ,CAOA7jB,yBAAAA,CACE1S,EACAlH,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEx0B,OAAMlH,WACR09B,GAEJ,CAOApkB,+BAAAA,CACEpS,EACAlH,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEx0B,OAAMlH,WACR29B,GAEJ,CAOAC,oCAAAA,CACE12B,EACAlH,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEx0B,OAAMlH,WACR69B,GAEJ,CAQAC,sCAAAA,CACE52B,EACAmb,EACAriB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEx0B,OAAMmb,QAAOriB,WACf+9B,GAEJ,CAOAhiB,kBAAAA,CACEhkB,EACAiI,GAEA,OAAOlI,KAAK4jC,qBACV,CAAE3jC,OAAMiI,WACRg+B,GAEJ,CAOAC,sBAAAA,CACExD,EACAz6B,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjB,WAAUz6B,WACZk+B,GAEJ,CAOApoB,iBAAAA,CACEmL,EACAjhB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQjhB,WACVm+B,GAEJ,CAOAC,wBAAAA,CACEnd,EACAjhB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQjhB,WACVq+B,GAEJ,CAQAC,gCAAAA,CACErd,EACA7B,EACApf,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEza,SAAQ7B,UAASpf,WACnBu+B,GAEJ,CAMAC,aAAAA,CACEx+B,GAEA,OAAOlI,KAAK4jC,qBAAqB,CAAE17B,WAAWy+B,GAChD,CAMAxtB,kBAAAA,CACEjR,GAEA,OAAOlI,KAAK4jC,qBACV,CAAE17B,WACF0+B,GAEJ,CAMAC,SAAAA,CAAU3+B,GACR,OAAOlI,KAAK4jC,qBAAqB,CAAE17B,WAAW4+B,GAChD,CAMAC,YAAAA,CACE7+B,GAEA,OAAOlI,KAAK4jC,qBAAqB,CAAE17B,WAAW8+B,GAChD,CAMAC,aAAAA,CACE/+B,GAEA,OAAOlI,KAAK4jC,qBAAqB,CAAE17B,WAAWg/B,GAChD,CAOAC,eAAAA,CACExR,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACRk/B,GAEJ,CAOAnnB,oBAAAA,CACE7Q,EACAlH,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEx0B,OAAMlH,WACRm/B,GAEJ,CAMAC,wBAAAA,CACEl4B,EACAlH,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEx0B,OAAMlH,WACRq/B,GAEJ,EAGF,MAAM/T,GAAaD,GAAiBiU,GAAqB,GAEnD3D,GAA4D,CAChErX,KAAM,wBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEIsQ,GAAmE,CACvEtX,KAAM,oCACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,GAAmBA,IACrDC,iBAAkB,CAACD,IACnBtU,eAEIuQ,GAAqE,CACzEvX,KAAM,wCACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,GAAmBA,IACrDC,iBAAkB,CAACD,IACnBtU,eAEIwQ,GAA6D,CACjExX,KAAM,mCACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbI,gBAAiB,CAACF,IAClBD,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEI0Q,GACJ,CACE1X,KAAM,6CACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEE4Q,GAA+D,CACnE5X,KAAM,sBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEI8Q,GAA4D,CAChE9X,KAAM,wBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEI+Q,GAAqD,CACzD/X,KAAM,yBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEIgR,GAAyD,CAC7DhY,KAAM,8BACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEIkR,GAAwD,CAC5DlY,KAAM,6BACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEIoR,GAAqD,CACzDpY,KAAM,eACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,KAGhBK,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEIqR,GAA4D,CAChErY,KAAM,cACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAmBA,IACtCI,UAAW,OACX1U,eAEIsR,GAA8D,CAClEtY,KAAM,0BACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEIuR,GAA6D,CACjEvY,KAAM,8BACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEIwR,GAA+D,CACnExY,KAAM,kCACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEI0R,GAAsD,CAC1D1Y,KAAM,kBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEI4R,GAA4D,CAChE5Y,KAAM,yBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEI8R,GAAgE,CACpE9Y,KAAM,8BACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEI+R,GAAkE,CACtE/Y,KAAM,gCACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEIgS,GAA2D,CAC/DhZ,KAAM,6BACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEIiS,GAA6D,CACjEjZ,KAAM,iCACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEImS,GAA4D,CAChEnZ,KAAM,yBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEIoS,GAAmE,CACvEpZ,KAAM,sCACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEIqS,GAAyE,CAC7ErZ,KAAM,4CACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEIuS,GACJ,CACEvZ,KAAM,kDACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEEyS,GACJ,CACEzZ,KAAM,0DACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,GAAiBA,IACnDC,iBAAkB,CAACD,IACnBtU,eAEE0S,GAA4D,CAChE1Z,KAAM,mBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEI4S,GAAgE,CACpE5Z,KAAM,6BACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEI6S,GAA2D,CAC/D7Z,KAAM,uBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEI+S,GAAkE,CACtE/Z,KAAM,+BACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbI,gBAAiB,CACfF,GACAA,GACAA,IAEFD,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEIiT,GACJ,CACEja,KAAM,0CACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,GAAmBA,IACrDC,iBAAkB,CAACD,IACnBtU,eAEEmT,GAAuD,CAC3Dna,KAAM,mBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,KAGhBK,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEIoT,GAA4D,CAChEpa,KAAM,wBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACVjrC,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CAAE17B,KAAM,CAAEuD,KAAM,YAAau3B,UAAW,qBAIvD,IAAK,CACHmQ,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEIsT,GAAmD,CACvDta,KAAM,aACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,KAGhBK,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEIwT,GAAsD,CAC1Dxa,KAAM,wBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACVjrC,KAAM,CAAEuD,KAAM,WAAYm4B,QAAS,CAAE17B,KAAM,CAAEuD,KAAM,eAIzD4nC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEI0T,GAAuD,CAC3D1a,KAAM,kBACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,eAEI4T,GAAyD,CAC7D5a,KAAM,mBACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAmBA,IACtCI,UAAW,OACX1U,eAEI6T,GAA8D,CAClE7a,KAAM,0BACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,eAEI+T,GAAkE,CACtE/a,KAAM,+BACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnBtU,e,0YCl4C+B,IAAA2U,GAAA,IAAA3gC,QASlB,MAAMy7B,WAAamF,GAQhCvoC,WAAAA,CACE61B,GACA,cACE2S,GAAgB,EAAK,WAAE7R,EAAa,EAAC,kBAAEC,EAAoB,OAAQvuB,GAKjE,CAAC,GAEL,MAAMogC,EAAap/B,gBACVlJ,KAAKuoC,iBAAiBC,IAAOnK,YAGtCt+B,MAAM21B,EAAK,CACT+S,yBAAyB,EACzBC,mBAAoB,IACfL,EAAgB,GAAK,CAACnS,GAAsB,OAAQoS,EAAY,QAAS,UAC5E1T,KACAQ,KACAmB,GAAwBC,EAAYC,GACpCV,IAAyBJ,GAAqB,CAC5C,IAAKA,EAAKzS,OAA0B,MAAlByS,EAAKsC,UAAoB,GAAK,KAAKtC,EAAKsC,cAC1D72B,KAAK,UAEN8G,IASPC,GAAA,KAAAggC,QAAoB,GAPlBnoC,KAAK2oC,SAASC,UAAU1U,GAAmB,CAAE2U,MAAO,gBACpD7oC,KAAK2oC,SAASG,aAAa,CAAE7oC,KAAM8oC,GAAAA,KACnC/oC,KAAK2oC,SAASG,aAAa,CAAE7oC,KAAM+oC,GAAAA,KAEnChpC,KAAK2oC,SAASG,aAAa,CAAE7oC,KAAM,sBACrC,CAIA,sBAAMsoC,CAAiBrgC,GACrB,OAAiC,MAA7BM,GAAK2/B,GAALnoC,MAA0CwI,GAAK2/B,GAALnoC,MACvCA,KAAK6mC,UAAU3+B,EACxB,CAEA,eAAe2+B,IACVrpC,GAEH,MAAMyrC,EAAUlpC,MAAM8mC,aAAarpC,GAEnC,OADAyrC,EAAQ/T,MAAK,KAAQ9sB,GAAK+/B,GAALnoC,KAA4BipC,EAAH,IAAe,SACtDA,CACT,CAMA,kBAAM3pB,GACJ,aAActf,KAAKuoC,oBAAoBxX,SACzC,CAEA,iBAAMle,GACJ,MAAM,YACJwrB,EACAtN,UAAWmY,EAAa,UACxB9K,EAAS,eACTQ,SACQ5+B,KAAK6mC,YAETr0B,EAA2B4rB,EAC9B9lB,QAAO,EAAGwmB,uBAAwBF,GAAkBE,IACpD3L,QACC,CAACC,EAAK/O,IAAOA,EAAEya,kBAAoB1L,EAAI0L,kBAAoBza,EAAI+O,GAC/D,CAAE0L,mBAAoB,EAAGr9B,QAAS,IAEnCA,QACH,GAA0D,MAAtD6P,GAAyBkB,GAAmC,CAC9D,MAAM/Q,EAAU+Q,EAAyBnQ,WACnC8mC,EAAW1/B,OAAO4O,OAAO/G,IAC5BgH,QAAQjO,GAAqB,kBAAPA,IAAiBvG,KAAKuG,IAAQA,IACjD3I,EAAY4U,KAAKC,OAAO4yB,GAAU9mC,WAClCV,GAAa2U,KAAK0J,OAAOmpB,GAAY,GAAG9mC,WAC9C,MAAM,IAAId,EAAwB,qBAAsBE,EAASC,EAAWC,EAC9E,CAEA,MAAO,CACL+zB,IAAK11B,KAAKuiC,MACV2G,gBACAznC,QAAS48B,EACT7rB,2BAEJ,ECxGa,SAAS42B,GACtBhmC,GAEA,MAAMmP,EAAS8I,GAASjY,GACxB,OAAQmP,EAAO3N,KACb,KAAK6M,GAAIuT,SACP,OAAOokB,GAA4B9tB,GAAQ/I,EAAOkJ,YACpD,KAAKhK,GAAI2B,SACP,OAAOb,EAAO8W,KAChB,SAGF,MAAMxU,EAAQ8U,GAAUpX,EAAO3N,IAAK2N,EAAO9Q,SAASkF,MAAK,EAAE1G,KAAmB,UAATA,MAAoB,GACzF,GAAa,MAAT4U,EAAe,MAAM,IAAIpU,EAAiB,mCAAmCgR,GAAIc,EAAO3N,QAC5F,KAAM,cAAeiQ,GAAQ,MAAM,IAAIhT,EACvC,MAAM1D,EAAUoU,EAAOsC,EAAMoI,WAC7B,OAAO9e,EAAQie,QAAQ,OAAQ,MACjC,CCWO,SAASitB,GACdjmC,GACA,QACE4tB,EAAO,QAAE5C,EAAO,SAAEnQ,EAAQ,YAAEqrB,GAM1B,CAAC,GAEL,MAAM/2B,EAAS8I,GAASjY,GACxB,GAAImP,EAAO3N,MAAQ6M,GAAIuT,SACrB,MAAM,IAAIjkB,EAAqB,iFAGjC,IAAI0d,EAAM,GAsCV,MArCI,QAASlM,GAAsB,eAAZye,IACrBvS,GAAOrF,OAAO7G,EAAOsJ,MAEnBtJ,EAAO3N,MAAQ6M,GAAIwU,cACrBxH,GAAOrF,OAAO7G,EAAOpQ,UAEnBoQ,EAAO3N,MAAQ6M,GAAIoJ,gBACrB4D,GAAOrF,OAAO7G,EAAO0L,WAEnB1L,EAAO3N,MAAQ6M,GAAIqJ,mBACrB2D,GAAOrF,OAAe,OAAR6E,QAAQ,IAARA,EAAAA,EAAY,IAExB1L,EAAO3N,MAAQ6M,GAAIqX,mBACD,IAAhBwgB,IAAsB7qB,GAAOrF,OAAO7G,EAAO8V,wBAC3B,IAAhBihB,IAAuB7qB,GAAOrF,OAAO7G,EAAO+V,yBAG9C/V,EAAO3N,MAAQ6M,GAAIkU,SAAWpT,EAAO4K,WAAa5K,EAAOqT,aACxDrT,EAAO3N,MAAQ6M,GAAI0I,kBAAoB5H,EAAO3N,MAAQ6M,GAAI0B,gBAC1DZ,EAAO3N,MAAQ6M,GAAIiX,mBAAiC,cAAZsI,IAE3CvS,GAAOrF,OAAO7G,EAAOhP,SAEnBgP,EAAO3N,MAAQ6M,GAAI0I,mBAAkBsE,GAAOrF,OAAO7G,EAAOiU,UAE3DjU,EAAO3N,MAAQ6M,GAAI0I,kBAAoB5H,EAAO3N,MAAQ6M,GAAI0B,gBACtDZ,EAAO3N,MAAQ6M,GAAI2I,YAAc7H,EAAO3N,MAAQ6M,GAAI2B,UAC1C,eAAZ4d,IAEHvS,GAAOrF,OAAO7G,EAAOyG,UAAYI,OAAc,OAAPgV,QAAO,IAAPA,EAAAA,EAAW7b,EAAOoK,WAExDpK,EAAO3N,MAAQ6M,GAAI2B,UAAYb,EAAO3N,MAAQ6M,GAAI4I,cACpDoE,GAAO4qB,GACL/tB,GAAQ/I,EAAOiJ,GAAGC,WAClBlJ,EAAO3N,MAAQ6M,GAAI4I,YAAc,CAAE2W,QAAS,aAAgB,CAAC,IAG1DvS,CACT,CAQO,SAAS8qB,GACdnmC,EACA2tB,EACA7oB,GAEA,MAAMqK,EAAS8I,GAASjY,EAAaqO,GAAIuT,UACzC,GAAIzS,EAAOkJ,UAAU7W,MAAQ6M,GAAI2B,SAC/B,OAAOi2B,GAAiB/tB,GAAQ/I,EAAOkJ,WAAYvT,GAGrD,MAAMsT,EAAKF,GAAQ/I,EAAOkJ,WACpBtd,EAAUirC,GAA4B5tB,IACrCguB,EAAWC,GAAgB,EAAC,GAAM,GACtC3lC,KAAK4lC,GAAMr6B,GAAOyhB,GAAgBtV,EAAIuV,EAAW2Y,GAAIn3B,EAAOkT,WAAW,GAAItnB,KAC9E,IAAKqrC,IAAcC,EAAc,MAAM,IAAIhpC,EAAiB,0BAC5D,OAAO4oC,GACL/tB,GAAQ/I,EAAOkJ,WACf,IAAK+tB,GAAa,CAAExY,QAAS,iBAAmB9oB,GAEpD,CASOgB,eAAeygC,GACpBvmC,EACAsV,GACA,QAAEkxB,KAAY1hC,GAA4E,CAAC,GAE3F,IAAIqK,EAAS8I,GAASjY,GACtB,MAAMymC,EAAat3B,EAAO3N,MAAQ6M,GAAIuT,SAChChgB,EAAS6kC,IAA0B,IAAZD,GAAoBlZ,GAAYttB,GAI7D,GAHImP,EAAO3N,MAAQ6M,GAAIuT,WAAUzS,EAASA,EAAOkJ,WAI5B,MAAnBvT,EAAQkmB,UAA8B,IAAXppB,GACxB,CAACyM,GAAI0I,iBAAkB1I,GAAI0B,eAAgB1B,GAAI2I,WAAY3I,GAAI2B,UAAU1I,SAAS6H,EAAO3N,KAC5F,CACA,MAAM,SAAE66B,EAAQ,OAAEC,SAAiBhnB,EAAK4uB,yBAAyBtiC,GAC3D8kC,EAAuB,OAARrK,QAAQ,IAARA,EAAAA,EAAYC,EACjC,GAAoB,MAAhBoK,EACF,MAAM,IAAIloC,EAAc,wDAAwDoD,KAElFkD,EAAQkmB,QAAU0b,EAAa1b,OACjC,CAMA,GAJwB,MAApBlmB,EAAQ+V,UAAoBxM,GAAIqJ,mBAAqBvI,EAAO3N,MAC9DsD,EAAQ+V,gBAAkBvF,EAAKsF,kBAAkBzL,EAAOwL,WAAWE,SAAS5b,YAGnD,MAAvB6F,EAAQohC,aAAuB73B,GAAIqX,kBAAoBvW,EAAO3N,MAAmB,IAAZglC,EAAkB,CACzF,MAAM,YAAErR,SAAsB7f,EAAK2rB,mBAAmB9xB,EAAO4V,WAC7DjgB,EAAQohC,YAAc/2B,EAAO6V,SAAWmQ,CAC1C,CAEA,OAAOsR,EACHN,GAA2BnmC,QAAmBsV,EAAK4G,eAAgBpX,GACnEmhC,GAAiBjmC,EAAa8E,EACpC,C,oBCjIM6hC,GAA0B,GAEhC7gC,eAAe8gC,GACbxuB,EACA9C,EACAuxB,GAEA,MAAM9rC,EAAUirC,GAA4B9tB,GAAQE,KAC7C0uB,GAAS,OAAEvqB,IAAU,yBAAEnN,EAAwB,cAAE02B,UAAyB//B,QAAQsnB,IAAI,CAC3F/X,EAAKmI,mBAAmB1iB,GACrBkf,OAAOpT,IACN,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAExN,GAAI0B,EAAS8iB,QAAS,GAAIpM,MAAO,EAAG,IAG9CqgB,MAAM9B,IAAG,IAAWA,EAAK32B,GAAI22B,EAAI32B,OACpCic,EAAKkH,2BACLlH,EAAK7F,gBAGP,aAAc1J,QAAQsnB,IACpBsZ,GAAWjmC,KAAIoF,SAAaqP,EAC1BiD,EACA,CACE9C,OAAMwxB,UAASvqB,SAAQnN,2BAA0B02B,gBAAee,sBAGnEE,MACL,CAYejhC,eAAekhC,GAC5BhnC,EACAinC,GAEA,MAAM1B,EAAW0B,EAAc1B,SAAS2B,QACxC3B,EAASG,aAAa,CAAE7oC,KAAM,kBAC9B,MAAMyY,EAAO,IAAIuqB,GAAKoH,EAAc9H,MAAO,CACzC8F,eAAe,EACfM,WACAD,mBAAoB,CAAC9S,QAEvB,OAAOoU,GAA0B3uB,GAASjY,GAAcsV,EAAM,GAChE,CAEAqxB,GAAWhjC,MACT,CAACyU,GAAM0uB,UAAShB,gBAAee,oBAC7B,GAAIzuB,EAAG5W,MAAQ6M,GAAIuT,SAAU,MAAO,GACpC,MAAM,UAAEvJ,EAAS,WAAEgK,GAAejK,EAClC,GAAiC,OAAnB,OAATC,QAAS,IAATA,EAAAA,EAAagK,GAAqB,MAAO,GAC9C,GAA0B,IAAtBA,EAAWpY,OAAc,MAAO,GACpC,MAAMpL,EAAS4H,GAAOG,KAAK,CACzBk/B,KACGe,EAAcv/B,SAAS+G,GAAI4I,aAAe,CAAC,YAAc,IAC5DjZ,KAAK,MACDmpC,EAAWx8B,GAAOuN,GAAQG,IAC1BmW,EAAkB1nB,GAAc,CAACjI,EAAQsoC,IACzCC,EAAsBtgC,GAAc,CAACjI,EAAQmN,GAAKm7B,KACxD,OAAIl7B,GAAOuiB,EAAiBnM,EAAW,GAAIykB,EAAQztC,KAC9C4S,GAAOm7B,EAAqB/kB,EAAW,GAAIykB,EAAQztC,IAAY,GAC7D,CAAC,CACNqD,QAAS,8IAETb,IAAK,mBACLwrC,YAAa,CAAC,YAAa,eAC3B,IAEJvhC,MAAOsS,GAAM9C,OAAMuxB,oBACjB,IAAIS,EAGJ,MAFI,cAAelvB,IAAIkvB,EAAWlvB,EAAGC,WACjC,OAAQD,IAAIkvB,EAAWlvB,EAAGA,IACd,MAAZkvB,EAAyB,GACtBV,GAA0BU,EAAUhyB,EAAM,IAAIuxB,EAAezuB,EAAG5W,KAAK,IAE9E,CAAC4W,GAAMmE,YACC,QAASnE,EACA,IAAXA,EAAG2E,KAAa3E,EAAG2E,IAAMR,EAAe,GACrC,CAAC,CACN7f,QAAS,OAAO0b,EAAG2E,6CAA6CR,IAChE1gB,IAAK,aACLwrC,YAAa,CAAC,SALW,KAQ7BvhC,MAAOsS,GAAM0uB,UAASD,gBAAevxB,WACnC,GAA6B,IAAzBuxB,EAAc58B,OAAc,MAAO,GACvC,MAAMs9B,QAAahB,GAA0BruB,GAAQE,GAAK9C,GAAM2E,OAAM,IAAM,KAC5E,OAAIstB,GAAQT,EAAQjpB,QAAgB,GAC7B,CAAC,CACNnhB,QAAS,mBAAmBoqC,EAAQjpB,+DAA+D0pB,IACnG1rC,IAAK,sBACLwrC,YAAa,CAAC,SAAU,MAAO,UAAW,WAAY,aACtD,IAEJvhC,MAAOsS,GAAM9C,WACX,GAAI8C,EAAG5W,MAAQ6M,GAAIkU,SAAW3W,GAAewM,EAAGoK,YAAa7a,GAASkC,MAAO,MAAO,GACpF,MAAM29B,QAAkBlyB,EAAKmI,mBAAmBrF,EAAGoK,aAAavI,OAAOpT,IACrE,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,OAAO,IAAI,IAEb,OAAiB,MAAb2gC,IAA2C,IAAtBA,EAAU9S,QAAyB,GACrD,CAAC,CACNh4B,QAAS,mCACTb,IAAK,6BACLwrC,YAAa,CAAC,gBACd,IAEJ,CAACjvB,GAAM0uB,cACL,IAAIpqC,EAOJ,OANI0b,EAAG5W,MAAQ6M,GAAIuT,UAA6B,gBAAjBklB,EAAQh3B,MAAmD,IAAzBsI,EAAGiK,WAAWpY,SAC7EvN,EAAU,0EAER0b,EAAG5W,MAAQ6M,GAAI2B,UAA6B,UAAjB82B,EAAQh3B,OACrCpT,EAAU,oDAEG,MAAXA,EAAwB,GACrB,CAAC,CAAEA,UAASb,IAAK,qBAAsBwrC,YAAa,CAAC,QAAS,IAIvE,CAACjvB,GAAMhJ,+BAA+B,IAAAyM,EAAA4rB,EACpC,MAAMC,EAAar5B,GAAIkJ,mBAAqBa,EAAG5W,IACzCmmC,EAAiBt5B,GAAI0I,mBAAqBqB,EAAG5W,KAAO6M,GAAI2I,aAAeoB,EAAG5W,IAC1EomC,EAAev5B,GAAI0B,iBAAmBqI,EAAG5W,KAAO6M,GAAI2B,WAAaoI,EAAG5W,IACpElI,EACyC,QADrCuiB,EAAqC,QAArC4rB,EAAIC,EAAa,cAAgB,YAAI,IAAAD,EAAAA,EACzCE,EAAiB,kBAAoB,YAAI,IAAA9rB,EAAAA,EACzC+rB,EAAe,gBAAkB,KACvC,GAAY,MAARtuC,EAAc,MAAO,GACzB,MAAM0V,EAAWV,GAAgBc,GAA0B9V,GAK3D,IAAI6pB,EAGJ,GAFI,eAAgB/K,IAAI+K,EAAY,CAAEzU,WAAY0J,EAAG1J,aACjD,cAAe0J,IAAI+K,EAAY/K,EAAG+K,WACrB,MAAbA,EAAmB,MAAM,IAAI1kB,EACjC,OACGuQ,EAASN,WAAWpH,SAAS6b,EAAUzU,aACpCi5B,IAAmB34B,EAASR,UAAUlH,SAAS6b,EAAU3U,WAEtD,CAAC,CACN9R,QAAS,kBAAkB01B,KAAKC,UAAUlP,8BAAsCiP,KAAKC,UAAUrjB,KAC/FnT,IAAK,0BACLwrC,YAAa,CAAC,YAAa,gBAGxB,EAAE,IAEXvhC,MAAOsS,GAAM9C,WACX,GAAIjH,GAAI0B,iBAAmBqI,EAAG5W,IAAK,MAAO,GAE1C,GAAI4W,EAAGqI,WAAW5L,WAAW,OAAQ,MAAO,GAC5C,IACE,MAAM,OAAE+V,SAAiBtV,EAAKqL,YAAYvI,EAAGqI,YAC7C,OAAImK,EAAe,GACZ,CAAC,CACNluB,QAAS,YAAY0b,EAAGqI,2BACxB5kB,IAAK,oBACLwrC,YAAa,CAAC,eAElB,CAAE,MAAOxgC,GACP,KAAMA,aAAiBW,GAAAA,KAA4C,MAA9BX,EAAMsd,UAAU+M,WAAoB,MAAMrqB,EAC/E,MAAO,CAAC,CACNnK,QAAS01B,KAAKyV,MAAMhhC,EAAMsd,SAAS+M,YAAYpR,OAC/CjkB,IAAK,mBACLwrC,YAAa,CAAC,eAElB,KCrMG,MAAMS,WAAuBzqC,EAKlCZ,WAAAA,CACEC,EACAqrC,EACA/nC,GAEArD,MAAMD,GACNE,KAAKC,KAAO,iBACZD,KAAKmrC,WAAaA,EAClBnrC,KAAKoD,YAAcA,CACrB,EAUK8F,eAAekiC,GACpBC,GACA,OACEz4B,EAAM,UAAE04B,EAAS,OAAEj8B,GAAS,EAAI,UAAEk8B,GAAY,EAAI,QAAE/qB,EAAO,QAAEwQ,KAAY9oB,IAI3E,MAAMsT,QAAW8vB,EAAU3Z,gBAAgB0Z,EAAY,IAClDnjC,EACH0K,SACAoe,UACAD,gBAAiBne,EAAO0M,iBAG1B,IAAgB,IAAZ0R,EAAkB,MAAO,CAAE5hB,KAAMshB,GAAYlV,GAAKmV,MAAOnV,GAE7D,GAAInM,EAAQ,CACV,MAAM87B,QAAmBf,GAAkB5uB,EAAI5I,GAC/C,GAAIu4B,EAAW99B,OAAS,EAAG,CACzB,MAAMvN,EAAU,oCACdqrC,EAAWrnC,KAAKyU,GAA2BA,EAAEzY,UAASsB,KAAK,QAC7D,MAAM,IAAI8pC,GAAeprC,EAASqrC,EAAY3vB,EAChD,CACF,CAEA,IACE,IAAIgwB,EACJ,IACEA,EAAuB,MAAbF,EAAoB,MAAMA,EAAUntC,UAAY,IAC5D,CAAE,MAAO8L,GACPuhC,EAAU,IACZ,CACA,MAAM,OAAExmC,SAAiB4N,EAAOu0B,gBAAgB,CAAE3rB,MAAM,CACtD6a,eAAgB,CACdC,cAAe,CAEb,eAAgB,SACF,MAAXkV,EAAkB,CAAEA,WAAY,CAAC,MAK1C,GAAID,EAAW,CACb,MAAME,QAAmB5rB,GAAK7a,EAAQ,CAAE4N,YAAW1K,IAC7CwjC,EAAS,IACVD,EACHr8B,KAAMq8B,EAAWr8B,KACjBuhB,MAAOnV,GAGT,GAAe,MAAXgF,IAAoBA,EAAU,EAAG,CACnC,MAAMvN,EAAuB,mBAAZuN,OAAwB5X,EAAY4X,EACrD,MAAO,IACFkrB,EACHC,yBAA0BprB,GAAiBvb,EAAQ,CAAE4N,SAAQ4N,QAASvN,KAAM/K,IAEhF,CACA,OAAOwjC,CACT,CACA,MAAO,CAAEt8B,KAAMpK,EAAQ2rB,MAAOnV,EAChC,CAAE,MAAOvR,GAEP,MADAa,GAAYb,GACNR,OAAO4Z,OAAOpZ,EAAO,CACzB0mB,MAAOnV,EACPowB,SAAU1iC,SAAYkhC,GAAkB5uB,EAAI5I,IAEhD,CACF,CCrFO1J,eAAe2iC,GACpBtoC,EACAuoC,EACA5jC,GAEA,OAAOkjC,SACC5a,GAAa,CACjBjM,kBAAkB,KACfrc,EACHtD,IAAK6M,GAAIkU,QACTxI,SAAUjV,EAAQojC,UAAUntC,QAC5BynB,kBAAmB1B,GACjB4nB,EACA,iBACA5jC,GAEF3E,WAEF2E,EAEJ,CAwBOgB,eAAe6iC,GACpBC,EACAF,EACA5jC,GAEA,IAAK8jC,EAAW,IAAMA,EAAW,EAC/B,MAAM,IAAIrrC,EAAc,WAAY,2BAA4BqrC,GAElE,MAAMpmB,QAAoB1B,GACxB4nB,EACA,iBACA5jC,GAEIiV,EAAWjV,EAAQojC,UAAUntC,QAC7B8iB,EAAU,IAAI7P,GAAAA,QACZ0P,GAAWnC,KAAKzW,EAAQojC,UAAxBxqB,CAAmC3D,EAAUjV,IAE/C+jC,EAAgBhrB,EAAQ5P,MAAM26B,GAAU3yB,aAAajI,GAAAA,EAAU86B,gBAC/D,IAAErwB,GAAQR,SACRmV,GAAa,CACjBjM,kBAAkB,KACfrc,EACHtD,IAAK6M,GAAIkU,QACTxI,WACAyI,cACAriB,OAAQ0oC,IAEVx6B,GAAIkU,SAGApiB,EAAS0oC,EAAcE,KAAKtwB,GAAKQ,GAAG4E,GAAWA,EAAQmrB,MAAMvwB,GAAOowB,EAC1E,OAAOb,SACC5a,GAAa,CACjBjM,kBAAkB,KACfrc,EACHtD,IAAK6M,GAAIkU,QACTxI,WACAyI,cACAriB,WAEF2E,EAEJ,CAaOgB,eAAemjC,GACpBjpC,EACA8E,GAEA,OAAOkjC,SACC5a,GAAa,CACjBjM,kBAAkB,KACfrc,EACHtD,IAAK6M,GAAI4I,YACTkP,QAASrhB,EAAQojC,UAAUntC,QAC3Bqd,GAAIpY,IAEN8E,EAEJ,C,4aC7H+D,MAAAokC,QAAAC,IAAAz8B,GAsC5B,IAAA08B,GAAA,IAAAphB,QAAAqhB,GAAA,IAAAjlC,QAkFnC,MAAM0lB,GAKJ,cAAMwf,GACJ,GAA8B,MAA1B1sC,KAAKvC,SAAS08B,SAAkB,OAAOn6B,KAAKvC,SAAS08B,SACzD,GAAgC,MAA5Bn6B,KAAKvC,SAASkvC,WAAoB,MAAM,IAAI5rC,EAAqB,kCACrE,GAAgC,MAA5Bf,KAAKvC,SAASmvC,WAAoB,CACpC,MAAM,SAAEzS,SAAmBn6B,KAAKvC,SAASkvC,WACtCE,oBAAoB7sC,KAAKvC,SAASmvC,WAAY5sC,KAAKvC,SAASqvC,YAC/D9sC,KAAKvC,SAAS08B,SAAWA,CAC3B,CACA,GAAoC,MAAhCn6B,KAAKvC,SAASsvC,eAAwB,CACxC,MAAM,SAAE5S,SAAmBn6B,KAAKvC,SAASkvC,WAAWK,QAAQhtC,KAAKvC,SAASsvC,gBAC1E/sC,KAAKvC,SAAS08B,SAAWA,CAC3B,CACA,GAA8B,MAA1Bn6B,KAAKvC,SAAS08B,SAChB,MAAM,IAAIp5B,EAAqB,uDAEjC,OAAOf,KAAKvC,SAAS08B,QACvB,CAiDA,4BAAM8S,CACJ79B,EACA89B,EACAhlC,GAEA,MAAM,SAAEu3B,SAAmBz/B,KAAKvC,SAASmV,OAAO00B,yBAAyBl4B,GACzE,GAAgB,MAAZqwB,EACF,MAAM,IAAIn/B,EAAc,6CAA6C8O,KAEvE,MAAM+9B,EAAgB1N,EACtB,MAAO,IACFtT,GAAAqgB,GAAAxsC,KAAKotC,IAAczkC,KAAnB3I,KAAoBmtC,EAAeD,OAAQtkC,EAAWV,GACzDmL,OAAQ85B,EAEZ,CAEA,kBAAME,CACJptC,EACAsS,EACArK,EAAmE,CAAC,GAEpE,MAAM,OAAEmL,SAAiBrT,KAAKstC,MAAMrtC,EAAMsS,EAAQ,IAAKrK,EAASqlC,YAAY,IAC5E,GAAc,MAAVl6B,EAAgB,MAAM,IAAIxR,EAC9B,MAAM,QAAEusB,GAAY/a,EAEpB,OAAOiD,KAAK0E,MAAgB,KAAVoT,EACpB,CAQA,aAAMof,CACJj7B,EACArK,GAOG,IAAAulC,EACH,MAAM,WAAEF,KAAeG,GAAQ,IAAK1tC,KAAKvC,YAAayK,GAEtD,GAD8B,MAA1BlI,KAAKvC,SAAS08B,gBAAwBn6B,KAAK0sC,YAC5B,IAAfa,EAAqB,OAAOvtC,KAAKstC,MAAM,OAAQ/6B,EAAQ,IAAKm7B,EAAKH,eACrE,GAA6B,MAAzBvtC,KAAKvC,SAASU,QAAiB,MAAM,IAAIyE,EAE7C,GAAqB,MAAjB8qC,EAAIpC,UAAmB,MAAM,IAAIvqC,EAAqB,gCAC1D,MAAM6T,EAAU84B,EAAIpC,UAAUntC,QAC9B,GAA8B,MAA1B6B,KAAKvC,SAAS08B,SAAkB,MAAM,IAAIp5B,EAAqB,iCACnE,MAAMya,QAAWgV,GAAa,CAC5BjM,kBAAkB,KACfmpB,EACH9oC,IAAK6M,GAAI0I,iBACTwC,SAAsB,QAAd8wB,EAAEC,EAAI/wB,gBAAQ,IAAA8wB,EAAAA,QAAUztC,KAAKqtC,aAAa,OAAQ96B,EAAQm7B,GAClEjnB,SAAUzmB,KAAK2tC,UAAU7/B,OAAO9N,KAAK4tC,MAAO,OAAQr7B,GACpDjM,KAAMtG,KAAKvC,SAAS08B,SACpBvlB,aAEI,KAAExF,KAASgG,SAAgB+W,GAAAqgB,GAAAxsC,KAAK6tC,IAAellC,KAApB3I,KAC/Bwb,EACA,OACA,IAAKkyB,EAAKpC,UAAWoC,EAAIpC,YAG3B,OADAtrC,KAAKvC,SAASU,QAAUyyB,GAA4Bxb,EAAMub,OACnD,IACFvb,KACqB,MAArBA,EAAM/B,QAAQzN,KAAe,CAC9BkoC,cAAe9tC,KAAK+tC,cAAc34B,EAAM/B,OAAOzN,IAAK8nC,IAEtD3f,MAAOnZ,EACPxR,YAAagM,EACbjR,QAAS6B,KAAKvC,SAASU,QAE3B,CA6BA,WAAMmvC,CACJ9pC,EACA+O,EACArK,EAI6B,CAAC,GACqD,IAAA8lC,EACnF,MAAM,WAAET,EAAU,IAAElrB,KAAQqrB,GAAQ,IAAK1tC,KAAKvC,YAAayK,GACrD+lC,EAAQ9hB,GAAAqgB,GAAAxsC,KAAKkuC,IAAevlC,KAApB3I,KAAqBwD,IAC7B,QAAErF,EAAO,KAAE8B,GAASD,KAAKvC,SAEzBomB,EAAqB,MAAR5jB,EAAe+V,GAAc/V,GAAQ9B,GAClD,OAAEyU,GAAW86B,EAEnB,GAAU,MAANlqC,EAAY,MAAM,IAAIN,GAC1B,GAAW,SAAPM,IAAgC,IAAf+pC,EAAqB,MAAM,IAAIxqC,EAA6B,wCACjF,GAAW,SAAPS,GAA+B,MAAdkqC,EAAInqC,QAAkBkQ,OAAOi6B,EAAInqC,QAAU,IAAM0qC,EAAMnW,QAC1E,MAAM,IAAIx0B,GAAwBoqC,EAAInqC,OAAQC,GAGhD,IAAIkjB,EACJ,IACE,GAAqB,MAAjBgnB,EAAIpC,UAAmB,MAAM,IAAI1pC,EAAc,wBACnD8kB,EAAWgnB,EAAIpC,UAAUntC,OAC3B,CAAE,MAAO8L,GACP,MAAMkkC,GAAoC,IAAfZ,IACxBtjC,aAAiBmkC,GAA+B,yGAAlBnkC,EAAMnK,SACjCmK,aAAiB/E,IACjB+E,aAAiBrI,GAAmC,yBAAlBqI,EAAMnK,SAE9C,IAAKquC,EAAoB,MAAMlkC,EAC/Byc,EAAW7V,GAAgBC,GAC7B,CACA,MAAM2V,EAAWzmB,KAAK2tC,UAAU7/B,OAAO9N,KAAK4tC,MAAOpqC,EAAI+O,GAEvD,IAAmB,IAAfg7B,EAAqB,CACvB,GAAiB,MAAbG,EAAI74B,MAAe,CACrB,MAAMw5B,EAAmB,MAAPhsB,GAAe,CAAE,CAAgB,kBAARA,EAAmB,SAAW,QAASA,GAC5E6nB,QAAgBxpB,GAAWgG,EAAU,IAAK2nB,EAAWz7B,WAAUyK,OAAOpT,IAC1E,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAEiJ,KAAM,QAAS2B,MAAO,EAAG,IAEpC64B,EAAI74B,MAAyB,gBAAjBq1B,EAAQh3B,KAAyB,EAAIg3B,EAAQr1B,MAAQ,CACnE,CAEA,MAAMy5B,EAAQ,IAAKZ,EAAK96B,SAAQ6T,YAChC,IAAIjL,EACJ,GAAW,SAAPhY,EAAe,CACjB,GAA8B,MAA1BxD,KAAKvC,SAAS08B,SAAkB,MAAM,IAAIp5B,EAAqB,0CACnEya,QAAWgV,GAAa,IACnB8d,EAAO1pC,IAAK6M,GAAI0I,iBAAkB7T,KAAMtG,KAAKvC,SAAS08B,SAAUvlB,QAAS8R,GAEhF,KAAO,CACL,GAAkB,MAAd7C,EAAoB,MAAM,IAAI7gB,EAA4B,0CAC9DwY,QAAWgV,GAAa,IACnB8d,EAAO1pC,IAAK6M,GAAI0B,eAAgBuT,WAAU7C,cAEjD,CAEA,MAAM,QAAE8X,KAAY4S,SAAsBjrB,GAAS9H,EAAIkL,EAAU,IAAKgnB,EAAKrrB,QAC3E,GAAe,MAAXsZ,EACF,MAAM,IAAI/5B,EAAc,4CAA4C4Z,KAEtE,MAAM2xB,EAAgBxR,EACtB,MAAO,IACF4S,KACApiB,GAAAqgB,GAAAxsC,KAAKotC,IAAczkC,KAAnB3I,KAAoBmtC,EAAe3pC,EAAIgY,EAAIkyB,GAC9ClyB,GAAIH,GAASG,GACbnI,OAAQ85B,EACRxc,MAAOnV,EACPpM,KAAMshB,GAAYlV,GAClBkwB,YAAQ9iC,EAEZ,CAEA,GAAW,MAAPyZ,EAAa,MAAM,IAAIthB,EAAqB,uDAChD,GAAkB,MAAd8iB,EAAoB,MAAM,IAAI7gB,EAA4B,uCAC9D,MAAMwY,QAAWgV,GAAa,CAC5BjM,kBAAkB,KACfmpB,EACH9oC,IAAK6M,GAAI0B,eACTwJ,SAAsB,QAAdqxB,EAAEN,EAAI/wB,gBAAQ,IAAAqxB,EAAAA,QAAUhuC,KAAKqtC,aAAa7pC,EAAI+O,EAAQm7B,GAC9DhnB,WACA7C,aACA4C,aAEF,GAAqB,MAAjBinB,EAAIpC,UAAmB,MAAM,IAAIvqC,EAAqB,gDAC1D,OAAOorB,GAAAqgB,GAAAxsC,KAAK6tC,IAAellC,KAApB3I,KAAqBwb,EAAIhY,EAAI,IAAKkqC,EAAKpC,UAAWoC,EAAIpC,WAC/D,CA6CAyC,aAAAA,CACES,GACA,YAAEC,KAAgBf,GAAmE,CAAC,GAEtF,OAAOc,EACJ1qC,KAAK4qC,IACJ,IAAIC,EACJ,IACEA,EAAexiB,GAAAqgB,GAAAxsC,KAAK4uC,IAAuBjmC,KAA5B3I,KAA6B0uC,EAAMvwC,QAASuwC,EAAM5S,OAAO,GAAI4R,EAC9E,CAAE,MAAOzjC,GACP,GAAgB,OAAXwkC,QAAW,IAAXA,GAAAA,GAAyBxkC,aAAiBxG,GAA6B,OAAO,KACnF,MAAMwG,CACR,CACA,MAAM4kC,EAAU7uC,KAAK2tC,UAAUmB,YAAYH,EAAcD,EAAMnoC,KAAMmoC,EAAM5S,SACpE77B,EAAMzC,GAAQiM,OAAOE,QAAQklC,GAAS,GAC7C,MAAO,CACL5uC,OACAzC,OACA2xB,SAAU,CACRlvB,KAAM0uC,EACNxwC,QAASuwC,EAAMvwC,SAElB,IACAma,QAAQ6e,GAAmD,MAALA,GAC7D,CAEA,uBAAa4X,EACX,WACEpC,EAAU,OACV/5B,EAAM,SACNunB,EAAQ,IACRvpB,EAAG,QACHzS,EAAO,eACP4uC,EAAc,WACdH,EAAU,WACVE,EAAU,iBACVkC,KACGC,IAOL,GAAW,MAAPr+B,GAA6B,MAAd+7B,EAAoB,CACrC,IAAIluB,EAGa,IAAAywB,EAAjB,GAFsB,MAAlBnC,IAAwBtuB,QAAYkuB,EAAWK,QAAQD,IACzC,MAAdH,IAAoBnuB,QAAYkuB,EAAWE,oBAAoBD,EAAYE,IACpE,MAAPruB,EACF7N,EAAM6N,EAAI7N,IACF,QAARs+B,EAAA/U,SAAQ,IAAA+U,IAAR/U,EAAa1b,EAAI0b,SAErB,CACA,GAAW,MAAPvpB,EAAa,MAAM,IAAI3N,EAE3B,IAAIhD,EAUJ,GATe,MAAX9B,IACFA,QAAgB+lB,GACd/lB,EACA,kBACA,CAAEgmB,eAAe,EAAMvR,WAErBuD,GAAYhY,KAAU8B,EAAO9B,IAGpB,MAAXA,GAAiC,MAAdyuC,GAAwC,MAAlBG,GAAsC,MAAZ5S,EACrE,MAAM,IAAIn3B,EAA4B,gDAGxC,GAAe,MAAX7E,EAAiB,CACnB,MAAMgxB,QAAiBpL,GAAY5lB,EAAS,CAAEyU,WAC9C,GAAuB,MAAnBuc,EAASnB,OAAgB,MAAM,IAAInrB,EAAsB1E,EAC/D,CAEA,IAAyB,IAArB6wC,EAA2B,CAC7B,GAAe,MAAX7wC,EAAiB,MAAM,IAAI6E,EAA4B,oDAC3D,MAAMmsC,SAAwBvrB,GAAoBzlB,EAAS,CAAEyU,YAAWunB,SACxE,IAAIiV,GAAU,EACd,GAAgB,MAAZjV,EAAkBiV,EAAUjV,IAAagV,OACxC,GAAkB,MAAdvC,EAAoB,CAC3B,GAAkB,MAAdD,EAAoB,MAAM,IAAI5rC,EAAqB,4CACvDquC,QAAgBzC,EAAW0C,qBAAqBF,EAAgBvC,EAAYE,EAC9E,MAAO,GAAsB,MAAlBC,EAAwB,CACjC,GAAkB,MAAdJ,EAAoB,MAAM,IAAI5rC,EAAqB,4CACvDquC,QAAgBzC,EAAW2C,SAASH,EAAgBpC,EACtD,CACA,IAAKqC,EACH,MAAM,IAAI1sC,EAAwD,OAAvB,OAAVkqC,QAAU,IAAVA,EAAAA,EAAcG,GAA0B,cAAgB,WAE7F,CAEA,OAAO,IAAIwC,GAAuB,CAChC5C,aACA/5B,SACAg6B,aACAG,iBACA5S,WACAvpB,MACAzS,UACA8B,OACA6sC,gBACGmC,GAEP,CAeApvC,WAAAA,EAAY,IAAE+Q,KAAQq+B,IAaqBzjB,GAAA,KAAAghB,IAxB3CrkC,GAAA,KAASskC,QAAY,GAyBnBzsC,KAAKwvC,KAAO5+B,EACZ,MAAM6+B,EAAU7+B,EAAIA,EAAIvD,OAAS,GACjC,GAAwB,MAApBoiC,EAAQtgB,SACV,MAAM,IAAIpuB,EAAqB,uDAAuD0I,OAAOkJ,KAAK88B,mBAEpGrnC,GAAKqkC,GAALzsC,KAAoByvC,EAAQtgB,UAC5BnvB,KAAK4tC,MAAQplC,GAAKikC,GAALzsC,MAAkBC,KAC/BD,KAAK2tC,UAAY,IAAIpB,GAAS37B,GAC9B5Q,KAAKvC,SAAWwxC,EAgBhBxlC,OAAO4Z,OACLrjB,KACAyJ,OAAOC,YAAYlB,GAAKikC,GAALzsC,MAAkB0vC,UAClC5rC,KAAI,EAAG7D,OAAM0vC,UAAWC,EAASpU,eAChC,MAAM+R,EAAsB,SAATttC,IAAoBu7B,EACvC,MAAO,CACLv7B,EACAiJ,SAAU1L,KACR,MAAM0K,EAAU1K,EAAK6P,SAAWuiC,EAAQviC,OAAS,EAAI7P,EAAKqyC,MAAQ,CAAC,EACnE,GAAuB,kBAAZ3nC,EAAsB,MAAM,IAAIkmC,EAAU,gCAAgClmC,KACrF,MAAa,SAATjI,EAAwBD,KAAKwtC,QAAQhwC,EAAM,CAAE+vC,gBAAerlC,IACzDlI,KAAKstC,MAAMrtC,EAAMzC,EAAM,CAAE+vC,gBAAerlC,GAAU,EAE5D,KAGT,EAleY,SAAAklC,IAwBV,WAAE9e,EAAU,YAAED,EAAW,IAAEzoB,GAC3BsnC,EACA9pC,EACA8E,GAEA,IAAIpI,EACJ,OAAQwuB,GACN,IAAK,KAAM,CACT,MAAM2f,EAAQ9hB,GAAAqgB,GAAAxsC,KAAKkuC,IAAevlC,KAApB3I,KAAqBktC,GACnC,MAAO,CACL4C,cAAe9vC,KAAK2tC,UAAU5/B,OAAO/N,KAAK4tC,MAAOK,EAAMhuC,KAAMouB,GAC7Dyf,cAAe9tC,KAAK+tC,cAAcnoC,EAAKsC,GAE3C,CACA,IAAK,SACHpI,EAAUE,KAAK2tC,UAAUoC,iBAAiB1hB,GAC1C,MACF,IAAK,QAEH,GADAvuB,EAAUiO,GAAOsgB,GAAahsB,WAC1B,kCAAkCgT,KAAKvV,GACzC,MAAM,IAAIQ,EAAc,8DAA8DR,KAExF,MACF,QACE,MAAM,IAAI8B,EAAc,wBAAwB0sB,KAEpD,MAAM,IAAInrB,GAAoBrD,EAASsD,EACzC,CAAC,eAAAyqC,GAGCryB,EACA0xB,EACAhlC,GAEA,MAAMwjC,QAAeN,GAAgB5vB,EAAI,IAAKxb,KAAKvC,YAAayK,IAChE,MAAO,CACLkH,KAAMs8B,EAAOt8B,KACboM,GAAIH,GAAoDqwB,EAAO/a,OAC/D+a,SACA/a,MAAO+a,EAAO/a,SACW,MAAtB+a,EAAOxrB,mBACFlgB,KAAKitC,uBAAuBvB,EAAOt8B,KAAM89B,EAAQhlC,GAG7D,CAAC,SAAAgmC,GAqFejuC,GACd,MAAMuD,EAAKgF,GAAKikC,GAALzsC,MAAkB0vC,UAAU/oC,MACpC+iC,GAAwBA,EAAEzpC,OAASA,IAEtC,GAAU,MAANuD,EACF,OAAOA,EAET,GAAa,SAATvD,EACF,MAAO,CACL0vC,UAAW,GAAI1vC,KAAM,OAAQ63B,SAAS,EAAOkY,QAAS,OAAQxU,UAAU,GAG5E,MAAM,IAAIn4B,GAA4BpD,EACxC,CAAC,SAAA2uC,GA8GCqB,EACAtN,GACA,sBAAEuN,IAEF,MAAMC,EAAgB,IAAKnwC,KAAKvC,SAASyyC,yBAA0BA,GACnE,GAAgC,MAA5BC,EAAcF,GAAoB,OAAOE,EAAcF,GAG3D,MAAMlkB,EAAUA,CAAC2G,EAAQC,IAAoB6C,KAAKC,UAAU/C,KAAO8C,KAAKC,UAAU9C,GAE5EnD,EAAYxvB,KAAKwvC,KACpB1rC,KAAI,EAAGqrB,cAAeA,IACtB7W,QAAQ6W,GAAaA,GAAUuf,QAC5B7qC,EAAgB2rB,EACnB1rB,KAAKqrB,GAAa,CAACA,EAASlvB,KAAMkvB,EAASuf,MAAM0B,WACjDtsC,KAAI,EAAE7D,EAAMuuC,KAAYA,EAAO1qC,KAAK4qC,GACnC,CAACzuC,EAAMwJ,OAAOkJ,KAAK+7B,GAAO,GAAIjlC,OAAO4O,OAAOq2B,GAAO,QAEpDvE,OACA7xB,QAAO,EAAE,CAAE+3B,KAAej3B,OAAO,KAAKk3B,GAASD,GAAWhuC,SAAS,YAAcsgC,IACjFrqB,QAAO,EAAE,CAAC,CAAG5b,GAAO0mB,EAAKmtB,KAASA,EAAI/iC,MAAM,EAAG4V,GAAKotB,MAAMnmC,GAAO0hB,EAAQ1hB,EAAG,GAAI3N,OACnF,OAAQmH,EAAcwJ,QACpB,KAAK,EAAG,MAAM,IAAI5J,GAA4Bk/B,EAAStgC,WAAY4tC,GACnE,KAAK,EAAG,OAAOpsC,EAAc,GAAG,GAChC,QAAS,MAAM,IAAID,GAA8BqsC,EAAWpsC,GAEhE,CA+LF,MAAM0rC,GAAgDriB,GAEtD,U,oBChlBOhkB,eAAeunC,GACpBC,EACAlzC,GACA,UACE8tC,EAAS,WAAEqB,EAAU,OAAE/5B,EAAM,SAAEunB,EAAQ,IAAEvpB,EAAG,eAAEm8B,EAAc,WAAEH,EAAU,WAAEE,KAAe5kC,IAOvF,IAAAyoC,EACJ,MAAM/7B,EAAU02B,EAAUntC,QAC1B,GAAqD,uBAA1CuiB,GAAW9L,EAAS,CAAEhC,YAAWM,KAC1C,MAAM,IAAInS,EAAqB,WAAW6T,mBAG5C,MAAMua,QAAiBjC,GAAS6hB,WAA4C,CAC1EzD,YAAWqB,aAAY/5B,SAAQunB,WAAUvpB,MAAKm8B,iBAAgBH,aAAYE,eAGtEtxB,QAAWgV,GAAa,CAC5BjM,kBAAkB,KACfrc,EACHtD,IAAK6M,GAAI2I,WACTxH,SACAtM,WAAY6oB,EAASud,WACrB/vB,SAA0B,QAAlBg0B,EAAEzoC,EAAQyU,gBAAQ,IAAAg0B,EAAAA,QAAUxhB,EAASke,aAAa,OAAQ7vC,EAAM0K,GACxE0M,UACA6R,SAAU0I,EAASwe,UAAU7/B,OAAOqhB,EAASye,MAAO,OAAQpwC,GAC5D4rB,QAASha,GAAKshC,MAERthC,KAAMhM,EAAW,MAAEutB,SAAgBya,GAAgB5vB,EAAI,CAC7D5I,SAAQ04B,YAAWqB,gBAAezkC,IAE9B2b,EAAa+M,GAA4BD,GAE/C,OAAOlnB,OAAOmnC,OAAO,CACnB7iB,MAAOnZ,EACPxR,cACAutB,QACAkgB,aAAchtB,GAElB,CAuBO3a,eAAe4nC,GACpB1tC,GACA,IAAEyY,EAAG,SAAE7C,EAAQ,OAAEpG,IAEjB,MAAM,cAAEs2B,EAAa,yBAAE12B,SAAmCI,EAAOC,cACjE,IAAItF,EAAU6B,GAAKlF,GAAc,CAACL,GAAOG,KAAKk/B,GAAgBn7B,GAAO3K,MACrE,GAAIoP,IAA6BlB,GAAyBK,MAAO,CAC/D,GAAW,MAAPkK,EAAa,MAAM,IAAIlb,EAAc,MAAO,sBAAuBkb,GACvE,GAAgB,MAAZ7C,EAAkB,MAAM,IAAIrY,EAAc,WAAY,sBAAuBqY,GACjFzL,EAAU6B,GAAKrB,GAAO+J,GAAU,CAC9BlT,IAAKggB,GAASsL,iBACdrU,MACA7C,WACAhU,OAAQ8I,GAAOP,EAASxC,GAAS0B,WAErC,CACA,OAAOc,CACT,CAUOrE,eAAe6nC,GACpB3tC,GACA,OAAEwP,IAEF,MAAMiF,EAAWwD,GAASjY,EAAaqO,GAAIuT,UAC3C,GAAInN,EAAS4D,UAAU7W,MAAQ6M,GAAI2B,SACjC,MAAM,IAAIzS,EAAc,cAAe,sBAAuB8Q,GAAIoG,EAAS4D,UAAU7W,MAEvF,OAAOksC,GAAgBx1B,GAAQzD,EAAS4D,UAAUD,GAAGC,WAAY,CAC/DI,IAAKhE,EAAS4D,UAAUI,IACxB7C,SAAUnB,EAAS4D,UAAUzC,SAC7BpG,UAEJ,C,0YCzHA,MAAMo+B,GAAU,IACXC,EACH7F,gBAAe,MACZ8F,KACAC,GACM,IAAAC,GAAA,IAAA5pC,QAiCX,MAAM6pC,GAQJxxC,WAAAA,CAAYqI,EAA+B,CAAC,IAAGpB,EAAAA,GAAAA,GAAA,gBAPf,CAAC,GAEjCqB,GAAA,KAASipC,QAAe,GAMtB3nC,OAAO4Z,OAAOrjB,KAAKsxC,SAAUppC,GAC7BE,GAAKgpC,GAALpxC,KAAuB,CACrBsrC,UAAWhtB,IAAc,IAAMte,KAAKsxC,SAAShG,YAC7C14B,OAAQ0L,IAAc,IAAMte,KAAKsxC,SAAS1+B,SAC1C+5B,WAAYruB,IAAc,IAAMte,KAAKsxC,SAAS3E,cAElD,CAQA4E,UAAAA,CAAWC,EAAiC,CAAC,GAC3C,MAAO,IACFxxC,KAAKsxC,YACL9oC,GAAK4oC,GAALpxC,SACAwxC,EAEP,CAGA,aAAMl2B,CAAQpT,GAEZ,OAAOsoB,GAAa,IAAKxwB,KAAKuxC,gBAAwBrpC,GACxD,EAgCFuB,OAAO4Z,OAAOguB,GAAaI,UAAWloC,GACpCynC,IACA,EAAE/wC,EAAMyxC,KAAa,CACnBzxC,EACA,YAA8CzC,GAC5CA,EAAK6P,OAASqkC,EAAQrkC,OACtB,MAAMnF,EAAU1K,EAAKA,EAAK6P,OAAS,GAEnC,OADA7P,EAAKA,EAAK6P,OAAS,GAAKrN,KAAKuxC,WAAWrpC,GACjCwpC,KAAWl0C,EACpB,MAMJ,MAAMm0C,GAAoBN,GAC1B,U,0YChImB,IAAAD,GAAA,IAAA5pC,QAUJ,MAAMoqC,WAAkBP,GAWrCxxC,WAAAA,EACE,MAAEgyC,EAAQ,MAAO3pC,GAEb,CAAC,GAELnI,MAAMmI,IAASpB,EAAAA,GAAAA,GAAA,YAfS,IAAIkb,KAI9B7Z,GAAA,KAASipC,QAAe,GAatBS,EAAM9uB,SAAQ,EAAG9iB,OAAM6xC,YAAYjf,IAAM7yB,KAAK+xC,QAAQ9xC,EAAM6xC,EAAgB,IAANjf,KAEtEzqB,GAAKgpC,GAALpxC,KAAuB,CACrB4S,OAAQ0L,IAAc,IAAMte,KAAKgyC,MACjCrF,WAAYruB,IAAc,IAAMte,KAAKiyC,cACrC3G,UAAWhtB,IAAc,IAAMte,KAAKkyC,qBAExC,CAKA,eAAID,GACF,GAAgC,MAA5BjyC,KAAKsxC,SAAS3E,WAChB,MAAM,IAAItsC,EAAc,sDAE1B,OAAOL,KAAKsxC,SAAS3E,UACvB,CAEA,OAAIqF,GAEF,OADAhyC,KAAKmyC,sBACEnyC,KAAKoyC,KAAKx5B,IAAI5Y,KAAKqyC,iBAC5B,CAaAN,OAAAA,CAAQ9xC,EAAcyY,EAAY1a,GAAS,GACzC,GAAIgC,KAAKoyC,KAAKhc,IAAIn2B,GAAO,MAAM,IAAIqE,GAAmBrE,GAEtDD,KAAKoyC,KAAK54B,IAAIvZ,EAAMyY,IAChB1a,GAAmC,MAAzBgC,KAAKqyC,mBACjBryC,KAAKsyC,WAAWryC,EAEpB,CAQAqyC,UAAAA,CAAWryC,GACT,IAAKD,KAAKoyC,KAAKhc,IAAIn2B,GAAO,MAAM,IAAIsE,GAAkB,kBAAkBtE,iBACxED,KAAKqyC,iBAAmBpyC,CAC1B,CAOAsyC,eAAAA,GACE,OAAgC,MAAzBvyC,KAAKqyC,gBACd,CAEUF,mBAAAA,GACR,IAAKnyC,KAAKuyC,kBACR,MAAM,IAAIhuC,GAAkB,gEAEhC,CASA,iBAAMsO,GAEJ,OADA7S,KAAKmyC,sBACE,CACLlyC,KAAMD,KAAKqyC,0BACFryC,KAAKgyC,IAAIn/B,cAEtB,CAOA,oBAAM2/B,GACJ,OAAOrpC,QAAQsnB,IACb9N,MAAM3Y,KAAKhK,KAAKoyC,KAAKzoC,WAAW7F,KAAIoF,OAAQjJ,EAAMyY,MAAU,CAC1DzY,gBACSyY,EAAK7F,kBAGpB,CAGA4/B,SAAAA,GACE,MAAO,EACT,CAMAP,eAAAA,CAAgBhI,EAAqBlqC,KAAKsxC,SAAShG,WACjD,GAAuB,kBAAZpB,EAAsB,MAAM,IAAI5oC,EAAoB,8BAC/D,GAAuB,kBAAZ4oC,EAAsB,OAAOA,EACxC,MAAM,IAAIkE,EAEN,sFAAmCsE,OAAOxI,aAEhD,CAEA,WAAI/rC,GACF,OAAO6B,KAAKkyC,kBAAkB/zC,OAChC,CAOA,UAAMuzB,CACJnrB,GACA,UAAE+kC,KAAcpjC,GAAuC,CAAC,GAExD,OAAOlI,KAAKkyC,gBAAgB5G,GAAW5Z,KAAKnrB,EAAM2B,EACpD,CAOA,qBAAMypB,CACJnW,GACA,UAAE8vB,KAAcpjC,GAAuF,CAAC,GAExG,MAAM6oB,EAAsC,OAA1B/wB,KAAKqyC,uBAAkCryC,KAAKgyC,IAAI1yB,oBAAiB1W,EACnF,OAAO5I,KAAKkyC,gBAAgB5G,GAAW3Z,gBAAgBnW,EAAI,CAAEuV,eAAc7oB,GAC7E,CAOA,iBAAM2pB,CACJ/xB,GACA,UAAEwrC,KAAcpjC,GAAmF,CAAC,GAEpG,OAAOlI,KAAKkyC,gBAAgB5G,GAAWzZ,YAAY/xB,EAASoI,EAC9D,CAQA,mBAAM4pB,CACJvrB,EACAqK,GACA,UAAE06B,KAAcpjC,GAAqF,CAAC,GAEtG,OAAOlI,KAAKkyC,gBAAgB5G,GAAWxZ,cAAcvrB,EAAMqK,EAAK1I,EAClE,CAOA,oBAAM8pB,CACJC,GACA,UAAEqZ,KAAcpjC,GACiC,CAAC,GACtB,IAAAyqC,EAG5B,OAFiB,QAAjBA,EAAAzqC,EAAQ6oB,iBAAS,IAAA4hB,IAAjBzqC,EAAQ6oB,UAAwC,OAA1B/wB,KAAKqyC,uBACjBryC,KAAKgyC,IAAI1yB,oBAAiB1W,GAC7B5I,KAAKkyC,gBAAgB5G,GAAWtZ,eAAeC,EAAY/pB,EACpE,CAMSqpC,UAAAA,CAAWC,EAAiC,CAAC,GACpD,MAAO,IACFxxC,KAAKsxC,YACL9oC,GAAK4oC,GAALpxC,SACAwxC,KACuB,MAAvBA,EAAUlG,WAAqB,CAChCA,UAAWtrC,KAAKkyC,gBAAgBV,EAAUlG,YAGhD,ECtOa,MAAMsH,WAAchB,GAQjC/xC,WAAAA,EACE,SAAE6iB,KAAaxa,GACgC,CAAC,GAEhDnI,MAAMmI,IAASpB,EAAAA,GAAAA,GAAA,gBAX0C,CAAC,GAY1D4b,GAAUK,SAAQ,CAACmnB,EAAS9mB,IAAQpjB,KAAK6yC,WAAW3I,EAAS,CAAElsC,OAAgB,IAARolB,KACzE,CAES8uB,eAAAA,CAAgBhI,EAAqBlqC,KAAK8yC,iBACjD,GAAuB,kBAAZ5I,EAAsB,CAC/B,MAAM/rC,EAAU+rC,EAEhB,GADAn8B,GAAO5P,GACuB,MAA1B6B,KAAK0iB,SAASvkB,GAAkB,MAAM,IAAI2D,EAAwBooC,GACtEA,EAAUlqC,KAAK0iB,SAASvkB,EAC1B,CACA,OAAO4B,MAAMmyC,gBAAgBhI,EAC/B,CAMSuI,SAAAA,GACP,OAAOhpC,OAAOkJ,KAAK3S,KAAK0iB,SAC1B,CASAmwB,UAAAA,CAAW3I,GAAsB,OAAElsC,GAAiC,CAAC,GACnE,MAAM,QAAEG,GAAY+rC,EACpBlqC,KAAK0iB,SAASvkB,GAAW+rC,GACV,IAAXlsC,GAAiBgC,KAAK+yC,cAAc50C,EAC1C,CAOA60C,aAAAA,CAAc70C,GACZ,GAA8B,MAA1B6B,KAAK0iB,SAASvkB,GAAkB,MAAM,IAAI2D,EAAwB3D,UAC/D6B,KAAK0iB,SAASvkB,GACjB6B,KAAK8yC,kBAAoB30C,UAAgB6B,KAAK8yC,eACpD,CAOAC,aAAAA,CAAc50C,GAEZ,GADA4P,GAAO5P,GACuB,MAA1B6B,KAAK0iB,SAASvkB,GAAkB,MAAM,IAAI2D,EAAwB3D,GACtE6B,KAAK8yC,gBAAkB30C,CACzB,E,4aCtEkB,IAAA80C,GAAA,IAAAzrC,QAAA0rC,GAAA,IAAA1rC,QAAA2rC,GAAA,IAAA3rC,QAAA4rC,GAAA,IAAAhoB,QAkCL,MAAMioB,GAanBxzC,WAAAA,CACEyzC,EACA9tC,EACAwrC,GACAxlB,GAAA,KAAA4nB,IAZFjrC,GAAA,KAAS8qC,GACP,IAAIjxB,KAGN7Z,GAAA,KAAA+qC,GAAa,GAEb/qC,GAAA,KAASgrC,QAAQ,GAOfnzC,KAAKszC,WAAaA,EAClBlrC,GAAK+qC,GAALnzC,KAAgBgxC,GAChBsC,EAAWhuC,QAAQ6mB,GAAAinB,GAAApzC,KAAKuzC,IAAe50B,KAAK3e,MAAOwF,EACrD,CAgEA,aAAM4uB,CACJn0B,EACAsS,GAGA,OADA4Z,GAAAinB,GAAApzC,KAAKwzC,IAAY7qC,KAAjB3I,KAAkBoI,GAAK8qC,GAALlzC,KAAAwI,GAAK0qC,GAALlzC,MAAmB,GAAGC,EAAMsS,GACvC,IAAIpJ,SAAQ,CAACC,EAAS4Z,KAC3Bxa,GAAKyqC,GAALjzC,MAAgBwZ,IAAIhR,GAAK0qC,GAALlzC,MAAiB,CAAEoJ,UAAS4Z,UAAS,GAE7D,CAOAywB,MAAAA,CAAqCxzC,EAAYsS,GAC/C4Z,GAAAinB,GAAApzC,KAAKwzC,IAAY7qC,KAAjB3I,UAAkB4I,EAAW3I,EAAMsS,EACrC,EAaD,eAAAghC,GA5FsB1qC,EAAuCf,GAC1D,GAAqB,QAAjBe,GAAKN,QAAmB,MAAM,IAAIhG,EAAuBizB,KAAKC,UAAU5sB,IAC5E,GAAI,WAAYA,GAAO,UAAWA,EAEhC,YADAsjB,GAAAinB,GAAApzC,KAAK0zC,IAAgB/qC,KAArB3I,KAAsB6I,GAIxB,MAAMurB,EAAUvrB,EAChB,IAAIwK,EACApJ,EACJ,IACE,KAAMmqB,EAAQmB,UAAU/sB,GAAK2qC,GAALnzC,OAAgB,MAAM,IAAIsH,GAClD,MAAMqsC,EAAavf,EAAQmB,OAC3BliB,QAAe7K,GAAK2qC,GAALnzC,MAAc2zC,GAAYvf,EAAQ7hB,OAAQzK,EAC3D,CAAE,MAAOqvB,GACPrsB,GAAYqsB,GACZltB,EAAQktB,CACV,CASA,GARkB,MAAd/C,EAAQ33B,IACV0vB,GAAAinB,GAAApzC,KAAK4zC,IAAajrC,KAAlB3I,KACEo0B,EAAQ33B,GACR23B,EAAQmB,OACRliB,EACS,MAATpJ,GAAiBA,aAAiB7D,GAAW6D,EAAQ,IAAI5C,IAGhD,MAAT4C,KAAmBA,aAAiB7D,IAAW,MAAM6D,CAC3D,CAAC,SAAAupC,GAGC/2C,EACA84B,EACAhjB,GAEAvS,KAAKszC,WAAWztC,YAAY,CAC1B0C,QAAS,SACA,MAAN9L,EAAa,CAAEA,MAAO,CAAC,EAC1B84B,YACa,MAAVhjB,EAAiB,CAAEA,UAAW,CAAC,GAEtC,CAAC,SAAAqhC,GAGCn3C,EACA84B,EACAliB,EACApJ,GAEAjK,KAAKszC,WAAWztC,YAAY,CAC1B0C,QAAS,MACT9L,KACA84B,YACY,MAATtrB,EAAgB,CAAEA,MAAOA,EAAM5D,UAAa,CAAEgN,WAErD,CAAC,SAAAqgC,IA+BgB,GAAEj3C,EAAE,MAAEwN,EAAK,OAAEoJ,IAC5B,MAAMwgC,EAAYrrC,GAAKyqC,GAALjzC,MAAgB4Y,IAAInc,GACtC,GAAiB,MAAbo3C,EAAmB,MAAM,IAAIrxC,EAAqB/F,GACzC,MAATwN,EAAe4pC,EAAU7wB,OAAO5c,GAASI,YAAYyD,IACpD4pC,EAAUzqC,QAAQiK,GACvB7K,GAAKyqC,GAALjzC,MAAgBmiB,OAAO1lB,EACzB,CCxHK,MAAMq3C,GAAc,E,gBC3B3B,MAAMC,GAAUC,GAAQ,CAAEC,eAAe,IAEnCC,GAA6Bz1C,IACjC,GAAqB,kBAAVA,GAAgC,OAAVA,GAAkBA,EAAMoB,cAAgB4J,OACvE,OAAOF,GAAU9K,GAAO,EAAE8tB,EAAGhU,KAAO,CAACgU,EAAG2nB,GAA0B37B,MAEpE,GAAIoK,MAAMwxB,QAAQ11C,GAChB,OAAOA,EAAMqF,KAAK0G,GAAS0pC,GAA0B1pC,KAEvD,GAAqB,kBAAV/L,GAAsB,IAAI2S,GAAAA,EAAU3S,GAAO4D,SAAS,MAAQ5D,EAAO,CAC5E,MAAM21C,EAAK,IAAIhjC,GAAAA,EAAU3S,GAEzB,OADA21C,EAAG/tC,OAAS,IAAM+tC,EAAG/xC,SAAS,IACvB+xC,CACT,CACA,OAAO31C,CAAK,EAGd,QACEg3B,UAAWA,IAAIj4B,IACbu2C,GAAQte,UAAUye,GAA0B12C,EAAK,OAAQA,EAAKgQ,MAAM,IAEtEy9B,MAAO8I,GAAQ9I,O,oBC8BF,MAAMoJ,WAAoBzB,GA2BvC/yC,WAAAA,EAAY,KACVI,EAAI,GACJxD,EAAE,KACFC,EAAI,aACJ43C,EAAY,eACZC,EAAc,aACd/uC,EAAY,cACZgvC,KACGtsC,IAUHnI,MAAMmI,IAASpB,EAAAA,GAAAA,GAAA,gBAtCN,IAAIkb,KAuCbhiB,KAAKs0C,aAAeA,EACpBt0C,KAAKu0C,eAAiBA,EACtBv0C,KAAKwF,aAAeA,EACpBxF,KAAKw0C,cAAgBA,EACrBx0C,KAAKC,KAAOA,EACZD,KAAKvD,GAAKA,EACVuD,KAAKy0C,MAAQ/3C,CACf,CAEAg4C,qBAAAA,EAAsB,oBAAEC,IACtB,MAAM,QAAEC,EAAO,UAAE7T,GAAc/gC,KAAK60C,cACpC,MAAO,CACLD,QAASD,EAAoBve,IAAI,YAAcue,EAAoBve,IAAI,aACnEwe,EAAU,CAAC,EACf7T,UAAW4T,EAAoBve,IAAI,aAAe2K,EAAY,CAAC,EAEnE,CAEA+T,mBAAAA,GACuB,MAAjB90C,KAAK+0C,UACTpyB,MAAM3Y,KAAKhK,KAAK+0C,SAASpiC,QACtB2F,QAAQzZ,GAAamB,KAAKg1C,sBAAsBn2C,KAChDiF,KAAKjF,GAAamB,KAAKi1C,WAAWp2C,KAClCyZ,QAAQ48B,GAA+C,IAApCA,EAAOP,oBAAoBQ,OAC9CpyB,SAASmyB,GAAWA,EAAOE,IACzB3B,OAAOxtC,GAAQovC,cAAer1C,KAAK00C,sBAAsBQ,KAChE,CAESnC,aAAAA,CAAc50C,GACrB4B,MAAMgzC,cAAc50C,GACpB6B,KAAK80C,qBACP,CAESjC,UAAAA,CAAW3I,EAAsBhiC,GACxCnI,MAAM8yC,WAAW3I,EAAShiC,GAC1BlI,KAAK80C,qBACP,CAEAQ,QAAAA,GAEE,OADAt1C,KAAKmyC,sBACE,CAAEz5B,KAAM,CAAEgd,IAAK11B,KAAKgyC,IAAIzP,MAAOtiC,KAAMD,KAAKqyC,kBACnD,CAEA,gBAAeC,CAAWryC,GACxBF,MAAMuyC,WAAWryC,GACjB,MAAM8wB,QAAkB/wB,KAAKgyC,IAAI1yB,eACjCqD,MAAM3Y,KAAKhK,KAAK+0C,SAASpiC,QACtB2F,QAAQzZ,GAAamB,KAAKg1C,sBAAsBn2C,KAChDiF,KAAKjF,GAAamB,KAAKi1C,WAAWp2C,KAClCkkB,SAASmyB,IACRA,EAAOE,IAAI3B,OAAOxtC,GAAQsvC,cAAe,CACvCxkB,eACGmkB,EAAOM,aAAex1C,KAAKs1C,YAC9B,GAER,CAEAL,UAAAA,CAAWp2C,GACT,MAAMq2C,EAASl1C,KAAK+0C,SAASn8B,IAAI/Z,GACjC,GAAc,MAAVq2C,EAAgB,MAAM,IAAIzyC,EAAsB5D,GACpD,OAAOq2C,CACT,CAEAF,qBAAAA,CAAsBn2C,GACpB,OAAOqH,GAAWuvC,YAAcz1C,KAAKi1C,WAAWp2C,GAAUivB,QACrD9tB,KAAKi1C,WAAWp2C,GAAUu2C,IAAI9B,WAAW7tC,aAChD,CAEAiwC,oBAAAA,CAAqB72C,GACnB,MAAMq2C,EAASl1C,KAAKi1C,WAAWp2C,GAC/Bq2C,EAAOE,IAAI9B,WAAWp0C,aACtBg2C,EAAOpnB,OAAS5nB,GAAWyvC,aAC3BT,EAAOP,oBAAsB,IAAI/xB,GACnC,CAMAgzB,eAAAA,CAAgBn5C,GACduD,KAAK01C,qBAAqBj5C,GAC1BuD,KAAK+0C,SAAS5yB,OAAO1lB,EACvB,CAOAo5C,YAAAA,CAAaC,GAGX,MAAMr5C,EAAKoN,GAAOG,KAAKuF,GAAAA,YAAiB,IAAIlN,SAAS,UACrD,IAAI0zC,EACJ,MAAMb,EAAyB,CAC7Bz4C,KACAqxB,OAAQ5nB,GAAW8vC,+BACnBrB,oBAAqB,IAAI/xB,IACzB4yB,aAAa,EACbJ,IAAK,IAAI/B,GACPyC,GACA,KACE91C,KAAK+0C,SAAS5yB,OAAO1lB,GACrBuD,KAAKwF,aAAa/I,EAAIs5C,EAAiB,GAEzC,CACE,CAAC9vC,GAAQgwC,iBAAmB1jC,IAC1BwjC,EAAmBxjC,EACnBvS,KAAK01C,qBAAqBj5C,EAAG,EAI/B,CAACwJ,GAAQX,SAAU4D,OACjBjJ,OAAMwB,UAASy0C,QAAOV,eACrB1tC,KACD,GAAIrG,IAAYqyC,GAAa,MAAM,IAAI7sC,GAKvC,aAHMjH,KAAKs0C,aAAa73C,EAAI,CAAEwD,OAAMi2C,QAAOV,eAAe1tC,GAC1DotC,EAAOpnB,OAAS5nB,GAAWuvC,UAC3BP,EAAOM,YAAcA,EACd,UACIx1C,KAAKm2C,mBACXX,GAAex1C,KAAKs1C,WACxB,EAEH,CAACrvC,GAAQmwC,kBAAmBltC,OAASxM,OAAM+B,SAASqJ,KAClD,IAAK9H,KAAKg1C,sBAAsBv4C,GAAK,MAAM,IAAI0K,GAE/C,OAAQzK,GACN,KAAKsJ,GAAmBqwC,gBAEhBr2C,KAAKu0C,eAAe93C,EAAI,CAAEC,OAAM+B,SAASqJ,GAC/CotC,EAAOP,oBAAoB2B,IAAI73C,GAC/B,MACF,KAAKuH,GAAmBuwC,YACtBrB,EAAOP,oBAAoBxyB,OAAO1jB,GAClC,MACF,QACE,MAAM,IAAImD,EAAc,8BAA8BlF,KAG1D,MAAO,CACL85C,aAAc7zB,MAAM3Y,KAAKkrC,EAAOP,qBAChCx2C,QAAS6B,KAAK00C,sBAAsBQ,GACrC,EAEH,CAACjvC,GAAQ9H,SAAU+K,MAAOqJ,EAAQzK,KAChC,IAAK9H,KAAKg1C,sBAAsBv4C,GAAK,MAAM,IAAI0K,GAE/C,aADMnH,KAAKw0C,cAAc/3C,EAAI8V,EAAQzK,GAC9B9H,KAAKyyC,WAAW,EAEzB,CAACxsC,GAAQyrB,MAAOxoB,OAEZsS,KAAI8vB,YAAYtrC,KAAK7B,QAASs4C,eAAczlB,WAE9ClpB,KAEA,IAAK9H,KAAKg1C,sBAAsBv4C,GAAK,MAAM,IAAI0K,GAC/C,IAAKnH,KAAKyyC,YAAY/nC,SAAS4gC,GAC7B,MAAM,IAAIlkC,GAAuBkkC,GAGnC,MAAMxuB,EAAa,CACjBwuB,YAAWoL,WAAY5uC,EAAQ6uC,gBAAiBl6C,EAAIu0B,WAEtD,GAAIylB,IAA4B,IAAZzlB,EAClB,MAAO,CAAE4lB,wBAAyB52C,KAAK2xB,gBAAgBnW,EAAIsB,IAE7D,IACE,OAAOi3B,GAAQ9I,MAAM8I,GAAQte,UAAU,CACrCohB,sBAAuB72C,KAAKorC,gBAAgB5vB,EAAI,IAAKsB,EAAYzN,QAAQ,MAE7E,CAAE,MAAOpF,GACP,MAAMkhC,QAAmBf,GAAkB5uB,EAAIxb,KAAKgyC,KACpD,GAAI7G,EAAW99B,OAAS,EAAG,MAAM,IAAIxG,GAA2BskC,GAChE,MAAMlhC,CACR,GAEF,CAAChE,GAAQ4rB,aAAc3oB,OAASpJ,UAASwrC,YAAYtrC,KAAK7B,SAAW2J,KACnE,IAAK9H,KAAKg1C,sBAAsBv4C,GAAK,MAAM,IAAI0K,GAC/C,IAAKnH,KAAKyyC,YAAY/nC,SAAS4gC,GAC7B,MAAM,IAAIlkC,GAAuBkkC,GAGnC,MAAMxuB,EAAa,CAAEwuB,YAAWoL,WAAY5uC,EAAQ6uC,gBAAiBl6C,GACrE,MAAO,CACL6S,UAAWzF,GAAOG,WAAWhK,KAAK6xB,YAAY/xB,EAASgd,IAAaza,SAAS,OAC9E,EAEH,CAAC4D,GAAQ6rB,eAAgB5oB,OACvBiH,SAAQS,MAAKrK,OAAM+kC,YAAYtrC,KAAK7B,SACnC2J,KACD,IAAK9H,KAAKg1C,sBAAsBv4C,GAAK,MAAM,IAAI0K,GAC/C,IAAKnH,KAAKyyC,YAAY/nC,SAAS4gC,GAC7B,MAAM,IAAIlkC,GAAuBkkC,GAGnC,MAAMxuB,EAAa,IACd3M,EAAQm7B,YAAWoL,WAAY5uC,EAAQ6uC,gBAAiBl6C,GAE7D,MAAO,CACL6S,gBAAiBtP,KAAK8xB,cAAcvrB,EAAMqK,EAAKkM,GAChD,EAEH,CAAC7W,GAAQ6wC,YAAa5tC,OAAS3C,OAAM+kC,YAAYtrC,KAAK7B,SAAW2J,KAC/D,IAAK9H,KAAKg1C,sBAAsBv4C,GAAK,MAAM,IAAI0K,GAC/C,IAAKnH,KAAKyyC,YAAY/nC,SAAS4gC,GAAY,MAAM,IAAIlkC,GAAuBkkC,GAC5E,MAAMxuB,EAAa,CAAEwuB,YAAWoL,WAAY5uC,EAAQ6uC,gBAAiBl6C,GAC/D6S,EAAYxB,SAAa9N,KAAK0xB,KAAK3jB,GAAOxH,GAAOuW,GAAa/R,GAAS+B,WAC7E,MAAO,CAAEwC,YAAW,EAEtB,CAACrJ,GAAQ+rB,gBAAiB9oB,OAAS+oB,aAAYqZ,YAAYtrC,KAAK7B,SAAW2J,KACzE,IAAK9H,KAAKg1C,sBAAsBv4C,GAAK,MAAM,IAAI0K,GAC/C,IAAKnH,KAAKyyC,YAAY/nC,SAAS4gC,GAAY,MAAM,IAAIlkC,GAAuBkkC,GAC5E,MAAMxuB,EAAa,CAAEwuB,YAAWoL,WAAY5uC,EAAQ6uC,gBAAiBl6C,GAC/D6S,QAAkBtP,KAAKgyB,eAAeC,EAAYnV,GACxD,MAAO,CAAExN,YAAW,KAM5B,OADAtP,KAAK+0C,SAASv7B,IAAI/c,EAAIy4C,GACfz4C,CACT,CAMA,qBAAM2C,CAAgBP,GACpBmB,KAAKi1C,WAAWp2C,GAAUu2C,IAAI3B,OAAOxtC,GAAQ8wC,qBAAsB/2C,KAAKm2C,gBAC1E,CAMA,mBAAMA,GACJ,MAAM,OAAEruC,GAAWD,OAAOmvC,SAC1B,MAAO,CACLv6C,GAAIuD,KAAKvD,GACTwD,KAAMD,KAAKC,KACX8wB,gBAAiB/wB,KAAKgyC,IAAI1yB,eAC1BxX,OAAmB,YAAXA,EAAuB,IAAMA,EACrCpL,KAAMsD,KAAKy0C,MAEf,CAMAI,WAAAA,GACE,MAAO,CACLD,QAAiC,MAAxB50C,KAAK8yC,gBAA0B,CAAE,CAAC9yC,KAAK8yC,iBAAkB,CAAC,GAAM,CAAC,EAC1E/R,UAAW/gC,KAAKyyC,YACbn6B,QAAQoa,GAAMA,IAAM1yB,KAAK8yC,kBACzB3f,QAAO,CAACC,EAAKV,KAAM,IAAMU,EAAK,CAACV,GAAI,CAAC,KAAM,CAAC,GAElD,ECtWK,MAAMxF,GAAuC,CAClDxwB,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACfnxB,KAAM,CACJutB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGViI,QAAS,CACP2rB,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBAORyf,GAA0C,CACrDv6C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,cACXC,gBAAiB,CACfqV,WAAY,CACVjZ,eAAgB,cAChBn3B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,UAG3Bi3C,QAAS,CACPrjB,eAAgB,WAChBn3B,KAAM,CACJuD,KAAM,cAOHI,GAA4C,CACvD3D,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACf/6B,KAAM,CACJm3B,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVk3C,IAAK,CACHtjB,eAAgB,MAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aAGf13B,QAAS,CACP+zB,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVq7B,QAAS,CACPzH,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,cAOHm3C,GAAuC,CAClD16C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACf4f,KAAM,CACJxjB,eAAgB,OAChBn3B,KAAM,CACJuD,KAAM,WAGVq3C,KAAM,CACJzjB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVs3C,IAAK,CACH1jB,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHu3C,GAA4C,CACvD96C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACf0C,SAAU,CACRtG,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV2Q,IAAK,CACHijB,eAAgB,MAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,YAK/Bw3C,SAAU,CACR5jB,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,uBASZkgB,GAAoD,CAC/Dh7C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,wBACXC,gBAAiB,CACf90B,OAAQ,CACNkxB,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGViI,QAAS,CACP2rB,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBAGfmgB,SAAU,CACR9jB,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV23C,WAAY,CACV/jB,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV43C,UAAW,CACThkB,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH63C,GAAsD,CACjEp7C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,0BACXC,gBAAiB,CACf0C,SAAU,CACRtG,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV03C,SAAU,CACR9jB,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV23C,WAAY,CACV/jB,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV43C,UAAW,CACThkB,eAAgB,aAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH83C,GAAgD,CAC3Dr7C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,oBACXC,gBAAiB,CACfkgB,SAAU,CACR9jB,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVoT,OAAQ,CACNwgB,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,aAOpB+3C,GAAgD,CAC3Dt7C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,oBACXC,gBAAiB,CACf90B,OAAQ,CACNkxB,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGViI,QAAS,CACP2rB,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBAGfmgB,SAAU,CACR9jB,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0vC,UAAW,CACT9b,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,gBASPssC,GAAuC,CAClD7vC,KAAM,CACJuD,KAAM,YACNu3B,UAAW,WACXC,gBAAiB,CACf4D,SAAU,CACRxH,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHg4C,GAAqD,CAChEv7C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,yBACXC,gBAAiB,CACf4D,SAAU,CACRxH,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVk6B,SAAU,CACRtG,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHi4C,GAA8C,CACzDx7C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBACXC,gBAAiB,CACfkgB,SAAU,CACR9jB,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0vC,UAAW,CACT9b,eAAgB,YAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,eASxB+3B,GAAyC,CACpDt7B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aACXC,gBAAiB,CACfvU,OAAQ,CACN2Q,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHk4C,GAAmD,CAC9Dz7C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,uBACXC,gBAAiB,CACf90B,OAAQ,CACNkxB,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGViI,QAAS,CACP2rB,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBAGf6D,SAAU,CACRxH,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV03C,SAAU,CACR9jB,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHm4C,GAA4C,CACvD17C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACf0C,SAAU,CACRtG,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHo4C,GAA4C,CACvD37C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,gBACXC,gBAAiB,CACf6gB,cAAe,CACbzkB,eAAgB,iBAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHs4C,GAAoD,CAC/D77C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,wBACXC,gBAAiB,CACf0C,SAAU,CACRtG,eAAgB,WAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGV0C,OAAQ,CACNkxB,eAAgB,SAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGViI,QAAS,CACP2rB,eAAgB,UAChBn3B,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBAORghB,GAA8C,CACzD97C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,kBACXC,gBAAiB,CACfh2B,QAAS,CACPoyB,eAAgB,UAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOHw4C,GAAyC,CACpD/7C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,aACXC,gBAAiB,CACfihB,WAAY,CACV7kB,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH04C,GAA+C,CAC1Dj8C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,mBACXC,gBAAiB,CACfmhB,WAAY,CACV/kB,eAAgB,cAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVsG,KAAM,CACJstB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,cAOH44C,GAA6C,CACxDn8C,KAAM,CACJuD,KAAM,YACNu3B,UAAW,iBACXC,gBAAiB,CACflxB,KAAM,CACJstB,eAAgB,OAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,aACNxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,aCzhBpBwiC,GAAkC,CAC7CH,cAAe,CAAC,UAAW,eAC3B5O,OAAQ,CACNjP,aAAc,mBACd8U,YAAY,EACZ1F,eAAgB,eAChBn3B,KAAM,CACJuD,KAAM,YAKC01B,GAA2B,CACtC2M,cAAe,OACf5O,OAAQolB,IAGGzW,GAA6B,CACxCC,cAAe,SACf5O,OAAQ,CACNjP,aAAc,mBACd8U,YAAY,EACZ1F,eAAgB,SAChBn3B,KAAM,CACJuD,KAAM,YAKCsiC,GAA+B,CAC1CD,cAAe,QACf5O,OAAQ,CACNG,eAAgB,QAChB6D,UAAU,EACVh7B,KAAM,CACJuD,KAAM,WAGVuiC,cAAc,GAGHO,GAA4B,CACvCT,cAAe,OACf5O,OAAQqlB,IAGGC,GAA4B,CACvC1W,cAAe,OACf5O,OAAQulB,IAGGC,GAA4B,CACvC5W,cAAe,OACf5O,OAAQylB,IAGGC,GAA4B,CACvC9W,cAAe,OACf5O,OAAQ2lB,IAGGC,GAA4B,CACvChX,cAAe,OACf5O,OAAQ6lB,IAGGC,GAA4B,CACvClX,cAAe,OACf5O,OAAQ+lB,IAGGC,GAA4B,CACvCpX,cAAe,OACf5O,OAAQimB,IC7CH,MAAMC,WAAiB1W,GAAAA,GAQ5BrjC,WAAAA,CAAY0iC,EAAer6B,GAAkC,IAAA+W,EAAAkkB,EAC3D,QAAcv6B,IAAV25B,EACF,MAAM,IAAI3iC,MAAM,0BAIbsI,IACHA,EAAU,CAAC,GAEb,MAAMk7B,EAAmC,CACvCC,mBAAoB,mCAGhBC,EAAiB,iCACjBC,EACJr7B,EAAQs7B,kBAAoBt7B,EAAQs7B,iBAAiBD,gBACjD,GAAGr7B,EAAQs7B,iBAAiBD,mBAAmBD,IAC/C,GAAGA,IAEHG,EAAsB,IACvBL,KACAl7B,EACHs7B,iBAAkB,CAChBD,mBAEFG,SAA6C,QAArCzkB,EAAkB,QAAlBkkB,EAAEj7B,EAAQw7B,gBAAQ,IAAAP,EAAAA,EAAIj7B,EAAQy7B,eAAO,IAAA1kB,EAAAA,EAAI,WAEnDlf,MAAM0jC,GAENzjC,KAAKuiC,MAAQA,CACf,CAOAsX,WAAAA,CACElkB,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACR4xC,GAEJ,CAOAC,eAAAA,CACEpkB,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACR8xC,GAEJ,CAOAC,gBAAAA,CACEtkB,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACRgyC,GAEJ,CAOAC,wBAAAA,CACExkB,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACRkyC,GAEJ,CAOAC,cAAAA,CACE1kB,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACRoyC,GAEJ,CAOAC,sBAAAA,CACE5kB,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACRsyC,GAEJ,CAOAC,oBAAAA,CACE9kB,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACRwyC,GAEJ,CAOAC,oBAAAA,CACEhlB,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACR0yC,GAEJ,CAOAC,gBAAAA,CACEllB,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACR4yC,GAEJ,CAOAC,kBAAAA,CACEplB,EACAztB,GAEA,OAAOlI,KAAK4jC,qBACV,CAAEjO,OAAMztB,WACR8yC,GAEJ,CAMAv5C,OAAAA,CAAQyG,GACN,OAAOlI,KAAK4jC,qBAAqB,CAAE17B,WAAW+yC,GAChD,CAMAvC,UAAAA,CAAWxwC,GACT,OAAOlI,KAAK4jC,qBAAqB,CAAE17B,WAAWgzC,GAChD,CAMAlJ,GAAAA,CAAI9pC,GACF,OAAOlI,KAAK4jC,qBAAqB,CAAE17B,WAAWizC,GAChD,EAGF,MAAM3nB,GAAa0P,GAAAA,GAA4BsE,GAAqB,GAE9DsS,GAAqD,CACzDttB,KAAM,OACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACVjrC,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CACP17B,KAAM,CAAEuD,KAAM,aAAcxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,aAK3D,IAAK,CACH0nC,WAAY,CACVjrC,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CAAE17B,KAAM,CAAEuD,KAAM,YAAau3B,UAAW,oBAGrDoQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACX1U,WAAUA,IAENwmB,GAAyD,CAC7DxtB,KAAM,WACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACVjrC,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CAAE17B,KAAM,CAAEuD,KAAM,YAAau3B,UAAW,oBAGrDoQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACX1U,WAAUA,IAEN0mB,GAA0D,CAC9D1tB,KAAM,sBACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAY,CAAEjrC,KAAM,CAAEuD,KAAM,SAE9B,IAAK,CACH0nC,WAAY,CACVjrC,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CAAE17B,KAAM,CAAEuD,KAAM,YAAau3B,UAAW,oBAGrDoQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACX1U,WAAUA,IAEN4mB,GAAkE,CACtE5tB,KAAM,+BACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACVjrC,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CAAE17B,KAAM,CAAEuD,KAAM,YAAau3B,UAAW,oBAGrDoQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACX1U,WAAUA,IAEN8mB,GAAwD,CAC5D9tB,KAAM,mBACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACVjrC,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CAAE17B,KAAM,CAAEuD,KAAM,YAAau3B,UAAW,oBAGrDoQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACX1U,WAAUA,IAENgnB,GAAgE,CACpEhuB,KAAM,4BACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACX1U,WAAUA,IAENknB,GAA8D,CAClEluB,KAAM,0BACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACVjrC,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CAAE17B,KAAM,CAAEuD,KAAM,YAAau3B,UAAW,oBAGrDoQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACX1U,WAAUA,IAENonB,GAA8D,CAClEpuB,KAAM,kBACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACX1U,WAAUA,IAENsnB,GAA0D,CAC9DtuB,KAAM,sBACNib,WAAY,OACZC,UAAW,CACT,IAAK,CAAC,EACN,IAAK,CACHC,WAAY,CACVjrC,KAAM,CACJuD,KAAM,WACNm4B,QAAS,CAAE17B,KAAM,CAAEuD,KAAM,YAAau3B,UAAW,oBAGrDoQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACX1U,WAAUA,IAENwnB,GAA4D,CAChExuB,KAAM,oBACNib,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACX1U,WAAUA,IAENynB,GAAiD,CACrDzuB,KAAM,WACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,WAAUA,IAEN0nB,GAAoD,CACxD1uB,KAAM,eACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,WAAUA,IAEN2nB,GAA6C,CACjD3uB,KAAM,OACNib,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACVjrC,KAAM,CAAEuD,KAAM,aAAcxB,MAAO,CAAE/B,KAAM,CAAEuD,KAAM,WAGvD,IAAK,CACH0nC,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnBtU,WAAUA,ICxeG,MAAe4nB,ICXf,MAAMC,WAAqBD,GAQxCv7C,WAAAA,CAAYy7C,GAAqB,cAAEjT,GAAgB,GAAuC,CAAC,GAGzF,IAAI5mC,EAFJ1B,QAGA,MAAMuoC,EAAap/B,UACF,MAAXzH,IACJA,SAAiBzB,KAAKgyC,IAAI0G,WAAWlQ,IAAOkQ,YADhBj3C,GAK9BzB,KAAKgyC,IAAM,IAAIuJ,GAAYD,EAAa,CACtC7S,yBAAyB,EACzBC,mBAAoB,IACfL,EAAgB,GAAK,CAACnS,GAAsB,WAAYoS,EAAY,QAAS,UAChFvS,IAAyBJ,IACvB,IAAI71B,EAAU,GAYd,MAXI,WAAY61B,IACd71B,GAAW,IAAI61B,EAAKzS,SACC,MAAlByS,EAAK6lB,UAAoB,OAAO7lB,EAAK6lB,YAAc,KAEtC,MAAb7lB,EAAK+G,KAAe,KAAKlH,KAAKC,UAAUE,EAAK+G,SAAW,MAEzD/Z,MAAMwxB,QAAQxe,KAChB71B,GAAW,KAAK61B,EACb7xB,KAAKqzB,GAAM,GAAGA,EAAEz6B,QAAQy6B,EAAEggB,IAAIG,QAAQngB,EAAEggB,IAAII,QAAQpgB,EAAEr3B,UAAuB,MAAbq3B,EAAEmE,QAAkB,KAAKnE,EAAEmE,WAAa,OACxGl6B,KAAK,SAEHtB,CAAO,OAIpBE,KAAKgyC,IAAIrJ,SAASG,aAAa,CAAE7oC,KAAM8oC,GAAAA,KACvC/oC,KAAKgyC,IAAIrJ,SAASG,aAAa,CAAE7oC,KAAM+oC,GAAAA,IACzC,CAEA,yBAAM6D,CACJD,EACAE,GAEA,IACE,MAAM2O,QAAez7C,KAAKgyC,IAAI+H,gBAAgB,CAAEzzC,KAAMsmC,EAAY1kC,QAAS,CAAE4kC,gBACvE2K,EAAWgE,EAAOhE,SAAS3zC,KAAI,EAAGpH,UAASg/C,KAAcA,IACzDj9B,EAAM,IAAKg9B,EAAQhE,YAEzB,OAAOh5B,CACT,CAAE,MAAOxU,GACP,GAAIA,aAAiBW,GAAAA,IAAkC,MAArBX,EAAMY,WACtC,MAAM,IAAIxK,EAAc4J,EAAMnK,SAEhC,MAAMmK,CACR,CACF,CAGA,aAAM+iC,CAAQxgB,GACZ,MAAM,IAAIlrB,EAAoB,mDAChC,CAEA,6BAAMq6C,CACJ/O,EACAE,GAEA,IACE,aAAa9sC,KAAKgyC,IAAI6H,YAAY,CAAEvzC,KAAMsmC,EAAY1kC,QAAS,CAAE4kC,eACnE,CAAE,MAAO7iC,GACP,GAAIA,aAAiBW,GAAAA,IAAkC,MAArBX,EAAMY,WACtC,MAAM,IAAIxK,EAAc4J,EAAMnK,SAEhC,MAAMmK,CACR,CACF,CAGA,iBAAM2xC,CAAYpvB,GAChB,MAAM,IAAIlrB,EAAoB,mDAChC,CAEA,0BAAM+tC,CACJlV,EACAyS,EACAE,GAEA,IAEE,aADM9sC,KAAKgyC,IAAI6I,iBAAiB,CAAE1gB,WAAUx3B,OAAQiqC,EAAY1kC,QAAS,CAAE4kC,iBACpE,CACT,CAAE,MACA,OAAO,CACT,CACF,CAGA,cAAMwC,CAASnV,EAAqC3N,GAClD,MAAM,IAAIlrB,EAAoB,mDAChC,CAEA,aAAMG,GACJ,aAAczB,KAAKgyC,IAAIvwC,WAAWA,OACpC,E,2DClIA3E,EAAAA,EAAAA,IAAwC,OAAlCD,OADRg/C,EAAAA,EAAAA,IAAA,CAAA5xC,MACiBrM,EAAAqM,U,QAAYrM,EAAAk+C,MAAI,E,CAIjC,QACEC,MAAO,CACLt9C,MAAO,CAAE/B,KAAM,CAAC+M,OAAQkZ,MAAO+vB,OAAQj/B,OAAQtK,SAAU6yC,QAAS,OAEpEz1C,KAAMA,KAAA,CACJu1C,KAAM,GACN7xC,OAAO,IAETgyC,MAAO,CACLx9C,MAAO,CACL,aAAMizC,CAAQjzC,GACPA,GAAOy2B,MAIZl1B,KAAK87C,KAAO,wBACZ97C,KAAKiK,OAAQ,EACbjK,KAAK87C,WAAar9C,EAAMy2B,MACrB7hB,GAAWrT,KAAKk8C,cAAc7oC,KAC9BpJ,IACCtE,QAAQ4T,KAAKtP,GACbjK,KAAKiK,OAAQ,EACNA,MAVTjK,KAAK87C,KAAO97C,KAAKk8C,cAAcz9C,EAanC,EACA09C,WAAW,IAGfnL,QAAS,CACPkL,aAAAA,CAAcz9C,GACZ,MAAqB,kBAAVA,EAA2BA,EAC/B+2B,KAAKC,UACVh3B,GACA,CAAC8tB,EAAGhU,IAAoB,kBAANA,EAAiB,GAAGA,gBAAkBA,GACxD,EAEJ,I,YCrCJ,MAAM6jC,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,UpFgEA,IACEnpB,WAAY,CAAEopB,MAAKA,IACnB91C,KAAMA,KAAA,CACJ1I,YAAay+C,WACb78C,QAAS,GACTJ,eAAgBwI,OAAO00C,SAAW10C,OAClCxJ,SAAU,GACVF,QAAS,GACTO,eAAgB,KAChBG,SAAU,KACVD,aAAc,KACdO,sBAAuB,OAEzB6xC,QAAS,CACPtzC,QAAAA,GACO,eAAe2X,KAAKrV,KAAKnC,cAAiBmC,KAAKnC,YAAYoa,WAAW,OACzEjY,KAAKnC,YAAc,UAAYmC,KAAKnC,aAEtCmC,KAAKP,QAAU,GACfO,KAAKw8C,WAAU,KACbx8C,KAAKP,QAAUO,KAAKnC,WAAW,GAEnC,EACAuB,eAAAA,EAAgB,SAAE0gB,EAAW,IAAI,SAAE28B,EAAW,GAAM,CAAC,GACnD,MAAM1+C,EAASiC,KAAKX,eAAiBwI,OAAO00C,OAASv8C,KAAK08C,MAAMC,KAAKC,cAC/DtJ,EAAa,IAAI3rC,GAA+B,CAAE5J,WACxDiC,KAAKnB,SAAWmB,KAAK68C,MAAMhH,aAAavC,GAExCtzC,KAAK68C,MAAMz9C,gBAAgBY,KAAKnB,UAChC,MAAMi+C,EAAaC,aAAY,KAG7B,GAFA/8C,KAAK68C,MAAMz9C,gBAAgBY,KAAKnB,UAChC49C,GAAY,GACPA,EAAU,OAAOz8C,KAAKb,uBAAuB,GACjD2gB,GAEH9f,KAAKb,sBAAwB,KAC3B69C,cAAcF,GAEd,MAAM5H,EAASl1C,KAAK68C,MAAM5H,WAAWj1C,KAAKnB,UACtCq2C,EAAOpnB,SAAW5nB,GAAW8vC,gCAC/Bh2C,KAAK68C,MAAMjH,gBAAgB51C,KAAKnB,UAElCmB,KAAKb,sBAAwB,IAAI,CAErC,EACAD,UAAAA,GAEE,MAAMg2C,EAASl1C,KAAK68C,MAAM5H,WAAWj1C,KAAKnB,UACtCq2C,EAAOpnB,SAAW5nB,GAAWuvC,WAC/BP,EAAOE,IAAI3B,OAAOxtC,GAAQgwC,gBAAiB,MAG7Cj2C,KAAK68C,MAAMjH,gBAAgB51C,KAAKnB,UAChCmB,KAAKnB,SAAW,IAClB,EACA,mBAAME,GACJiB,KAAK7B,QAAU6B,KAAK68C,MAAMpK,YAAY9rC,MAAM+rB,GAAMA,IAAM1yB,KAAK7B,UAC7D6B,KAAK68C,MAAM9J,cAAc/yC,KAAK7B,QAChC,EACA,gBAAMa,GACJ,MAAMi+C,SAAej9C,KAAK68C,MAAMrK,kBAAkB1uC,KAAI,EAAG7D,UAAWA,IACpED,KAAK3B,SAAW4+C,GAAOA,EAAM9oC,QAAQnU,KAAK3B,UAAY,GAAK4+C,EAAM5vC,QACjErN,KAAK68C,MAAMvK,WAAWtyC,KAAK3B,SAC7B,EACA6+C,kBAAAA,GACE,IAAKl9C,KAAKnB,SAER,YADAmB,KAAKpB,aAAe,MAGtB,MAAMs2C,EAASl1C,KAAK68C,MAAM5H,WAAWj1C,KAAKnB,UAC1CmB,KAAKpB,aAAes2C,EAAOpnB,MAC7B,GAEFqvB,OAAAA,GACEn9C,KAAKtC,WAEL,MAAM0/C,EAAW,CAAC,EACZC,EAAsBC,GAAe,CAACC,EAAQzgC,EAAYhV,KAC9D,IAAK0Y,QAAQ,CACX,UAAU48B,EAASG,GAAQt9C,gBAAgBs9C,QAAaz1C,aAAkBw1C,IAC1EjB,GAAMrL,QAAQkL,cAAcp/B,IAC5B1b,KAAK,OACL,MAAM,IAAI4F,EACZ,EAGF,MAAMw2C,UAA+BC,GACnC,qBAAM9rB,CAAgBnW,GAAMm7B,gBAAiBl6C,EAAE,WAAEi6C,KAAexuC,GAAY,CAAC,GAC3E,GAAU,MAANzL,EAAY,CACd,MAAMixC,EAAM,IAAKxlC,EAASw1C,WAAYriC,GAASG,IAC3CkyB,EAAIf,aAAYe,EAAIf,WAAa,cACjCe,EAAI96B,SAAQ86B,EAAI96B,OAAS,UAC7ByqC,EAAmB,oBAAoB7hC,IAAvC6hC,CAA6C5gD,EAAIixC,EAAKgJ,EACxD,CACA,OAAO32C,MAAM4xB,gBAAgBnW,EAAItT,EACnC,CAEA,iBAAM2pB,CAAY/xB,GAAW62C,gBAAiBl6C,EAAE,WAAEi6C,KAAexuC,GAAY,CAAC,GAI5E,OAHU,MAANzL,GACF4gD,EAAmB,gBAAgBv9C,IAAnCu9C,CAA8C5gD,EAAIyL,EAASwuC,GAEtD32C,MAAM8xB,YAAY/xB,EAASoI,EACpC,CAEA,mBAAM4pB,CAAcvrB,EAAMqK,GAAO+lC,gBAAiBl6C,EAAE,WAAEi6C,KAAexuC,IACnE,GAAU,MAANzL,EAAY,CACd,MAAMkhD,GAAW,IAAI/tC,GAAAA,cAAeY,YAAYI,GAC1CgtC,GAAc,IAAI/tC,GAAAA,0BAA2BguC,eAAet3C,EAAMo3C,GAClEjQ,EAAM,IAAKxlC,EAAS0I,MAAKgtC,eAC/BP,EAAmB,mBAAmB92C,IAAtC82C,CAA8C5gD,EAAIixC,EAAKgJ,EACzD,CACA,OAAO32C,MAAM+xB,cAAcvrB,EAAMqK,EAAK1I,EACxC,CAEA,UAAMwpB,CAAKnrB,GAAQowC,gBAAiBl6C,EAAE,WAAEi6C,KAAexuC,GAAY,CAAC,GAIlE,OAHU,MAANzL,GACF4gD,EAAmB,iBAAiB92C,IAApC82C,CAA4C5gD,EAAIyL,EAASwuC,GAEpD32C,MAAM2xB,KAAKnrB,EAAM2B,EAC1B,CAEA,oBAAM8pB,CAAeC,GAAc0kB,gBAAiBl6C,EAAE,WAAEi6C,KAAexuC,IACrE,GAAU,MAANzL,EAAY,CACd,MAAMixC,EAAM,IAAKxlC,KAAYsqB,GAAiBP,IAC9CorB,EAAmB,kBAAnBA,CAAsC5gD,EAAIixC,EAAKgJ,EACjD,CACA,OAAO32C,MAAMiyB,eAAeC,EAAY/pB,EAC1C,CAEA,eAAOupB,GACL,OAAO,IAAI+rB,EAAuBz9C,MAAM0xB,WAAWJ,UACrD,EAGFrxB,KAAK68C,MAAQ,IAAIxI,GAAY,CAC3B53C,GAAIoL,OAAOC,OACXpL,KAAMqJ,GAAY8B,OAClBgqC,MAAO,CACL,CAAE5xC,KAAM,SAAU6xC,SAAU,IAAI7O,GAAK,iCACrC,CAAEhjC,KAAM,aAAc6xC,SAAU,IAAI7O,GAAK,kCAE3CvgB,SAAU,CACR,IAAI86B,EAAuB,yDAC3BA,EAAuB/rB,YAEzBkb,WAAY,IAAI0O,GAAa,iCAC7Bp7C,KAAM,gBACNq0C,aAAcA,CAACiJ,EAAQhrC,EAAQzK,KAC7B,IAAK0Y,QAAQ,UAAUjO,EAAOtS,gBAAgBs9C,QAAaz1C,qBACzD,MAAM,IAAIZ,GAEZk2C,EAASG,GAAUhrC,EACnBlJ,YAAW,IAAMrJ,KAAKb,yBAAwB,EAEhDo1C,eAAgB8I,EAAmB,gBACnC7I,cAAe6I,EAAmB,gBAClC73C,aAAe3G,IACb8G,QAAQC,IAAI,sBAAuB/G,GACnCmB,KAAKnB,SAAW,IAAI,IAIpBmB,KAAKX,gBAAgBW,KAAKZ,kBAE9BY,KAAK3B,SAAW2B,KAAK68C,MAAMxK,kBAC1BryC,KAAK7B,SAAW6B,KAAK68C,MAAMpK,YAE5BzyC,KAAK89C,QACH,EAAG3/C,UAASE,cAAe,CAACF,EAASE,KACrC,EAAEF,MACA6B,KAAKtB,eAAiBsB,KAAK68C,MAAM/7B,WAAW3iB,EAAQ,GAEtD,CAAEg+C,WAAW,IAIfY,aAAY,IAAM/8C,KAAKk9C,sBAAsB,KAC7Cl9C,KAAK89C,QAAO,EAAGj/C,cAAe,CAACA,KAAW,IAAMmB,KAAKk9C,sBAAsB,CAAEf,WAAW,GAC1F,GqFjPF,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS4B,GAAQ,CAAC,YAAY,qBAEzF,WCPAC,EAAAA,EAAAA,IAAUC,IAAKC,MAAM,O,sBCFjBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBz1C,IAAjB01C,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAU11C,KAAK61C,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAGpEI,EAAOD,OACf,CAGAH,EAAoBM,EAAID,E,WCzBxB,IAAIE,EAAW,GACfP,EAAoBQ,EAAI,SAASvrC,EAAQwrC,EAAUr7C,EAAIs7C,GACtD,IAAGD,EAAH,CAMA,IAAIE,EAAeC,IACnB,IAASnsB,EAAI,EAAGA,EAAI8rB,EAAStxC,OAAQwlB,IAAK,CACrCgsB,EAAWF,EAAS9rB,GAAG,GACvBrvB,EAAKm7C,EAAS9rB,GAAG,GACjBisB,EAAWH,EAAS9rB,GAAG,GAE3B,IAJA,IAGIosB,GAAY,EACPC,EAAI,EAAGA,EAAIL,EAASxxC,OAAQ6xC,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAar1C,OAAOkJ,KAAKyrC,EAAoBQ,GAAGO,OAAM,SAASlgD,GAAO,OAAOm/C,EAAoBQ,EAAE3/C,GAAK4/C,EAASK,GAAK,IAChKL,EAASO,OAAOF,IAAK,IAErBD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbN,EAASS,OAAOvsB,IAAK,GACrB,IAAIwsB,EAAI77C,SACEoF,IAANy2C,IAAiBhsC,EAASgsC,EAC/B,CACD,CACA,OAAOhsC,CArBP,CAJCyrC,EAAWA,GAAY,EACvB,IAAI,IAAIjsB,EAAI8rB,EAAStxC,OAAQwlB,EAAI,GAAK8rB,EAAS9rB,EAAI,GAAG,GAAKisB,EAAUjsB,IAAK8rB,EAAS9rB,GAAK8rB,EAAS9rB,EAAI,GACrG8rB,EAAS9rB,GAAK,CAACgsB,EAAUr7C,EAAIs7C,EAwB/B,C,eC5BAV,EAAoBlyB,EAAI,SAASqyB,EAASe,GACzC,IAAI,IAAIrgD,KAAOqgD,EACXlB,EAAoBmB,EAAED,EAAYrgD,KAASm/C,EAAoBmB,EAAEhB,EAASt/C,IAC5EwK,OAAO+1C,eAAejB,EAASt/C,EAAK,CAAEwgD,YAAY,EAAM7mC,IAAK0mC,EAAWrgD,IAG3E,C,eCPAm/C,EAAoBsB,EAAI,WACvB,GAA0B,kBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAO3/C,MAAQ,IAAI4/C,SAAS,cAAb,EAChB,CAAE,MAAOzoB,GACR,GAAsB,kBAAXtvB,OAAqB,OAAOA,MACxC,CACA,CAPuB,E,eCAxBu2C,EAAoBmB,EAAI,SAASM,EAAKC,GAAQ,OAAOr2C,OAAOgoC,UAAUsO,eAAep3C,KAAKk3C,EAAKC,EAAO,C,eCCtG1B,EAAoBiB,EAAI,SAASd,GACX,qBAAXyB,QAA0BA,OAAOC,aAC1Cx2C,OAAO+1C,eAAejB,EAASyB,OAAOC,YAAa,CAAExhD,MAAO,WAE7DgL,OAAO+1C,eAAejB,EAAS,aAAc,CAAE9/C,OAAO,GACvD,C,eCDA,IAAIyhD,EAAkB,CACrB,IAAK,GAaN9B,EAAoBQ,EAAEM,EAAI,SAASiB,GAAW,OAAoC,IAA7BD,EAAgBC,EAAgB,EAGrF,IAAIC,EAAuB,SAASC,EAA4B95C,GAC/D,IAKI83C,EAAU8B,EALVtB,EAAWt4C,EAAK,GAChB+5C,EAAc/5C,EAAK,GACnBg6C,EAAUh6C,EAAK,GAGIssB,EAAI,EAC3B,GAAGgsB,EAASrO,MAAK,SAAS/zC,GAAM,OAA+B,IAAxByjD,EAAgBzjD,EAAW,IAAI,CACrE,IAAI4hD,KAAYiC,EACZlC,EAAoBmB,EAAEe,EAAajC,KACrCD,EAAoBM,EAAEL,GAAYiC,EAAYjC,IAGhD,GAAGkC,EAAS,IAAIltC,EAASktC,EAAQnC,EAClC,CAEA,IADGiC,GAA4BA,EAA2B95C,GACrDssB,EAAIgsB,EAASxxC,OAAQwlB,IACzBstB,EAAUtB,EAAShsB,GAChBurB,EAAoBmB,EAAEW,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAO/B,EAAoBQ,EAAEvrC,EAC9B,EAEImtC,EAAqB54C,KAAK,6BAA+BA,KAAK,8BAAgC,GAClG44C,EAAmBz9B,QAAQq9B,EAAqBzhC,KAAK,KAAM,IAC3D6hC,EAAmBz5C,KAAOq5C,EAAqBzhC,KAAK,KAAM6hC,EAAmBz5C,KAAK4X,KAAK6hC,G,IC/CvF,IAAIC,EAAsBrC,EAAoBQ,OAAEh2C,EAAW,CAAC,MAAM,WAAa,OAAOw1C,EAAoB,KAAO,IACjHqC,EAAsBrC,EAAoBQ,EAAE6B,E","sources":["webpack://wallet-iframe/./src/App.vue","webpack://wallet-iframe/../../src/utils/errors.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://wallet-iframe/../../src/aepp-wallet-communication/schema.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://wallet-iframe/../../src/account/Base.ts","webpack://wallet-iframe/../../src/utils/other.ts","webpack://wallet-iframe/../../src/utils/encoder-types.ts","webpack://wallet-iframe/../../src/utils/encoder.ts","webpack://wallet-iframe/../../src/utils/crypto.ts","webpack://wallet-iframe/../../src/utils/typed-data.ts","webpack://wallet-iframe/../../../src/tx/builder/constants.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ct-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/abi-version.ts","webpack://wallet-iframe/../../src/utils/bytes.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/address.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/array.ts","webpack://wallet-iframe/../../../src/tx/builder/helpers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/u-int.ts","webpack://wallet-iframe/../../src/utils/bignumber.ts","webpack://wallet-iframe/../../src/utils/amount-formatter.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/encoded.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/entry.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/enumeration.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-price.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/field.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-id.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/nonce.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/query-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/raw.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/string.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/transaction.ts","webpack://wallet-iframe/../../src/utils/wrap-proxy.ts","webpack://wallet-iframe/../src/chain.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ttl.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-default.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/constants.ts","webpack://wallet-iframe/../../../src/tx/builder/schema.ts","webpack://wallet-iframe/../../../src/tx/builder/common.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/boolean.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/map.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/mptree.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/wrapped.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/index.ts","webpack://wallet-iframe/../../../src/tx/builder/index.ts","webpack://wallet-iframe/../../src/account/Memory.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/index.ts","webpack://wallet-iframe/../../src/utils/semver-satisfies.ts","webpack://wallet-iframe/../../src/utils/autorest.ts","webpack://wallet-iframe/../../../../src/apis/node/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/node/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/node/node.ts","webpack://wallet-iframe/../src/Node.ts","webpack://wallet-iframe/../../src/tx/transaction-signer.ts","webpack://wallet-iframe/../../src/tx/execution-cost.ts","webpack://wallet-iframe/../../src/tx/validator.ts","webpack://wallet-iframe/../src/send-transaction.ts","webpack://wallet-iframe/../src/spend.ts","webpack://wallet-iframe/../../src/contract/Contract.ts","webpack://wallet-iframe/../../src/contract/ga.ts","webpack://wallet-iframe/../src/AeSdkMethods.ts","webpack://wallet-iframe/../src/AeSdkBase.ts","webpack://wallet-iframe/../src/AeSdk.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://wallet-iframe/../../src/utils/json-big.ts","webpack://wallet-iframe/../src/AeSdkWallet.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/compiler/compiler.ts","webpack://wallet-iframe/../../../src/contract/compiler/Base.ts","webpack://wallet-iframe/../../../src/contract/compiler/Http.ts","webpack://wallet-iframe/./src/Value.vue","webpack://wallet-iframe/./src/Value.vue?2a90","webpack://wallet-iframe/./src/App.vue?7ccd","webpack://wallet-iframe/./src/main.js","webpack://wallet-iframe/webpack/bootstrap","webpack://wallet-iframe/webpack/runtime/chunk loaded","webpack://wallet-iframe/webpack/runtime/define property getters","webpack://wallet-iframe/webpack/runtime/global","webpack://wallet-iframe/webpack/runtime/hasOwnProperty shorthand","webpack://wallet-iframe/webpack/runtime/make namespace object","webpack://wallet-iframe/webpack/runtime/jsonp chunk loading","webpack://wallet-iframe/webpack/startup"],"sourcesContent":["<template>\n  <input id=\"toggle-aepp\" type=\"checkbox\" />\n  <h2>\n    Wallet Iframe\n    <label for=\"toggle-aepp\" />\n  </h2>\n\n  <div class=\"group\">\n    <div>\n      <div>Aepp URL</div>\n      <form\n        novalidate\n        @submit.prevent=\"navigate\"\n      >\n        <input\n          type=\"url\"\n          v-model=\"nextAeppUrl\"\n          @focus=\"$event.target.select()\"\n        >\n      </form>\n    </div>\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Node</div>\n      <div>{{ nodeName }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>RPC client</div>\n      <div>status: {{ clientStatus ?? 'no client' }}, id: {{ clientId ?? 'not defined' }}</div>\n    </div>\n\n    <button @click=\"switchAccount\">Switch Account</button>\n    <button @click=\"switchNode\">Switch Node</button>\n\n    <button\n      v-if=\"clientStatus === 'CONNECTED'\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else\n      @click=\"() => (stopSharingWalletInfo ?? shareWalletInfo)()\"\n    >\n      {{ stopSharingWalletInfo ? 'Stop sharing' : 'Share wallet info' }}\n    </button>\n  </div>\n\n  <iframe\n    v-if=\"!runningInFrame\"\n    ref=\"aepp\"\n    :src=\"aeppUrl\"\n  />\n</template>\n\n<script>\nimport {\n  MemoryAccount, AeSdkWallet, Node, CompilerHttp,\n  BrowserWindowMessageConnection, METHODS, WALLET_TYPE, RPC_STATUS,\n  RpcConnectionDenyError, RpcRejectedByUserError, unpackTx, unpackDelegation,\n} from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    nextAeppUrl: process.env.VUE_APP_AEPP_URL ?? `http://${location.hostname}:9001`,\n    aeppUrl: '',\n    runningInFrame: window.parent !== window,\n    nodeName: '',\n    address: '',\n    balancePromise: null,\n    clientId: null,\n    clientStatus: null,\n    stopSharingWalletInfo: null,\n  }),\n  methods: {\n    navigate() {\n      if (!/^https?:\\/\\//.test(this.nextAeppUrl) && !this.nextAeppUrl.startsWith('.')) {\n        this.nextAeppUrl = 'http://' + this.nextAeppUrl;\n      }\n      this.aeppUrl = '';\n      this.$nextTick(() => {\n        this.aeppUrl = this.nextAeppUrl;\n      });\n    },\n    shareWalletInfo({ interval = 5000, attempts = 5 } = {}) {\n      const target = this.runningInFrame ? window.parent : this.$refs.aepp.contentWindow;\n      const connection = new BrowserWindowMessageConnection({ target });\n      this.clientId = this.aeSdk.addRpcClient(connection);\n\n      this.aeSdk.shareWalletInfo(this.clientId);\n      const intervalId = setInterval(() => {\n        this.aeSdk.shareWalletInfo(this.clientId);\n        attempts -= 1;\n        if (!attempts) return this.stopSharingWalletInfo();\n      }, interval);\n\n      this.stopSharingWalletInfo = () => {\n        clearInterval(intervalId);\n        // TODO: replace with clientStatus\n        const client = this.aeSdk._getClient(this.clientId);\n        if (client.status === RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST) {\n          this.aeSdk.removeRpcClient(this.clientId);\n        }\n        this.stopSharingWalletInfo = null;\n      }\n    },\n    disconnect() {\n      // TODO: move to removeRpcClient (would be a semi-breaking change)\n      const client = this.aeSdk._getClient(this.clientId);\n      if (client.status === RPC_STATUS.CONNECTED) {\n        client.rpc.notify(METHODS.closeConnection, null);\n      }\n\n      this.aeSdk.removeRpcClient(this.clientId);\n      this.clientId = null;\n    },\n    async switchAccount() {\n      this.address = this.aeSdk.addresses().find((a) => a !== this.address);\n      this.aeSdk.selectAccount(this.address);\n    },\n    async switchNode() {\n      const names = (await this.aeSdk.getNodesInPool()).map(({ name }) => name);\n      this.nodeName = names[(names.indexOf(this.nodeName) + 1) % names.length];\n      this.aeSdk.selectNode(this.nodeName);\n    },\n    updateClientStatus() {\n      if (!this.clientId) {\n        this.clientStatus = null;\n        return;\n      }\n      const client = this.aeSdk._getClient(this.clientId);\n      this.clientStatus = client.status;\n    },\n  },\n  mounted() {\n    this.navigate();\n\n    const aeppInfo = {};\n    const genConfirmCallback = (actionName) => (aeppId, parameters, origin) => {\n      if (!confirm([\n        `Client ${aeppInfo[aeppId].name} with id ${aeppId} at ${origin} want to ${actionName}`,\n        Value.methods.valueToString(parameters),\n      ].join('\\n'))) {\n        throw new RpcRejectedByUserError();\n      }\n    };\n\n    class AccountMemoryProtected extends MemoryAccount {\n      async signTransaction(tx, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          const opt = { ...options, unpackedTx: unpackTx(tx) };\n          if (opt.onCompiler) opt.onCompiler = '<Compiler>';\n          if (opt.onNode) opt.onNode = '<Node>';\n          genConfirmCallback(`sign transaction ${tx}`)(id, opt, aeppOrigin);\n        }\n        return super.signTransaction(tx, options);\n      }\n\n      async signMessage(message, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign message ${message}`)(id, options, aeppOrigin);\n        }\n        return super.signMessage(message, options);\n      }\n\n      async signTypedData(data, aci, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const dataType = new TypeResolver().resolveType(aci);\n          const decodedData = new ContractByteArrayEncoder().decodeWithType(data, dataType);\n          const opt = { ...options, aci, decodedData };\n          genConfirmCallback(`sign typed data ${data}`)(id, opt, aeppOrigin);\n        }\n        return super.signTypedData(data, aci, options);\n      }\n\n      async sign(data, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign raw data ${data}`)(id, options, aeppOrigin);\n        }\n        return super.sign(data, options);\n      }\n\n      async signDelegation(delegation, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const opt = { ...options, ...unpackDelegation(delegation) };\n          genConfirmCallback('sign delegation')(id, opt, aeppOrigin);\n        }\n        return super.signDelegation(delegation, options);\n      }\n\n      static generate() {\n        return new AccountMemoryProtected(super.generate().secretKey);\n      }\n    }\n\n    this.aeSdk = new AeSdkWallet({\n      id: window.origin,\n      type: WALLET_TYPE.window,\n      nodes: [\n        { name: 'ae_uat', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'ae_mainnet', instance: new Node('https://mainnet.aeternity.io') },\n      ],\n      accounts: [\n        new AccountMemoryProtected('sk_2CuofqWZHrABCrM7GY95YSQn8PyFvKQadnvFnpwhjUnDCFAWmf'),\n        AccountMemoryProtected.generate(),\n      ],\n      onCompiler: new CompilerHttp('https://v8.compiler.aepps.com'),\n      name: 'Wallet Iframe',\n      onConnection: (aeppId, params, origin) => {\n        if (!confirm(`Client ${params.name} with id ${aeppId} at ${origin} want to connect`)) {\n          throw new RpcConnectionDenyError();\n        }\n        aeppInfo[aeppId] = params;\n        setTimeout(() => this.stopSharingWalletInfo());\n      },\n      onSubscription: genConfirmCallback('subscription'),\n      onAskAccounts: genConfirmCallback('get accounts'),\n      onDisconnect: (clientId) => {\n        console.log('disconnected client', clientId);\n        this.clientId = null;\n      },\n    });\n\n    if (this.runningInFrame) this.shareWalletInfo();\n\n    this.nodeName = this.aeSdk.selectedNodeName;\n    [this.address] = this.aeSdk.addresses();\n\n    this.$watch(\n      ({ address, nodeName }) => [address, nodeName],\n      ([address]) => {\n        this.balancePromise = this.aeSdk.getBalance(address);\n      },\n      { immediate: true },\n    );\n\n    // TODO: replace setInterval with subscription after refactoring\n    setInterval(() => this.updateClientStatus(), 1000);\n    this.$watch(({ clientId }) => [clientId], () => this.updateClientStatus(), { immediate: true });\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n\n<style lang=\"scss\" scoped>\ninput[id=toggle-aepp] {\n  display: none;\n}\n\nlabel[for=toggle-aepp]::after {\n  font-size: initial;\n  font-weight: initial;\n  text-decoration: underline dotted;\n  cursor: pointer;\n}\n\n@media (max-width: 450px), (max-height: 650px) {\n  input[id=toggle-aepp] {\n    &:checked ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Hide aepp';\n      }\n\n      .group {\n        display: none;\n      }\n    }\n\n    &:not(:checked) ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Show aepp';\n      }\n\n      iframe {\n        display: none;\n      }\n    }\n  }\n}\n</style>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  unsafeSign = 'data.unsafeSign',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signDelegation(\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\n// based on https://stackoverflow.com/a/61108377\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  AccountSecretKey = 'sk',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type AccountSecretKey = `${Encoding.AccountSecretKey}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import bs58 from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.AccountSecretKey,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.AccountSecretKey]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58.encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58.decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import nacl from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9; // TODO: don't use number for ae\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  SignedTx = 11,\n  SpendTx = 12,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelClientReconnectTx = 575,\n  ChannelSnapshotSoloTx = 59,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Ceres }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Ceres }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  if (name[2] === '-' && name[3] === '-') {\n    throw new ArgumentError('aens name', 'without \"-\" char in both the third and fourth positions', maybeName);\n  }\n  if (name[0] === '-') {\n    throw new ArgumentError('aens name', 'starting with no \"-\" char', maybeName);\n  }\n  if (name.at(-1) === '-') {\n    throw new ArgumentError('aens name', 'ending with no \"-\" char', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { EntryTag } from '../entry/constants';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\nexport default function genEntryField<T extends EntryTag = EntryTag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { packEntry }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(packEntry({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackEntry }) {\n      return unpackEntry(encode(buf, Encoding.Bytearray), tag);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport coinAmount from './coin-amount';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE } from '../constants';\nimport Node from '../../../Node';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nconst gasPriceCache: WeakMap<Node, { time: number; gasPrice: bigint }> = new WeakMap();\n\nexport async function getCachedIncreasedGasPrice(node: Node): Promise<bigint> {\n  const cache = gasPriceCache.get(node);\n  if (cache != null && cache.time > Date.now() - 20 * 1000) {\n    return cache.gasPrice;\n  }\n\n  const { minGasPrice, utilization } = (await node.getRecentGasPrices())[0];\n  let gasPrice = utilization < 70 ? 0n : BigInt(\n    new BigNumber(minGasPrice.toString()).times(1.01).integerValue().toFixed(),\n  );\n\n  const maxSafeGasPrice = BigInt(MIN_GAS_PRICE) * 100000n; // max microblock fee is 600ae or 35usd\n  if (gasPrice > maxSafeGasPrice) {\n    console.warn([\n      `Estimated gas price ${gasPrice} exceeds the maximum safe value for unknown reason.`,\n      `It will be limited to ${maxSafeGasPrice}.`,\n      'To overcome this restriction provide `gasPrice`/`fee` in options.',\n    ].join(' '));\n    gasPrice = maxSafeGasPrice;\n  }\n\n  gasPriceCache.set(node, { gasPrice, time: Date.now() });\n  return gasPrice;\n}\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode, denomination }: {\n      onNode?: Node;\n      denomination?: AE_AMOUNT_FORMATS;\n    },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `gasPrice` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return formatAmount(gasPrice, { targetDenomination: denomination });\n  },\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE, Tag } from '../constants';\nimport uInt from './u-int';\nimport coinAmount from './coin-amount';\nimport { getCachedIncreasedGasPrice } from './gas-price';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\nimport Node from '../../../Node';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the base gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base gas\n * @example\n * ```js\n * TX_BASE_GAS(Tag.ChannelForceProgressTx) => 30 * 15000\n * ```\n */\nconst TX_BASE_GAS = (txType: Tag): number => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return factor * BASE_GAS;\n};\n\n/**\n * Calculate gas for other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The other gas\n * @example\n * ```js\n * TX_OTHER_GAS(Tag.OracleResponseTx, 10, { relativeTtl: 12, innerTxSize: 0 })\n *  => 10 * 20 + Math.ceil(32000 * 12 / Math.floor(60 * 24 * 365 / 3))\n * ```\n */\nconst TX_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): number => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return txSize * GAS_PER_BYTE\n        + Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL));\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return (txSize - innerTxSize) * GAS_PER_BYTE;\n    default:\n      return txSize * GAS_PER_BYTE;\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate gas based on tx type and params\n */\nexport function buildGas(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_BASE_GAS(txObject.tag)\n    + TX_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    });\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = new BigNumber(MIN_GAS_PRICE).times(buildGas(rebuildTx(fee), unpackTx, buildTx));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\n// TODO: Get rid of this workaround. Transaction builder can't accept/return gas price instead of\n// fee because it may get a decimal gas price. So, it should accept the optional `gasPrice` even\n// if it is not a contract-related transaction. And use this `gasPrice` to calculate `fee`.\nconst gasPricePrefix = '_gas-price:';\n\nexport interface SerializeAettosParams {\n  rebuildTx: (params: any) => Encoded.Transaction;\n  unpackTx: typeof unpackTxType;\n  buildTx: typeof buildTxType;\n  _computingMinFee?: BigNumber;\n}\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode }: { onNode?: Node },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `fee` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return gasPricePrefix + gasPrice;\n  },\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee,\n    }: SerializeAettosParams,\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value?.startsWith(gasPricePrefix) === true\n      ? minFee.dividedBy(MIN_GAS_PRICE).times(_value.replace(gasPricePrefix, ''))\n      : new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1] & SerializeAettosParams,\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    if (typeof value === 'string' && value.startsWith(gasPricePrefix)) {\n      return uInt.serialize(this.serializeAettos(value, params, options));\n    }\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildGas } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildGas(rebuildTx(gasMax), unpackTx, buildTx);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\nimport { Tag } from '../constants';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number, params: { tag: Tag }) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    serialize(value: number, { tag }): Buffer {\n      if (Tag.GaAttachTx === tag && value !== 1) {\n        throw new ArgumentError('nonce', 'equal 1 if GaAttachTx', value);\n      }\n      return shortUInt.serialize(value);\n    },\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\nimport { isAddressValid } from '../../../utils/crypto';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\ntype NamePointerRaw = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default <AllowRaw extends boolean>(allowRaw: AllowRaw): {\n  serialize: (pointers: Array<AllowRaw extends true ? NamePointerRaw : NamePointer>) => Buffer[][];\n  deserialize: (\n    pointers: Array<[key: Buffer, id: Buffer]>,\n  ) => Array<AllowRaw extends true ? NamePointerRaw : NamePointer>;\n} => ({\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers) {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) {\n        payload = [...allowRaw ? [ID_TAG] : [], addressAny.serialize(id)];\n      }\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError('Raw pointer', `shorter than ${DATA_LENGTH_MAX + 1} bytes`, `${data.length} bytes`);\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers) {\n    return pointers.map(([bKey, bId]) => {\n      if (!allowRaw) return { key: bKey.toString(), id: addressAny.deserialize(bId) };\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      // TS can't figure out the real type depending on allowRaw\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray) as Encoded.AccountAddress;\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n});\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genTransactionField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      return unpackTx(encode(buf, Encoding.Transaction), tag);\n    },\n  };\n}\n","import { ArgumentError } from './errors';\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb();\n      if (target == null) throw new ArgumentError('wrapped value', 'defined', target);\n      if (name === 'get' && args[0] === '_wrappedValue') return target;\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get' ? res.bind(target) : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport { isAccountNotFoundError, pause } from './utils/other';\nimport { unwrapProxy } from './utils/wrap-proxy';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node from './Node';\nimport { DryRunResult, DryRunResults, SignedTx } from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport async function _getPollInterval(\n  type: 'key-block' | 'micro-block',\n  { _expectedMineRate, _microBlockCycle, onNode }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; onNode: Node },\n): Promise<number> {\n  const getVal = async (\n    t: string,\n    val: number | undefined,\n    devModeDef: number,\n    def: number,\n  ): Promise<number | null> => {\n    if (t !== type) return null;\n    if (val != null) return val;\n    return await onNode?.getNetworkId() === 'ae_dev' ? devModeDef : def;\n  };\n\n  const base = await getVal('key-block', _expectedMineRate, 0, 180000)\n    ?? await getVal('micro-block', _microBlockCycle, 0, 3000)\n    ?? (() => { throw new InternalError(`Unknown type: ${type}`); })();\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight(\n  { cached = false, ...options }: {\n    onNode: Node;\n    cached?: boolean;\n  } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache != null && cache.time > Date.now() - await _getPollInterval('key-block', options)) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Return transaction details if it is mined, fail otherwise.\n * If the transaction has ttl specified then would wait till it leaves the mempool.\n * Otherwise would fail if a specified amount of blocks were mined.\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail if transaction ttl is not set\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): ReturnType<Node['getTransactionByHash']> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let max;\n  do {\n    const tx = await options.onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    if (max == null) {\n      max = tx.tx.ttl !== 0 ? -1\n        : await getHeight({ ...options, cached: true }) + blocks;\n    }\n    await pause(interval);\n  } while (max === -1 ? true : await getHeight({ ...options, cached: true }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(await _getPollInterval('key-block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight(options);\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): ReturnType<Node['getAccountByPubkey']> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getCurrentGeneration']> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getGenerationByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<SignedTx[]> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getKeyBlockByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getMicroBlockHeaderByHash']> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{ txEvents?: DryRunResults['txEvents'] } & DryRunResult> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContractCode']> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContract']> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getNameEntryByName']> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { _getPollInterval, getHeight } from '../../../chain';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    {\n      onNode, absoluteTtl, _isInternalBuild, ...options\n    }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n      _isInternalBuild?: boolean;\n    } & Omit<Parameters<typeof _getPollInterval>[1], 'onNode'>,\n  ) {\n    if (absoluteTtl !== true && value !== 0 && (value != null || _isInternalBuild === true)) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value = (value ?? 3) + await getHeight({ ...options, onNode, cached: true });\n    }\n    return value;\n  },\n};\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","export enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n/**\n * @category entry building\n */\nexport enum EntryTag {\n  Account = 10,\n  Oracle = 20,\n  // OracleQuery = 21,\n  Name = 30,\n  // NameCommitment = 31,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  Channel = 58,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaMetaTxAuthData = 810,\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport abiVersion from './field-types/abi-version';\nimport address, { idTagToEncoding } from './field-types/address';\nimport array from './field-types/array';\nimport coinAmount from './field-types/coin-amount';\nimport ctVersion from './field-types/ct-version';\nimport encoded from './field-types/encoded';\nimport entry from './field-types/entry';\nimport enumeration from './field-types/enumeration';\nimport fee from './field-types/fee';\nimport gasLimit from './field-types/gas-limit';\nimport gasPrice from './field-types/gas-price';\nimport name from './field-types/name';\nimport nameFee from './field-types/name-fee';\nimport nameId from './field-types/name-id';\nimport nonce from './field-types/nonce';\nimport pointers from './field-types/pointers';\nimport queryFee from './field-types/query-fee';\nimport raw from './field-types/raw';\nimport shortUInt from './field-types/short-u-int';\nimport shortUIntConst from './field-types/short-u-int-const';\nimport string from './field-types/string';\nimport transaction from './field-types/transaction';\nimport ttl from './field-types/ttl';\nimport uInt from './field-types/u-int';\nimport withDefault from './field-types/with-default';\nimport withFormatting from './field-types/with-formatting';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { EntryTag } from './entry/constants';\nimport { EntParams, EntUnpacked } from './entry/schema.generated';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface TransactionAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst transactionAny = transaction() as unknown as TransactionAny;\n\ninterface TransactionSignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst transactionSignedTx = transaction(Tag.SignedTx) as unknown as TransactionSignedTx;\n\ninterface EntryTreesPoi {\n  serialize: (\n    value: EntParams & { tag: EntryTag.TreesPoi } | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => EntUnpacked & { tag: EntryTag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(EntryTag.TreesPoi) as unknown as EntryTreesPoi;\n\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\n/**\n * Name ttl represented in number of blocks (Max value is 50000 blocks)\n */\nconst nameTtl = withFormatting(\n  (value) => {\n    const NAME_TTL = 180000;\n    value ??= NAME_TTL;\n    if (value >= 1 && value <= NAME_TTL) return value;\n    throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n  },\n  shortUInt,\n);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: transactionAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: withDefault(0, uInt),\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers(false),\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(2),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers(true),\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: transactionSignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: transactionSignedTx,\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types/interface';\nimport {\n  ArgumentError, DecodeError, SchemaNotFoundError, InternalError,\n} from '../../utils/errors';\nimport {\n  Encoding, Encoded, encode, decode,\n} from '../../utils/encoder';\nimport { readInt } from './helpers';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null) throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) => (\n    field.serialize(params[key], { ...params, ...extraParams }, params)\n  ));\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name, field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { EntryTag } from '../entry/constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\nexport default function genMapField<E extends Encoding, T extends EntryTag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { packEntry: typeof packEntryType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { packEntry }) {\n      return decode(packEntry({\n        tag: EntryTag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: EntryTag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(packEntry({ ...value as any, tag })),\n        } as const)),\n      }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      const { values } = unpackEntry(encode(buffer, Encoding.Bytearray), EntryTag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackEntry(encode(value, Encoding.Bytearray), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { EntryTag } from '../entry/constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackEntry } from '../entry';\nimport type { EntUnpacked } from '../entry/schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends EntryTag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackEntry: typeof unpackEntry;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpEnt - Implementation of unpackEntry use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpEnt: typeof unpackEntry) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackEntry = unpEnt;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): EntUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackEntry(encode(d, Encoding.Bytearray), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, EntUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackEntry(encode(v, Encoding.Bytearray), this.#tag),\n      ])) as Record<Encoded.Generic<E>, EntUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n    serialize: (value: MPTree<E, T>) => MPTreeBinary;\n    deserialize: (value: MPTreeBinary, o: { unpackEntry: typeof unpackEntry }) => MPTree<E, T>;\n  } {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackEntry }) {\n      return new MPTree(value, encoding, tag, unpackEntry);\n    },\n  };\n}\n","import { EntryTag } from '../entry/constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\ntype TagWrapping = EntryTag.AccountsMtree | EntryTag.CallsMtree | EntryTag.ChannelsMtree\n| EntryTag.ContractsMtree | EntryTag.NameserviceMtree | EntryTag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(EntParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { packEntry: typeof packEntryType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `(EntUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { packEntry }) {\n      return decode(packEntry({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      return unpackEntry<TagWrapping>(encode(buffer, Encoding.Bytearray), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import SchemaTypes from '../SchemaTypes';\nimport abiVersion from '../field-types/abi-version';\nimport address, { idTagToEncoding } from '../field-types/address';\nimport array from '../field-types/array';\nimport boolean from '../field-types/boolean';\nimport coinAmount from '../field-types/coin-amount';\nimport ctVersion from '../field-types/ct-version';\nimport encoded from '../field-types/encoded';\nimport entry from '../field-types/entry';\nimport enumeration from '../field-types/enumeration';\nimport gasLimit from '../field-types/gas-limit';\nimport gasPrice from '../field-types/gas-price';\nimport map from '../field-types/map';\nimport mptree from '../field-types/mptree';\nimport pointers from '../field-types/pointers';\nimport raw from '../field-types/raw';\nimport shortUInt from '../field-types/short-u-int';\nimport shortUIntConst from '../field-types/short-u-int-const';\nimport string from '../field-types/string';\nimport uInt from '../field-types/u-int';\nimport wrapped from '../field-types/wrapped';\nimport {\n  Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { EntryTag, CallReturnType } from './constants';\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<EntParams & { tag: EntryTag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<EntUnpacked & { tag: EntryTag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(EntryTag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, EntParams & { tag: EntryTag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, EntUnpacked & { tag: EntryTag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, EntryTag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, EntParams & { tag: EntryTag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.AccountAddress,\n  EntUnpacked & { tag: EntryTag.Account }\n  >;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, EntryTag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, EntParams & { tag: EntryTag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.Bytearray,\n  EntUnpacked & { tag: EntryTag.ContractCall }\n  >;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, EntryTag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, EntParams & { tag: EntryTag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, EntUnpacked & { tag: EntryTag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, EntryTag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, EntParams & { tag: EntryTag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, EntUnpacked & { tag: EntryTag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, EntryTag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, EntParams & { tag: EntryTag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.OracleAddress,\n  EntUnpacked & { tag: EntryTag.Oracle }\n  >;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, EntryTag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(EntryTag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  /**\n   * a suggestion as to how long any clients should cache this information\n   */\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(EntryTag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(EntryTag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(EntryTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(EntryTag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(EntryTag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, EntryTag.Account)),\n  calls: array(mptree(Encoding.Bytearray, EntryTag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, EntryTag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, EntryTag.Contract)),\n  ns: array(mptree(Encoding.Name, EntryTag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, EntryTag.Oracle)),\n}, {\n  tag: shortUIntConst(EntryTag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(EntryTag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(EntryTag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(EntryTag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(EntryTag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(EntryTag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(EntryTag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(EntryTag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(EntryTag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(EntryTag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(EntryTag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(EntryTag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(EntryTag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(EntryTag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(EntryTag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type EntParams = Schemas['TxParams'];\nexport type EntUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { schemas } from './schema';\nimport { EntryTag } from './constants';\nimport { EntParams, EntUnpacked } from './schema.generated';\n\nconst encodingTag = [\n  [EntryTag.CallsMtree, Encoding.CallStateTree],\n  [EntryTag.StateTrees, Encoding.StateTrees],\n  [EntryTag.TreesPoi, Encoding.Poi],\n] as const;\n\nexport function packEntry(params: EntParams & { tag: EntryTag.CallsMtree }): Encoded.CallStateTree;\nexport function packEntry(params: EntParams & { tag: EntryTag.StateTrees }): Encoded.StateTrees;\nexport function packEntry(params: EntParams & { tag: EntryTag.TreesPoi }): Encoded.Poi;\n/**\n * Pack entry\n * @category entry builder\n * @param params - Params of entry\n * @returns Encoded entry\n */\nexport function packEntry(params: EntParams): Encoded.Any;\nexport function packEntry(params: EntParams): Encoded.Any {\n  const encoding = encodingTag.find(([tag]) => tag === params.tag)?.[1] ?? Encoding.Bytearray;\n  return packRecord(schemas, EntryTag, params, { packEntry }, encoding);\n}\n\nexport function unpackEntry(\n  encoded: Encoded.CallStateTree,\n): EntUnpacked & { tag: EntryTag.CallsMtree };\nexport function unpackEntry(\n  encoded: Encoded.StateTrees,\n): EntUnpacked & { tag: EntryTag.StateTrees };\nexport function unpackEntry(\n  encoded: Encoded.Poi,\n): EntUnpacked & { tag: EntryTag.TreesPoi };\n/**\n * Unpack entry\n * @category entry builder\n * @param encoded - Encoded entry\n * @param expectedTag - Expected entry type\n * @returns Params of entry\n */\nexport function unpackEntry<T extends EntryTag>(\n  encoded: Encoded.Any,\n  expectedTag?: T,\n): EntUnpacked & { tag: T };\nexport function unpackEntry(\n  encoded: Encoded.Any,\n  expectedTag?: EntryTag,\n): EntUnpacked {\n  expectedTag ??= encodingTag.find(([, enc]) => encoded.startsWith(enc))?.[0];\n  return unpackRecord(schemas, EntryTag, encoded, expectedTag, { unpackEntry }) as any;\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { Field } from './field-types/interface';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId } from './helpers';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common';\nimport { ArgumentError } from '../../utils/errors';\nimport { packEntry, unpackEntry } from './entry';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction {\n  return packRecord(txSchema, Tag, params, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n    buildTx,\n    rebuildTx: (overrideParams: any) => buildTx(\n      { ...params, ...overrideParams },\n    ),\n    packEntry,\n  }, Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, { unpackTx, unpackEntry }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import nacl from 'tweetnacl';\nimport AccountBase from './Base';\nimport { hash, messageToHash, messagePrefixLength } from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag } from '../tx/builder/constants';\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  readonly #secretKeyDecoded: Uint8Array;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(public readonly secretKey: Encoded.AccountSecretKey) {\n    super();\n    const keyPair = nacl.sign.keyPair.fromSeed(decode(secretKey));\n    this.#secretKeyDecoded = keyPair.secretKey;\n    this.address = encode(keyPair.publicKey, Encoding.AccountAddress);\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    const secretKey = encode(nacl.randomBytes(32), Encoding.AccountSecretKey);\n    return new AccountMemory(secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return nacl.sign.detached(Buffer.from(data), this.#secretKeyDecoded);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength, new Uint8Array([1]), Buffer.from(networkId), decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import SchemaTypes from '../SchemaTypes';\nimport address from '../field-types/address';\nimport nameId from '../field-types/name-id';\nimport shortUIntConst from '../field-types/short-u-int-const';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  /**\n   * Delegation of all AENS names to a contract\n   */\n  AensWildcard = 1,\n  /**\n   * Delegation of an AENS name to a contract\n   */\n  AensName = 2,\n  /**\n   * Delegation of AENS preclaim to a contract\n   */\n  AensPreclaim = 3,\n  /**\n   * Delegation of oracle operations to a contract\n   */\n  Oracle = 4,\n  /**\n   * Delegation of oracle query to a contract\n   */\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\n/**\n * Oracle query ID to reply by a contract\n */\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * Address of a contract to delegate permissions to\n */\nconst contractAddress = address(Encoding.ContractAddress);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(DelegationTag.AensWildcard),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress,\n}, {\n  tag: shortUIntConst(DelegationTag.AensName),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  /**\n   * AENS name to manage by a contract\n   */\n  nameId,\n  contractAddress,\n}, {\n  tag: shortUIntConst(DelegationTag.AensPreclaim),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress,\n}, {\n  tag: shortUIntConst(DelegationTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress,\n}, {\n  tag: shortUIntConst(DelegationTag.OracleResponse),\n  version: shortUIntConst(1, true),\n  queryId: queryIdField,\n  contractAddress,\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { DelegationTag, schemas } from './schema';\nimport { DlgParams, DlgUnpacked } from './schema.generated';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","function verCmp(a: string, b: string): number {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const aComponents = getComponents(a);\n  const bComponents = getComponents(b);\n\n  const base = Math.max(...aComponents, ...bComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  return componentsToNumber(aComponents) - componentsToNumber(bComponents);\n}\n\nexport default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion?: string,\n): boolean {\n  return verCmp(version, geVersion) >= 0\n    && (ltVersion == null || verCmp(version, ltVersion) < 0);\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport {\n  AdditionalPolicyConfig, FullOperationResponse, OperationOptions,\n  createSerializer as createSerializerOrig,\n} from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { InternalError, UnexpectedTsError, UnsupportedVersionError } from './errors';\n\nconst bigIntPrefix = '_sdk-big-int-';\n\nexport const createSerializer = (\n  ...args: Parameters<typeof createSerializerOrig>\n): ReturnType<typeof createSerializerOrig> => {\n  const serializer = createSerializerOrig(...args);\n  const { serialize, deserialize } = serializer;\n  return Object.assign(serializer, {\n    serialize(\n      ...[mapper, object, objectName, options]: Parameters<typeof serialize>\n    ): ReturnType<typeof serialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || object == null) {\n        return serialize.call(this, mapper, object, objectName, options);\n      }\n      if (typeof object !== 'bigint') {\n        objectName ??= mapper.serializedName;\n        throw new Error(`${objectName} with value ${object} must be of type bigint.`);\n      }\n      return object.toString();\n    },\n\n    deserialize(\n      ...[mapper, responseBody, objectName, options]: Parameters<typeof deserialize>\n    ): ReturnType<typeof deserialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || responseBody == null) {\n        if (typeof responseBody === 'string' && responseBody.startsWith(bigIntPrefix)) {\n          console.warn(`AeSdk internal error: BigInt value ${responseBody} handled incorrectly`);\n          responseBody = +responseBody.replace(bigIntPrefix, '');\n        }\n        return deserialize.call(this, mapper, responseBody, objectName, options);\n      }\n      if (typeof responseBody === 'number' && responseBody > Number.MAX_SAFE_INTEGER) {\n        throw new InternalError(`Number ${responseBody} is not accurate to be converted to BigInt`);\n      }\n      return BigInt(responseBody.toString().replace(bigIntPrefix, ''));\n    },\n  });\n};\n\n// 16 === Number.MAX_SAFE_INTEGER.toString().length\nconst bigIntPropertyRe = /(\"\\w+\":\\s*)(\\d{16,})(\\s*[,}])/m;\nconst bigIntArrayItemRe = /([[,]\\s*)(\\d{16,})\\b/m;\nexport const parseBigIntPolicy: PipelinePolicy = {\n  name: 'parse-big-int',\n  async sendRequest(request, next) {\n    const response = await next(request);\n    if (response.bodyAsText == null) return response;\n    // TODO: replace with https://caniuse.com/mdn-javascript_builtins_json_parse_reviver_parameter_context_argument when it gets support in FF and Safari\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntPropertyRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntPropertyRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, name, value, end] = match;\n        return [\n          name,\n          +value > Number.MAX_SAFE_INTEGER ? `\"${bigIntPrefix}${value}\"` : value,\n          end,\n        ].join('');\n      },\n    );\n    // FIXME: may break strings inside json\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntArrayItemRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntArrayItemRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, prefix, value] = match;\n        return `${prefix}\"${bigIntPrefix}${value}\"`;\n      },\n    );\n    return response;\n  },\n};\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(key, req.catch(() => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (\n          !(error instanceof RestError)\n          || error.request == null\n          || error.message.startsWith('Error ')\n        ) throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        const body = (error.response as FullOperationResponse).parsedBody;\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  versionCb: (options: OperationOptions) => Promise<string>,\n  geVersion: string,\n  ltVersion: string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'version-check',\n    async sendRequest(request, next) {\n      if (request.headers.has('__version-check')) {\n        request.headers.delete('__version-check');\n        return next(request);\n      }\n      const options = { requestOptions: { customHeaders: { '__version-check': 'true' } } };\n      const args = [await versionCb(options), geVersion, ltVersion] as const;\n      if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n      return next(request);\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      errorCode: {\n        serializedName: \"error_code\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: -1,\n        },\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedTx: {\n        serializedName: \"encoded_tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedKey: {\n        serializedName: \"encoded_key\",\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const AuctionEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuctionEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      startedAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"started_at\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      endsAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ends_at\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      highestBidder: {\n        serializedName: \"highest_bidder\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBid: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"highest_bid\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      soloRound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockedUntil: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Currency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunit: {\n        serializedName: \"subunit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunitsPerUnit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"subunits_per_unit\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fiatConverstionUrl: {\n        serializedName: \"fiat_converstion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fiatConversionUrl: {\n        serializedName: \"fiat_conversion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      logo: {\n        serializedName: \"logo\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\",\n        },\n      },\n      primaryColour: {\n        serializedName: \"primary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      secondaryColour: {\n        serializedName: \"secondary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkName: {\n        serializedName: \"network_name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Image: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMinimum: 0,\n            },\n            type: {\n              // @ts-expect-error we are extending autorest with BigInt support\n              name: \"BigInt\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GasPricesItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GasPricesItem\",\n    modelProperties: {\n      minGasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"min_gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      utilization: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"utilization\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      minutes: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"minutes\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      difficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      hashrate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      uptime: {\n        serializedName: \"uptime\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      effectiveAtHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SyncStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SyncStatus\",\n    modelProperties: {\n      progress: {\n        serializedName: \"progress\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      speed: {\n        serializedName: \"speed\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      estimate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"estimate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      firstSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lastSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"verified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      unverified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"unverified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"accounts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contracts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contracts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractOracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      locked: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleQueries: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pendingRewards: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      total: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"total\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const nameHash: OperationURLParameter = {\n  parameterPath: \"nameHash\",\n  mapper: {\n    serializedName: \"name_hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n","import { createSerializer } from \"../../utils/autorest\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAuctionEntryByNameOptionalParams,\n  GetAuctionEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetCurrencyOptionalParams,\n  GetCurrencyResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetNameEntryByNameHashOptionalParams,\n  GetNameEntryByNameHashResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetRecentGasPricesOptionalParams,\n  GetRecentGasPricesResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n  GetSyncStatusOptionalParams,\n  GetSyncStatusResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get auction entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getAuctionEntryByName(\n    name: string,\n    options?: GetAuctionEntryByNameOptionalParams,\n  ): Promise<GetAuctionEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getAuctionEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get the currency metadata of a node\n   * @param options The options parameters.\n   */\n  getCurrency(\n    options?: GetCurrencyOptionalParams,\n  ): Promise<GetCurrencyResponse> {\n    return this.sendOperationRequest({ options }, getCurrencyOperationSpec);\n  }\n\n  /**\n   * Dry-run unsigned transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx\n   * and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param nameHash The name hash of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByNameHash(\n    nameHash: string,\n    options?: GetNameEntryByNameHashOptionalParams,\n  ): Promise<GetNameEntryByNameHashResponse> {\n    return this.sendOperationRequest(\n      { nameHash, options },\n      getNameEntryByNameHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get minimum gas prices in recent blocks\n   * @param options The options parameters.\n   */\n  getRecentGasPrices(\n    options?: GetRecentGasPricesOptionalParams,\n  ): Promise<GetRecentGasPricesResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getRecentGasPricesOperationSpec,\n    );\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n\n  /**\n   * Get the sync status of a node\n   * @param options The options parameters.\n   */\n  getSyncStatus(\n    options?: GetSyncStatusOptionalParams,\n  ): Promise<GetSyncStatusResponse> {\n    return this.sendOperationRequest({ options }, getSyncStatusOperationSpec);\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAuctionEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/auctions/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AuctionEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrencyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/currency\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Currency,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getNameEntryByNameHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/hash/{name_hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.nameHash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecentGasPricesOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/recent-gas-prices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"GasPricesItem\" } },\n        },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSyncStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/sync-status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SyncStatus,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport { OperationOptions } from '@azure/core-client';\nimport { userAgentPolicyName, setClientRequestIdPolicyName } from '@azure/core-rest-pipeline';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  parseBigIntPolicy, genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends NodeApi {\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    const getVersion = async (opts: OperationOptions): Promise<string> => (\n      (await this._getCachedStatus(opts)).nodeVersion\n    );\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('node', getVersion, '7.1.0', '8.0.0')],\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => [\n          ' ', body.reason, body.errorCode == null ? '' : ` (${body.errorCode})`,\n        ].join('')),\n      ],\n      ...options,\n    });\n    this.pipeline.addPolicy(parseBigIntPolicy, { phase: 'Deserialize' });\n    this.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n    // TODO: use instead our retry policy\n    this.pipeline.removePolicy({ name: 'defaultRetryPolicy' });\n  }\n\n  #cachedStatusPromise?: ReturnType<NodeApi['getStatus']>;\n\n  async _getCachedStatus(options?: OperationOptions): ReturnType<NodeApi['getStatus']> {\n    if (this.#cachedStatusPromise != null) return this.#cachedStatusPromise;\n    return this.getStatus(options);\n  }\n\n  override async getStatus(\n    ...args: Parameters<NodeApi['getStatus']>\n  ): ReturnType<NodeApi['getStatus']> {\n    const promise = super.getStatus(...args);\n    promise.then(() => { this.#cachedStatusPromise = promise; }, () => {});\n    return promise;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    return (await this._getCachedStatus()).networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, isAddressValid, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, Encoding, decode } from '../utils/encoder';\nimport Node from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: Account & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const pipeline = nodeNotCached.pipeline.clone();\n  pipeline.removePolicy({ name: 'parse-big-int' });\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline,\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  async (tx, { node }) => {\n    if (tx.tag !== Tag.SpendTx || isAddressValid(tx.recipientId, Encoding.Name)) return [];\n    const recipient = await node.getAccountByPubkey(tx.recipientId).catch((error) => {\n      if (!isAccountNotFoundError(error)) throw error;\n      return null;\n    });\n    if (recipient == null || recipient.payable === true) return [];\n    return [{\n      message: 'Recipient account is not payable',\n      key: 'RecipientAccountNotPayable',\n      checkedKeys: ['recipientId'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError } from './utils/other';\nimport { TransactionError } from './utils/errors';\nimport Node from './Node';\nimport { SignedTx } from './apis/node';\nimport { Encoded } from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\nimport { poll, waitForTxConfirm } from './chain';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction({ tx }, {\n      requestOptions: {\n        customHeaders: {\n          // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n          '__retry-code': '400',\n          ...__queue != null ? { __queue } : {},\n        },\n      },\n    });\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<SignedTx> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","import BigNumber from 'bignumber.js';\nimport { getBalance, resolveName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\n\n// TODO: name verify should not overlap with transaction verify\ntype ResolveNameOptions = Omit<Parameters<typeof resolveName>[2], 'onNode' | 'verify'>;\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount' | 'onNode'>\n& ResolveNameOptions & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount' | 'onNode'>\n& ResolveNameOptions & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { Tag, AensName, DRY_RUN_ACCOUNT } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun,\n} from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { Optional, isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends NodeContractCallObject {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await Contract.initialize({ ...aeSdk.getContext(), sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        if (/Expected \\d+ arguments, got \\d+/.test(message)) {\n          throw new ContractError(`ACI doesn't match called contract. Error provided by node: ${message}`);\n        }\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Optional<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, event.topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, event.topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      if (isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { getAccount } from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport CompilerBase from './compiler/Base';\nimport { packEntry } from '../tx/builder/entry';\nimport { EntryTag } from '../tx/builder/entry/constants';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit' | 'onNode'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onCompiler: CompilerBase;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(packEntry({\n      tag: EntryTag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport { sendTransaction } from './send-transaction';\nimport * as spendMethods from './spend';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...spendMethods,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    // TODO: remove `any` at the same time as AeSdk class\n    return buildTxAsync({ ...this.getContext() as any, ...options });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n    /**\n     * Make operation on specific account by providing address (to use account from sdk) or instance\n     * of AccountBase (like MemoryAccount)\n     */\n    onAccount: OnAccount;\n  } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      },\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport { decode, Encoded } from './utils/encoder';\nimport { UnavailableAccountError } from './utils/errors';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  /**\n   * @param options - Options\n   */\n  constructor(\n    { accounts, ...options }: { accounts?: AccountBase[] }\n    & ConstructorParameters<typeof AeSdkBase>[0] = {},\n  ) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = (\n    new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>()\n  );\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { SignedTx } from '../../apis/node';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.unsafeSign]: (\n    p: { data: Encoded.Bytearray; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<SignedTx> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (\n    p: {\n      delegation: Encoded.Bytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import JsonBig from 'json-bigint';\nimport BigNumber from 'bignumber.js';\nimport { mapObject } from './other';\n\nconst jsonBig = JsonBig({ storeAsString: true });\n\nconst convertValuesToBigNumbers = (value: any): any => {\n  if (typeof value === 'object' && value !== null && value.constructor === Object) {\n    return mapObject(value, ([k, v]) => [k, convertValuesToBigNumbers(v)]);\n  }\n  if (Array.isArray(value)) {\n    return value.map((item) => convertValuesToBigNumbers(item));\n  }\n  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {\n    const bn = new BigNumber(value);\n    bn.toJSON = () => bn.toString(10);\n    return bn;\n  }\n  return value;\n};\n\nexport default {\n  stringify: (...args: Parameters<typeof JsonBig['stringify']>): string => (\n    jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1))\n  ),\n  parse: jsonBig.parse,\n};\n","import nacl from 'tweetnacl';\nimport AeSdk from './AeSdk';\nimport verifyTransaction from './tx/validator';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport {\n  METHODS, RPC_STATUS, SUBSCRIPTION_TYPES, WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError, RpcPermissionDenyError, RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema';\nimport { InternalError, UnknownRpcClientError } from './utils/errors';\nimport AccountBase from './account/Base';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types';\nimport {\n  Encoded, Encoding, encode, decode,\n} from './utils/encoder';\nimport jsonBig from './utils/json-big';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string, params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>, origin: string\n) => void;\n\ntype OnSubscription = (\n  clientId: string, params: Parameters<WalletApi[METHODS.subscribeAddress]>[0], origin: string\n) => void;\n\ntype OnDisconnect = (\n  clientId: string, params: Parameters<WalletApi[METHODS.closeConnection]>[0]\n) => void;\n\ntype OnAskAccounts = (\n  clientId: string, params: undefined, origin: string\n) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _getAccountsForClient({ addressSubscription }: RpcClientsInfo): Accounts {\n    const { current, connected } = this.getAccounts();\n    return {\n      current: addressSubscription.has('current') || addressSubscription.has('connected')\n        ? current : {},\n      connected: addressSubscription.has('connected') ? connected : {},\n    };\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .filter((client) => client.addressSubscription.size !== 0)\n      .forEach((client) => client.rpc\n        .notify(METHODS.updateAddress, this._getAccountsForClient(client)));\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...client.connectNode && this._getNode(),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return RPC_STATUS.CONNECTED === this._getClient(clientId).status\n      && this._getClient(clientId).rpc.connection.isConnected();\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = Buffer.from(nacl.randomBytes(8)).toString('base64');\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({\n            name, version, icons, connectNode,\n          }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...await this.getWalletInfo(),\n              ...connectNode && this._getNode(),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                // TODO: remove `type` as it always subscribe\n                await this.onSubscription(id, { type, value }, origin);\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this._getAccountsForClient(client),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            {\n              tx, onAccount = this.address, returnSigned, innerTx,\n            },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount, aeppOrigin: origin, aeppRpcClientId: id, innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(jsonBig.stringify({\n                transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n              }));\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async ({\n            domain, aci, data, onAccount = this.address,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain, onAccount, aeppOrigin: origin, aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n          [METHODS.unsafeSign]: async ({ data, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = encode(await this.sign(decode(data), parameters), Encoding.Signature);\n            return { signature };\n          },\n          [METHODS.signDelegation]: async ({ delegation, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await this.signDelegation(delegation, parameters);\n            return { signature };\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    const { origin } = window.location;\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: origin === 'file://' ? '*' : origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import {\n  RestError, userAgentPolicyName, setClientRequestIdPolicyName,\n} from '@azure/core-rest-pipeline';\nimport { OperationOptions } from '@azure/core-client';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci, CompileResult } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion = false }: { ignoreVersion?: boolean } = {}) {\n    super();\n\n    let version: string | undefined;\n    const getVersion = async (opts: OperationOptions): Promise<string> => {\n      if (version != null) return version;\n      version = (await this.api.apiVersion(opts)).apiVersion;\n      return version;\n    };\n\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('compiler', getVersion, '8.0.0', '9.0.0')],\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    this.api.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.api.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=7883c6ac\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=70aa7756&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\nimport \"./App.vue?vue&type=style&index=1&id=70aa7756&lang=scss&scoped=true\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-70aa7756\"]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwallet_iframe\"] = self[\"webpackChunkwallet_iframe\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(3166); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","id","type","_createTextVNode","for","class","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","novalidate","onSubmit","_cache","_withModifiers","args","$options","navigate","$event","_ctx","nextAeppUrl","onFocus","target","select","_hoisted_5","_toDisplayString","address","_hoisted_6","nodeName","_hoisted_7","_createVNode","_component_Value","value","balancePromise","_hoisted_8","clientStatus","clientId","onClick","switchAccount","switchNode","key","disconnect","stopSharingWalletInfo","shareWalletInfo","runningInFrame","_createCommentVNode","ref","src","aeppUrl","_hoisted_9","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","TxTimedOutError","blocks","th","join","TypeError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","UnknownRpcClientError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","connect","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","_classPrivateFieldSet","listener","_message$data$jsonrpc","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","AccountBase","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","AccountSecretKey","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","encode","decode","string","base58","bs58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","isAddressValid","maybeEncoded","encodings","encoding","hash","verify","signature","nacl","detached","messagePrefix","messagePrefixLength","messageToHash","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","aci","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","ProtocolToVmAbi","Ceres","vmVersion","Fate3","abiVersion","Fate","NoAbi","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","Fate2","serialize","params","consensusProtocolVersion","_value","prepare","keys","onNode","getNodeInfo","vm","abi","_getProtocolDetails","c","kind","ContractCallTx","GaMetaTx","result","toBytes","val","big","Number","isInteger","isBigNumber","toFixed","hexString","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","at","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","uInt","serializeAettos","genEncodedField","optional","encodedData","genEntryField","txParams","packEntry","ArrayBuffer","isView","startsWith","unpackEntry","genEnumerationField","enm","values","filter","v","gasPriceCache","getCachedIncreasedGasPrice","node","cache","get","time","Date","now","gasPrice","minGasPrice","utilization","getRecentGasPrices","BigInt","integerValue","maxSafeGasPrice","warn","set","coinAmount","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ContractCreateTx","GaAttachTx","PayingForTx","factor","TX_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","ceil","floor","getOracleRelativeTtl","ttlKeys","buildGas","builtTx","unpackTx","buildTx","txObject","tx","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","gasPricePrefix","_computingMinFee","_canIncreaseFee","minFee","dividedBy","replace","gt","calculateGasLimitMax","gasMax","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","field","txFields","parameters","addressName","genNonceField","senderKey","strategy","senderId","getAccountNextNonce","catch","nextNonce","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","addressAny","allowRaw","pointers","bKey","bId","oracleId","getOracleByPubkey","queryFee","genShortUIntConstField","constValue","constValueOptional","genTransactionField","wrapWithProxy","valueCb","Proxy","res","Reflect","bind","unwrapProxy","_wrappedValue","_getPollInterval","_expectedMineRate","_microBlockCycle","_ref","_await$getVal","getVal","devModeDef","def","getNetworkId","base","heightCache","getHeight","cached","height","getCurrentKeyBlockHeight","poll","interval","_interval","max","getTransactionByHash","blockHeight","ttl","awaitHeight","_interval2","currentHeight","waitForTxConfirm","confirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","getBalance","format","addr","balance","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","Map","txDryRunHandler","rs","delete","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accounts","Array","Set","accountAddress","pubKey","forEach","reject","results","reason","resultPayload","idx","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","pointer","p","absoluteTtl","_isInternalBuild","withDefault","defaultValue","withFormatting","CallReturnType","EntryTag","ORACLE_TTL_TYPES","transactionAny","transactionSignedTx","SignedTx","entryTreesPoi","entry","TreesPoi","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","signatures","raw","SpendTx","recipientId","encoded","NamePreclaimTx","accountId","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","NameTransferTx","NameRevokeTx","ctVersion","deposit","callData","callerId","queryFormat","responseFormat","oracleTtlType","delta","enumeration","oracleTtlValue","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","ChannelSnapshotSoloTx","ChannelClientReconnectTx","role","pubkey","authFun","gaId","authData","payerId","rlpDecode","rlpEncode","_rlp","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","binary","unpackRecord","encodedRecord","expectedTag","index","genMapField","Mtree","MtreeValue","recursiveType","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackEntry","_MPTree_brand","WeakSet","MPTree","isComplete","unpEnt","_classPrivateMethodInitSpec","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","d","_assertClassBrand","_getRaw","toObject","_entriesRaw","k","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","entryMtreeValueArray","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","flags","gaContract","gaAuthFun","status","owner","active","boolean","referers","callerNonce","gasUsed","returnValue","returnType","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelOffChainUpdateTransfer","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","contract","callStack","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","GaMetaTxAuthData","encodingTag","_encodingTag$find$","_expectedTag","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","getBufferToSign","networkId","innerTx","prefixes","rlpBinaryTx","_secretKeyDecoded","AccountMemory","secretKey","keyPair","fromSeed","publicKey","generate","sign","signTransaction","txWithNetworkId","signMessage","signTypedData","dHash","signDelegation","delegation","DelegationTag","oracleAddressField","queryIdField","AensWildcard","AensName","AensPreclaim","unpackDelegation","verCmp","a","b","getComponents","i","aComponents","bComponents","componentsToNumber","components","reverse","reduce","acc","semverSatisfies","bigIntPrefix","createSerializer","serializer","createSerializerOrig","mapper","objectName","_objectName","serializedName","responseBody","MAX_SAFE_INTEGER","bigIntPropertyRe","bigIntArrayItemRe","parseBigIntPolicy","sendRequest","request","next","bodyAsText","replaceAll","RegExp","matched","match","end","genRequestQueuesPolicy","requestQueues","policy","_requestQueues$get","headers","getResponse","then","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","method","JSON","stringify","url","body","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","parsedBody","genVersionCheckPolicy","versionCb","has","requestOptions","customHeaders","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","NaN","statusesToNotRetry","intervals","fill","_","intervalSum","intervalsInMs","e","attempt","urlParsed","searchParams","_e$response$status","className","modelProperties","required","constraints","InclusiveMinimum","InclusiveMaximum","payable","allowedValues","ErrorModel","errorCode","NextNonceResponse","SignedTxs","element","blockHash","Tx","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","Delegates","OffChainUpdate","uberParent","polymorphicDiscriminator","clientName","op","RelativeTTL","isConstant","Ttl","NamePointer","encodedKey","AuctionEntry","startedAt","endsAt","highestBidder","highestBid","ContractObject","referrerIds","ByteCode","bytecode","PoI","Currency","symbol","subunit","subunitsPerUnit","fiatConverstionUrl","fiatConversionUrl","logo","primaryColour","secondaryColour","networkName","Image","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","Event","topics","Generation","keyBlock","microBlocks","KeyBlock","prevHash","prevKeyHash","miner","beneficiary","pow","MinItems","MaxItems","info","Header","pofHash","txsHash","HashResponse","HeightResponse","MicroBlockHeader","CountResponse","count","NameEntry","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","PeerPubKey","GasPricesItem","minutes","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","uptime","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","SyncStatus","progress","speed","estimate","EncodedTx","PostTxResponse","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","ChannelSetDelegatesTx","CheckTxInPoolResponse","CommitmentId","UnsignedTx","GAAttachTx","GAMetaTx","NameHash","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","OracleRespondTx","PeerCount","connected","available","blocked","PeerCountConnected","PeerCountAvailable","verified","unverified","Peers","peers","PubKey","TokenSupply","contractOracles","locked","pendingRewards","total","OffChainCallContract","OffChainDeposit","OffChainNewContract","OffChainTransfer","OffChainWithdrawal","CreateContractUnsignedTx","discriminators","accept","parameterPath","$host","skipEncoding","contentType","DryRunInputMapper","nameHash","fromParam","limit","typeParam","body1","EncodedTxMapper","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","sendOperationRequest","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHashOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountNextNonceOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAuctionEntryByName","getAuctionEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getCurrency","getCurrencyOperationSpec","protectedDryRunTxsOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getTopHeader","getTopHeaderOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getNameEntryByNameOperationSpec","getNameEntryByNameHash","getNameEntryByNameHashOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getRecentGasPricesOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","getSyncStatus","getSyncStatusOperationSpec","postTransaction","postTransactionOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","Mappers","httpMethod","responses","bodyMapper","isError","urlParameters","Parameters","headerParameters","queryParameters","requestBody","mediaType","_cachedStatusPromise","NodeApi","ignoreVersion","getVersion","_getCachedStatus","opts","allowInsecureConnection","additionalPolicies","pipeline","addPolicy","phase","removePolicy","userAgentPolicyName","setClientRequestIdPolicyName","promise","nodeNetworkId","versions","getTransactionSignerAddress","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","recipient","_ref2","oracleCall","contractCreate","contractCall","parse","InvalidTxError","validation","sendTransaction","txUnsigned","onAccount","waitMined","__queue","pollResult","txData","confirmationHeight","verifyTx","spend","recipientIdOrName","transferFunds","fraction","desiredAmount","ROUND_HALF_UP","plus","minus","payForTransaction","Encoder","Calldata","_Contract_brand","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","compile","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult","_estimateGas","$call","callStatic","$deploy","_opt$gasLimit","opt","_calldata","_name","_sendAndProcess","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent","decoded","decodeEvent","initialize","validateBytecode","otherOptions","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","contractAddressToName","addressToName","variant","eventName","calcHash","arr","some","createGeneralizedAccount","authFnName","_options$gasLimit","freeze","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","methods","chainMethods","spendMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","getContext","mergeWith","prototype","handler","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","compilerApi","_resolveAccount","ensureNodeConnected","pool","selectedNodeName","selectNode","isNodeConnected","getNodesInPool","addresses","String","_options$networkId","AeSdk","addAccount","selectedAddress","selectAccount","removeAccount","_callbacks","_messageId","_methods","_RpcClient_brand","RpcClient","connection","_handleMessage","_sendRequest","notify","_processResponse","methodName","_sendResponse","callbacks","RPC_VERSION","jsonBig","JsonBig","storeAsString","convertValuesToBigNumbers","isArray","bn","AeSdkWallet","onConnection","onSubscription","onAskAccounts","_type","_getAccountsForClient","addressSubscription","current","getAccounts","_pushAccountsToApps","_clients","_isRpcClientConnected","_getClient","client","size","rpc","updateAddress","_getNode","updateNetwork","connectNode","CONNECTED","_disconnectRpcClient","DISCONNECTED","removeRpcClient","addRpcClient","clientConnection","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","icons","getWalletInfo","subscribeAddress","subscribe","add","unsubscribe","subscription","returnSigned","aeppOrigin","aeppRpcClientId","signedTransaction","transactionHash","unsafeSign","readyToConnect","location","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","cmpOut","warning","generateAciBySourceCode","generateAci","_normalizeClass","text","props","default","watch","valueToString","immediate","__exports__","Value","process","parent","$nextTick","attempts","$refs","aepp","contentWindow","aeSdk","intervalId","setInterval","clearInterval","names","updateClientStatus","mounted","aeppInfo","genConfirmCallback","actionName","aeppId","AccountMemoryProtected","MemoryAccount","unpackedTx","dataType","decodedData","decodeWithType","$watch","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}