{"version":3,"file":"js/app.1da6b42c.js","mappings":"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","sources":["webpack://wallet-iframe/./src/App.vue","webpack://wallet-iframe/../../src/utils/errors.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://wallet-iframe/../../src/aepp-wallet-communication/schema.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://wallet-iframe/../../src/account/Base.ts","webpack://wallet-iframe/../../src/utils/other.ts","webpack://wallet-iframe/../../src/utils/encoder-types.ts","webpack://wallet-iframe/../../src/utils/encoder.ts","webpack://wallet-iframe/../../src/utils/crypto.ts","webpack://wallet-iframe/../../src/utils/typed-data.ts","webpack://wallet-iframe/../../../src/tx/builder/constants.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ct-version.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/abi-version.ts","webpack://wallet-iframe/../../src/utils/bytes.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/address.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/array.ts","webpack://wallet-iframe/../../../src/tx/builder/helpers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/u-int.ts","webpack://wallet-iframe/../../src/utils/bignumber.ts","webpack://wallet-iframe/../../src/utils/amount-formatter.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/encoded.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/entry.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/enumeration.ts","webpack://wallet-iframe/../../src/utils/semver-satisfies.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-price.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/field.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/name-id.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/nonce.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/pointers2.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/query-fee.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/raw.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/string.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/transaction.ts","webpack://wallet-iframe/../../src/utils/wrap-proxy.ts","webpack://wallet-iframe/../src/chain.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/ttl.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-default.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/constants.ts","webpack://wallet-iframe/../../../src/tx/builder/schema.ts","webpack://wallet-iframe/../../../src/tx/builder/common.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/boolean.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/map.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/mptree.ts","webpack://wallet-iframe/../../../../src/tx/builder/field-types/wrapped.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/entry/index.ts","webpack://wallet-iframe/../../../src/tx/builder/index.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/schema.ts","webpack://wallet-iframe/../../../../src/tx/builder/delegation/index.ts","webpack://wallet-iframe/../../src/account/Memory.ts","webpack://wallet-iframe/../../src/utils/autorest.ts","webpack://wallet-iframe/../../../../src/apis/node/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/node/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/node/node.ts","webpack://wallet-iframe/../src/Node.ts","webpack://wallet-iframe/../../src/tx/transaction-signer.ts","webpack://wallet-iframe/../../src/tx/execution-cost.ts","webpack://wallet-iframe/../../src/tx/validator.ts","webpack://wallet-iframe/../src/send-transaction.ts","webpack://wallet-iframe/../src/spend.ts","webpack://wallet-iframe/../../src/contract/delegation-signature.ts","webpack://wallet-iframe/../../src/contract/Contract.ts","webpack://wallet-iframe/../../src/contract/ga.ts","webpack://wallet-iframe/../src/AeSdkMethods.ts","webpack://wallet-iframe/../src/AeSdkBase.ts","webpack://wallet-iframe/../src/AeSdk.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://wallet-iframe/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://wallet-iframe/../../src/utils/json-big.ts","webpack://wallet-iframe/../src/AeSdkWallet.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/mappers.ts","webpack://wallet-iframe/../../../../src/apis/compiler/models/parameters.ts","webpack://wallet-iframe/../../../src/apis/compiler/compiler.ts","webpack://wallet-iframe/../../../src/contract/compiler/Base.ts","webpack://wallet-iframe/../../../src/contract/compiler/Http.ts","webpack://wallet-iframe/./src/Value.vue","webpack://wallet-iframe/./src/Value.vue?2a90","webpack://wallet-iframe/./src/App.vue?7ccd","webpack://wallet-iframe/./src/main.js","webpack://wallet-iframe/webpack/bootstrap","webpack://wallet-iframe/webpack/runtime/chunk loaded","webpack://wallet-iframe/webpack/runtime/define property getters","webpack://wallet-iframe/webpack/runtime/global","webpack://wallet-iframe/webpack/runtime/hasOwnProperty shorthand","webpack://wallet-iframe/webpack/runtime/make namespace object","webpack://wallet-iframe/webpack/runtime/jsonp chunk loading","webpack://wallet-iframe/webpack/startup"],"sourcesContent":["<template>\n  <input id=\"toggle-aepp\" type=\"checkbox\" />\n  <h2>\n    Wallet Iframe\n    <label for=\"toggle-aepp\" />\n  </h2>\n\n  <div class=\"group\">\n    <div>\n      <div>Aepp URL</div>\n      <form\n        novalidate\n        @submit.prevent=\"navigate\"\n      >\n        <input\n          type=\"url\"\n          v-model=\"nextAeppUrl\"\n          @focus=\"$event.target.select()\"\n        >\n      </form>\n    </div>\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Node</div>\n      <div>{{ nodeName }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>RPC client</div>\n      <div>status: {{ clientStatus ?? 'no client' }}, id: {{ clientId ?? 'not defined' }}</div>\n    </div>\n\n    <button @click=\"switchAccount\">Switch Account</button>\n    <button @click=\"switchNode\">Switch Node</button>\n\n    <button\n      v-if=\"clientStatus === 'CONNECTED'\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else\n      @click=\"() => (stopSharingWalletInfo ?? shareWalletInfo)()\"\n    >\n      {{ stopSharingWalletInfo ? 'Stop sharing' : 'Share wallet info' }}\n    </button>\n  </div>\n\n  <iframe\n    v-if=\"!runningInFrame\"\n    ref=\"aepp\"\n    :src=\"aeppUrl\"\n  />\n</template>\n\n<script>\nimport {\n  MemoryAccount, generateKeyPair, AeSdkWallet, Node, CompilerHttp,\n  BrowserWindowMessageConnection, METHODS, WALLET_TYPE, RPC_STATUS,\n  RpcConnectionDenyError, RpcRejectedByUserError, unpackTx, unpackDelegation,\n} from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    nextAeppUrl: process.env.VUE_APP_AEPP_URL ?? `http://${location.hostname}:9001`,\n    aeppUrl: '',\n    runningInFrame: window.parent !== window,\n    nodeName: '',\n    address: '',\n    balancePromise: null,\n    clientId: null,\n    clientStatus: null,\n    stopSharingWalletInfo: null,\n  }),\n  methods: {\n    navigate() {\n      if (!/^https?:\\/\\//.test(this.nextAeppUrl) && !this.nextAeppUrl.startsWith('.')) {\n        this.nextAeppUrl = 'http://' + this.nextAeppUrl;\n      }\n      this.aeppUrl = '';\n      this.$nextTick(() => {\n        this.aeppUrl = this.nextAeppUrl;\n      });\n    },\n    shareWalletInfo({ interval = 5000, attempts = 5 } = {}) {\n      const target = this.runningInFrame ? window.parent : this.$refs.aepp.contentWindow;\n      const connection = new BrowserWindowMessageConnection({ target });\n      this.clientId = this.aeSdk.addRpcClient(connection);\n\n      this.aeSdk.shareWalletInfo(this.clientId);\n      const intervalId = setInterval(() => {\n        this.aeSdk.shareWalletInfo(this.clientId);\n        attempts -= 1;\n        if (!attempts) return this.stopSharingWalletInfo();\n      }, interval);\n\n      this.stopSharingWalletInfo = () => {\n        clearInterval(intervalId);\n        // TODO: replace with clientStatus\n        const client = this.aeSdk._getClient(this.clientId);\n        if (client.status === RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST) {\n          this.aeSdk.removeRpcClient(this.clientId);\n        }\n        this.stopSharingWalletInfo = null;\n      }\n    },\n    disconnect() {\n      // TODO: move to removeRpcClient (would be a semi-breaking change)\n      const client = this.aeSdk._getClient(this.clientId);\n      if (client.status === RPC_STATUS.CONNECTED) {\n        client.rpc.notify(METHODS.closeConnection, null);\n      }\n\n      this.aeSdk.removeRpcClient(this.clientId);\n      this.clientId = null;\n    },\n    async switchAccount() {\n      this.address = this.aeSdk.addresses().find((a) => a !== this.address);\n      this.aeSdk.selectAccount(this.address);\n    },\n    async switchNode() {\n      const names = (await this.aeSdk.getNodesInPool()).map(({ name }) => name);\n      this.nodeName = names[(names.indexOf(this.nodeName) + 1) % names.length];\n      this.aeSdk.selectNode(this.nodeName);\n    },\n    updateClientStatus() {\n      if (!this.clientId) {\n        this.clientStatus = null;\n        return;\n      }\n      const client = this.aeSdk._getClient(this.clientId);\n      this.clientStatus = client.status;\n    },\n  },\n  mounted() {\n    this.navigate();\n\n    const aeppInfo = {};\n    const genConfirmCallback = (actionName) => (aeppId, parameters, origin) => {\n      if (!confirm([\n        `Client ${aeppInfo[aeppId].name} with id ${aeppId} at ${origin} want to ${actionName}`,\n        Value.methods.valueToString(parameters),\n      ].join('\\n'))) {\n        throw new RpcRejectedByUserError();\n      }\n    };\n\n    class AccountMemoryProtected extends MemoryAccount {\n      async signTransaction(tx, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          const opt = { ...options, unpackedTx: unpackTx(tx) };\n          if (opt.onCompiler) opt.onCompiler = '<Compiler>';\n          if (opt.onNode) opt.onNode = '<Node>';\n          genConfirmCallback(`sign transaction ${tx}`)(id, opt, aeppOrigin);\n        }\n        return super.signTransaction(tx, options);\n      }\n\n      async signMessage(message, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign message ${message}`)(id, options, aeppOrigin);\n        }\n        return super.signMessage(message, options);\n      }\n\n      async signTypedData(data, aci, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const dataType = new TypeResolver().resolveType(aci);\n          const decodedData = new ContractByteArrayEncoder().decodeWithType(data, dataType);\n          const opt = { ...options, aci, decodedData };\n          genConfirmCallback(`sign typed data ${data}`)(id, opt, aeppOrigin);\n        }\n        return super.signTypedData(data, aci, options);\n      }\n\n      async signDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation to contract')(id, opt, aeppOrigin);\n        }\n        return super.signDelegationToContract(contractAddress, options);\n      }\n\n      async signNameDelegationToContract(\n        contractAddress,\n        name,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, name };\n          genConfirmCallback('sign delegation of name to contract')(id, opt, aeppOrigin);\n        }\n        return super.signNameDelegationToContract(contractAddress, name, options);\n      }\n\n      async signAllNamesDelegationToContract(\n        contractAddress,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress };\n          genConfirmCallback('sign delegation of all names to contract')(id, opt, aeppOrigin);\n        }\n        return super.signAllNamesDelegationToContract(contractAddress, options);\n      }\n\n      async signOracleQueryDelegationToContract(\n        contractAddress,\n        oracleQueryId,\n        { aeppRpcClientId: id, aeppOrigin, ...options },\n      ) {\n        if (id != null) {\n          const opt = { ...options, contractAddress, oracleQueryId };\n          genConfirmCallback('sign delegation of oracle query to contract')(id, opt, aeppOrigin);\n        }\n        return super.signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n      }\n\n      async sign(data, { aeppRpcClientId: id, aeppOrigin, ...options } = {}) {\n        if (id != null) {\n          genConfirmCallback(`sign raw data ${data}`)(id, options, aeppOrigin);\n        }\n        return super.sign(data, options);\n      }\n\n      async signDelegation(delegation, { aeppRpcClientId: id, aeppOrigin, ...options }) {\n        if (id != null) {\n          const opt = { ...options, ...unpackDelegation(delegation) };\n          genConfirmCallback('sign delegation')(id, opt, aeppOrigin);\n        }\n        return super.signDelegation(delegation, options);\n      }\n\n      static generate() {\n        // TODO: can inherit parent method after implementing https://github.com/aeternity/aepp-sdk-js/issues/1672\n        return new AccountMemoryProtected(generateKeyPair().secretKey);\n      }\n    }\n\n    this.aeSdk = new AeSdkWallet({\n      id: window.origin,\n      type: WALLET_TYPE.window,\n      nodes: [\n        { name: 'ae_uat', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'ae_mainnet', instance: new Node('https://mainnet.aeternity.io') },\n        { name: 'ae_next', instance: new Node('https://next.aeternity.io') },\n      ],\n      accounts: [\n        new AccountMemoryProtected('9ebd7beda0c79af72a42ece3821a56eff16359b6df376cf049aee995565f022f840c974b97164776454ba119d84edc4d6058a8dec92b6edc578ab2d30b4c4200'),\n        AccountMemoryProtected.generate(),\n      ],\n      onCompiler: new CompilerHttp('https://v7.compiler.aepps.com'),\n      name: 'Wallet Iframe',\n      onConnection: (aeppId, params, origin) => {\n        if (!confirm(`Client ${params.name} with id ${aeppId} at ${origin} want to connect`)) {\n          throw new RpcConnectionDenyError();\n        }\n        aeppInfo[aeppId] = params;\n        setTimeout(() => this.stopSharingWalletInfo());\n      },\n      onSubscription: genConfirmCallback('subscription'),\n      onAskAccounts: genConfirmCallback('get accounts'),\n      onDisconnect: (clientId) => {\n        console.log('disconnected client', clientId);\n        this.clientId = null;\n      },\n    });\n\n    if (this.runningInFrame) this.shareWalletInfo();\n\n    this.nodeName = this.aeSdk.selectedNodeName;\n    [this.address] = this.aeSdk.addresses();\n\n    this.$watch(\n      ({ address, nodeName }) => [address, nodeName],\n      ([address]) => {\n        this.balancePromise = this.aeSdk.getBalance(address);\n      },\n      { immediate: true },\n    );\n\n    // TODO: replace setInterval with subscription after refactoring\n    setInterval(() => this.updateClientStatus(), 1000);\n    this.$watch(({ clientId }) => [clientId], () => this.updateClientStatus(), { immediate: true });\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n\n<style lang=\"scss\" scoped>\ninput[id=toggle-aepp] {\n  display: none;\n}\n\nlabel[for=toggle-aepp]::after {\n  font-size: initial;\n  font-weight: initial;\n  text-decoration: underline dotted;\n  cursor: pointer;\n}\n\n@media (max-width: 450px), (max-height: 650px) {\n  input[id=toggle-aepp] {\n    &:checked ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Hide aepp';\n      }\n\n      .group {\n        display: none;\n      }\n    }\n\n    &:not(:checked) ~ {\n      h2 label[for=toggle-aepp]::after {\n        content: 'Show aepp';\n      }\n\n      iframe {\n        display: none;\n      }\n    }\n  }\n}\n</style>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  unsafeSign = 'data.unsafeSign',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegationToContract = 'delegationToContract.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { AensName, ConsensusProtocolVersion, Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\nimport { NotImplementedError } from '../utils/errors';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signTypedData(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signTypedData method');\n  }\n\n  /**\n   * Sign delegation of AENS, oracle operations to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @param options.isOracle - Use to generate an oracle delegation signature in Ceres, otherwise an\n   * AENS preclaim delegation signature would be generated\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of an AENS name to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param name - AENS name to manage by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signNameDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signNameDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of all AENS names to a contract (not available in Iris)\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signAllNamesDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signAllNamesDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of oracle query to a contract\n   *\n   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded\n   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.\n   *\n   * Warning! Implementations needs to ensure that oracle query and contract exists unless\n   * https://github.com/aeternity/aesophia/issues/474 is fixed.\n   *\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param oracleQueryId - Oracle query ID to reply by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signOracleQueryDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signOracleQueryDelegationToContract method');\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegation(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegation method');\n  }\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\n// based on https://stackoverflow.com/a/61108377\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Signs a message, and then verifies that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9; // TODO: don't use number for ae\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  SignedTx = 11,\n  SpendTx = 12,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelClientReconnectTx = 575,\n  ChannelSnapshotSoloTx = 59,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { EntryTag } from '../entry/constants';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\nexport default function genEntryField<T extends EntryTag = EntryTag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { packEntry }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(packEntry({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackEntry }) {\n      return unpackEntry(encode(buf, Encoding.Bytearray), tag);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","function verCmp(a: string, b: string): number {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const aComponents = getComponents(a);\n  const bComponents = getComponents(b);\n\n  const base = Math.max(...aComponents, ...bComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  return componentsToNumber(aComponents) - componentsToNumber(bComponents);\n}\n\nexport default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion?: string,\n): boolean {\n  return verCmp(version, geVersion) >= 0\n    && (ltVersion == null || verCmp(version, ltVersion) < 0);\n}\n","import BigNumber from 'bignumber.js';\nimport coinAmount from './coin-amount';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE } from '../constants';\nimport Node from '../../../Node';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\nimport semverSatisfies from '../../../utils/semver-satisfies';\n\nconst gasPriceCache: WeakMap<Node, { time: number; gasPrice: bigint }> = new WeakMap();\n\nexport async function getCachedIncreasedGasPrice(node: Node): Promise<bigint> {\n  const cache = gasPriceCache.get(node);\n  if (cache != null && cache.time > Date.now() - 20 * 1000) {\n    return cache.gasPrice;\n  }\n\n  // TODO: remove after requiring node@6.13.0\n  const { nodeVersion } = await node._getCachedStatus();\n  if (!semverSatisfies(nodeVersion, '6.13.0')) return 0n;\n\n  const { minGasPrice, utilization } = (await node.getRecentGasPrices())[0];\n  let gasPrice = utilization < 70 ? 0n : BigInt(\n    new BigNumber(minGasPrice.toString()).times(1.01).integerValue().toFixed(),\n  );\n\n  const maxSafeGasPrice = BigInt(MIN_GAS_PRICE) * 100000n; // max microblock fee is 600ae or 35usd\n  if (gasPrice > maxSafeGasPrice) {\n    console.warn([\n      `Estimated gas price ${gasPrice} exceeds the maximum safe value for unknown reason.`,\n      `It will be limited to ${maxSafeGasPrice}.`,\n      'To overcome this restriction provide `gasPrice`/`fee` in options.',\n    ].join(' '));\n    gasPrice = maxSafeGasPrice;\n  }\n\n  gasPriceCache.set(node, { gasPrice, time: Date.now() });\n  return gasPrice;\n}\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode, denomination }: {\n      onNode?: Node;\n      denomination?: AE_AMOUNT_FORMATS;\n    },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `gasPrice` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return formatAmount(gasPrice, { targetDenomination: denomination });\n  },\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE, Tag } from '../constants';\nimport uInt from './u-int';\nimport coinAmount from './coin-amount';\nimport { getCachedIncreasedGasPrice } from './gas-price';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\nimport Node from '../../../Node';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the base gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base gas\n * @example\n * ```js\n * TX_BASE_GAS(Tag.ChannelForceProgressTx) => 30 * 15000\n * ```\n */\nconst TX_BASE_GAS = (txType: Tag): number => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return factor * BASE_GAS;\n};\n\n/**\n * Calculate gas for other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The other gas\n * @example\n * ```js\n * TX_OTHER_GAS(Tag.OracleResponseTx, 10, { relativeTtl: 12, innerTxSize: 0 })\n *  => 10 * 20 + Math.ceil(32000 * 12 / Math.floor(60 * 24 * 365 / 3))\n * ```\n */\nconst TX_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): number => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return txSize * GAS_PER_BYTE\n        + Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL));\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return (txSize - innerTxSize) * GAS_PER_BYTE;\n    default:\n      return txSize * GAS_PER_BYTE;\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate gas based on tx type and params\n */\nexport function buildGas(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_BASE_GAS(txObject.tag)\n    + TX_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    });\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = new BigNumber(MIN_GAS_PRICE).times(buildGas(rebuildTx(fee), unpackTx, buildTx));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\n// TODO: Get rid of this workaround. Transaction builder can't accept/return gas price instead of\n// fee because it may get a decimal gas price. So, it should accept the optional `gasPrice` even\n// if it is not a contract-related transaction. And use this `gasPrice` to calculate `fee`.\nconst gasPricePrefix = '_gas-price:';\n\nexport interface SerializeAettosParams {\n  rebuildTx: (params: any) => Encoded.Transaction;\n  unpackTx: typeof unpackTxType;\n  buildTx: typeof buildTxType;\n  _computingMinFee?: BigNumber;\n}\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode }: { onNode?: Node },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `fee` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return gasPricePrefix + gasPrice;\n  },\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee,\n    }: SerializeAettosParams,\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value?.startsWith(gasPricePrefix) === true\n      ? minFee.dividedBy(MIN_GAS_PRICE).times(_value.replace(gasPricePrefix, ''))\n      : new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1] & SerializeAettosParams,\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    if (typeof value === 'string' && value.startsWith(gasPricePrefix)) {\n      return uInt.serialize(this.serializeAettos(value, params, options));\n    }\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildGas } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildGas(rebuildTx(gasMax), unpackTx, buildTx);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\nimport { isAddressValid } from '../../../utils/crypto';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) payload = [ID_TAG, addressAny.serialize(id)];\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError('Raw pointer', `shorter than ${DATA_LENGTH_MAX + 1} bytes`, `${data.length} bytes`);\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(([bKey, bId]) => {\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray);\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genTransactionField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      return unpackTx(encode(buf, Encoding.Transaction), tag);\n    },\n  };\n}\n","import { ArgumentError } from './errors';\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb();\n      if (target == null) throw new ArgumentError('wrapped value', 'defined', target);\n      if (name === 'get' && args[0] === '_wrappedValue') return target;\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get' ? res.bind(target) : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport { isAccountNotFoundError, pause } from './utils/other';\nimport { unwrapProxy } from './utils/wrap-proxy';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport async function _getPollInterval(\n  type: 'key-block' | 'micro-block',\n  { _expectedMineRate, _microBlockCycle, onNode }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; onNode: Node },\n): Promise<number> {\n  const getVal = async (\n    t: string,\n    val: number | undefined,\n    devModeDef: number,\n    def: number,\n  ): Promise<number | null> => {\n    if (t !== type) return null;\n    if (val != null) return val;\n    return await onNode?.getNetworkId() === 'ae_dev' ? devModeDef : def;\n  };\n\n  const base = await getVal('key-block', _expectedMineRate, 0, 180000)\n    ?? await getVal('micro-block', _microBlockCycle, 0, 3000)\n    ?? (() => { throw new InternalError(`Unknown type: ${type}`); })();\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight(\n  { cached = false, ...options }: {\n    onNode: Node;\n    cached?: boolean;\n  } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache != null && cache.time > Date.now() - await _getPollInterval('key-block', options)) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Return transaction details if it is mined, fail otherwise.\n * If the transaction has ttl specified then would wait till it leaves the mempool.\n * Otherwise would fail if a specified amount of blocks were mined.\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail if transaction ttl is not set\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let max;\n  do {\n    const tx = await options.onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    if (max == null) {\n      max = tx.tx.ttl !== 0 ? -1\n        : await getHeight({ ...options, cached: true }) + blocks;\n    }\n    await pause(interval);\n  } while (max === -1 ? true : await getHeight({ ...options, cached: true }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(await _getPollInterval('key-block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight(options);\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { _getPollInterval, getHeight } from '../../../chain';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    {\n      onNode, absoluteTtl, _isInternalBuild, ...options\n    }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n      _isInternalBuild?: boolean;\n    } & Omit<Parameters<typeof _getPollInterval>[1], 'onNode'>,\n  ) {\n    if (absoluteTtl !== true && value !== 0 && (value != null || _isInternalBuild === true)) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value = (value ?? 3) + await getHeight({ ...options, onNode, cached: true });\n    }\n    return value;\n  },\n};\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","export enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n/**\n * @category entry building\n */\nexport enum EntryTag {\n  Account = 10,\n  Oracle = 20,\n  // OracleQuery = 21,\n  Name = 30,\n  // NameCommitment = 31,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  Channel = 58,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaMetaTxAuthData = 810,\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport abiVersion from './field-types/abi-version';\nimport address, { idTagToEncoding } from './field-types/address';\nimport array from './field-types/array';\nimport coinAmount from './field-types/coin-amount';\nimport ctVersion from './field-types/ct-version';\nimport encoded from './field-types/encoded';\nimport entry from './field-types/entry';\nimport enumeration from './field-types/enumeration';\nimport fee from './field-types/fee';\nimport gasLimit from './field-types/gas-limit';\nimport gasPrice from './field-types/gas-price';\nimport name from './field-types/name';\nimport nameFee from './field-types/name-fee';\nimport nameId from './field-types/name-id';\nimport nonce from './field-types/nonce';\nimport pointers from './field-types/pointers';\nimport pointers2 from './field-types/pointers2';\nimport queryFee from './field-types/query-fee';\nimport raw from './field-types/raw';\nimport shortUInt from './field-types/short-u-int';\nimport shortUIntConst from './field-types/short-u-int-const';\nimport string from './field-types/string';\nimport transaction from './field-types/transaction';\nimport ttl from './field-types/ttl';\nimport uInt from './field-types/u-int';\nimport withDefault from './field-types/with-default';\nimport withFormatting from './field-types/with-formatting';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { EntryTag } from './entry/constants';\nimport { EntParams, EntUnpacked } from './entry/schema.generated';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface TransactionAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst transactionAny = transaction() as unknown as TransactionAny;\n\ninterface TransactionSignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst transactionSignedTx = transaction(Tag.SignedTx) as unknown as TransactionSignedTx;\n\ninterface EntryTreesPoi {\n  serialize: (\n    value: EntParams & { tag: EntryTag.TreesPoi } | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => EntUnpacked & { tag: EntryTag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(EntryTag.TreesPoi) as unknown as EntryTreesPoi;\n\n// TODO: inline after dropping Iris compatibility\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\n/**\n * Name ttl represented in number of blocks (Max value is 50000 blocks)\n */\nconst nameTtl = withFormatting(\n  (value) => {\n    const NAME_TTL = 180000;\n    value ??= NAME_TTL;\n    if (value >= 1 && value <= NAME_TTL) return value;\n    throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n  },\n  shortUInt,\n);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: transactionAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: withDefault(0, uInt),\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(2),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers2,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: transactionSignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: transactionSignedTx,\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types/interface';\nimport {\n  ArgumentError, DecodeError, SchemaNotFoundError, InternalError,\n} from '../../utils/errors';\nimport {\n  Encoding, Encoded, encode, decode,\n} from '../../utils/encoder';\nimport { readInt } from './helpers';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null) throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) => (\n    field.serialize(params[key], { ...params, ...extraParams }, params)\n  ));\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name, field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { EntryTag } from '../entry/constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\nexport default function genMapField<E extends Encoding, T extends EntryTag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { packEntry: typeof packEntryType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { packEntry }) {\n      return decode(packEntry({\n        tag: EntryTag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: EntryTag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(packEntry({ ...value as any, tag })),\n        } as const)),\n      }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      const { values } = unpackEntry(encode(buffer, Encoding.Bytearray), EntryTag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackEntry(encode(value, Encoding.Bytearray), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { EntryTag } from '../entry/constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackEntry } from '../entry';\nimport type { EntUnpacked } from '../entry/schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends EntryTag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackEntry: typeof unpackEntry;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpEnt - Implementation of unpackEntry use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpEnt: typeof unpackEntry) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackEntry = unpEnt;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): EntUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackEntry(encode(d, Encoding.Bytearray), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, EntUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackEntry(encode(v, Encoding.Bytearray), this.#tag),\n      ])) as Record<Encoded.Generic<E>, EntUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n    serialize: (value: MPTree<E, T>) => MPTreeBinary;\n    deserialize: (value: MPTreeBinary, o: { unpackEntry: typeof unpackEntry }) => MPTree<E, T>;\n  } {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackEntry }) {\n      return new MPTree(value, encoding, tag, unpackEntry);\n    },\n  };\n}\n","import { EntryTag } from '../entry/constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\ntype TagWrapping = EntryTag.AccountsMtree | EntryTag.CallsMtree | EntryTag.ChannelsMtree\n| EntryTag.ContractsMtree | EntryTag.NameserviceMtree | EntryTag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(EntParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { packEntry: typeof packEntryType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `(EntUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { packEntry }) {\n      return decode(packEntry({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      return unpackEntry<TagWrapping>(encode(buffer, Encoding.Bytearray), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import SchemaTypes from '../SchemaTypes';\nimport abiVersion from '../field-types/abi-version';\nimport address, { idTagToEncoding } from '../field-types/address';\nimport array from '../field-types/array';\nimport boolean from '../field-types/boolean';\nimport coinAmount from '../field-types/coin-amount';\nimport ctVersion from '../field-types/ct-version';\nimport encoded from '../field-types/encoded';\nimport entry from '../field-types/entry';\nimport enumeration from '../field-types/enumeration';\nimport gasLimit from '../field-types/gas-limit';\nimport gasPrice from '../field-types/gas-price';\nimport map from '../field-types/map';\nimport mptree from '../field-types/mptree';\nimport pointers from '../field-types/pointers';\nimport raw from '../field-types/raw';\nimport shortUInt from '../field-types/short-u-int';\nimport shortUIntConst from '../field-types/short-u-int-const';\nimport string from '../field-types/string';\nimport uInt from '../field-types/u-int';\nimport wrapped from '../field-types/wrapped';\nimport {\n  Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { EntryTag, CallReturnType } from './constants';\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<EntParams & { tag: EntryTag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<EntUnpacked & { tag: EntryTag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(EntryTag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, EntParams & { tag: EntryTag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, EntUnpacked & { tag: EntryTag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, EntryTag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, EntParams & { tag: EntryTag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.AccountAddress,\n  EntUnpacked & { tag: EntryTag.Account }\n  >;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, EntryTag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, EntParams & { tag: EntryTag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.Bytearray,\n  EntUnpacked & { tag: EntryTag.ContractCall }\n  >;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, EntryTag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, EntParams & { tag: EntryTag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, EntUnpacked & { tag: EntryTag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, EntryTag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, EntParams & { tag: EntryTag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, EntUnpacked & { tag: EntryTag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, EntryTag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, EntParams & { tag: EntryTag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.OracleAddress,\n  EntUnpacked & { tag: EntryTag.Oracle }\n  >;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, EntryTag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(EntryTag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  /**\n   * a suggestion as to how long any clients should cache this information\n   */\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(EntryTag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(EntryTag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(EntryTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(EntryTag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(EntryTag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, EntryTag.Account)),\n  calls: array(mptree(Encoding.Bytearray, EntryTag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, EntryTag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, EntryTag.Contract)),\n  ns: array(mptree(Encoding.Name, EntryTag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, EntryTag.Oracle)),\n}, {\n  tag: shortUIntConst(EntryTag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(EntryTag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(EntryTag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(EntryTag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(EntryTag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(EntryTag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(EntryTag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(EntryTag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(EntryTag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(EntryTag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(EntryTag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(EntryTag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(EntryTag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(EntryTag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(EntryTag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type EntParams = Schemas['TxParams'];\nexport type EntUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { schemas } from './schema';\nimport { EntryTag } from './constants';\nimport { EntParams, EntUnpacked } from './schema.generated';\n\nconst encodingTag = [\n  [EntryTag.CallsMtree, Encoding.CallStateTree],\n  [EntryTag.StateTrees, Encoding.StateTrees],\n  [EntryTag.TreesPoi, Encoding.Poi],\n] as const;\n\nexport function packEntry(params: EntParams & { tag: EntryTag.CallsMtree }): Encoded.CallStateTree;\nexport function packEntry(params: EntParams & { tag: EntryTag.StateTrees }): Encoded.StateTrees;\nexport function packEntry(params: EntParams & { tag: EntryTag.TreesPoi }): Encoded.Poi;\n/**\n * Pack entry\n * @category entry builder\n * @param params - Params of entry\n * @returns Encoded entry\n */\nexport function packEntry(params: EntParams): Encoded.Any;\nexport function packEntry(params: EntParams): Encoded.Any {\n  const encoding = encodingTag.find(([tag]) => tag === params.tag)?.[1] ?? Encoding.Bytearray;\n  return packRecord(schemas, EntryTag, params, { packEntry }, encoding);\n}\n\nexport function unpackEntry(\n  encoded: Encoded.CallStateTree,\n): EntUnpacked & { tag: EntryTag.CallsMtree };\nexport function unpackEntry(\n  encoded: Encoded.StateTrees,\n): EntUnpacked & { tag: EntryTag.StateTrees };\nexport function unpackEntry(\n  encoded: Encoded.Poi,\n): EntUnpacked & { tag: EntryTag.TreesPoi };\n/**\n * Unpack entry\n * @category entry builder\n * @param encoded - Encoded entry\n * @param expectedTag - Expected entry type\n * @returns Params of entry\n */\nexport function unpackEntry<T extends EntryTag>(\n  encoded: Encoded.Any,\n  expectedTag?: T,\n): EntUnpacked & { tag: T };\nexport function unpackEntry(\n  encoded: Encoded.Any,\n  expectedTag?: EntryTag,\n): EntUnpacked {\n  expectedTag ??= encodingTag.find(([, enc]) => encoded.startsWith(enc))?.[0];\n  return unpackRecord(schemas, EntryTag, encoded, expectedTag, { unpackEntry }) as any;\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { Field } from './field-types/interface';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId } from './helpers';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common';\nimport { ArgumentError } from '../../utils/errors';\nimport { packEntry, unpackEntry } from './entry';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction {\n  return packRecord(txSchema, Tag, params, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n    buildTx,\n    rebuildTx: (overrideParams: any) => buildTx(\n      { ...params, ...overrideParams },\n    ),\n    packEntry,\n  }, Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, { unpackTx, unpackEntry }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import SchemaTypes from '../SchemaTypes';\nimport address from '../field-types/address';\nimport nameId from '../field-types/name-id';\nimport shortUIntConst from '../field-types/short-u-int-const';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  AensWildcard = 1,\n  AensName = 2,\n  AensPreclaim = 3,\n  Oracle = 4,\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(DelegationTag.AensWildcard),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensName),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  nameId,\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensPreclaim),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.OracleResponse),\n  version: shortUIntConst(1, true),\n  queryId: queryIdField,\n  contractAddress: address(Encoding.ContractAddress),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { DelegationTag, schemas } from './schema';\nimport { DlgParams, DlgUnpacked } from './schema.generated';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash, messagePrefixLength,\n} from '../utils/crypto';\nimport { ArgumentError, UnexpectedTsError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { produceNameId } from '../tx/builder/helpers';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\nimport { packDelegation } from '../tx/builder/delegation';\n\nconst secretKeys = new WeakMap<AccountMemory, Uint8Array>();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKey).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    const secretKey = secretKeys.get(this);\n    if (secretKey == null) throw new UnexpectedTsError();\n    return sign(data, secretKey);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion, isOracle }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountMemory:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(produceNameId(name)),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      Buffer.from('AENS'),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    const oracleQueryIdDecoded = decode(oracleQueryId);\n    const addressDecoded = decode(this.address);\n    // TODO: remove after fixing https://github.com/aeternity/aesophia/issues/475\n    if (oracleQueryIdDecoded.compare(addressDecoded) === 0) {\n      throw new ArgumentError('oracleQueryId', 'not equal to account address', oracleQueryId);\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      oracleQueryIdDecoded,\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength, new Uint8Array([1]), Buffer.from(networkId), decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import { RestError, PipelineResponse } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig, FullOperationResponse, OperationOptions } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(key, req.catch(() => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        const body = (error.response as FullOperationResponse).parsedBody;\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  versionCb: (options: OperationOptions) => Promise<string>,\n  geVersion: string,\n  ltVersion: string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'version-check',\n    async sendRequest(request, next) {\n      if (request.headers.has('__version-check')) {\n        request.headers.delete('__version-check');\n        return next(request);\n      }\n      const options = { requestOptions: { customHeaders: { '__version-check': 'true' } } };\n      const args = [await versionCb(options), geVersion, ltVersion] as const;\n      if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n      return next(request);\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      errorCode: {\n        serializedName: \"error_code\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedTx: {\n        serializedName: \"encoded_tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const AuctionEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuctionEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      startedAt: {\n        serializedName: \"started_at\",\n        type: {\n          name: \"String\",\n        },\n      },\n      endsAt: {\n        serializedName: \"ends_at\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBidder: {\n        serializedName: \"highest_bidder\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBid: {\n        serializedName: \"highest_bid\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SyncStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SyncStatus\",\n    modelProperties: {\n      progress: {\n        serializedName: \"progress\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      speed: {\n        serializedName: \"speed\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      estimate: {\n        serializedName: \"estimate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hashrate: {\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      uptime: {\n        serializedName: \"uptime\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Currency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunit: {\n        serializedName: \"subunit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunitsPerUnit: {\n        serializedName: \"subunits_per_unit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fiatConverstionUrl: {\n        serializedName: \"fiat_converstion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      logo: {\n        serializedName: \"logo\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\",\n        },\n      },\n      primaryColour: {\n        serializedName: \"primary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      secondaryColour: {\n        serializedName: \"secondary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkName: {\n        serializedName: \"network_name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Image: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GasPricesItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GasPricesItem\",\n    modelProperties: {\n      minGasPrice: {\n        serializedName: \"min_gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      utilization: {\n        serializedName: \"utilization\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      minutes: {\n        serializedName: \"minutes\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\",\n        },\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetAuctionEntryByNameOptionalParams,\n  GetAuctionEntryByNameResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetSyncStatusOptionalParams,\n  GetSyncStatusResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n  GetCurrencyOptionalParams,\n  GetCurrencyResponse,\n  GetRecentGasPricesOptionalParams,\n  GetRecentGasPricesResponse,\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Dry-run unsigned transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx\n   * and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get auction entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getAuctionEntryByName(\n    name: string,\n    options?: GetAuctionEntryByNameOptionalParams,\n  ): Promise<GetAuctionEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getAuctionEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the sync status of a node\n   * @param options The options parameters.\n   */\n  getSyncStatus(\n    options?: GetSyncStatusOptionalParams,\n  ): Promise<GetSyncStatusResponse> {\n    return this.sendOperationRequest({ options }, getSyncStatusOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n\n  /**\n   * Get the currency metadata of a node\n   * @param options The options parameters.\n   */\n  getCurrency(\n    options?: GetCurrencyOptionalParams,\n  ): Promise<GetCurrencyResponse> {\n    return this.sendOperationRequest({ options }, getCurrencyOperationSpec);\n  }\n\n  /**\n   * Get minimum gas prices in recent blocks\n   * @param options The options parameters.\n   */\n  getRecentGasPrices(\n    options?: GetRecentGasPricesOptionalParams,\n  ): Promise<GetRecentGasPricesResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getRecentGasPricesOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAuctionEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/auctions/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AuctionEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSyncStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/sync-status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SyncStatus,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrencyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/currency\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Currency,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecentGasPricesOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/recent-gas-prices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"GasPricesItem\" } },\n        },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationOptions, OperationSpec } from '@azure/core-client';\nimport { userAgentPolicyName, setClientRequestIdPolicyName } from '@azure/core-rest-pipeline';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'minGasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round', 'minutes', 'utilization', 'difficulty', 'hashrate',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    const getVersion = async (opts: OperationOptions): Promise<string> => (\n      (await this._getCachedStatus(opts)).nodeVersion\n    );\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('node', getVersion, '6.2.0', '8.0.0')],\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => [\n          ' ', body.reason, body.errorCode == null ? '' : ` (${body.errorCode})`,\n        ].join('')),\n      ],\n      ...options,\n    });\n    this.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n    // TODO: use instead our retry policy\n    this.pipeline.removePolicy({ name: 'defaultRetryPolicy' });\n    this.intAsString = true;\n  }\n\n  #cachedStatusPromise?: ReturnType<Node['getStatus']>;\n\n  async _getCachedStatus(options?: OperationOptions): ReturnType<Node['getStatus']> {\n    if (this.#cachedStatusPromise != null) return this.#cachedStatusPromise;\n    return this.getStatus(options);\n  }\n\n  // eslint-disable-next-line rulesdir/tsdoc-syntax\n  /** @ts-expect-error use code generation to create node class? */\n  override async getStatus(\n    ...args: Parameters<InstanceType<NodeTransformedApi>['getStatus']>\n  ): ReturnType<InstanceType<NodeTransformedApi>['getStatus']> {\n    const promise = super.getStatus(...args);\n    promise.then(() => { this.#cachedStatusPromise = promise; }, () => {});\n    return promise;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    return (await this._getCachedStatus()).networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, isAddressValid, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, Encoding, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  async (tx, { node }) => {\n    if (tx.tag !== Tag.SpendTx || isAddressValid(tx.recipientId, Encoding.Name)) return [];\n    const recipient = await node.getAccountByPubkey(tx.recipientId).catch((error) => {\n      if (!isAccountNotFoundError(error)) throw error;\n      return null;\n    });\n    if (recipient == null || recipient.payable === true) return [];\n    return [{\n      message: 'Recipient account is not payable',\n      key: 'RecipientAccountNotPayable',\n      checkedKeys: ['recipientId'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n  // TODO: move to fee field of tx builder after dropping Iris\n  (tx, { consensusProtocolVersion }) => ((\n    Tag.GaAttachTx === tx.tag\n      && ConsensusProtocolVersion.Ceres === consensusProtocolVersion\n      && tx.nonce !== 1\n  ) ? [{\n      message: `Account ${tx.ownerId} can't become generalized because it is already used`,\n      key: 'AccountUsed',\n      checkedKeys: ['nonce'],\n    }]\n    : []),\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError } from './utils/other';\nimport { TransactionError } from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport { SignedTx } from './apis/node';\nimport { Encoded } from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\nimport { poll, waitForTxConfirm } from './chain';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction({ tx }, {\n      requestOptions: {\n        customHeaders: {\n          // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n          '__retry-code': '400',\n          ...__queue != null ? { __queue } : {},\n        },\n      },\n    });\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","import BigNumber from 'bignumber.js';\nimport { getBalance, resolveName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  {\n    onAccount, omitAddress, isOracle, ...options\n  }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    isOracle?: boolean;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const { nodeNetworkId, consensusProtocolVersion } = await options.onNode.getNodeInfo();\n  const signOpts = { networkId: nodeNetworkId, consensusProtocolVersion };\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signDelegationToContract(contractAddress, { ...signOpts, isOracle }),\n    );\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, signOpts),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, signOpts),\n  );\n}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport {\n  Tag, AensName, ConsensusProtocolVersion, DRY_RUN_ACCOUNT,\n} from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun,\n} from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await Contract.initialize({ ...aeSdk.getContext(), sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        if (/Expected \\d+ arguments, got \\d+/.test(message)) {\n          throw new ContractError(`ACI doesn't match called contract. Error provided by node: ${message}`);\n        }\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      const isIris = (await onNode.getNodeInfo())\n        .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n      if (!isIris && isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { getAccount } from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport CompilerBase from './compiler/Base';\nimport { packEntry } from '../tx/builder/entry';\nimport { EntryTag } from '../tx/builder/entry/constants';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(packEntry({\n      tag: EntryTag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport { sendTransaction } from './send-transaction';\nimport * as spendMethods from './spend';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...spendMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    // TODO: remove `any` at the same time as AeSdk class\n    return buildTxAsync({ ...this.getContext() as any, ...options });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n    /**\n     * Make operation on specific account by providing address (to use account from sdk) or instance\n     * of AccountBase (like MemoryAccount)\n     */\n    onAccount: OnAccount;\n  } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param name - AENS name\n   * @param options - Options\n   */\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signAllNamesDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signAllNamesDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param oracleQueryId - Oracle query id\n   * @param options - Options\n   */\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      },\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport { decode, Encoded } from './utils/encoder';\nimport { UnavailableAccountError } from './utils/errors';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  /**\n   * @param options - Options\n   */\n  constructor(\n    { accounts, ...options }: { accounts?: AccountBase[] }\n    & ConstructorParameters<typeof AeSdkBase>[0] = {},\n  ) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = (\n    new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>()\n  );\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\nimport { AensName } from '../../tx/builder/constants';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.unsafeSign]: (\n    p: { data: Encoded.Bytearray; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegationToContract]: (\n    p: {\n      contractAddress: Encoded.ContractAddress;\n      name?: AensName;\n      oracleQueryId?: Encoded.OracleQueryId;\n      allNames?: boolean;\n      isOracle?: boolean;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (\n    p: {\n      delegation: Encoded.Bytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import JsonBig from 'json-bigint';\nimport BigNumber from 'bignumber.js';\nimport { mapObject } from './other';\n\nconst jsonBig = JsonBig({ storeAsString: true });\n\nconst convertValuesToBigNumbers = (value: any): any => {\n  if (typeof value === 'object' && value !== null && value.constructor === Object) {\n    return mapObject(value, ([k, v]) => [k, convertValuesToBigNumbers(v)]);\n  }\n  if (Array.isArray(value)) {\n    return value.map((item) => convertValuesToBigNumbers(item));\n  }\n  if (typeof value === 'string' && new BigNumber(value).toString(10) === value) {\n    const bn = new BigNumber(value);\n    bn.toJSON = () => bn.toString(10);\n    return bn;\n  }\n  return value;\n};\n\nexport default {\n  stringify: (...args: Parameters<typeof JsonBig['stringify']>): string => (\n    jsonBig.stringify(convertValuesToBigNumbers(args[0]), ...args.slice(1))\n  ),\n  parse: jsonBig.parse,\n};\n","import { v4 as uuid } from '@aeternity/uuid';\nimport AeSdk from './AeSdk';\nimport verifyTransaction from './tx/validator';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport {\n  METHODS, RPC_STATUS, SUBSCRIPTION_TYPES, WALLET_TYPE,\n  RpcInvalidTransactionError,\n  RpcNotAuthorizeError, RpcPermissionDenyError, RpcUnsupportedProtocolError,\n} from './aepp-wallet-communication/schema';\nimport { InternalError, UnknownRpcClientError } from './utils/errors';\nimport AccountBase from './account/Base';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\nimport {\n  Accounts,\n  AeppApi,\n  Network,\n  RPC_VERSION,\n  WalletApi,\n  WalletInfo,\n} from './aepp-wallet-communication/rpc/types';\nimport {\n  Encoded, Encoding, encode, decode,\n} from './utils/encoder';\nimport jsonBig from './utils/json-big';\n\ntype RpcClientWallet = RpcClient<AeppApi, WalletApi>;\n\ntype OnConnection = (\n  clientId: string, params: Omit<Parameters<WalletApi[METHODS.connect]>[0], 'version'>, origin: string\n) => void;\n\ntype OnSubscription = (\n  clientId: string, params: Parameters<WalletApi[METHODS.subscribeAddress]>[0], origin: string\n) => void;\n\ntype OnDisconnect = (\n  clientId: string, params: Parameters<WalletApi[METHODS.closeConnection]>[0]\n) => void;\n\ntype OnAskAccounts = (\n  clientId: string, params: undefined, origin: string\n) => void;\n\ninterface RpcClientsInfo {\n  id: string;\n  status: RPC_STATUS;\n  connectNode: boolean;\n  addressSubscription: Set<'connected' | 'current'>;\n  rpc: RpcClientWallet;\n}\n\n/**\n * Contain functionality for aepp interaction and managing multiple aepps\n * @category aepp wallet communication\n */\nexport default class AeSdkWallet extends AeSdk {\n  id: string;\n\n  _type: WALLET_TYPE;\n\n  name: string;\n\n  _clients = new Map<string, RpcClientsInfo>();\n\n  onConnection: OnConnection;\n\n  onSubscription: OnSubscription;\n\n  onDisconnect: OnDisconnect;\n\n  onAskAccounts: OnAskAccounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Wallet name\n   * @param options.id - Wallet id\n   * @param options.type - Wallet type\n   * @param options.onConnection - Call-back function for incoming AEPP connection\n   * @param options.onSubscription - Call-back function for incoming AEPP account subscription\n   * @param options.onAskAccounts - Call-back function for incoming AEPP get address request\n   * @param options.onDisconnect - Call-back function for disconnect event\n   */\n  constructor({\n    name,\n    id,\n    type,\n    onConnection,\n    onSubscription,\n    onDisconnect,\n    onAskAccounts,\n    ...options\n  }: {\n    id: string;\n    type: WALLET_TYPE;\n    name: string;\n    onConnection: OnConnection;\n    onSubscription: OnSubscription;\n    onDisconnect: OnDisconnect;\n    onAskAccounts: OnAskAccounts;\n  } & ConstructorParameters<typeof AeSdk>[0]) {\n    super(options);\n    this.onConnection = onConnection;\n    this.onSubscription = onSubscription;\n    this.onDisconnect = onDisconnect;\n    this.onAskAccounts = onAskAccounts;\n    this.name = name;\n    this.id = id;\n    this._type = type;\n  }\n\n  _getAccountsForClient({ addressSubscription }: RpcClientsInfo): Accounts {\n    const { current, connected } = this.getAccounts();\n    return {\n      current: addressSubscription.has('current') || addressSubscription.has('connected')\n        ? current : {},\n      connected: addressSubscription.has('connected') ? connected : {},\n    };\n  }\n\n  _pushAccountsToApps(): void {\n    if (this._clients == null) return;\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .filter((client) => client.addressSubscription.size !== 0)\n      .forEach((client) => client.rpc\n        .notify(METHODS.updateAddress, this._getAccountsForClient(client)));\n  }\n\n  override selectAccount(address: Encoded.AccountAddress): void {\n    super.selectAccount(address);\n    this._pushAccountsToApps();\n  }\n\n  override addAccount(account: AccountBase, options?: Parameters<AeSdk['addAccount']>[1]): void {\n    super.addAccount(account, options);\n    this._pushAccountsToApps();\n  }\n\n  _getNode(): { node: Network['node'] } {\n    this.ensureNodeConnected();\n    return { node: { url: this.api.$host, name: this.selectedNodeName } };\n  }\n\n  override async selectNode(name: string): Promise<void> {\n    super.selectNode(name);\n    const networkId = await this.api.getNetworkId();\n    Array.from(this._clients.keys())\n      .filter((clientId) => this._isRpcClientConnected(clientId))\n      .map((clientId) => this._getClient(clientId))\n      .forEach((client) => {\n        client.rpc.notify(METHODS.updateNetwork, {\n          networkId,\n          ...client.connectNode && this._getNode(),\n        });\n      });\n  }\n\n  _getClient(clientId: string): RpcClientsInfo {\n    const client = this._clients.get(clientId);\n    if (client == null) throw new UnknownRpcClientError(clientId);\n    return client;\n  }\n\n  _isRpcClientConnected(clientId: string): boolean {\n    return RPC_STATUS.CONNECTED === this._getClient(clientId).status\n      && this._getClient(clientId).rpc.connection.isConnected();\n  }\n\n  _disconnectRpcClient(clientId: string): void {\n    const client = this._getClient(clientId);\n    client.rpc.connection.disconnect();\n    client.status = RPC_STATUS.DISCONNECTED;\n    client.addressSubscription = new Set();\n  }\n\n  /**\n   * Remove specific RpcClient by ID\n   * @param id - Client ID\n   */\n  removeRpcClient(id: string): void {\n    this._disconnectRpcClient(id);\n    this._clients.delete(id);\n  }\n\n  /**\n   * Add new client by AEPP connection\n   * @param clientConnection - AEPP connection object\n   * @returns Client ID\n   */\n  addRpcClient(clientConnection: BrowserConnection): string {\n    // @TODO  detect if aepp has some history based on origin????\n    // if yes use this instance for connection\n    const id = uuid();\n    let disconnectParams: any;\n    const client: RpcClientsInfo = {\n      id,\n      status: RPC_STATUS.WAITING_FOR_CONNECTION_REQUEST,\n      addressSubscription: new Set(),\n      connectNode: false,\n      rpc: new RpcClient<AeppApi, WalletApi>(\n        clientConnection,\n        () => {\n          this._clients.delete(id);\n          this.onDisconnect(id, disconnectParams); // also related info\n        },\n        {\n          [METHODS.closeConnection]: (params) => {\n            disconnectParams = params;\n            this._disconnectRpcClient(id);\n          },\n          // Store client info and prepare two fn for each client `connect` and `denyConnection`\n          // which automatically prepare and send response for that client\n          [METHODS.connect]: async ({\n            name, version, icons, connectNode,\n          }, origin) => {\n            if (version !== RPC_VERSION) throw new RpcUnsupportedProtocolError();\n\n            await this.onConnection(id, { name, icons, connectNode }, origin);\n            client.status = RPC_STATUS.CONNECTED;\n            client.connectNode = connectNode;\n            return {\n              ...await this.getWalletInfo(),\n              ...connectNode && this._getNode(),\n            };\n          },\n          [METHODS.subscribeAddress]: async ({ type, value }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n\n            switch (type) {\n              case SUBSCRIPTION_TYPES.subscribe:\n                // TODO: remove `type` as it always subscribe\n                await this.onSubscription(id, { type, value }, origin);\n                client.addressSubscription.add(value);\n                break;\n              case SUBSCRIPTION_TYPES.unsubscribe:\n                client.addressSubscription.delete(value);\n                break;\n              default:\n                throw new InternalError(`Unknown subscription type: ${type}`);\n            }\n\n            return {\n              subscription: Array.from(client.addressSubscription),\n              address: this._getAccountsForClient(client),\n            };\n          },\n          [METHODS.address]: async (params, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            await this.onAskAccounts(id, params, origin);\n            return this.addresses();\n          },\n          [METHODS.sign]: async (\n            {\n              tx, onAccount = this.address, returnSigned, innerTx,\n            },\n            origin,\n          ) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              onAccount, aeppOrigin: origin, aeppRpcClientId: id, innerTx,\n            };\n            if (returnSigned || innerTx === true) {\n              return { signedTransaction: await this.signTransaction(tx, parameters) };\n            }\n            try {\n              return jsonBig.parse(jsonBig.stringify({\n                transactionHash: await this.sendTransaction(tx, { ...parameters, verify: false }),\n              }));\n            } catch (error) {\n              const validation = await verifyTransaction(tx, this.api);\n              if (validation.length > 0) throw new RpcInvalidTransactionError(validation);\n              throw error;\n            }\n          },\n          [METHODS.signMessage]: async ({ message, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            return {\n              signature: Buffer.from(await this.signMessage(message, parameters)).toString('hex'),\n            };\n          },\n          [METHODS.signTypedData]: async ({\n            domain, aci, data, onAccount = this.address,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            const parameters = {\n              ...domain, onAccount, aeppOrigin: origin, aeppRpcClientId: id,\n            };\n            return {\n              signature: await this.signTypedData(data, aci, parameters),\n            };\n          },\n          [METHODS.signDelegationToContract]: async ({\n            contractAddress, name, oracleQueryId, allNames, onAccount = this.address, isOracle,\n          }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) {\n              throw new RpcPermissionDenyError(onAccount);\n            }\n\n            isOracle ??= false;\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await (\n              (name == null ? null : this\n                .signNameDelegationToContract(contractAddress, name, parameters))\n              ?? (oracleQueryId == null ? null : this\n                .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, parameters))\n              ?? (allNames !== true ? null : this\n                .signAllNamesDelegationToContract(contractAddress, parameters))\n              ?? this.signDelegationToContract(contractAddress, { ...parameters, isOracle })\n            );\n            return { signature };\n          },\n          [METHODS.unsafeSign]: async ({ data, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = encode(await this.sign(decode(data), parameters), Encoding.Signature);\n            return { signature };\n          },\n          [METHODS.signDelegation]: async ({ delegation, onAccount = this.address }, origin) => {\n            if (!this._isRpcClientConnected(id)) throw new RpcNotAuthorizeError();\n            if (!this.addresses().includes(onAccount)) throw new RpcPermissionDenyError(onAccount);\n            const parameters = { onAccount, aeppOrigin: origin, aeppRpcClientId: id };\n            const signature = await this.signDelegation(delegation, parameters);\n            return { signature };\n          },\n        },\n      ),\n    };\n    this._clients.set(id, client);\n    return id;\n  }\n\n  /**\n   * Send shareWalletInfo message to notify AEPP about wallet\n   * @param clientId - ID of RPC client send message to\n   */\n  async shareWalletInfo(clientId: string): Promise<void> {\n    this._getClient(clientId).rpc.notify(METHODS.readyToConnect, await this.getWalletInfo());\n  }\n\n  /**\n   * Get Wallet info object\n   * @returns Object with wallet information\n   */\n  async getWalletInfo(): Promise<WalletInfo> {\n    const { origin } = window.location;\n    return {\n      id: this.id,\n      name: this.name,\n      networkId: await this.api.getNetworkId(),\n      origin: origin === 'file://' ? '*' : origin,\n      type: this._type,\n    };\n  }\n\n  /**\n   * Get Wallet accounts\n   * @returns Object with accounts information (\\{ connected: Object, current: Object \\})\n   */\n  getAccounts(): Accounts {\n    return {\n      current: this.selectedAddress != null ? { [this.selectedAddress]: {} } : {},\n      connected: this.addresses()\n        .filter((a) => a !== this.selectedAddress)\n        .reduce((acc, a) => ({ ...acc, [a]: {} }), {}),\n    };\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import {\n  RestError, userAgentPolicyName, setClientRequestIdPolicyName,\n} from '@azure/core-rest-pipeline';\nimport { OperationOptions } from '@azure/core-client';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci, CompileResult } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion = false }: { ignoreVersion?: boolean } = {}) {\n    super();\n\n    let version: string | undefined;\n    const getVersion = async (opts: OperationOptions): Promise<string> => {\n      if (version != null) return version;\n      version = (await this.api.apiVersion(opts)).apiVersion;\n      return version;\n    };\n\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('compiler', getVersion, '7.3.0', '9.0.0')],\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    this.api.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.api.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      cmpOut.warnings ??= []; // TODO: remove after requiring http compiler above or equal to 8.0.0\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=7883c6ac\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=40b913fe&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\nimport \"./App.vue?vue&type=style&index=1&id=40b913fe&lang=scss&scoped=true\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-40b913fe\"]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport App from './App.vue';\n\ncreateApp(App).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwallet_iframe\"] = self[\"webpackChunkwallet_iframe\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(32851); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","id","type","_createTextVNode","for","class","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","novalidate","onSubmit","_cache","_withModifiers","args","$options","navigate","$event","_ctx","nextAeppUrl","onFocus","target","select","_hoisted_5","_toDisplayString","address","_hoisted_6","nodeName","_hoisted_7","_createVNode","_component_Value","value","balancePromise","_hoisted_8","clientStatus","clientId","onClick","switchAccount","switchNode","key","disconnect","stopSharingWalletInfo","shareWalletInfo","runningInFrame","_createCommentVNode","ref","src","aeppUrl","_hoisted_9","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","TxTimedOutError","blocks","th","join","TypeError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","UnknownRpcClientError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","connect","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","WALLET_TYPE","SUBSCRIPTION_TYPES","METHODS","RPC_STATUS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","AccountBase","signTypedData","aci","signDelegationToContract","signNameDelegationToContract","signAllNamesDelegationToContract","signOracleQueryDelegationToContract","oracleQueryId","signDelegation","delegation","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","isAddressValid","maybeEncoded","encodings","encoding","hash","generateKeyPairFromSecret","secret","nacl","keyPair","fromSecretKey","generateKeyPair","raw","publicBuffer","publicKey","secretBuffer","secretKey","sign","privateKey","detached","verify","signature","messagePrefix","messagePrefixLength","messageToHash","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","Fate3","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","serialize","params","consensusProtocolVersion","_value","prepare","keys","onNode","getNodeInfo","vm","abi","_getProtocolDetails","c","kind","ContractCallTx","GaMetaTx","result","toBytes","val","big","Number","isInteger","isBigNumber","toFixed","hexString","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","uInt","serializeAettos","genEncodedField","optional","encodedData","genEntryField","txParams","packEntry","ArrayBuffer","isView","startsWith","unpackEntry","genEnumerationField","enm","values","filter","v","verCmp","a","b","getComponents","i","aComponents","bComponents","base","max","componentsToNumber","components","reverse","reduce","acc","n","idx","semverSatisfies","gasPriceCache","getCachedIncreasedGasPrice","node","cache","get","time","Date","now","gasPrice","nodeVersion","_getCachedStatus","minGasPrice","utilization","getRecentGasPrices","BigInt","integerValue","maxSafeGasPrice","warn","set","coinAmount","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ContractCreateTx","GaAttachTx","PayingForTx","factor","TX_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","ceil","floor","getOracleRelativeTtl","ttlKeys","buildGas","builtTx","unpackTx","buildTx","txObject","tx","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","gasPricePrefix","_computingMinFee","_canIncreaseFee","minFee","dividedBy","replace","gt","calculateGasLimitMax","gasMax","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","field","txFields","parameters","addressName","genNonceField","senderKey","strategy","senderId","getAccountNextNonce","catch","nextNonce","addressAny","pointers","pointer","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","bKey","bId","oracleId","getOracleByPubkey","queryFee","genShortUIntConstField","constValue","constValueOptional","genTransactionField","wrapWithProxy","valueCb","Proxy","res","Reflect","bind","unwrapProxy","_wrappedValue","_getPollInterval","_expectedMineRate","_microBlockCycle","_ref","_await$getVal","getVal","devModeDef","def","getNetworkId","heightCache","getHeight","cached","height","getCurrentKeyBlockHeight","poll","interval","_interval","getTransactionByHash","blockHeight","ttl","awaitHeight","_interval2","currentHeight","waitForTxConfirm","confirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","getBalance","format","addr","balance","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","Map","txDryRunHandler","rs","delete","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accounts","Array","Set","accountAddress","pubKey","forEach","reject","results","reason","resultPayload","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","p","absoluteTtl","_isInternalBuild","withDefault","defaultValue","withFormatting","CallReturnType","EntryTag","ORACLE_TTL_TYPES","transactionAny","transactionSignedTx","SignedTx","entryTreesPoi","entry","TreesPoi","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","signatures","SpendTx","recipientId","encoded","NamePreclaimTx","accountId","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","pointers2","NameTransferTx","NameRevokeTx","ctVersion","deposit","callData","callerId","queryFormat","responseFormat","oracleTtlType","delta","enumeration","oracleTtlValue","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","ChannelSnapshotSoloTx","ChannelClientReconnectTx","role","pubkey","authFun","gaId","authData","payerId","rlpDecode","rlpEncode","_rlp","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","binary","unpackRecord","encodedRecord","expectedTag","index","genMapField","Mtree","MtreeValue","recursiveType","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackEntry","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","unpEnt","_classPrivateMethodInitSpec","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","Extension","Leaf","isEqual","tree","mptHash","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","k","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","entryMtreeValueArray","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","flags","gaContract","gaAuthFun","status","owner","active","boolean","referers","callerNonce","gasUsed","returnValue","returnType","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelOffChainUpdateTransfer","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","contract","callStack","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","GaMetaTxAuthData","encodingTag","_encodingTag$find$","_encodingTag$find","_expectedTag","_encodingTag$find2","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","DelegationTag","oracleAddressField","queryIdField","AensWildcard","AensName","AensPreclaim","packDelegation","unpackDelegation","secretKeys","getBufferToSign","networkId","innerTx","prefixes","rlpBinaryTx","AccountMemory","generate","signTransaction","txWithNetworkId","signMessage","dHash","isOracle","oracleQueryIdDecoded","addressDecoded","compare","genRequestQueuesPolicy","requestQueues","policy","sendRequest","request","next","_requestQueues$get","headers","getResponse","then","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","method","JSON","stringify","url","body","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","parsedBody","genVersionCheckPolicy","versionCb","has","requestOptions","customHeaders","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","NaN","statusesToNotRetry","intervals","fill","_","intervalSum","intervalsInMs","e","attempt","urlParsed","searchParams","_e$response$status","_e$response","Header","className","modelProperties","serializedName","required","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","info","pofHash","txsHash","ErrorModel","errorCode","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","blockHash","Tx","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","uberParent","polymorphicDiscriminator","clientName","op","RelativeTTL","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","AuctionEntry","startedAt","endsAt","highestBidder","highestBid","NameEntry","PeerPubKey","SyncStatus","progress","speed","estimate","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","uptime","listening","protocols","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","Currency","symbol","subunit","subunitsPerUnit","fiatConverstionUrl","logo","primaryColour","secondaryColour","networkName","Image","GasPricesItem","minutes","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","fromParam","limit","typeParam","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxsOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getAuctionEntryByName","getAuctionEntryByNameOperationSpec","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getSyncStatus","getSyncStatusOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","getCurrency","getCurrencyOperationSpec","getRecentGasPricesOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_cachedStatusPromise","ignoreVersion","getVersion","opts","allowInsecureConnection","additionalPolicies","pipeline","removePolicy","userAgentPolicyName","setClientRequestIdPolicyName","promise","nodeNetworkId","versions","getTransactionSignerAddress","_getSchema$find","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","recipient","_ref2","oracleCall","contractCreate","contractCall","parse","InvalidTxError","validation","sendTransaction","txUnsigned","onAccount","waitMined","__queue","pollResult","txData","confirmationHeight","verifyTx","spend","recipientIdOrName","transferFunds","fraction","desiredAmount","ROUND_HALF_UP","plus","minus","payForTransaction","ensureOracleQuery","oq","createDelegationSignature","ids","omitAddress","signOpts","Encoder","Calldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","compile","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","callStatic","$deploy","_opt$gasLimit","_other$result","opt","_calldata","_name","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","otherOptions","_bytecode","isIris","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","createGeneralizedAccount","authFnName","_options$gasLimit","freeze","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","methods","chainMethods","spendMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","getContext","mergeWith","prototype","handler","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","compilerApi","_resolveAccount","ensureNodeConnected","pool","selectedNodeName","selectNode","isNodeConnected","getNodesInPool","addresses","String","_options$networkId","_options$consensusPro","_options$networkId2","_options$consensusPro2","_options$networkId3","_options$consensusPro3","_options$networkId4","_options$consensusPro4","_options$networkId5","AeSdk","addAccount","selectedAddress","selectAccount","removeAccount","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","connection","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","RPC_VERSION","jsonBig","JsonBig","storeAsString","convertValuesToBigNumbers","bn","AeSdkWallet","onConnection","onSubscription","onAskAccounts","_type","_getAccountsForClient","addressSubscription","current","getAccounts","_pushAccountsToApps","_clients","_isRpcClientConnected","_getClient","client","size","rpc","updateAddress","_getNode","updateNetwork","connectNode","CONNECTED","_disconnectRpcClient","DISCONNECTED","removeRpcClient","addRpcClient","clientConnection","uuid","disconnectParams","WAITING_FOR_CONNECTION_REQUEST","closeConnection","icons","getWalletInfo","subscribeAddress","subscribe","add","unsubscribe","subscription","returnSigned","aeppOrigin","aeppRpcClientId","signedTransaction","transactionHash","allNames","_isOracle","_ref3","unsafeSign","readyToConnect","location","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","parameter","_cmpOut$warnings","cmpOut","warning","generateAciBySourceCode","generateAci","_normalizeClass","text","props","default","watch","valueToString","immediate","__exports__","Value","process","parent","$nextTick","attempts","$refs","aepp","contentWindow","aeSdk","intervalId","setInterval","clearInterval","names","updateClientStatus","mounted","aeppInfo","genConfirmCallback","actionName","aeppId","AccountMemoryProtected","MemoryAccount","unpackedTx","dataType","decodedData","decodeWithType","$watch","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}