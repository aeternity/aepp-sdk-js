{"version":3,"file":"js/app.8295dffa.js","mappings":"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","sources":["webpack://aepp/./src/App.vue","webpack://aepp/./src/Connect.vue","webpack://aepp/../../src/utils/errors.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://aepp/../../src/aepp-wallet-communication/schema.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://aepp/../../src/aepp-wallet-communication/wallet-detector.ts","webpack://aepp/./src/Connect.vue?1a8f","webpack://aepp/./src/Basic.vue","webpack://aepp/./src/components/Value.vue","webpack://aepp/./src/components/Value.vue?9937","webpack://aepp/./src/components/SpendCoins.vue","webpack://aepp/../../src/utils/other.ts","webpack://aepp/../../src/utils/encoder-types.ts","webpack://aepp/../../src/utils/encoder.ts","webpack://aepp/./src/components/SpendCoins.vue?b814","webpack://aepp/./src/components/MessageSign.vue","webpack://aepp/./src/components/FieldAction.vue","webpack://aepp/./src/components/FieldAction.vue?d339","webpack://aepp/./src/components/MessageSign.vue?1f61","webpack://aepp/./src/components/DataSign.vue","webpack://aepp/./src/components/DataSign.vue?2083","webpack://aepp/./src/Basic.vue?efb3","webpack://aepp/./src/Contracts.vue","webpack://aepp/../../../src/tx/builder/constants.ts","webpack://aepp/../../src/utils/crypto.ts","webpack://aepp/../../../../src/tx/builder/field-types/entry.ts","webpack://aepp/../../../../src/tx/builder/field-types/array.ts","webpack://aepp/../../../../src/tx/builder/field-types/map.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-default.ts","webpack://aepp/../../src/utils/bytes.ts","webpack://aepp/../../../src/tx/builder/helpers.ts","webpack://aepp/../../../../src/tx/builder/field-types/u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://aepp/../../../../src/tx/builder/field-types/address.ts","webpack://aepp/../../../../src/tx/builder/field-types/encoded.ts","webpack://aepp/../../../../src/tx/builder/field-types/raw.ts","webpack://aepp/../../src/utils/bignumber.ts","webpack://aepp/../../src/utils/amount-formatter.ts","webpack://aepp/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://aepp/../../src/utils/semver-satisfies.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-price.ts","webpack://aepp/../../../../src/tx/builder/field-types/fee.ts","webpack://aepp/../../src/utils/wrap-proxy.ts","webpack://aepp/../src/chain.ts","webpack://aepp/../../../../src/tx/builder/field-types/ttl.ts","webpack://aepp/../../../../src/tx/builder/field-types/nonce.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers.ts","webpack://aepp/../../../../src/tx/builder/field-types/field.ts","webpack://aepp/../../../../src/tx/builder/field-types/name.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-id.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers2.ts","webpack://aepp/../../../../src/tx/builder/field-types/ct-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/boolean.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://aepp/../../../../src/tx/builder/field-types/abi-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/enumeration.ts","webpack://aepp/../../../../src/tx/builder/field-types/string.ts","webpack://aepp/../../../../src/tx/builder/field-types/query-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/mptree.ts","webpack://aepp/../../../../src/tx/builder/field-types/wrapped.ts","webpack://aepp/../../../src/tx/builder/schema.ts","webpack://aepp/../../../src/tx/builder/common.ts","webpack://aepp/../../../src/tx/builder/index.ts","webpack://aepp/../../src/utils/autorest.ts","webpack://aepp/../../../../src/apis/node/models/mappers.ts","webpack://aepp/../../../../src/apis/node/models/parameters.ts","webpack://aepp/../../../src/apis/node/node.ts","webpack://aepp/../src/Node.ts","webpack://aepp/../../src/tx/transaction-signer.ts","webpack://aepp/../../src/account/Base.ts","webpack://aepp/../../src/utils/typed-data.ts","webpack://aepp/../../../../src/tx/builder/delegation/schema.ts","webpack://aepp/../../../../src/tx/builder/delegation/index.ts","webpack://aepp/../../src/account/Memory.ts","webpack://aepp/../../src/tx/execution-cost.ts","webpack://aepp/../../src/tx/validator.ts","webpack://aepp/../src/send-transaction.ts","webpack://aepp/../../src/contract/Contract.ts","webpack://aepp/./src/Contracts.vue?05c9","webpack://aepp/./src/PayForTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue?b650","webpack://aepp/./src/PayForTx.vue?2fdc","webpack://aepp/./src/TypedData.vue","webpack://aepp/./src/TypedData.vue?5e40","webpack://aepp/./src/DelegationSignature.vue","webpack://aepp/./src/DelegationSignature.vue?67ef","webpack://aepp/./src/Jwt.vue","webpack://aepp/../../src/utils/jwt.ts","webpack://aepp/./src/Jwt.vue?1275","webpack://aepp/./src/App.vue?7ccd","webpack://aepp/../src/aens.ts","webpack://aepp/../src/spend.ts","webpack://aepp/../src/oracle.ts","webpack://aepp/../../src/contract/delegation-signature.ts","webpack://aepp/../../src/contract/ga.ts","webpack://aepp/../src/AeSdkMethods.ts","webpack://aepp/../src/AeSdkBase.ts","webpack://aepp/../../src/account/Rpc.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://aepp/../src/AeSdkAepp.ts","webpack://aepp/../../../../src/apis/compiler/models/mappers.ts","webpack://aepp/../../../../src/apis/compiler/models/parameters.ts","webpack://aepp/../../../src/apis/compiler/compiler.ts","webpack://aepp/../../../src/contract/compiler/Base.ts","webpack://aepp/../../../src/contract/compiler/Http.ts","webpack://aepp/./src/store.js","webpack://aepp/./src/main.js","webpack://aepp/webpack/bootstrap","webpack://aepp/webpack/runtime/chunk loaded","webpack://aepp/webpack/runtime/define property getters","webpack://aepp/webpack/runtime/global","webpack://aepp/webpack/runtime/hasOwnProperty shorthand","webpack://aepp/webpack/runtime/make namespace object","webpack://aepp/webpack/runtime/jsonp chunk loading","webpack://aepp/webpack/startup"],"sourcesContent":["<template>\n  <h2>Simple æpp</h2>\n\n  <Connect />\n\n  <div class=\"nav\">\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Basic' }\"\n      @click=\"view = 'Basic'\"\n    >\n      Basic functionality\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Contracts' }\"\n      @click=\"view = 'Contracts'\"\n    >\n      Smart contracts\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'PayForTx' }\"\n      @click=\"view = 'PayForTx'\"\n    >\n      Pay for transaction\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'TypedData' }\"\n      @click=\"view = 'TypedData'\"\n    >\n      Typed data\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'DelegationSignature' }\"\n      @click=\"view = 'DelegationSignature'\"\n    >\n      Delegation signature\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Jwt' }\"\n      @click=\"view = 'Jwt'\"\n    >\n      JWT\n    </a>\n  </div>\n\n  <Component\n    v-if=\"view\"\n    :is=\"view\"\n  />\n</template>\n\n<script>\nimport Connect from './Connect.vue';\nimport Basic from './Basic.vue';\nimport Contracts from './Contracts.vue';\nimport PayForTx from './PayForTx.vue';\nimport TypedData from './TypedData.vue';\nimport DelegationSignature from './DelegationSignature.vue';\nimport Jwt from './Jwt.vue';\n\nexport default {\n  components: {\n    Connect, Basic, Contracts, PayForTx, TypedData, DelegationSignature, Jwt,\n  },\n  data: () => ({ view: '' }),\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","<template>\n  <div class=\"group\">\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"default\">\n        Iframe or WebExtension\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"reverse-iframe\">\n        Reverse iframe\n      </label>\n      <div><input v-model=\"reverseIframeWalletUrl\"></div>\n    </div>\n\n    <button\n      v-if=\"walletConnected\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else-if=\"connectMethod\"\n      :disabled=\"walletConnecting\"\n      @click=\"connect\"\n    >\n      Connect\n    </button>\n\n    <button\n      v-if=\"cancelWalletDetection\"\n      @click=\"cancelWalletDetection\"\n    >\n      Cancel detection\n    </button>\n  </div>\n\n  <div class=\"group\">\n    <div>\n      <div>SDK status</div>\n      <div>\n        {{\n          (walletConnected && 'Wallet connected')\n          || (cancelWalletDetection && 'Wallet detection')\n          || (walletConnecting && 'Wallet connecting')\n          || 'Ready to connect to wallet'\n        }}\n      </div>\n    </div>\n    <div>\n      <div>Wallet name</div>\n      <div>{{ walletName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  walletDetector, BrowserWindowMessageConnection, RpcConnectionDenyError, RpcRejectedByUserError,\n} from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\n\nexport default {\n  data: () => ({\n    connectMethod: 'default',\n    walletConnected: false,\n    walletConnecting: null,\n    reverseIframe: null,\n    reverseIframeWalletUrl: process.env.VUE_APP_WALLET_URL ?? `http://${location.hostname}:9000`,\n    walletInfo: null,\n    cancelWalletDetection: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    walletName() {\n      if (!this.walletConnected) return 'Wallet is not connected';\n      return this.walletInfo.name;\n    },\n  },\n  methods: {\n    async detectWallets() {\n      if (this.connectMethod === 'reverse-iframe') {\n        this.reverseIframe = document.createElement('iframe');\n        this.reverseIframe.src = this.reverseIframeWalletUrl;\n        this.reverseIframe.style.display = 'none';\n        document.body.appendChild(this.reverseIframe);\n      }\n      const connection = new BrowserWindowMessageConnection();\n      return new Promise((resolve, reject) => {\n        const stopDetection = walletDetector(connection, async ({ newWallet }) => {\n          if (confirm(`Do you want to connect to wallet ${newWallet.info.name} with id ${newWallet.info.id}`)) {\n            stopDetection();\n            resolve(newWallet.getConnection());\n            this.cancelWalletDetection = null;\n          }\n        });\n        this.cancelWalletDetection = () => {\n          reject(new Error('Wallet detection cancelled'));\n          stopDetection();\n          this.cancelWalletDetection = null;\n          if (this.reverseIframe) this.reverseIframe.remove();\n        };\n      });\n    },\n    async connect() {\n      this.walletConnecting = true;\n      this.aeSdk.onDisconnect = () => {\n        this.walletConnected = false;\n        this.walletInfo = null;\n        this.$store.commit('setAddress', undefined);\n        if (this.reverseIframe) this.reverseIframe.remove();\n      };\n      try {\n        const connection = await this.detectWallets();\n        try {\n          this.walletInfo = await this.aeSdk.connectToWallet(connection);\n        } catch (error) {\n          if (error instanceof RpcConnectionDenyError) connection.disconnect();\n          throw error;\n        }\n        this.walletConnected = true;\n        const { address: { current } } = await this.aeSdk.subscribeAddress('subscribe', 'connected');\n        this.$store.commit('setAddress', Object.keys(current)[0]);\n      } catch (error) {\n        if (\n          error.message === 'Wallet detection cancelled'\n          || error instanceof RpcConnectionDenyError\n          || error instanceof RpcRejectedByUserError\n        ) return;\n        throw error;\n      } finally {\n        this.walletConnecting = false;\n      }\n    },\n    disconnect() {\n      this.aeSdk.disconnectWallet();\n    },\n  },\n};\n</script>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  unsafeSign = 'data.unsafeSign',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegationToContract = 'delegationToContract.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import BrowserConnection from './connection/Browser';\nimport BrowserWindowMessageConnection from './connection/BrowserWindowMessage';\nimport { MESSAGE_DIRECTION, METHODS } from './schema';\nimport { WalletInfo } from './rpc/types';\nimport { UnsupportedPlatformError } from '../utils/errors';\n\ninterface Wallet {\n  info: WalletInfo;\n  getConnection: () => BrowserWindowMessageConnection;\n}\ninterface Wallets { [key: string]: Wallet }\n\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default (\n  connection: BrowserConnection,\n  onDetected: ({ wallets, newWallet }: { wallets: Wallets; newWallet: Wallet }) => void,\n): () => void => {\n  if (window == null) throw new UnsupportedPlatformError('Window object not found, you can run wallet detector only in browser');\n  const wallets: Wallets = {};\n\n  connection.connect((\n    { method, params }: { method: string; params: WalletInfo },\n    origin: string,\n    source: Window,\n  ) => {\n    if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n\n    const wallet = {\n      info: params,\n      getConnection() {\n        return new BrowserWindowMessageConnection({\n          target: source,\n          ...params.type === 'extension' ? {\n            sendDirection: MESSAGE_DIRECTION.to_waellet,\n            receiveDirection: MESSAGE_DIRECTION.to_aepp,\n            ...window.origin !== 'null' && { origin: window.origin },\n          } : {\n            origin: params.origin,\n          },\n        });\n      },\n    };\n    wallets[wallet.info.id] = wallet;\n    onDetected({ wallets, newWallet: wallet });\n  }, () => {});\n\n  return () => connection.disconnect();\n};\n","import { render } from \"./Connect.vue?vue&type=template&id=02b69bc7\"\nimport script from \"./Connect.vue?vue&type=script&lang=js\"\nexport * from \"./Connect.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>General information</h2>\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>Height</div>\n      <Value :value=\"heightPromise\" />\n    </div>\n    <div>\n      <div>Node info</div>\n      <Value :value=\"nodeInfoPromise\" />\n    </div>\n    <div>\n      <div>Compiler version</div>\n      <Value :value=\"compilerVersionPromise\" />\n    </div>\n  </div>\n\n  <SpendCoins />\n\n  <MessageSign />\n\n  <DataSign />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport DataSign from './components/DataSign.vue';\n\nexport default {\n  components: {\n    Value, SpendCoins, MessageSign, DataSign,\n  },\n  data: () => ({\n    balancePromise: null,\n    heightPromise: null,\n    nodeInfoPromise: null,\n    compilerVersionPromise: null,\n  }),\n  computed: mapState(['aeSdk', 'address', 'networkId']),\n  mounted() {\n    this.$watch(\n      ({ aeSdk, address, networkId }) => [aeSdk, address, networkId],\n      ([aeSdk, address]) => {\n        this.compilerVersionPromise = aeSdk.compilerApi.version();\n        this.balancePromise = address\n          ? aeSdk.getBalance(address) : Promise.reject(new Error('Address not available'));\n        this.heightPromise = aeSdk.getHeight();\n        this.nodeInfoPromise = aeSdk.getNodeInfo();\n      },\n      { immediate: true },\n    );\n  },\n};\n</script>\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=0047ad3a\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Spend coins</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <button @click=\"() => { spendPromise = spend(); }\">\n      Spend\n    </button>\n    <div v-if=\"spendPromise\">\n      <div>Spend result</div>\n      <Value :value=\"spendPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    spendPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    spend() {\n      return this.aeSdk.spend(this.spendAmount, this.spendTo, {\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n    },\n  },\n};\n</script>\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import { render } from \"./SpendCoins.vue?vue&type=template&id=6217803d\"\nimport script from \"./SpendCoins.vue?vue&type=script&lang=js\"\nexport * from \"./SpendCoins.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <FieldAction\n    title=\"Sign a message\"\n    arg-title=\"Message to sign\"\n    arg-placeholder=\"I want to <action name> at <time> on <network name>\"\n    action-title=\"Sign message\"\n    :action-handler=\"messageSign\"\n    result-title=\"Message sign result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './FieldAction.vue';\n\nexport default {\n  components: { FieldAction },\n  computed: mapState(['aeSdk']),\n  methods: {\n    messageSign(messageToSign) {\n      return this.aeSdk.signMessage(messageToSign);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>{{ title }}</h2>\n  <div class=\"group\">\n    <div v-if=\"argTitle\">\n      <div>{{ argTitle }}</div>\n      <div>\n        <input\n          v-model=\"argValue\"\n          :placeholder=\"argPlaceholder\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { promise = actionHandler(argValue); }\">\n      {{ actionTitle }}\n    </button>\n    <div v-if=\"promise\">\n      <div>{{ resultTitle }}</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  props: {\n    title: { type: String, required: true },\n    argTitle: { type: String, required: false },\n    argPlaceholder: { type: String, required: false },\n    argDefaultValue: { type: String, required: false },\n    actionTitle: { type: String, required: true },\n    actionHandler: { type: Function, required: true },\n    resultTitle: { type: String, required: true },\n  },\n  data() {\n    return {\n      argValue: this.argDefaultValue,\n      promise: null,\n    };\n  },\n};\n</script>\n","import { render } from \"./FieldAction.vue?vue&type=template&id=7b236a56\"\nimport script from \"./FieldAction.vue?vue&type=script&lang=js\"\nexport * from \"./FieldAction.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./MessageSign.vue?vue&type=template&id=2b567dd0\"\nimport script from \"./MessageSign.vue?vue&type=script&lang=js\"\nexport * from \"./MessageSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign raw data (unsafe)</h2>\n  <div class=\"group\">\n    <div>\n      <div>Data as text</div>\n      <div>\n        <input\n          :value=\"dataBuffer.toString()\"\n          @input=\"setData($event.target.value)\"\n          placeholder=\"Plain text\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Data as hex</div>\n      <div>\n        <input\n          :value=\"dataBuffer.toString('hex')\"\n          @input=\"setData($event.target.value, 'hex')\"\n          placeholder=\"hex-encoded data\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Data encoded</div>\n      <div>\n        <input\n          v-model=\"data\"\n          placeholder=\"ba_-encoded data\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { promise = dataSign(); }\">\n      Sign data\n    </button>\n    <div v-if=\"promise\">\n      <div>Data sign result</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { Buffer } from 'buffer';\nimport { decode, encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nconst emptyData = encode(Buffer.from([]), Encoding.Bytearray);\n\nexport default {\n  components: { Value },\n  computed: {\n    ...mapState(['aeSdk']),\n    dataBuffer() {\n      try {\n        return Buffer.from(decode(this.data || emptyData));\n      } catch (error) {\n        return Buffer.from([]);\n      }\n    },\n  },\n  data: () => ({\n    data: '',\n    promise: null,\n  }),\n  methods: {\n    setData(data, type) {\n      this.data = encode(Buffer.from(data, type), Encoding.Bytearray);\n    },\n    dataSign() {\n      return this.aeSdk.sign(decode(this.data || emptyData));\n    },\n  },\n};\n</script>\n","import { render } from \"./DataSign.vue?vue&type=template&id=6094de5b\"\nimport script from \"./DataSign.vue?vue&type=script&lang=js\"\nexport * from \"./DataSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Basic.vue?vue&type=template&id=79e4d050\"\nimport script from \"./Basic.vue?vue&type=script&lang=js\"\nexport * from \"./Basic.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Contract Instance</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract Source Code</div>\n      <div>\n        <textarea\n          v-model=\"contractSourceCode\"\n          placeholder=\"Contact source code\"\n        />\n      </div>\n    </div>\n    <button @click=\"() => { createPromise = create(); }\">\n      Create\n    </button>\n    <div v-if=\"createPromise\">\n      <div>Contract Instance</div>\n      <Value :value=\"createPromise.then(() => 'Ready')\" />\n    </div>\n  </div>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Compile Contract\"\n      action-title=\"Compile\"\n      :action-handler=\"compile\"\n      result-title=\"Bytecode\"\n    />\n  </template>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Deploy Contract\"\n      arg-title=\"Deploy argument\"\n      arg-placeholder=\"Deploy argument\"\n      arg-default-value=\"5\"\n      action-title=\"Deploy\"\n      :action-handler=\"deploy\"\n      result-title=\"Deployed Contract\"\n    />\n  </template>\n\n  <template v-if=\"deployPromise\">\n    <FieldAction\n      title=\"Call Contract on chain\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"7\"\n      action-title=\"Call\"\n      :action-handler=\"callOnChain\"\n      result-title=\"Call Result\"\n    />\n\n    <FieldAction\n      title=\"Call Contract using dry-run (static)\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"8\"\n      action-title=\"Call\"\n      :action-handler=\"callStatic\"\n      result-title=\"Call Result\"\n    />\n  </template>\n</template>\n\n<script>\nimport { shallowRef } from 'vue';\nimport { mapState } from 'vuex';\nimport { Contract } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nconst contractSourceCode = `\ncontract Multiplier =\n  record state = { factor: int }\n\n  entrypoint init(f : int) = { factor = f }\n\n  stateful entrypoint setFactor(f : int) =\n    put(state{ factor = f })\n\n  entrypoint multiplyByFactor(x : int) =\n    x * state.factor\n`.trim();\n\nexport default {\n  components: { Value, FieldAction },\n  data: () => ({\n    contractSourceCode,\n    createPromise: null,\n    contract: null,\n    deployPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async create() {\n      // Contract instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n      this.contract = shallowRef(\n        await Contract.initialize({\n          ...this.aeSdk.getContext(), sourceCode: this.contractSourceCode,\n        }),\n      );\n    },\n    async compile() {\n      return this.contract.$compile();\n    },\n    async deploy(arg) {\n      this.deployPromise = this.contract.$deploy([arg]);\n      return this.deployPromise;\n    },\n    async callOnChain(arg) {\n      return this.contract.setFactor(arg);\n    },\n    async callStatic(arg) {\n      return this.contract.multiplyByFactor(arg);\n    },\n  },\n};\n</script>\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9; // TODO: don't use number for ae\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Signs a message, and then verifies that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      return unpackTx(encode(buf, Encoding.Transaction), tag);\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","function verCmp(a: string, b: string): number {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const aComponents = getComponents(a);\n  const bComponents = getComponents(b);\n\n  const base = Math.max(...aComponents, ...bComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  return componentsToNumber(aComponents) - componentsToNumber(bComponents);\n}\n\nexport default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion?: string,\n): boolean {\n  return verCmp(version, geVersion) >= 0\n    && (ltVersion == null || verCmp(version, ltVersion) < 0);\n}\n","import BigNumber from 'bignumber.js';\nimport coinAmount from './coin-amount';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE } from '../constants';\nimport Node from '../../../Node';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\nimport semverSatisfies from '../../../utils/semver-satisfies';\n\nconst gasPriceCache: WeakMap<Node, { time: number; gasPrice: bigint }> = new WeakMap();\n\nexport async function getCachedIncreasedGasPrice(node: Node): Promise<bigint> {\n  const cache = gasPriceCache.get(node);\n  if (cache != null && cache.time > Date.now() - 20 * 1000) {\n    return cache.gasPrice;\n  }\n\n  // TODO: remove after requiring node@6.13.0\n  const { nodeVersion } = await node._getCachedStatus();\n  if (!semverSatisfies(nodeVersion, '6.13.0')) return 0n;\n\n  const { minGasPrice, utilization } = (await node.getRecentGasPrices())[0];\n  let gasPrice = utilization < 70 ? 0n : BigInt(\n    new BigNumber(minGasPrice.toString()).times(1.01).integerValue().toFixed(),\n  );\n\n  const maxSafeGasPrice = BigInt(MIN_GAS_PRICE) * 100000n; // max microblock fee is 600ae or 35usd\n  if (gasPrice > maxSafeGasPrice) {\n    console.warn([\n      `Estimated gas price ${gasPrice} exceeds the maximum safe value for unknown reason.`,\n      `It will be limited to ${maxSafeGasPrice}.`,\n      'To overcome this restriction provide `gasPrice`/`fee` in options.',\n    ].join(' '));\n    gasPrice = maxSafeGasPrice;\n  }\n\n  gasPriceCache.set(node, { gasPrice, time: Date.now() });\n  return gasPrice;\n}\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode, denomination }: {\n      onNode?: Node;\n      denomination?: AE_AMOUNT_FORMATS;\n    },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `gasPrice` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return formatAmount(gasPrice, { targetDenomination: denomination });\n  },\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE, Tag } from '../constants';\nimport uInt from './u-int';\nimport coinAmount from './coin-amount';\nimport { getCachedIncreasedGasPrice } from './gas-price';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\nimport Node from '../../../Node';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the base gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base gas\n * @example\n * ```js\n * TX_BASE_GAS(Tag.ChannelForceProgressTx) => 30 * 15000\n * ```\n */\nconst TX_BASE_GAS = (txType: Tag): number => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return factor * BASE_GAS;\n};\n\n/**\n * Calculate gas for other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The other gas\n * @example\n * ```js\n * TX_OTHER_GAS(Tag.OracleResponseTx, 10, { relativeTtl: 12, innerTxSize: 0 })\n *  => 10 * 20 + Math.ceil(32000 * 12 / Math.floor(60 * 24 * 365 / 3))\n * ```\n */\nconst TX_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): number => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return txSize * GAS_PER_BYTE\n        + Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL));\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return (txSize - innerTxSize) * GAS_PER_BYTE;\n    default:\n      return txSize * GAS_PER_BYTE;\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate gas based on tx type and params\n */\nexport function buildGas(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_BASE_GAS(txObject.tag)\n    + TX_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    });\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = new BigNumber(MIN_GAS_PRICE).times(buildGas(rebuildTx(fee), unpackTx, buildTx));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\n// TODO: Get rid of this workaround. Transaction builder can't accept/return gas price instead of\n// fee because it may get a decimal gas price. So, it should accept the optional `gasPrice` even\n// if it is not a contract-related transaction. And use this `gasPrice` to calculate `fee`.\nconst gasPricePrefix = '_gas-price:';\n\nexport interface SerializeAettosParams {\n  rebuildTx: (params: any) => Encoded.Transaction;\n  unpackTx: typeof unpackTxType;\n  buildTx: typeof buildTxType;\n  _computingMinFee?: BigNumber;\n}\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode }: { onNode?: Node },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `fee` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return gasPricePrefix + gasPrice;\n  },\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee,\n    }: SerializeAettosParams,\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value?.startsWith(gasPricePrefix) === true\n      ? minFee.dividedBy(MIN_GAS_PRICE).times(_value.replace(gasPricePrefix, ''))\n      : new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1] & SerializeAettosParams,\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    if (typeof value === 'string' && value.startsWith(gasPricePrefix)) {\n      return uInt.serialize(this.serializeAettos(value, params, options));\n    }\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import { ArgumentError } from './errors';\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb();\n      if (target == null) throw new ArgumentError('wrapped value', 'defined', target);\n      if (name === 'get' && args[0] === '_wrappedValue') return target;\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get' ? res.bind(target) : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport { isAccountNotFoundError, pause } from './utils/other';\nimport { unwrapProxy } from './utils/wrap-proxy';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport async function _getPollInterval(\n  type: 'key-block' | 'micro-block',\n  { _expectedMineRate, _microBlockCycle, onNode }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; onNode: Node },\n): Promise<number> {\n  const getVal = async (\n    t: string,\n    val: number | undefined,\n    devModeDef: number,\n    def: number,\n  ): Promise<number | null> => {\n    if (t !== type) return null;\n    if (val != null) return val;\n    return await onNode?.getNetworkId() === 'ae_dev' ? devModeDef : def;\n  };\n\n  const base = await getVal('key-block', _expectedMineRate, 0, 180000)\n    ?? await getVal('micro-block', _microBlockCycle, 0, 3000)\n    ?? (() => { throw new InternalError(`Unknown type: ${type}`); })();\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight(\n  { cached = false, ...options }: {\n    onNode: Node;\n    cached?: boolean;\n  } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache != null && cache.time > Date.now() - await _getPollInterval('key-block', options)) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Return transaction details if it is mined, fail otherwise.\n * If the transaction has ttl specified then would wait till it leaves the mempool.\n * Otherwise would fail if a specified amount of blocks were mined.\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail if transaction ttl is not set\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let max;\n  do {\n    const tx = await options.onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    if (max == null) {\n      max = tx.tx.ttl !== 0 ? -1\n        : await getHeight({ ...options, cached: true }) + blocks;\n    }\n    await pause(interval);\n  } while (max === -1 ? true : await getHeight({ ...options, cached: true }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(await _getPollInterval('key-block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight(options);\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { _getPollInterval, getHeight } from '../../../chain';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    {\n      onNode, absoluteTtl, _isInternalBuild, ...options\n    }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n      _isInternalBuild?: boolean;\n    } & Omit<Parameters<typeof _getPollInterval>[1], 'onNode'>,\n  ) {\n    if (absoluteTtl !== true && value !== 0 && (value != null || _isInternalBuild === true)) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value = (value ?? 3) + await getHeight({ ...options, onNode, cached: true });\n    }\n    return value;\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\nimport { isAddressValid } from '../../../utils/crypto';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) payload = [ID_TAG, addressAny.serialize(id)];\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError('Raw pointer', `shorter than ${DATA_LENGTH_MAX + 1} bytes`, `${data.length} bytes`);\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(([bKey, bId]) => {\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray);\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n};\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildGas } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildGas(rebuildTx(gasMax), unpackTx, buildTx);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, gasLimit, gasPrice, fee, address, pointers,\n  pointers2, queryFee, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, withDefault, withFormatting, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n// TODO: inline after dropping Iris compatibility\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\nconst nameTtl = withFormatting(\n  (value) => {\n    const NAME_TTL = 180000;\n    value ??= NAME_TTL;\n    if (value >= 1 && value <= NAME_TTL) return value;\n    throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n  },\n  shortUInt,\n);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(2),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers2,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types';\nimport {\n  ArgumentError, DecodeError, SchemaNotFoundError, InternalError,\n} from '../../utils/errors';\nimport {\n  Encoding, Encoded, encode, decode,\n} from '../../utils/encoder';\nimport { readInt } from './helpers';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null) throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) => (\n    field.serialize(params[key], { ...params, ...extraParams }, params)\n  ));\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name, field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId } from './helpers';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common';\nimport { ArgumentError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction;\n/**\n * Build node entry with a custom encoding\n * @param params - Entry params\n * @param options - Options\n * @param options.prefix - Output encoding\n */\nexport function buildTx<E extends TxEncoding>(\n  params: TxParams,\n  { prefix }: { prefix: E },\n): Encoded.Generic<E>;\nexport function buildTx(\n  params: TxParams,\n  { prefix }: { prefix?: TxEncoding } = {},\n): Encoded.Generic<TxEncoding> {\n  return packRecord(txSchema, Tag, params, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n    buildTx,\n    rebuildTx: (overrideParams: any) => buildTx(\n      { ...params, ...overrideParams },\n    ),\n  }, prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n  }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import { RestError, PipelineResponse } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig, FullOperationResponse, OperationOptions } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(key, req.catch(() => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        const body = (error.response as FullOperationResponse).parsedBody;\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  versionCb: (options: OperationOptions) => Promise<string>,\n  geVersion: string,\n  ltVersion: string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'version-check',\n    async sendRequest(request, next) {\n      if (request.headers.has('__version-check')) {\n        request.headers.delete('__version-check');\n        return next(request);\n      }\n      const options = { requestOptions: { customHeaders: { '__version-check': 'true' } } };\n      const args = [await versionCb(options), geVersion, ltVersion] as const;\n      if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n      return next(request);\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      errorCode: {\n        serializedName: \"error_code\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedTx: {\n        serializedName: \"encoded_tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const AuctionEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuctionEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      startedAt: {\n        serializedName: \"started_at\",\n        type: {\n          name: \"String\",\n        },\n      },\n      endsAt: {\n        serializedName: \"ends_at\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBidder: {\n        serializedName: \"highest_bidder\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBid: {\n        serializedName: \"highest_bid\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SyncStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SyncStatus\",\n    modelProperties: {\n      progress: {\n        serializedName: \"progress\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      speed: {\n        serializedName: \"speed\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      estimate: {\n        serializedName: \"estimate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hashrate: {\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      uptime: {\n        serializedName: \"uptime\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Currency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunit: {\n        serializedName: \"subunit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunitsPerUnit: {\n        serializedName: \"subunits_per_unit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fiatConverstionUrl: {\n        serializedName: \"fiat_converstion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      logo: {\n        serializedName: \"logo\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\",\n        },\n      },\n      primaryColour: {\n        serializedName: \"primary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      secondaryColour: {\n        serializedName: \"secondary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkName: {\n        serializedName: \"network_name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Image: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GasPricesItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GasPricesItem\",\n    modelProperties: {\n      minGasPrice: {\n        serializedName: \"min_gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      utilization: {\n        serializedName: \"utilization\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      minutes: {\n        serializedName: \"minutes\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\",\n        },\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetAuctionEntryByNameOptionalParams,\n  GetAuctionEntryByNameResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetSyncStatusOptionalParams,\n  GetSyncStatusResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n  GetCurrencyOptionalParams,\n  GetCurrencyResponse,\n  GetRecentGasPricesOptionalParams,\n  GetRecentGasPricesResponse,\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Dry-run unsigned transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx\n   * and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get auction entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getAuctionEntryByName(\n    name: string,\n    options?: GetAuctionEntryByNameOptionalParams,\n  ): Promise<GetAuctionEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getAuctionEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the sync status of a node\n   * @param options The options parameters.\n   */\n  getSyncStatus(\n    options?: GetSyncStatusOptionalParams,\n  ): Promise<GetSyncStatusResponse> {\n    return this.sendOperationRequest({ options }, getSyncStatusOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n\n  /**\n   * Get the currency metadata of a node\n   * @param options The options parameters.\n   */\n  getCurrency(\n    options?: GetCurrencyOptionalParams,\n  ): Promise<GetCurrencyResponse> {\n    return this.sendOperationRequest({ options }, getCurrencyOperationSpec);\n  }\n\n  /**\n   * Get minimum gas prices in recent blocks\n   * @param options The options parameters.\n   */\n  getRecentGasPrices(\n    options?: GetRecentGasPricesOptionalParams,\n  ): Promise<GetRecentGasPricesResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getRecentGasPricesOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAuctionEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/auctions/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AuctionEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSyncStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/sync-status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SyncStatus,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrencyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/currency\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Currency,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecentGasPricesOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/recent-gas-prices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"GasPricesItem\" } },\n        },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationOptions, OperationSpec } from '@azure/core-client';\nimport { userAgentPolicyName, setClientRequestIdPolicyName } from '@azure/core-rest-pipeline';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'minGasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round', 'minutes', 'utilization', 'difficulty', 'hashrate',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    const getVersion = async (opts: OperationOptions): Promise<string> => (\n      (await this._getCachedStatus(opts)).nodeVersion\n    );\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('node', getVersion, '6.2.0', '8.0.0')],\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => [\n          ' ', body.reason, body.errorCode == null ? '' : ` (${body.errorCode})`,\n        ].join('')),\n      ],\n      ...options,\n    });\n    this.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n    // TODO: use instead our retry policy\n    this.pipeline.removePolicy({ name: 'defaultRetryPolicy' });\n    this.intAsString = true;\n  }\n\n  #cachedStatusPromise?: ReturnType<Node['getStatus']>;\n\n  async _getCachedStatus(options?: OperationOptions): ReturnType<Node['getStatus']> {\n    if (this.#cachedStatusPromise != null) return this.#cachedStatusPromise;\n    return this.getStatus(options);\n  }\n\n  // eslint-disable-next-line rulesdir/tsdoc-syntax\n  /** @ts-expect-error use code generation to create node class? */\n  override async getStatus(\n    ...args: Parameters<InstanceType<NodeTransformedApi>['getStatus']>\n  ): ReturnType<InstanceType<NodeTransformedApi>['getStatus']> {\n    const promise = super.getStatus(...args);\n    promise.then(() => { this.#cachedStatusPromise = promise; }, () => {});\n    return promise;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    return (await this._getCachedStatus()).networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { AensName, ConsensusProtocolVersion, Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\nimport { NotImplementedError } from '../utils/errors';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signTypedData(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signTypedData method');\n  }\n\n  /**\n   * Sign delegation of AENS, oracle operations to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @param options.isOracle - Use to generate an oracle delegation signature in Ceres, otherwise an\n   * AENS preclaim delegation signature would be generated\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of an AENS name to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param name - AENS name to manage by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signNameDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signNameDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of all AENS names to a contract (not available in Iris)\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signAllNamesDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signAllNamesDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of oracle query to a contract\n   *\n   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded\n   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.\n   *\n   * Warning! Implementations needs to ensure that oracle query and contract exists unless\n   * https://github.com/aeternity/aesophia/issues/474 is fixed.\n   *\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param oracleQueryId - Oracle query ID to reply by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signOracleQueryDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signOracleQueryDelegationToContract method');\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegation(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegation method');\n  }\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import SchemaTypes from '../SchemaTypes';\nimport { address, nameId, shortUIntConst } from '../field-types';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  AensWildcard = 1,\n  AensName = 2,\n  AensPreclaim = 3,\n  Oracle = 4,\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(DelegationTag.AensWildcard),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensName),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  nameId,\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensPreclaim),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.OracleResponse),\n  version: shortUIntConst(1, true),\n  queryId: queryIdField,\n  contractAddress: address(Encoding.ContractAddress),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { DelegationTag, schemas } from './schema';\nimport { DlgParams, DlgUnpacked } from './schema.generated';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash, messagePrefixLength,\n} from '../utils/crypto';\nimport { ArgumentError, UnexpectedTsError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { produceNameId } from '../tx/builder/helpers';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\nimport { packDelegation } from '../tx/builder/delegation';\n\nconst secretKeys = new WeakMap<AccountMemory, Uint8Array>();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKey).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    const secretKey = secretKeys.get(this);\n    if (secretKey == null) throw new UnexpectedTsError();\n    return sign(data, secretKey);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion, isOracle }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountMemory:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(produceNameId(name)),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      Buffer.from('AENS'),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    const oracleQueryIdDecoded = decode(oracleQueryId);\n    const addressDecoded = decode(this.address);\n    // TODO: remove after fixing https://github.com/aeternity/aesophia/issues/475\n    if (oracleQueryIdDecoded.compare(addressDecoded) === 0) {\n      throw new ArgumentError('oracleQueryId', 'not equal to account address', oracleQueryId);\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      oracleQueryIdDecoded,\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength, new Uint8Array([1]), Buffer.from(networkId), decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, isAddressValid, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, Encoding, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  async (tx, { node }) => {\n    if (tx.tag !== Tag.SpendTx || isAddressValid(tx.recipientId, Encoding.Name)) return [];\n    const recipient = await node.getAccountByPubkey(tx.recipientId).catch((error) => {\n      if (!isAccountNotFoundError(error)) throw error;\n      return null;\n    });\n    if (recipient == null || recipient.payable === true) return [];\n    return [{\n      message: 'Recipient account is not payable',\n      key: 'RecipientAccountNotPayable',\n      checkedKeys: ['recipientId'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n  // TODO: move to fee field of tx builder after dropping Iris\n  (tx, { consensusProtocolVersion }) => ((\n    Tag.GaAttachTx === tx.tag\n      && ConsensusProtocolVersion.Ceres === consensusProtocolVersion\n      && tx.nonce !== 1\n  ) ? [{\n      message: `Account ${tx.ownerId} can't become generalized because it is already used`,\n      key: 'AccountUsed',\n      checkedKeys: ['nonce'],\n    }]\n    : []),\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError } from './utils/other';\nimport { TransactionError } from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport { SignedTx } from './apis/node';\nimport { Encoded } from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\nimport { poll, waitForTxConfirm } from './chain';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction({ tx }, {\n      requestOptions: {\n        customHeaders: {\n          // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n          '__retry-code': '400',\n          ...__queue != null ? { __queue } : {},\n        },\n      },\n    });\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport {\n  Tag, AensName, ConsensusProtocolVersion, DRY_RUN_ACCOUNT,\n} from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun,\n} from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await Contract.initialize({ ...aeSdk.getContext(), sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        if (/Expected \\d+ arguments, got \\d+/.test(message)) {\n          throw new ContractError(`ACI doesn't match called contract. Error provided by node: ${message}`);\n        }\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      const isIris = (await onNode.getNodeInfo())\n        .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n      if (!isIris && isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { render } from \"./Contracts.vue?vue&type=template&id=15d24e39\"\nimport script from \"./Contracts.vue?vue&type=script&lang=js\"\nexport * from \"./Contracts.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <GenerateSpendTx />\n\n  <FieldAction\n    title=\"Sign inner transaction\"\n    arg-title=\"Transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Sign\"\n    :action-handler=\"signInnerTx\"\n    result-title=\"Signed inner transaction\"\n  />\n\n  <FieldAction\n    title=\"Pay for transaction\"\n    arg-title=\"Signed inner transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Pay for transaction\"\n    :action-handler=\"payForTx\"\n    result-title=\"Result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './components/FieldAction.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport GenerateSpendTx from './components/GenerateSpendTx.vue';\n\nexport default {\n  components: {\n    FieldAction, SpendCoins, MessageSign, GenerateSpendTx,\n  },\n  computed: mapState(['aeSdk']),\n  methods: {\n    signInnerTx(txToPayFor) {\n      return this.aeSdk.signTransaction(txToPayFor, { innerTx: true });\n    },\n    payForTx(innerTx) {\n      return this.aeSdk.payForTransaction(innerTx);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>Generate spend transaction</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <div>\n      <div>Increment nonce by 1</div>\n      <div>\n        <input\n          type=\"checkbox\"\n          v-model=\"incrementNonce\"\n        >\n        (only if you want to pay for this transaction yourself)\n      </div>\n    </div>\n    <button @click=\"() => { generatePromise = generate(); }\">\n      Generate\n    </button>\n    <div v-if=\"generatePromise\">\n      <div>Spend transaction</div>\n      <Value :value=\"generatePromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport {\n  encode, Encoding, Tag, unpackTx, buildTx,\n} from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    incrementNonce: true,\n    generatePromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async generate() {\n      let spendTx = await this.aeSdk.buildTx({\n        tag: Tag.SpendTx,\n        senderId: this.aeSdk.address,\n        recipientId: this.spendTo,\n        amount: this.spendAmount,\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n      if (this.incrementNonce) {\n        const spendTxParams = unpackTx(spendTx);\n        spendTxParams.nonce += 1;\n        spendTx = buildTx(spendTxParams);\n      }\n      return spendTx;\n    },\n  },\n};\n</script>\n","import { render } from \"./GenerateSpendTx.vue?vue&type=template&id=7508f59e\"\nimport script from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\nexport * from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./PayForTx.vue?vue&type=template&id=6b4a1008\"\nimport script from \"./PayForTx.vue?vue&type=script&lang=js\"\nexport * from \"./PayForTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Domain</h2>\n  <div class=\"group\">\n    <div>\n      <div>Name</div>\n      <div>\n        <input\n          :value=\"domain.name\"\n          @input=\"domain.name = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Version</div>\n      <div>\n        <input\n          :value=\"domain.version\"\n          @input=\"domain.version = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Network id</div>\n      <div>\n        <input\n          :value=\"domain.networkId\"\n          @input=\"domain.networkId = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Contract address</div>\n      <div>\n        <input\n          :value=\"domain.contractAddress\"\n          @input=\"domain.contractAddress = $event.target.value || null\"\n        >\n      </div>\n    </div>\n  </div>\n\n  <h2>Data</h2>\n  <div class=\"group\">\n    <div>\n      <div>Type</div>\n      <div>\n        <textarea\n          v-model=\"aci\"\n          placeholder=\"Type as ACI JSON\"\n        />\n      </div>\n    </div>\n    <div>\n      <div>Data</div>\n      <div>\n        <textarea v-model=\"data\" />\n      </div>\n    </div>\n    <div>\n      <div>Encoded data</div>\n      <Value :value=\"toPromise(() => dataEncoded)\" />\n    </div>\n    <div>\n      <div>Hash</div>\n      <Value :value=\"toPromise(() => hash.toString('base64'))\" />\n    </div>\n  </div>\n\n  <FieldAction\n    title=\"Sign\"\n    action-title=\"Sign\"\n    :action-handler=\"signTypedData\"\n    result-title=\"Signature\"\n  />\n\n  <h2>Verify</h2>\n  <div class=\"group\">\n    <div>\n      <div>Signature</div>\n      <div>\n        <input\n          v-model=\"verifySignature\"\n          placeholder=\"sg-encoded\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input\n          v-model=\"verifyAddress\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { verifyPromise = verifyTypedData(); }\">\n      Verify\n    </button>\n    <div v-if=\"verifyPromise\">\n      <div>Is signature correct</div>\n      <Value :value=\"verifyPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { hashTypedData, verify, decode } from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nexport default {\n  components: {\n    Value, FieldAction,\n  },\n  data: () => ({\n    domain: {\n      name: 'Simple æpp',\n      version: 2,\n      networkId: 'ae_uat',\n      contractAddress: null,\n    },\n    aci: Value.methods.valueToString({\n      record: [\n        { name: 'operation', type: 'string' },\n        { name: 'parameter', type: 'int' },\n      ],\n    }),\n    data: Value.methods.valueToString({\n      operation: 'test',\n      parameter: 42,\n    }),\n    verifySignature: null,\n    verifyAddress: null,\n    verifyPromise: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    dataParsed() {\n      return JSON.parse(this.data);\n    },\n    aciParsed() {\n      return JSON.parse(this.aci);\n    },\n    dataEncoded() {\n      const dataType = new TypeResolver().resolveType(this.aciParsed);\n      return new ContractByteArrayEncoder().encodeWithType(this.dataParsed, dataType);\n    },\n    hash() {\n      return hashTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n  },\n  methods: {\n    async toPromise(getter) {\n      return getter();\n    },\n    signTypedData() {\n      return this.aeSdk.signTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n    async verifyTypedData() {\n      return verify(this.hash, decode(this.verifySignature), this.verifyAddress);\n    },\n  },\n};\n</script>\n","import { render } from \"./TypedData.vue?vue&type=template&id=6ad6adcf\"\nimport script from \"./TypedData.vue?vue&type=script&lang=js\"\nexport * from \"./TypedData.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign delegation to contract</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract address</div>\n      <div><input v-model=\"contractAddress\"></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensPreclaim\">\n        AENS preclaim\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.Oracle\">\n        Oracle\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensName\">\n        AENS name\n      </label>\n      <div><input v-model=\"name\"></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensWildcard\">\n        All AENS names\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.OracleResponse\">\n        Response to oracle query\n      </label>\n      <div><input v-model=\"oracleQueryId\"></div>\n    </div>\n    <button @click=\"() => { signPromise = sign(); }\">\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signature</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { DelegationTag } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    DelegationTag,\n    type: DelegationTag.AensPreclaim,\n    contractAddress: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    name: 'test.chain',\n    oracleQueryId: 'oq_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    signPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    sign() {\n      switch (this.type) {\n        case DelegationTag.AensPreclaim:\n          return this.aeSdk.signDelegationToContract(this.contractAddress, { isOracle: false });\n        case DelegationTag.Oracle:\n          return this.aeSdk.signDelegationToContract(this.contractAddress, { isOracle: true });\n        case DelegationTag.AensName:\n          return this.aeSdk.signNameDelegationToContract(this.contractAddress, this.name);\n        case DelegationTag.AensWildcard:\n          return this.aeSdk.signAllNamesDelegationToContract(this.contractAddress);\n        case DelegationTag.OracleResponse:\n          return this.aeSdk\n            .signOracleQueryDelegationToContract(this.contractAddress, this.oracleQueryId);\n        default:\n          throw new Error(`Unknown delegation signature type: ${DelegationTag[this.type]}`);\n      }\n    },\n  },\n};\n</script>\n","import { render } from \"./DelegationSignature.vue?vue&type=template&id=05c62b43\"\nimport script from \"./DelegationSignature.vue?vue&type=script&lang=js\"\nexport * from \"./DelegationSignature.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Generate a JWT</h2>\n  <div class=\"group\">\n    <div>\n      <div>Payload as JSON</div>\n      <div>\n        <input\n          :value=\"payloadAsJson\"\n          @input=\"payloadAsJson = $event.target.value || '{}'\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Include \"sub_jwk\"</div>\n      <div>\n        <input\n          type=\"checkbox\"\n          v-model=\"includeSubJwk\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { signPromise = sign(); }\">\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signed JWT</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n\n  <h2>Unpack and verify JWT</h2>\n  <div class=\"group\">\n    <div>\n      <div>JWT to unpack</div>\n      <div>\n        <input\n          :value=\"jwt\"\n          @input=\"jwt = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input\n          :value=\"address\"\n          @input=\"address = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { unpackPromise = unpack(); }\">\n      Unpack\n    </button>\n    <div v-if=\"unpackPromise\">\n      <div>Unpack result</div>\n      <Value :value=\"unpackPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { unpackJwt, signJwt } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  computed: mapState(['aeSdk']),\n  data: () => ({\n    payloadAsJson: '{ \"test\": true }',\n    includeSubJwk: true,\n    signPromise: null,\n    jwt: 'eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJzdWJfandrIjp7ImNydiI6IkVkMjU1MTkiLCJrdHkiOiJPS1AiLCJ4IjoiaEF5WFM1Y1dSM1pGUzZFWjJFN2NUV0JZcU43SksyN2NWNHF5MHd0TVFnQSJ9LCJ0ZXN0IjoiZGF0YSJ9.u9El4b2O2LRhvTTW3g46vk1hx0xXWPkJEaEeEy-rLzLr2yuQlNc7qIdcr_z06BgHx5jyYv2CpUL3hqLpc0RzBA',\n    address: null,\n    unpackPromise: null,\n  }),\n  methods: {\n    async sign() {\n      const payload = JSON.parse(this.payloadAsJson);\n      if (!this.includeSubJwk) payload.sub_jwk = undefined;\n      // TODO: expose account used in aepp-wallet connection\n      return signJwt(payload, this.aeSdk._resolveAccount(this.aeSdk.address));\n    },\n    async unpack() {\n      return unpackJwt(this.jwt, this.address);\n    },\n  },\n};\n</script>\n","import canonicalize from 'canonicalize';\nimport AccountBase from '../account/Base';\nimport {\n  Encoded, Encoding, decode, encode,\n} from './encoder';\nimport { verify } from './crypto';\nimport { ArgumentError, InvalidSignatureError } from './errors';\n\n// TODO: use Buffer.from(data, 'base64url') after solving https://github.com/feross/buffer/issues/309\nconst toBase64Url = (data: Buffer | Uint8Array | string): string => Buffer\n  .from(data)\n  .toString('base64')\n  .replaceAll('/', '_')\n  .replaceAll('+', '-')\n  .replace(/=+$/, '');\n\nconst fromBase64Url = (data: string): Buffer => Buffer\n  .from(data.replaceAll('_', '/').replaceAll('-', '+'), 'base64');\n\nconst objectToBase64Url = (data: any): string => toBase64Url(canonicalize(data) ?? '');\n\nconst header = 'eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9'; // objectToBase64Url({ alg: 'EdDSA', typ: 'JWT' })\n\n/**\n * JWT including specific header\n * @category JWT\n */\nexport type Jwt = `${typeof header}.${string}.${string}`;\n\n/**\n * Generate a signed JWT\n * Provide `\"sub_jwk\": undefined` in payload to omit signer public key added by default.\n * @param originalPayload - Payload to sign\n * @param account - Account to sign by\n * @category JWT\n */\nexport async function signJwt(originalPayload: any, account: AccountBase): Promise<Jwt> {\n  const payload = { ...originalPayload };\n  if (!('sub_jwk' in payload)) {\n    payload.sub_jwk = {\n      kty: 'OKP',\n      crv: 'Ed25519',\n      x: toBase64Url(decode(account.address)),\n    };\n  }\n  if (payload.sub_jwk === undefined) delete payload.sub_jwk;\n  const body = `${header}.${objectToBase64Url(payload)}` as const;\n  const signature = await account.sign(body);\n  return `${body}.${toBase64Url(signature)}`;\n}\n\n/**\n * Unpack JWT. It will check signature if address or \"sub_jwk\" provided.\n * @param jwt - JWT to unpack\n * @param address - Address to check signature\n * @category JWT\n */\nexport function unpackJwt(jwt: Jwt, address?: Encoded.AccountAddress): {\n  /**\n   * JWT payload as object\n   */\n  payload: any;\n  /**\n   * Undefined returned in case signature is not checked\n   */\n  signer: Encoded.AccountAddress | undefined;\n} {\n  const components = jwt.split('.');\n  if (components.length !== 3) throw new ArgumentError('JWT components count', 3, components.length);\n  const [h, payloadEncoded, signature] = components;\n  if (h !== header) throw new ArgumentError('JWT header', header, h);\n  const payload = JSON.parse(fromBase64Url(payloadEncoded).toString());\n  const jwk = payload.sub_jwk ?? {};\n  const signer = jwk.x == null || jwk.kty !== 'OKP' || jwk.crv !== 'Ed25519'\n    ? address\n    : encode(fromBase64Url(jwk.x), Encoding.AccountAddress);\n  if (address != null && signer !== address) {\n    throw new ArgumentError('address', `${signer} (\"sub_jwk\")`, address);\n  }\n  if (\n    signer != null\n    && !verify(Buffer.from(`${h}.${payloadEncoded}`), fromBase64Url(signature), signer)\n  ) {\n    throw new InvalidSignatureError(`JWT is not signed by ${signer}`);\n  }\n  return { payload, signer };\n}\n\n/**\n * Check is string a JWT or not. Use to validate the user input.\n * @param maybeJwt - A string to check\n * @returns True if argument is a JWT\n * @category JWT\n */\nexport function isJwt(maybeJwt: string): maybeJwt is Jwt {\n  try {\n    unpackJwt(maybeJwt as Jwt);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Throws an error if argument is not JWT. Use to ensure that a value is JWT.\n * @param maybeJwt - A string to check\n * @category JWT\n */\nexport function ensureJwt(maybeJwt: string): asserts maybeJwt is Jwt {\n  unpackJwt(maybeJwt as Jwt);\n}\n\n/**\n * Check is JWT signed by address from arguments or \"sub_jwk\"\n * @param jwt - JWT to check\n * @param address - Address to check signature\n * @category JWT\n */\nexport function verifyJwt(jwt: Jwt, address?: Encoded.AccountAddress): boolean {\n  try {\n    const { signer } = unpackJwt(jwt, address);\n    return signer != null;\n  } catch (error) {\n    return false;\n  }\n}\n","import { render } from \"./Jwt.vue?vue&type=template&id=0bc0df1e\"\nimport script from \"./Jwt.vue?vue&type=script&lang=js\"\nexport * from \"./Jwt.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=1579aaef\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt, isAddressValid } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport { Tag, AensName, ConsensusProtocolVersion } from './tx/builder/constants';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { UnsupportedProtocolError } from './utils/errors';\nimport { getName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const hasRawPointers = Object.values(allPointers)\n    .some((v) => isAddressValid(v, Encoding.Bytearray));\n  const isIris = (await options.onNode.getNodeInfo())\n    .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n  if (hasRawPointers && isIris) {\n    throw new UnsupportedProtocolError('Raw pointers are available only in Ceres, the current protocol is Iris');\n  }\n\n  const nameUpdateTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameUpdateTx,\n    version: hasRawPointers ? 2 : 1,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  /**\n   * Get the pointers from the node and merge with provided ones. Pointers with the same key will be\n   * overwritten.\n   */\n  extendPointers?: boolean;\n  /**\n   * a suggestion as to how long any clients should cache this information\n   */\n  clientTtl?: number;\n  /**\n   * Name ttl represented in number of blocks (Max value is 50000 blocks)\n   */\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl?: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl, options = {}) {\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid or claiming without preclaim (in Ceres)\n * @param options - options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport { getBalance, resolveName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport { _getPollInterval, getHeight } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    interval ??= await _getPollInterval('micro-block', options);\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ ...options, cached: true });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query'>;\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'callerId' | 'oracleId'>;\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response'>;\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat'>;\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  {\n    onAccount, omitAddress, isOracle, ...options\n  }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    isOracle?: boolean;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const { nodeNetworkId, consensusProtocolVersion } = await options.onNode.getNodeInfo();\n  const signOpts = { networkId: nodeNetworkId, consensusProtocolVersion };\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signDelegationToContract(contractAddress, { ...signOpts, isOracle }),\n    );\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, signOpts),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, signOpts),\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { getAccount } from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport { sendTransaction } from './send-transaction';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this.getContext(), ...options });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n    /**\n     * Make operation on specific account by providing address (to use account from sdk) or instance\n     * of AccountBase (like MemoryAccount)\n     */\n    onAccount: OnAccount;\n  } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param name - AENS name\n   * @param options - Options\n   */\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signAllNamesDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signAllNamesDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param oracleQueryId - Oracle query id\n   * @param options - Options\n   */\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      },\n    };\n  }\n}\n","import AccountBase from './Base';\nimport { METHODS } from '../aepp-wallet-communication/schema';\nimport { ArgumentError, UnsupportedProtocolError } from '../utils/errors';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../utils/encoder';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types';\nimport { AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { packDelegation } from '../tx/builder/delegation';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  async sign(dataRaw: string | Uint8Array): Promise<Uint8Array> {\n    const data = encode(Buffer.from(dataRaw), Encoding.Bytearray);\n    const { signature } = await this._rpcClient\n      .request(METHODS.unsafeSign, { onAccount: this.address, data });\n    return decode(signature);\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient\n      .request(METHODS.signMessage, { onAccount: this.address, message });\n    return Buffer.from(signature, 'hex');\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      name, version, contractAddress, networkId,\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signTypedData, {\n      onAccount: this.address,\n      domain: {\n        name, version, networkId, contractAddress,\n      },\n      aci,\n      data,\n    });\n    return signature;\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { consensusProtocolVersion, isOracle }: {\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountRpc:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      isOracle,\n    });\n    return signature;\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { consensusProtocolVersion }: { consensusProtocolVersion?: ConsensusProtocolVersion } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      name,\n    });\n    return signature;\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { consensusProtocolVersion }: { consensusProtocolVersion?: ConsensusProtocolVersion } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      allNames: true,\n    });\n    return signature;\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { consensusProtocolVersion }: { consensusProtocolVersion?: ConsensusProtocolVersion } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      oracleQueryId,\n    });\n    return signature;\n  }\n\n  override async signDelegation(delegation: Encoded.Bytearray): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(\n      METHODS.signDelegation,\n      { delegation, onAccount: this.address },\n    );\n    return signature;\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\nimport { AensName } from '../../tx/builder/constants';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.unsafeSign]: (\n    p: { data: Encoded.Bytearray; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegationToContract]: (\n    p: {\n      contractAddress: Encoded.ContractAddress;\n      name?: AensName;\n      oracleQueryId?: Encoded.OracleQueryId;\n      allNames?: boolean;\n      isOracle?: boolean;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (\n    p: {\n      delegation: Encoded.Bytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = (\n    new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>()\n  );\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport AccountRpc from './account/Rpc';\nimport { decode, Encoded } from './utils/encoder';\nimport {\n  Accounts, RPC_VERSION, WalletInfo, Network, WalletApi, AeppApi, Node as NodeRpc,\n} from './aepp-wallet-communication/rpc/types';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport { METHODS, SUBSCRIPTION_TYPES } from './aepp-wallet-communication/schema';\nimport {\n  AlreadyConnectedError,\n  NoWalletConnectedError,\n  UnsubscribedAccountError,\n  UnAuthorizedAccountError,\n  RpcConnectionError,\n} from './utils/errors';\nimport Node from './Node';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\n\n/**\n * RPC handler for AEPP side\n * Contain functionality for wallet interaction and connect it to sdk\n * @category aepp wallet communication\n */\nexport default class AeSdkAepp extends AeSdkBase {\n  name: string;\n\n  onAddressChange: (a: Accounts) => void;\n\n  onDisconnect: (p: any) => void;\n\n  onNetworkChange: (a: Network) => void;\n\n  rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  _accounts?: Accounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Aepp name\n   * @param options.onAddressChange - Call-back function for update address event\n   * @param options.onDisconnect - Call-back function for disconnect event\n   * @param options.onNetworkChange - Call-back function for update network event\n   */\n  constructor({\n    name,\n    onAddressChange = () => {},\n    onDisconnect = () => {},\n    onNetworkChange = () => {},\n    ...other\n  }: {\n    name: string;\n    onAddressChange?: (a: Accounts) => void;\n    onDisconnect?: (p: any) => void;\n    onNetworkChange?: (a: Network) => void;\n  } & ConstructorParameters<typeof AeSdkBase>[0]) {\n    super(other);\n    this.onAddressChange = onAddressChange;\n    this.onDisconnect = onDisconnect;\n    this.onNetworkChange = onNetworkChange;\n    this.name = name;\n  }\n\n  override _resolveAccount(account: OnAccount = this.addresses()[0]): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (!this.addresses().includes(address)) throw new UnAuthorizedAccountError(address);\n      this._ensureConnected();\n      account = new AccountRpc(this.rpcClient, address);\n    }\n    if (account == null) this._ensureAccountAccess();\n    return super._resolveAccount(account);\n  }\n\n  override addresses(): Encoded.AccountAddress[] {\n    if (this._accounts == null) return [];\n    const current = Object.keys(this._accounts.current)[0];\n    return [\n      ...current != null ? [current] : [], ...Object.keys(this._accounts.connected),\n    ] as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Connect to wallet\n   * @param connection - Wallet connection object\n   * @param options - Options\n   * @param options.connectNode - Request wallet to bind node\n   * @param options.name - Node name\n   */\n  async connectToWallet(\n    connection: BrowserConnection,\n    { connectNode = false, name = 'wallet-node' }: { connectNode?: boolean; name?: string } = {},\n  ): Promise<WalletInfo & { node?: NodeRpc }> {\n    if (this.rpcClient != null) throw new AlreadyConnectedError('You are already connected to wallet');\n    let disconnectParams: any;\n\n    const updateNetwork = (params: Network): void => {\n      if (connectNode) {\n        if (params.node?.url == null) throw new RpcConnectionError('Missing URLs of the Node');\n        this.pool.delete(name);\n        this.addNode(name, new Node(params.node.url), true);\n      }\n      this.onNetworkChange(params);\n    };\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        delete this.rpcClient;\n        delete this._accounts;\n        this.onDisconnect(disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: (params) => {\n          this._accounts = params;\n          this.onAddressChange(params);\n        },\n        [METHODS.updateNetwork]: updateNetwork,\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    const walletInfo = await client\n      .request(METHODS.connect, { name: this.name, version: RPC_VERSION, connectNode });\n    updateNetwork(walletInfo);\n    this.rpcClient = client;\n    return walletInfo;\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnectWallet(): void {\n    this._ensureConnected();\n    this.rpcClient.notify(METHODS.closeConnection, { reason: 'bye' });\n    this.rpcClient.connection.disconnect();\n  }\n\n  /**\n   * Ask addresses from wallet\n   * @returns Addresses from wallet\n   */\n  async askAddresses(): Promise<Encoded.AccountAddress[]> {\n    this._ensureConnected();\n    return this.rpcClient.request(METHODS.address, undefined);\n  }\n\n  /**\n   * Subscribe for addresses from wallet\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAddress(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<ReturnType<WalletApi[METHODS.subscribeAddress]>> {\n    this._ensureConnected();\n    const result = await this.rpcClient.request(METHODS.subscribeAddress, { type, value });\n    this._accounts = result.address;\n    return result;\n  }\n\n  _ensureConnected(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    if (this.rpcClient != null) return;\n    throw new NoWalletConnectedError('You are not connected to Wallet');\n  }\n\n  _ensureAccountAccess(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    this._ensureConnected();\n    if (this.addresses().length !== 0) return;\n    throw new UnsubscribedAccountError();\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import {\n  RestError, userAgentPolicyName, setClientRequestIdPolicyName,\n} from '@azure/core-rest-pipeline';\nimport { OperationOptions } from '@azure/core-client';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci, CompileResult } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion = false }: { ignoreVersion?: boolean } = {}) {\n    super();\n\n    let version: string | undefined;\n    const getVersion = async (opts: OperationOptions): Promise<string> => {\n      if (version != null) return version;\n      version = (await this.api.apiVersion(opts)).apiVersion;\n      return version;\n    };\n\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('compiler', getVersion, '7.3.0', '9.0.0')],\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    this.api.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.api.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      cmpOut.warnings ??= []; // TODO: remove after requiring http compiler above or equal to 8.0.0\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","import { shallowRef } from 'vue';\nimport { createStore } from 'vuex';\nimport { AeSdkAepp, Node, CompilerHttp } from '@aeternity/aepp-sdk';\n\nconst store = createStore({\n  state: {\n    address: undefined,\n    networkId: undefined,\n    // AeSdkAepp instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n    aeSdk: shallowRef(new AeSdkAepp({\n      name: 'Simple æpp',\n      nodes: [\n        { name: 'testnet', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'mainnet', instance: new Node('https://mainnet.aeternity.io') },\n        { name: 'next', instance: new Node('https://next.aeternity.io') },\n      ],\n      onCompiler: new CompilerHttp('https://v7.compiler.aepps.com'),\n      async onNetworkChange({ networkId }) {\n        const [{ name }] = (await this.getNodesInPool())\n          .filter((node) => node.nodeNetworkId === networkId);\n        this.selectNode(name);\n        store.commit('setNetworkId', networkId);\n      },\n      onAddressChange: ({ current }) => store.commit('setAddress', Object.keys(current)[0]),\n    })),\n  },\n  mutations: {\n    setAddress(state, address) {\n      state.address = address;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n  },\n});\n\nexport default store;\n","import { createApp } from 'vue';\nimport App from './App.vue';\nimport store from './store';\n\ncreateApp(App).use(store).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkaepp\"] = self[\"webpackChunkaepp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(14531); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","class","_createElementBlock","_Fragment","_hoisted_1","_createVNode","_component_Connect","_hoisted_2","href","_normalizeClass","active","_ctx","view","onClick","_cache","$event","_createBlock","_resolveDynamicComponent","key","_createCommentVNode","connectMethod","type","value","_createTextVNode","reverseIframeWalletUrl","walletConnected","args","$options","disconnect","disabled","walletConnecting","connect","cancelWalletDetection","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","walletName","BaseError","Error","constructor","message","super","this","name","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","UnsupportedPlatformError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","UnAuthorizedAccountError","onAccount","UnsubscribedAccountError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","InvalidSignatureError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","METHODS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","address","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","target","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","connection","onDetected","wallets","method","params","readyToConnect","wallet","info","getConnection","to_waellet","newWallet","reverseIframe","process","walletInfo","computed","mapState","methods","detectWallets","document","createElement","src","style","display","body","appendChild","Promise","resolve","reject","stopDetection","walletDetector","async","confirm","remove","aeSdk","$store","commit","connectToWallet","error","current","subscribeAddress","Object","keys","disconnectWallet","__exports__","_component_Value","balancePromise","heightPromise","_hoisted_6","nodeInfoPromise","_hoisted_7","compilerVersionPromise","_component_SpendCoins","_component_MessageSign","_component_DataSign","text","props","Array","String","Number","default","watch","handler","then","result","valueToString","warn","immediate","JSON","stringify","k","v","spendTo","placeholder","spendAmount","spendPayload","spendPromise","spend","pause","setTimeout","duration","mapObject","object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","components","Value","TextEncoder","_component_FieldAction","title","messageSign","$props","argTitle","$data","argValue","argPlaceholder","promise","actionHandler","actionTitle","resultTitle","required","argDefaultValue","Function","FieldAction","messageToSign","signMessage","dataBuffer","onInput","setData","dataSign","_hoisted_8","_hoisted_9","emptyData","Buffer","sign","SpendCoins","MessageSign","DataSign","mounted","$watch","networkId","compilerApi","getBalance","getHeight","getNodeInfo","contractSourceCode","createPromise","create","contract","compile","deploy","deployPromise","callOnChain","callStatic","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","isAddressValid","maybeEncoded","encodings","encoding","genSalt","random","BigUint64Array","nacl","BigInt","MAX_SAFE_INTEGER","hash","verify","signature","detached","messagePrefix","messagePrefixLength","genEntryField","serialize","txParams","buildTx","ArrayBuffer","isView","startsWith","buf","unpackTx","genArrayField","itemHandler","items","buffers","genMapField","Mtree","values","MtreeValue","filter","recursiveType","withDefault","defaultValue","field","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","oracleQueryId","senderId","oracleId","_int32","nonceBE","alloc","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","commitmentHash","salt","padStart","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","isAuctionName","uInt","withFormatting","format","genShortUIntConstField","constValue","optional","shortUInt","constValueOptional","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","readUIntBE","subarray","genEncodedField","encodedData","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","serializeAettos","verCmp","a","b","getComponents","i","aComponents","bComponents","base","max","componentsToNumber","reverse","reduce","acc","n","idx","semverSatisfies","gasPriceCache","getCachedIncreasedGasPrice","node","cache","get","time","Date","now","gasPrice","nodeVersion","_getCachedStatus","minGasPrice","utilization","getRecentGasPrices","integerValue","maxSafeGasPrice","set","coinAmount","prepare","onNode","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ContractCreateTx","ContractCallTx","GaAttachTx","GaMetaTx","PayingForTx","factor","TX_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","ceil","floor","getOracleRelativeTtl","ttlKeys","buildGas","builtTx","txObject","tx","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","gasPricePrefix","_value","_computingMinFee","_canIncreaseFee","minFee","dividedBy","replace","gt","wrapWithProxy","valueCb","Proxy","res","Reflect","bind","unwrapProxy","_wrappedValue","_getPollInterval","_expectedMineRate","_microBlockCycle","_ref","_await$getVal","getVal","devModeDef","def","getNetworkId","heightCache","cached","getCurrentKeyBlockHeight","poll","interval","_interval","getTransactionByHash","blockHeight","ttl","awaitHeight","_interval2","currentHeight","waitForTxConfirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","addr","balance","catch","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","Map","txDryRunHandler","rs","delete","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accounts","Set","accountAddress","pubKey","forEach","results","reason","resultPayload","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","pointer","pointers","p","absoluteTtl","_isInternalBuild","genNonceField","senderKey","strategy","getAccountNextNonce","nextNonce","addressAny","txFields","parameters","addressName","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","bKey","bId","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","Fate3","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","consensusProtocolVersion","vm","abi","calculateGasLimitMax","gasMax","_computingGasLimit","gasLimitMax","gasLimit","_getProtocolDetails","c","kind","genEnumerationField","enm","getOracleByPubkey","queryFee","rlpEncode","_rlp","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","binary","unpTx","_classPrivateMethodInitSpec","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","Extension","Leaf","isEqual","tree","mptHash","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","ORACLE_TTL_TYPES","CallReturnType","entryAny","entry","entrySignedTx","SignedTx","entryMtreeValueArray","entryTreesPoi","TreesPoi","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","flags","gaContract","gaAuthFun","encoded","signatures","raw","SpendTx","recipientId","accountId","status","NamePreclaimTx","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","pointers2","NameTransferTx","NameRevokeTx","owner","ctVersion","boolean","referers","deposit","callData","callerId","callerNonce","gasUsed","returnValue","returnType","enumeration","queryFormat","responseFormat","oracleTtlValue","oracleTtlType","delta","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","ChannelOffChainUpdateTransfer","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","callStack","ChannelClientReconnectTx","role","pubkey","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","authFun","gaId","authData","payerId","GaMetaTxAuthData","rlpDecode","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","unpackRecord","encodedRecord","expectedTag","index","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","genRequestQueuesPolicy","requestQueues","policy","sendRequest","request","next","_requestQueues$get","headers","getResponse","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","url","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","parsedBody","genVersionCheckPolicy","versionCb","has","requestOptions","customHeaders","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","NaN","statusesToNotRetry","intervals","fill","_","intervalSum","intervalsInMs","e","attempt","urlParsed","searchParams","_e$response$status","_e$response","Header","className","modelProperties","serializedName","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","pofHash","txsHash","ErrorModel","errorCode","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","blockHash","Tx","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","uberParent","polymorphicDiscriminator","clientName","op","RelativeTTL","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","AuctionEntry","startedAt","endsAt","highestBidder","highestBid","NameEntry","PeerPubKey","SyncStatus","progress","speed","estimate","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","uptime","listening","protocols","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","Currency","symbol","subunit","subunitsPerUnit","fiatConverstionUrl","logo","primaryColour","secondaryColour","networkName","Image","GasPricesItem","minutes","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","fromParam","limit","typeParam","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxsOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getAuctionEntryByName","getAuctionEntryByNameOperationSpec","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getSyncStatus","getSyncStatusOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","getCurrency","getCurrencyOperationSpec","getRecentGasPricesOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_cachedStatusPromise","ignoreVersion","getVersion","opts","allowInsecureConnection","additionalPolicies","pipeline","removePolicy","userAgentPolicyName","setClientRequestIdPolicyName","nodeNetworkId","versions","getTransactionSignerAddress","_getSchema$find","AccountBase","signTypedData","aci","signDelegationToContract","signNameDelegationToContract","signAllNamesDelegationToContract","signOracleQueryDelegationToContract","signDelegation","delegation","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","DelegationTag","oracleAddressField","queryIdField","AensWildcard","AensName","AensPreclaim","packDelegation","getBufferToSign","innerTx","prefixes","rlpBinaryTx","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","txBinary","txWithNetworkId","txHashWithNetworkId","checkedKeys","nestedTx","cost","recipient","_ref2","oracleCall","contractCreate","contractCall","parse","InvalidTxError","validation","sendTransaction","txUnsigned","waitMined","signTransaction","__queue","pollResult","txData","confirmationHeight","verifyTx","Encoder","Calldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","$deploy","_opt$gasLimit","_other$result","opt","_calldata","_name","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","otherOptions","_bytecode","isIris","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","trim","shallowRef","getContext","arg","setFactor","multiplyByFactor","_component_GenerateSpendTx","signInnerTx","payForTx","incrementNonce","generatePromise","generate","spendTx","spendTxParams","GenerateSpendTx","txToPayFor","payForTransaction","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","toPromise","dataEncoded","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","verifySignature","_hoisted_20","verifyAddress","verifyPromise","verifyTypedData","_hoisted_21","_hoisted_22","operation","parameter","dataParsed","aciParsed","dataType","getter","signPromise","isOracle","payloadAsJson","includeSubJwk","jwt","unpackPromise","unpack","toBase64Url","_context","_context2","_replaceAllInstanceProperty","fromBase64Url","_context3","objectToBase64Url","header","signJwt","originalPayload","sub_jwk","kty","crv","x","unpackJwt","_payload$sub_jwk","h","payloadEncoded","jwk","signer","_resolveAccount","Connect","Basic","Contracts","PayForTx","TypedData","DelegationSignature","Jwt","render","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","hasRawPointers","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","nameEntry","freeze","transfer","revoke","extendTtl","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","claim","aensBid","recipientIdOrName","transferFunds","fraction","desiredAmount","ROUND_HALF_UP","plus","minus","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$options$onNode","queries","add","stopped","pollForQueryResponse","responseBuffer","getQueryObject","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","lastArg","registerOracle","oracleRegisterTx","ensureOracleQuery","oq","createDelegationSignature","ids","omitAddress","signOpts","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","chainMethods","aensMethods","spendMethods","oracleMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","mergeWith","prototype","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","ensureNodeConnected","pool","selectedNodeName","select","selectNode","isNodeConnected","getNodesInPool","addresses","_options$networkId","_options$consensusPro","_options$networkId2","_options$consensusPro2","_options$networkId3","_options$consensusPro3","_options$networkId4","_options$consensusPro4","_options$networkId5","AccountRpc","rpcClient","_rpcClient","dataRaw","unsafeSign","returnSigned","signedTransaction","allNames","RPC_VERSION","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","AeSdkAepp","onAddressChange","onNetworkChange","_ensureConnected","_ensureAccountAccess","_accounts","connectNode","disconnectParams","updateNetwork","_params$node","client","updateAddress","closeConnection","askAddresses","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","_cmpOut$warnings","cmpOut","warning","generateAciBySourceCode","generateAci","store","createStore","state","mutations","setAddress","setNetworkId","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}