{"version":3,"file":"js/app.3b442928.js","mappings":"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","sources":["webpack://aepp/./src/App.vue","webpack://aepp/./src/Connect.vue","webpack://aepp/../../src/utils/errors.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://aepp/../../src/aepp-wallet-communication/schema.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://aepp/../../src/aepp-wallet-communication/wallet-detector.ts","webpack://aepp/./src/Connect.vue?1a8f","webpack://aepp/./src/Basic.vue","webpack://aepp/./src/components/Value.vue","webpack://aepp/./src/components/Value.vue?9937","webpack://aepp/./src/components/SpendCoins.vue","webpack://aepp/../../src/utils/other.ts","webpack://aepp/../../src/utils/encoder-types.ts","webpack://aepp/../../src/utils/encoder.ts","webpack://aepp/./src/components/SpendCoins.vue?b814","webpack://aepp/./src/components/MessageSign.vue","webpack://aepp/./src/components/FieldAction.vue","webpack://aepp/./src/components/FieldAction.vue?d339","webpack://aepp/./src/components/MessageSign.vue?1f61","webpack://aepp/./src/components/DataSign.vue","webpack://aepp/./src/components/DataSign.vue?2083","webpack://aepp/./src/Basic.vue?efb3","webpack://aepp/./src/Contracts.vue","webpack://aepp/../../../src/tx/builder/constants.ts","webpack://aepp/../../src/utils/crypto.ts","webpack://aepp/../../../../src/tx/builder/field-types/ct-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/abi-version.ts","webpack://aepp/../../src/utils/bytes.ts","webpack://aepp/../../../../src/tx/builder/field-types/address.ts","webpack://aepp/../../../../src/tx/builder/field-types/array.ts","webpack://aepp/../../../src/tx/builder/helpers.ts","webpack://aepp/../../../../src/tx/builder/field-types/u-int.ts","webpack://aepp/../../src/utils/bignumber.ts","webpack://aepp/../../src/utils/amount-formatter.ts","webpack://aepp/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://aepp/../../../../src/tx/builder/field-types/encoded.ts","webpack://aepp/../../../../src/tx/builder/field-types/entry.ts","webpack://aepp/../../../../src/tx/builder/field-types/enumeration.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-price.ts","webpack://aepp/../../../../src/tx/builder/field-types/fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://aepp/../../../../src/tx/builder/field-types/field.ts","webpack://aepp/../../../../src/tx/builder/field-types/name.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-id.ts","webpack://aepp/../../../../src/tx/builder/field-types/nonce.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers.ts","webpack://aepp/../../../../src/tx/builder/field-types/query-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/raw.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://aepp/../../../../src/tx/builder/field-types/string.ts","webpack://aepp/../../../../src/tx/builder/field-types/transaction.ts","webpack://aepp/../../src/utils/wrap-proxy.ts","webpack://aepp/../src/chain.ts","webpack://aepp/../../../../src/tx/builder/field-types/ttl.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-default.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://aepp/../../../../src/tx/builder/entry/constants.ts","webpack://aepp/../../../src/tx/builder/schema.ts","webpack://aepp/../../../src/tx/builder/common.ts","webpack://aepp/../../../../src/tx/builder/field-types/boolean.ts","webpack://aepp/../../../../src/tx/builder/field-types/map.ts","webpack://aepp/../../../../src/tx/builder/field-types/mptree.ts","webpack://aepp/../../../../src/tx/builder/field-types/wrapped.ts","webpack://aepp/../../../../src/tx/builder/entry/schema.ts","webpack://aepp/../../../../src/tx/builder/entry/index.ts","webpack://aepp/../../../src/tx/builder/index.ts","webpack://aepp/../../src/utils/semver-satisfies.ts","webpack://aepp/../../src/utils/autorest.ts","webpack://aepp/../../../../src/apis/node/models/mappers.ts","webpack://aepp/../../../../src/apis/node/models/parameters.ts","webpack://aepp/../../../src/apis/node/node.ts","webpack://aepp/../src/Node.ts","webpack://aepp/../../src/tx/transaction-signer.ts","webpack://aepp/../../src/account/Base.ts","webpack://aepp/../../src/utils/typed-data.ts","webpack://aepp/../../src/account/Memory.ts","webpack://aepp/../../src/tx/execution-cost.ts","webpack://aepp/../../src/tx/validator.ts","webpack://aepp/../src/send-transaction.ts","webpack://aepp/../../src/contract/Contract.ts","webpack://aepp/./src/Contracts.vue?05c9","webpack://aepp/./src/PayForTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue?b650","webpack://aepp/./src/PayForTx.vue?2fdc","webpack://aepp/./src/TypedData.vue","webpack://aepp/./src/TypedData.vue?5e40","webpack://aepp/./src/DelegationSignature.vue","webpack://aepp/../../../../src/tx/builder/delegation/schema.ts","webpack://aepp/../../../../src/tx/builder/delegation/index.ts","webpack://aepp/./src/DelegationSignature.vue?67ef","webpack://aepp/./src/Jwt.vue","webpack://aepp/../../src/utils/jwt.ts","webpack://aepp/./src/Jwt.vue?1275","webpack://aepp/./src/App.vue?7ccd","webpack://aepp/../src/spend.ts","webpack://aepp/../../src/contract/ga.ts","webpack://aepp/../src/AeSdkMethods.ts","webpack://aepp/../src/AeSdkBase.ts","webpack://aepp/../../src/account/Rpc.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://aepp/../src/AeSdkAepp.ts","webpack://aepp/../../../../src/apis/compiler/models/mappers.ts","webpack://aepp/../../../../src/apis/compiler/models/parameters.ts","webpack://aepp/../../../src/apis/compiler/compiler.ts","webpack://aepp/../../../src/contract/compiler/Base.ts","webpack://aepp/../../../src/contract/compiler/Http.ts","webpack://aepp/./src/store.js","webpack://aepp/./src/main.js","webpack://aepp/webpack/bootstrap","webpack://aepp/webpack/runtime/chunk loaded","webpack://aepp/webpack/runtime/define property getters","webpack://aepp/webpack/runtime/global","webpack://aepp/webpack/runtime/hasOwnProperty shorthand","webpack://aepp/webpack/runtime/make namespace object","webpack://aepp/webpack/runtime/jsonp chunk loading","webpack://aepp/webpack/startup"],"sourcesContent":["<template>\n  <h2>Simple æpp</h2>\n\n  <Connect />\n\n  <div class=\"nav\">\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Basic' }\"\n      @click=\"view = 'Basic'\"\n    >\n      Basic functionality\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Contracts' }\"\n      @click=\"view = 'Contracts'\"\n    >\n      Smart contracts\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'PayForTx' }\"\n      @click=\"view = 'PayForTx'\"\n    >\n      Pay for transaction\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'TypedData' }\"\n      @click=\"view = 'TypedData'\"\n    >\n      Typed data\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'DelegationSignature' }\"\n      @click=\"view = 'DelegationSignature'\"\n    >\n      Delegation signature\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Jwt' }\"\n      @click=\"view = 'Jwt'\"\n    >\n      JWT\n    </a>\n  </div>\n\n  <Component\n    v-if=\"view\"\n    :is=\"view\"\n  />\n</template>\n\n<script>\nimport Connect from './Connect.vue';\nimport Basic from './Basic.vue';\nimport Contracts from './Contracts.vue';\nimport PayForTx from './PayForTx.vue';\nimport TypedData from './TypedData.vue';\nimport DelegationSignature from './DelegationSignature.vue';\nimport Jwt from './Jwt.vue';\n\nexport default {\n  components: {\n    Connect, Basic, Contracts, PayForTx, TypedData, DelegationSignature, Jwt,\n  },\n  data: () => ({ view: '' }),\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","<template>\n  <div class=\"group\">\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"default\">\n        Iframe or WebExtension\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"reverse-iframe\">\n        Reverse iframe\n      </label>\n      <div><input v-model=\"reverseIframeWalletUrl\"></div>\n    </div>\n\n    <button\n      v-if=\"walletConnected\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else-if=\"connectMethod\"\n      :disabled=\"walletConnecting\"\n      @click=\"connect\"\n    >\n      Connect\n    </button>\n\n    <button\n      v-if=\"cancelWalletDetection\"\n      @click=\"cancelWalletDetection\"\n    >\n      Cancel detection\n    </button>\n  </div>\n\n  <div class=\"group\">\n    <div>\n      <div>SDK status</div>\n      <div>\n        {{\n          (walletConnected && 'Wallet connected')\n          || (cancelWalletDetection && 'Wallet detection')\n          || (walletConnecting && 'Wallet connecting')\n          || 'Ready to connect to wallet'\n        }}\n      </div>\n    </div>\n    <div>\n      <div>Wallet name</div>\n      <div>{{ walletName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  walletDetector, BrowserWindowMessageConnection, RpcConnectionDenyError, RpcRejectedByUserError,\n} from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\n\nexport default {\n  data: () => ({\n    connectMethod: 'default',\n    walletConnected: false,\n    walletConnecting: null,\n    reverseIframe: null,\n    reverseIframeWalletUrl: process.env.VUE_APP_WALLET_URL ?? `http://${location.hostname}:9000`,\n    walletInfo: null,\n    cancelWalletDetection: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    walletName() {\n      if (!this.walletConnected) return 'Wallet is not connected';\n      return this.walletInfo.name;\n    },\n  },\n  methods: {\n    async detectWallets() {\n      if (this.connectMethod === 'reverse-iframe') {\n        this.reverseIframe = document.createElement('iframe');\n        this.reverseIframe.src = this.reverseIframeWalletUrl;\n        this.reverseIframe.style.display = 'none';\n        document.body.appendChild(this.reverseIframe);\n      }\n      const connection = new BrowserWindowMessageConnection();\n      return new Promise((resolve, reject) => {\n        const stopDetection = walletDetector(connection, async ({ newWallet }) => {\n          if (confirm(`Do you want to connect to wallet ${newWallet.info.name} with id ${newWallet.info.id}`)) {\n            stopDetection();\n            resolve(newWallet.getConnection());\n            this.cancelWalletDetection = null;\n          }\n        });\n        this.cancelWalletDetection = () => {\n          reject(new Error('Wallet detection cancelled'));\n          stopDetection();\n          this.cancelWalletDetection = null;\n          if (this.reverseIframe) this.reverseIframe.remove();\n        };\n      });\n    },\n    async connect() {\n      this.walletConnecting = true;\n      this.aeSdk.onDisconnect = () => {\n        this.walletConnected = false;\n        this.walletInfo = null;\n        this.$store.commit('setAddress', undefined);\n        if (this.reverseIframe) this.reverseIframe.remove();\n      };\n      try {\n        const connection = await this.detectWallets();\n        try {\n          this.walletInfo = await this.aeSdk.connectToWallet(connection);\n        } catch (error) {\n          if (error instanceof RpcConnectionDenyError) connection.disconnect();\n          throw error;\n        }\n        this.walletConnected = true;\n        const { address: { current } } = await this.aeSdk.subscribeAddress('subscribe', 'connected');\n        this.$store.commit('setAddress', Object.keys(current)[0]);\n      } catch (error) {\n        if (\n          error.message === 'Wallet detection cancelled'\n          || error instanceof RpcConnectionDenyError\n          || error instanceof RpcRejectedByUserError\n        ) return;\n        throw error;\n      } finally {\n        this.walletConnecting = false;\n      }\n    },\n    disconnect() {\n      this.aeSdk.disconnectWallet();\n    },\n  },\n};\n</script>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  unsafeSign = 'data.unsafeSign',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import BrowserConnection from './connection/Browser';\nimport BrowserWindowMessageConnection from './connection/BrowserWindowMessage';\nimport { MESSAGE_DIRECTION, METHODS } from './schema';\nimport { WalletInfo } from './rpc/types';\nimport { UnsupportedPlatformError } from '../utils/errors';\n\ninterface Wallet {\n  info: WalletInfo;\n  getConnection: () => BrowserWindowMessageConnection;\n}\ninterface Wallets { [key: string]: Wallet }\n\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default (\n  connection: BrowserConnection,\n  onDetected: ({ wallets, newWallet }: { wallets: Wallets; newWallet: Wallet }) => void,\n): () => void => {\n  if (window == null) throw new UnsupportedPlatformError('Window object not found, you can run wallet detector only in browser');\n  const wallets: Wallets = {};\n\n  connection.connect((\n    { method, params }: { method: string; params: WalletInfo },\n    origin: string,\n    source: Window,\n  ) => {\n    if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n\n    const wallet = {\n      info: params,\n      getConnection() {\n        return new BrowserWindowMessageConnection({\n          target: source,\n          ...params.type === 'extension' ? {\n            sendDirection: MESSAGE_DIRECTION.to_waellet,\n            receiveDirection: MESSAGE_DIRECTION.to_aepp,\n            ...window.origin !== 'null' && { origin: window.origin },\n          } : {\n            origin: params.origin,\n          },\n        });\n      },\n    };\n    wallets[wallet.info.id] = wallet;\n    onDetected({ wallets, newWallet: wallet });\n  }, () => {});\n\n  return () => connection.disconnect();\n};\n","import { render } from \"./Connect.vue?vue&type=template&id=02b69bc7\"\nimport script from \"./Connect.vue?vue&type=script&lang=js\"\nexport * from \"./Connect.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>General information</h2>\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>Height</div>\n      <Value :value=\"heightPromise\" />\n    </div>\n    <div>\n      <div>Node info</div>\n      <Value :value=\"nodeInfoPromise\" />\n    </div>\n    <div>\n      <div>Compiler version</div>\n      <Value :value=\"compilerVersionPromise\" />\n    </div>\n  </div>\n\n  <SpendCoins />\n\n  <MessageSign />\n\n  <DataSign />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport DataSign from './components/DataSign.vue';\n\nexport default {\n  components: {\n    Value, SpendCoins, MessageSign, DataSign,\n  },\n  data: () => ({\n    balancePromise: null,\n    heightPromise: null,\n    nodeInfoPromise: null,\n    compilerVersionPromise: null,\n  }),\n  computed: mapState(['aeSdk', 'address', 'networkId']),\n  mounted() {\n    this.$watch(\n      ({ aeSdk, address, networkId }) => [aeSdk, address, networkId],\n      ([aeSdk, address]) => {\n        this.compilerVersionPromise = aeSdk.compilerApi.version();\n        this.balancePromise = address\n          ? aeSdk.getBalance(address) : Promise.reject(new Error('Address not available'));\n        this.heightPromise = aeSdk.getHeight();\n        this.nodeInfoPromise = aeSdk.getNodeInfo();\n      },\n      { immediate: true },\n    );\n  },\n};\n</script>\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=0047ad3a\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Spend coins</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <button @click=\"() => { spendPromise = spend(); }\">\n      Spend\n    </button>\n    <div v-if=\"spendPromise\">\n      <div>Spend result</div>\n      <Value :value=\"spendPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    spendPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    spend() {\n      return this.aeSdk.spend(this.spendAmount, this.spendTo, {\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n    },\n  },\n};\n</script>\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\n// based on https://stackoverflow.com/a/61108377\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  AccountSecretKey = 'sk',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type AccountSecretKey = `${Encoding.AccountSecretKey}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import bs58 from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.AccountSecretKey,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.AccountSecretKey]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58.encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58.decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import { render } from \"./SpendCoins.vue?vue&type=template&id=6217803d\"\nimport script from \"./SpendCoins.vue?vue&type=script&lang=js\"\nexport * from \"./SpendCoins.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <FieldAction\n    title=\"Sign a message\"\n    arg-title=\"Message to sign\"\n    arg-placeholder=\"I want to <action name> at <time> on <network name>\"\n    action-title=\"Sign message\"\n    :action-handler=\"messageSign\"\n    result-title=\"Message sign result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './FieldAction.vue';\n\nexport default {\n  components: { FieldAction },\n  computed: mapState(['aeSdk']),\n  methods: {\n    messageSign(messageToSign) {\n      return this.aeSdk.signMessage(messageToSign);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>{{ title }}</h2>\n  <div class=\"group\">\n    <div v-if=\"argTitle\">\n      <div>{{ argTitle }}</div>\n      <div>\n        <input\n          v-model=\"argValue\"\n          :placeholder=\"argPlaceholder\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { promise = actionHandler(argValue); }\">\n      {{ actionTitle }}\n    </button>\n    <div v-if=\"promise\">\n      <div>{{ resultTitle }}</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  props: {\n    title: { type: String, required: true },\n    argTitle: { type: String, required: false },\n    argPlaceholder: { type: String, required: false },\n    argDefaultValue: { type: String, required: false },\n    actionTitle: { type: String, required: true },\n    actionHandler: { type: Function, required: true },\n    resultTitle: { type: String, required: true },\n  },\n  data() {\n    return {\n      argValue: this.argDefaultValue,\n      promise: null,\n    };\n  },\n};\n</script>\n","import { render } from \"./FieldAction.vue?vue&type=template&id=7b236a56\"\nimport script from \"./FieldAction.vue?vue&type=script&lang=js\"\nexport * from \"./FieldAction.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./MessageSign.vue?vue&type=template&id=2b567dd0\"\nimport script from \"./MessageSign.vue?vue&type=script&lang=js\"\nexport * from \"./MessageSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign raw data (unsafe)</h2>\n  <div class=\"group\">\n    <div>\n      <div>Data as text</div>\n      <div>\n        <input\n          :value=\"dataBuffer.toString()\"\n          @input=\"setData($event.target.value)\"\n          placeholder=\"Plain text\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Data as hex</div>\n      <div>\n        <input\n          :value=\"dataBuffer.toString('hex')\"\n          @input=\"setData($event.target.value, 'hex')\"\n          placeholder=\"hex-encoded data\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Data encoded</div>\n      <div>\n        <input\n          v-model=\"data\"\n          placeholder=\"ba_-encoded data\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { promise = dataSign(); }\">\n      Sign data\n    </button>\n    <div v-if=\"promise\">\n      <div>Data sign result</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { Buffer } from 'buffer';\nimport { decode, encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nconst emptyData = encode(Buffer.from([]), Encoding.Bytearray);\n\nexport default {\n  components: { Value },\n  computed: {\n    ...mapState(['aeSdk']),\n    dataBuffer() {\n      try {\n        return Buffer.from(decode(this.data || emptyData));\n      } catch (error) {\n        return Buffer.from([]);\n      }\n    },\n  },\n  data: () => ({\n    data: '',\n    promise: null,\n  }),\n  methods: {\n    setData(data, type) {\n      this.data = encode(Buffer.from(data, type), Encoding.Bytearray);\n    },\n    dataSign() {\n      return this.aeSdk.sign(decode(this.data || emptyData));\n    },\n  },\n};\n</script>\n","import { render } from \"./DataSign.vue?vue&type=template&id=6094de5b\"\nimport script from \"./DataSign.vue?vue&type=script&lang=js\"\nexport * from \"./DataSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Basic.vue?vue&type=template&id=79e4d050\"\nimport script from \"./Basic.vue?vue&type=script&lang=js\"\nexport * from \"./Basic.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Contract Instance</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract Source Code</div>\n      <div>\n        <textarea\n          v-model=\"contractSourceCode\"\n          placeholder=\"Contact source code\"\n        />\n      </div>\n    </div>\n    <button @click=\"() => { createPromise = create(); }\">\n      Create\n    </button>\n    <div v-if=\"createPromise\">\n      <div>Contract Instance</div>\n      <Value :value=\"createPromise.then(() => 'Ready')\" />\n    </div>\n  </div>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Compile Contract\"\n      action-title=\"Compile\"\n      :action-handler=\"compile\"\n      result-title=\"Bytecode\"\n    />\n  </template>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Deploy Contract\"\n      arg-title=\"Deploy argument\"\n      arg-placeholder=\"Deploy argument\"\n      arg-default-value=\"5\"\n      action-title=\"Deploy\"\n      :action-handler=\"deploy\"\n      result-title=\"Deployed Contract\"\n    />\n  </template>\n\n  <template v-if=\"deployPromise\">\n    <FieldAction\n      title=\"Call Contract on chain\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"7\"\n      action-title=\"Call\"\n      :action-handler=\"callOnChain\"\n      result-title=\"Call Result\"\n    />\n\n    <FieldAction\n      title=\"Call Contract using dry-run (static)\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"8\"\n      action-title=\"Call\"\n      :action-handler=\"callStatic\"\n      result-title=\"Call Result\"\n    />\n  </template>\n</template>\n\n<script>\nimport { shallowRef } from 'vue';\nimport { mapState } from 'vuex';\nimport { Contract } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nconst contractSourceCode = `\ncontract Multiplier =\n  record state = { factor: int }\n\n  entrypoint init(f : int) = { factor = f }\n\n  stateful entrypoint setFactor(f : int) =\n    put(state{ factor = f })\n\n  entrypoint multiplyByFactor(x : int) =\n    x * state.factor\n`.trim();\n\nexport default {\n  components: { Value, FieldAction },\n  data: () => ({\n    contractSourceCode,\n    createPromise: null,\n    contract: null,\n    deployPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async create() {\n      // Contract instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n      this.contract = shallowRef(\n        await Contract.initialize({\n          ...this.aeSdk.getContext(), sourceCode: this.contractSourceCode,\n        }),\n      );\n    },\n    async compile() {\n      return this.contract.$compile();\n    },\n    async deploy(arg) {\n      this.deployPromise = this.contract.$deploy([arg]);\n      return this.deployPromise;\n    },\n    async callOnChain(arg) {\n      return this.contract.setFactor(arg);\n    },\n    async callStatic(arg) {\n      return this.contract.multiplyByFactor(arg);\n    },\n  },\n};\n</script>\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9; // TODO: don't use number for ae\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  SignedTx = 11,\n  SpendTx = 12,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelClientReconnectTx = 575,\n  ChannelSnapshotSoloTx = 59,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n}\n","import nacl from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Ceres }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Ceres }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  if (name[2] === '-' && name[3] === '-') {\n    throw new ArgumentError('aens name', 'without \"-\" char in both the third and fourth positions', maybeName);\n  }\n  if (name[0] === '-') {\n    throw new ArgumentError('aens name', 'starting with no \"-\" char', maybeName);\n  }\n  if (name.at(-1) === '-') {\n    throw new ArgumentError('aens name', 'ending with no \"-\" char', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { EntryTag } from '../entry/constants';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\nexport default function genEntryField<T extends EntryTag = EntryTag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { packEntry }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(packEntry({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackEntry }) {\n      return unpackEntry(encode(buf, Encoding.Bytearray), tag);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport coinAmount from './coin-amount';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE } from '../constants';\nimport Node from '../../../Node';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nconst gasPriceCache: WeakMap<Node, { time: number; gasPrice: bigint }> = new WeakMap();\n\nexport async function getCachedIncreasedGasPrice(node: Node): Promise<bigint> {\n  const cache = gasPriceCache.get(node);\n  if (cache != null && cache.time > Date.now() - 20 * 1000) {\n    return cache.gasPrice;\n  }\n\n  const { minGasPrice, utilization } = (await node.getRecentGasPrices())[0];\n  let gasPrice = utilization < 70 ? 0n : BigInt(\n    new BigNumber(minGasPrice.toString()).times(1.01).integerValue().toFixed(),\n  );\n\n  const maxSafeGasPrice = BigInt(MIN_GAS_PRICE) * 100000n; // max microblock fee is 600ae or 35usd\n  if (gasPrice > maxSafeGasPrice) {\n    console.warn([\n      `Estimated gas price ${gasPrice} exceeds the maximum safe value for unknown reason.`,\n      `It will be limited to ${maxSafeGasPrice}.`,\n      'To overcome this restriction provide `gasPrice`/`fee` in options.',\n    ].join(' '));\n    gasPrice = maxSafeGasPrice;\n  }\n\n  gasPriceCache.set(node, { gasPrice, time: Date.now() });\n  return gasPrice;\n}\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode, denomination }: {\n      onNode?: Node;\n      denomination?: AE_AMOUNT_FORMATS;\n    },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `gasPrice` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return formatAmount(gasPrice, { targetDenomination: denomination });\n  },\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors';\nimport { Int, MIN_GAS_PRICE, Tag } from '../constants';\nimport uInt from './u-int';\nimport coinAmount from './coin-amount';\nimport { getCachedIncreasedGasPrice } from './gas-price';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\nimport Node from '../../../Node';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the base gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base gas\n * @example\n * ```js\n * TX_BASE_GAS(Tag.ChannelForceProgressTx) => 30 * 15000\n * ```\n */\nconst TX_BASE_GAS = (txType: Tag): number => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return factor * BASE_GAS;\n};\n\n/**\n * Calculate gas for other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The other gas\n * @example\n * ```js\n * TX_OTHER_GAS(Tag.OracleResponseTx, 10, { relativeTtl: 12, innerTxSize: 0 })\n *  => 10 * 20 + Math.ceil(32000 * 12 / Math.floor(60 * 24 * 365 / 3))\n * ```\n */\nconst TX_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): number => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return txSize * GAS_PER_BYTE\n        + Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL));\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return (txSize - innerTxSize) * GAS_PER_BYTE;\n    default:\n      return txSize * GAS_PER_BYTE;\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate gas based on tx type and params\n */\nexport function buildGas(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_BASE_GAS(txObject.tag)\n    + TX_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    });\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = new BigNumber(MIN_GAS_PRICE).times(buildGas(rebuildTx(fee), unpackTx, buildTx));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\n// TODO: Get rid of this workaround. Transaction builder can't accept/return gas price instead of\n// fee because it may get a decimal gas price. So, it should accept the optional `gasPrice` even\n// if it is not a contract-related transaction. And use this `gasPrice` to calculate `fee`.\nconst gasPricePrefix = '_gas-price:';\n\nexport interface SerializeAettosParams {\n  rebuildTx: (params: any) => Encoded.Transaction;\n  unpackTx: typeof unpackTxType;\n  buildTx: typeof buildTxType;\n  _computingMinFee?: BigNumber;\n}\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode }: { onNode?: Node },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `fee` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return gasPricePrefix + gasPrice;\n  },\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee,\n    }: SerializeAettosParams,\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value?.startsWith(gasPricePrefix) === true\n      ? minFee.dividedBy(MIN_GAS_PRICE).times(_value.replace(gasPricePrefix, ''))\n      : new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1] & SerializeAettosParams,\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    if (typeof value === 'string' && value.startsWith(gasPricePrefix)) {\n      return uInt.serialize(this.serializeAettos(value, params, options));\n    }\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildGas } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildGas(rebuildTx(gasMax), unpackTx, buildTx);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\nimport { Tag } from '../constants';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number, params: { tag: Tag }) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    serialize(value: number, { tag }): Buffer {\n      if (Tag.GaAttachTx === tag && value !== 1) {\n        throw new ArgumentError('nonce', 'equal 1 if GaAttachTx', value);\n      }\n      return shortUInt.serialize(value);\n    },\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\nimport { isAddressValid } from '../../../utils/crypto';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\ntype NamePointerRaw = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default <AllowRaw extends boolean>(allowRaw: AllowRaw): {\n  serialize: (pointers: Array<AllowRaw extends true ? NamePointerRaw : NamePointer>) => Buffer[][];\n  deserialize: (\n    pointers: Array<[key: Buffer, id: Buffer]>,\n  ) => Array<AllowRaw extends true ? NamePointerRaw : NamePointer>;\n} => ({\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers) {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) {\n        payload = [...allowRaw ? [ID_TAG] : [], addressAny.serialize(id)];\n      }\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError('Raw pointer', `shorter than ${DATA_LENGTH_MAX + 1} bytes`, `${data.length} bytes`);\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers) {\n    return pointers.map(([bKey, bId]) => {\n      if (!allowRaw) return { key: bKey.toString(), id: addressAny.deserialize(bId) };\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      // TS can't figure out the real type depending on allowRaw\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray) as Encoded.AccountAddress;\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n});\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genTransactionField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      return unpackTx(encode(buf, Encoding.Transaction), tag);\n    },\n  };\n}\n","import { ArgumentError } from './errors';\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb();\n      if (target == null) throw new ArgumentError('wrapped value', 'defined', target);\n      if (name === 'get' && args[0] === '_wrappedValue') return target;\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get' ? res.bind(target) : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport { isAccountNotFoundError, pause } from './utils/other';\nimport { unwrapProxy } from './utils/wrap-proxy';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node from './Node';\nimport { DryRunResult, DryRunResults, SignedTx } from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport async function _getPollInterval(\n  type: 'key-block' | 'micro-block',\n  { _expectedMineRate, _microBlockCycle, onNode }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; onNode: Node },\n): Promise<number> {\n  const getVal = async (\n    t: string,\n    val: number | undefined,\n    devModeDef: number,\n    def: number,\n  ): Promise<number | null> => {\n    if (t !== type) return null;\n    if (val != null) return val;\n    return await onNode?.getNetworkId() === 'ae_dev' ? devModeDef : def;\n  };\n\n  const base = await getVal('key-block', _expectedMineRate, 0, 180000)\n    ?? await getVal('micro-block', _microBlockCycle, 0, 3000)\n    ?? (() => { throw new InternalError(`Unknown type: ${type}`); })();\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight(\n  { cached = false, ...options }: {\n    onNode: Node;\n    cached?: boolean;\n  } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache != null && cache.time > Date.now() - await _getPollInterval('key-block', options)) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Return transaction details if it is mined, fail otherwise.\n * If the transaction has ttl specified then would wait till it leaves the mempool.\n * Otherwise would fail if a specified amount of blocks were mined.\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail if transaction ttl is not set\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): ReturnType<Node['getTransactionByHash']> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let max;\n  do {\n    const tx = await options.onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    if (max == null) {\n      max = tx.tx.ttl !== 0 ? -1\n        : await getHeight({ ...options, cached: true }) + blocks;\n    }\n    await pause(interval);\n  } while (max === -1 ? true : await getHeight({ ...options, cached: true }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(await _getPollInterval('key-block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight(options);\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): ReturnType<Node['getAccountByPubkey']> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getCurrentGeneration']> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getGenerationByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<SignedTx[]> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getKeyBlockByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getMicroBlockHeaderByHash']> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{ txEvents?: DryRunResults['txEvents'] } & DryRunResult> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContractCode']> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContract']> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getNameEntryByName']> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { _getPollInterval, getHeight } from '../../../chain';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    {\n      onNode, absoluteTtl, _isInternalBuild, ...options\n    }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n      _isInternalBuild?: boolean;\n    } & Omit<Parameters<typeof _getPollInterval>[1], 'onNode'>,\n  ) {\n    if (absoluteTtl !== true && value !== 0 && (value != null || _isInternalBuild === true)) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value = (value ?? 3) + await getHeight({ ...options, onNode, cached: true });\n    }\n    return value;\n  },\n};\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","export enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n/**\n * @category entry building\n */\nexport enum EntryTag {\n  Account = 10,\n  Oracle = 20,\n  // OracleQuery = 21,\n  Name = 30,\n  // NameCommitment = 31,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  Channel = 58,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaMetaTxAuthData = 810,\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport abiVersion from './field-types/abi-version';\nimport address, { idTagToEncoding } from './field-types/address';\nimport array from './field-types/array';\nimport coinAmount from './field-types/coin-amount';\nimport ctVersion from './field-types/ct-version';\nimport encoded from './field-types/encoded';\nimport entry from './field-types/entry';\nimport enumeration from './field-types/enumeration';\nimport fee from './field-types/fee';\nimport gasLimit from './field-types/gas-limit';\nimport gasPrice from './field-types/gas-price';\nimport name from './field-types/name';\nimport nameFee from './field-types/name-fee';\nimport nameId from './field-types/name-id';\nimport nonce from './field-types/nonce';\nimport pointers from './field-types/pointers';\nimport queryFee from './field-types/query-fee';\nimport raw from './field-types/raw';\nimport shortUInt from './field-types/short-u-int';\nimport shortUIntConst from './field-types/short-u-int-const';\nimport string from './field-types/string';\nimport transaction from './field-types/transaction';\nimport ttl from './field-types/ttl';\nimport uInt from './field-types/u-int';\nimport withDefault from './field-types/with-default';\nimport withFormatting from './field-types/with-formatting';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { EntryTag } from './entry/constants';\nimport { EntParams, EntUnpacked } from './entry/schema.generated';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface TransactionAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst transactionAny = transaction() as unknown as TransactionAny;\n\ninterface TransactionSignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst transactionSignedTx = transaction(Tag.SignedTx) as unknown as TransactionSignedTx;\n\ninterface EntryTreesPoi {\n  serialize: (\n    value: EntParams & { tag: EntryTag.TreesPoi } | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => EntUnpacked & { tag: EntryTag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(EntryTag.TreesPoi) as unknown as EntryTreesPoi;\n\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\n/**\n * Name ttl represented in number of blocks (Max value is 50000 blocks)\n */\nconst nameTtl = withFormatting(\n  (value) => {\n    const NAME_TTL = 180000;\n    value ??= NAME_TTL;\n    if (value >= 1 && value <= NAME_TTL) return value;\n    throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n  },\n  shortUInt,\n);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: transactionAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: withDefault(0, uInt),\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers(false),\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(2),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers(true),\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: transactionSignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: transactionSignedTx,\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types/interface';\nimport {\n  ArgumentError, DecodeError, SchemaNotFoundError, InternalError,\n} from '../../utils/errors';\nimport {\n  Encoding, Encoded, encode, decode,\n} from '../../utils/encoder';\nimport { readInt } from './helpers';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null) throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) => (\n    field.serialize(params[key], { ...params, ...extraParams }, params)\n  ));\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name, field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { EntryTag } from '../entry/constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\nexport default function genMapField<E extends Encoding, T extends EntryTag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { packEntry: typeof packEntryType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { packEntry }) {\n      return decode(packEntry({\n        tag: EntryTag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: EntryTag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(packEntry({ ...value as any, tag })),\n        } as const)),\n      }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      const { values } = unpackEntry(encode(buffer, Encoding.Bytearray), EntryTag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackEntry(encode(value, Encoding.Bytearray), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { EntryTag } from '../entry/constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackEntry } from '../entry';\nimport type { EntUnpacked } from '../entry/schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends EntryTag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackEntry: typeof unpackEntry;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpEnt - Implementation of unpackEntry use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpEnt: typeof unpackEntry) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackEntry = unpEnt;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): EntUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackEntry(encode(d, Encoding.Bytearray), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, EntUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackEntry(encode(v, Encoding.Bytearray), this.#tag),\n      ])) as Record<Encoded.Generic<E>, EntUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n    serialize: (value: MPTree<E, T>) => MPTreeBinary;\n    deserialize: (value: MPTreeBinary, o: { unpackEntry: typeof unpackEntry }) => MPTree<E, T>;\n  } {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackEntry }) {\n      return new MPTree(value, encoding, tag, unpackEntry);\n    },\n  };\n}\n","import { EntryTag } from '../entry/constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry';\n\ntype TagWrapping = EntryTag.AccountsMtree | EntryTag.CallsMtree | EntryTag.ChannelsMtree\n| EntryTag.ContractsMtree | EntryTag.NameserviceMtree | EntryTag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(EntParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { packEntry: typeof packEntryType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `(EntUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { packEntry }) {\n      return decode(packEntry({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      return unpackEntry<TagWrapping>(encode(buffer, Encoding.Bytearray), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import SchemaTypes from '../SchemaTypes';\nimport abiVersion from '../field-types/abi-version';\nimport address, { idTagToEncoding } from '../field-types/address';\nimport array from '../field-types/array';\nimport boolean from '../field-types/boolean';\nimport coinAmount from '../field-types/coin-amount';\nimport ctVersion from '../field-types/ct-version';\nimport encoded from '../field-types/encoded';\nimport entry from '../field-types/entry';\nimport enumeration from '../field-types/enumeration';\nimport gasLimit from '../field-types/gas-limit';\nimport gasPrice from '../field-types/gas-price';\nimport map from '../field-types/map';\nimport mptree from '../field-types/mptree';\nimport pointers from '../field-types/pointers';\nimport raw from '../field-types/raw';\nimport shortUInt from '../field-types/short-u-int';\nimport shortUIntConst from '../field-types/short-u-int-const';\nimport string from '../field-types/string';\nimport uInt from '../field-types/u-int';\nimport wrapped from '../field-types/wrapped';\nimport {\n  Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { EntryTag, CallReturnType } from './constants';\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<EntParams & { tag: EntryTag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<EntUnpacked & { tag: EntryTag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(EntryTag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, EntParams & { tag: EntryTag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, EntUnpacked & { tag: EntryTag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, EntryTag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, EntParams & { tag: EntryTag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.AccountAddress,\n  EntUnpacked & { tag: EntryTag.Account }\n  >;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, EntryTag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, EntParams & { tag: EntryTag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.Bytearray,\n  EntUnpacked & { tag: EntryTag.ContractCall }\n  >;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, EntryTag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, EntParams & { tag: EntryTag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, EntUnpacked & { tag: EntryTag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, EntryTag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, EntParams & { tag: EntryTag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, EntUnpacked & { tag: EntryTag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, EntryTag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, EntParams & { tag: EntryTag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<\n  Encoded.OracleAddress,\n  EntUnpacked & { tag: EntryTag.Oracle }\n  >;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, EntryTag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(EntryTag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  /**\n   * a suggestion as to how long any clients should cache this information\n   */\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(EntryTag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(EntryTag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(EntryTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(EntryTag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(EntryTag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, EntryTag.Account)),\n  calls: array(mptree(Encoding.Bytearray, EntryTag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, EntryTag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, EntryTag.Contract)),\n  ns: array(mptree(Encoding.Name, EntryTag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, EntryTag.Oracle)),\n}, {\n  tag: shortUIntConst(EntryTag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(EntryTag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(EntryTag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(EntryTag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(EntryTag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(EntryTag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(EntryTag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(EntryTag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(EntryTag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(EntryTag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(EntryTag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(EntryTag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(EntryTag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(EntryTag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(EntryTag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(EntryTag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type EntParams = Schemas['TxParams'];\nexport type EntUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { schemas } from './schema';\nimport { EntryTag } from './constants';\nimport { EntParams, EntUnpacked } from './schema.generated';\n\nconst encodingTag = [\n  [EntryTag.CallsMtree, Encoding.CallStateTree],\n  [EntryTag.StateTrees, Encoding.StateTrees],\n  [EntryTag.TreesPoi, Encoding.Poi],\n] as const;\n\nexport function packEntry(params: EntParams & { tag: EntryTag.CallsMtree }): Encoded.CallStateTree;\nexport function packEntry(params: EntParams & { tag: EntryTag.StateTrees }): Encoded.StateTrees;\nexport function packEntry(params: EntParams & { tag: EntryTag.TreesPoi }): Encoded.Poi;\n/**\n * Pack entry\n * @category entry builder\n * @param params - Params of entry\n * @returns Encoded entry\n */\nexport function packEntry(params: EntParams): Encoded.Any;\nexport function packEntry(params: EntParams): Encoded.Any {\n  const encoding = encodingTag.find(([tag]) => tag === params.tag)?.[1] ?? Encoding.Bytearray;\n  return packRecord(schemas, EntryTag, params, { packEntry }, encoding);\n}\n\nexport function unpackEntry(\n  encoded: Encoded.CallStateTree,\n): EntUnpacked & { tag: EntryTag.CallsMtree };\nexport function unpackEntry(\n  encoded: Encoded.StateTrees,\n): EntUnpacked & { tag: EntryTag.StateTrees };\nexport function unpackEntry(\n  encoded: Encoded.Poi,\n): EntUnpacked & { tag: EntryTag.TreesPoi };\n/**\n * Unpack entry\n * @category entry builder\n * @param encoded - Encoded entry\n * @param expectedTag - Expected entry type\n * @returns Params of entry\n */\nexport function unpackEntry<T extends EntryTag>(\n  encoded: Encoded.Any,\n  expectedTag?: T,\n): EntUnpacked & { tag: T };\nexport function unpackEntry(\n  encoded: Encoded.Any,\n  expectedTag?: EntryTag,\n): EntUnpacked {\n  expectedTag ??= encodingTag.find(([, enc]) => encoded.startsWith(enc))?.[0];\n  return unpackRecord(schemas, EntryTag, encoded, expectedTag, { unpackEntry }) as any;\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { Field } from './field-types/interface';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId } from './helpers';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common';\nimport { ArgumentError } from '../../utils/errors';\nimport { packEntry, unpackEntry } from './entry';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction {\n  return packRecord(txSchema, Tag, params, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n    buildTx,\n    rebuildTx: (overrideParams: any) => buildTx(\n      { ...params, ...overrideParams },\n    ),\n    packEntry,\n  }, Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, { unpackTx, unpackEntry }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","function verCmp(a: string, b: string): number {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const aComponents = getComponents(a);\n  const bComponents = getComponents(b);\n\n  const base = Math.max(...aComponents, ...bComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  return componentsToNumber(aComponents) - componentsToNumber(bComponents);\n}\n\nexport default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion?: string,\n): boolean {\n  return verCmp(version, geVersion) >= 0\n    && (ltVersion == null || verCmp(version, ltVersion) < 0);\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport {\n  AdditionalPolicyConfig, FullOperationResponse, OperationOptions,\n  createSerializer as createSerializerOrig,\n} from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { InternalError, UnexpectedTsError, UnsupportedVersionError } from './errors';\n\nconst bigIntPrefix = '_sdk-big-int-';\n\nexport const createSerializer = (\n  ...args: Parameters<typeof createSerializerOrig>\n): ReturnType<typeof createSerializerOrig> => {\n  const serializer = createSerializerOrig(...args);\n  const { serialize, deserialize } = serializer;\n  return Object.assign(serializer, {\n    serialize(\n      ...[mapper, object, objectName, options]: Parameters<typeof serialize>\n    ): ReturnType<typeof serialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || object == null) {\n        return serialize.call(this, mapper, object, objectName, options);\n      }\n      if (typeof object !== 'bigint') {\n        objectName ??= mapper.serializedName;\n        throw new Error(`${objectName} with value ${object} must be of type bigint.`);\n      }\n      return object.toString();\n    },\n\n    deserialize(\n      ...[mapper, responseBody, objectName, options]: Parameters<typeof deserialize>\n    ): ReturnType<typeof deserialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || responseBody == null) {\n        if (typeof responseBody === 'string' && responseBody.startsWith(bigIntPrefix)) {\n          console.warn(`AeSdk internal error: BigInt value ${responseBody} handled incorrectly`);\n          responseBody = +responseBody.replace(bigIntPrefix, '');\n        }\n        return deserialize.call(this, mapper, responseBody, objectName, options);\n      }\n      if (typeof responseBody === 'number' && responseBody > Number.MAX_SAFE_INTEGER) {\n        throw new InternalError(`Number ${responseBody} is not accurate to be converted to BigInt`);\n      }\n      return BigInt(responseBody.toString().replace(bigIntPrefix, ''));\n    },\n  });\n};\n\n// 16 === Number.MAX_SAFE_INTEGER.toString().length\nconst bigIntPropertyRe = /(\"\\w+\":\\s*)(\\d{16,})(\\s*[,}])/m;\nconst bigIntArrayItemRe = /([[,]\\s*)(\\d{16,})\\b/m;\nexport const parseBigIntPolicy: PipelinePolicy = {\n  name: 'parse-big-int',\n  async sendRequest(request, next) {\n    const response = await next(request);\n    if (response.bodyAsText == null) return response;\n    // TODO: replace with https://caniuse.com/mdn-javascript_builtins_json_parse_reviver_parameter_context_argument when it gets support in FF and Safari\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntPropertyRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntPropertyRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, name, value, end] = match;\n        return [\n          name,\n          +value > Number.MAX_SAFE_INTEGER ? `\"${bigIntPrefix}${value}\"` : value,\n          end,\n        ].join('');\n      },\n    );\n    // FIXME: may break strings inside json\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntArrayItemRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntArrayItemRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, prefix, value] = match;\n        return `${prefix}\"${bigIntPrefix}${value}\"`;\n      },\n    );\n    return response;\n  },\n};\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(key, req.catch(() => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (\n          !(error instanceof RestError)\n          || error.request == null\n          || error.message.startsWith('Error ')\n        ) throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        const body = (error.response as FullOperationResponse).parsedBody;\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  versionCb: (options: OperationOptions) => Promise<string>,\n  geVersion: string,\n  ltVersion: string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'version-check',\n    async sendRequest(request, next) {\n      if (request.headers.has('__version-check')) {\n        request.headers.delete('__version-check');\n        return next(request);\n      }\n      const options = { requestOptions: { customHeaders: { '__version-check': 'true' } } };\n      const args = [await versionCb(options), geVersion, ltVersion] as const;\n      if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n      return next(request);\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      errorCode: {\n        serializedName: \"error_code\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: -1,\n        },\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedTx: {\n        serializedName: \"encoded_tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedKey: {\n        serializedName: \"encoded_key\",\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const AuctionEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuctionEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      startedAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"started_at\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      endsAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ends_at\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      highestBidder: {\n        serializedName: \"highest_bidder\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBid: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"highest_bid\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      soloRound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockedUntil: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Currency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunit: {\n        serializedName: \"subunit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunitsPerUnit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"subunits_per_unit\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fiatConverstionUrl: {\n        serializedName: \"fiat_converstion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fiatConversionUrl: {\n        serializedName: \"fiat_conversion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      logo: {\n        serializedName: \"logo\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\",\n        },\n      },\n      primaryColour: {\n        serializedName: \"primary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      secondaryColour: {\n        serializedName: \"secondary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkName: {\n        serializedName: \"network_name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Image: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMinimum: 0,\n            },\n            type: {\n              // @ts-expect-error we are extending autorest with BigInt support\n              name: \"BigInt\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GasPricesItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GasPricesItem\",\n    modelProperties: {\n      minGasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"min_gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      utilization: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"utilization\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      minutes: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"minutes\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      difficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      hashrate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      uptime: {\n        serializedName: \"uptime\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      effectiveAtHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SyncStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SyncStatus\",\n    modelProperties: {\n      progress: {\n        serializedName: \"progress\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      speed: {\n        serializedName: \"speed\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      estimate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"estimate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      firstSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lastSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"verified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      unverified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"unverified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"accounts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contracts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contracts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractOracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      locked: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleQueries: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pendingRewards: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      total: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"total\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const nameHash: OperationURLParameter = {\n  parameterPath: \"nameHash\",\n  mapper: {\n    serializedName: \"name_hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n","import { createSerializer } from \"../../utils/autorest\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAuctionEntryByNameOptionalParams,\n  GetAuctionEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetCurrencyOptionalParams,\n  GetCurrencyResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetNameEntryByNameHashOptionalParams,\n  GetNameEntryByNameHashResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetRecentGasPricesOptionalParams,\n  GetRecentGasPricesResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n  GetSyncStatusOptionalParams,\n  GetSyncStatusResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get auction entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getAuctionEntryByName(\n    name: string,\n    options?: GetAuctionEntryByNameOptionalParams,\n  ): Promise<GetAuctionEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getAuctionEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get the currency metadata of a node\n   * @param options The options parameters.\n   */\n  getCurrency(\n    options?: GetCurrencyOptionalParams,\n  ): Promise<GetCurrencyResponse> {\n    return this.sendOperationRequest({ options }, getCurrencyOperationSpec);\n  }\n\n  /**\n   * Dry-run unsigned transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx\n   * and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param nameHash The name hash of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByNameHash(\n    nameHash: string,\n    options?: GetNameEntryByNameHashOptionalParams,\n  ): Promise<GetNameEntryByNameHashResponse> {\n    return this.sendOperationRequest(\n      { nameHash, options },\n      getNameEntryByNameHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get minimum gas prices in recent blocks\n   * @param options The options parameters.\n   */\n  getRecentGasPrices(\n    options?: GetRecentGasPricesOptionalParams,\n  ): Promise<GetRecentGasPricesResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getRecentGasPricesOperationSpec,\n    );\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n\n  /**\n   * Get the sync status of a node\n   * @param options The options parameters.\n   */\n  getSyncStatus(\n    options?: GetSyncStatusOptionalParams,\n  ): Promise<GetSyncStatusResponse> {\n    return this.sendOperationRequest({ options }, getSyncStatusOperationSpec);\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAuctionEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/auctions/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AuctionEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrencyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/currency\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Currency,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getNameEntryByNameHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/hash/{name_hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.nameHash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecentGasPricesOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/recent-gas-prices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"GasPricesItem\" } },\n        },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSyncStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/sync-status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SyncStatus,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport { OperationOptions } from '@azure/core-client';\nimport { userAgentPolicyName, setClientRequestIdPolicyName } from '@azure/core-rest-pipeline';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  parseBigIntPolicy, genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends NodeApi {\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    const getVersion = async (opts: OperationOptions): Promise<string> => (\n      (await this._getCachedStatus(opts)).nodeVersion\n    );\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('node', getVersion, '7.1.0', '8.0.0')],\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => [\n          ' ', body.reason, body.errorCode == null ? '' : ` (${body.errorCode})`,\n        ].join('')),\n      ],\n      ...options,\n    });\n    this.pipeline.addPolicy(parseBigIntPolicy, { phase: 'Deserialize' });\n    this.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n    // TODO: use instead our retry policy\n    this.pipeline.removePolicy({ name: 'defaultRetryPolicy' });\n  }\n\n  #cachedStatusPromise?: ReturnType<NodeApi['getStatus']>;\n\n  async _getCachedStatus(options?: OperationOptions): ReturnType<NodeApi['getStatus']> {\n    if (this.#cachedStatusPromise != null) return this.#cachedStatusPromise;\n    return this.getStatus(options);\n  }\n\n  override async getStatus(\n    ...args: Parameters<NodeApi['getStatus']>\n  ): ReturnType<NodeApi['getStatus']> {\n    const promise = super.getStatus(...args);\n    promise.then(() => { this.#cachedStatusPromise = promise; }, () => {});\n    return promise;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    return (await this._getCachedStatus()).networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signDelegation(\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import nacl from 'tweetnacl';\nimport AccountBase from './Base';\nimport { hash, messageToHash, messagePrefixLength } from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag } from '../tx/builder/constants';\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  readonly #secretKeyDecoded: Uint8Array;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(public readonly secretKey: Encoded.AccountSecretKey) {\n    super();\n    const keyPair = nacl.sign.keyPair.fromSeed(decode(secretKey));\n    this.#secretKeyDecoded = keyPair.secretKey;\n    this.address = encode(keyPair.publicKey, Encoding.AccountAddress);\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    const secretKey = encode(nacl.randomBytes(32), Encoding.AccountSecretKey);\n    return new AccountMemory(secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return nacl.sign.detached(Buffer.from(data), this.#secretKeyDecoded);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength, new Uint8Array([1]), Buffer.from(networkId), decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, isAddressValid, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, Encoding, decode } from '../utils/encoder';\nimport Node from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: Account & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const pipeline = nodeNotCached.pipeline.clone();\n  pipeline.removePolicy({ name: 'parse-big-int' });\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline,\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  async (tx, { node }) => {\n    if (tx.tag !== Tag.SpendTx || isAddressValid(tx.recipientId, Encoding.Name)) return [];\n    const recipient = await node.getAccountByPubkey(tx.recipientId).catch((error) => {\n      if (!isAccountNotFoundError(error)) throw error;\n      return null;\n    });\n    if (recipient == null || recipient.payable === true) return [];\n    return [{\n      message: 'Recipient account is not payable',\n      key: 'RecipientAccountNotPayable',\n      checkedKeys: ['recipientId'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError } from './utils/other';\nimport { TransactionError } from './utils/errors';\nimport Node from './Node';\nimport { SignedTx } from './apis/node';\nimport { Encoded } from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\nimport { poll, waitForTxConfirm } from './chain';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction({ tx }, {\n      requestOptions: {\n        customHeaders: {\n          // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n          '__retry-code': '400',\n          ...__queue != null ? { __queue } : {},\n        },\n      },\n    });\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<SignedTx> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { Tag, AensName, DRY_RUN_ACCOUNT } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun,\n} from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { Optional, isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends NodeContractCallObject {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await Contract.initialize({ ...aeSdk.getContext(), sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        if (/Expected \\d+ arguments, got \\d+/.test(message)) {\n          throw new ContractError(`ACI doesn't match called contract. Error provided by node: ${message}`);\n        }\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Optional<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, event.topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, event.topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      if (isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { render } from \"./Contracts.vue?vue&type=template&id=15d24e39\"\nimport script from \"./Contracts.vue?vue&type=script&lang=js\"\nexport * from \"./Contracts.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <GenerateSpendTx />\n\n  <FieldAction\n    title=\"Sign inner transaction\"\n    arg-title=\"Transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Sign\"\n    :action-handler=\"signInnerTx\"\n    result-title=\"Signed inner transaction\"\n  />\n\n  <FieldAction\n    title=\"Pay for transaction\"\n    arg-title=\"Signed inner transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Pay for transaction\"\n    :action-handler=\"payForTx\"\n    result-title=\"Result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './components/FieldAction.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport GenerateSpendTx from './components/GenerateSpendTx.vue';\n\nexport default {\n  components: {\n    FieldAction, SpendCoins, MessageSign, GenerateSpendTx,\n  },\n  computed: mapState(['aeSdk']),\n  methods: {\n    signInnerTx(txToPayFor) {\n      return this.aeSdk.signTransaction(txToPayFor, { innerTx: true });\n    },\n    payForTx(innerTx) {\n      return this.aeSdk.payForTransaction(innerTx);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>Generate spend transaction</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <div>\n      <div>Increment nonce by 1</div>\n      <div>\n        <input\n          type=\"checkbox\"\n          v-model=\"incrementNonce\"\n        >\n        (only if you want to pay for this transaction yourself)\n      </div>\n    </div>\n    <button @click=\"() => { generatePromise = generate(); }\">\n      Generate\n    </button>\n    <div v-if=\"generatePromise\">\n      <div>Spend transaction</div>\n      <Value :value=\"generatePromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport {\n  encode, Encoding, Tag, unpackTx, buildTx,\n} from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    incrementNonce: true,\n    generatePromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async generate() {\n      let spendTx = await this.aeSdk.buildTx({\n        tag: Tag.SpendTx,\n        senderId: this.aeSdk.address,\n        recipientId: this.spendTo,\n        amount: this.spendAmount,\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n      if (this.incrementNonce) {\n        const spendTxParams = unpackTx(spendTx);\n        spendTxParams.nonce += 1;\n        spendTx = buildTx(spendTxParams);\n      }\n      return spendTx;\n    },\n  },\n};\n</script>\n","import { render } from \"./GenerateSpendTx.vue?vue&type=template&id=7508f59e\"\nimport script from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\nexport * from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./PayForTx.vue?vue&type=template&id=6b4a1008\"\nimport script from \"./PayForTx.vue?vue&type=script&lang=js\"\nexport * from \"./PayForTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Domain</h2>\n  <div class=\"group\">\n    <div>\n      <div>Name</div>\n      <div>\n        <input\n          :value=\"domain.name\"\n          @input=\"domain.name = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Version</div>\n      <div>\n        <input\n          :value=\"domain.version\"\n          @input=\"domain.version = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Network id</div>\n      <div>\n        <input\n          :value=\"domain.networkId\"\n          @input=\"domain.networkId = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Contract address</div>\n      <div>\n        <input\n          :value=\"domain.contractAddress\"\n          @input=\"domain.contractAddress = $event.target.value || null\"\n        >\n      </div>\n    </div>\n  </div>\n\n  <h2>Data</h2>\n  <div class=\"group\">\n    <div>\n      <div>Type</div>\n      <div>\n        <textarea\n          v-model=\"aci\"\n          placeholder=\"Type as ACI JSON\"\n        />\n      </div>\n    </div>\n    <div>\n      <div>Data</div>\n      <div>\n        <textarea v-model=\"data\" />\n      </div>\n    </div>\n    <div>\n      <div>Encoded data</div>\n      <Value :value=\"toPromise(() => dataEncoded)\" />\n    </div>\n    <div>\n      <div>Hash</div>\n      <Value :value=\"toPromise(() => hash.toString('base64'))\" />\n    </div>\n  </div>\n\n  <FieldAction\n    title=\"Sign\"\n    action-title=\"Sign\"\n    :action-handler=\"signTypedData\"\n    result-title=\"Signature\"\n  />\n\n  <h2>Verify</h2>\n  <div class=\"group\">\n    <div>\n      <div>Signature</div>\n      <div>\n        <input\n          v-model=\"verifySignature\"\n          placeholder=\"sg-encoded\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input\n          v-model=\"verifyAddress\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { verifyPromise = verifyTypedData(); }\">\n      Verify\n    </button>\n    <div v-if=\"verifyPromise\">\n      <div>Is signature correct</div>\n      <Value :value=\"verifyPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { hashTypedData, verify, decode } from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nexport default {\n  components: {\n    Value, FieldAction,\n  },\n  data: () => ({\n    domain: {\n      name: 'Simple æpp',\n      version: 2,\n      networkId: 'ae_uat',\n      contractAddress: null,\n    },\n    aci: Value.methods.valueToString({\n      record: [\n        { name: 'operation', type: 'string' },\n        { name: 'parameter', type: 'int' },\n      ],\n    }),\n    data: Value.methods.valueToString({\n      operation: 'test',\n      parameter: 42,\n    }),\n    verifySignature: null,\n    verifyAddress: null,\n    verifyPromise: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    dataParsed() {\n      return JSON.parse(this.data);\n    },\n    aciParsed() {\n      return JSON.parse(this.aci);\n    },\n    dataEncoded() {\n      const dataType = new TypeResolver().resolveType(this.aciParsed);\n      return new ContractByteArrayEncoder().encodeWithType(this.dataParsed, dataType);\n    },\n    hash() {\n      return hashTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n  },\n  methods: {\n    async toPromise(getter) {\n      return getter();\n    },\n    signTypedData() {\n      return this.aeSdk.signTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n    async verifyTypedData() {\n      return verify(this.hash, decode(this.verifySignature), this.verifyAddress);\n    },\n  },\n};\n</script>\n","import { render } from \"./TypedData.vue?vue&type=template&id=6ad6adcf\"\nimport script from \"./TypedData.vue?vue&type=script&lang=js\"\nexport * from \"./TypedData.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign delegation to contract</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract address</div>\n      <div><input v-model=\"contractAddress\"></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensPreclaim\">\n        AENS preclaim\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.Oracle\">\n        Oracle\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensName\">\n        AENS name\n      </label>\n      <div><input v-model=\"name\"></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensWildcard\">\n        All AENS names\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.OracleResponse\">\n        Response to oracle query\n      </label>\n      <div><input v-model=\"oracleQueryId\"></div>\n    </div>\n    <button @click=\"() => { signPromise = sign(); }\">\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signature</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { DelegationTag, packDelegation } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    DelegationTag,\n    type: DelegationTag.AensPreclaim,\n    contractAddress: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    name: 'test.chain',\n    oracleQueryId: 'oq_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    signPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    getDelegationParams() {\n      switch (this.type) {\n        case DelegationTag.AensPreclaim:\n          return { tag: DelegationTag.AensPreclaim };\n        case DelegationTag.Oracle:\n          return { tag: DelegationTag.Oracle };\n        case DelegationTag.AensName:\n          return { tag: DelegationTag.AensName, nameId: this.name };\n        case DelegationTag.AensWildcard:\n          return { tag: DelegationTag.AensWildcard };\n        case DelegationTag.OracleResponse:\n          return { tag: DelegationTag.OracleResponse, queryId: this.oracleQueryId };\n        default:\n          throw new Error(`Unknown delegation signature type: ${DelegationTag[this.type]}`);\n      }\n    },\n    sign() {\n      const delegation = packDelegation({\n        ...this.getDelegationParams(),\n        contractAddress: this.contractAddress,\n        accountAddress: this.aeSdk.address,\n      });\n      return this.aeSdk.signDelegation(delegation);\n    },\n  },\n};\n</script>\n","import SchemaTypes from '../SchemaTypes';\nimport address from '../field-types/address';\nimport nameId from '../field-types/name-id';\nimport shortUIntConst from '../field-types/short-u-int-const';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  /**\n   * Delegation of all AENS names to a contract\n   */\n  AensWildcard = 1,\n  /**\n   * Delegation of an AENS name to a contract\n   */\n  AensName = 2,\n  /**\n   * Delegation of AENS preclaim to a contract\n   */\n  AensPreclaim = 3,\n  /**\n   * Delegation of oracle operations to a contract\n   */\n  Oracle = 4,\n  /**\n   * Delegation of oracle query to a contract\n   */\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\n/**\n * Oracle query ID to reply by a contract\n */\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * Address of a contract to delegate permissions to\n */\nconst contractAddress = address(Encoding.ContractAddress);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(DelegationTag.AensWildcard),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress,\n}, {\n  tag: shortUIntConst(DelegationTag.AensName),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  /**\n   * AENS name to manage by a contract\n   */\n  nameId,\n  contractAddress,\n}, {\n  tag: shortUIntConst(DelegationTag.AensPreclaim),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress,\n}, {\n  tag: shortUIntConst(DelegationTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress,\n}, {\n  tag: shortUIntConst(DelegationTag.OracleResponse),\n  version: shortUIntConst(1, true),\n  queryId: queryIdField,\n  contractAddress,\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { DelegationTag, schemas } from './schema';\nimport { DlgParams, DlgUnpacked } from './schema.generated';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import { render } from \"./DelegationSignature.vue?vue&type=template&id=20224ff6\"\nimport script from \"./DelegationSignature.vue?vue&type=script&lang=js\"\nexport * from \"./DelegationSignature.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Generate a JWT</h2>\n  <div class=\"group\">\n    <div>\n      <div>Payload as JSON</div>\n      <div>\n        <input\n          :value=\"payloadAsJson\"\n          @input=\"payloadAsJson = $event.target.value || '{}'\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Include \"sub_jwk\"</div>\n      <div>\n        <input\n          type=\"checkbox\"\n          v-model=\"includeSubJwk\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { signPromise = sign(); }\">\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signed JWT</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n\n  <h2>Unpack and verify JWT</h2>\n  <div class=\"group\">\n    <div>\n      <div>JWT to unpack</div>\n      <div>\n        <input\n          :value=\"jwt\"\n          @input=\"jwt = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input\n          :value=\"address\"\n          @input=\"address = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { unpackPromise = unpack(); }\">\n      Unpack\n    </button>\n    <div v-if=\"unpackPromise\">\n      <div>Unpack result</div>\n      <Value :value=\"unpackPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { unpackJwt, signJwt } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  computed: mapState(['aeSdk']),\n  data: () => ({\n    payloadAsJson: '{ \"test\": true }',\n    includeSubJwk: true,\n    signPromise: null,\n    jwt: 'eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJzdWJfandrIjp7ImNydiI6IkVkMjU1MTkiLCJrdHkiOiJPS1AiLCJ4IjoiaEF5WFM1Y1dSM1pGUzZFWjJFN2NUV0JZcU43SksyN2NWNHF5MHd0TVFnQSJ9LCJ0ZXN0IjoiZGF0YSJ9.u9El4b2O2LRhvTTW3g46vk1hx0xXWPkJEaEeEy-rLzLr2yuQlNc7qIdcr_z06BgHx5jyYv2CpUL3hqLpc0RzBA',\n    address: null,\n    unpackPromise: null,\n  }),\n  methods: {\n    async sign() {\n      const payload = JSON.parse(this.payloadAsJson);\n      if (!this.includeSubJwk) payload.sub_jwk = undefined;\n      // TODO: expose account used in aepp-wallet connection\n      return signJwt(payload, this.aeSdk._resolveAccount(this.aeSdk.address));\n    },\n    async unpack() {\n      return unpackJwt(this.jwt, this.address);\n    },\n  },\n};\n</script>\n","import canonicalize from 'canonicalize';\nimport AccountBase from '../account/Base';\nimport {\n  Encoded, Encoding, decode, encode,\n} from './encoder';\nimport { verify } from './crypto';\nimport { ArgumentError, InvalidSignatureError } from './errors';\n\n// TODO: use Buffer.from(data, 'base64url') after solving https://github.com/feross/buffer/issues/309\nconst toBase64Url = (data: Buffer | Uint8Array | string): string => Buffer\n  .from(data)\n  .toString('base64')\n  .replaceAll('/', '_')\n  .replaceAll('+', '-')\n  .replace(/=+$/, '');\n\nconst fromBase64Url = (data: string): Buffer => Buffer\n  .from(data.replaceAll('_', '/').replaceAll('-', '+'), 'base64');\n\nconst objectToBase64Url = (data: any): string => toBase64Url(canonicalize(data) ?? '');\n\nconst header = 'eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9'; // objectToBase64Url({ alg: 'EdDSA', typ: 'JWT' })\n\n/**\n * JWT including specific header\n * @category JWT\n */\nexport type Jwt = `${typeof header}.${string}.${string}`;\n\n/**\n * Generate a signed JWT\n * Provide `\"sub_jwk\": undefined` in payload to omit signer public key added by default.\n * @param originalPayload - Payload to sign\n * @param account - Account to sign by\n * @category JWT\n */\nexport async function signJwt(originalPayload: any, account: AccountBase): Promise<Jwt> {\n  const payload = { ...originalPayload };\n  if (!('sub_jwk' in payload)) {\n    payload.sub_jwk = {\n      kty: 'OKP',\n      crv: 'Ed25519',\n      x: toBase64Url(decode(account.address)),\n    };\n  }\n  if (payload.sub_jwk === undefined) delete payload.sub_jwk;\n  const body = `${header}.${objectToBase64Url(payload)}` as const;\n  const signature = await account.sign(body);\n  return `${body}.${toBase64Url(signature)}`;\n}\n\n/**\n * Unpack JWT. It will check signature if address or \"sub_jwk\" provided.\n * @param jwt - JWT to unpack\n * @param address - Address to check signature\n * @category JWT\n */\nexport function unpackJwt(jwt: Jwt, address?: Encoded.AccountAddress): {\n  /**\n   * JWT payload as object\n   */\n  payload: any;\n  /**\n   * Undefined returned in case signature is not checked\n   */\n  signer: Encoded.AccountAddress | undefined;\n} {\n  const components = jwt.split('.');\n  if (components.length !== 3) throw new ArgumentError('JWT components count', 3, components.length);\n  const [h, payloadEncoded, signature] = components;\n  if (h !== header) throw new ArgumentError('JWT header', header, h);\n  const payload = JSON.parse(fromBase64Url(payloadEncoded).toString());\n  const jwk = payload.sub_jwk ?? {};\n  const signer = jwk.x == null || jwk.kty !== 'OKP' || jwk.crv !== 'Ed25519'\n    ? address\n    : encode(fromBase64Url(jwk.x), Encoding.AccountAddress);\n  if (address != null && signer !== address) {\n    throw new ArgumentError('address', `${signer} (\"sub_jwk\")`, address);\n  }\n  if (\n    signer != null\n    && !verify(Buffer.from(`${h}.${payloadEncoded}`), fromBase64Url(signature), signer)\n  ) {\n    throw new InvalidSignatureError(`JWT is not signed by ${signer}`);\n  }\n  return { payload, signer };\n}\n\n/**\n * Check is string a JWT or not. Use to validate the user input.\n * @param maybeJwt - A string to check\n * @returns True if argument is a JWT\n * @category JWT\n */\nexport function isJwt(maybeJwt: string): maybeJwt is Jwt {\n  try {\n    unpackJwt(maybeJwt as Jwt);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Throws an error if argument is not JWT. Use to ensure that a value is JWT.\n * @param maybeJwt - A string to check\n * @category JWT\n */\nexport function ensureJwt(maybeJwt: string): asserts maybeJwt is Jwt {\n  unpackJwt(maybeJwt as Jwt);\n}\n\n/**\n * Check is JWT signed by address from arguments or \"sub_jwk\"\n * @param jwt - JWT to check\n * @param address - Address to check signature\n * @category JWT\n */\nexport function verifyJwt(jwt: Jwt, address?: Encoded.AccountAddress): boolean {\n  try {\n    const { signer } = unpackJwt(jwt, address);\n    return signer != null;\n  } catch (error) {\n    return false;\n  }\n}\n","import { render } from \"./Jwt.vue?vue&type=template&id=0bc0df1e\"\nimport script from \"./Jwt.vue?vue&type=script&lang=js\"\nexport * from \"./Jwt.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=1579aaef\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import BigNumber from 'bignumber.js';\nimport { getBalance, resolveName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\n\n// TODO: name verify should not overlap with transaction verify\ntype ResolveNameOptions = Omit<Parameters<typeof resolveName>[2], 'onNode' | 'verify'>;\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount' | 'onNode'>\n& ResolveNameOptions & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount' | 'onNode'>\n& ResolveNameOptions & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { getAccount } from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport CompilerBase from './compiler/Base';\nimport { packEntry } from '../tx/builder/entry';\nimport { EntryTag } from '../tx/builder/entry/constants';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit' | 'onNode'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onCompiler: CompilerBase;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(packEntry({\n      tag: EntryTag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport { sendTransaction } from './send-transaction';\nimport * as spendMethods from './spend';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...spendMethods,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    // TODO: remove `any` at the same time as AeSdk class\n    return buildTxAsync({ ...this.getContext() as any, ...options });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n    /**\n     * Make operation on specific account by providing address (to use account from sdk) or instance\n     * of AccountBase (like MemoryAccount)\n     */\n    onAccount: OnAccount;\n  } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { wrapWithProxy } from './utils/wrap-proxy';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      },\n    };\n  }\n}\n","import AccountBase from './Base';\nimport { METHODS } from '../aepp-wallet-communication/schema';\nimport { ArgumentError, UnsupportedProtocolError } from '../utils/errors';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../utils/encoder';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  async sign(dataRaw: string | Uint8Array): Promise<Uint8Array> {\n    const data = encode(Buffer.from(dataRaw), Encoding.Bytearray);\n    const { signature } = await this._rpcClient\n      .request(METHODS.unsafeSign, { onAccount: this.address, data });\n    return decode(signature);\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient\n      .request(METHODS.signMessage, { onAccount: this.address, message });\n    return Buffer.from(signature, 'hex');\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      name, version, contractAddress, networkId,\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signTypedData, {\n      onAccount: this.address,\n      domain: {\n        name, version, networkId, contractAddress,\n      },\n      aci,\n      data,\n    });\n    return signature;\n  }\n\n  override async signDelegation(delegation: Encoded.Bytearray): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(\n      METHODS.signDelegation,\n      { delegation, onAccount: this.address },\n    );\n    return signature;\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { SignedTx } from '../../apis/node';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.unsafeSign]: (\n    p: { data: Encoded.Bytearray; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<SignedTx> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (\n    p: {\n      delegation: Encoded.Bytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = (\n    new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>()\n  );\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport AccountRpc from './account/Rpc';\nimport { decode, Encoded } from './utils/encoder';\nimport {\n  Accounts, RPC_VERSION, WalletInfo, Network, WalletApi, AeppApi, Node as NodeRpc,\n} from './aepp-wallet-communication/rpc/types';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport { METHODS, SUBSCRIPTION_TYPES } from './aepp-wallet-communication/schema';\nimport {\n  AlreadyConnectedError,\n  NoWalletConnectedError,\n  UnsubscribedAccountError,\n  UnAuthorizedAccountError,\n  RpcConnectionError,\n} from './utils/errors';\nimport Node from './Node';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\n\n/**\n * RPC handler for AEPP side\n * Contain functionality for wallet interaction and connect it to sdk\n * @category aepp wallet communication\n */\nexport default class AeSdkAepp extends AeSdkBase {\n  name: string;\n\n  onAddressChange: (a: Accounts) => void;\n\n  onDisconnect: (p: any) => void;\n\n  onNetworkChange: (a: Network) => void;\n\n  rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  _accounts?: Accounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Aepp name\n   * @param options.onAddressChange - Call-back function for update address event\n   * @param options.onDisconnect - Call-back function for disconnect event\n   * @param options.onNetworkChange - Call-back function for update network event\n   */\n  constructor({\n    name,\n    onAddressChange = () => {},\n    onDisconnect = () => {},\n    onNetworkChange = () => {},\n    ...other\n  }: {\n    name: string;\n    onAddressChange?: (a: Accounts) => void;\n    onDisconnect?: (p: any) => void;\n    onNetworkChange?: (a: Network) => void;\n  } & ConstructorParameters<typeof AeSdkBase>[0]) {\n    super(other);\n    this.onAddressChange = onAddressChange;\n    this.onDisconnect = onDisconnect;\n    this.onNetworkChange = onNetworkChange;\n    this.name = name;\n  }\n\n  override _resolveAccount(account: OnAccount = this.addresses()[0]): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (!this.addresses().includes(address)) throw new UnAuthorizedAccountError(address);\n      this._ensureConnected();\n      account = new AccountRpc(this.rpcClient, address);\n    }\n    if (account == null) this._ensureAccountAccess();\n    return super._resolveAccount(account);\n  }\n\n  override addresses(): Encoded.AccountAddress[] {\n    if (this._accounts == null) return [];\n    const current = Object.keys(this._accounts.current)[0];\n    return [\n      ...current != null ? [current] : [], ...Object.keys(this._accounts.connected),\n    ] as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Connect to wallet\n   * @param connection - Wallet connection object\n   * @param options - Options\n   * @param options.connectNode - Request wallet to bind node\n   * @param options.name - Node name\n   */\n  async connectToWallet(\n    connection: BrowserConnection,\n    { connectNode = false, name = 'wallet-node' }: { connectNode?: boolean; name?: string } = {},\n  ): Promise<WalletInfo & { node?: NodeRpc }> {\n    if (this.rpcClient != null) throw new AlreadyConnectedError('You are already connected to wallet');\n    let disconnectParams: any;\n\n    const updateNetwork = (params: Network): void => {\n      if (connectNode) {\n        if (params.node?.url == null) throw new RpcConnectionError('Missing URLs of the Node');\n        this.pool.delete(name);\n        this.addNode(name, new Node(params.node.url), true);\n      }\n      this.onNetworkChange(params);\n    };\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        delete this.rpcClient;\n        delete this._accounts;\n        this.onDisconnect(disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: (params) => {\n          this._accounts = params;\n          this.onAddressChange(params);\n        },\n        [METHODS.updateNetwork]: updateNetwork,\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    const walletInfo = await client\n      .request(METHODS.connect, { name: this.name, version: RPC_VERSION, connectNode });\n    updateNetwork(walletInfo);\n    this.rpcClient = client;\n    return walletInfo;\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnectWallet(): void {\n    this._ensureConnected();\n    this.rpcClient.notify(METHODS.closeConnection, { reason: 'bye' });\n    this.rpcClient.connection.disconnect();\n  }\n\n  /**\n   * Ask addresses from wallet\n   * @returns Addresses from wallet\n   */\n  async askAddresses(): Promise<Encoded.AccountAddress[]> {\n    this._ensureConnected();\n    return this.rpcClient.request(METHODS.address, undefined);\n  }\n\n  /**\n   * Subscribe for addresses from wallet\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAddress(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<ReturnType<WalletApi[METHODS.subscribeAddress]>> {\n    this._ensureConnected();\n    const result = await this.rpcClient.request(METHODS.subscribeAddress, { type, value });\n    this._accounts = result.address;\n    return result;\n  }\n\n  _ensureConnected(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    if (this.rpcClient != null) return;\n    throw new NoWalletConnectedError('You are not connected to Wallet');\n  }\n\n  _ensureAccountAccess(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    this._ensureConnected();\n    if (this.addresses().length !== 0) return;\n    throw new UnsubscribedAccountError();\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import {\n  RestError, userAgentPolicyName, setClientRequestIdPolicyName,\n} from '@azure/core-rest-pipeline';\nimport { OperationOptions } from '@azure/core-client';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci, CompileResult } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion = false }: { ignoreVersion?: boolean } = {}) {\n    super();\n\n    let version: string | undefined;\n    const getVersion = async (opts: OperationOptions): Promise<string> => {\n      if (version != null) return version;\n      version = (await this.api.apiVersion(opts)).apiVersion;\n      return version;\n    };\n\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...ignoreVersion ? [] : [genVersionCheckPolicy('compiler', getVersion, '8.0.0', '9.0.0')],\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    this.api.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.api.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","import { shallowRef } from 'vue';\nimport { createStore } from 'vuex';\nimport { AeSdkAepp, Node, CompilerHttp } from '@aeternity/aepp-sdk';\n\nconst store = createStore({\n  state: {\n    address: undefined,\n    networkId: undefined,\n    // AeSdkAepp instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n    aeSdk: shallowRef(new AeSdkAepp({\n      name: 'Simple æpp',\n      nodes: [\n        { name: 'testnet', instance: new Node('https://testnet.aeternity.io') },\n        { name: 'mainnet', instance: new Node('https://mainnet.aeternity.io') },\n      ],\n      onCompiler: new CompilerHttp('https://v8.compiler.aepps.com'),\n      async onNetworkChange({ networkId }) {\n        const [{ name }] = (await this.getNodesInPool())\n          .filter((node) => node.nodeNetworkId === networkId);\n        this.selectNode(name);\n        store.commit('setNetworkId', networkId);\n      },\n      onAddressChange: ({ current }) => store.commit('setAddress', Object.keys(current)[0]),\n    })),\n  },\n  mutations: {\n    setAddress(state, address) {\n      state.address = address;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n  },\n});\n\nexport default store;\n","import { createApp } from 'vue';\nimport App from './App.vue';\nimport store from './store';\n\ncreateApp(App).use(store).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkaepp\"] = self[\"webpackChunkaepp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(39662); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","class","_createElementBlock","_Fragment","_hoisted_1","_createVNode","_component_Connect","_hoisted_2","href","_normalizeClass","active","_ctx","view","onClick","_cache","$event","_createBlock","_resolveDynamicComponent","key","_createCommentVNode","connectMethod","type","value","_createTextVNode","reverseIframeWalletUrl","walletConnected","args","$options","disconnect","disabled","walletConnecting","connect","cancelWalletDetection","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","walletName","BaseError","Error","constructor","message","super","this","name","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","TxTimedOutError","blocks","th","join","TypeError","UnsupportedPlatformError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","UnAuthorizedAccountError","onAccount","UnsubscribedAccountError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","InvalidSignatureError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","METHODS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","address","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","target","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","_classPrivateFieldSet","listener","_message$data$jsonrpc","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","connection","onDetected","wallets","method","params","readyToConnect","wallet","info","getConnection","to_waellet","newWallet","reverseIframe","process","walletInfo","computed","mapState","methods","detectWallets","document","createElement","src","style","display","body","appendChild","Promise","resolve","reject","stopDetection","walletDetector","async","confirm","remove","aeSdk","$store","commit","connectToWallet","error","current","subscribeAddress","Object","keys","disconnectWallet","__exports__","_component_Value","balancePromise","heightPromise","_hoisted_6","nodeInfoPromise","_hoisted_7","compilerVersionPromise","_component_SpendCoins","_component_MessageSign","_component_DataSign","text","props","Array","String","Number","default","watch","handler","then","result","valueToString","warn","immediate","JSON","stringify","k","v","spendTo","placeholder","spendAmount","spendPayload","spendPromise","spend","pause","setTimeout","duration","mapObject","object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","AccountSecretKey","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","encode","decode","string","base58","bs58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","components","Value","TextEncoder","_component_FieldAction","title","messageSign","$props","argTitle","$data","argValue","argPlaceholder","promise","actionHandler","actionTitle","resultTitle","required","argDefaultValue","Function","FieldAction","messageToSign","signMessage","dataBuffer","onInput","setData","dataSign","_hoisted_8","_hoisted_9","emptyData","Buffer","sign","SpendCoins","MessageSign","DataSign","mounted","$watch","networkId","compilerApi","getBalance","getHeight","getNodeInfo","contractSourceCode","createPromise","create","contract","compile","deploy","deployPromise","callOnChain","callStatic","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","isAddressValid","maybeEncoded","encodings","encoding","hash","verify","signature","nacl","detached","messagePrefix","messagePrefixLength","ProtocolToVmAbi","Ceres","vmVersion","Fate3","abiVersion","Fate","NoAbi","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","Fate2","serialize","consensusProtocolVersion","_value","prepare","onNode","vm","abi","_getProtocolDetails","c","kind","ContractCallTx","GaMetaTx","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","at","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","uInt","serializeAettos","genEncodedField","optional","encodedData","genEntryField","txParams","packEntry","ArrayBuffer","isView","startsWith","unpackEntry","genEnumerationField","enm","values","filter","gasPriceCache","getCachedIncreasedGasPrice","node","cache","get","time","Date","now","gasPrice","minGasPrice","utilization","getRecentGasPrices","BigInt","integerValue","maxSafeGasPrice","set","coinAmount","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ContractCreateTx","GaAttachTx","PayingForTx","factor","TX_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","ceil","floor","getOracleRelativeTtl","ttlKeys","buildGas","builtTx","unpackTx","buildTx","txObject","tx","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","gasPricePrefix","_computingMinFee","_canIncreaseFee","minFee","dividedBy","replace","gt","calculateGasLimitMax","gasMax","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","field","txFields","parameters","addressName","genNonceField","senderKey","strategy","senderId","getAccountNextNonce","catch","nextNonce","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","addressAny","allowRaw","pointers","bKey","bId","oracleId","getOracleByPubkey","queryFee","genShortUIntConstField","constValue","constValueOptional","genTransactionField","wrapWithProxy","valueCb","Proxy","res","Reflect","bind","unwrapProxy","_wrappedValue","_getPollInterval","_expectedMineRate","_microBlockCycle","_ref","_await$getVal","getVal","devModeDef","def","getNetworkId","base","heightCache","cached","height","getCurrentKeyBlockHeight","poll","interval","_interval","max","getTransactionByHash","blockHeight","ttl","awaitHeight","_interval2","currentHeight","waitForTxConfirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","format","addr","balance","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","Map","txDryRunHandler","rs","delete","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accounts","Set","accountAddress","pubKey","forEach","results","reason","resultPayload","idx","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","pointer","p","absoluteTtl","_isInternalBuild","withDefault","defaultValue","withFormatting","CallReturnType","EntryTag","ORACLE_TTL_TYPES","transactionAny","transactionSignedTx","SignedTx","entryTreesPoi","entry","TreesPoi","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","signatures","raw","SpendTx","recipientId","encoded","NamePreclaimTx","accountId","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","NameTransferTx","NameRevokeTx","ctVersion","deposit","callData","callerId","queryFormat","responseFormat","oracleTtlType","delta","enumeration","oracleTtlValue","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","ChannelSnapshotSoloTx","ChannelClientReconnectTx","role","pubkey","authFun","gaId","authData","payerId","rlpDecode","rlpEncode","_rlp","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","binary","unpackRecord","encodedRecord","expectedTag","index","genMapField","Mtree","MtreeValue","recursiveType","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackEntry","_MPTree_brand","WeakSet","MPTree","isComplete","unpEnt","_classPrivateMethodInitSpec","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","d","_assertClassBrand","_getRaw","toObject","_entriesRaw","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","entryMtreeValueArray","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","flags","gaContract","gaAuthFun","status","owner","boolean","referers","callerNonce","gasUsed","returnValue","returnType","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelOffChainUpdateTransfer","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","callStack","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","GaMetaTxAuthData","encodingTag","_encodingTag$find$","_expectedTag","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","verCmp","a","b","getComponents","i","aComponents","bComponents","componentsToNumber","reverse","reduce","acc","semverSatisfies","bigIntPrefix","createSerializer","serializer","createSerializerOrig","mapper","objectName","_objectName","serializedName","responseBody","MAX_SAFE_INTEGER","bigIntPropertyRe","bigIntArrayItemRe","parseBigIntPolicy","sendRequest","request","next","bodyAsText","replaceAll","RegExp","matched","match","end","genRequestQueuesPolicy","requestQueues","policy","_requestQueues$get","headers","getResponse","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","url","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","parsedBody","genVersionCheckPolicy","versionCb","has","requestOptions","customHeaders","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","NaN","statusesToNotRetry","intervals","fill","_","intervalSum","intervalsInMs","e","attempt","urlParsed","searchParams","_e$response$status","className","modelProperties","constraints","InclusiveMinimum","InclusiveMaximum","payable","allowedValues","ErrorModel","errorCode","NextNonceResponse","SignedTxs","element","blockHash","Tx","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","Delegates","OffChainUpdate","uberParent","polymorphicDiscriminator","clientName","op","RelativeTTL","isConstant","Ttl","NamePointer","encodedKey","AuctionEntry","startedAt","endsAt","highestBidder","highestBid","ContractObject","referrerIds","ByteCode","bytecode","PoI","Currency","symbol","subunit","subunitsPerUnit","fiatConverstionUrl","fiatConversionUrl","logo","primaryColour","secondaryColour","networkName","Image","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","Event","topics","Generation","keyBlock","microBlocks","KeyBlock","prevHash","prevKeyHash","miner","beneficiary","pow","MinItems","MaxItems","Header","pofHash","txsHash","HashResponse","HeightResponse","MicroBlockHeader","CountResponse","count","NameEntry","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","PeerPubKey","GasPricesItem","minutes","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","uptime","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","SyncStatus","progress","speed","estimate","EncodedTx","PostTxResponse","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","ChannelSetDelegatesTx","CheckTxInPoolResponse","CommitmentId","UnsignedTx","GAAttachTx","GAMetaTx","NameHash","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","OracleRespondTx","PeerCount","connected","available","blocked","PeerCountConnected","PeerCountAvailable","verified","unverified","Peers","peers","PubKey","TokenSupply","contractOracles","locked","pendingRewards","total","OffChainCallContract","OffChainDeposit","OffChainNewContract","OffChainTransfer","OffChainWithdrawal","CreateContractUnsignedTx","discriminators","accept","parameterPath","$host","skipEncoding","contentType","DryRunInputMapper","nameHash","fromParam","limit","typeParam","body1","EncodedTxMapper","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","sendOperationRequest","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHashOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountNextNonceOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAuctionEntryByName","getAuctionEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getCurrency","getCurrencyOperationSpec","protectedDryRunTxsOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getTopHeader","getTopHeaderOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getNameEntryByNameOperationSpec","getNameEntryByNameHash","getNameEntryByNameHashOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getRecentGasPricesOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","getSyncStatus","getSyncStatusOperationSpec","postTransaction","postTransactionOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","Mappers","httpMethod","responses","bodyMapper","isError","urlParameters","Parameters","headerParameters","queryParameters","requestBody","mediaType","_cachedStatusPromise","NodeApi","ignoreVersion","getVersion","_getCachedStatus","opts","allowInsecureConnection","additionalPolicies","pipeline","addPolicy","phase","removePolicy","userAgentPolicyName","setClientRequestIdPolicyName","nodeNetworkId","versions","getTransactionSignerAddress","AccountBase","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","aci","getBufferToSign","innerTx","prefixes","rlpBinaryTx","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","txBinary","txWithNetworkId","txHashWithNetworkId","checkedKeys","nestedTx","cost","recipient","_ref2","oracleCall","contractCreate","contractCall","parse","InvalidTxError","validation","sendTransaction","txUnsigned","waitMined","signTransaction","__queue","pollResult","txData","confirmationHeight","verifyTx","Encoder","Calldata","_Contract_brand","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult","_estimateGas","$call","$deploy","_opt$gasLimit","opt","_calldata","_name","_sendAndProcess","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent","decoded","decodeEvent","initialize","validateBytecode","otherOptions","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","contractAddressToName","addressToName","variant","eventName","calcHash","arr","some","trim","shallowRef","getContext","arg","setFactor","multiplyByFactor","_component_GenerateSpendTx","signInnerTx","payForTx","incrementNonce","generatePromise","generate","spendTx","spendTxParams","GenerateSpendTx","txToPayFor","payForTransaction","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","toPromise","dataEncoded","_hoisted_16","signTypedData","_hoisted_17","_hoisted_18","_hoisted_19","verifySignature","_hoisted_20","verifyAddress","verifyPromise","verifyTypedData","_hoisted_21","_hoisted_22","operation","parameter","dataParsed","aciParsed","dataType","getter","DelegationTag","AensPreclaim","AensName","AensWildcard","oracleQueryId","signPromise","oracleAddressField","queryIdField","packDelegation","getDelegationParams","delegation","signDelegation","payloadAsJson","includeSubJwk","jwt","unpackPromise","unpack","toBase64Url","fromBase64Url","objectToBase64Url","header","signJwt","originalPayload","sub_jwk","kty","crv","x","unpackJwt","_payload$sub_jwk","h","payloadEncoded","jwk","signer","_resolveAccount","Connect","Basic","Contracts","PayForTx","TypedData","DelegationSignature","Jwt","render","recipientIdOrName","transferFunds","fraction","desiredAmount","ROUND_HALF_UP","plus","minus","createGeneralizedAccount","authFnName","_options$gasLimit","freeze","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","chainMethods","spendMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","mergeWith","prototype","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","ensureNodeConnected","pool","selectedNodeName","select","selectNode","isNodeConnected","getNodesInPool","addresses","_options$networkId","AccountRpc","rpcClient","_rpcClient","dataRaw","unsafeSign","returnSigned","signedTransaction","RPC_VERSION","_callbacks","_messageId","_methods","_RpcClient_brand","RpcClient","_handleMessage","_sendRequest","notify","_processResponse","methodName","_sendResponse","callbacks","AeSdkAepp","onAddressChange","onNetworkChange","_ensureConnected","_ensureAccountAccess","_accounts","connectNode","disconnectParams","updateNetwork","client","updateAddress","closeConnection","askAddresses","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","isArray","cmpOut","warning","generateAciBySourceCode","generateAci","store","createStore","state","mutations","setAddress","setNetworkId","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}