{"version":3,"file":"js/app.cede1f81.js","mappings":"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","sources":["webpack://aepp/./src/App.vue","webpack://aepp/./src/Connect.vue","webpack://aepp/./src/components/ConnectFrame.vue","webpack://aepp/../../src/utils/errors.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://aepp/../../src/aepp-wallet-communication/schema.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://aepp/../../src/aepp-wallet-communication/wallet-detector.ts","webpack://aepp/../../src/account/Base.ts","webpack://aepp/../../src/utils/other.ts","webpack://aepp/../../src/utils/encoder-types.ts","webpack://aepp/../../src/utils/encoder.ts","webpack://aepp/../../src/account/Rpc.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://aepp/../../src/aepp-wallet-communication/WalletConnectorFrameBase.ts","webpack://aepp/../../src/aepp-wallet-communication/WalletConnectorFrame.ts","webpack://aepp/./src/components/SelectNetwork.vue","webpack://aepp/./src/components/Value.vue","webpack://aepp/./src/components/Value.vue?9937","webpack://aepp/./src/components/SelectNetwork.vue?ecd2","webpack://aepp/./src/components/ConnectFrame.vue?5d1f","webpack://aepp/./src/components/ConnectLedger.vue","webpack://aepp/../../src/utils/crypto.ts","webpack://aepp/../../../src/tx/builder/constants.ts","webpack://aepp/../../../../src/tx/builder/field-types/ct-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/abi-version.ts","webpack://aepp/../../src/utils/bytes.ts","webpack://aepp/../../../../src/tx/builder/field-types/address.ts","webpack://aepp/../../../../src/tx/builder/field-types/array.ts","webpack://aepp/../../../src/tx/builder/helpers.ts","webpack://aepp/../../../../src/tx/builder/field-types/u-int.ts","webpack://aepp/../../src/utils/bignumber.ts","webpack://aepp/../../src/utils/amount-formatter.ts","webpack://aepp/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://aepp/../../../../src/tx/builder/field-types/encoded.ts","webpack://aepp/../../../../src/tx/builder/field-types/entry.ts","webpack://aepp/../../../../src/tx/builder/field-types/enumeration.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-price.ts","webpack://aepp/../../../../src/tx/builder/field-types/fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://aepp/../../../../src/tx/builder/field-types/field.ts","webpack://aepp/../../../../src/tx/builder/field-types/name.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-id.ts","webpack://aepp/../../../../src/tx/builder/field-types/nonce.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers.ts","webpack://aepp/../../../../src/tx/builder/field-types/query-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/raw.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://aepp/../../../../src/tx/builder/field-types/string.ts","webpack://aepp/../../../../src/tx/builder/field-types/transaction.ts","webpack://aepp/../../src/utils/wrap-proxy.ts","webpack://aepp/../src/chain.ts","webpack://aepp/../../../../src/tx/builder/field-types/ttl.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-default.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://aepp/../../../../src/tx/builder/entry/constants.ts","webpack://aepp/../../../src/tx/builder/schema.ts","webpack://aepp/../../../src/tx/builder/common.ts","webpack://aepp/../../../../src/tx/builder/field-types/boolean.ts","webpack://aepp/../../../../src/tx/builder/field-types/map.ts","webpack://aepp/../../../../src/tx/builder/field-types/mptree.ts","webpack://aepp/../../../../src/tx/builder/field-types/wrapped.ts","webpack://aepp/../../../../src/tx/builder/entry/schema.ts","webpack://aepp/../../../../src/tx/builder/entry/index.ts","webpack://aepp/../../../src/tx/builder/index.ts","webpack://aepp/../../src/account/Ledger.ts","webpack://aepp/../../src/utils/semver-satisfies.ts","webpack://aepp/../../src/account/BaseFactory.ts","webpack://aepp/../../src/account/LedgerFactory.ts","webpack://aepp/./src/components/ConnectLedger.vue?1bc5","webpack://aepp/./src/components/ConnectMetamask.vue","webpack://aepp/../../src/account/Metamask.ts","webpack://aepp/../../src/account/MetamaskFactory.ts","webpack://aepp/./src/components/ConnectMetamask.vue?9f66","webpack://aepp/./src/components/ConnectMnemonic.vue","webpack://aepp/../../src/utils/typed-data.ts","webpack://aepp/../../src/account/Memory.ts","webpack://aepp/../../src/account/MnemonicFactory.ts","webpack://aepp/./src/components/ConnectMnemonic.vue?4444","webpack://aepp/./src/Connect.vue?1a8f","webpack://aepp/./src/Basic.vue","webpack://aepp/./src/components/SpendCoins.vue","webpack://aepp/./src/components/SpendCoins.vue?b814","webpack://aepp/./src/components/MessageSign.vue","webpack://aepp/./src/components/FieldAction.vue","webpack://aepp/./src/components/FieldAction.vue?d339","webpack://aepp/./src/components/MessageSign.vue?1f61","webpack://aepp/./src/components/DataSign.vue","webpack://aepp/./src/components/DataSign.vue?2083","webpack://aepp/./src/Basic.vue?efb3","webpack://aepp/./src/Contracts.vue","webpack://aepp/../../src/utils/autorest.ts","webpack://aepp/../../../../src/apis/node/models/mappers.ts","webpack://aepp/../../../../src/apis/node/models/parameters.ts","webpack://aepp/../../../src/apis/node/node.ts","webpack://aepp/../src/Node.ts","webpack://aepp/../../src/tx/transaction-signer.ts","webpack://aepp/../../src/tx/execution-cost.ts","webpack://aepp/../../src/tx/validator.ts","webpack://aepp/../src/send-transaction.ts","webpack://aepp/../../src/contract/Contract.ts","webpack://aepp/./src/Contracts.vue?05c9","webpack://aepp/./src/PayForTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue?b650","webpack://aepp/./src/PayForTx.vue?2fdc","webpack://aepp/./src/TypedData.vue","webpack://aepp/./src/TypedData.vue?5e40","webpack://aepp/./src/DelegationSignature.vue","webpack://aepp/../../../../src/tx/builder/delegation/schema.ts","webpack://aepp/../../../../src/tx/builder/delegation/index.ts","webpack://aepp/./src/DelegationSignature.vue?67ef","webpack://aepp/./src/Jwt.vue","webpack://aepp/../../src/utils/jwt.ts","webpack://aepp/./src/Jwt.vue?1275","webpack://aepp/./src/App.vue?7ccd","webpack://aepp/../src/spend.ts","webpack://aepp/../../src/contract/ga.ts","webpack://aepp/../src/AeSdkMethods.ts","webpack://aepp/../src/AeSdkBase.ts","webpack://aepp/../src/AeSdk.ts","webpack://aepp/../../../../src/apis/compiler/models/mappers.ts","webpack://aepp/../../../../src/apis/compiler/models/parameters.ts","webpack://aepp/../../../src/apis/compiler/compiler.ts","webpack://aepp/../../../src/contract/compiler/Base.ts","webpack://aepp/../../../src/contract/compiler/Http.ts","webpack://aepp/./src/store.js","webpack://aepp/./src/main.js","webpack://aepp/webpack/bootstrap","webpack://aepp/webpack/runtime/chunk loaded","webpack://aepp/webpack/runtime/compat get default export","webpack://aepp/webpack/runtime/define property getters","webpack://aepp/webpack/runtime/global","webpack://aepp/webpack/runtime/hasOwnProperty shorthand","webpack://aepp/webpack/runtime/make namespace object","webpack://aepp/webpack/runtime/jsonp chunk loading","webpack://aepp/webpack/startup"],"sourcesContent":["<template>\n  <h2>Simple æpp</h2>\n\n  <Connect />\n\n  <div class=\"nav\">\n    <a href=\"#\" :class=\"{ active: view === 'Basic' }\" @click=\"view = 'Basic'\">\n      Basic functionality\n    </a>\n    <a href=\"#\" :class=\"{ active: view === 'Contracts' }\" @click=\"view = 'Contracts'\">\n      Smart contracts\n    </a>\n    <a href=\"#\" :class=\"{ active: view === 'PayForTx' }\" @click=\"view = 'PayForTx'\">\n      Pay for transaction\n    </a>\n    <a href=\"#\" :class=\"{ active: view === 'TypedData' }\" @click=\"view = 'TypedData'\">\n      Typed data\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'DelegationSignature' }\"\n      @click=\"view = 'DelegationSignature'\"\n    >\n      Delegation signature\n    </a>\n    <a href=\"#\" :class=\"{ active: view === 'Jwt' }\" @click=\"view = 'Jwt'\">JWT</a>\n  </div>\n\n  <Component v-if=\"view\" :is=\"view\" />\n</template>\n\n<script>\nimport Connect from './Connect.vue';\nimport Basic from './Basic.vue';\nimport Contracts from './Contracts.vue';\nimport PayForTx from './PayForTx.vue';\nimport TypedData from './TypedData.vue';\nimport DelegationSignature from './DelegationSignature.vue';\nimport Jwt from './Jwt.vue';\n\nexport default {\n  components: {\n    Connect,\n    Basic,\n    Contracts,\n    PayForTx,\n    TypedData,\n    DelegationSignature,\n    Jwt,\n  },\n  data: () => ({ view: '' }),\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","<template>\n  <div class=\"nav\">\n    <a href=\"#\" :class=\"{ active: view === 'Frame' }\" @click=\"view = 'Frame'\">Frame</a>\n    <a href=\"#\" :class=\"{ active: view === 'Ledger' }\" @click=\"view = 'Ledger'\">Ledger HW</a>\n    <a href=\"#\" :class=\"{ active: view === 'Metamask' }\" @click=\"view = 'Metamask'\">MetaMask</a>\n    <a href=\"#\" :class=\"{ active: view === 'Mnemonic' }\" @click=\"view = 'Mnemonic'\">Mnemonic</a>\n  </div>\n\n  <Component v-if=\"view\" :is=\"view\" />\n</template>\n\n<script>\nimport Frame from './components/ConnectFrame.vue';\nimport Ledger from './components/ConnectLedger.vue';\nimport Metamask from './components/ConnectMetamask.vue';\nimport Mnemonic from './components/ConnectMnemonic.vue';\n\nexport default {\n  components: { Frame, Ledger, Metamask, Mnemonic },\n  data: () => ({ view: 'Frame' }),\n};\n</script>\n","<template>\n  <div class=\"group\">\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"default\" />\n        Iframe or WebExtension\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"reverse-iframe\" />\n        Reverse iframe\n      </label>\n      <div><input v-model=\"reverseIframeWalletUrl\" /></div>\n    </div>\n\n    <button v-if=\"walletConnected\" @click=\"disconnect\">Disconnect</button>\n    <button v-else-if=\"connectMethod\" :disabled=\"walletConnecting\" @click=\"connect\">Connect</button>\n\n    <button v-if=\"cancelWalletDetection\" @click=\"cancelWalletDetection\">Cancel detection</button>\n\n    <template v-if=\"walletConnected\">\n      <br />\n      <button @click=\"getAccounts\">Get accounts</button>\n      <button @click=\"subscribeAccounts('subscribe', 'current')\">Subscribe current</button>\n      <button @click=\"subscribeAccounts('unsubscribe', 'current')\">Unsubscribe current</button>\n      <button @click=\"subscribeAccounts('subscribe', 'connected')\">Subscribe connected</button>\n      <button @click=\"subscribeAccounts('unsubscribe', 'connected')\">Unsubscribe connected</button>\n\n      <div>\n        <div>RPC Accounts</div>\n        <div>{{ rpcAccounts.map((account) => account.address.slice(0, 8)).join(', ') }}</div>\n      </div>\n    </template>\n  </div>\n\n  <SelectNetwork\n    v-if=\"walletConnected\"\n    :select=\"(network) => this.walletConnector.askToSelectNetwork(network)\"\n  />\n\n  <div class=\"group\">\n    <div>\n      <div>SDK status</div>\n      <div>\n        {{\n          (walletConnected && 'Wallet connected') ||\n          (cancelWalletDetection && 'Wallet detection') ||\n          (walletConnecting && 'Wallet connecting') ||\n          'Ready to connect to wallet'\n        }}\n      </div>\n    </div>\n    <div>\n      <div>Wallet name</div>\n      <div>{{ walletName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  walletDetector,\n  BrowserWindowMessageConnection,\n  RpcConnectionDenyError,\n  RpcRejectedByUserError,\n  WalletConnectorFrame,\n} from '@aeternity/aepp-sdk';\nimport { toRaw } from 'vue';\nimport { mapState } from 'vuex';\nimport SelectNetwork from './SelectNetwork.vue';\n\nexport default {\n  components: { SelectNetwork },\n  data: () => ({\n    connectMethod: 'default',\n    walletConnected: false,\n    walletConnecting: null,\n    reverseIframe: null,\n    reverseIframeWalletUrl: process.env.VUE_APP_WALLET_URL ?? `http://${location.hostname}:9000`,\n    walletInfo: null,\n    cancelWalletDetection: null,\n    rpcAccounts: [],\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    walletName() {\n      if (!this.walletConnected) return 'Wallet is not connected';\n      return this.walletInfo.name;\n    },\n  },\n  methods: {\n    async getAccounts() {\n      this.rpcAccounts = await this.walletConnector.getAccounts();\n      if (this.rpcAccounts.length) this.setAccount(this.rpcAccounts[0]);\n    },\n    async subscribeAccounts(type, value) {\n      await this.walletConnector.subscribeAccounts(type, value);\n    },\n    async detectWallets() {\n      if (this.connectMethod === 'reverse-iframe') {\n        this.reverseIframe = document.createElement('iframe');\n        this.reverseIframe.src = this.reverseIframeWalletUrl;\n        this.reverseIframe.style.display = 'none';\n        document.body.appendChild(this.reverseIframe);\n      }\n      const connection = new BrowserWindowMessageConnection();\n      return new Promise((resolve, reject) => {\n        const stopDetection = walletDetector(connection, async ({ newWallet }) => {\n          if (\n            confirm(\n              `Do you want to connect to wallet ${newWallet.info.name} with id ${newWallet.info.id}`,\n            )\n          ) {\n            stopDetection();\n            resolve(newWallet.getConnection());\n            this.cancelWalletDetection = null;\n            this.walletInfo = newWallet.info;\n          }\n        });\n        this.cancelWalletDetection = () => {\n          reject(new Error('Wallet detection cancelled'));\n          stopDetection();\n          this.cancelWalletDetection = null;\n          if (this.reverseIframe) this.reverseIframe.remove();\n        };\n      });\n    },\n    async setNode(networkId) {\n      const [{ name }] = (await this.aeSdk.getNodesInPool()).filter(\n        (node) => node.nodeNetworkId === networkId,\n      );\n      this.aeSdk.selectNode(name);\n      this.$store.commit('setNetworkId', networkId);\n    },\n    setAccount(account) {\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n      this.aeSdk.addAccount(toRaw(account), { select: true });\n      this.$store.commit('setAddress', account.address);\n    },\n    async connect() {\n      this.walletConnecting = true;\n      try {\n        const connection = await this.detectWallets();\n        try {\n          this.walletConnector = await WalletConnectorFrame.connect('Simple æpp', connection);\n        } catch (error) {\n          if (error instanceof RpcConnectionDenyError) connection.disconnect();\n          throw error;\n        }\n        this.walletConnector.on('disconnect', () => {\n          this.walletConnected = false;\n          this.walletInfo = null;\n          this.rpcAccounts = [];\n          this.$store.commit('setAddress', undefined);\n          if (this.reverseIframe) this.reverseIframe.remove();\n        });\n        this.walletConnected = true;\n\n        this.setNode(this.walletConnector.networkId);\n        this.walletConnector.on('networkIdChange', (networkId) => this.setNode(networkId));\n\n        this.walletConnector.on('accountsChange', (accounts) => {\n          this.rpcAccounts = accounts;\n          if (accounts.length) this.setAccount(accounts[0]);\n        });\n      } catch (error) {\n        if (\n          error.message === 'Wallet detection cancelled' ||\n          error instanceof RpcConnectionDenyError ||\n          error instanceof RpcRejectedByUserError\n        )\n          return;\n        throw error;\n      } finally {\n        this.walletConnecting = false;\n      }\n    },\n    disconnect() {\n      this.walletConnector.disconnect();\n    },\n  },\n};\n</script>\n","// eslint-disable-next-line max-classes-per-file\nimport { BigNumber } from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants.js';\nimport * as Encoded from './encoder-types.js';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super(`Giving up after ${blocks} blocks mined, transaction hash: ${th}`);\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion?: string) {\n    super(\n      `Unsupported ${dependency} version ${version}. Supported: >= ${geVersion}` +\n        (ltVersion == null ? '' : ` < ${ltVersion}`),\n    );\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(\n      `the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`,\n    );\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode' | 'ACI', details: string = '') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain` + details);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. ` +\n        'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}` +\n        ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by` +\n        ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts` +\n        ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors.js';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected())\n      throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder.js';\nimport { BaseError, InternalError } from '../utils/errors.js';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  unsafeSign = 'data.unsafeSign',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcNoNetworkById extends RpcError {\n  static override code = 13;\n\n  override code = 13;\n\n  constructor(networkId: string) {\n    super(`Wallet can't find a network by id \"${networkId}\"`);\n    this.data = networkId;\n    this.name = 'RpcNoNetworkById';\n  }\n}\nrpcErrors.push(RpcNoNetworkById);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser.js';\nimport { MESSAGE_DIRECTION } from '../schema.js';\nimport { InternalError, RpcConnectionError } from '../../utils/errors.js';\n\nexport type ImplPostMessage = Pick<\n  Window,\n  'addEventListener' | 'removeEventListener' | 'postMessage'\n>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object' ||\n        (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      )\n        return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError(\"Can't send messages without target\");\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import BrowserConnection from './connection/Browser.js';\nimport BrowserWindowMessageConnection from './connection/BrowserWindowMessage.js';\nimport { MESSAGE_DIRECTION, METHODS } from './schema.js';\nimport { WalletInfo } from './rpc/types.js';\nimport { UnsupportedPlatformError } from '../utils/errors.js';\n\ninterface Wallet {\n  info: WalletInfo;\n  getConnection: () => BrowserWindowMessageConnection;\n}\ninterface Wallets {\n  [key: string]: Wallet;\n}\n\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default (\n  connection: BrowserConnection,\n  onDetected: ({ wallets, newWallet }: { wallets: Wallets; newWallet: Wallet }) => void,\n): (() => void) => {\n  if (window == null)\n    throw new UnsupportedPlatformError(\n      'Window object not found, you can run wallet detector only in browser',\n    );\n  const wallets: Wallets = {};\n\n  connection.connect(\n    (\n      { method, params }: { method: string; params: WalletInfo },\n      origin: string,\n      source: Window,\n    ) => {\n      if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n\n      const wallet = {\n        info: params,\n        getConnection() {\n          return new BrowserWindowMessageConnection({\n            target: source,\n            ...(params.type === 'extension'\n              ? {\n                  sendDirection: MESSAGE_DIRECTION.to_waellet,\n                  receiveDirection: MESSAGE_DIRECTION.to_aepp,\n                  ...(window.origin !== 'null' && { origin: window.origin }),\n                }\n              : {\n                  origin: params.origin,\n                }),\n          });\n        },\n      };\n      wallets[wallet.info.id] = wallet;\n      onDetected({ wallets, newWallet: wallet });\n    },\n    () => {},\n  );\n\n  return () => connection.disconnect();\n};\n","import { Encoded } from '../utils/encoder.js';\nimport Node from '../Node.js';\nimport CompilerBase from '../contract/compiler/Base.js';\nimport { Int } from '../tx/builder/constants.js';\nimport { AciValue, Domain } from '../utils/typed-data.js';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   * @deprecated Use `unsafeSign` method instead\n   */\n  abstract sign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract unsafeSign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signDelegation(\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> =>\n  new Promise((resolve) => {\n    setTimeout(resolve, duration);\n  });\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV],\n    index: number,\n    array: Array<[string, InputV]>,\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer =>\n      Buffer.concat(\n        list.map((el) => Buffer.from(el)),\n        totalLength,\n      )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return (\n    error instanceof RestError &&\n    error.statusCode === 404 &&\n    error.message.includes('Account not found')\n  );\n}\n\n// based on https://stackoverflow.com/a/50375286\nexport type UnionToIntersection<Union> = (Union extends any ? (k: Union) => void : never) extends (\n  k: infer Intersection,\n) => void\n  ? Intersection\n  : never;\n\n// based on https://stackoverflow.com/a/61108377\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  AccountSecretKey = 'sk',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type AccountSecretKey = `${Encoding.AccountSecretKey}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import bs58 from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport { DecodeError, ArgumentError, InvalidChecksumError, PayloadLengthError } from './errors.js';\nimport { concatBuffers, isKeyOfObject } from './other.js';\nimport * as Encoded from './encoder-types.js';\nimport { Encoding } from './encoder-types.js';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.AccountSecretKey,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.AccountSecretKey]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58.encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58.decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError(\n    'prefix',\n    `one of ${[...base58Types, ...base64Types].join(', ')}`,\n    maybeType,\n  );\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(data: Uint8Array, type: Type): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import AccountBase from './Base.js';\nimport { METHODS } from '../aepp-wallet-communication/schema.js';\nimport { ArgumentError, UnsupportedProtocolError } from '../utils/errors.js';\nimport { Encoded, Encoding, decode, encode } from '../utils/encoder.js';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient.js';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types.js';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  /**\n   * @deprecated Use `unsafeSign` method instead\n   */\n  async sign(dataRaw: string | Uint8Array): Promise<Uint8Array> {\n    return this.unsafeSign(dataRaw);\n  }\n\n  async unsafeSign(dataRaw: string | Uint8Array): Promise<Uint8Array> {\n    const data = encode(Buffer.from(dataRaw), Encoding.Bytearray);\n    const { signature } = await this._rpcClient.request(METHODS.unsafeSign, {\n      onAccount: this.address,\n      data,\n    });\n    return decode(signature);\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient.request(METHODS.signMessage, {\n      onAccount: this.address,\n      message,\n    });\n    return Buffer.from(signature, 'hex');\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { name, version, contractAddress, networkId }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signTypedData, {\n      onAccount: this.address,\n      domain: {\n        name,\n        version,\n        networkId,\n        contractAddress,\n      },\n      aci,\n      data,\n    });\n    return signature;\n  }\n\n  override async signDelegation(delegation: Encoded.Bytearray): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signDelegation, {\n      delegation,\n      onAccount: this.address,\n    });\n    return signature;\n  }\n}\n","import { Encoded } from '../../utils/encoder.js';\nimport { Domain, AciValue } from '../../utils/typed-data.js';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema.js';\nimport { SignedTx } from '../../apis/node/index.js';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport type NetworkToSelect = { networkId: string } | { nodeUrl: string };\n\nexport interface WalletApi {\n  [METHODS.connect]: (p: {\n    name: string;\n    icons?: Icons;\n    version: typeof RPC_VERSION;\n    connectNode: boolean;\n  }) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (p: {\n    type: SUBSCRIPTION_TYPES;\n    value: 'connected' | 'current';\n  }) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.unsafeSign]: (p: {\n    data: Encoded.Bytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.sign]: (p: {\n    tx: Encoded.Transaction;\n    onAccount: Encoded.AccountAddress;\n    returnSigned: boolean;\n    /**\n     * @deprecated Wallet provided networkId will be used (current network)\n     * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n     * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n     */\n    networkId: string;\n    innerTx?: boolean;\n  }) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<SignedTx> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>;\n\n  [METHODS.signMessage]: (p: {\n    message: string;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (p: {\n    domain: Domain;\n    aci: AciValue;\n    data: Encoded.ContractBytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (p: {\n    delegation: Encoded.Bytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.updateNetwork]: (a: NetworkToSelect) => Promise<null>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema.js';\nimport BrowserConnection from '../connection/Browser.js';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors.js';\nimport { ensureError } from '../../utils/other.js';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>;\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient<\n  RemoteApi extends RpcApi<RemoteApi>,\n  LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = new Map<\n    number,\n    { resolve: (v: any) => void; reject: (e: Error) => void }\n  >();\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...(id != null ? { id } : {}),\n      method,\n      ...(params != null ? { params } : {}),\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...(error != null ? { error: error.toJSON() } : { result }),\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest((this.#messageId += 1), name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { EventEmitter } from 'eventemitter3';\nimport AccountRpc from '../account/Rpc.js';\nimport { Encoded } from '../utils/encoder.js';\nimport {\n  Accounts,\n  RPC_VERSION,\n  Network,\n  WalletApi,\n  AeppApi,\n  NetworkToSelect,\n} from './rpc/types.js';\nimport RpcClient from './rpc/RpcClient.js';\nimport { METHODS, SUBSCRIPTION_TYPES } from './schema.js';\nimport { NoWalletConnectedError } from '../utils/errors.js';\nimport BrowserConnection from './connection/Browser.js';\n\ninterface EventsBase {\n  accountsChange: (accounts: AccountRpc[]) => void;\n  disconnect: (p: any) => void;\n}\n\nexport default abstract class WalletConnectorFrameBase<T extends {}> extends EventEmitter<\n  EventsBase | T\n> {\n  #rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  #getRpcClient(): RpcClient<WalletApi, AeppApi> {\n    if (this.#rpcClient == null)\n      throw new NoWalletConnectedError('You are not connected to Wallet');\n    return this.#rpcClient;\n  }\n\n  /**\n   * Is connected to wallet\n   */\n  get isConnected(): boolean {\n    return this.#rpcClient != null;\n  }\n\n  #accounts: AccountRpc[] = [];\n\n  /**\n   * Accounts provided by wallet over subscription\n   */\n  get accounts(): AccountRpc[] {\n    return this.#accounts;\n  }\n\n  protected constructor() {\n    super();\n  }\n\n  protected abstract _updateNetwork(params: Network): void;\n\n  #updateAccounts(params: Accounts): void {\n    const addresses = [\n      ...new Set([...Object.keys(params.current), ...Object.keys(params.connected)]),\n    ] as Encoded.AccountAddress[];\n    this.#accounts = addresses.map((address) => new AccountRpc(this.#getRpcClient(), address));\n    this.emit('accountsChange', this.#accounts);\n  }\n\n  static async _connect(\n    name: string,\n    connection: BrowserConnection,\n    connector: WalletConnectorFrameBase<any>,\n    connectNode: boolean,\n  ): Promise<void> {\n    let disconnectParams: any;\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        connector.#rpcClient = undefined;\n        connector.#accounts = [];\n        connector.emit('disconnect', disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: connector.#updateAccounts.bind(connector),\n        [METHODS.updateNetwork]: connector._updateNetwork.bind(connector),\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    connector.#rpcClient = client;\n    const walletInfo = await connector.#rpcClient.request(METHODS.connect, {\n      name,\n      version: RPC_VERSION,\n      connectNode,\n    });\n    connector._updateNetwork(walletInfo);\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnect(): void {\n    const client = this.#getRpcClient();\n    client.notify(METHODS.closeConnection, { reason: 'bye' });\n    client.connection.disconnect();\n  }\n\n  /**\n   * Request accounts from wallet\n   */\n  async getAccounts(): Promise<AccountRpc[]> {\n    const client = this.#getRpcClient();\n    const addresses = await client.request(METHODS.address, undefined);\n    return addresses.map((address) => new AccountRpc(client, address));\n  }\n\n  /**\n   * Subscribe for wallet accounts, get account updates adding handler to `accountsChange` event\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAccounts(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<AccountRpc[]> {\n    const result = await this.#getRpcClient().request(METHODS.subscribeAddress, { type, value });\n    this.#updateAccounts(result.address);\n    return this.#accounts;\n  }\n\n  /**\n   * Ask wallet to select a network\n   */\n  async askToSelectNetwork(network: NetworkToSelect): Promise<void> {\n    await this.#getRpcClient().request(METHODS.updateNetwork, network);\n  }\n}\n","import { Network } from './rpc/types.js';\nimport BrowserConnection from './connection/Browser.js';\nimport WalletConnectorFrameBase from './WalletConnectorFrameBase.js';\n\ninterface EventsNetworkId {\n  networkIdChange: (networkId: string) => void;\n}\n\n/**\n * Connect to wallet as iframe/web-extension\n * @category aepp wallet communication\n */\nexport default class WalletConnectorFrame extends WalletConnectorFrameBase<EventsNetworkId> {\n  #networkId = '';\n\n  /**\n   * The last network id reported by wallet\n   */\n  get networkId(): string {\n    return this.#networkId;\n  }\n\n  protected override _updateNetwork(params: Network): void {\n    this.#networkId = params.networkId;\n    this.emit('networkIdChange', this.#networkId);\n  }\n\n  /**\n   * Connect to wallet\n   * @param name - Aepp name\n   * @param connection - Wallet connection object\n   */\n  static async connect(name: string, connection: BrowserConnection): Promise<WalletConnectorFrame> {\n    const connector = new WalletConnectorFrame();\n    await WalletConnectorFrame._connect(name, connection, connector, false);\n    return connector;\n  }\n}\n","<template>\n  <h2>Select network</h2>\n  <div class=\"group\">\n    <div>\n      <div>Select by</div>\n      <div>\n        <label>\n          <input type=\"radio\" value=\"networkId\" v-model=\"mode\" />\n          Network ID\n        </label>\n        <label>\n          <input type=\"radio\" value=\"nodeUrl\" v-model=\"mode\" />\n          Node URL\n        </label>\n      </div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div>\n        <input v-model=\"payload\" placeholder=\"Network ID or node URL\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          promise = selectNetwork();\n        }\n      \"\n    >\n      Select network\n    </button>\n    <div v-if=\"promise\">\n      <div>Select network result</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  props: {\n    select: { type: Function, required: true },\n  },\n  data: () => ({\n    mode: 'networkId',\n    payload: 'ae_mainnet',\n    promise: null,\n  }),\n  methods: {\n    async selectNetwork() {\n      await this.select({ [this.mode]: this.payload });\n      return 'Accepted by wallet';\n    },\n  },\n};\n</script>\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(value, (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v), 2);\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=a5c5ed22\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./SelectNetwork.vue?vue&type=template&id=c61b645e\"\nimport script from \"./SelectNetwork.vue?vue&type=script&lang=js\"\nexport * from \"./SelectNetwork.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./ConnectFrame.vue?vue&type=template&id=11ee7205\"\nimport script from \"./ConnectFrame.vue?vue&type=script&lang=js\"\nexport * from \"./ConnectFrame.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"group\">\n    <template v-if=\"!accountFactory\">\n      <button :disabled=\"!isUsbSupported\" @click=\"() => connect(false)\">Connect over USB</button>\n      <button :disabled=\"!isBleSupported\" @click=\"() => connect(true)\">Connect over BLE</button>\n    </template>\n    <template v-else>\n      <div>\n        <div>Device</div>\n        <div>{{ accountFactory.transport.deviceModel.productName }}</div>\n      </div>\n      <div v-if=\"accounts.length\">\n        <div>Accounts</div>\n        <div>{{ accounts.map((account) => account.address.slice(0, 8)).join(', ') }}</div>\n      </div>\n    </template>\n    <div v-if=\"status\">\n      <div>Connection status</div>\n      <div>{{ status }}</div>\n    </div>\n    <template v-else-if=\"accountFactory\">\n      <button @click=\"disconnect\">Disconnect</button>\n      <button @click=\"() => addAccount(true)\">Add Account</button>\n      <button @click=\"() => addAccount(false)\">Add Account no Confirm</button>\n      <button v-if=\"accounts.length > 1\" @click=\"switchAccount\">Switch Account</button>\n      <button @click=\"discoverAccounts\">Discover Accounts</button>\n      <button @click=\"switchNode\">Switch Node</button>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { AccountLedgerFactory } from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\nimport TransportWebUsb from '@ledgerhq/hw-transport-webusb';\nimport TransportWebBle from '@ledgerhq/hw-transport-web-ble';\nimport { listen } from '@ledgerhq/logs';\n\n// TODO: remove after fixing https://github.com/LedgerHQ/ledgerjs/issues/352#issuecomment-615917351\nclass TransportWebBleAndroidFix extends TransportWebBle {\n  static async open(device, ...args) {\n    if (!navigator.userAgent.includes('Mobi')) return super.open(device, ...args);\n    const getPrimaryServicesOrig = device.gatt?.getPrimaryServices;\n    if (getPrimaryServicesOrig == null) return super.open(device, ...args);\n    device.gatt.getPrimaryServices = async () => {\n      const [service] = await getPrimaryServicesOrig.call(device.gatt);\n      const getCharacteristicOrig = service.getCharacteristic;\n      service.getCharacteristic = async (id) => {\n        const characteristic = await getCharacteristicOrig.call(service, id);\n        if (id === '13d63400-2c97-0004-0002-4c6564676572') {\n          const writeValueOrig = characteristic.writeValue;\n          let delayed = false;\n          characteristic.writeValue = async (data) => {\n            if (!delayed) {\n              await new Promise((resolve) => setTimeout(resolve, 250));\n              delayed = true;\n            }\n            return writeValueOrig.call(characteristic, data);\n          };\n        }\n        return characteristic;\n      };\n      return [service];\n    };\n    return super.open(device, ...args);\n  }\n}\n\nexport default {\n  created() {\n    this.accountFactory = null;\n  },\n  data: () => ({\n    status: '',\n    accounts: [],\n    isUsbSupported: false,\n    isBleSupported: false,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async connect(isBle) {\n      let transport;\n      try {\n        this.status = 'Waiting for Ledger response';\n        transport = await (isBle ? TransportWebBleAndroidFix : TransportWebUsb).create();\n        transport.on('disconnect', () => this.reset());\n        const factory = new AccountLedgerFactory(transport);\n        await factory.ensureReady();\n        this.accountFactory = factory;\n        this.status = '';\n      } catch (error) {\n        transport?.close();\n        if (error.name === 'TransportOpenUserCancelled') {\n          this.status = '';\n          return;\n        }\n        if (error.name === 'LockedDeviceError') {\n          this.status = 'Device is locked, please unlock it';\n          return;\n        }\n        if (error.message.includes('UNKNOWN_APDU')) {\n          this.status = 'Ensure that aeternity app is opened on Ledger HW';\n          return;\n        }\n        if (error.name === 'UnsupportedVersionError') {\n          this.status = error.message;\n          return;\n        }\n        this.status = 'Unknown error';\n        throw error;\n      }\n    },\n    reset() {\n      this.accountFactory = null;\n      this.accounts = [];\n      this.$store.commit('setAddress', undefined);\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n    },\n    async disconnect() {\n      await this.accountFactory.transport.close();\n      this.reset();\n    },\n    async addAccount(confirm) {\n      try {\n        this.status = 'Waiting for Ledger response';\n        const idx = this.accounts.length;\n        const account = await this.accountFactory.initialize(idx);\n        if (confirm) {\n          this.status = `Ensure that ${account.address} is displayed on Ledger HW screen`;\n          await this.accountFactory.getAddress(idx, true);\n        }\n        this.accounts.push(account);\n        this.setAccount(this.accounts[0]);\n      } catch (error) {\n        if (error.statusCode === 0x6985) return;\n        throw error;\n      } finally {\n        this.status = '';\n      }\n    },\n    switchAccount() {\n      this.accounts.push(this.accounts.shift());\n      this.setAccount(this.accounts[0]);\n    },\n    async discoverAccounts() {\n      this.status = 'Discovering accounts';\n      this.accounts = await this.accountFactory.discover(this.aeSdk.api);\n      this.setAccount(this.accounts[0]);\n      this.status = '';\n    },\n    async switchNode() {\n      const networkId = this.$store.state.networkId === 'ae_mainnet' ? 'ae_uat' : 'ae_mainnet';\n      const [{ name }] = (await this.aeSdk.getNodesInPool()).filter(\n        (node) => node.nodeNetworkId === networkId,\n      );\n      this.aeSdk.selectNode(name);\n      this.$store.commit('setNetworkId', networkId);\n    },\n    setAccount(account) {\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n      this.aeSdk.addAccount(account, { select: true });\n      this.$store.commit('setAddress', account.address);\n    },\n  },\n  async mounted() {\n    this.isUsbSupported = await TransportWebUsb.isSupported();\n    this.isBleSupported = await TransportWebBle.isSupported();\n    this.unsubscribeLedgerLog = listen(({ type, id, date, message }) => {\n      console.log(type, id, date.toLocaleTimeString(), message);\n    });\n  },\n  async beforeUnmount() {\n    if (this.accountFactory) this.disconnect();\n    this.unsubscribeLedgerLog();\n  },\n};\n</script>\n","import nacl from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\n\nimport { concatBuffers, isItemOfArray } from './other.js';\nimport { decode, encode, Encoded, Encoding } from './encoder.js';\nimport { ArgumentError } from './errors.js';\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nexport function encodeVarUInt(value: number): Buffer {\n  if (value < 0xfd) {\n    return Buffer.from([value]);\n  }\n  if (value <= 0xffff) {\n    return concatBuffers([Buffer.from([0xfd]), Buffer.from(new Uint16Array([value]).buffer)]);\n  }\n  if (value <= 0xffffffff) {\n    return concatBuffers([Buffer.from([0xfe]), Buffer.from(new Uint32Array([value]).buffer)]);\n  }\n  return concatBuffers([\n    Buffer.from([0xff]),\n    Buffer.from(new BigUint64Array([BigInt(value)]).buffer),\n  ]);\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = encodeVarUInt(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, encodeVarUInt(msg.length), msg]));\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n","import { BigNumber } from 'bignumber.js';\nimport { mapObject } from '../../utils/other.js';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9; // TODO: don't use number for ae\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject(\n  {\n    31: 3,\n    30: 5,\n    29: 8,\n    28: 13,\n    27: 21,\n    26: 34,\n    25: 55,\n    24: 89,\n    23: 144,\n    22: 233,\n    21: 377,\n    20: 610,\n    19: 987,\n    18: 1597,\n    17: 2584,\n    16: 4181,\n    15: 6765,\n    14: 10946,\n    13: 17711,\n    12: 28657,\n    11: 46368,\n    10: 75025,\n    9: 121393,\n    8: 196418,\n    7: 317811,\n    6: 514229,\n    5: 832040,\n    4: 1346269,\n    3: 2178309,\n    2: 3524578,\n    1: 5702887,\n  },\n  ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)],\n);\n\nexport enum ConsensusProtocolVersion {\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  SignedTx = 11,\n  SpendTx = 12,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  /**\n   * @deprecated use `OracleRespondTx` instead\n   */\n  OracleResponseTx = 24,\n  // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values\n  OracleRespondTx = 24,\n  OracleExtendTx = 25,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelSnapshotSoloTx = 59,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants.js';\nimport Node from '../../../Node.js';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3],\n      abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [],\n      abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [],\n      abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    {\n      consensusProtocolVersion = ConsensusProtocolVersion.Ceres,\n    }: { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants.js';\nimport { getProtocolDetails } from './ct-version.js';\nimport Node from '../../../Node.js';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind =\n      Tag.ContractCallTx === tag || Tag.GaMetaTx === tag ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    {\n      consensusProtocolVersion = ConsensusProtocolVersion.Ceres,\n    }: { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors.js';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors.js';\nimport { toBytes } from '../../../utils/bytes.js';\nimport { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { isItemOfArray } from '../../../utils/other.js';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = (typeof idTagToEncoding)[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n  serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n  deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n} {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(itemHandler: {\n  serialize: (value: Input, params: unknown) => Binary;\n  deserialize: (value: Binary, params: unknown) => Output;\n}): {\n  serialize: (value: readonly Input[], params: unknown) => Binary[];\n  deserialize: (value: Binary[], params: unknown) => Output[];\n} {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { BigNumber } from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto.js';\nimport { decode, encode, Encoded, Encoding } from '../../utils/encoder.js';\nimport { toBytes } from '../../utils/bytes.js';\nimport { concatBuffers } from '../../utils/other.js';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants.js';\nimport { ceil } from '../../utils/bignumber.js';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors.js';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]));\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  if (name[2] === '-' && name[3] === '-') {\n    throw new ArgumentError(\n      'aens name',\n      'without \"-\" char in both the third and fourth positions',\n      maybeName,\n    );\n  }\n  if (name[0] === '-') {\n    throw new ArgumentError('aens name', 'starting with no \"-\" char', maybeName);\n  }\n  if (name.at(-1) === '-') {\n    throw new ArgumentError('aens name', 'ending with no \"-\" char', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(name: AensName, salt: number = genSalt()): Encoded.Commitment {\n  return encode(\n    hash(\n      concatBuffers([\n        Buffer.from(nameToPunycode(name)),\n        Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n      ]),\n    ),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<(typeof encodingToPointerKey)[number][0]>,\n): (typeof encodingToPointerKey)[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  {\n    startFee,\n    increment = NAME_FEE_BID_INCREMENT,\n  }: { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0))\n    throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT)\n    throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name)).times(\n      new BigNumber(NAME_FEE_BID_INCREMENT).plus(1),\n    ),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h =\n    (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null) ??\n    (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null) ??\n    (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null) ??\n    0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers.js';\nimport { Int } from '../constants.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { toBytes } from '../../../utils/bytes.js';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport { BigNumber } from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return (\n    ['number', 'object', 'string'].includes(typeof number) &&\n    // eslint-disable-next-line no-restricted-globals\n    (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number))\n  );\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber =>\n  bigNumber.integerValue(BigNumber.ROUND_CEIL);\n","import { BigNumber } from 'bignumber.js';\nimport { isBigNumber } from './bignumber.js';\nimport { ArgumentError } from './errors.js';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  {\n    denomination = AE_AMOUNT_FORMATS.AETTOS,\n    targetDenomination = AE_AMOUNT_FORMATS.AETTOS,\n  }: { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix =>\n  prefixes.reduce((p, n) =>\n    Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p,\n  );\n\nconst getLowerBoundPrefix = (exponent: number): Prefix =>\n  prefixes.find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int.js';\nimport { Int } from '../constants.js';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter.js';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { ArgumentError } from '../../../utils/errors.js';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n  serialize: Optional extends true\n    ? (value?: Encoded.Generic<E>) => Buffer\n    : (value: Encoded.Generic<E>) => Buffer;\n  deserialize: (value: Buffer) => Encoded.Generic<E>;\n} {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { EntryTag } from '../entry/constants.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\nexport default function genEntryField<T extends EntryTag = EntryTag>(\n  tag?: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { packEntry }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(packEntry({ ...txParams, ...(tag != null && { tag }) }));\n    },\n\n    deserialize(buf, { unpackEntry }) {\n      return unpackEntry(encode(buf, Encoding.Bytearray), tag);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors.js';\nimport { isItemOfArray } from '../../../utils/other.js';\n\nexport default function genEnumerationField<Enum extends { [key: string]: number | string }>(\n  enm: Enum,\n): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { BigNumber } from 'bignumber.js';\nimport coinAmount from './coin-amount.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors.js';\nimport { Int, MIN_GAS_PRICE } from '../constants.js';\nimport Node from '../../../Node.js';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter.js';\n\nconst gasPriceCache: WeakMap<Node, { time: number; gasPrice: bigint }> = new WeakMap();\n\nexport async function getCachedIncreasedGasPrice(node: Node): Promise<bigint> {\n  const cache = gasPriceCache.get(node);\n  if (cache != null && cache.time > Date.now() - 20 * 1000) {\n    return cache.gasPrice;\n  }\n\n  const { minGasPrice, utilization } = (await node.getRecentGasPrices())[0];\n  let gasPrice =\n    utilization < 70\n      ? 0n\n      : BigInt(new BigNumber(minGasPrice.toString()).times(1.01).integerValue().toFixed());\n\n  const maxSafeGasPrice = BigInt(MIN_GAS_PRICE) * 100000n; // max microblock fee is 600ae or 35usd\n  if (gasPrice > maxSafeGasPrice) {\n    console.warn(\n      `Estimated gas price ${gasPrice} exceeds the maximum safe value for unknown reason.` +\n        ` It will be limited to ${maxSafeGasPrice}.` +\n        ' To overcome this restriction provide `gasPrice`/`fee` in options.',\n    );\n    gasPrice = maxSafeGasPrice;\n  }\n\n  gasPriceCache.set(node, { gasPrice, time: Date.now() });\n  return gasPrice;\n}\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    {\n      onNode,\n      denomination,\n    }: {\n      onNode?: Node;\n      denomination?: AE_AMOUNT_FORMATS;\n    },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `gasPrice` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return formatAmount(gasPrice, { targetDenomination: denomination });\n  },\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(\n        `Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`,\n      );\n    }\n    return value;\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors.js';\nimport { Int, MIN_GAS_PRICE, Tag } from '../constants.js';\nimport uInt from './u-int.js';\nimport coinAmount from './coin-amount.js';\nimport { getCachedIncreasedGasPrice } from './gas-price.js';\nimport { isKeyOfObject } from '../../../utils/other.js';\nimport { decode, Encoded } from '../../../utils/encoder.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\nimport Node from '../../../Node.js';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the base gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base gas\n * @example\n * ```js\n * TX_BASE_GAS(Tag.ChannelForceProgressTx) => 30 * 15000\n * ```\n */\nconst TX_BASE_GAS = (txType: Tag): number => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return factor * BASE_GAS;\n};\n\n/**\n * Calculate gas for other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The other gas\n * @example\n * ```js\n * TX_OTHER_GAS(Tag.OracleRespondTx, 10, { relativeTtl: 12, innerTxSize: 0 })\n *  => 10 * 20 + Math.ceil(32000 * 12 / Math.floor(60 * 24 * 365 / 3))\n * ```\n */\nconst TX_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): number => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleRespondTx:\n      return (\n        txSize * GAS_PER_BYTE +\n        Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL))\n      );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return (txSize - innerTxSize) * GAS_PER_BYTE;\n    default:\n      return txSize * GAS_PER_BYTE;\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleRespondTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate gas based on tx type and params\n */\nexport function buildGas(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return (\n    TX_BASE_GAS(txObject.tag) +\n    TX_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject),\n      innerTxSize,\n    })\n  );\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = new BigNumber(MIN_GAS_PRICE).times(buildGas(rebuildTx(fee), unpackTx, buildTx));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\n// TODO: Get rid of this workaround. Transaction builder can't accept/return gas price instead of\n// fee because it may get a decimal gas price. So, it should accept the optional `gasPrice` even\n// if it is not a contract-related transaction. And use this `gasPrice` to calculate `fee`.\nconst gasPricePrefix = '_gas-price:';\n\nexport interface SerializeAettosParams {\n  rebuildTx: (params: any) => Encoded.Transaction;\n  unpackTx: typeof unpackTxType;\n  buildTx: typeof buildTxType;\n  _computingMinFee?: BigNumber;\n}\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode }: { onNode?: Node },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `fee` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return gasPricePrefix + gasPrice;\n  },\n\n  serializeAettos(\n    _value: string | undefined,\n    { rebuildTx, unpackTx, buildTx, _computingMinFee }: SerializeAettosParams,\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value =\n      _value?.startsWith(gasPricePrefix) === true\n        ? minFee.dividedBy(MIN_GAS_PRICE).times(_value.replace(gasPricePrefix, ''))\n        : new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1] & SerializeAettosParams,\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    if (typeof value === 'string' && value.startsWith(gasPricePrefix)) {\n      return uInt.serialize(this.serializeAettos(value, params, options));\n    }\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import uInt from './u-int.js';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors.js';\nimport { Tag, MAX_AUTH_FUN_GAS } from '../constants.js';\nimport shortUInt from './short-u-int.js';\nimport { buildGas } from './fee.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildGas(rebuildTx(gasMax), unpackTx, buildTx);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag,\n      rebuildTx,\n      unpackTx,\n      buildTx,\n      _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax =\n      tag === Tag.GaMetaTx\n        ? MAX_AUTH_FUN_GAS\n        : calculateGasLimitMax(\n            gasMax,\n            (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n            unpackTx,\n            buildTx,\n          );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field.js';\nimport { AensName } from '../constants.js';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers.js';\nimport { InsufficientNameFeeError } from '../../../utils/errors.js';\nimport coinAmount from './coin-amount.js';\nimport { AensName, Int } from '../constants.js';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(_value: string | undefined, txFields: { name: AensName }): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<(typeof coinAmount)['serialize']>[1],\n    parameters: Parameters<(typeof coinAmount)['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants.js';\nimport { produceNameId, isNameValid } from '../helpers.js';\nimport address from './address.js';\nimport { Encoded, Encoding } from '../../../utils/encoder.js';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other.js';\nimport shortUInt from './short-u-int.js';\nimport Node from '../../../Node.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { NextNonceStrategy } from '../../../apis/node/index.js';\nimport { Tag } from '../constants.js';\n\nexport default function genNonceField<SenderKey extends string>(\n  senderKey: SenderKey,\n): {\n  serialize: (value: number, params: { tag: Tag }) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    serialize(value: number, { tag }): Buffer {\n      if (Tag.GaAttachTx === tag && value !== 1) {\n        throw new ArgumentError('nonce', 'equal 1 if GaAttachTx', value);\n      }\n      return shortUInt.serialize(value);\n    },\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode\n          .getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node/index.js';\nimport { toBytes } from '../../../utils/bytes.js';\nimport { Encoded, Encoding, decode, encode } from '../../../utils/encoder.js';\nimport { isAddressValid } from '../../../utils/crypto.js';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors.js';\nimport address, { AddressEncodings, idTagToEncoding } from './address.js';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\ntype NamePointerRaw = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default <AllowRaw extends boolean>(\n  allowRaw: AllowRaw,\n): {\n  serialize: (pointers: Array<AllowRaw extends true ? NamePointerRaw : NamePointer>) => Buffer[][];\n  deserialize: (\n    pointers: Array<[key: Buffer, id: Buffer]>,\n  ) => Array<AllowRaw extends true ? NamePointerRaw : NamePointer>;\n} => ({\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers) {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(\n        `Expected 32 pointers or less, got ${pointers.length} instead`,\n      );\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) {\n        payload = [...(allowRaw ? [ID_TAG] : []), addressAny.serialize(id)];\n      }\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError(\n            'Raw pointer',\n            `shorter than ${DATA_LENGTH_MAX + 1} bytes`,\n            `${data.length} bytes`,\n          );\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers) {\n    return pointers.map(([bKey, bId]) => {\n      if (!allowRaw) return { key: bKey.toString(), id: addressAny.deserialize(bId) };\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      // TS can't figure out the real type depending on allowRaw\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray) as Encoded.AccountAddress;\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n});\n","import coinAmount from './coin-amount.js';\nimport { Int } from '../constants.js';\nimport Node from '../../../Node.js';\nimport { Encoded } from '../../../utils/encoder.js';\nimport { ArgumentError } from '../../../utils/errors.js';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors.js';\nimport shortUInt from './short-u-int.js';\n\nexport default function genShortUIntConstField<\n  Value extends number,\n  Optional extends boolean = false,\n>(\n  constValue: Value,\n  optional?: Optional,\n): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes.js';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { Tag } from '../constants.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\n\nexport default function genTransactionField<T extends Tag = Tag>(\n  tag?: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...(tag != null && { tag }) }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      return unpackTx(encode(buf, Encoding.Transaction), tag);\n    },\n  };\n}\n","import { ArgumentError } from './errors.js';\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(\n      (\n        [\n          'apply',\n          'construct',\n          'defineProperty',\n          'deleteProperty',\n          'getOwnPropertyDescriptor',\n          'getPrototypeOf',\n          'isExtensible',\n          'ownKeys',\n          'preventExtensions',\n          'set',\n          'setPrototypeOf',\n          'get',\n          'has',\n        ] as const\n      ).map((name) => [\n        name,\n        (t: {}, ...args: unknown[]) => {\n          const target = valueCb();\n          if (target == null) throw new ArgumentError('wrapped value', 'defined', target);\n          if (name === 'get' && args[0] === '_wrappedValue') return target;\n          const res = (Reflect[name] as any)(target, ...args);\n          return typeof res === 'function' && name === 'get' ? res.bind(target) : res;\n        },\n      ]),\n    ),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter.js';\nimport { isAccountNotFoundError, pause } from './utils/other.js';\nimport { unwrapProxy } from './utils/wrap-proxy.js';\nimport { isNameValid, produceNameId } from './tx/builder/helpers.js';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants.js';\nimport {\n  AensPointerContextError,\n  DryRunError,\n  InvalidAensNameError,\n  TxTimedOutError,\n  TxNotInChainError,\n  InternalError,\n} from './utils/errors.js';\nimport Node from './Node.js';\nimport { DryRunResult, DryRunResults, SignedTx } from './apis/node/index.js';\nimport { decode, encode, Encoded, Encoding } from './utils/encoder.js';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport async function _getPollInterval(\n  type: 'key-block' | 'micro-block',\n  {\n    _expectedMineRate,\n    _microBlockCycle,\n    onNode,\n  }: { _expectedMineRate?: number; _microBlockCycle?: number; onNode: Node },\n): Promise<number> {\n  const getVal = async (\n    t: string,\n    val: number | undefined,\n    devModeDef: number,\n    def: number,\n  ): Promise<number | null> => {\n    if (t !== type) return null;\n    if (val != null) return val;\n    return (await onNode?.getNetworkId()) === 'ae_dev' ? devModeDef : def;\n  };\n\n  const base =\n    (await getVal('key-block', _expectedMineRate, 0, 180000)) ??\n    (await getVal('micro-block', _microBlockCycle, 0, 3000)) ??\n    (() => {\n      throw new InternalError(`Unknown type: ${type}`);\n    })();\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight({\n  cached = false,\n  ...options\n}: {\n  onNode: Node;\n  cached?: boolean;\n} & Parameters<typeof _getPollInterval>[1]): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache != null && cache.time > Date.now() - (await _getPollInterval('key-block', options))) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Return transaction details if it is mined, fail otherwise.\n * If the transaction has ttl specified then would wait till it leaves the mempool.\n * Otherwise would fail if a specified amount of blocks were mined.\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail if transaction ttl is not set\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5,\n    interval,\n    ...options\n  }: { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): ReturnType<Node['getTransactionByHash']> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let max;\n  do {\n    const tx = await options.onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    if (max == null) {\n      max = tx.tx.ttl !== 0 ? -1 : (await getHeight({ ...options, cached: true })) + blocks;\n    }\n    await pause(interval);\n  } while (max === -1 ? true : (await getHeight({ ...options, cached: true })) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  {\n    interval,\n    ...options\n  }: { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(await _getPollInterval('key-block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight(options);\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  {\n    confirm = 3,\n    onNode,\n    ...options\n  }: { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  {\n    height,\n    hash,\n    onNode,\n  }: { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): ReturnType<Node['getAccountByPubkey']> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  {\n    format = AE_AMOUNT_FORMATS.AETTOS,\n    ...options\n  }: { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : (address as Encoded.AccountAddress | Encoded.ContractAddress);\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration({\n  onNode,\n}: {\n  onNode: Node;\n}): ReturnType<Node['getCurrentGeneration']> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getGenerationByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<SignedTx[]> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getKeyBlockByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getMicroBlockHeaderByHash']> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError(\"Can't get dry-run request\");\n\n  let dryRunRes;\n  try {\n    const top =\n      typeof rs[0].top === 'number' ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress))).map((pubKey) => ({\n        pubKey,\n        amount: DRY_RUN_ACCOUNT.amount,\n      })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const { resolve, reject, tx, accountAddress } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top,\n    txEvents,\n    combine,\n    onNode,\n  }: { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{ txEvents?: DryRunResults['txEvents'] } & DryRunResult> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx,\n      accountAddress,\n      top,\n      txEvents,\n      resolve,\n      reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => {\n      void txDryRunHandler(key, onNode);\n    });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContractCode']> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContract']> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getNameEntryByName']> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName<Type extends Encoding.AccountAddress | Encoding.ContractAddress>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  {\n    verify = true,\n    resolveByNode = false,\n    onNode,\n  }: { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int.js';\nimport Node from '../../../Node.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { _getPollInterval, getHeight } from '../../../chain.js';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    {\n      onNode,\n      absoluteTtl,\n      _isInternalBuild,\n      ...options\n    }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n      _isInternalBuild?: boolean;\n    } & Omit<Parameters<typeof _getPollInterval>[1], 'onNode'>,\n  ) {\n    if (absoluteTtl !== true && value !== 0 && (value != null || _isInternalBuild === true)) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value = (value ?? 3) + (await getHeight({ ...options, onNode, cached: true }));\n    }\n    return value;\n  },\n};\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n  serialize: (value: Input | undefined, params: unknown) => Binary;\n  deserialize: (value: Binary, params: unknown) => Output;\n} {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n  serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n  deserialize: (value: Binary) => Output;\n} {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","export enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n/**\n * @category entry building\n */\nexport enum EntryTag {\n  Account = 10,\n  Oracle = 20,\n  // OracleQuery = 21,\n  Name = 30,\n  // NameCommitment = 31,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  Channel = 58,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaMetaTxAuthData = 810,\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants.js';\nimport SchemaTypes from './SchemaTypes.js';\nimport abiVersion from './field-types/abi-version.js';\nimport address, { idTagToEncoding } from './field-types/address.js';\nimport array from './field-types/array.js';\nimport coinAmount from './field-types/coin-amount.js';\nimport ctVersion from './field-types/ct-version.js';\nimport encoded from './field-types/encoded.js';\nimport entry from './field-types/entry.js';\nimport enumeration from './field-types/enumeration.js';\nimport fee from './field-types/fee.js';\nimport gasLimit from './field-types/gas-limit.js';\nimport gasPrice from './field-types/gas-price.js';\nimport name from './field-types/name.js';\nimport nameFee from './field-types/name-fee.js';\nimport nameId from './field-types/name-id.js';\nimport nonce from './field-types/nonce.js';\nimport pointers from './field-types/pointers.js';\nimport queryFee from './field-types/query-fee.js';\nimport raw from './field-types/raw.js';\nimport shortUInt from './field-types/short-u-int.js';\nimport shortUIntConst from './field-types/short-u-int-const.js';\nimport string from './field-types/string.js';\nimport transaction from './field-types/transaction.js';\nimport ttl from './field-types/ttl.js';\nimport uInt from './field-types/u-int.js';\nimport withDefault from './field-types/with-default.js';\nimport withFormatting from './field-types/with-formatting.js';\nimport { Encoded, Encoding } from '../../utils/encoder.js';\nimport { ArgumentError } from '../../utils/errors.js';\nimport { EntryTag } from './entry/constants.js';\nimport { EntParams, EntUnpacked } from './entry/schema.generated.js';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface TransactionAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst transactionAny = transaction() as unknown as TransactionAny;\n\ninterface TransactionSignedTx {\n  serialize: (\n    value: (TxParams & { tag: Tag.SignedTx }) | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst transactionSignedTx = transaction(Tag.SignedTx) as unknown as TransactionSignedTx;\n\ninterface EntryTreesPoi {\n  serialize: (\n    value: (EntParams & { tag: EntryTag.TreesPoi }) | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => EntUnpacked & { tag: EntryTag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(EntryTag.TreesPoi) as unknown as EntryTreesPoi;\n\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\n/**\n * Name ttl represented in number of blocks (Max value is 50000 blocks)\n */\nconst nameTtl = withFormatting((value) => {\n  const NAME_TTL = 180000;\n  value ??= NAME_TTL;\n  if (value >= 1 && value <= NAME_TTL) return value;\n  throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n}, shortUInt);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [\n  {\n    tag: shortUIntConst(Tag.SignedTx),\n    version: shortUIntConst(1, true),\n    signatures: array(raw), // TODO: use sg_ (Encoding.Signature) instead\n    encodedTx: transactionAny,\n  },\n  {\n    tag: shortUIntConst(Tag.SpendTx),\n    version: shortUIntConst(1, true),\n    senderId: address(Encoding.AccountAddress),\n    // TODO: accept also an AENS name\n    recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n    amount: coinAmount,\n    fee,\n    ttl,\n    nonce: nonce('senderId'),\n    payload: encoded(Encoding.Bytearray, true),\n  },\n  {\n    tag: shortUIntConst(Tag.NamePreclaimTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    commitmentId: address(Encoding.Commitment),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameClaimTx),\n    version: shortUIntConst(2, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    name,\n    nameSalt: withDefault(0, uInt),\n    nameFee,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameUpdateTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    nameTtl,\n    pointers: pointers(false),\n    clientTtl,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameUpdateTx),\n    version: shortUIntConst(2),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    nameTtl,\n    pointers: pointers(true),\n    clientTtl,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameTransferTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    // TODO: accept also an AENS name\n    recipientId: address(Encoding.AccountAddress, Encoding.Name),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameRevokeTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.ContractCreateTx),\n    version: shortUIntConst(1, true),\n    ownerId: address(Encoding.AccountAddress),\n    nonce: nonce('ownerId'),\n    code: encoded(Encoding.ContractBytearray),\n    ctVersion,\n    fee,\n    ttl,\n    deposit: withFormatting((value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    }, coinAmount),\n    amount: coinAmount,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.ContractCallTx),\n    version: shortUIntConst(1, true),\n    callerId: address(Encoding.AccountAddress),\n    nonce: nonce('callerId'),\n    // TODO: accept also an AENS name\n    contractId: address(Encoding.ContractAddress, Encoding.Name),\n    abiVersion,\n    fee,\n    ttl,\n    amount: coinAmount,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.OracleRegisterTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    queryFormat: string,\n    responseFormat: string,\n    queryFee: coinAmount,\n    oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    oracleTtlValue: withDefault(500, shortUInt),\n    fee,\n    ttl,\n    abiVersion,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleExtendTx),\n    version: shortUIntConst(1, true),\n    // TODO: accept also an AENS name\n    oracleId: address(Encoding.OracleAddress, Encoding.Name),\n    nonce: nonce('oracleId'),\n    oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    oracleTtlValue: withDefault(500, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleQueryTx),\n    version: shortUIntConst(1, true),\n    senderId: address(Encoding.AccountAddress),\n    nonce: nonce('senderId'),\n    // TODO: accept also an AENS name\n    oracleId: address(Encoding.OracleAddress, Encoding.Name),\n    query: string,\n    queryFee,\n    queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    queryTtlValue: withDefault(10, shortUInt),\n    responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    responseTtlValue: withDefault(10, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleRespondTx),\n    version: shortUIntConst(1, true),\n    oracleId: address(Encoding.OracleAddress),\n    nonce: nonce('oracleId'),\n    queryId: encoded(Encoding.OracleQueryId),\n    response: string,\n    responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    responseTtlValue: withDefault(10, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCreateTx),\n    version: shortUIntConst(2, true),\n    initiator: address(Encoding.AccountAddress),\n    initiatorAmount: uInt,\n    responder: address(Encoding.AccountAddress),\n    responderAmount: uInt,\n    channelReserve: uInt,\n    lockPeriod: uInt,\n    ttl,\n    fee,\n    initiatorDelegateIds: array(address(...idTagToEncoding)),\n    responderDelegateIds: array(address(...idTagToEncoding)),\n    stateHash: encoded(Encoding.State),\n    nonce: nonce('initiator'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    initiatorAmountFinal: uInt,\n    responderAmountFinal: uInt,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    poi: entryTreesPoi,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSlashTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    poi: entryTreesPoi,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelDepositTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    amount: uInt,\n    ttl,\n    fee,\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelWithdrawTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    toId: address(Encoding.AccountAddress),\n    amount: uInt,\n    ttl,\n    fee,\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSettleTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    initiatorAmountFinal: uInt,\n    responderAmountFinal: uInt,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelForceProgressTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    round: shortUInt,\n    update: encoded(Encoding.ContractBytearray),\n    stateHash: encoded(Encoding.State),\n    offChainTrees: encoded(Encoding.StateTrees),\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelOffChainTx),\n    version: shortUIntConst(2, true),\n    channelId: address(Encoding.Channel),\n    round: shortUInt,\n    stateHash: encoded(Encoding.State),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.GaAttachTx),\n    version: shortUIntConst(1, true),\n    ownerId: address(Encoding.AccountAddress),\n    nonce: nonce('ownerId'),\n    code: encoded(Encoding.ContractBytearray),\n    authFun: raw,\n    ctVersion,\n    fee,\n    ttl,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.GaMetaTx),\n    version: shortUIntConst(2, true),\n    gaId: address(Encoding.AccountAddress),\n    authData: encoded(Encoding.ContractBytearray),\n    abiVersion,\n    fee,\n    gasLimit,\n    gasPrice,\n    tx: transactionSignedTx,\n  },\n  {\n    tag: shortUIntConst(Tag.PayingForTx),\n    version: shortUIntConst(1, true),\n    payerId: address(Encoding.AccountAddress),\n    nonce: nonce('payerId'),\n    fee,\n    tx: transactionSignedTx,\n  },\n] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types/interface.js';\nimport {\n  ArgumentError,\n  DecodeError,\n  SchemaNotFoundError,\n  InternalError,\n} from '../../utils/errors.js';\nimport { Encoding, Encoded, encode, decode } from '../../utils/encoder.js';\nimport { readInt } from './helpers.js';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null)\n      throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) =>\n    field.serialize(params[key], { ...params, ...extraParams }, params),\n  );\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name,\n      field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { EntryTag } from '../entry/constants.js';\nimport { encode, Encoding, Encoded, decode } from '../../../utils/encoder.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\nexport default function genMapField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { packEntry }) {\n      return decode(\n        packEntry({\n          tag: EntryTag.Mtree,\n          values: Object.entries(object).map(\n            ([key, value]) =>\n              ({\n                tag: EntryTag.MtreeValue,\n                key: decode(key as Encoded.Generic<E>),\n                value: decode(packEntry({ ...(value as any), tag })),\n              }) as const,\n          ),\n        }),\n      );\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      const { values } = unpackEntry(encode(buffer, Encoding.Bytearray), EntryTag.Mtree);\n      return Object.fromEntries(\n        values\n          // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n          .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n          .map(({ key, value }) => [\n            encode(key, encoding),\n            unpackEntry(encode(value, Encoding.Bytearray), tag),\n          ]),\n      ) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { EntryTag } from '../entry/constants.js';\nimport { hash } from '../../../utils/crypto.js';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport type { unpackEntry } from '../entry/index.js';\nimport type { EntUnpacked } from '../entry/schema.generated.js';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends EntryTag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackEntry: typeof unpackEntry;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpEnt - Implementation of unpackEntry use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpEnt: typeof unpackEntry) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackEntry = unpEnt;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(binary[1].map((node) => [node[0].toString('hex'), node[1]]));\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError(\"Can't find a node by root hash\");\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError(\"Can't find a node by hash in extension node\");\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...(node[16].length !== 0 && { value: node[16] }),\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...(type === NodeType.Leaf && { value: node[1] }),\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => [Buffer.from(mptHash, 'hex'), value]),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) {\n      // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError(\"Can't find node in complete tree\");\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): (EntUnpacked & { tag: T }) | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackEntry(encode(d, Encoding.Bytearray), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError(\"Can't find node in complete tree\");\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, EntUnpacked & { tag: T }> {\n    return Object.fromEntries(\n      this.#entriesRaw()\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n        .map(([k, v]) => [\n          encode(Buffer.from(k, 'hex'), this.#encoding),\n          this.#unpackEntry(encode(v, Encoding.Bytearray), this.#tag),\n        ]),\n    ) as Record<Encoded.Generic<E>, EntUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackEntry: typeof unpackEntry }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackEntry }) {\n      return new MPTree(value, encoding, tag, unpackEntry);\n    },\n  };\n}\n","import { EntryTag } from '../entry/constants.js';\nimport { encode, Encoding, decode } from '../../../utils/encoder.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\ntype TagWrapping =\n  | EntryTag.AccountsMtree\n  | EntryTag.CallsMtree\n  | EntryTag.ChannelsMtree\n  | EntryTag.ContractsMtree\n  | EntryTag.NameserviceMtree\n  | EntryTag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(\n  tag: T,\n): {\n  serialize: (\n    // TODO: replace with `(EntParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `(EntUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { packEntry }) {\n      return decode(packEntry({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      return unpackEntry<TagWrapping>(encode(buffer, Encoding.Bytearray), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import SchemaTypes from '../SchemaTypes.js';\nimport abiVersion from '../field-types/abi-version.js';\nimport address, { idTagToEncoding } from '../field-types/address.js';\nimport array from '../field-types/array.js';\nimport boolean from '../field-types/boolean.js';\nimport coinAmount from '../field-types/coin-amount.js';\nimport ctVersion from '../field-types/ct-version.js';\nimport encoded from '../field-types/encoded.js';\nimport entry from '../field-types/entry.js';\nimport enumeration from '../field-types/enumeration.js';\nimport gasLimit from '../field-types/gas-limit.js';\nimport gasPrice from '../field-types/gas-price.js';\nimport map from '../field-types/map.js';\nimport mptree from '../field-types/mptree.js';\nimport pointers from '../field-types/pointers.js';\nimport raw from '../field-types/raw.js';\nimport shortUInt from '../field-types/short-u-int.js';\nimport shortUIntConst from '../field-types/short-u-int-const.js';\nimport string from '../field-types/string.js';\nimport uInt from '../field-types/u-int.js';\nimport wrapped from '../field-types/wrapped.js';\nimport { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { EntryTag, CallReturnType } from './constants.js';\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<(EntParams & { tag: EntryTag.MtreeValue }) | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<EntUnpacked & { tag: EntryTag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(EntryTag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, EntParams & { tag: EntryTag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, EntUnpacked & { tag: EntryTag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, EntryTag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, EntParams & { tag: EntryTag.Account }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.AccountAddress, EntUnpacked & { tag: EntryTag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, EntryTag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, EntParams & { tag: EntryTag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.Bytearray, EntUnpacked & { tag: EntryTag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, EntryTag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (value: Record<Encoded.Channel, EntParams & { tag: EntryTag.Channel }>) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, EntUnpacked & { tag: EntryTag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, EntryTag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (value: Record<Encoded.Name, EntParams & { tag: EntryTag.Name }>) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, EntUnpacked & { tag: EntryTag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, EntryTag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (value: Record<Encoded.OracleAddress, EntParams & { tag: EntryTag.Oracle }>) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.OracleAddress, EntUnpacked & { tag: EntryTag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, EntryTag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [\n  {\n    tag: shortUIntConst(EntryTag.Account),\n    version: shortUIntConst(1),\n    nonce: shortUInt,\n    balance: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Account),\n    version: shortUIntConst(2, true),\n    flags: uInt,\n    nonce: shortUInt,\n    balance: uInt,\n    gaContract: address(Encoding.ContractAddress, Encoding.Name),\n    gaAuthFun: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.Name),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nameTtl: shortUInt,\n    status: raw,\n    /**\n     * a suggestion as to how long any clients should cache this information\n     */\n    clientTtl: shortUInt,\n    pointers,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Contract),\n    version: shortUIntConst(1, true),\n    owner: address(Encoding.AccountAddress),\n    ctVersion,\n    code: encoded(Encoding.ContractBytearray),\n    log: encoded(Encoding.ContractBytearray),\n    active: boolean,\n    referers: array(address(Encoding.AccountAddress)),\n    deposit: coinAmount,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ContractCall),\n    version: shortUIntConst(2, true),\n    callerId: address(Encoding.AccountAddress),\n    callerNonce: shortUInt,\n    height: shortUInt,\n    contractId: address(Encoding.ContractAddress),\n    // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n    gasPrice: uInt,\n    gasUsed: shortUInt,\n    returnValue: encoded(Encoding.ContractBytearray),\n    returnType: enumeration(CallReturnType),\n    // TODO: add serialization for\n    //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n    log: array(raw),\n  },\n  {\n    tag: shortUIntConst(EntryTag.Oracle),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    queryFormat: string,\n    responseFormat: string,\n    queryFee: coinAmount,\n    oracleTtlValue: shortUInt,\n    abiVersion,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Channel),\n    version: shortUIntConst(3, true),\n    initiator: address(Encoding.AccountAddress),\n    responder: address(Encoding.AccountAddress),\n    channelAmount: uInt,\n    initiatorAmount: uInt,\n    responderAmount: uInt,\n    channelReserve: uInt,\n    initiatorDelegateIds: array(address(...idTagToEncoding)),\n    responderDelegateIds: array(address(...idTagToEncoding)),\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    soloRound: uInt,\n    lockPeriod: uInt,\n    lockedUntil: uInt,\n    initiatorAuth: encoded(Encoding.ContractBytearray),\n    responderAuth: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateTransfer),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    to: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateDeposit),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateWithdraw),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCreateContract),\n    version: shortUIntConst(1, true),\n    owner: address(Encoding.AccountAddress),\n    ctVersion,\n    code: encoded(Encoding.ContractBytearray),\n    deposit: uInt,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCallContract),\n    version: shortUIntConst(1, true),\n    caller: address(Encoding.AccountAddress),\n    contract: address(Encoding.ContractAddress),\n    abiVersion,\n    amount: uInt,\n    callData: encoded(Encoding.ContractBytearray),\n    callStack: raw,\n    gasPrice,\n    gasLimit,\n  },\n  {\n    tag: shortUIntConst(EntryTag.TreesPoi),\n    version: shortUIntConst(1, true),\n    // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n    accounts: array(mptree(Encoding.AccountAddress, EntryTag.Account)),\n    calls: array(mptree(Encoding.Bytearray, EntryTag.ContractCall)),\n    channels: array(mptree(Encoding.Channel, EntryTag.Channel)),\n    contracts: array(mptree(Encoding.ContractAddress, EntryTag.Contract)),\n    ns: array(mptree(Encoding.Name, EntryTag.Name)),\n    oracles: array(mptree(Encoding.OracleAddress, EntryTag.Oracle)),\n  },\n  {\n    tag: shortUIntConst(EntryTag.StateTrees),\n    version: shortUIntConst(0, true),\n    contracts: wrapped(EntryTag.ContractsMtree) as unknown as MapContracts,\n    calls: wrapped(EntryTag.CallsMtree) as unknown as MapCalls,\n    channels: wrapped(EntryTag.ChannelsMtree) as unknown as MapChannels,\n    ns: wrapped(EntryTag.NameserviceMtree) as unknown as MapNames,\n    oracles: wrapped(EntryTag.OraclesMtree) as unknown as MapOracles,\n    accounts: wrapped(EntryTag.AccountsMtree) as unknown as MapAccounts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Mtree),\n    version: shortUIntConst(1, true),\n    values: entryMtreeValueArray,\n  },\n  {\n    tag: shortUIntConst(EntryTag.MtreeValue),\n    version: shortUIntConst(1, true),\n    key: raw,\n    value: raw,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ContractsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapContracts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.CallsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapCalls,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapChannels,\n  },\n  {\n    tag: shortUIntConst(EntryTag.NameserviceMtree),\n    version: shortUIntConst(1, true),\n    payload: mapNames,\n  },\n  {\n    tag: shortUIntConst(EntryTag.OraclesMtree),\n    version: shortUIntConst(1, true),\n    payload: mapOracles,\n  },\n  {\n    tag: shortUIntConst(EntryTag.AccountsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapAccounts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.GaMetaTxAuthData),\n    version: shortUIntConst(1, true),\n    fee: coinAmount,\n    gasPrice,\n    txHash: encoded(Encoding.TxHash),\n  },\n] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type EntParams = Schemas['TxParams'];\nexport type EntUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { packRecord, unpackRecord } from '../common.js';\nimport { schemas } from './schema.js';\nimport { EntryTag } from './constants.js';\nimport { EntParams, EntUnpacked } from './schema.generated.js';\n\nconst encodingTag = [\n  [EntryTag.CallsMtree, Encoding.CallStateTree],\n  [EntryTag.StateTrees, Encoding.StateTrees],\n  [EntryTag.TreesPoi, Encoding.Poi],\n] as const;\n\nexport function packEntry(params: EntParams & { tag: EntryTag.CallsMtree }): Encoded.CallStateTree;\nexport function packEntry(params: EntParams & { tag: EntryTag.StateTrees }): Encoded.StateTrees;\nexport function packEntry(params: EntParams & { tag: EntryTag.TreesPoi }): Encoded.Poi;\n/**\n * Pack entry\n * @category entry builder\n * @param params - Params of entry\n * @returns Encoded entry\n */\nexport function packEntry(params: EntParams): Encoded.Any;\nexport function packEntry(params: EntParams): Encoded.Any {\n  const encoding = encodingTag.find(([tag]) => tag === params.tag)?.[1] ?? Encoding.Bytearray;\n  return packRecord(schemas, EntryTag, params, { packEntry }, encoding);\n}\n\nexport function unpackEntry(\n  encoded: Encoded.CallStateTree,\n): EntUnpacked & { tag: EntryTag.CallsMtree };\nexport function unpackEntry(\n  encoded: Encoded.StateTrees,\n): EntUnpacked & { tag: EntryTag.StateTrees };\nexport function unpackEntry(encoded: Encoded.Poi): EntUnpacked & { tag: EntryTag.TreesPoi };\n/**\n * Unpack entry\n * @category entry builder\n * @param encoded - Encoded entry\n * @param expectedTag - Expected entry type\n * @returns Params of entry\n */\nexport function unpackEntry<T extends EntryTag>(\n  encoded: Encoded.Any,\n  expectedTag?: T,\n): EntUnpacked & { tag: T };\nexport function unpackEntry(encoded: Encoded.Any, expectedTag?: EntryTag): EntUnpacked {\n  expectedTag ??= encodingTag.find(([, enc]) => encoded.startsWith(enc))?.[0];\n  return unpackRecord(schemas, EntryTag, encoded, expectedTag, { unpackEntry }) as any;\n}\n","import { decode, encode, Encoded, Encoding } from '../../utils/encoder.js';\nimport { hash } from '../../utils/crypto.js';\nimport { Field } from './field-types/interface.js';\nimport { txSchema } from './schema.js';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated.js';\nimport { Tag } from './constants.js';\nimport { buildContractId } from './helpers.js';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common.js';\nimport { ArgumentError } from '../../utils/errors.js';\nimport { packEntry, unpackEntry } from './entry/index.js';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding =\n  | Encoding.Transaction\n  | Encoding.Poi\n  | Encoding.StateTrees\n  | Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction {\n  return packRecord(\n    txSchema,\n    Tag,\n    params,\n    {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      unpackTx,\n      buildTx,\n      rebuildTx: (overrideParams: any) => buildTx({ ...params, ...overrideParams }),\n      packEntry,\n    },\n    Encoding.Transaction,\n  );\n}\n\nexport type BuildTxOptions<TxType extends Tag, OmitFields extends string> = Omit<\n  TxParamsAsync & { tag: TxType },\n  'tag' | OmitFields\n>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version).map(async ([key, field]) => {\n      if (field.prepare == null) return;\n      // @ts-expect-error the type of `params[key]` can't be determined accurately\n      params[key] = await field.prepare(params[key], params, params);\n    }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, { unpackTx, unpackEntry }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_') ? decode(rawTx) : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import type Transport from '@ledgerhq/hw-transport';\nimport AccountBase from './Base.js';\nimport { ArgumentError, NotImplementedError } from '../utils/errors.js';\nimport { decode, Encoded } from '../utils/encoder.js';\nimport { buildTx } from '../tx/builder/index.js';\nimport { Tag } from '../tx/builder/constants.js';\n\nexport const CLA = 0xe0;\nexport const GET_ADDRESS = 0x02;\nexport const SIGN_TRANSACTION = 0x04;\nexport const GET_APP_CONFIGURATION = 0x06;\nexport const SIGN_PERSONAL_MESSAGE = 0x08;\n\n/**\n * Ledger wallet account class\n */\nexport default class AccountLedger extends AccountBase {\n  /**\n   * @param transport - Connection to Ledger to use\n   * @param index - Index of account\n   * @param address - Address of account\n   */\n  constructor(\n    readonly transport: Transport,\n    readonly index: number,\n    override readonly address: Encoded.AccountAddress,\n  ) {\n    super();\n    transport.decorateAppAPIMethods(this, ['signTransaction', 'signMessage'], 'w0w');\n  }\n\n  /**\n   * @deprecated Use `unsafeSign` method instead\n   */\n  // eslint-disable-next-line class-methods-use-this\n  override async sign(): Promise<Uint8Array> {\n    return this.unsafeSign();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async unsafeSign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using Ledger HW');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signTypedData(): Promise<Encoded.Signature> {\n    throw new NotImplementedError('Typed data signing using Ledger HW');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signDelegation(): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signing delegation using Ledger HW');\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (innerTx != null) throw new NotImplementedError('innerTx option in AccountLedger');\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n\n    const rawTx = decode(tx);\n    let offset = 0;\n    const headerLength = 4 + 1 + 4;\n    const networkIdBuffer = Buffer.from(networkId);\n    const toSend = [];\n    while (offset !== rawTx.length) {\n      const maxChunkSize = offset === 0 ? 150 - headerLength - networkIdBuffer.length : 150;\n      const chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n      const buffer = Buffer.alloc(\n        offset === 0 ? headerLength + networkIdBuffer.length + chunkSize : chunkSize,\n      );\n      if (offset === 0) {\n        let bufferOffset = buffer.writeUInt32BE(this.index, 0);\n        bufferOffset = buffer.writeUInt32BE(rawTx.length, bufferOffset);\n        bufferOffset = buffer.writeUInt8(networkIdBuffer.length, bufferOffset);\n        bufferOffset += networkIdBuffer.copy(buffer, bufferOffset, 0, networkIdBuffer.length);\n        rawTx.copy(buffer, bufferOffset, 0, 150 - bufferOffset);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    const response = await toSend.reduce(\n      async (previous, data, i) => {\n        await previous;\n        return this.transport.send(CLA, SIGN_TRANSACTION, i === 0 ? 0x00 : 0x80, 0x00, data);\n      },\n      Promise.resolve(Buffer.alloc(0)),\n    );\n    const signatures = [response.subarray(0, 64)];\n\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rawTx, signatures });\n  }\n\n  override async signMessage(messageStr: string): Promise<Uint8Array> {\n    let offset = 0;\n    const message = Buffer.from(messageStr);\n    const toSend = [];\n    while (offset !== message.length) {\n      const maxChunkSize = offset === 0 ? 150 - 4 - 4 : 150;\n      const chunkSize =\n        offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n      const buffer = Buffer.alloc(offset === 0 ? 4 + 4 + chunkSize : chunkSize);\n      if (offset === 0) {\n        buffer.writeUInt32BE(this.index, 0);\n        buffer.writeUInt32BE(message.length, 4);\n        message.copy(buffer, 4 + 4, offset, offset + chunkSize);\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    const response = await toSend.reduce(\n      async (previous, data, i) => {\n        await previous;\n        return this.transport.send(CLA, SIGN_PERSONAL_MESSAGE, i === 0 ? 0x00 : 0x80, 0x00, data);\n      },\n      Promise.resolve(Buffer.alloc(0)),\n    );\n    return response.subarray(0, 64);\n  }\n}\n","function verCmp(a: string, b: string): number {\n  const getComponents = (v: string): number[] =>\n    v\n      .split(/[-+]/)[0]\n      .split('.')\n      .map((i) => +i);\n\n  const aComponents = getComponents(a);\n  const bComponents = getComponents(b);\n\n  const base = Math.max(...aComponents, ...bComponents) + 1;\n  const componentsToNumber = (components: number[]): number =>\n    components.reverse().reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  return componentsToNumber(aComponents) - componentsToNumber(bComponents);\n}\n\nexport default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion?: string,\n): boolean {\n  return verCmp(version, geVersion) >= 0 && (ltVersion == null || verCmp(version, ltVersion) < 0);\n}\n","import Node from '../Node.js';\nimport AccountBase from './Base.js';\n\n/**\n * A factory class that generates instances of AccountBase by index.\n */\nexport default abstract class AccountBaseFactory {\n  /**\n   * Get an instance of AccountBase for a given account index.\n   * @param accountIndex - Index of account\n   */\n  abstract initialize(accountIndex: number): Promise<AccountBase>;\n\n  /**\n   * Discovers accounts in set that already have been used (has any on-chain transactions).\n   * It returns an empty array if none of accounts been used.\n   * If a used account is preceded by an unused account then it would be ignored.\n   * @param node - Instance of Node to get account information from\n   */\n  async discover(node: Node): Promise<AccountBase[]> {\n    let index = 0;\n    const result = [];\n    let account;\n    do {\n      if (account != null) result.push(account);\n      account = await this.initialize(index);\n      index += 1;\n    } while (\n      await node.getAccountByPubkey(account.address).then(\n        () => true,\n        () => false,\n      )\n    );\n    return result;\n  }\n}\n","import type Transport from '@ledgerhq/hw-transport';\nimport AccountLedger, { CLA, GET_ADDRESS, GET_APP_CONFIGURATION } from './Ledger.js';\nimport { UnsupportedVersionError } from '../utils/errors.js';\nimport { Encoded } from '../utils/encoder.js';\nimport semverSatisfies from '../utils/semver-satisfies.js';\nimport AccountBaseFactory from './BaseFactory.js';\n\ninterface AppConfiguration {\n  version: string;\n}\n\n/**\n * A factory class that generates instances of AccountLedger based on provided transport.\n */\nexport default class AccountLedgerFactory extends AccountBaseFactory {\n  /**\n   * @param transport - Connection to Ledger to use\n   */\n  constructor(readonly transport: Transport) {\n    super();\n    transport.decorateAppAPIMethods(this, ['getAddress', 'getAppConfiguration'], 'w0w');\n  }\n\n  #ensureReadyPromise?: Promise<void>;\n\n  /**\n   * It throws an exception if Aeternity app on Ledger has an incompatible version, not opened or\n   * not installed.\n   */\n  async ensureReady(): Promise<void> {\n    const { version } = await this.#getAppConfiguration();\n    const args = [version, '0.4.4', '0.5.0'] as const;\n    if (!semverSatisfies(...args))\n      throw new UnsupportedVersionError('Aeternity app on Ledger', ...args);\n    this.#ensureReadyPromise = Promise.resolve();\n  }\n\n  async #ensureReady(): Promise<void> {\n    this.#ensureReadyPromise ??= this.ensureReady();\n    return this.#ensureReadyPromise;\n  }\n\n  async #getAppConfiguration(): Promise<AppConfiguration> {\n    const response = await this.transport.send(CLA, GET_APP_CONFIGURATION, 0x00, 0x00);\n    return {\n      version: [response[1], response[2], response[3]].join('.'),\n    };\n  }\n\n  /**\n   * @returns the version of Aeternity app installed on Ledger wallet\n   */\n  async getAppConfiguration(): Promise<AppConfiguration> {\n    return this.#getAppConfiguration();\n  }\n\n  /**\n   * Get `ak_`-prefixed address for a given account index.\n   * @param accountIndex - Index of account\n   * @param verify - Ask user to confirm address by showing it on the device screen\n   */\n  async getAddress(accountIndex: number, verify = false): Promise<Encoded.AccountAddress> {\n    await this.#ensureReady();\n    const buffer = Buffer.alloc(4);\n    buffer.writeUInt32BE(accountIndex, 0);\n    const response = await this.transport.send(\n      CLA,\n      GET_ADDRESS,\n      verify ? 0x01 : 0x00,\n      0x00,\n      buffer,\n    );\n    const addressLength = response[0];\n    return response.subarray(1, 1 + addressLength).toString('ascii') as Encoded.AccountAddress;\n  }\n\n  /**\n   * Get an instance of AccountLedger for a given account index.\n   * @param accountIndex - Index of account\n   */\n  async initialize(accountIndex: number): Promise<AccountLedger> {\n    return new AccountLedger(this.transport, accountIndex, await this.getAddress(accountIndex));\n  }\n}\n","import { render } from \"./ConnectLedger.vue?vue&type=template&id=a7ab816c\"\nimport script from \"./ConnectLedger.vue?vue&type=script&lang=js\"\nexport * from \"./ConnectLedger.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"group\">\n    <button v-if=\"!accountFactory\" @click=\"connect\">Connect</button>\n    <template v-else>\n      <button @click=\"disconnect\">Disconnect</button>\n      <button @click=\"requestSnap\">Request Aeternity Snap</button>\n      <button @click=\"addAccount\">Add Account</button>\n      <button v-if=\"accounts.length > 1\" @click=\"switchAccount\">Switch Account</button>\n      <button @click=\"discoverAccounts\">Discover Accounts</button>\n      <button @click=\"switchNode\">Switch Node</button>\n      <div v-if=\"accounts.length\">\n        <div>Accounts</div>\n        <div>{{ accounts.map((account) => account.address.slice(0, 8)).join(', ') }}</div>\n      </div>\n    </template>\n    <div v-if=\"status\">\n      <div>Status</div>\n      <Value :value=\"status\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { AccountMetamaskFactory, UnsupportedPlatformError } from '@aeternity/aepp-sdk';\nimport { shallowRef } from 'vue';\nimport { mapState } from 'vuex';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    status: '',\n    accountFactory: shallowRef(null),\n    accounts: [],\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    connect() {\n      try {\n        this.accountFactory = new AccountMetamaskFactory();\n        this.status = '';\n      } catch (error) {\n        if (error instanceof UnsupportedPlatformError) {\n          this.status = error.message;\n          return;\n        }\n        this.status = '';\n        throw error;\n      }\n    },\n    disconnect() {\n      this.accountFactory = null;\n      this.accounts = [];\n      this.$store.commit('setAddress', undefined);\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n    },\n    async requestSnap() {\n      try {\n        this.status = 'Waiting for MetaMask response';\n        this.status = await this.accountFactory.requestSnap();\n      } catch (error) {\n        if (error instanceof UnsupportedPlatformError) {\n          this.status = error.message;\n          return;\n        }\n        this.status = '';\n        if (error.code === 4001) return;\n        throw error;\n      }\n    },\n    async addAccount() {\n      try {\n        this.status = 'Waiting for MetaMask response';\n        const idx = this.accounts.length;\n        const account = await this.accountFactory.initialize(idx);\n        this.accounts.push(account);\n        this.setAccount(this.accounts[0]);\n      } catch (error) {\n        if (error.code === 4001) return;\n        throw error;\n      } finally {\n        this.status = '';\n      }\n    },\n    switchAccount() {\n      this.accounts.push(this.accounts.shift());\n      this.setAccount(this.accounts[0]);\n    },\n    async discoverAccounts() {\n      this.status = 'Discovering accounts';\n      this.accounts = await this.accountFactory.discover(this.aeSdk.api);\n      this.setAccount(this.accounts[0]);\n      this.status = '';\n    },\n    async switchNode() {\n      const networkId = this.$store.state.networkId === 'ae_mainnet' ? 'ae_uat' : 'ae_mainnet';\n      const [{ name }] = (await this.aeSdk.getNodesInPool()).filter(\n        (node) => node.nodeNetworkId === networkId,\n      );\n      this.aeSdk.selectNode(name);\n      this.$store.commit('setNetworkId', networkId);\n    },\n    setAccount(account) {\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n      this.aeSdk.addAccount(account, { select: true });\n      this.$store.commit('setAddress', account.address);\n    },\n  },\n};\n</script>\n","import type { BaseProvider } from '@metamask/providers';\nimport AccountBase from './Base.js';\nimport { Encoded } from '../utils/encoder.js';\nimport { ArgumentError, InternalError, NotImplementedError } from '../utils/errors.js';\n\nexport const snapId = 'npm:@aeternity-snap/plugin';\n\nexport async function invokeSnap<R>(\n  provider: BaseProvider,\n  method: string,\n  params: unknown,\n  key: string,\n): Promise<R> {\n  const response = await provider.request<{ [k in string]: unknown }>({\n    method: 'wallet_invokeSnap',\n    params: { snapId, request: { method, params } },\n  });\n  if (response == null) throw new InternalError('Empty MetaMask response');\n  if (!(key in response)) {\n    throw new InternalError(`Key ${key} missed in response ${JSON.stringify(response)}`);\n  }\n  return response[key] as R;\n}\n\n/**\n * Account connected to Aeternity Snap for MetaMask\n * https://www.npmjs.com/package/\\@aeternity-snap/plugin\n */\nexport default class AccountMetamask extends AccountBase {\n  /**\n   * @deprecated this class is not intended to provide raw access to the provider\n   */\n  readonly provider: BaseProvider;\n\n  readonly index: number;\n\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param address - Address of account\n   */\n  constructor(provider: BaseProvider, index: number, address: Encoded.AccountAddress) {\n    super();\n    this.provider = provider;\n    this.index = index;\n    this.address = address;\n  }\n\n  /**\n   * @deprecated Use `unsafeSign` method instead\n   */\n  // eslint-disable-next-line class-methods-use-this\n  override async sign(): Promise<Uint8Array> {\n    return this.unsafeSign();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async unsafeSign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using MetaMask');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signTypedData(): Promise<Encoded.Signature> {\n    throw new NotImplementedError('Typed data signing using MetaMask');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signDelegation(): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signing delegation using MetaMask');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (innerTx != null) throw new NotImplementedError('innerTx option in AccountMetamask');\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n\n    return invokeSnap<Encoded.Transaction>(\n      this.provider,\n      'signTransaction',\n      { derivationPath: [`${this.index}'`, \"0'\", \"0'\"], tx, networkId },\n      'signedTx',\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const signature = await invokeSnap<string>(\n      this.provider,\n      'signMessage',\n      {\n        derivationPath: [`${this.index}'`, \"0'\", \"0'\"],\n        message: Buffer.from(message).toString('base64'),\n      },\n      'signature',\n    );\n    return Buffer.from(signature, 'base64');\n  }\n}\n","import type { BaseProvider } from '@metamask/providers';\nimport {\n  InternalError,\n  UnsupportedPlatformError,\n  UnsupportedVersionError,\n} from '../utils/errors.js';\nimport { Encoded } from '../utils/encoder.js';\nimport semverSatisfies from '../utils/semver-satisfies.js';\nimport AccountBaseFactory from './BaseFactory.js';\nimport AccountMetamask, { invokeSnap, snapId } from './Metamask.js';\n\nconst snapMinVersion = '0.0.9';\nconst snapMaxVersion = '0.1.0';\nconst metamaskVersionPrefix = 'MetaMask/v';\n\ninterface SnapDetails {\n  blocked: boolean;\n  enabled: boolean;\n  id: typeof snapId;\n  version: string;\n  initialPermissions: Record<string, unknown>;\n}\n\n/**\n * A factory class that generates instances of AccountMetamask.\n * @see {@link https://www.npmjs.com/package/@aeternity-snap/plugin | Aeternity snap}\n */\nexport default class AccountMetamaskFactory extends AccountBaseFactory {\n  // TODO: remove after removing `provider`\n  #provider: BaseProvider | undefined;\n\n  /**\n   * @deprecated this class is not intended to provide raw access to the provider\n   */\n  get provider(): BaseProvider {\n    if (this.#provider == null) throw new UnsupportedPlatformError('Metamask is not detected yet');\n    return this.#provider;\n  }\n\n  async #getMetamaskAsInjected(): Promise<BaseProvider | undefined> {\n    if (!('ethereum' in window) || window.ethereum == null) return;\n    const provider = window.ethereum as BaseProvider;\n    const version = await provider.request<string>({ method: 'web3_clientVersion' });\n    if (version == null) throw new InternalError(\"Can't get Ethereum Provider version\");\n    if (!version.startsWith(metamaskVersionPrefix)) return;\n    return provider;\n  }\n\n  async #getMetamaskOverEip6963(): Promise<BaseProvider | undefined> {\n    setTimeout(() => window.dispatchEvent(new Event('eip6963:requestProvider')));\n    return new Promise<BaseProvider | undefined>((resolve) => {\n      const handler = (\n        event: CustomEvent<{ info: { rdns: string }; provider: BaseProvider }>,\n      ): void => {\n        if (event.detail.info.rdns !== 'io.metamask') return;\n        window.removeEventListener('eip6963:announceProvider', handler);\n        resolve(event.detail.provider);\n      };\n      window.addEventListener('eip6963:announceProvider', handler);\n      setTimeout(() => {\n        window.removeEventListener('eip6963:announceProvider', handler);\n        resolve(undefined);\n      }, 500);\n    });\n  }\n\n  #providerPromise: Promise<BaseProvider> | undefined;\n\n  async #getProvider(): Promise<BaseProvider> {\n    this.#providerPromise ??= (async () => {\n      this.#provider ??=\n        (await this.#getMetamaskAsInjected()) ?? (await this.#getMetamaskOverEip6963());\n      if (this.#provider == null) {\n        throw new UnsupportedPlatformError(\n          \"Can't find a Metamask extension as an injected provider and over EIP-6963. Ensure that Metamask is installed or setup a provider.\",\n        );\n      }\n      const version = await this.#provider.request<string>({ method: 'web3_clientVersion' });\n      if (version == null) throw new InternalError(\"Can't get Ethereum Provider version\");\n      const args = [version.slice(metamaskVersionPrefix.length), '12.2.4'] as const;\n      if (!semverSatisfies(...args)) throw new UnsupportedVersionError('Metamask', ...args);\n      return this.#provider;\n    })();\n    return this.#providerPromise;\n  }\n\n  /**\n   * @param provider - Connection to MetaMask to use\n   */\n  constructor(provider?: BaseProvider) {\n    super();\n    this.#provider = provider;\n    if (this.#provider == null && window == null) {\n      throw new UnsupportedPlatformError(\n        'Window object not found, you can run AccountMetamaskFactory only in browser or setup a provider',\n      );\n    }\n  }\n\n  /**\n   * Request MetaMask to install Aeternity snap.\n   * @deprecated use `requestSnap` instead\n   */\n  async installSnap(): Promise<SnapDetails> {\n    const provider = await this.#getProvider();\n    const details = (await provider.request({\n      method: 'wallet_requestSnaps',\n      params: { [snapId]: { version: snapMinVersion } },\n    })) as { [key in typeof snapId]: SnapDetails };\n    return details[snapId];\n  }\n\n  /**\n   * Request MetaMask to install Aeternity snap or connect it to the current aepp.\n   * MetaMask can have only one Aeternity snap version installed at a time.\n   * This method is intended to upgrade the snap to a specified version if needed by the aepp.\n   * If Aeternity snap is installed but wasn't used by the aepp, then the user still needs to approve the connection.\n   * If the currently installed version corresponds to the version range, then the snap won't be upgraded.\n   * To downgrade the snap, the user must manually uninstall the current version.\n   * @param version - Snap version range (e.g. `1`, `0.1.*`, `^0.0.9`, `~0.0.9`; `>=0.0.9 <0.1.0`)\n   * (default: a version range supported by sdk)\n   */\n  async requestSnap(version = `>=${snapMinVersion} <${snapMaxVersion}`): Promise<SnapDetails> {\n    const provider = await this.#getProvider();\n    const details = (await provider.request({\n      method: 'wallet_requestSnaps',\n      params: { [snapId]: { version } },\n    })) as { [key in typeof snapId]: SnapDetails };\n    return details[snapId];\n  }\n\n  /**\n   * It throws an exception if MetaMask or Aeternity snap has an incompatible version or is not\n   * installed or is not connected to the aepp.\n   * @deprecated use `requestSnap` instead\n   */\n  async ensureReady(): Promise<void> {\n    const snapVersion = await this.getSnapVersion();\n    const args = [snapVersion, snapMinVersion, snapMaxVersion] as const;\n    if (!semverSatisfies(...args))\n      throw new UnsupportedVersionError('Aeternity snap in MetaMask', ...args);\n  }\n\n  /**\n   * @returns the version of snap installed in MetaMask\n   */\n  async getSnapVersion(): Promise<string> {\n    const provider = await this.#getProvider();\n    const snaps = (await provider.request({ method: 'wallet_getSnaps' })) as Record<\n      string,\n      { version: string }\n    >;\n    const version = snaps[snapId]?.version;\n    if (version == null)\n      throw new UnsupportedPlatformError(\n        'Aeternity snap is not installed to MetaMask or not connected to this aepp',\n      );\n    return version;\n  }\n\n  /**\n   * Get an instance of AccountMetaMask for a given account index.\n   * @param accountIndex - Index of account\n   */\n  async initialize(accountIndex: number): Promise<AccountMetamask> {\n    await this.requestSnap();\n    const provider = await this.#getProvider();\n    const address = await invokeSnap<Encoded.AccountAddress>(\n      provider,\n      'getPublicKey',\n      { derivationPath: [`${accountIndex}'`, \"0'\", \"0'\"] },\n      'publicKey',\n    );\n    return new AccountMetamask(provider, accountIndex, address);\n  }\n}\n","import { render } from \"./ConnectMetamask.vue?vue&type=template&id=4f0cf280\"\nimport script from \"./ConnectMetamask.vue?vue&type=script&lang=js\"\nexport * from \"./ConnectMetamask.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"group\">\n    <div v-if=\"status\">\n      <div>Status</div>\n      <div>{{ status }}</div>\n    </div>\n    <template v-else-if=\"!accountFactory\">\n      <div>\n        <div>Mnemonic phrase</div>\n        <div>\n          <input placeholder=\"cross cat upper state flame ...\" v-model=\"mnemonic\" />\n        </div>\n      </div>\n      <button @click=\"connect\">Connect</button>\n    </template>\n    <template v-else>\n      <button @click=\"disconnect\">Disconnect</button>\n      <button @click=\"addAccount\">Add Account</button>\n      <button v-if=\"accounts.length > 1\" @click=\"switchAccount\">Switch Account</button>\n      <button @click=\"discoverAccounts\">Discover Accounts</button>\n      <button @click=\"switchNode\">Switch Node</button>\n      <div v-if=\"accounts.length\">\n        <div>Accounts</div>\n        <div>{{ accounts.map((account) => account.address.slice(0, 8)).join(', ') }}</div>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { AccountMnemonicFactory } from '@aeternity/aepp-sdk';\nimport { shallowRef, toRaw } from 'vue';\nimport { mapState } from 'vuex';\n\nexport default {\n  data: () => ({\n    status: '',\n    mnemonic: 'eye quarter chapter suit cruel scrub verify stuff volume control learn dust',\n    accountFactory: shallowRef(null),\n    accounts: [],\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async connect() {\n      try {\n        this.status = 'Deriving a wallet from mnemonic phrase';\n        this.accountFactory = new AccountMnemonicFactory(this.mnemonic);\n        await this.accountFactory.getWallet();\n        this.status = '';\n      } catch (error) {\n        this.accountFactory = null;\n        if (error.message === 'Invalid mnemonic') {\n          this.status = error.message;\n          return;\n        }\n        this.status = '';\n        throw error;\n      }\n    },\n    disconnect() {\n      this.accountFactory = null;\n      this.accounts = [];\n      this.$store.commit('setAddress', undefined);\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n    },\n    async addAccount() {\n      this.status = 'Deriving an account';\n      const idx = this.accounts.length;\n      const account = await this.accountFactory.initialize(idx);\n      this.accounts.push(account);\n      this.setAccount(toRaw(this.accounts[0]));\n      this.status = '';\n    },\n    switchAccount() {\n      this.accounts.push(this.accounts.shift());\n      this.setAccount(toRaw(this.accounts[0]));\n    },\n    async discoverAccounts() {\n      this.status = 'Discovering accounts';\n      this.accounts = await this.accountFactory.discover(this.aeSdk.api);\n      this.setAccount(toRaw(this.accounts[0]));\n      this.status = '';\n    },\n    async switchNode() {\n      const networkId = this.$store.state.networkId === 'ae_mainnet' ? 'ae_uat' : 'ae_mainnet';\n      const [{ name }] = (await this.aeSdk.getNodesInPool()).filter(\n        (node) => node.nodeNetworkId === networkId,\n      );\n      this.aeSdk.selectNode(name);\n      this.$store.commit('setNetworkId', networkId);\n    },\n    setAccount(account) {\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n      this.aeSdk.addAccount(account, { select: true });\n      this.$store.commit('setAddress', account.address);\n    },\n  },\n};\n</script>\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder.js';\nimport { hash, messagePrefixLength } from './crypto.js';\nimport { concatBuffers } from './other.js';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue =\n  | 'void'\n  | 'unit'\n  | 'int'\n  | 'bool'\n  | 'string'\n  | 'bits'\n  | 'hash'\n  | 'signature'\n  | 'address'\n  | 'contract_pubkey'\n  | 'Chain.ttl'\n  | 'Chain.ga_meta_tx'\n  | 'Chain.paying_for_tx'\n  | 'Chain.base_tx'\n  | 'AENS.pointee'\n  | 'AENS.name'\n  | 'MCL_BLS12_381.fr'\n  | 'MCL_BLS12_381.fp'\n  | { 'Set.set': readonly [AciValue] }\n  | { bytes: number }\n  | { list: readonly [AciValue] }\n  | { map: readonly [AciValue, AciValue] }\n  | { tuple: readonly AciValue[] }\n  | { record: ReadonlyArray<{ name: string; type: AciValue }> }\n  | { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n  | { option: readonly [AciValue] }\n  | { oracle: readonly [AciValue, AciValue] }\n  | { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [\n      {\n        name: 'name',\n        type: { option: ['string'] },\n      },\n      {\n        name: 'version',\n        type: { option: ['int'] },\n      },\n      {\n        name: 'networkId',\n        type: { option: ['string'] },\n      },\n      {\n        name: 'contractAddress',\n        type: { option: ['contract_pubkey'] },\n      },\n    ],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(\n    concatBuffers([\n      messagePrefixLength,\n      new Uint8Array([0]),\n      hashDomain(domain),\n      hashJson(aci),\n      hash(decode(data)),\n    ]),\n  );\n}\n","import nacl from 'tweetnacl';\nimport AccountBase from './Base.js';\nimport { hash, messageToHash, messagePrefixLength } from '../utils/crypto.js';\nimport { ArgumentError } from '../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../utils/encoder.js';\nimport { concatBuffers } from '../utils/other.js';\nimport { hashTypedData, AciValue } from '../utils/typed-data.js';\nimport { buildTx } from '../tx/builder/index.js';\nimport { Tag } from '../tx/builder/constants.js';\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  readonly #secretKeyDecoded: Uint8Array;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(public readonly secretKey: Encoded.AccountSecretKey) {\n    super();\n    const keyPair = nacl.sign.keyPair.fromSeed(decode(secretKey));\n    this.#secretKeyDecoded = keyPair.secretKey;\n    this.address = encode(keyPair.publicKey, Encoding.AccountAddress);\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    const secretKey = encode(nacl.randomBytes(32), Encoding.AccountSecretKey);\n    return new AccountMemory(secretKey);\n  }\n\n  /**\n   * @deprecated Use `unsafeSign` method instead\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return this.unsafeSign(data, options);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async unsafeSign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return nacl.sign.detached(Buffer.from(data), this.#secretKeyDecoded);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.unsafeSign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.unsafeSign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name,\n      version,\n      networkId,\n      contractAddress,\n      ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name,\n      version,\n      networkId,\n      contractAddress,\n    });\n    const signature = await this.unsafeSign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength,\n      new Uint8Array([1]),\n      Buffer.from(networkId),\n      decode(delegation),\n    ]);\n    const signature = await this.unsafeSign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import { mnemonicToSeed, mnemonicToSeedSync } from '@scure/bip39';\nimport tweetnaclAuth from 'tweetnacl-auth';\nimport AccountBaseFactory from './BaseFactory.js';\nimport AccountMemory from './Memory.js';\nimport { encode, Encoding, Encoded, decode } from '../utils/encoder.js';\nimport { concatBuffers } from '../utils/other.js';\nimport { ArgumentError } from '../utils/errors.js';\n\nexport const ED25519_CURVE = Buffer.from('ed25519 seed');\nconst HARDENED_OFFSET = 0x80000000;\n\ninterface KeyTreeNode {\n  secretKey: Uint8Array;\n  chainCode: Uint8Array;\n}\n\nexport function deriveKey(message: Uint8Array, key: Uint8Array): KeyTreeNode {\n  const I = tweetnaclAuth.full(message, key);\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    secretKey: IL,\n    chainCode: IR,\n  };\n}\n\nexport function derivePathFromKey(key: KeyTreeNode, segments: readonly number[]): KeyTreeNode {\n  return segments.reduce(({ secretKey, chainCode }, segment) => {\n    const indexBuffer = Buffer.allocUnsafe(4);\n    indexBuffer.writeUInt32BE(segment + HARDENED_OFFSET, 0);\n    const data = concatBuffers([Buffer.alloc(1, 0), secretKey, indexBuffer]);\n    return deriveKey(data, chainCode);\n  }, key);\n}\n\ninterface Wallet {\n  secretKey: Encoded.Bytearray;\n  chainCode: Encoded.Bytearray;\n}\n\n/**\n * A factory class that generates instances of AccountMemory based on provided mnemonic phrase.\n */\nexport default class AccountMnemonicFactory extends AccountBaseFactory {\n  #mnemonicOrWalletOrSeed: string | Wallet | Uint8Array;\n\n  /**\n   * @param mnemonicOrWalletOrSeed - BIP39-compatible mnemonic phrase or a wallet/seed derived from\n   * mnemonic\n   */\n  constructor(mnemonicOrWalletOrSeed: string | Wallet | Uint8Array) {\n    super();\n    this.#mnemonicOrWalletOrSeed = mnemonicOrWalletOrSeed;\n  }\n\n  #getWallet(sync: true): Wallet;\n  #getWallet(sync: false): Wallet | Promise<Wallet>;\n  #getWallet(sync: boolean): Wallet | Promise<Wallet> {\n    const setWalletBySeed = (seed: Uint8Array): Wallet => {\n      const masterKey = deriveKey(seed, ED25519_CURVE);\n      const walletKey = derivePathFromKey(masterKey, [44, 457]);\n      this.#mnemonicOrWalletOrSeed = {\n        secretKey: encode(walletKey.secretKey, Encoding.Bytearray),\n        chainCode: encode(walletKey.chainCode, Encoding.Bytearray),\n      };\n      return this.#mnemonicOrWalletOrSeed;\n    };\n\n    if (ArrayBuffer.isView(this.#mnemonicOrWalletOrSeed)) {\n      if (this.#mnemonicOrWalletOrSeed.length !== 64) {\n        throw new ArgumentError('seed length', 64, this.#mnemonicOrWalletOrSeed.length);\n      }\n      return setWalletBySeed(this.#mnemonicOrWalletOrSeed);\n    }\n    if (typeof this.#mnemonicOrWalletOrSeed === 'object') return this.#mnemonicOrWalletOrSeed;\n    return sync\n      ? setWalletBySeed(mnemonicToSeedSync(this.#mnemonicOrWalletOrSeed))\n      : mnemonicToSeed(this.#mnemonicOrWalletOrSeed).then(setWalletBySeed);\n  }\n\n  /**\n   * Get a wallet to initialize AccountMnemonicFactory instead mnemonic phrase.\n   * In comparison with mnemonic, the wallet can be used to derive aeternity accounts only.\n   */\n  async getWallet(): Promise<Wallet> {\n    return this.#getWallet(false);\n  }\n\n  /**\n   * The same as `getWallet` but synchronous.\n   */\n  getWalletSync(): Wallet {\n    return this.#getWallet(true);\n  }\n\n  #getAccountByWallet(accountIndex: number, wallet: Wallet): AccountMemory {\n    const walletKey = {\n      secretKey: decode(wallet.secretKey),\n      chainCode: decode(wallet.chainCode),\n    };\n    const raw = derivePathFromKey(walletKey, [accountIndex, 0, 0]).secretKey;\n    return new AccountMemory(encode(raw, Encoding.AccountSecretKey));\n  }\n\n  /**\n   * Get an instance of AccountMemory for a given account index.\n   * @param accountIndex - Index of account\n   */\n  async initialize(accountIndex: number): Promise<AccountMemory> {\n    const wallet = await this.getWallet();\n    return this.#getAccountByWallet(accountIndex, wallet);\n  }\n\n  /**\n   * The same as `initialize` but synchronous.\n   */\n  initializeSync(accountIndex: number): AccountMemory {\n    const wallet = this.getWalletSync();\n    return this.#getAccountByWallet(accountIndex, wallet);\n  }\n}\n","import { render } from \"./ConnectMnemonic.vue?vue&type=template&id=c46a16a4\"\nimport script from \"./ConnectMnemonic.vue?vue&type=script&lang=js\"\nexport * from \"./ConnectMnemonic.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Connect.vue?vue&type=template&id=54f0d64c\"\nimport script from \"./Connect.vue?vue&type=script&lang=js\"\nexport * from \"./Connect.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>General information</h2>\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>Height</div>\n      <Value :value=\"heightPromise\" />\n    </div>\n    <div>\n      <div>Node info</div>\n      <Value :value=\"nodeInfoPromise\" />\n    </div>\n    <div>\n      <div>Compiler version</div>\n      <Value :value=\"compilerVersionPromise\" />\n    </div>\n  </div>\n\n  <SpendCoins />\n\n  <MessageSign />\n\n  <DataSign />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport DataSign from './components/DataSign.vue';\n\nexport default {\n  components: {\n    Value,\n    SpendCoins,\n    MessageSign,\n    DataSign,\n  },\n  data: () => ({\n    balancePromise: null,\n    heightPromise: null,\n    nodeInfoPromise: null,\n    compilerVersionPromise: null,\n  }),\n  computed: mapState(['aeSdk', 'address', 'networkId']),\n  mounted() {\n    this.$watch(\n      ({ aeSdk, address, networkId }) => [aeSdk, address, networkId],\n      ([aeSdk, address]) => {\n        this.compilerVersionPromise = aeSdk.compilerApi.version();\n        this.balancePromise = address ? aeSdk.getBalance(address) : Promise.resolve(NaN);\n        this.heightPromise = aeSdk.getHeight();\n        this.nodeInfoPromise = aeSdk.getNodeInfo();\n      },\n      { immediate: true },\n    );\n  },\n};\n</script>\n","<template>\n  <h2>Spend coins</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input v-model=\"spendTo\" placeholder=\"ak_...\" />\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\" /></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\" /></div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          spendPromise = spend();\n        }\n      \"\n    >\n      Spend\n    </button>\n    <div v-if=\"spendPromise\">\n      <div>Spend result</div>\n      <Value :value=\"spendPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    spendPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    spend() {\n      return this.aeSdk.spend(this.spendAmount, this.spendTo, {\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n    },\n  },\n};\n</script>\n","import { render } from \"./SpendCoins.vue?vue&type=template&id=634716bc\"\nimport script from \"./SpendCoins.vue?vue&type=script&lang=js\"\nexport * from \"./SpendCoins.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <FieldAction\n    title=\"Sign a message\"\n    arg-title=\"Message to sign\"\n    arg-placeholder=\"I want to <action name> at <time> on <network name>\"\n    action-title=\"Sign message\"\n    :action-handler=\"messageSign\"\n    result-title=\"Message sign result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './FieldAction.vue';\n\nexport default {\n  components: { FieldAction },\n  computed: mapState(['aeSdk']),\n  methods: {\n    messageSign(messageToSign) {\n      return this.aeSdk.signMessage(messageToSign);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>{{ title }}</h2>\n  <div class=\"group\">\n    <div v-if=\"argTitle\">\n      <div>{{ argTitle }}</div>\n      <div>\n        <input v-model=\"argValue\" :placeholder=\"argPlaceholder\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          promise = actionHandler(argValue);\n        }\n      \"\n    >\n      {{ actionTitle }}\n    </button>\n    <div v-if=\"promise\">\n      <div>{{ resultTitle }}</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  props: {\n    title: { type: String, required: true },\n    argTitle: { type: String, required: false },\n    argPlaceholder: { type: String, required: false },\n    argDefaultValue: { type: String, required: false },\n    actionTitle: { type: String, required: true },\n    actionHandler: { type: Function, required: true },\n    resultTitle: { type: String, required: true },\n  },\n  data() {\n    return {\n      argValue: this.argDefaultValue,\n      promise: null,\n    };\n  },\n};\n</script>\n","import { render } from \"./FieldAction.vue?vue&type=template&id=a3dd1e14\"\nimport script from \"./FieldAction.vue?vue&type=script&lang=js\"\nexport * from \"./FieldAction.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./MessageSign.vue?vue&type=template&id=2b567dd0\"\nimport script from \"./MessageSign.vue?vue&type=script&lang=js\"\nexport * from \"./MessageSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign raw data (unsafe)</h2>\n  <div class=\"group\">\n    <div>\n      <div>Data as text</div>\n      <div>\n        <input\n          :value=\"dataBuffer.toString()\"\n          @input=\"setData($event.target.value)\"\n          placeholder=\"Plain text\"\n        />\n      </div>\n    </div>\n    <div>\n      <div>Data as hex</div>\n      <div>\n        <input\n          :value=\"dataBuffer.toString('hex')\"\n          @input=\"setData($event.target.value, 'hex')\"\n          placeholder=\"hex-encoded data\"\n        />\n      </div>\n    </div>\n    <div>\n      <div>Data encoded</div>\n      <div>\n        <input v-model=\"data\" placeholder=\"ba_-encoded data\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          promise = dataSign();\n        }\n      \"\n    >\n      Sign data\n    </button>\n    <div v-if=\"promise\">\n      <div>Data sign result</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { Buffer } from 'buffer';\nimport { decode, encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nconst emptyData = encode(Buffer.from([]), Encoding.Bytearray);\n\nexport default {\n  components: { Value },\n  computed: {\n    ...mapState(['aeSdk']),\n    dataBuffer() {\n      try {\n        return Buffer.from(decode(this.data || emptyData));\n      } catch (error) {\n        return Buffer.from([]);\n      }\n    },\n  },\n  data: () => ({\n    data: '',\n    promise: null,\n  }),\n  methods: {\n    setData(data, type) {\n      this.data = encode(Buffer.from(data, type), Encoding.Bytearray);\n    },\n    dataSign() {\n      return this.aeSdk.unsafeSign(decode(this.data || emptyData));\n    },\n  },\n};\n</script>\n","import { render } from \"./DataSign.vue?vue&type=template&id=24bd05b4\"\nimport script from \"./DataSign.vue?vue&type=script&lang=js\"\nexport * from \"./DataSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Basic.vue?vue&type=template&id=754246bb\"\nimport script from \"./Basic.vue?vue&type=script&lang=js\"\nexport * from \"./Basic.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Contract Instance</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract Source Code</div>\n      <div>\n        <textarea v-model=\"contractSourceCode\" placeholder=\"Contact source code\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          createPromise = create();\n        }\n      \"\n    >\n      Create\n    </button>\n    <div v-if=\"createPromise\">\n      <div>Contract Instance</div>\n      <Value :value=\"createPromise.then(() => 'Ready')\" />\n    </div>\n  </div>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Compile Contract\"\n      action-title=\"Compile\"\n      :action-handler=\"compile\"\n      result-title=\"Bytecode\"\n    />\n  </template>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Deploy Contract\"\n      arg-title=\"Deploy argument\"\n      arg-placeholder=\"Deploy argument\"\n      arg-default-value=\"5\"\n      action-title=\"Deploy\"\n      :action-handler=\"deploy\"\n      result-title=\"Deployed Contract\"\n    />\n  </template>\n\n  <template v-if=\"deployPromise\">\n    <FieldAction\n      title=\"Call Contract on chain\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"7\"\n      action-title=\"Call\"\n      :action-handler=\"callOnChain\"\n      result-title=\"Call Result\"\n    />\n\n    <FieldAction\n      title=\"Call Contract using dry-run (static)\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"8\"\n      action-title=\"Call\"\n      :action-handler=\"callStatic\"\n      result-title=\"Call Result\"\n    />\n  </template>\n</template>\n\n<script>\nimport { shallowRef } from 'vue';\nimport { mapState } from 'vuex';\nimport { Contract } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nconst contractSourceCode = `\ncontract Multiplier =\n  record state = { factor: int }\n\n  entrypoint init(f : int) = { factor = f }\n\n  stateful entrypoint setFactor(f : int) =\n    put(state{ factor = f })\n\n  entrypoint multiplyByFactor(x : int) =\n    x * state.factor\n`.trim();\n\nexport default {\n  components: { Value, FieldAction },\n  data: () => ({\n    contractSourceCode,\n    createPromise: null,\n    contract: null,\n    deployPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async create() {\n      // Contract instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/568c291b92c030011ca9e68169f328be6ff79488/docs/README.md#vue3\n      this.contract = shallowRef(\n        await Contract.initialize({\n          ...this.aeSdk.getContext(),\n          sourceCode: this.contractSourceCode,\n        }),\n      );\n    },\n    async compile() {\n      return this.contract.$compile();\n    },\n    async deploy(arg) {\n      this.deployPromise = this.contract.$deploy([arg]);\n      return this.deployPromise;\n    },\n    async callOnChain(arg) {\n      return this.contract.setFactor(arg);\n    },\n    async callStatic(arg) {\n      return this.contract.multiplyByFactor(arg);\n    },\n  },\n};\n</script>\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport {\n  AdditionalPolicyConfig,\n  FullOperationResponse,\n  OperationOptions,\n  createSerializer as createSerializerOrig,\n} from '@azure/core-client';\nimport { pause } from './other.js';\nimport semverSatisfies from './semver-satisfies.js';\nimport { InternalError, UnexpectedTsError, UnsupportedVersionError } from './errors.js';\n\nconst bigIntPrefix = '_sdk-big-int-';\n\nexport const createSerializer = (\n  ...args: Parameters<typeof createSerializerOrig>\n): ReturnType<typeof createSerializerOrig> => {\n  const serializer = createSerializerOrig(...args);\n  const { serialize, deserialize } = serializer;\n  return Object.assign(serializer, {\n    serialize(\n      ...[mapper, object, objectName, options]: Parameters<typeof serialize>\n    ): ReturnType<typeof serialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || object == null) {\n        return serialize.call(this, mapper, object, objectName, options);\n      }\n      if (typeof object !== 'bigint') {\n        objectName ??= mapper.serializedName;\n        throw new Error(`${objectName} with value ${object} must be of type bigint.`);\n      }\n      return object.toString();\n    },\n\n    deserialize(\n      ...[mapper, responseBody, objectName, options]: Parameters<typeof deserialize>\n    ): ReturnType<typeof deserialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || responseBody == null) {\n        if (typeof responseBody === 'string' && responseBody.startsWith(bigIntPrefix)) {\n          console.warn(`AeSdk internal error: BigInt value ${responseBody} handled incorrectly`);\n          responseBody = +responseBody.replace(bigIntPrefix, '');\n        }\n        const result = deserialize.call(this, mapper, responseBody, objectName, options);\n        // TODO: remove after fixing https://github.com/aeternity/ae_mdw/issues/1891\n        // and https://github.com/aeternity/aeternity/issues/4386\n        if (result instanceof Date) return new Date(+result / 1000);\n        return result;\n      }\n      if (typeof responseBody === 'number' && responseBody > Number.MAX_SAFE_INTEGER) {\n        throw new InternalError(`Number ${responseBody} is not accurate to be converted to BigInt`);\n      }\n      return BigInt(responseBody.toString().replace(bigIntPrefix, ''));\n    },\n  });\n};\n\nconst safeLength = Number.MAX_SAFE_INTEGER.toString().length;\nconst bigIntPropertyRe = new RegExp(String.raw`(\"\\w+\":\\s*)(\\d{${safeLength},})(\\s*[,}])`, 'm');\nconst bigIntArrayItemRe = new RegExp(String.raw`([[,]\\s*)(\\d{${safeLength},})\\b`, 'm');\nexport const parseBigIntPolicy: PipelinePolicy = {\n  name: 'parse-big-int',\n  async sendRequest(request, next) {\n    const response = await next(request);\n    if (response.bodyAsText == null) return response;\n    // TODO: replace with https://caniuse.com/mdn-javascript_builtins_json_parse_reviver_parameter_context_argument when it gets support in FF and Safari\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntPropertyRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntPropertyRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, name, value, end] = match;\n        return [\n          name,\n          +value > Number.MAX_SAFE_INTEGER ? `\"${bigIntPrefix}${value}\"` : value,\n          end,\n        ].join('');\n      },\n    );\n    // FIXME: may break strings inside json\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntArrayItemRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntArrayItemRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, prefix, value] = match;\n        return `${prefix}\"${bigIntPrefix}${value}\"`;\n      },\n    );\n    return response;\n  },\n};\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(\n          key,\n          req.catch(() => {}),\n        );\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (\n          !(error instanceof RestError) ||\n          error.request == null ||\n          error.message.startsWith('Error ')\n        )\n          throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        const body = (error.response as FullOperationResponse).parsedBody;\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  versionCb: (options: OperationOptions) => Promise<string>,\n  geVersion: string,\n  ltVersion: string,\n  ignoreVersion: boolean,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'version-check',\n    async sendRequest(request, next) {\n      if (request.headers.has('__version-check')) {\n        request.headers.delete('__version-check');\n        return next(request);\n      }\n      const options = { requestOptions: { customHeaders: { '__version-check': 'true' } } };\n      const args = [await versionCb(options), geVersion, ltVersion] as const;\n      if (!semverSatisfies(...args)) {\n        const error = new UnsupportedVersionError(name, ...args);\n        if (ignoreVersion) console.warn(error.message);\n        else throw error;\n      }\n      return next(request);\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount)\n        .fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      errorCode: {\n        serializedName: \"error_code\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: -1,\n        },\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedTx: {\n        serializedName: \"encoded_tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedKey: {\n        serializedName: \"encoded_key\",\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const AuctionEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuctionEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      startedAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"started_at\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      endsAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ends_at\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      highestBidder: {\n        serializedName: \"highest_bidder\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBid: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"highest_bid\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      soloRound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockedUntil: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Currency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunit: {\n        serializedName: \"subunit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunitsPerUnit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"subunits_per_unit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fiatConverstionUrl: {\n        serializedName: \"fiat_converstion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fiatConversionUrl: {\n        serializedName: \"fiat_conversion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      logo: {\n        serializedName: \"logo\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\",\n        },\n      },\n      primaryColour: {\n        serializedName: \"primary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      secondaryColour: {\n        serializedName: \"secondary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkName: {\n        serializedName: \"network_name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Image: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMinimum: 0,\n            },\n            type: {\n              // @ts-expect-error we are extending autorest with BigInt support\n              name: \"BigInt\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PinningTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PinningTx\",\n    modelProperties: {\n      epoch: {\n        serializedName: \"epoch\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      parentPayload: {\n        serializedName: \"parent_payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastLeader: {\n        serializedName: \"last_leader\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      parentType: {\n        serializedName: \"parent_type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      parentNetworkId: {\n        serializedName: \"parent_network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HCContractPubkeys: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HCContractPubkeys\",\n    modelProperties: {\n      staking: {\n        serializedName: \"staking\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      election: {\n        serializedName: \"election\",\n        type: {\n          name: \"String\",\n        },\n      },\n      rewards: {\n        serializedName: \"rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GasPricesItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GasPricesItem\",\n    modelProperties: {\n      minGasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"min_gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      utilization: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"utilization\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      minutes: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"minutes\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      difficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      hashrate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      uptime: {\n        serializedName: \"uptime\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      effectiveAtHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SyncStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SyncStatus\",\n    modelProperties: {\n      progress: {\n        serializedName: \"progress\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      speed: {\n        serializedName: \"speed\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      estimate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"estimate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      firstSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lastSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"verified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      unverified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"unverified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"accounts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contracts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contracts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractOracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      locked: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleQueries: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pendingRewards: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      total: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"total\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers.js\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const nameHash: OperationURLParameter = {\n  parameterPath: \"nameHash\",\n  mapper: {\n    serializedName: \"name_hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n","import { createSerializer } from \"../../utils/autorest.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters.js\";\nimport * as Mappers from \"./models/mappers.js\";\nimport {\n  NodeOptionalParams,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAuctionEntryByNameOptionalParams,\n  GetAuctionEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetCurrencyOptionalParams,\n  GetCurrencyResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetPinningTxOptionalParams,\n  GetPinningTxResponse,\n  GetHyperchainContractPubkeysOptionalParams,\n  GetHyperchainContractPubkeysResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetNameEntryByNameHashOptionalParams,\n  GetNameEntryByNameHashResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetRecentGasPricesOptionalParams,\n  GetRecentGasPricesResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n  GetSyncStatusOptionalParams,\n  GetSyncStatusResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n} from \"./models/index.js\";\n\nexport class Node extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get auction entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getAuctionEntryByName(\n    name: string,\n    options?: GetAuctionEntryByNameOptionalParams,\n  ): Promise<GetAuctionEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getAuctionEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get the currency metadata of a node\n   * @param options The options parameters.\n   */\n  getCurrency(\n    options?: GetCurrencyOptionalParams,\n  ): Promise<GetCurrencyResponse> {\n    return this.sendOperationRequest({ options }, getCurrencyOperationSpec);\n  }\n\n  /**\n   * Dry-run unsigned transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx\n   * and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the pinning transaction for the current epoch. Returns both the individual parameters as well as\n   * the parent chain type (aeternity, btc etc.), network id and a packaged 80 byte readymade payload for\n   * that chain type.\n   * @param options The options parameters.\n   */\n  getPinningTx(\n    options?: GetPinningTxOptionalParams,\n  ): Promise<GetPinningTxResponse> {\n    return this.sendOperationRequest({ options }, getPinningTxOperationSpec);\n  }\n\n  /**\n   * Get the pubkeys for the configured hyperchain contracts for staking, election and rewards\n   * @param options The options parameters.\n   */\n  getHyperchainContractPubkeys(\n    options?: GetHyperchainContractPubkeysOptionalParams,\n  ): Promise<GetHyperchainContractPubkeysResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getHyperchainContractPubkeysOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param nameHash The name hash of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByNameHash(\n    nameHash: string,\n    options?: GetNameEntryByNameHashOptionalParams,\n  ): Promise<GetNameEntryByNameHashResponse> {\n    return this.sendOperationRequest(\n      { nameHash, options },\n      getNameEntryByNameHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get minimum gas prices in recent blocks\n   * @param options The options parameters.\n   */\n  getRecentGasPrices(\n    options?: GetRecentGasPricesOptionalParams,\n  ): Promise<GetRecentGasPricesResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getRecentGasPricesOperationSpec,\n    );\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n\n  /**\n   * Get the sync status of a node\n   * @param options The options parameters.\n   */\n  getSyncStatus(\n    options?: GetSyncStatusOptionalParams,\n  ): Promise<GetSyncStatusResponse> {\n    return this.sendOperationRequest({ options }, getSyncStatusOperationSpec);\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAuctionEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/auctions/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AuctionEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrencyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/currency\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Currency,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPinningTxOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/hyperchain/pin-tx\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PinningTx,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getHyperchainContractPubkeysOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/hyperchain/contracts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HCContractPubkeys,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getNameEntryByNameHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/hash/{name_hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.nameHash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecentGasPricesOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/recent-gas-prices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"GasPricesItem\" } },\n        },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSyncStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/sync-status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SyncStatus,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport { OperationOptions } from '@azure/core-client';\nimport { userAgentPolicyName, setClientRequestIdPolicyName } from '@azure/core-rest-pipeline';\nimport {\n  genRequestQueuesPolicy,\n  genCombineGetRequestsPolicy,\n  genErrorFormatterPolicy,\n  parseBigIntPolicy,\n  genVersionCheckPolicy,\n  genRetryOnFailurePolicy,\n} from './utils/autorest.js';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node/index.js';\nimport { UnsupportedVersionError } from './utils/errors.js';\nimport { ConsensusProtocolVersion } from './tx/builder/constants.js';\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends NodeApi {\n  readonly #ignoreVersion: boolean;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Print warning instead of throwing exception if node\n   * or consensus protocol version is not supported, use with caution\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false,\n      retryCount = 3,\n      retryOverallDelay = 800,\n      ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    const getVersion = async (opts: OperationOptions): Promise<string> =>\n      (await this._getCachedStatus(opts)).nodeVersion;\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genVersionCheckPolicy('node', getVersion, '7.1.0', '8.0.0', ignoreVersion),\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) =>\n          [' ', body.reason, body.errorCode == null ? '' : ` (${body.errorCode})`].join(''),\n        ),\n      ],\n      ...options,\n    });\n    this.#ignoreVersion = ignoreVersion;\n    this.pipeline.addPolicy(parseBigIntPolicy, { phase: 'Deserialize' });\n    this.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n    // TODO: use instead our retry policy\n    this.pipeline.removePolicy({ name: 'defaultRetryPolicy' });\n  }\n\n  #cachedStatusPromise?: ReturnType<NodeApi['getStatus']>;\n\n  async _getCachedStatus(options?: OperationOptions): ReturnType<NodeApi['getStatus']> {\n    if (this.#cachedStatusPromise != null) return this.#cachedStatusPromise;\n    return this.getStatus(options);\n  }\n\n  override async getStatus(\n    ...args: Parameters<NodeApi['getStatus']>\n  ): ReturnType<NodeApi['getStatus']> {\n    const promise = super.getStatus(...args);\n    promise.then(\n      () => {\n        this.#cachedStatusPromise = promise;\n      },\n      () => {},\n    );\n    return promise;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    return (await this._getCachedStatus()).networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce((acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc), {\n        effectiveAtHeight: -1,\n        version: 0,\n      }).version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number')\n        .map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      const error = new UnsupportedVersionError(\n        'consensus protocol',\n        version,\n        geVersion,\n        ltVersion,\n      );\n      if (this.#ignoreVersion) console.warn(error.message);\n      else throw error;\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder.js';\nimport { buildTx, getSchema, unpackTx } from './builder/index.js';\nimport { Tag } from './builder/constants.js';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors.js';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null)\n    throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder.js';\nimport { buildTx, buildTxHash, unpackTx } from './builder/index.js';\nimport { Tag } from './builder/constants.js';\nimport { verify } from '../utils/crypto.js';\nimport { getBufferToSign } from '../account/Memory.js';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors.js';\nimport Node from '../Node.js';\nimport getTransactionSignerAddress from './transaction-signer.js';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx,\n    gasUsed,\n    queryFee,\n    isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError(\n      \"Transaction shouldn't be a SignedTx, use `getExecutionCostBySignedTx` instead\",\n    );\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleRespondTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    (params.tag === Tag.SpendTx ||\n      params.tag === Tag.ContractCreateTx ||\n      params.tag === Tag.ContractCallTx ||\n      params.tag === Tag.ChannelDepositTx) &&\n    innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx ||\n      params.tag === Tag.ContractCallTx ||\n      params.tag === Tag.GaAttachTx ||\n      params.tag === Tag.GaMetaTx) &&\n    innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false].map((f) =>\n    verify(getBufferToSign(tx, networkId, f), params.signatures[0], address),\n  );\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError(\"Can't verify signature\");\n  return getExecutionCost(buildTx(params.encodedTx), {\n    ...(isInnerTx && { innerTx: 'freeloader' }),\n    ...options,\n  });\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null &&\n    txHash !== false &&\n    [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleRespondTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, isAddressValid, verify } from '../utils/crypto.js';\nimport { TxUnpacked } from './builder/schema.generated.js';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version.js';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants.js';\nimport { buildTx, unpackTx } from './builder/index.js';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other.js';\nimport { Encoded, Encoding, decode } from '../utils/encoder.js';\nimport Node from '../Node.js';\nimport { Account } from '../apis/node/index.js';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest.js';\nimport { UnexpectedTsError } from '../utils/errors.js';\nimport getTransactionSignerAddress from './transaction-signer.js';\nimport { getExecutionCostUsingNode } from './execution-cost.js';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: Account & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  },\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node\n      .getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (\n    await Promise.all(\n      validators.map(async (v) =>\n        v(tx, {\n          node,\n          account,\n          height,\n          consensusProtocolVersion,\n          nodeNetworkId,\n          parentTxTypes,\n        }),\n      ),\n    )\n  ).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const pipeline = nodeNotCached.pipeline.clone();\n  pipeline.removePolicy({ name: 'parse-big-int' });\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline,\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  node._getCachedStatus = async () => nodeNotCached._getCachedStatus();\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from(\n      [nodeNetworkId, ...(parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [])].join('-'),\n    );\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (\n      verify(txWithNetworkId, signatures[0], account.id) ||\n      verify(txHashWithNetworkId, signatures[0], account.id)\n    )\n      return [];\n    return [\n      {\n        message:\n          'Signature cannot be verified, please ensure that you transaction have' +\n          ' the correct prefix and the correct private key for the sender address',\n        key: 'InvalidSignature',\n        checkedKeys: ['encodedTx', 'signatures'],\n      },\n    ];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [\n      {\n        message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n        key: 'ExpiredTTL',\n        checkedKeys: ['ttl'],\n      },\n    ];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [\n      {\n        message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n        key: 'InsufficientBalance',\n        checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n      },\n    ];\n  },\n  async (tx, { node }) => {\n    if (tx.tag !== Tag.SpendTx || isAddressValid(tx.recipientId, Encoding.Name)) return [];\n    const recipient = await node.getAccountByPubkey(tx.recipientId).catch((error) => {\n      if (!isAccountNotFoundError(error)) throw error;\n      return null;\n    });\n    if (recipient == null || recipient.payable === true) return [];\n    return [\n      {\n        message: 'Recipient account is not payable',\n        key: 'RecipientAccountNotPayable',\n        checkedKeys: ['recipientId'],\n      },\n    ];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = \"Generalized account can't be used to generate SignedTx with signatures\";\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = \"Basic account can't be used to generate GaMetaTx\";\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type =\n      (oracleCall ? 'oracle-call' : null) ??\n      (contractCreate ? 'contract-create' : null) ??\n      (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion) ||\n      (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [\n        {\n          message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n          key: 'VmAndAbiVersionMismatch',\n          checkedKeys: ['ctVersion', 'abiVersion'],\n        },\n      ];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [\n        {\n          message: `Contract ${tx.contractId} is not active`,\n          key: 'ContractNotActive',\n          checkedKeys: ['contractId'],\n        },\n      ];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [\n        {\n          message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n          key: 'ContractNotFound',\n          checkedKeys: ['contractId'],\n        },\n      ];\n    }\n  },\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator.js';\nimport { ensureError } from './utils/other.js';\nimport { TransactionError } from './utils/errors.js';\nimport Node from './Node.js';\nimport { SignedTx } from './apis/node/index.js';\nimport { Encoded } from './utils/encoder.js';\nimport AccountBase from './account/Base.js';\nimport { buildTxHash } from './tx/builder/index.js';\nimport { poll, waitForTxConfirm } from './chain.js';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(message: string, validation: ValidatorResult[], transaction: Encoded.Transaction) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode,\n    onAccount,\n    verify = true,\n    waitMined = true,\n    confirm,\n    innerTx,\n    ...options\n  }: SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${validation\n        .map((v: { message: string }) => v.message)\n        .join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      {\n        requestOptions: {\n          customHeaders: {\n            // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n            '__retry-code': '400',\n            ...(__queue != null ? { __queue } : {}),\n          },\n        },\n      },\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] &\n  Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'> &\n  Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<SignedTx> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { Tag, AensName, DRY_RUN_ACCOUNT } from '../tx/builder/constants.js';\nimport {\n  buildContractIdByContractTx,\n  unpackTx,\n  buildTxAsync,\n  BuildTxOptions,\n  buildTxHash,\n} from '../tx/builder/index.js';\nimport { decode, Encoded } from '../utils/encoder.js';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors.js';\nimport { hash as calcHash } from '../utils/crypto.js';\nimport {\n  ContractCallObject as NodeContractCallObject,\n  Event as NodeEvent,\n} from '../apis/node/index.js';\nimport CompilerBase, { Aci } from './compiler/Base.js';\nimport Node from '../Node.js';\nimport { getAccount, getContract, getContractByteCode, resolveName, txDryRun } from '../chain.js';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction.js';\nimport { TxUnpacked } from '../tx/builder/schema.generated.js';\nimport { Optional, isAccountNotFoundError } from '../utils/other.js';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers.js';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends NodeContractCallObject {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase {\n  [key: string]: (...args: any[]) => any;\n}\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]: M[Name] extends (...args: infer Args) => infer Ret\n    ? (\n        ...args: [\n          ...Args,\n          ...(\n            | []\n            | [\n                Name extends 'init'\n                  ? Parameters<Contract<M>['$deploy']>[1]\n                  : Parameters<Contract<M>['$call']>[2],\n              ]\n          ),\n        ]\n      ) => Promise<\n        Omit<Awaited<ReturnType<Contract<M>['$call']>>, 'decodedResult'> & {\n          // TODO: accurate would be to add `| undefined` because of `waitMined`, but better to drop `waitMined`\n          decodedResult: Ret;\n        }\n      >\n    : never;\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = (keyof M & string) | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> = Fn extends 'init'\n  ? M extends { init: any }\n    ? Parameters<M['init']>\n    : []\n  : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await Contract.initialize({ ...aeSdk.getContext(), sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null)\n      throw new IllegalArgumentError(\"Can't compile without compiler\");\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler.compileBySourceCode(\n        this.$options.sourceCode,\n        this.$options.fileSystem,\n      );\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError(\"Can't compile without sourceCode and sourceCodePath\");\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        if (/Expected \\d+ arguments, got \\d+/.test(message)) {\n          throw new BytecodeMismatchError('ACI', `. Error provided by node: \"${message}\".`);\n        }\n        if (/Trying to call undefined function: <<\\d+,\\d+,\\d+,\\d+>>/.test(message)) {\n          throw new BytecodeMismatchError(\n            'ACI',\n            `. Error provided by node: \"${message}\", function name: ${fnName}.`,\n          );\n        }\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      // TODO: disallow `waitMined: false` to make `decodedResult` required\n      ...(txData.blockHeight != null &&\n        (await this.$getCallResultByTxHash(txData.hash, fnName, options))),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2] &\n      Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<\n    Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }\n  > {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError(\"Can't deploy without account\");\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null)\n      throw new IllegalArgumentError(\"Can't deploy without bytecode\");\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? (await this._estimateGas('init', params, opt)),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(tx, 'init', {\n      ...opt,\n      onAccount: opt.onAccount,\n    });\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...(other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      }),\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find((f: { name: string }) => f.name === name);\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [],\n        name: 'init',\n        payable: false,\n        returns: 'unit',\n        stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>> &\n      Parameters<Contract<M>['$decodeEvents']>[1] &\n      Optional<SendTransactionOptions, 'onAccount' | 'onNode'> &\n      Omit<Parameters<typeof txDryRun>[2], 'onNode'> & { callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true)\n      throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount =\n        callStatic === true &&\n        ((error instanceof TypeError &&\n          error.message ===\n            'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead') ||\n          error instanceof NoWalletConnectedError ||\n          (error instanceof InternalError && error.message === 'Use fallback account'));\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null)\n          throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt,\n          tag: Tag.ContractCreateTx,\n          code: this.$options.bytecode,\n          ownerId: callerId,\n        });\n      } else {\n        if (contractId == null)\n          throw new MissingContractAddressError(\"Can't dry-run contract without address\");\n        tx = await buildTxAsync({\n          ...txOpt,\n          tag: Tag.ContractCallTx,\n          callerId,\n          contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null)\n      throw new IllegalArgumentError(\"Can't handle `top` option in on-chain contract call\");\n    if (contractId == null)\n      throw new MissingContractAddressError(\"Can't call contract without address\");\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? (await this._estimateGas(fn, params, opt)),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null)\n      throw new IllegalArgumentError(\"Can't call contract on chain without account\");\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) =>\n        events.map((event: {}) => [name, Object.keys(event)[0], Object.values(event)[0]]),\n      )\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0:\n        throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1:\n        return matchedEvents[0][0];\n      default:\n        throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, event.topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, event.topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      })\n      .filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>({\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    address,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n    validateBytecode,\n    ...otherOptions\n  }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n    validateBytecode?: boolean;\n    aci?: Aci;\n    address?: Encoded.ContractAddress | AensName;\n  }): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = (await resolveName(address, 'contract_pubkey', {\n        resolveByNode: true,\n        onNode,\n      })) as Encoded.ContractAddress;\n      if (isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError(\"Can't create instance by ACI without address\");\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null)\n        throw new MissingContractAddressError(\"Can't validate bytecode without contract address\");\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null)\n          throw new IllegalArgumentError(\"Can't validate bytecode without compiler\");\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null)\n          throw new IllegalArgumentError(\"Can't validate bytecode without compiler\");\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError(\n          (sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode',\n        );\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({\n    aci,\n    ...otherOptions\n  }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(\n        `The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`,\n      );\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(\n        this.#aciContract.functions.map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object')\n                throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        }),\n      ),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: (typeof Contract)['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { render } from \"./Contracts.vue?vue&type=template&id=f77fbfe2\"\nimport script from \"./Contracts.vue?vue&type=script&lang=js\"\nexport * from \"./Contracts.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <GenerateSpendTx />\n\n  <FieldAction\n    title=\"Sign inner transaction\"\n    arg-title=\"Transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Sign\"\n    :action-handler=\"signInnerTx\"\n    result-title=\"Signed inner transaction\"\n  />\n\n  <FieldAction\n    title=\"Pay for transaction\"\n    arg-title=\"Signed inner transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Pay for transaction\"\n    :action-handler=\"payForTx\"\n    result-title=\"Result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './components/FieldAction.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport GenerateSpendTx from './components/GenerateSpendTx.vue';\n\nexport default {\n  components: {\n    FieldAction,\n    SpendCoins,\n    MessageSign,\n    GenerateSpendTx,\n  },\n  computed: mapState(['aeSdk']),\n  methods: {\n    signInnerTx(txToPayFor) {\n      return this.aeSdk.signTransaction(txToPayFor, { innerTx: true });\n    },\n    payForTx(innerTx) {\n      return this.aeSdk.payForTransaction(innerTx);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>Generate spend transaction</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input v-model=\"spendTo\" placeholder=\"ak_...\" />\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\" /></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\" /></div>\n    </div>\n    <div>\n      <div>Increment nonce by 1</div>\n      <div>\n        <input type=\"checkbox\" v-model=\"incrementNonce\" />\n        (only if you want to pay for this transaction yourself)\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          generatePromise = generate();\n        }\n      \"\n    >\n      Generate\n    </button>\n    <div v-if=\"generatePromise\">\n      <div>Spend transaction</div>\n      <Value :value=\"generatePromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding, Tag, unpackTx, buildTx } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    incrementNonce: true,\n    generatePromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async generate() {\n      let spendTx = await this.aeSdk.buildTx({\n        tag: Tag.SpendTx,\n        senderId: this.aeSdk.address,\n        recipientId: this.spendTo,\n        amount: this.spendAmount,\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n      if (this.incrementNonce) {\n        const spendTxParams = unpackTx(spendTx);\n        spendTxParams.nonce += 1;\n        spendTx = buildTx(spendTxParams);\n      }\n      return spendTx;\n    },\n  },\n};\n</script>\n","import { render } from \"./GenerateSpendTx.vue?vue&type=template&id=359217c2\"\nimport script from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\nexport * from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./PayForTx.vue?vue&type=template&id=2c96b592\"\nimport script from \"./PayForTx.vue?vue&type=script&lang=js\"\nexport * from \"./PayForTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Domain</h2>\n  <div class=\"group\">\n    <div>\n      <div>Name</div>\n      <div>\n        <input :value=\"domain.name\" @input=\"domain.name = $event.target.value || null\" />\n      </div>\n    </div>\n    <div>\n      <div>Version</div>\n      <div>\n        <input :value=\"domain.version\" @input=\"domain.version = $event.target.value || null\" />\n      </div>\n    </div>\n    <div>\n      <div>Network id</div>\n      <div>\n        <input :value=\"domain.networkId\" @input=\"domain.networkId = $event.target.value || null\" />\n      </div>\n    </div>\n    <div>\n      <div>Contract address</div>\n      <div>\n        <input\n          :value=\"domain.contractAddress\"\n          @input=\"domain.contractAddress = $event.target.value || null\"\n        />\n      </div>\n    </div>\n  </div>\n\n  <h2>Data</h2>\n  <div class=\"group\">\n    <div>\n      <div>Type</div>\n      <div>\n        <textarea v-model=\"aci\" placeholder=\"Type as ACI JSON\" />\n      </div>\n    </div>\n    <div>\n      <div>Data</div>\n      <div>\n        <textarea v-model=\"data\" />\n      </div>\n    </div>\n    <div>\n      <div>Encoded data</div>\n      <Value :value=\"toPromise(() => dataEncoded)\" />\n    </div>\n    <div>\n      <div>Hash</div>\n      <Value :value=\"toPromise(() => hash.toString('base64'))\" />\n    </div>\n  </div>\n\n  <FieldAction\n    title=\"Sign\"\n    action-title=\"Sign\"\n    :action-handler=\"signTypedData\"\n    result-title=\"Signature\"\n  />\n\n  <h2>Verify</h2>\n  <div class=\"group\">\n    <div>\n      <div>Signature</div>\n      <div>\n        <input v-model=\"verifySignature\" placeholder=\"sg-encoded\" />\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input v-model=\"verifyAddress\" placeholder=\"ak_...\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          verifyPromise = verifyTypedData();\n        }\n      \"\n    >\n      Verify\n    </button>\n    <div v-if=\"verifyPromise\">\n      <div>Is signature correct</div>\n      <Value :value=\"verifyPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { hashTypedData, verify, decode } from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nexport default {\n  components: {\n    Value,\n    FieldAction,\n  },\n  data: () => ({\n    domain: {\n      name: 'Simple æpp',\n      version: 2,\n      networkId: 'ae_uat',\n      contractAddress: null,\n    },\n    aci: Value.methods.valueToString({\n      record: [\n        { name: 'operation', type: 'string' },\n        { name: 'parameter', type: 'int' },\n      ],\n    }),\n    data: Value.methods.valueToString({\n      operation: 'test',\n      parameter: 42,\n    }),\n    verifySignature: null,\n    verifyAddress: null,\n    verifyPromise: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    dataParsed() {\n      return JSON.parse(this.data);\n    },\n    aciParsed() {\n      return JSON.parse(this.aci);\n    },\n    dataEncoded() {\n      const dataType = new TypeResolver().resolveType(this.aciParsed);\n      return new ContractByteArrayEncoder().encodeWithType(this.dataParsed, dataType);\n    },\n    hash() {\n      return hashTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n  },\n  methods: {\n    async toPromise(getter) {\n      return getter();\n    },\n    signTypedData() {\n      return this.aeSdk.signTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n    async verifyTypedData() {\n      return verify(this.hash, decode(this.verifySignature), this.verifyAddress);\n    },\n  },\n};\n</script>\n","import { render } from \"./TypedData.vue?vue&type=template&id=6021109d\"\nimport script from \"./TypedData.vue?vue&type=script&lang=js\"\nexport * from \"./TypedData.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign delegation to contract</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract address</div>\n      <div><input v-model=\"contractAddress\" /></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensPreclaim\" />\n        AENS preclaim\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.Oracle\" />\n        Oracle\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensName\" />\n        AENS name\n      </label>\n      <div><input v-model=\"name\" /></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensWildcard\" />\n        All AENS names\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.OracleResponse\" />\n        Response to oracle query\n      </label>\n      <div><input v-model=\"oracleQueryId\" /></div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          signPromise = sign();\n        }\n      \"\n    >\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signature</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { DelegationTag, packDelegation } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    DelegationTag,\n    type: DelegationTag.AensPreclaim,\n    contractAddress: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    name: 'test.chain',\n    oracleQueryId: 'oq_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    signPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    getDelegationParams() {\n      switch (this.type) {\n        case DelegationTag.AensPreclaim:\n          return { tag: DelegationTag.AensPreclaim };\n        case DelegationTag.Oracle:\n          return { tag: DelegationTag.Oracle };\n        case DelegationTag.AensName:\n          return { tag: DelegationTag.AensName, nameId: this.name };\n        case DelegationTag.AensWildcard:\n          return { tag: DelegationTag.AensWildcard };\n        case DelegationTag.OracleResponse:\n          return { tag: DelegationTag.OracleResponse, queryId: this.oracleQueryId };\n        default:\n          throw new Error(`Unknown delegation signature type: ${DelegationTag[this.type]}`);\n      }\n    },\n    sign() {\n      const delegation = packDelegation({\n        ...this.getDelegationParams(),\n        contractAddress: this.contractAddress,\n        accountAddress: this.aeSdk.address,\n      });\n      return this.aeSdk.signDelegation(delegation);\n    },\n  },\n};\n</script>\n","import SchemaTypes from '../SchemaTypes.js';\nimport address from '../field-types/address.js';\nimport nameId from '../field-types/name-id.js';\nimport shortUIntConst from '../field-types/short-u-int-const.js';\nimport { Encoded, Encoding, decode, encode } from '../../../utils/encoder.js';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  /**\n   * Delegation of all AENS names to a contract\n   */\n  AensWildcard = 1,\n  /**\n   * Delegation of an AENS name to a contract\n   */\n  AensName = 2,\n  /**\n   * Delegation of AENS preclaim to a contract\n   */\n  AensPreclaim = 3,\n  /**\n   * Delegation of oracle operations to a contract\n   */\n  Oracle = 4,\n  /**\n   * Delegation of oracle query to a contract\n   */\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\n/**\n * Oracle query ID to reply by a contract\n */\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * Address of a contract to delegate permissions to\n */\nconst contractAddress = address(Encoding.ContractAddress);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [\n  {\n    tag: shortUIntConst(DelegationTag.AensWildcard),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.AensName),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    /**\n     * AENS name to manage by a contract\n     */\n    nameId,\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.AensPreclaim),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.Oracle),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.OracleResponse),\n    version: shortUIntConst(1, true),\n    queryId: queryIdField,\n    contractAddress,\n  },\n] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { packRecord, unpackRecord } from '../common.js';\nimport { DelegationTag, schemas } from './schema.js';\nimport { DlgParams, DlgUnpacked } from './schema.generated.js';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import { render } from \"./DelegationSignature.vue?vue&type=template&id=64fd9f2c\"\nimport script from \"./DelegationSignature.vue?vue&type=script&lang=js\"\nexport * from \"./DelegationSignature.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Generate a JWT</h2>\n  <div class=\"group\">\n    <div>\n      <div>Payload as JSON</div>\n      <div>\n        <input :value=\"payloadAsJson\" @input=\"payloadAsJson = $event.target.value || '{}'\" />\n      </div>\n    </div>\n    <div>\n      <div>Include \"sub_jwk\"</div>\n      <div>\n        <input type=\"checkbox\" v-model=\"includeSubJwk\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          signPromise = sign();\n        }\n      \"\n    >\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signed JWT</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n\n  <h2>Unpack and verify JWT</h2>\n  <div class=\"group\">\n    <div>\n      <div>JWT to unpack</div>\n      <div>\n        <input :value=\"jwt\" @input=\"jwt = $event.target.value || null\" />\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input :value=\"address\" @input=\"address = $event.target.value || null\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          unpackPromise = unpack();\n        }\n      \"\n    >\n      Unpack\n    </button>\n    <div v-if=\"unpackPromise\">\n      <div>Unpack result</div>\n      <Value :value=\"unpackPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { unpackJwt, signJwt } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  computed: mapState(['aeSdk']),\n  data: () => ({\n    payloadAsJson: '{ \"test\": true }',\n    includeSubJwk: true,\n    signPromise: null,\n    jwt: 'eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJzdWJfandrIjp7ImNydiI6IkVkMjU1MTkiLCJrdHkiOiJPS1AiLCJ4IjoiaEF5WFM1Y1dSM1pGUzZFWjJFN2NUV0JZcU43SksyN2NWNHF5MHd0TVFnQSJ9LCJ0ZXN0IjoiZGF0YSJ9.u9El4b2O2LRhvTTW3g46vk1hx0xXWPkJEaEeEy-rLzLr2yuQlNc7qIdcr_z06BgHx5jyYv2CpUL3hqLpc0RzBA',\n    address: null,\n    unpackPromise: null,\n  }),\n  methods: {\n    async sign() {\n      const payload = JSON.parse(this.payloadAsJson);\n      if (!this.includeSubJwk) payload.sub_jwk = undefined;\n      // TODO: expose account used in aepp-wallet connection\n      return signJwt(payload, this.aeSdk._resolveAccount(this.aeSdk.address));\n    },\n    async unpack() {\n      return unpackJwt(this.jwt, this.address);\n    },\n  },\n};\n</script>\n","import canonicalize from 'canonicalize';\nimport AccountBase from '../account/Base.js';\nimport { Encoded, Encoding, decode, encode } from './encoder.js';\nimport { verify } from './crypto.js';\nimport { ArgumentError, InvalidSignatureError } from './errors.js';\n\n// TODO: use Buffer.from(data, 'base64url') after solving https://github.com/feross/buffer/issues/309\nconst toBase64Url = (data: Buffer | Uint8Array | string): string =>\n  Buffer.from(data).toString('base64').replaceAll('/', '_').replaceAll('+', '-').replace(/=+$/, '');\n\nconst fromBase64Url = (data: string): Buffer =>\n  Buffer.from(data.replaceAll('_', '/').replaceAll('-', '+'), 'base64');\n\nconst objectToBase64Url = (data: any): string => toBase64Url(canonicalize(data) ?? '');\n\nconst header = 'eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9'; // objectToBase64Url({ alg: 'EdDSA', typ: 'JWT' })\n\n/**\n * JWT including specific header\n * @category JWT\n */\nexport type Jwt = `${typeof header}.${string}.${string}`;\n\n/**\n * Generate a signed JWT\n * Provide `\"sub_jwk\": undefined` in payload to omit signer public key added by default.\n * @param originalPayload - Payload to sign\n * @param account - Account to sign by\n * @category JWT\n */\nexport async function signJwt(originalPayload: any, account: AccountBase): Promise<Jwt> {\n  const payload = { ...originalPayload };\n  if (!('sub_jwk' in payload)) {\n    payload.sub_jwk = {\n      kty: 'OKP',\n      crv: 'Ed25519',\n      x: toBase64Url(decode(account.address)),\n    };\n  }\n  if (payload.sub_jwk === undefined) delete payload.sub_jwk;\n  const body = `${header}.${objectToBase64Url(payload)}` as const;\n  const signature = await account.unsafeSign(body);\n  return `${body}.${toBase64Url(signature)}`;\n}\n\n/**\n * Unpack JWT. It will check signature if address or \"sub_jwk\" provided.\n * @param jwt - JWT to unpack\n * @param address - Address to check signature\n * @category JWT\n */\nexport function unpackJwt(\n  jwt: Jwt,\n  address?: Encoded.AccountAddress,\n): {\n  /**\n   * JWT payload as object\n   */\n  payload: any;\n  /**\n   * Undefined returned in case signature is not checked\n   */\n  signer: Encoded.AccountAddress | undefined;\n} {\n  const components = jwt.split('.');\n  if (components.length !== 3)\n    throw new ArgumentError('JWT components count', 3, components.length);\n  const [h, payloadEncoded, signature] = components;\n  if (h !== header) throw new ArgumentError('JWT header', header, h);\n  const payload = JSON.parse(fromBase64Url(payloadEncoded).toString());\n  const jwk = payload.sub_jwk ?? {};\n  const signer =\n    jwk.x == null || jwk.kty !== 'OKP' || jwk.crv !== 'Ed25519'\n      ? address\n      : encode(fromBase64Url(jwk.x), Encoding.AccountAddress);\n  if (address != null && signer !== address) {\n    throw new ArgumentError('address', `${signer} (\"sub_jwk\")`, address);\n  }\n  if (\n    signer != null &&\n    !verify(Buffer.from(`${h}.${payloadEncoded}`), fromBase64Url(signature), signer)\n  ) {\n    throw new InvalidSignatureError(`JWT is not signed by ${signer}`);\n  }\n  return { payload, signer };\n}\n\n/**\n * Check is string a JWT or not. Use to validate the user input.\n * @param maybeJwt - A string to check\n * @returns True if argument is a JWT\n * @category JWT\n */\nexport function isJwt(maybeJwt: string): maybeJwt is Jwt {\n  try {\n    unpackJwt(maybeJwt as Jwt);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Throws an error if argument is not JWT. Use to ensure that a value is JWT.\n * @param maybeJwt - A string to check\n * @category JWT\n */\nexport function ensureJwt(maybeJwt: string): asserts maybeJwt is Jwt {\n  unpackJwt(maybeJwt as Jwt);\n}\n\n/**\n * Check is JWT signed by address from arguments or \"sub_jwk\"\n * @param jwt - JWT to check\n * @param address - Address to check signature\n * @category JWT\n */\nexport function verifyJwt(jwt: Jwt, address?: Encoded.AccountAddress): boolean {\n  try {\n    const { signer } = unpackJwt(jwt, address);\n    return signer != null;\n  } catch (error) {\n    return false;\n  }\n}\n","import { render } from \"./Jwt.vue?vue&type=template&id=dbfeaa06\"\nimport script from \"./Jwt.vue?vue&type=script&lang=js\"\nexport * from \"./Jwt.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=736a91e6\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { BigNumber } from 'bignumber.js';\nimport { getBalance, resolveName } from './chain.js';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction.js';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder/index.js';\nimport { ArgumentError } from './utils/errors.js';\nimport { Encoded } from './utils/encoder.js';\nimport { Tag, AensName } from './tx/builder/constants.js';\n\n// TODO: name verify should not overlap with transaction verify\ntype ResolveNameOptions = Omit<Parameters<typeof resolveName>[2], 'onNode' | 'verify'>;\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(recipientIdOrName, 'account_pubkey', options),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<\n  Tag.SpendTx,\n  'senderId' | 'recipientId' | 'amount' | 'onNode'\n> &\n  ResolveNameOptions &\n  SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(recipientIdOrName, 'account_pubkey', options);\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(await getBalance.bind(options.onAccount)(senderId, options));\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<\n  Tag.SpendTx,\n  'senderId' | 'recipientId' | 'amount' | 'onNode'\n> &\n  ResolveNameOptions &\n  SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions\n  extends BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>,\n    SendTransactionOptions {}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants.js';\nimport {\n  buildContractIdByContractTx,\n  buildTx,\n  buildTxAsync,\n  BuildTxOptions,\n  unpackTx,\n} from '../tx/builder/index.js';\nimport { hash } from '../utils/crypto.js';\nimport { decode, encode, Encoded, Encoding } from '../utils/encoder.js';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors.js';\nimport { concatBuffers } from '../utils/other.js';\nimport Contract from './Contract.js';\nimport Node from '../Node.js';\nimport { getAccount } from '../chain.js';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction.js';\nimport CompilerBase from './compiler/Base.js';\nimport { packEntry } from '../tx/builder/entry/index.js';\nimport { EntryTag } from '../tx/builder/entry/constants.js';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount,\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n    ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<\n  Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>\n> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount,\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? (await contract._estimateGas('init', args, options)),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode,\n    onAccount,\n    onCompiler,\n    ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions\n  extends BuildTxOptions<\n      Tag.GaAttachTx,\n      'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit' | 'onNode'\n    >,\n    SendTransactionOptions,\n    Pick<\n      Parameters<typeof Contract.initialize>[0],\n      'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n    > {\n  onCompiler: CompilerBase;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(\n      decode(\n        packEntry({\n          tag: EntryTag.GaMetaTxAuthData,\n          fee,\n          gasPrice,\n          txHash: encode(payload, Encoding.TxHash),\n        }),\n      ),\n    );\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain.js';\nimport { sendTransaction } from './send-transaction.js';\nimport * as spendMethods from './spend.js';\nimport * as contractGaMethods from './contract/ga.js';\nimport { buildTxAsync } from './tx/builder/index.js';\nimport { mapObject, UnionToIntersection } from './utils/other.js';\nimport { wrapWithProxy } from './utils/wrap-proxy.js';\nimport Node from './Node.js';\nimport { TxParamsAsync } from './tx/builder/schema.generated.js';\nimport AccountBase from './account/Base.js';\nimport { Encoded } from './utils/encoder.js';\nimport CompilerBase from './contract/compiler/Base.js';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...spendMethods,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions<Methods extends { [key: string]: Function }> = {\n  [Name in keyof Methods]: Methods[Name] extends (...args: infer Args) => any\n    ? Args[Decrement<Args['length']>]\n    : never;\n};\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    // TODO: remove `any` at the same time as AeSdk class\n    return buildTxAsync({ ...(this.getContext() as any), ...options });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K;\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n      /**\n       * Make operation on specific account by providing address (to use account from sdk) or instance\n       * of AccountBase (like MemoryAccount)\n       */\n      onAccount: OnAccount;\n    }\n  : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<\n  [Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>]\n>;\n\ntype TransformMethods<Methods extends { [key: string]: Function }> = {\n  [Name in keyof Methods]: Methods[Name] extends (\n    ...args: [...infer Args, infer Options]\n  ) => infer Ret\n    ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n    : never;\n};\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(\n  AeSdkMethods.prototype,\n  mapObject<Function, Function>(methods, ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ]),\n);\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node.js';\nimport AccountBase from './account/Base.js';\nimport {\n  CompilerError,\n  DuplicateNodeError,\n  NodeNotFoundError,\n  NotImplementedError,\n  TypeError,\n} from './utils/errors.js';\nimport { Encoded } from './utils/encoder.js';\nimport { wrapWithProxy } from './utils/wrap-proxy.js';\nimport CompilerBase from './contract/compiler/Base.js';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods.js';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor({\n    nodes = [],\n    ...options\n  }: AeSdkMethodsOptions & {\n    nodes?: Array<{ name: string; instance: Node }>;\n  } = {}) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError(\"You can't use Compiler API. Compiler is not ready!\");\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError(\"You can't use Node API. Node is not connected or not defined!\");\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...(await this.api.getNodeInfo()),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...(await node.getNodeInfo()),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), ' +\n        `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   * @deprecated Use `unsafeSign` method instead\n   */\n  async sign(\n    data: string | Uint8Array,\n    options: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this.unsafeSign(data, options);\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async unsafeSign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).unsafeSign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??=\n      this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...(mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      }),\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase.js';\nimport { OnAccount } from './AeSdkMethods.js';\nimport AccountBase from './account/Base.js';\nimport { decode, Encoded } from './utils/encoder.js';\nimport { UnavailableAccountError } from './utils/errors.js';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  /**\n   * @param options - Options\n   */\n  constructor({\n    accounts,\n    ...options\n  }: { accounts?: AccountBase[] } & ConstructorParameters<typeof AeSdkBase>[0] = {}) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers.js\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters.js\";\nimport * as Mappers from \"./models/mappers.js\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models/index.js\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder.js';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import {\n  RestError,\n  userAgentPolicyName,\n  setClientRequestIdPolicyName,\n} from '@azure/core-rest-pipeline';\nimport { OperationOptions } from '@azure/core-client';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler/index.js';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest.js';\nimport CompilerBase, { Aci, CompileResult } from './Base.js';\nimport { Encoded } from '../../utils/encoder.js';\nimport { CompilerError, NotImplementedError } from '../../utils/errors.js';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Print warning instead of throwing exception if compiler version\n   * is not supported, use with caution\n   */\n  constructor(compilerUrl: string, { ignoreVersion = false }: { ignoreVersion?: boolean } = {}) {\n    super();\n\n    let version: string | undefined;\n    const getVersion = async (opts: OperationOptions): Promise<string> => {\n      if (version != null) return version;\n      version = (await this.api.apiVersion(opts)).apiVersion;\n      return version;\n    };\n\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genVersionCheckPolicy('compiler', getVersion, '8.0.0', '9.0.0', ignoreVersion),\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason}${\n              body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map(\n                (e) =>\n                  `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`,\n              )\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    this.api.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.api.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","import { shallowRef } from 'vue';\nimport { createStore } from 'vuex';\nimport { AeSdk, Node, CompilerHttp } from '@aeternity/aepp-sdk';\n\nconst store = createStore({\n  state: {\n    address: undefined,\n    networkId: undefined,\n    // AeSdk instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/568c291b92c030011ca9e68169f328be6ff79488/docs/README.md#vue3\n    aeSdk: shallowRef(\n      new AeSdk({\n        nodes: [\n          { name: 'testnet', instance: new Node('https://testnet.aeternity.io') },\n          { name: 'mainnet', instance: new Node('https://mainnet.aeternity.io') },\n        ],\n        onCompiler: new CompilerHttp('https://v8.compiler.aepps.com'),\n      }),\n    ),\n  },\n  mutations: {\n    setAddress(state, address) {\n      state.address = address;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n  },\n});\n\nexport default store;\n","import { createApp } from 'vue';\nimport App from './App.vue';\nimport store from './store';\n\ncreateApp(App).use(store).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkaepp\"] = self[\"webpackChunkaepp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(21852); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["class","_createElementBlock","_Fragment","_createElementVNode","_createVNode","_component_Connect","_hoisted_1","href","_normalizeClass","active","_ctx","view","onClick","_cache","$event","_createBlock","_resolveDynamicComponent","key","_createCommentVNode","connectMethod","type","value","_createTextVNode","reverseIframeWalletUrl","walletConnected","args","$options","disconnect","disabled","walletConnecting","connect","_hoisted_2","cancelWalletDetection","getAccounts","subscribeAccounts","_toDisplayString","rpcAccounts","map","account","address","slice","join","_component_SelectNetwork","select","network","walletConnector","askToSelectNetwork","_hoisted_3","walletName","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","TxTimedOutError","blocks","th","TypeError","UnsupportedPlatformError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","BytecodeMismatchError","source","details","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","InvalidSignatureError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","METHODS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcNoNetworkById","networkId","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","target","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","_classPrivateFieldSet","listener","_message$data$jsonrpc","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","connection","onDetected","wallets","method","params","readyToConnect","wallet","info","getConnection","to_waellet","newWallet","AccountBase","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","AccountSecretKey","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","addChecksum","getPayload","buffer","equals","base64","encode","decode","string","base58","bs58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","AccountRpc","rpcClient","_rpcClient","sign","dataRaw","unsafeSign","signature","request","onAccount","signTransaction","tx","innerTx","res","returnSigned","signedTransaction","signMessage","signTypedData","aci","domain","signDelegation","delegation","RPC_VERSION","_callbacks","_messageId","_methods","_RpcClient_brand","WeakSet","RpcClient","methods","_classPrivateMethodInitSpec","Map","_assertClassBrand","_handleMessage","bind","_sendRequest","reject","set","notify","JSON","stringify","_processResponse","result","methodName","e","_sendResponse","callbacks","get","delete","_WalletConnectorFrameBase_brand","_accounts","WalletConnectorFrameBase","EventEmitter","accounts","_connect","connector","connectNode","disconnectParams","client","emit","updateAddress","_updateAccounts","updateNetwork","_updateNetwork","closeConnection","walletInfo","_getRpcClient","reason","addresses","subscribeAddress","Set","keys","current","connected","_networkId","WalletConnectorFrame","mode","placeholder","promise","selectNetwork","_component_Value","text","props","Array","String","Number","default","watch","handler","then","valueToString","warn","immediate","k","v","__exports__","components","Value","Function","required","SelectNetwork","reverseIframe","process","computed","mapState","setAccount","detectWallets","document","createElement","src","style","display","body","appendChild","stopDetection","walletDetector","confirm","remove","setNode","aeSdk","getNodesInPool","filter","node","nodeNetworkId","selectNode","$store","commit","removeAccount","addAccount","toRaw","on","accountFactory","transport","deviceModel","productName","_hoisted_4","isUsbSupported","isBleSupported","status","_hoisted_5","switchAccount","discoverAccounts","switchNode","isAddressValid","maybeEncoded","encodings","encoding","hash","blake2b","verify","nacl","detached","encodeVarUInt","Uint16Array","Uint32Array","BigUint64Array","BigInt","messagePrefix","messagePrefixLength","messageToHash","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","ProtocolToVmAbi","Ceres","vmVersion","Fate3","abiVersion","Fate","NoAbi","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","Fate2","serialize","consensusProtocolVersion","_value","prepare","onNode","getNodeInfo","vm","abi","_getProtocolDetails","c","kind","ContractCallTx","GaMetaTx","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","at","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","uInt","serializeAettos","genEncodedField","optional","encodedData","genEntryField","txParams","packEntry","ArrayBuffer","isView","startsWith","unpackEntry","genEnumerationField","enm","values","gasPriceCache","getCachedIncreasedGasPrice","cache","time","Date","now","gasPrice","minGasPrice","utilization","getRecentGasPrices","integerValue","maxSafeGasPrice","coinAmount","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ContractCreateTx","GaAttachTx","PayingForTx","factor","TX_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleRespondTx","ceil","floor","getOracleRelativeTtl","ttlKeys","buildGas","builtTx","unpackTx","buildTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","gasPricePrefix","_computingMinFee","_canIncreaseFee","minFee","dividedBy","replace","gt","calculateGasLimitMax","gasMax","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","field","txFields","parameters","addressName","genNonceField","senderKey","strategy","senderId","getAccountNextNonce","catch","nextNonce","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","addressAny","allowRaw","pointers","bKey","bId","oracleId","getOracleByPubkey","queryFee","genShortUIntConstField","constValue","constValueOptional","genTransactionField","wrapWithProxy","valueCb","Proxy","Reflect","unwrapProxy","_wrappedValue","_getPollInterval","_expectedMineRate","_microBlockCycle","_ref","_await$getVal","getVal","devModeDef","def","getNetworkId","base","heightCache","getHeight","cached","height","getCurrentKeyBlockHeight","poll","interval","_interval","max","getTransactionByHash","blockHeight","ttl","awaitHeight","_interval2","currentHeight","waitForTxConfirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","getBalance","format","addr","balance","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","txDryRunHandler","rs","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accountAddress","pubKey","forEach","results","resultPayload","idx","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","pointer","p","absoluteTtl","_isInternalBuild","withDefault","defaultValue","withFormatting","CallReturnType","EntryTag","ORACLE_TTL_TYPES","transactionAny","transactionSignedTx","SignedTx","entryTreesPoi","entry","TreesPoi","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","signatures","raw","SpendTx","recipientId","encoded","NamePreclaimTx","accountId","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","NameTransferTx","NameRevokeTx","ctVersion","deposit","callData","callerId","queryFormat","responseFormat","oracleTtlType","delta","enumeration","oracleTtlValue","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","ChannelSnapshotSoloTx","authFun","gaId","authData","payerId","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","binary","rlpEncode","unpackRecord","encodedRecord","expectedTag","rlpDecode","index","genMapField","Mtree","MtreeValue","recursiveType","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackEntry","_MPTree_brand","MPTree","isComplete","unpEnt","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","d","_getRaw","toObject","_entriesRaw","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","entryMtreeValueArray","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","flags","gaContract","gaAuthFun","owner","boolean","referers","callerNonce","gasUsed","returnValue","returnType","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelOffChainUpdateTransfer","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","contract","callStack","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","GaMetaTxAuthData","encodingTag","_encodingTag$find$","_expectedTag","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","CLA","GET_ADDRESS","SIGN_TRANSACTION","GET_APP_CONFIGURATION","SIGN_PERSONAL_MESSAGE","AccountLedger","decorateAppAPIMethods","offset","headerLength","networkIdBuffer","toSend","maxChunkSize","chunkSize","alloc","bufferOffset","writeUInt32BE","writeUInt8","copy","reduce","previous","i","send","messageStr","verCmp","a","b","getComponents","aComponents","bComponents","componentsToNumber","reverse","acc","semverSatisfies","AccountBaseFactory","discover","initialize","_ensureReadyPromise","_AccountLedgerFactory_brand","AccountLedgerFactory","ensureReady","_getAppConfiguration","getAppConfiguration","getAddress","accountIndex","_ensureReady","addressLength","_classPrivateFieldGet2","TransportWebBleAndroidFix","TransportWebBle","open","device","navigator","userAgent","getPrimaryServicesOrig","gatt","getPrimaryServices","service","getCharacteristicOrig","getCharacteristic","characteristic","writeValueOrig","writeValue","delayed","created","isBle","TransportWebUsb","create","reset","factory","close","shift","api","state","mounted","isSupported","unsubscribeLedgerLog","listen","date","toLocaleTimeString","beforeUnmount","requestSnap","snapId","invokeSnap","provider","AccountMetamask","derivationPath","snapMinVersion","snapMaxVersion","metamaskVersionPrefix","_provider","_AccountMetamaskFactory_brand","_providerPromise","AccountMetamaskFactory","_provider2","installSnap","_getProvider","snapVersion","getSnapVersion","snaps","_getMetamaskAsInjected","ethereum","_getMetamaskOverEip","dispatchEvent","Event","event","detail","rdns","_classPrivateFieldGet3","_await$_assertClassBr","shallowRef","mnemonic","hashJson","_canonicalize","canonicalize","hashDomain","domainAci","record","option","domainType","TypeResolver","resolveType","fateValue","ContractByteArrayEncoder","encodeWithType","hashTypedData","getBufferToSign","prefixes","rlpBinaryTx","_secretKeyDecoded","AccountMemory","secretKey","keyPair","fromSeed","publicKey","generate","txWithNetworkId","dHash","ED25519_CURVE","HARDENED_OFFSET","deriveKey","I","tweetnaclAuth","IL","IR","chainCode","derivePathFromKey","segments","segment","indexBuffer","allocUnsafe","_mnemonicOrWalletOrSeed","_AccountMnemonicFactory_brand","AccountMnemonicFactory","mnemonicOrWalletOrSeed","getWallet","_getWallet","getWalletSync","_getAccountByWallet","initializeSync","sync","setWalletBySeed","seed","masterKey","walletKey","mnemonicToSeedSync","mnemonicToSeed","Frame","Ledger","Metamask","Mnemonic","balancePromise","heightPromise","nodeInfoPromise","compilerVersionPromise","_component_SpendCoins","_component_MessageSign","_component_DataSign","spendTo","spendAmount","spendPayload","spendPromise","spend","TextEncoder","_component_FieldAction","title","messageSign","$props","argTitle","$data","argValue","argPlaceholder","actionHandler","actionTitle","resultTitle","argDefaultValue","FieldAction","messageToSign","dataBuffer","onInput","setData","dataSign","emptyData","Buffer","SpendCoins","MessageSign","DataSign","$watch","compilerApi","NaN","contractSourceCode","createPromise","compile","deploy","deployPromise","callOnChain","callStatic","bigIntPrefix","createSerializer","serializer","createSerializerOrig","mapper","objectName","_objectName","serializedName","responseBody","MAX_SAFE_INTEGER","safeLength","bigIntPropertyRe","RegExp","bigIntArrayItemRe","parseBigIntPolicy","sendRequest","next","bodyAsText","replaceAll","matched","match","end","genRequestQueuesPolicy","requestQueues","policy","_requestQueues$get","headers","getResponse","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","url","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","parsedBody","genVersionCheckPolicy","versionCb","ignoreVersion","has","requestOptions","customHeaders","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","statusesToNotRetry","intervals","fill","_","intervalSum","intervalsInMs","attempt","urlParsed","searchParams","_e$response$status","className","modelProperties","constraints","InclusiveMinimum","InclusiveMaximum","payable","allowedValues","ErrorModel","errorCode","NextNonceResponse","SignedTxs","element","blockHash","Tx","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","Delegates","OffChainUpdate","uberParent","polymorphicDiscriminator","clientName","op","RelativeTTL","isConstant","Ttl","NamePointer","encodedKey","AuctionEntry","startedAt","endsAt","highestBidder","highestBid","ContractObject","referrerIds","ByteCode","bytecode","PoI","Currency","symbol","subunit","subunitsPerUnit","fiatConverstionUrl","fiatConversionUrl","logo","primaryColour","secondaryColour","networkName","Image","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","topics","Generation","keyBlock","microBlocks","KeyBlock","prevHash","prevKeyHash","miner","beneficiary","pow","MinItems","MaxItems","Header","pofHash","txsHash","PinningTx","epoch","parentPayload","lastLeader","parentType","parentNetworkId","HCContractPubkeys","staking","election","rewards","HashResponse","HeightResponse","MicroBlockHeader","CountResponse","count","NameEntry","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","PeerPubKey","pubkey","GasPricesItem","minutes","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","uptime","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","SyncStatus","progress","speed","estimate","EncodedTx","PostTxResponse","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","ChannelSetDelegatesTx","CheckTxInPoolResponse","CommitmentId","UnsignedTx","GAAttachTx","GAMetaTx","NameHash","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","PeerCount","available","blocked","PeerCountConnected","PeerCountAvailable","verified","unverified","Peers","peers","PubKey","TokenSupply","contractOracles","locked","pendingRewards","total","OffChainCallContract","OffChainDeposit","OffChainNewContract","OffChainTransfer","OffChainWithdrawal","CreateContractUnsignedTx","discriminators","accept","parameterPath","$host","skipEncoding","contentType","DryRunInputMapper","nameHash","fromParam","limit","typeParam","body1","EncodedTxMapper","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","sendOperationRequest","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHashOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountNextNonceOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAuctionEntryByName","getAuctionEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getCurrency","getCurrencyOperationSpec","protectedDryRunTxsOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getTopHeader","getTopHeaderOperationSpec","getPinningTx","getPinningTxOperationSpec","getHyperchainContractPubkeys","getHyperchainContractPubkeysOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getNameEntryByNameOperationSpec","getNameEntryByNameHash","getNameEntryByNameHashOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getRecentGasPricesOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","getSyncStatus","getSyncStatusOperationSpec","postTransaction","postTransactionOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","Mappers","httpMethod","responses","bodyMapper","isError","urlParameters","Parameters","headerParameters","queryParameters","requestBody","mediaType","_ignoreVersion","_cachedStatusPromise","NodeApi","getVersion","_getCachedStatus","opts","allowInsecureConnection","additionalPolicies","pipeline","addPolicy","phase","removePolicy","userAgentPolicyName","setClientRequestIdPolicyName","versions","getTransactionSignerAddress","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","flat","verifyTransaction","nodeNotCached","clone","txBinary","txHashWithNetworkId","checkedKeys","nestedTx","cost","recipient","_ref2","oracleCall","contractCreate","contractCall","parse","InvalidTxError","validation","sendTransaction","txUnsigned","waitMined","__queue","pollResult","txData","confirmationHeight","verifyTx","_Contract_brand","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult","_estimateGas","$call","$deploy","_opt$gasLimit","opt","_calldata","_name","_sendAndProcess","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","contractName","_getContractNameByEvent","decoded","decodeEvent","validateBytecode","otherOptions","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","Calldata","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","contractAddressToName","addressToName","variant","eventName","calcHash","arr","some","trim","getContext","arg","setFactor","multiplyByFactor","_component_GenerateSpendTx","signInnerTx","payForTx","incrementNonce","generatePromise","spendTx","spendTxParams","GenerateSpendTx","txToPayFor","payForTransaction","_hoisted_6","toPromise","dataEncoded","_hoisted_7","verifySignature","verifyAddress","verifyPromise","verifyTypedData","_hoisted_8","operation","parameter","dataParsed","aciParsed","dataType","getter","DelegationTag","AensPreclaim","AensName","AensWildcard","oracleQueryId","signPromise","oracleAddressField","queryIdField","packDelegation","getDelegationParams","payloadAsJson","includeSubJwk","jwt","unpackPromise","unpack","toBase64Url","fromBase64Url","objectToBase64Url","header","signJwt","originalPayload","sub_jwk","kty","crv","x","unpackJwt","_payload$sub_jwk","h","payloadEncoded","jwk","signer","_resolveAccount","Connect","Basic","Contracts","PayForTx","TypedData","DelegationSignature","Jwt","render","recipientIdOrName","transferFunds","fraction","desiredAmount","ROUND_HALF_UP","plus","minus","createGeneralizedAccount","authFnName","_options$gasLimit","freeze","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","chainMethods","spendMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","mergeWith","prototype","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","ensureNodeConnected","pool","selectedNodeName","isNodeConnected","_options$networkId","AeSdk","selectedAddress","selectAccount","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","isArray","cmpOut","warning","generateAciBySourceCode","generateAci","store","createStore","mutations","setAddress","setNetworkId","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","__esModule","definition","o","defineProperty","enumerable","g","globalThis","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}