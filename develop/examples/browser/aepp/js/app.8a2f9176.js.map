{"version":3,"file":"js/app.8a2f9176.js","mappings":"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","sources":["webpack://aepp/./src/App.vue","webpack://aepp/./src/Connect.vue","webpack://aepp/../../src/utils/errors.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://aepp/../../src/aepp-wallet-communication/schema.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://aepp/../../src/aepp-wallet-communication/wallet-detector.ts","webpack://aepp/./src/Connect.vue?1a8f","webpack://aepp/./src/Basic.vue","webpack://aepp/./src/components/Value.vue","webpack://aepp/./src/components/Value.vue?9937","webpack://aepp/./src/components/SpendCoins.vue","webpack://aepp/../../src/utils/other.ts","webpack://aepp/../../src/utils/encoder-types.ts","webpack://aepp/../../src/utils/encoder.ts","webpack://aepp/./src/components/SpendCoins.vue?b814","webpack://aepp/./src/components/MessageSign.vue","webpack://aepp/./src/components/FieldAction.vue","webpack://aepp/./src/components/FieldAction.vue?d339","webpack://aepp/./src/components/MessageSign.vue?1f61","webpack://aepp/./src/Basic.vue?efb3","webpack://aepp/./src/Contracts.vue","webpack://aepp/./src/Contracts.vue?05c9","webpack://aepp/./src/PayForTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue","webpack://aepp/../../../src/tx/builder/constants.ts","webpack://aepp/../../src/utils/crypto.ts","webpack://aepp/../../../../src/tx/builder/field-types/entry.ts","webpack://aepp/../../../../src/tx/builder/field-types/array.ts","webpack://aepp/../../../../src/tx/builder/field-types/map.ts","webpack://aepp/../../src/utils/bytes.ts","webpack://aepp/../../../src/tx/builder/helpers.ts","webpack://aepp/../../../../src/tx/builder/field-types/u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://aepp/../../../../src/tx/builder/field-types/address.ts","webpack://aepp/../../../../src/tx/builder/field-types/encoded.ts","webpack://aepp/../../../../src/tx/builder/field-types/raw.ts","webpack://aepp/../../src/utils/bignumber.ts","webpack://aepp/../../src/utils/amount-formatter.ts","webpack://aepp/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://aepp/../../../../src/tx/builder/field-types/fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/ttl.ts","webpack://aepp/../../../../src/tx/builder/field-types/nonce.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers.ts","webpack://aepp/../../../../src/tx/builder/field-types/field.ts","webpack://aepp/../../../../src/tx/builder/field-types/name.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-id.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-default.ts","webpack://aepp/../../../../src/tx/builder/field-types/ct-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/boolean.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-price.ts","webpack://aepp/../../../../src/tx/builder/field-types/abi-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/enumeration.ts","webpack://aepp/../../../../src/tx/builder/field-types/string.ts","webpack://aepp/../../../../src/tx/builder/field-types/query-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/mptree.ts","webpack://aepp/../../../../src/tx/builder/field-types/wrapped.ts","webpack://aepp/../../../src/tx/builder/schema.ts","webpack://aepp/../../../src/tx/builder/index.ts","webpack://aepp/./src/components/GenerateSpendTx.vue?b650","webpack://aepp/./src/PayForTx.vue?2fdc","webpack://aepp/./src/TypedData.vue","webpack://aepp/../../src/utils/typed-data.ts","webpack://aepp/./src/TypedData.vue?5e40","webpack://aepp/./src/DelegationSignature.vue","webpack://aepp/./src/DelegationSignature.vue?67ef","webpack://aepp/./src/App.vue?7ccd","webpack://aepp/../../src/utils/semver-satisfies.ts","webpack://aepp/../../src/utils/autorest.ts","webpack://aepp/../../../../src/apis/node/models/mappers.ts","webpack://aepp/../../../../src/apis/node/models/parameters.ts","webpack://aepp/../../../src/apis/node/node.ts","webpack://aepp/../src/Node.ts","webpack://aepp/../../src/tx/transaction-signer.ts","webpack://aepp/../../src/account/Memory.ts","webpack://aepp/../../src/tx/execution-cost.ts","webpack://aepp/../../src/tx/validator.ts","webpack://aepp/../src/chain.ts","webpack://aepp/../src/aens.ts","webpack://aepp/../src/spend.ts","webpack://aepp/../src/oracle.ts","webpack://aepp/../../src/contract/Contract.ts","webpack://aepp/../../src/contract/delegation-signature.ts","webpack://aepp/../../src/contract/ga.ts","webpack://aepp/../src/AeSdkMethods.ts","webpack://aepp/../src/AeSdkBase.ts","webpack://aepp/../../src/account/Base.ts","webpack://aepp/../../src/account/Rpc.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://aepp/../src/AeSdkAepp.ts","webpack://aepp/../../../../src/apis/compiler/models/mappers.ts","webpack://aepp/../../../../src/apis/compiler/models/parameters.ts","webpack://aepp/../../../src/apis/compiler/compiler.ts","webpack://aepp/../../../src/contract/compiler/Base.ts","webpack://aepp/../../../src/contract/compiler/Http.ts","webpack://aepp/./src/store.js","webpack://aepp/./src/main.js","webpack://aepp/webpack/bootstrap","webpack://aepp/webpack/runtime/chunk loaded","webpack://aepp/webpack/runtime/define property getters","webpack://aepp/webpack/runtime/global","webpack://aepp/webpack/runtime/hasOwnProperty shorthand","webpack://aepp/webpack/runtime/make namespace object","webpack://aepp/webpack/runtime/jsonp chunk loading","webpack://aepp/webpack/startup"],"sourcesContent":["<template>\n  <h2>Simple æpp</h2>\n\n  <Connect />\n\n  <div class=\"nav\">\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Basic' }\"\n      @click=\"view = 'Basic'\"\n    >\n      Basic functionality\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Contracts' }\"\n      @click=\"view = 'Contracts'\"\n    >\n      Smart contracts\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'PayForTx' }\"\n      @click=\"view = 'PayForTx'\"\n    >\n      Pay for transaction\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'TypedData' }\"\n      @click=\"view = 'TypedData'\"\n    >\n      Typed data\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'DelegationSignature' }\"\n      @click=\"view = 'DelegationSignature'\"\n    >\n      Delegation signature\n    </a>\n  </div>\n\n  <Component\n    v-if=\"view\"\n    :is=\"view\"\n  />\n</template>\n\n<script>\nimport Connect from './Connect.vue';\nimport Basic from './Basic.vue';\nimport Contracts from './Contracts.vue';\nimport PayForTx from './PayForTx.vue';\nimport TypedData from './TypedData.vue';\nimport DelegationSignature from './DelegationSignature.vue';\n\nexport default {\n  components: {\n    Connect, Basic, Contracts, PayForTx, TypedData, DelegationSignature,\n  },\n  data: () => ({ view: '' }),\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","<template>\n  <div class=\"group\">\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"default\">\n        Iframe or WebExtension\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"reverse-iframe\">\n        Reverse iframe\n      </label>\n      <div><input v-model=\"reverseIframeWalletUrl\"></div>\n    </div>\n\n    <button\n      v-if=\"walletConnected\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else-if=\"connectMethod\"\n      :disabled=\"walletConnecting\"\n      @click=\"connect\"\n    >\n      Connect\n    </button>\n\n    <button\n      v-if=\"cancelWalletDetection\"\n      @click=\"cancelWalletDetection\"\n    >\n      Cancel detection\n    </button>\n  </div>\n\n  <div class=\"group\">\n    <div>\n      <div>SDK status</div>\n      <div>\n        {{\n          (walletConnected && 'Wallet connected')\n          || (cancelWalletDetection && 'Wallet detection')\n          || (walletConnecting && 'Wallet connecting')\n          || 'Ready to connect to wallet'\n        }}\n      </div>\n    </div>\n    <div>\n      <div>Wallet name</div>\n      <div>{{ walletName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  walletDetector, BrowserWindowMessageConnection, RpcConnectionDenyError, RpcRejectedByUserError,\n} from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\n\nexport default {\n  data: () => ({\n    connectMethod: 'default',\n    walletConnected: false,\n    walletConnecting: null,\n    reverseIframe: null,\n    reverseIframeWalletUrl: process.env.VUE_APP_WALLET_URL ?? `http://${location.hostname}:9000`,\n    walletInfo: null,\n    cancelWalletDetection: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    walletName() {\n      if (!this.walletConnected) return 'Wallet is not connected';\n      return this.walletInfo.name;\n    },\n  },\n  methods: {\n    async detectWallets() {\n      if (this.connectMethod === 'reverse-iframe') {\n        this.reverseIframe = document.createElement('iframe');\n        this.reverseIframe.src = this.reverseIframeWalletUrl;\n        this.reverseIframe.style.display = 'none';\n        document.body.appendChild(this.reverseIframe);\n      }\n      const connection = new BrowserWindowMessageConnection();\n      return new Promise((resolve, reject) => {\n        const stopDetection = walletDetector(connection, async ({ newWallet }) => {\n          if (confirm(`Do you want to connect to wallet ${newWallet.info.name} with id ${newWallet.info.id}`)) {\n            stopDetection();\n            resolve(newWallet.getConnection());\n            this.cancelWalletDetection = null;\n          }\n        });\n        this.cancelWalletDetection = () => {\n          reject(new Error('Wallet detection cancelled'));\n          stopDetection();\n          this.cancelWalletDetection = null;\n          if (this.reverseIframe) this.reverseIframe.remove();\n        };\n      });\n    },\n    async connect() {\n      this.walletConnecting = true;\n      this.aeSdk.onDisconnect = () => {\n        this.walletConnected = false;\n        this.walletInfo = null;\n        this.$store.commit('setAddress', undefined);\n        if (this.reverseIframe) this.reverseIframe.remove();\n      };\n      try {\n        const connection = await this.detectWallets();\n        try {\n          this.walletInfo = await this.aeSdk.connectToWallet(connection);\n        } catch (error) {\n          if (error instanceof RpcConnectionDenyError) connection.disconnect();\n          throw error;\n        }\n        this.walletConnected = true;\n        const { address: { current } } = await this.aeSdk.subscribeAddress('subscribe', 'connected');\n        this.$store.commit('setAddress', Object.keys(current)[0]);\n      } catch (error) {\n        if (\n          error.message === 'Wallet detection cancelled'\n          || error instanceof RpcConnectionDenyError\n          || error instanceof RpcRejectedByUserError\n        ) return;\n        throw error;\n      } finally {\n        this.walletConnecting = false;\n      }\n    },\n    disconnect() {\n      this.aeSdk.disconnectWallet();\n    },\n  },\n};\n</script>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegationToContract = 'delegationToContract.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  #target?: ImplPostMessage;\n\n  #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import BrowserConnection from './connection/Browser';\nimport BrowserWindowMessageConnection from './connection/BrowserWindowMessage';\nimport { MESSAGE_DIRECTION, METHODS } from './schema';\nimport { WalletInfo } from './rpc/types';\nimport { UnsupportedPlatformError } from '../utils/errors';\n\ninterface Wallet {\n  info: WalletInfo;\n  getConnection: () => BrowserWindowMessageConnection;\n}\ninterface Wallets { [key: string]: Wallet }\n\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default (\n  connection: BrowserConnection,\n  onDetected: ({ wallets, newWallet }: { wallets: Wallets; newWallet: Wallet }) => void,\n): () => void => {\n  if (window == null) throw new UnsupportedPlatformError('Window object not found, you can run wallet detector only in browser');\n  const wallets: Wallets = {};\n\n  connection.connect((\n    { method, params }: { method: string; params: WalletInfo },\n    origin: string,\n    source: Window,\n  ) => {\n    if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n\n    const wallet = {\n      info: params,\n      getConnection() {\n        return new BrowserWindowMessageConnection({\n          target: source,\n          ...params.type === 'extension' ? {\n            sendDirection: MESSAGE_DIRECTION.to_waellet,\n            receiveDirection: MESSAGE_DIRECTION.to_aepp,\n            ...window.origin !== 'null' && { origin: window.origin },\n          } : {\n            origin: params.origin,\n          },\n        });\n      },\n    };\n    wallets[wallet.info.id] = wallet;\n    onDetected({ wallets, newWallet: wallet });\n  }, () => {});\n\n  return () => connection.disconnect();\n};\n","import { render } from \"./Connect.vue?vue&type=template&id=02b69bc7\"\nimport script from \"./Connect.vue?vue&type=script&lang=js\"\nexport * from \"./Connect.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>General information</h2>\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>Height</div>\n      <Value :value=\"heightPromise\" />\n    </div>\n    <div>\n      <div>Node info</div>\n      <Value :value=\"nodeInfoPromise\" />\n    </div>\n    <div>\n      <div>Compiler version</div>\n      <Value :value=\"compilerVersionPromise\" />\n    </div>\n  </div>\n\n  <SpendCoins />\n\n  <MessageSign />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\n\nexport default {\n  components: { Value, SpendCoins, MessageSign },\n  data: () => ({\n    balancePromise: null,\n    heightPromise: null,\n    nodeInfoPromise: null,\n    compilerVersionPromise: null,\n  }),\n  computed: mapState(['aeSdk', 'address', 'networkId']),\n  mounted() {\n    this.$watch(\n      ({ aeSdk, address, networkId }) => [aeSdk, address, networkId],\n      ([aeSdk, address]) => {\n        this.compilerVersionPromise = aeSdk.compilerApi.version();\n        this.balancePromise = address\n          ? aeSdk.getBalance(address) : Promise.reject(new Error('Address not available'));\n        this.heightPromise = aeSdk.getHeight();\n        this.nodeInfoPromise = aeSdk.getNodeInfo();\n      },\n      { immediate: true },\n    );\n  },\n};\n</script>\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=0047ad3a\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Spend coins</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <button @click=\"() => { spendPromise = spend(); }\">\n      Spend\n    </button>\n    <div v-if=\"spendPromise\">\n      <div>Spend result</div>\n      <Value :value=\"spendPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    spendPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    spend() {\n      return this.aeSdk.spend(this.spendAmount, this.spendTo, {\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n    },\n  },\n};\n</script>\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import { render } from \"./SpendCoins.vue?vue&type=template&id=6217803d\"\nimport script from \"./SpendCoins.vue?vue&type=script&lang=js\"\nexport * from \"./SpendCoins.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <FieldAction\n    title=\"Sign a message\"\n    arg-title=\"Message to sign\"\n    arg-placeholder=\"I want to <action name> at <time> on <network name>\"\n    action-title=\"Sign message\"\n    :action-handler=\"messageSign\"\n    result-title=\"Message sign result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './FieldAction.vue';\n\nexport default {\n  components: { FieldAction },\n  computed: mapState(['aeSdk']),\n  methods: {\n    messageSign(messageToSign) {\n      return this.aeSdk.signMessage(messageToSign);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>{{ title }}</h2>\n  <div class=\"group\">\n    <div v-if=\"argTitle\">\n      <div>{{ argTitle }}</div>\n      <div>\n        <input\n          v-model=\"argValue\"\n          :placeholder=\"argPlaceholder\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { promise = actionHandler(argValue); }\">\n      {{ actionTitle }}\n    </button>\n    <div v-if=\"promise\">\n      <div>{{ resultTitle }}</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  props: {\n    title: { type: String, required: true },\n    argTitle: { type: String, required: false },\n    argPlaceholder: { type: String, required: false },\n    argDefaultValue: { type: String, required: false },\n    actionTitle: { type: String, required: true },\n    actionHandler: { type: Function, required: true },\n    resultTitle: { type: String, required: true },\n  },\n  data() {\n    return {\n      argValue: this.argDefaultValue,\n      promise: null,\n    };\n  },\n};\n</script>\n","import { render } from \"./FieldAction.vue?vue&type=template&id=7b236a56\"\nimport script from \"./FieldAction.vue?vue&type=script&lang=js\"\nexport * from \"./FieldAction.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./MessageSign.vue?vue&type=template&id=2b567dd0\"\nimport script from \"./MessageSign.vue?vue&type=script&lang=js\"\nexport * from \"./MessageSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Basic.vue?vue&type=template&id=4d43cf2d\"\nimport script from \"./Basic.vue?vue&type=script&lang=js\"\nexport * from \"./Basic.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Contract Instance</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract Source Code</div>\n      <div>\n        <textarea\n          v-model=\"contractSourceCode\"\n          placeholder=\"Contact source code\"\n        />\n      </div>\n    </div>\n    <button @click=\"() => { createPromise = create(); }\">\n      Create\n    </button>\n    <div v-if=\"createPromise\">\n      <div>Contract Instance</div>\n      <Value :value=\"createPromise.then(() => 'Ready')\" />\n    </div>\n  </div>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Compile Contract\"\n      action-title=\"Compile\"\n      :action-handler=\"compile\"\n      result-title=\"Bytecode\"\n    />\n  </template>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Deploy Contract\"\n      arg-title=\"Deploy argument\"\n      arg-placeholder=\"Deploy argument\"\n      arg-default-value=\"5\"\n      action-title=\"Deploy\"\n      :action-handler=\"deploy\"\n      result-title=\"Deployed Contract\"\n    />\n  </template>\n\n  <template v-if=\"deployPromise\">\n    <FieldAction\n      title=\"Call Contract on chain\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"7\"\n      action-title=\"Call\"\n      :action-handler=\"callOnChain\"\n      result-title=\"Call Result\"\n    />\n\n    <FieldAction\n      title=\"Call Contract using dry-run (static)\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"8\"\n      action-title=\"Call\"\n      :action-handler=\"callStatic\"\n      result-title=\"Call Result\"\n    />\n  </template>\n</template>\n\n<script>\nimport { shallowRef } from 'vue';\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nconst contractSourceCode = `\ncontract Multiplier =\n  record state = { factor: int }\n\n  entrypoint init(f : int) = { factor = f }\n\n  stateful entrypoint setFactor(f : int) =\n    put(state{ factor = f })\n\n  entrypoint multiplyByFactor(x : int) =\n    x * state.factor\n`.trim();\n\nexport default {\n  components: { Value, FieldAction },\n  data: () => ({\n    contractSourceCode,\n    createPromise: null,\n    contract: null,\n    deployPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async create() {\n      // Contract instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n      this.contract = shallowRef(\n        await this.aeSdk.initializeContract({ sourceCode: this.contractSourceCode }),\n      );\n    },\n    async compile() {\n      return this.contract.$compile();\n    },\n    async deploy(arg) {\n      this.deployPromise = this.contract.$deploy([arg]);\n      return this.deployPromise;\n    },\n    async callOnChain(arg) {\n      return this.contract.setFactor(arg);\n    },\n    async callStatic(arg) {\n      return this.contract.multiplyByFactor(arg);\n    },\n  },\n};\n</script>\n","import { render } from \"./Contracts.vue?vue&type=template&id=c036283c\"\nimport script from \"./Contracts.vue?vue&type=script&lang=js\"\nexport * from \"./Contracts.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <GenerateSpendTx />\n\n  <FieldAction\n    title=\"Sign inner transaction\"\n    arg-title=\"Transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Sign\"\n    :action-handler=\"signInnerTx\"\n    result-title=\"Signed inner transaction\"\n  />\n\n  <FieldAction\n    title=\"Pay for transaction\"\n    arg-title=\"Signed inner transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Pay for transaction\"\n    :action-handler=\"payForTx\"\n    result-title=\"Result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './components/FieldAction.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport GenerateSpendTx from './components/GenerateSpendTx.vue';\n\nexport default {\n  components: {\n    FieldAction, SpendCoins, MessageSign, GenerateSpendTx,\n  },\n  computed: mapState(['aeSdk']),\n  methods: {\n    signInnerTx(txToPayFor) {\n      return this.aeSdk.signTransaction(txToPayFor, { innerTx: true });\n    },\n    payForTx(innerTx) {\n      return this.aeSdk.payForTransaction(innerTx);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>Generate spend transaction</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <div>\n      <div>Increment nonce by 1</div>\n      <div>\n        <input\n          type=\"checkbox\"\n          v-model=\"incrementNonce\"\n        >\n        (only if you want to pay for this transaction yourself)\n      </div>\n    </div>\n    <button @click=\"() => { generatePromise = generate(); }\">\n      Generate\n    </button>\n    <div v-if=\"generatePromise\">\n      <div>Spend transaction</div>\n      <Value :value=\"generatePromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport {\n  encode, Encoding, Tag, unpackTx, buildTx,\n} from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    incrementNonce: true,\n    generatePromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async generate() {\n      let spendTx = await this.aeSdk.buildTx({\n        tag: Tag.SpendTx,\n        senderId: this.aeSdk.address,\n        recipientId: this.spendTo,\n        amount: this.spendAmount,\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n      if (this.incrementNonce) {\n        const spendTxParams = unpackTx(spendTx);\n        spendTxParams.nonce += 1;\n        spendTx = buildTx(spendTxParams);\n      }\n      return spendTx;\n    },\n  },\n};\n</script>\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9;\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param address - Address\n * @param prefix - Transaction prefix. Default: 'ak'\n * @returns is valid\n */\nexport function isAddressValid(\n  address: string,\n  prefix: Encoding = Encoding.AccountAddress,\n): boolean {\n  try {\n    decode(address as Encoded.Generic<typeof prefix>);\n    const actualPrefix = address.split('_')[0];\n    if (actualPrefix !== prefix) {\n      throw new ArgumentError('Encoded string type', prefix, actualPrefix);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Signs a message, and then verifies that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      const tx = unpackTx(encode(buf, Encoding.Transaction));\n      if (tag != null && tx.tag !== tag) throw new ArgumentError('Tag', Tag[tag], Tag[tx.tag]);\n      return tx;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param name - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param name - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n      ),\n    );\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag } from '../constants';\nimport coinAmount from './coin-amount';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the Base fee gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base fee\n * @example\n * ```js\n * TX_FEE_BASE('channelForceProgress') => new BigNumber(30 * 15000)\n * ```\n */\nconst TX_FEE_BASE_GAS = (txType: Tag): BigNumber => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ChannelOffChainUpdateCallContract]: 0,\n    [Tag.ChannelOffChainUpdateCreateContract]: 0,\n    [Tag.ChannelOffChainUpdateDeposit]: 0,\n    [Tag.ChannelOffChainUpdateWithdraw]: 0,\n    [Tag.ChannelOffChainUpdateTransfer]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return new BigNumber(factor * BASE_GAS);\n};\n\n/**\n * Calculate fee for Other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The Other fee\n * @example\n * ```js\n * TX_FEE_OTHER_GAS('oracleResponse',10, { relativeTtl: 10, innerTxSize: 10 })\n *  => new BigNumber(10).times(20).plus(Math.ceil(32000 * 10 / Math.floor(60 * 24 * 365 / 2)))\n * ```\n */\nconst TX_FEE_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): BigNumber => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return new BigNumber(txSize)\n        .times(GAS_PER_BYTE)\n        .plus(\n          Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL)),\n        );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return new BigNumber(txSize).minus(innerTxSize).times(GAS_PER_BYTE);\n    default:\n      return new BigNumber(txSize).times(GAS_PER_BYTE);\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate fee based on tx type and params\n */\nexport function buildFee(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_FEE_BASE_GAS(txObject.tag)\n    .plus(TX_FEE_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    }))\n    .times(MIN_GAS_PRICE);\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = buildFee(rebuildTx(fee), unpackTx, buildTx);\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee, _pickBiggerFee,\n    }: {\n      rebuildTx: (params: any) => Encoded.Transaction;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingMinFee?: BigNumber;\n      _pickBiggerFee?: boolean;\n    },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_pickBiggerFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n};\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    { onNode, absoluteTtl }: { onNode?: Node; absoluteTtl?: boolean },\n  ) {\n    if (absoluteTtl !== true && value !== 0 && value != null) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value += (await onNode.getCurrentKeyBlock()).height;\n    }\n    return value;\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & { strategy?: NextNonceStrategy; onNode?: Node },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildFee } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildFee(rebuildTx(gasMax), unpackTx, buildTx).dividedBy(MIN_GAS_PRICE);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _pickBiggerFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import coinAmount from './coin-amount';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE } from '../constants';\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, gasLimit, gasPrice, fee,\n  address, pointers, queryFee, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, withDefault, withFormatting, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// # CONTRACT\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\n  nameTtl: withFormatting(\n    (nameTtl) => {\n      const NAME_TTL = 180000;\n      nameTtl ??= NAME_TTL;\n      if (nameTtl >= 1 && nameTtl <= NAME_TTL) return nameTtl;\n      throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, nameTtl);\n    },\n    shortUInt,\n  ),\n  pointers,\n  clientTtl: withDefault(60 * 60, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { BinaryData, Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId, readInt } from './helpers';\nimport { ArgumentError, DecodeError, SchemaNotFoundError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  const schemas = txSchema.filter((s) => s.tag.constValue === tag);\n  if (schemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  version ??= Math.max(...schemas.map((schema) => schema.version.constValue));\n  const schema = schemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction hash\n * @category transaction builder\n * @param params - Object with tx params\n * @param options - options\n * @param options.prefix - Prefix of transaction\n * @returns object Base64Check transaction hash with 'tx_' prefix\n */\nexport function buildTx<E extends TxEncoding = Encoding.Transaction>(\n  params: TxParams,\n  { prefix }: { prefix?: E } = {},\n): Encoded.Generic<E> {\n  const schema = getSchema(params.tag, params.version);\n\n  const binary = schema.map(([key, field]) => (\n    field.serialize(\n      // @ts-expect-error the type of `params[key]` can't be determined accurately\n      params[key],\n      {\n        ...params,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        unpackTx,\n        buildTx,\n        rebuildTx: (overrideParams: any) => buildTx(\n          { ...params, ...overrideParams },\n        ),\n      },\n      params,\n    )\n  ));\n\n  // @ts-expect-error looks like a TypeScript edge case\n  return encode(rlpEncode(binary), prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n/**\n * @category transaction builder\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Transaction to unpack\n * @param txType - Expected transaction type\n * @returns Object with transaction param's\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  const binary = rlpDecode(decode(encodedTx));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(tag, version);\n  if (txType != null && txType !== tag) throw new DecodeError(`Expected transaction to have ${Tag[txType]} tag, got ${Tag[tag]} instead`);\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('Transaction RLP length', schema.length, binary.length);\n  }\n  return schema.reduce<any>(\n    (acc, [name, field], index) => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      const deserialized = field.deserialize(binary[index] as BinaryData, { unpackTx });\n      return { ...acc, [name]: deserialized };\n    },\n    {},\n  ) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx or gaAttach\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  const params = unpackTx(contractTx);\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import { render } from \"./GenerateSpendTx.vue?vue&type=template&id=7508f59e\"\nimport script from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\nexport * from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./PayForTx.vue?vue&type=template&id=6b4a1008\"\nimport script from \"./PayForTx.vue?vue&type=script&lang=js\"\nexport * from \"./PayForTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Domain</h2>\n  <div class=\"group\">\n    <div>\n      <div>Name</div>\n      <div>\n        <input\n          :value=\"domain.name\"\n          @input=\"domain.name = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Version</div>\n      <div>\n        <input\n          :value=\"domain.version\"\n          @input=\"domain.version = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Network id</div>\n      <div>\n        <input\n          :value=\"domain.networkId\"\n          @input=\"domain.networkId = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Contract address</div>\n      <div>\n        <input\n          :value=\"domain.contractAddress\"\n          @input=\"domain.contractAddress = $event.target.value || null\"\n        >\n      </div>\n    </div>\n  </div>\n\n  <h2>Data</h2>\n  <div class=\"group\">\n    <div>\n      <div>Type</div>\n      <div>\n        <textarea\n          v-model=\"aci\"\n          placeholder=\"Type as ACI JSON\"\n        />\n      </div>\n    </div>\n    <div>\n      <div>Data</div>\n      <div>\n        <textarea v-model=\"data\" />\n      </div>\n    </div>\n    <div>\n      <div>Encoded data</div>\n      <Value :value=\"toPromise(() => dataEncoded)\" />\n    </div>\n    <div>\n      <div>Hash</div>\n      <Value :value=\"toPromise(() => hash.toString('base64'))\" />\n    </div>\n  </div>\n\n  <FieldAction\n    title=\"Sign\"\n    action-title=\"Sign\"\n    :action-handler=\"signTypedData\"\n    result-title=\"Signature\"\n  />\n\n  <h2>Verify</h2>\n  <div class=\"group\">\n    <div>\n      <div>Signature</div>\n      <div>\n        <input\n          v-model=\"verifySignature\"\n          placeholder=\"sg-encoded\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input\n          v-model=\"verifyAddress\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { verifyPromise = verifyTypedData(); }\">\n      Verify\n    </button>\n    <div v-if=\"verifyPromise\">\n      <div>Is signature correct</div>\n      <Value :value=\"verifyPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { hashTypedData, verify, decode } from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nexport default {\n  components: {\n    Value, FieldAction,\n  },\n  data: () => ({\n    domain: {\n      name: 'Simple æpp',\n      version: 2,\n      networkId: 'ae_uat',\n      contractAddress: null,\n    },\n    aci: Value.methods.valueToString({\n      record: [\n        { name: 'operation', type: 'string' },\n        { name: 'parameter', type: 'int' },\n      ],\n    }),\n    data: Value.methods.valueToString({\n      operation: 'test',\n      parameter: 42,\n    }),\n    verifySignature: null,\n    verifyAddress: null,\n    verifyPromise: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    dataParsed() {\n      return JSON.parse(this.data);\n    },\n    aciParsed() {\n      return JSON.parse(this.aci);\n    },\n    dataEncoded() {\n      const dataType = new TypeResolver().resolveType(this.aciParsed);\n      return new ContractByteArrayEncoder().encodeWithType(this.dataParsed, dataType);\n    },\n    hash() {\n      return hashTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n  },\n  methods: {\n    async toPromise(getter) {\n      return getter();\n    },\n    signTypedData() {\n      return this.aeSdk.signTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n    async verifyTypedData() {\n      return verify(this.hash, decode(this.verifySignature), this.verifyAddress);\n    },\n  },\n};\n</script>\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import { render } from \"./TypedData.vue?vue&type=template&id=6ad6adcf\"\nimport script from \"./TypedData.vue?vue&type=script&lang=js\"\nexport * from \"./TypedData.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign delegation to contract</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract address</div>\n      <div><input v-model=\"contractAddress\"></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" value=\"general\">\n        AENS and oracle\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" value=\"name\">\n        AENS name\n      </label>\n      <div><input v-model=\"name\"></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" value=\"oracle-query\">\n        Oracle query\n      </label>\n      <div><input v-model=\"oracleQueryId\"></div>\n    </div>\n    <button @click=\"() => { signPromise = sign(); }\">\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signature</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    type: 'general',\n    contractAddress: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    name: 'test.chain',\n    oracleQueryId: 'oq_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    signPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    sign() {\n      switch (this.type) {\n        case 'general':\n          return this.aeSdk.signDelegationToContract(this.contractAddress);\n        case 'name':\n          return this.aeSdk.signNameDelegationToContract(this.contractAddress, this.name);\n        case 'oracle-query':\n          return this.aeSdk\n            .signOracleQueryDelegationToContract(this.contractAddress, this.oracleQueryId);\n        default:\n          throw new Error(`Unknown delegation signature type: ${this.type}`)\n      }\n    },\n  },\n};\n</script>\n","import { render } from \"./DelegationSignature.vue?vue&type=template&id=4b7d14ab\"\nimport script from \"./DelegationSignature.vue?vue&type=script&lang=js\"\nexport * from \"./DelegationSignature.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=73a5f0d8\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion: string,\n): boolean {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const versionComponents = getComponents(version);\n  const geComponents = getComponents(geVersion);\n  const ltComponents = getComponents(ltVersion);\n\n  const base = Math.max(...versionComponents, ...geComponents, ...ltComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  const vNumber = componentsToNumber(versionComponents);\n  const geNumber = componentsToNumber(geComponents);\n  const ltNumber = componentsToNumber(ltComponents);\n  return vNumber >= geNumber && vNumber < ltNumber;\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        // TODO: remove pause after fixing https://github.com/aeternity/aeternity/issues/3803\n        // gap to ensure that node won't reject the nonce\n        requestQueues.set(key, req.then(async () => pause(750), () => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        if (error.response?.bodyAsText == null) throw error;\n\n        let body;\n        try {\n          body = JSON.parse(error.response.bodyAsText);\n        } catch (e) {\n          throw error;\n        }\n        error.message = `${new URL(error.request.url).pathname.slice(1)} error`;\n        const message = getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  ignorePath: string,\n  versionPromise: Promise<string | Error>,\n  geVersion: string,\n  ltVersion: string,\n): PipelinePolicy => ({\n  name: 'version-check',\n  async sendRequest(request, next) {\n    if (new URL(request.url).pathname === ignorePath) return next(request);\n    const version = await versionPromise;\n    if (version instanceof Error) throw version;\n    const args = [version, geVersion, ltVersion] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n    return next(request);\n  },\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const statusesToNotRetry = [200, 400, 403, 500];\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b);\n      const intervalsInMs = intervals.map((el) => (el / intervalSum) * retryOverallDelay);\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) await pause(intervalsInMs[attempt - 1]);\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\"\n        }\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  serializedName: \"Tx\",\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    uberParent: \"Tx\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\"\n        }\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\"\n        }\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\"\n        }\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\")\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\"\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"]\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\"\n        }\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"]\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\"\n            }\n          }\n        }\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\"\n            }\n          }\n        }\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\"\n        }\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\"\n        }\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\"\n            }\n          }\n        }\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\"\n            }\n          }\n        }\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"]\n        }\n      }\n    }\n  }\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\"\n        }\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\"\n        }\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"]\n        }\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\"\n        }\n      }\n    }\n  }\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\"\n            }\n          }\n        }\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\"\n        }\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\"\n            }\n          }\n        }\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\"\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\"\n        }\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\"\n        }\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\"\n        }\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\"\n        }\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\"\n        }\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\"\n        }\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\"\n        }\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\"\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\")\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      }\n    }\n  }\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\"\n        }\n      }\n    }\n  }\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\"\n        }\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  \"Tx.Tx\": Tx,\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"]\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper\n};\n\nexport const from: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const type: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"]\n    }\n  }\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CountResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/transactions/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.from,\n    Parameters.limit,\n    Parameters.type\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQuery\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } }\n      }\n    }\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationSpec } from '@azure/core-client';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  #networkIdPromise?: Promise<string | Error>;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => ` ${body.reason}`),\n      ],\n      ...options,\n    });\n    if (!ignoreVersion) {\n      const statusPromise = this.getStatus();\n      const versionPromise = statusPromise.then(({ nodeVersion }) => nodeVersion, (error) => error);\n      this.#networkIdPromise = statusPromise.then(({ networkId }) => networkId, (error) => error);\n      this.pipeline.addPolicy(\n        genVersionCheckPolicy('node', '/v3/status', versionPromise, '6.2.0', '7.0.0'),\n      );\n    }\n    this.intAsString = true;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    this.#networkIdPromise ??= this.getStatus().then(({ networkId }) => networkId);\n    const networkId = await this.#networkIdPromise;\n    if (networkId instanceof Error) throw networkId;\n    return networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash,\n} from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag, AensName } from '../tx/builder/constants';\nimport { produceNameId } from '../tx/builder/helpers';\n\nconst secretKeys = new WeakMap();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKeys.get(this)).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return sign(data, secretKeys.get(this));\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(produceNameId(name)),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    const oracleQueryIdDecoded = decode(oracleQueryId);\n    const addressDecoded = decode(this.address);\n    // TODO: remove after fixing https://github.com/aeternity/aesophia/issues/475\n    if (oracleQueryIdDecoded.compare(addressDecoded) === 0) {\n      throw new ArgumentError('oracleQueryId', 'not equal to account address', oracleQueryId);\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      oracleQueryIdDecoded,\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param gasUsed - Amount of gas actually used to make calculation more accurate\n * @param queryFee - Oracle query fee\n * @param isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param isMined - Is transaction already mined or not\n * @param options - Options\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(),\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl >= height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.Oracle === tx.tag || Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n);\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError, isAccountNotFoundError, pause } from './utils/other';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { DRY_RUN_ACCOUNT } from './tx/builder/schema';\nimport { AensName } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError, TransactionError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\n\n/**\n * @category chain\n */\nexport function _getPollInterval(\n  type: 'block' | 'microblock', // TODO: rename to 'key-block' | 'micro-block'\n  { _expectedMineRate = 180000, _microBlockCycle = 3000, _maxPollInterval = 5000 }:\n  { _expectedMineRate?: number; _microBlockCycle?: number; _maxPollInterval?: number },\n): number {\n  const base = {\n    block: _expectedMineRate,\n    microblock: _microBlockCycle,\n  }[type];\n  return Math.min(base / 3, _maxPollInterval);\n}\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @returns Current chain height\n */\nexport async function getHeight({ onNode }: { onNode: Node }): Promise<number> {\n  return (await onNode.getCurrentKeyBlockHeight()).height;\n}\n\n/**\n * Wait for a transaction to be mined\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, onNode, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= _getPollInterval('microblock', options);\n  const max = await getHeight({ onNode }) + blocks;\n  do {\n    const tx = await onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    await pause(interval);\n  } while (await getHeight({ onNode }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= _getPollInterval('block', options);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = (await onNode.getCurrentKeyBlockHeight()).height;\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @param options.onNode - Node to use\n * @param options.onAccount - Account to use\n * @param options.verify - Verify transaction before broadcast, throw error if not\n * @param options.waitMined - Ensure that transaction get into block\n * @param options.confirm - Number of micro blocks that should be mined after tx get included\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      __queue != null ? { requestOptions: { customHeaders: { __queue } } } : {},\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  onNode: Node;\n  onAccount: AccountBase;\n  verify?: boolean;\n  waitMined?: boolean;\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport { Tag, AensName } from './tx/builder/constants';\nimport { Encoded } from './utils/encoder';\nimport { sendTransaction, SendTransactionOptions, getName } from './chain';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @param options.extendPointers - Get the pointers from the node and merge with provided\n * ones. Pointers with the same type will be overwritten\n * @param options.onAccount - Make operation on specific account from sdk (you\n * pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameTtl - Name ttl represented in number of\n * blocks (Max value is 50000 blocks)\n * @param options.clientTtl a suggestion as to how long any\n * clients should cache this information\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const nameUpdateTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameUpdateTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  extendPointers?: boolean;\n  clientTtl?: number;\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @returns\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl?: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl, options = {}) {\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid\n * @param options - options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @param options.nameFee - Name Fee (By default calculated by sdk)\n * @returns the result of the claim\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @param options.onAccount - Make operation on specific account from sdk (you pass\n * publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount)\n * @param options.fee - fee\n * @param options.ttl - ttl\n * @param options.nonce - nonce\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport {\n  sendTransaction, getBalance, resolveName, SendTransactionOptions,\n} from './chain';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.PayingForTx, payerId: options.onAccount.address, tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport {\n  _getPollInterval, getHeight, sendTransaction, SendTransactionOptions,\n} from './chain';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, onNode, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  interval ??= _getPollInterval('microblock', options);\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= _getPollInterval('microblock', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ onNode });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @param options.queryTtl - queryTtl Oracle query time to leave\n * @param options.responseTtl - queryFee Oracle query response time to leave\n * @param options.queryFee - queryFee Oracle query fee\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query'>;\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @param options.fee - fee Transaction fee\n * @param options.ttl - Transaction time to leave\n * @param options.oracleTtlType - Oracle time to leave for extend\n * @param options.oracleTtlValue - Oracle time to leave for extend\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'callerId' | 'oracleId'>;\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @param options.responseTtl - responseTtl Query response time to leave\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response'>;\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @param options.queryFee - Oracle query Fee\n * @param options - Options object\n * @param options.abiVersion - Always 0 (do not use virtual machine)\n * @param options.fee - Transaction fee\n * @param options.ttl - Transaction time to leave\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat'>;\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { DRY_RUN_ACCOUNT } from '../tx/builder/schema';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun, sendTransaction,\n  SendTransactionOptions,\n} from '../chain';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await aeSdk.initializeContract({ sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(tx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(`Function ${name} doesn't exist in contract`);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      const isIris = (await onNode.getNodeInfo())\n        .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n      if (!isIris && isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  { onAccount, omitAddress, ...options }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const networkId = await options.onNode.getNetworkId();\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(await onAccount.signDelegationToContract(contractAddress, { networkId }));\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, { networkId }),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, { networkId }),\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { sendTransaction, SendTransactionOptions, getAccount } from '../chain';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param sourceCode - Auth contract source code\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const contractId = buildContractIdByContractTx(tx);\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection } from './utils/other';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nexport function getValueOrErrorProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      const target = valueCb() as object; // to get a native exception in case it missed\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get'\n        ? res.bind(target) // otherwise it fails with attempted to get private field on non-instance\n        : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nconst { InvalidTxError: _2, ...chainMethodsOther } = chainMethods;\n\nconst methods = {\n  ...chainMethodsOther,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(\n    mergeWith: AeSdkMethodsOptions = {},\n  ): AeSdkMethodsOptions & { onAccount: AccountBase; onCompiler: CompilerBase; onNode: Node } {\n    return {\n      ...this._options,\n      onAccount: getValueOrErrorProxy(() => this._options.onAccount),\n      onNode: getValueOrErrorProxy(() => this._options.onNode),\n      onCompiler: getValueOrErrorProxy(() => this._options.onCompiler),\n      ...mergeWith,\n    };\n  }\n\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this.getContext(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    return Contract.initialize<Methods>(this.getContext(options as AeSdkMethodsOptions));\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & { onAccount: OnAccount } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, getValueOrErrorProxy, AeSdkMethodsOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & {\n    onNode: Node;\n    onAccount: AccountBase;\n    onCompiler: CompilerBase;\n  } {\n    return {\n      ...this._options,\n      onNode: getValueOrErrorProxy(() => this.api),\n      onCompiler: getValueOrErrorProxy(() => this.compilerApi),\n      ...mergeWith,\n      onAccount: mergeWith.onAccount != null\n        ? this._resolveAccount(mergeWith.onAccount)\n        : getValueOrErrorProxy(() => this._resolveAccount()),\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { AensName, Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\nimport { NotImplementedError } from '../utils/errors';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param type - Type of data to sign\n   * @param data - Encoded data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signTypedData(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signTypedData method');\n  }\n\n  /**\n   * Sign delegation of AENS, oracle operations to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of an AENS name to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param name - AENS name to manage by a contract\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signNameDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signNameDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of oracle query to a contract\n   *\n   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded\n   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.\n   *\n   * Warning! Implementations needs to ensure that oracle query and contract exists unless\n   * https://github.com/aeternity/aesophia/issues/474 is fixed.\n   *\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param oracleQueryId - Oracle query ID to reply by a contract\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signOracleQueryDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signOracleQueryDelegationToContract method');\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n}\n","import AccountBase from './Base';\nimport { METHODS } from '../aepp-wallet-communication/schema';\nimport { ArgumentError, NotImplementedError, UnsupportedProtocolError } from '../utils/errors';\nimport { Encoded } from '../utils/encoder';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types';\nimport { AensName } from '../tx/builder/constants';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async sign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using wallet');\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient\n      .request(METHODS.signMessage, { onAccount: this.address, message });\n    return Buffer.from(signature, 'hex');\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      name, version, contractAddress, networkId,\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signTypedData, {\n      onAccount: this.address,\n      domain: {\n        name, version, networkId, contractAddress,\n      },\n      aci,\n      data,\n    });\n    return signature;\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n    });\n    return signature;\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      name,\n    });\n    return signature;\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      oracleQueryId,\n    });\n    return signature;\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\nimport { AensName } from '../../tx/builder/constants';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegationToContract]: (\n    p: {\n      contractAddress: Encoded.ContractAddress;\n      name?: AensName;\n      oracleQueryId?: Encoded.OracleQueryId;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  #callbacks = new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>();\n\n  #messageId = 0;\n\n  #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport AccountRpc from './account/Rpc';\nimport { decode, Encoded } from './utils/encoder';\nimport {\n  Accounts, RPC_VERSION, WalletInfo, Network, WalletApi, AeppApi, Node as NodeRpc,\n} from './aepp-wallet-communication/rpc/types';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport { METHODS, SUBSCRIPTION_TYPES } from './aepp-wallet-communication/schema';\nimport {\n  AlreadyConnectedError,\n  NoWalletConnectedError,\n  UnsubscribedAccountError,\n  UnAuthorizedAccountError,\n  RpcConnectionError,\n} from './utils/errors';\nimport Node from './Node';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\n\n/**\n * RPC handler for AEPP side\n * Contain functionality for wallet interaction and connect it to sdk\n * @category aepp wallet communication\n */\nexport default class AeSdkAepp extends AeSdkBase {\n  name: string;\n\n  onAddressChange: (a: Accounts) => void;\n\n  onDisconnect: (p: any) => void;\n\n  onNetworkChange: (a: Network) => void;\n\n  rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  _accounts?: Accounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Aepp name\n   * @param options.onAddressChange - Call-back function for update address event\n   * @param options.onDisconnect - Call-back function for disconnect event\n   * @param options.onNetworkChange - Call-back function for update network event\n   */\n  constructor({\n    name,\n    onAddressChange = () => {},\n    onDisconnect = () => {},\n    onNetworkChange = () => {},\n    ...other\n  }: {\n    name: string;\n    onAddressChange?: (a: Accounts) => void;\n    onDisconnect?: (p: any) => void;\n    onNetworkChange?: (a: Network) => void;\n  } & ConstructorParameters<typeof AeSdkBase>[0]) {\n    super(other);\n    this.onAddressChange = onAddressChange;\n    this.onDisconnect = onDisconnect;\n    this.onNetworkChange = onNetworkChange;\n    this.name = name;\n  }\n\n  override _resolveAccount(account: OnAccount = this.addresses()[0]): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (!this.addresses().includes(address)) throw new UnAuthorizedAccountError(address);\n      this._ensureConnected();\n      account = new AccountRpc(this.rpcClient, address);\n    }\n    if (account == null) this._ensureAccountAccess();\n    return super._resolveAccount(account);\n  }\n\n  override addresses(): Encoded.AccountAddress[] {\n    if (this._accounts == null) return [];\n    const current = Object.keys(this._accounts.current)[0];\n    return [\n      ...current != null ? [current] : [], ...Object.keys(this._accounts.connected),\n    ] as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Connect to wallet\n   * @param connection - Wallet connection object\n   * @param options - Options\n   * @param options.connectNode - Request wallet to bind node\n   * @param options.name - Node name\n   * @param options.select - Select this node as current\n   */\n  async connectToWallet(\n    connection: BrowserConnection,\n    { connectNode = false, name = 'wallet-node' }: { connectNode?: boolean; name?: string } = {},\n  ): Promise<WalletInfo & { node?: NodeRpc }> {\n    if (this.rpcClient != null) throw new AlreadyConnectedError('You are already connected to wallet');\n    let disconnectParams: any;\n\n    const updateNetwork = (params: Network): void => {\n      if (connectNode) {\n        if (params.node?.url == null) throw new RpcConnectionError('Missing URLs of the Node');\n        this.pool.delete(name);\n        this.addNode(name, new Node(params.node.url), true);\n      }\n      this.onNetworkChange(params);\n    };\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        delete this.rpcClient;\n        delete this._accounts;\n        this.onDisconnect(disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: (params) => {\n          this._accounts = params;\n          this.onAddressChange(params);\n        },\n        [METHODS.updateNetwork]: updateNetwork,\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    const walletInfo = await client\n      .request(METHODS.connect, { name: this.name, version: RPC_VERSION, connectNode });\n    updateNetwork(walletInfo);\n    this.rpcClient = client;\n    return walletInfo;\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnectWallet(): void {\n    this._ensureConnected();\n    this.rpcClient.notify(METHODS.closeConnection, { reason: 'bye' });\n    this.rpcClient.connection.disconnect();\n  }\n\n  /**\n   * Ask addresses from wallet\n   * @returns Addresses from wallet\n   */\n  async askAddresses(): Promise<Encoded.AccountAddress[]> {\n    this._ensureAccountAccess();\n    return this.rpcClient.request(METHODS.address, undefined);\n  }\n\n  /**\n   * Subscribe for addresses from wallet\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAddress(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<ReturnType<WalletApi[METHODS.subscribeAddress]>> {\n    this._ensureConnected();\n    const result = await this.rpcClient.request(METHODS.subscribeAddress, { type, value });\n    this._accounts = result.address;\n    return result;\n  }\n\n  _ensureConnected(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    if (this.rpcClient != null) return;\n    throw new NoWalletConnectedError('You are not connected to Wallet');\n  }\n\n  _ensureAccountAccess(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    this._ensureConnected();\n    if (this.addresses().length !== 0) return;\n    throw new UnsubscribedAccountError();\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\"\n        }\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\"\n        }\n      }\n    }\n  }\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n          }\n        }\n      }\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } }\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } }\n        }\n      },\n      isError: true\n    }\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n      }\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true\n    }\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{\n    bytecode: Encoded.ContractBytearray;\n    aci: Aci;\n  }>;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion }: { ignoreVersion?: boolean } = {}) {\n    super();\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    if (ignoreVersion !== true) {\n      const versionPromise = this.api.apiVersion()\n        .then(({ apiVersion }) => apiVersion, (error) => error);\n      this.api.pipeline.addPolicy(\n        genVersionCheckPolicy('compiler', '/api-version', versionPromise, '7.3.0', '8.0.0'),\n      );\n    }\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    try {\n      const res = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as { bytecode: Encoded.ContractBytearray; aci: Aci };\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): Promise<{ bytecode: Encoded.ContractBytearray; aci: Aci }> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","import { shallowReactive } from 'vue';\nimport { createStore } from 'vuex';\nimport { AeSdkAepp, Node, CompilerHttp } from '@aeternity/aepp-sdk';\n\nconst TESTNET_NODE_URL = 'https://testnet.aeternity.io';\nconst MAINNET_NODE_URL = 'https://mainnet.aeternity.io';\nconst COMPILER_URL = 'https://v7.compiler.aepps.com';\n\nconst store = createStore({\n  state: {\n    address: undefined,\n    networkId: undefined,\n    // AeSdkAepp instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n    aeSdk: shallowReactive(new AeSdkAepp({\n      name: 'Simple æpp',\n      nodes: [\n        { name: 'testnet', instance: new Node(TESTNET_NODE_URL) },\n        { name: 'mainnet', instance: new Node(MAINNET_NODE_URL) },\n      ],\n      onCompiler: new CompilerHttp(COMPILER_URL),\n      async onNetworkChange({ networkId }) {\n        const [{ name }] = (await this.getNodesInPool())\n          .filter((node) => node.nodeNetworkId === networkId);\n        this.selectNode(name);\n        store.commit('setNetworkId', networkId);\n      },\n      onAddressChange: ({ current }) => store.commit('setAddress', Object.keys(current)[0]),\n    })),\n  },\n  mutations: {\n    setAddress(state, address) {\n      state.address = address;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n  },\n});\n\nexport default store;\n","import { createApp } from 'vue';\nimport App from './App.vue';\nimport store from './store';\n\ncreateApp(App).use(store).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkaepp\"] = self[\"webpackChunkaepp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(26266); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","class","_hoisted_1","_createVNode","_component_Connect","_hoisted_2","href","_normalizeClass","active","_ctx","view","onClick","_cache","$event","_createBlock","_resolveDynamicComponent","key","connectMethod","type","value","reverseIframeWalletUrl","walletConnected","_createElementBlock","args","$options","disconnect","disabled","walletConnecting","connect","cancelWalletDetection","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","walletName","BaseError","Error","constructor","message","super","this","name","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","UnsupportedPlatformError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","arguments","length","undefined","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","UnAuthorizedAccountError","onAccount","UnsubscribedAccountError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","_ref","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","METHODS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","address","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","target","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","msg","_this$origin","postMessage","connection","onDetected","wallets","method","params","readyToConnect","wallet","info","getConnection","to_waellet","newWallet","reverseIframe","process","walletInfo","computed","mapState","methods","detectWallets","document","createElement","src","style","display","body","appendChild","Promise","resolve","reject","stopDetection","walletDetector","async","confirm","remove","aeSdk","$store","commit","connectToWallet","error","current","subscribeAddress","Object","keys","disconnectWallet","__exports__","_component_Value","balancePromise","heightPromise","_hoisted_6","nodeInfoPromise","_hoisted_7","compilerVersionPromise","_component_SpendCoins","_component_MessageSign","text","props","Array","String","Number","default","watch","handler","then","result","valueToString","warn","immediate","JSON","stringify","k","v","spendTo","placeholder","spendAmount","spendPayload","spendPromise","spend","pause","setTimeout","duration","mapObject","object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","components","Value","TextEncoder","_component_FieldAction","title","messageSign","$props","argTitle","$data","argValue","argPlaceholder","promise","actionHandler","actionTitle","resultTitle","required","argDefaultValue","Function","FieldAction","messageToSign","signMessage","SpendCoins","MessageSign","mounted","$watch","networkId","compilerApi","getBalance","getHeight","getNodeInfo","contractSourceCode","createPromise","create","contract","compile","deploy","deployPromise","_Fragment","callOnChain","callStatic","trim","shallowRef","initializeContract","sourceCode","$compile","arg","$deploy","setFactor","multiplyByFactor","_component_GenerateSpendTx","signInnerTx","payForTx","incrementNonce","generatePromise","generate","_hoisted_8","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","genSalt","random","BigUint64Array","nacl","BigInt","MAX_SAFE_INTEGER","hash","verify","signature","detached","messagePrefix","messagePrefixLength","genEntryField","serialize","txParams","buildTx","ArrayBuffer","isView","startsWith","buf","_ref2","unpackTx","tx","genArrayField","itemHandler","items","buffers","genMapField","encoding","Mtree","values","MtreeValue","_ref3","filter","_ref4","_ref5","recursiveType","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","oracleQueryId","senderId","oracleId","_int32","nonceBE","alloc","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","commitmentHash","salt","padStart","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","isAuctionName","uInt","genShortUIntConstField","constValue","optional","shortUInt","constValueOptional","idTagToEncoding","genAddressField","_len","encodings","_key","hashId","enc","idTag","indexOf","readUIntBE","subarray","genEncodedField","encodedData","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","serializeAettos","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_FEE_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ChannelOffChainUpdateCallContract","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateTransfer","ContractCreateTx","ContractCallTx","GaAttachTx","GaMetaTx","PayingForTx","factor","TX_FEE_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","plus","ceil","floor","minus","getOracleRelativeTtl","ttlKeys","buildFee","builtTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","coinAmount","_value","_computingMinFee","_pickBiggerFee","minFee","gt","prepare","onNode","absoluteTtl","getCurrentKeyBlock","genNonceField","senderKey","strategy","getAccountNextNonce","replace","catch","nextNonce","addressAny","pointers","pointer","field","txFields","parameters","addressName","withFormatting","format","withDefault","defaultValue","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","Fate3","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","consensusProtocolVersion","vm","abi","calculateGasLimitMax","gasMax","dividedBy","_computingGasLimit","gasLimitMax","gasLimit","_getProtocolDetails","c","kind","genEnumerationField","enm","getOracleByPubkey","queryFee","rlpEncode","_rlp","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","binary","unpTx","_classPrivateMethodInitSpec","node","forEach","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","get","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","path","searchFrom","_class","substring","rec","idx","_ref6","_ref7","genMPTreeField","genWrappedField","ORACLE_TTL_TYPES","DRY_RUN_ACCOUNT","pub","CallReturnType","entryAny","entry","entrySignedTx","SignedTx","entryMtreeValueArray","entryTreesPoi","TreesPoi","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","txSchema","shortUIntConst","balance","flags","gaContract","gaAuthFun","encoded","signatures","raw","SpendTx","recipientId","ttl","accountId","nameTtl","status","clientTtl","NamePreclaimTx","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","_nameTtl","NAME_TTL","NameTransferTx","NameRevokeTx","owner","ctVersion","boolean","referers","deposit","gasPrice","callData","callerId","contractId","callerNonce","gasUsed","returnValue","returnType","enumeration","queryFormat","responseFormat","oracleTtlValue","oracleTtlType","delta","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","to","caller","callStack","ChannelClientReconnectTx","role","pubkey","accounts","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","authFun","gaId","authData","payerId","GaMetaTxAuthData","rlpDecode","getSchema","_version","schemas","s","max","schema","overrideParams","buildTxAsync","all","reduce","acc","index","deserialized","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","spendTx","spendTxParams","GenerateSpendTx","txToPayFor","signTransaction","innerTx","payForTransaction","domain","onInput","_hoisted_9","_hoisted_11","_hoisted_12","_hoisted_13","aci","_hoisted_14","_hoisted_15","toPromise","dataEncoded","_hoisted_16","signTypedData","_hoisted_17","_hoisted_18","_hoisted_19","verifySignature","_hoisted_20","verifyAddress","verifyPromise","verifyTypedData","_hoisted_21","_hoisted_22","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","operation","parameter","dataParsed","parse","aciParsed","dataType","getter","signPromise","sign","signDelegationToContract","signNameDelegationToContract","signOracleQueryDelegationToContract","Connect","Basic","Contracts","PayForTx","TypedData","DelegationSignature","render","semverSatisfies","getComponents","i","versionComponents","geComponents","ltComponents","base","componentsToNumber","reverse","vNumber","geNumber","ltNumber","genRequestQueuesPolicy","requestQueues","Map","policy","sendRequest","request","next","_requestQueues$get","headers","delete","getResponse","req","set","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","url","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","e","genVersionCheckPolicy","ignorePath","versionPromise","genRetryOnFailurePolicy","retryCount","retryOverallDelay","statusesToNotRetry","intervals","fill","_","intervalSum","a","b","intervalsInMs","attempt","_e$response$status","_e$response","Header","className","modelProperties","serializedName","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","time","pofHash","txsHash","ErrorModel","reason","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","transactions","blockHeight","blockHash","Tx","uberParent","polymorphicDiscriminator","clientName","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","op","RelativeTTL","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","top","txs","txEvents","DryRunAccount","pubKey","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","results","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","NameEntry","PeerPubKey","Status","genesisKeyBlockHash","solutions","difficulty","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","limit","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeight","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHash","getKeyBlockByHashOperationSpec","getKeyBlockByHeight","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHash","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHash","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGeneration","getCurrentGenerationOperationSpec","getGenerationByHash","getGenerationByHashOperationSpec","getGenerationByHeight","getGenerationByHeightOperationSpec","getAccountByPubkey","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHash","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxs","protectedDryRunTxsOperationSpec","getTransactionByHash","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContract","getContractOperationSpec","getContractCode","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByName","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_networkIdPromise","ignoreVersion","allowInsecureConnection","additionalPolicies","statusPromise","pipeline","addPolicy","getNetworkId","_classPrivateFieldGet2","nodeNetworkId","p","versions","getTransactionSignerAddress","_getSchema$find","getBufferToSign","prefixes","rlpBinaryTx","getExecutionCost","isInitiator","res","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","_getPollInterval","_expectedMineRate","_microBlockCycle","_maxPollInterval","block","microblock","txBinary","txWithNetworkId","txHashWithNetworkId","checkedKeys","nestedTx","cost","_ref8","oracleCall","contractCreate","contractCall","_ref9","InvalidTxError","validation","poll","_interval","interval","awaitHeight","_interval2","currentHeight","waitForTxConfirm","newBlockHeight","sendTransaction","txUnsigned","waitMined","__queue","requestOptions","customHeaders","pollResult","txData","confirmationHeight","assign","verifyTx","getAccount","addr","getGeneration","hashOrHeight","_ref10","getMicroBlockTransactions","_ref11","getKeyBlock","_ref12","getMicroBlockHeader","_ref13","txDryRunRequests","txDryRunHandler","rs","dryRunRes","Set","accountAddress","_ref14","_ref15","resultPayload","txDryRun","_ref16","_txDryRunRequests$get","combine","requests","_requests$timeout","timeout","getContractByteCode","_ref17","_ref18","getName","_ref19","resolveName","_ref20","resolveByNode","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","transfer","revoke","extendTtl","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","claim","opts","otherOptions","aensBid","recipientIdOrName","transferFunds","fraction","bind","desiredAmount","integerValue","ROUND_HALF_UP","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$onNode$getOrac","queries","has","add","stopped","pollForQueryResponse","responseBuffer","getQueryObject","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","lastArg","registerOracle","oracleRegisterTx","Encoder","Calldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","onCompiler","compileBySourceCode","fileSystem","sourceCodePath","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","_opt$gasLimit","_other$result","_calldata","_name","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","_bytecode","isIris","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_this","_aci","aciLast","functions","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","ensureOracleQuery","oq","createDelegationSignature","ids","omitAddress","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","getValueOrErrorProxy","valueCb","Proxy","Reflect","_2","chainMethodsOther","chainMethods","aensMethods","spendMethods","oracleMethods","contractGaMethods","AeSdkMethods","_options","getContext","mergeWith","prototype","_len2","_key2","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","ensureNodeConnected","pool","selectedNodeName","select","selectNode","isNodeConnected","getNodesInPool","addresses","_resolveAccount","_options$networkId","_options$networkId2","_options$networkId3","AccountBase","AccountRpc","rpcClient","_rpcClient","returnSigned","signedTransaction","RPC_VERSION","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","AeSdkAepp","onAddressChange","onNetworkChange","_ensureConnected","_ensureAccountAccess","_accounts","disconnectParams","connectNode","updateNetwork","_params$node","client","updateAddress","closeConnection","askAddresses","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","generateAciBySourceCode","generateAci","TESTNET_NODE_URL","MAINNET_NODE_URL","COMPILER_URL","store","createStore","state","shallowReactive","mutations","setAddress","setNetworkId","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}