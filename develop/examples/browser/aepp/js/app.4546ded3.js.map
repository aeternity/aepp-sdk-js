{"version":3,"file":"js/app.4546ded3.js","mappings":"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","sources":["webpack://aepp/./src/App.vue","webpack://aepp/./src/Connect.vue","webpack://aepp/../../src/utils/errors.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://aepp/../../src/aepp-wallet-communication/schema.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://aepp/../../src/aepp-wallet-communication/wallet-detector.ts","webpack://aepp/./src/Connect.vue?1a8f","webpack://aepp/./src/Basic.vue","webpack://aepp/./src/components/Value.vue","webpack://aepp/./src/components/Value.vue?9937","webpack://aepp/./src/components/SpendCoins.vue","webpack://aepp/../../src/utils/other.ts","webpack://aepp/../../src/utils/encoder-types.ts","webpack://aepp/../../src/utils/encoder.ts","webpack://aepp/./src/components/SpendCoins.vue?b814","webpack://aepp/./src/components/MessageSign.vue","webpack://aepp/./src/components/FieldAction.vue","webpack://aepp/./src/components/FieldAction.vue?d339","webpack://aepp/./src/components/MessageSign.vue?1f61","webpack://aepp/./src/Basic.vue?efb3","webpack://aepp/./src/Contracts.vue","webpack://aepp/./src/Contracts.vue?05c9","webpack://aepp/./src/PayForTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue","webpack://aepp/../../../src/tx/builder/constants.ts","webpack://aepp/../../src/utils/crypto.ts","webpack://aepp/../../../../src/tx/builder/field-types/entry.ts","webpack://aepp/../../../../src/tx/builder/field-types/array.ts","webpack://aepp/../../../../src/tx/builder/field-types/map.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-default.ts","webpack://aepp/../../src/utils/bytes.ts","webpack://aepp/../../../src/tx/builder/helpers.ts","webpack://aepp/../../../../src/tx/builder/field-types/u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://aepp/../../../../src/tx/builder/field-types/address.ts","webpack://aepp/../../../../src/tx/builder/field-types/encoded.ts","webpack://aepp/../../../../src/tx/builder/field-types/raw.ts","webpack://aepp/../../src/utils/bignumber.ts","webpack://aepp/../../src/utils/amount-formatter.ts","webpack://aepp/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://aepp/../../../../src/tx/builder/field-types/fee.ts","webpack://aepp/../src/chain.ts","webpack://aepp/../../../../src/tx/builder/field-types/ttl.ts","webpack://aepp/../../../../src/tx/builder/field-types/nonce.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers.ts","webpack://aepp/../../../../src/tx/builder/field-types/field.ts","webpack://aepp/../../../../src/tx/builder/field-types/name.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-id.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers2.ts","webpack://aepp/../../../../src/tx/builder/field-types/ct-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/boolean.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-price.ts","webpack://aepp/../../../../src/tx/builder/field-types/abi-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/enumeration.ts","webpack://aepp/../../../../src/tx/builder/field-types/string.ts","webpack://aepp/../../../../src/tx/builder/field-types/query-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/mptree.ts","webpack://aepp/../../../../src/tx/builder/field-types/wrapped.ts","webpack://aepp/../../../src/tx/builder/schema.ts","webpack://aepp/../../../src/tx/builder/common.ts","webpack://aepp/../../../src/tx/builder/index.ts","webpack://aepp/./src/components/GenerateSpendTx.vue?b650","webpack://aepp/./src/PayForTx.vue?2fdc","webpack://aepp/./src/TypedData.vue","webpack://aepp/../../src/utils/typed-data.ts","webpack://aepp/./src/TypedData.vue?5e40","webpack://aepp/./src/DelegationSignature.vue","webpack://aepp/../../../../src/tx/builder/delegation/schema.ts","webpack://aepp/./src/DelegationSignature.vue?67ef","webpack://aepp/./src/App.vue?7ccd","webpack://aepp/../../src/utils/semver-satisfies.ts","webpack://aepp/../../src/utils/autorest.ts","webpack://aepp/../../../../src/apis/node/models/mappers.ts","webpack://aepp/../../../../src/apis/node/models/parameters.ts","webpack://aepp/../../../src/apis/node/node.ts","webpack://aepp/../src/Node.ts","webpack://aepp/../../src/tx/transaction-signer.ts","webpack://aepp/../../src/account/Base.ts","webpack://aepp/../../../../src/tx/builder/delegation/index.ts","webpack://aepp/../../src/account/Memory.ts","webpack://aepp/../../src/tx/execution-cost.ts","webpack://aepp/../../src/tx/validator.ts","webpack://aepp/../src/send-transaction.ts","webpack://aepp/../src/aens.ts","webpack://aepp/../src/spend.ts","webpack://aepp/../src/oracle.ts","webpack://aepp/../../src/contract/Contract.ts","webpack://aepp/../../src/contract/delegation-signature.ts","webpack://aepp/../../src/contract/ga.ts","webpack://aepp/../src/AeSdkMethods.ts","webpack://aepp/../src/AeSdkBase.ts","webpack://aepp/../../src/account/Rpc.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://aepp/../src/AeSdkAepp.ts","webpack://aepp/../../../../src/apis/compiler/models/mappers.ts","webpack://aepp/../../../../src/apis/compiler/models/parameters.ts","webpack://aepp/../../../src/apis/compiler/compiler.ts","webpack://aepp/../../../src/contract/compiler/Base.ts","webpack://aepp/../../../src/contract/compiler/Http.ts","webpack://aepp/./src/store.js","webpack://aepp/./src/main.js","webpack://aepp/webpack/bootstrap","webpack://aepp/webpack/runtime/chunk loaded","webpack://aepp/webpack/runtime/define property getters","webpack://aepp/webpack/runtime/global","webpack://aepp/webpack/runtime/hasOwnProperty shorthand","webpack://aepp/webpack/runtime/make namespace object","webpack://aepp/webpack/runtime/jsonp chunk loading","webpack://aepp/webpack/startup"],"sourcesContent":["<template>\n  <h2>Simple æpp</h2>\n\n  <Connect />\n\n  <div class=\"nav\">\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Basic' }\"\n      @click=\"view = 'Basic'\"\n    >\n      Basic functionality\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Contracts' }\"\n      @click=\"view = 'Contracts'\"\n    >\n      Smart contracts\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'PayForTx' }\"\n      @click=\"view = 'PayForTx'\"\n    >\n      Pay for transaction\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'TypedData' }\"\n      @click=\"view = 'TypedData'\"\n    >\n      Typed data\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'DelegationSignature' }\"\n      @click=\"view = 'DelegationSignature'\"\n    >\n      Delegation signature\n    </a>\n  </div>\n\n  <Component\n    v-if=\"view\"\n    :is=\"view\"\n  />\n</template>\n\n<script>\nimport Connect from './Connect.vue';\nimport Basic from './Basic.vue';\nimport Contracts from './Contracts.vue';\nimport PayForTx from './PayForTx.vue';\nimport TypedData from './TypedData.vue';\nimport DelegationSignature from './DelegationSignature.vue';\n\nexport default {\n  components: {\n    Connect, Basic, Contracts, PayForTx, TypedData, DelegationSignature,\n  },\n  data: () => ({ view: '' }),\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","<template>\n  <div class=\"group\">\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"default\">\n        Iframe or WebExtension\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"reverse-iframe\">\n        Reverse iframe\n      </label>\n      <div><input v-model=\"reverseIframeWalletUrl\"></div>\n    </div>\n\n    <button\n      v-if=\"walletConnected\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else-if=\"connectMethod\"\n      :disabled=\"walletConnecting\"\n      @click=\"connect\"\n    >\n      Connect\n    </button>\n\n    <button\n      v-if=\"cancelWalletDetection\"\n      @click=\"cancelWalletDetection\"\n    >\n      Cancel detection\n    </button>\n  </div>\n\n  <div class=\"group\">\n    <div>\n      <div>SDK status</div>\n      <div>\n        {{\n          (walletConnected && 'Wallet connected')\n          || (cancelWalletDetection && 'Wallet detection')\n          || (walletConnecting && 'Wallet connecting')\n          || 'Ready to connect to wallet'\n        }}\n      </div>\n    </div>\n    <div>\n      <div>Wallet name</div>\n      <div>{{ walletName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  walletDetector, BrowserWindowMessageConnection, RpcConnectionDenyError, RpcRejectedByUserError,\n} from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\n\nexport default {\n  data: () => ({\n    connectMethod: 'default',\n    walletConnected: false,\n    walletConnecting: null,\n    reverseIframe: null,\n    reverseIframeWalletUrl: process.env.VUE_APP_WALLET_URL ?? `http://${location.hostname}:9000`,\n    walletInfo: null,\n    cancelWalletDetection: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    walletName() {\n      if (!this.walletConnected) return 'Wallet is not connected';\n      return this.walletInfo.name;\n    },\n  },\n  methods: {\n    async detectWallets() {\n      if (this.connectMethod === 'reverse-iframe') {\n        this.reverseIframe = document.createElement('iframe');\n        this.reverseIframe.src = this.reverseIframeWalletUrl;\n        this.reverseIframe.style.display = 'none';\n        document.body.appendChild(this.reverseIframe);\n      }\n      const connection = new BrowserWindowMessageConnection();\n      return new Promise((resolve, reject) => {\n        const stopDetection = walletDetector(connection, async ({ newWallet }) => {\n          if (confirm(`Do you want to connect to wallet ${newWallet.info.name} with id ${newWallet.info.id}`)) {\n            stopDetection();\n            resolve(newWallet.getConnection());\n            this.cancelWalletDetection = null;\n          }\n        });\n        this.cancelWalletDetection = () => {\n          reject(new Error('Wallet detection cancelled'));\n          stopDetection();\n          this.cancelWalletDetection = null;\n          if (this.reverseIframe) this.reverseIframe.remove();\n        };\n      });\n    },\n    async connect() {\n      this.walletConnecting = true;\n      this.aeSdk.onDisconnect = () => {\n        this.walletConnected = false;\n        this.walletInfo = null;\n        this.$store.commit('setAddress', undefined);\n        if (this.reverseIframe) this.reverseIframe.remove();\n      };\n      try {\n        const connection = await this.detectWallets();\n        try {\n          this.walletInfo = await this.aeSdk.connectToWallet(connection);\n        } catch (error) {\n          if (error instanceof RpcConnectionDenyError) connection.disconnect();\n          throw error;\n        }\n        this.walletConnected = true;\n        const { address: { current } } = await this.aeSdk.subscribeAddress('subscribe', 'connected');\n        this.$store.commit('setAddress', Object.keys(current)[0]);\n      } catch (error) {\n        if (\n          error.message === 'Wallet detection cancelled'\n          || error instanceof RpcConnectionDenyError\n          || error instanceof RpcRejectedByUserError\n        ) return;\n        throw error;\n      } finally {\n        this.walletConnecting = false;\n      }\n    },\n    disconnect() {\n      this.aeSdk.disconnectWallet();\n    },\n  },\n};\n</script>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegationToContract = 'delegationToContract.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import BrowserConnection from './connection/Browser';\nimport BrowserWindowMessageConnection from './connection/BrowserWindowMessage';\nimport { MESSAGE_DIRECTION, METHODS } from './schema';\nimport { WalletInfo } from './rpc/types';\nimport { UnsupportedPlatformError } from '../utils/errors';\n\ninterface Wallet {\n  info: WalletInfo;\n  getConnection: () => BrowserWindowMessageConnection;\n}\ninterface Wallets { [key: string]: Wallet }\n\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default (\n  connection: BrowserConnection,\n  onDetected: ({ wallets, newWallet }: { wallets: Wallets; newWallet: Wallet }) => void,\n): () => void => {\n  if (window == null) throw new UnsupportedPlatformError('Window object not found, you can run wallet detector only in browser');\n  const wallets: Wallets = {};\n\n  connection.connect((\n    { method, params }: { method: string; params: WalletInfo },\n    origin: string,\n    source: Window,\n  ) => {\n    if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n\n    const wallet = {\n      info: params,\n      getConnection() {\n        return new BrowserWindowMessageConnection({\n          target: source,\n          ...params.type === 'extension' ? {\n            sendDirection: MESSAGE_DIRECTION.to_waellet,\n            receiveDirection: MESSAGE_DIRECTION.to_aepp,\n            ...window.origin !== 'null' && { origin: window.origin },\n          } : {\n            origin: params.origin,\n          },\n        });\n      },\n    };\n    wallets[wallet.info.id] = wallet;\n    onDetected({ wallets, newWallet: wallet });\n  }, () => {});\n\n  return () => connection.disconnect();\n};\n","import { render } from \"./Connect.vue?vue&type=template&id=02b69bc7\"\nimport script from \"./Connect.vue?vue&type=script&lang=js\"\nexport * from \"./Connect.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>General information</h2>\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>Height</div>\n      <Value :value=\"heightPromise\" />\n    </div>\n    <div>\n      <div>Node info</div>\n      <Value :value=\"nodeInfoPromise\" />\n    </div>\n    <div>\n      <div>Compiler version</div>\n      <Value :value=\"compilerVersionPromise\" />\n    </div>\n  </div>\n\n  <SpendCoins />\n\n  <MessageSign />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\n\nexport default {\n  components: { Value, SpendCoins, MessageSign },\n  data: () => ({\n    balancePromise: null,\n    heightPromise: null,\n    nodeInfoPromise: null,\n    compilerVersionPromise: null,\n  }),\n  computed: mapState(['aeSdk', 'address', 'networkId']),\n  mounted() {\n    this.$watch(\n      ({ aeSdk, address, networkId }) => [aeSdk, address, networkId],\n      ([aeSdk, address]) => {\n        this.compilerVersionPromise = aeSdk.compilerApi.version();\n        this.balancePromise = address\n          ? aeSdk.getBalance(address) : Promise.reject(new Error('Address not available'));\n        this.heightPromise = aeSdk.getHeight();\n        this.nodeInfoPromise = aeSdk.getNodeInfo();\n      },\n      { immediate: true },\n    );\n  },\n};\n</script>\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=0047ad3a\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Spend coins</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <button @click=\"() => { spendPromise = spend(); }\">\n      Spend\n    </button>\n    <div v-if=\"spendPromise\">\n      <div>Spend result</div>\n      <Value :value=\"spendPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    spendPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    spend() {\n      return this.aeSdk.spend(this.spendAmount, this.spendTo, {\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n    },\n  },\n};\n</script>\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      if (name === 'get' && args[0] === '_wrappedValue') return valueCb();\n      const target = valueCb() as object; // to get a native exception in case it missed\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get'\n        ? res.bind(target) // otherwise it fails with attempted to get private field on non-instance\n        : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import { render } from \"./SpendCoins.vue?vue&type=template&id=6217803d\"\nimport script from \"./SpendCoins.vue?vue&type=script&lang=js\"\nexport * from \"./SpendCoins.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <FieldAction\n    title=\"Sign a message\"\n    arg-title=\"Message to sign\"\n    arg-placeholder=\"I want to <action name> at <time> on <network name>\"\n    action-title=\"Sign message\"\n    :action-handler=\"messageSign\"\n    result-title=\"Message sign result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './FieldAction.vue';\n\nexport default {\n  components: { FieldAction },\n  computed: mapState(['aeSdk']),\n  methods: {\n    messageSign(messageToSign) {\n      return this.aeSdk.signMessage(messageToSign);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>{{ title }}</h2>\n  <div class=\"group\">\n    <div v-if=\"argTitle\">\n      <div>{{ argTitle }}</div>\n      <div>\n        <input\n          v-model=\"argValue\"\n          :placeholder=\"argPlaceholder\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { promise = actionHandler(argValue); }\">\n      {{ actionTitle }}\n    </button>\n    <div v-if=\"promise\">\n      <div>{{ resultTitle }}</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  props: {\n    title: { type: String, required: true },\n    argTitle: { type: String, required: false },\n    argPlaceholder: { type: String, required: false },\n    argDefaultValue: { type: String, required: false },\n    actionTitle: { type: String, required: true },\n    actionHandler: { type: Function, required: true },\n    resultTitle: { type: String, required: true },\n  },\n  data() {\n    return {\n      argValue: this.argDefaultValue,\n      promise: null,\n    };\n  },\n};\n</script>\n","import { render } from \"./FieldAction.vue?vue&type=template&id=7b236a56\"\nimport script from \"./FieldAction.vue?vue&type=script&lang=js\"\nexport * from \"./FieldAction.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./MessageSign.vue?vue&type=template&id=2b567dd0\"\nimport script from \"./MessageSign.vue?vue&type=script&lang=js\"\nexport * from \"./MessageSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Basic.vue?vue&type=template&id=4d43cf2d\"\nimport script from \"./Basic.vue?vue&type=script&lang=js\"\nexport * from \"./Basic.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Contract Instance</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract Source Code</div>\n      <div>\n        <textarea\n          v-model=\"contractSourceCode\"\n          placeholder=\"Contact source code\"\n        />\n      </div>\n    </div>\n    <button @click=\"() => { createPromise = create(); }\">\n      Create\n    </button>\n    <div v-if=\"createPromise\">\n      <div>Contract Instance</div>\n      <Value :value=\"createPromise.then(() => 'Ready')\" />\n    </div>\n  </div>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Compile Contract\"\n      action-title=\"Compile\"\n      :action-handler=\"compile\"\n      result-title=\"Bytecode\"\n    />\n  </template>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Deploy Contract\"\n      arg-title=\"Deploy argument\"\n      arg-placeholder=\"Deploy argument\"\n      arg-default-value=\"5\"\n      action-title=\"Deploy\"\n      :action-handler=\"deploy\"\n      result-title=\"Deployed Contract\"\n    />\n  </template>\n\n  <template v-if=\"deployPromise\">\n    <FieldAction\n      title=\"Call Contract on chain\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"7\"\n      action-title=\"Call\"\n      :action-handler=\"callOnChain\"\n      result-title=\"Call Result\"\n    />\n\n    <FieldAction\n      title=\"Call Contract using dry-run (static)\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"8\"\n      action-title=\"Call\"\n      :action-handler=\"callStatic\"\n      result-title=\"Call Result\"\n    />\n  </template>\n</template>\n\n<script>\nimport { shallowRef } from 'vue';\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nconst contractSourceCode = `\ncontract Multiplier =\n  record state = { factor: int }\n\n  entrypoint init(f : int) = { factor = f }\n\n  stateful entrypoint setFactor(f : int) =\n    put(state{ factor = f })\n\n  entrypoint multiplyByFactor(x : int) =\n    x * state.factor\n`.trim();\n\nexport default {\n  components: { Value, FieldAction },\n  data: () => ({\n    contractSourceCode,\n    createPromise: null,\n    contract: null,\n    deployPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async create() {\n      // Contract instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n      this.contract = shallowRef(\n        await this.aeSdk.initializeContract({ sourceCode: this.contractSourceCode }),\n      );\n    },\n    async compile() {\n      return this.contract.$compile();\n    },\n    async deploy(arg) {\n      this.deployPromise = this.contract.$deploy([arg]);\n      return this.deployPromise;\n    },\n    async callOnChain(arg) {\n      return this.contract.setFactor(arg);\n    },\n    async callStatic(arg) {\n      return this.contract.multiplyByFactor(arg);\n    },\n  },\n};\n</script>\n","import { render } from \"./Contracts.vue?vue&type=template&id=c036283c\"\nimport script from \"./Contracts.vue?vue&type=script&lang=js\"\nexport * from \"./Contracts.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <GenerateSpendTx />\n\n  <FieldAction\n    title=\"Sign inner transaction\"\n    arg-title=\"Transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Sign\"\n    :action-handler=\"signInnerTx\"\n    result-title=\"Signed inner transaction\"\n  />\n\n  <FieldAction\n    title=\"Pay for transaction\"\n    arg-title=\"Signed inner transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Pay for transaction\"\n    :action-handler=\"payForTx\"\n    result-title=\"Result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './components/FieldAction.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport GenerateSpendTx from './components/GenerateSpendTx.vue';\n\nexport default {\n  components: {\n    FieldAction, SpendCoins, MessageSign, GenerateSpendTx,\n  },\n  computed: mapState(['aeSdk']),\n  methods: {\n    signInnerTx(txToPayFor) {\n      return this.aeSdk.signTransaction(txToPayFor, { innerTx: true });\n    },\n    payForTx(innerTx) {\n      return this.aeSdk.payForTransaction(innerTx);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>Generate spend transaction</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <div>\n      <div>Increment nonce by 1</div>\n      <div>\n        <input\n          type=\"checkbox\"\n          v-model=\"incrementNonce\"\n        >\n        (only if you want to pay for this transaction yourself)\n      </div>\n    </div>\n    <button @click=\"() => { generatePromise = generate(); }\">\n      Generate\n    </button>\n    <div v-if=\"generatePromise\">\n      <div>Spend transaction</div>\n      <Value :value=\"generatePromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport {\n  encode, Encoding, Tag, unpackTx, buildTx,\n} from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    incrementNonce: true,\n    generatePromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async generate() {\n      let spendTx = await this.aeSdk.buildTx({\n        tag: Tag.SpendTx,\n        senderId: this.aeSdk.address,\n        recipientId: this.spendTo,\n        amount: this.spendAmount,\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n      if (this.incrementNonce) {\n        const spendTxParams = unpackTx(spendTx);\n        spendTxParams.nonce += 1;\n        spendTx = buildTx(spendTxParams);\n      }\n      return spendTx;\n    },\n  },\n};\n</script>\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9;\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Signs a message, and then verifies that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      const tx = unpackTx(encode(buf, Encoding.Transaction));\n      if (tag != null && tx.tag !== tag) throw new ArgumentError('Tag', Tag[tag], Tag[tx.tag]);\n      return tx;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag } from '../constants';\nimport coinAmount from './coin-amount';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the Base fee gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base fee\n * @example\n * ```js\n * TX_FEE_BASE('channelForceProgress') => new BigNumber(30 * 15000)\n * ```\n */\nconst TX_FEE_BASE_GAS = (txType: Tag): BigNumber => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ChannelOffChainUpdateCallContract]: 0,\n    [Tag.ChannelOffChainUpdateCreateContract]: 0,\n    [Tag.ChannelOffChainUpdateDeposit]: 0,\n    [Tag.ChannelOffChainUpdateWithdraw]: 0,\n    [Tag.ChannelOffChainUpdateTransfer]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return new BigNumber(factor * BASE_GAS);\n};\n\n/**\n * Calculate fee for Other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The Other fee\n * @example\n * ```js\n * TX_FEE_OTHER_GAS('oracleResponse',10, { relativeTtl: 10, innerTxSize: 10 })\n *  => new BigNumber(10).times(20).plus(Math.ceil(32000 * 10 / Math.floor(60 * 24 * 365 / 2)))\n * ```\n */\nconst TX_FEE_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): BigNumber => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return new BigNumber(txSize)\n        .times(GAS_PER_BYTE)\n        .plus(\n          Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL)),\n        );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return new BigNumber(txSize).minus(innerTxSize).times(GAS_PER_BYTE);\n    default:\n      return new BigNumber(txSize).times(GAS_PER_BYTE);\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate fee based on tx type and params\n */\nexport function buildFee(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_FEE_BASE_GAS(txObject.tag)\n    .plus(TX_FEE_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    }))\n    .times(MIN_GAS_PRICE);\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = buildFee(rebuildTx(fee), unpackTx, buildTx);\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee,\n    }: {\n      rebuildTx: (params: any) => Encoded.Transaction;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingMinFee?: BigNumber;\n    },\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1],\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport { isAccountNotFoundError, pause, unwrapProxy } from './utils/other';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport function _getPollInterval(\n  type: 'block' | 'microblock', // TODO: rename to 'key-block' | 'micro-block'\n  { _expectedMineRate = 180000, _microBlockCycle = 3000 }:\n  { _expectedMineRate?: number; _microBlockCycle?: number },\n): number {\n  const base = {\n    block: _expectedMineRate,\n    microblock: _microBlockCycle,\n  }[type];\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight(\n  { cached = false, ...options }: {\n    onNode: Node;\n    cached?: boolean;\n  } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache?.time != null && cache.time > Date.now() - _getPollInterval('block', options)) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Wait for a transaction to be mined\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, onNode, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= _getPollInterval('microblock', options);\n  const max = await getHeight({ ...options, onNode, cached: true }) + blocks;\n  do {\n    const tx = await onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    await pause(interval);\n  } while (await getHeight({ ...options, onNode, cached: true }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(_getPollInterval('block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight({ onNode });\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { _getPollInterval, getHeight } from '../../../chain';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    { onNode, absoluteTtl, ...options }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n    } & Parameters<typeof _getPollInterval>[1],\n  ) {\n    if (absoluteTtl !== true && value !== 0 && value != null) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value += await getHeight({ ...options, onNode, cached: true });\n    }\n    return value;\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & { strategy?: NextNonceStrategy; onNode?: Node },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\nimport { isAddressValid } from '../../../utils/crypto';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) payload = [ID_TAG, addressAny.serialize(id)];\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError('Raw pointer', `shorter than ${DATA_LENGTH_MAX + 1} bytes`, `${data.length} bytes`);\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(([bKey, bId]) => {\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray);\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n};\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildFee } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildFee(rebuildTx(gasMax), unpackTx, buildTx).dividedBy(MIN_GAS_PRICE);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import coinAmount from './coin-amount';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE } from '../constants';\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, gasLimit, gasPrice, fee, address, pointers,\n  pointers2, queryFee, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, withDefault, withFormatting, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n// TODO: inline after dropping Iris compatibility\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\nconst nameTtl = withFormatting(\n  (value) => {\n    const NAME_TTL = 180000;\n    value ??= NAME_TTL;\n    if (value >= 1 && value <= NAME_TTL) return value;\n    throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n  },\n  shortUInt,\n);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(2),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers2,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types';\nimport {\n  ArgumentError, DecodeError, SchemaNotFoundError, InternalError,\n} from '../../utils/errors';\nimport {\n  Encoding, Encoded, encode, decode,\n} from '../../utils/encoder';\nimport { readInt } from './helpers';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null) throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) => (\n    field.serialize(params[key], { ...params, ...extraParams }, params)\n  ));\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name, field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId } from './helpers';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common';\nimport { ArgumentError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction;\n/**\n * Build node entry with a custom encoding\n * @param params - Entry params\n * @param options - Options\n * @param options.prefix - Output encoding\n */\nexport function buildTx<E extends TxEncoding>(\n  params: TxParams,\n  { prefix }: { prefix: E },\n): Encoded.Generic<E>;\nexport function buildTx(\n  params: TxParams,\n  { prefix }: { prefix?: TxEncoding } = {},\n): Encoded.Generic<TxEncoding> {\n  return packRecord(txSchema, Tag, params, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n    buildTx,\n    rebuildTx: (overrideParams: any) => buildTx(\n      { ...params, ...overrideParams },\n    ),\n  }, prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n  }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import { render } from \"./GenerateSpendTx.vue?vue&type=template&id=7508f59e\"\nimport script from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\nexport * from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./PayForTx.vue?vue&type=template&id=6b4a1008\"\nimport script from \"./PayForTx.vue?vue&type=script&lang=js\"\nexport * from \"./PayForTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Domain</h2>\n  <div class=\"group\">\n    <div>\n      <div>Name</div>\n      <div>\n        <input\n          :value=\"domain.name\"\n          @input=\"domain.name = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Version</div>\n      <div>\n        <input\n          :value=\"domain.version\"\n          @input=\"domain.version = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Network id</div>\n      <div>\n        <input\n          :value=\"domain.networkId\"\n          @input=\"domain.networkId = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Contract address</div>\n      <div>\n        <input\n          :value=\"domain.contractAddress\"\n          @input=\"domain.contractAddress = $event.target.value || null\"\n        >\n      </div>\n    </div>\n  </div>\n\n  <h2>Data</h2>\n  <div class=\"group\">\n    <div>\n      <div>Type</div>\n      <div>\n        <textarea\n          v-model=\"aci\"\n          placeholder=\"Type as ACI JSON\"\n        />\n      </div>\n    </div>\n    <div>\n      <div>Data</div>\n      <div>\n        <textarea v-model=\"data\" />\n      </div>\n    </div>\n    <div>\n      <div>Encoded data</div>\n      <Value :value=\"toPromise(() => dataEncoded)\" />\n    </div>\n    <div>\n      <div>Hash</div>\n      <Value :value=\"toPromise(() => hash.toString('base64'))\" />\n    </div>\n  </div>\n\n  <FieldAction\n    title=\"Sign\"\n    action-title=\"Sign\"\n    :action-handler=\"signTypedData\"\n    result-title=\"Signature\"\n  />\n\n  <h2>Verify</h2>\n  <div class=\"group\">\n    <div>\n      <div>Signature</div>\n      <div>\n        <input\n          v-model=\"verifySignature\"\n          placeholder=\"sg-encoded\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input\n          v-model=\"verifyAddress\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { verifyPromise = verifyTypedData(); }\">\n      Verify\n    </button>\n    <div v-if=\"verifyPromise\">\n      <div>Is signature correct</div>\n      <Value :value=\"verifyPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { hashTypedData, verify, decode } from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nexport default {\n  components: {\n    Value, FieldAction,\n  },\n  data: () => ({\n    domain: {\n      name: 'Simple æpp',\n      version: 2,\n      networkId: 'ae_uat',\n      contractAddress: null,\n    },\n    aci: Value.methods.valueToString({\n      record: [\n        { name: 'operation', type: 'string' },\n        { name: 'parameter', type: 'int' },\n      ],\n    }),\n    data: Value.methods.valueToString({\n      operation: 'test',\n      parameter: 42,\n    }),\n    verifySignature: null,\n    verifyAddress: null,\n    verifyPromise: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    dataParsed() {\n      return JSON.parse(this.data);\n    },\n    aciParsed() {\n      return JSON.parse(this.aci);\n    },\n    dataEncoded() {\n      const dataType = new TypeResolver().resolveType(this.aciParsed);\n      return new ContractByteArrayEncoder().encodeWithType(this.dataParsed, dataType);\n    },\n    hash() {\n      return hashTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n  },\n  methods: {\n    async toPromise(getter) {\n      return getter();\n    },\n    signTypedData() {\n      return this.aeSdk.signTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n    async verifyTypedData() {\n      return verify(this.hash, decode(this.verifySignature), this.verifyAddress);\n    },\n  },\n};\n</script>\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import { render } from \"./TypedData.vue?vue&type=template&id=6ad6adcf\"\nimport script from \"./TypedData.vue?vue&type=script&lang=js\"\nexport * from \"./TypedData.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign delegation to contract</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract address</div>\n      <div><input v-model=\"contractAddress\"></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensPreclaim\">\n        AENS preclaim\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.Oracle\">\n        Oracle\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensName\">\n        AENS name\n      </label>\n      <div><input v-model=\"name\"></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensWildcard\">\n        All AENS names\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.OracleResponse\">\n        Response to oracle query\n      </label>\n      <div><input v-model=\"oracleQueryId\"></div>\n    </div>\n    <button @click=\"() => { signPromise = sign(); }\">\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signature</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { DelegationTag } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    DelegationTag,\n    type: DelegationTag.AensPreclaim,\n    contractAddress: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    name: 'test.chain',\n    oracleQueryId: 'oq_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    signPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    sign() {\n      switch (this.type) {\n        case DelegationTag.AensPreclaim:\n          return this.aeSdk.signDelegationToContract(this.contractAddress, { isOracle: false });\n        case DelegationTag.Oracle:\n          return this.aeSdk.signDelegationToContract(this.contractAddress, { isOracle: true });\n        case DelegationTag.AensName:\n          return this.aeSdk.signNameDelegationToContract(this.contractAddress, this.name);\n        case DelegationTag.AensWildcard:\n          return this.aeSdk.signAllNamesDelegationToContract(this.contractAddress);\n        case DelegationTag.OracleResponse:\n          return this.aeSdk\n            .signOracleQueryDelegationToContract(this.contractAddress, this.oracleQueryId);\n        default:\n          throw new Error(`Unknown delegation signature type: ${DelegationTag[this.type]}`);\n      }\n    },\n  },\n};\n</script>\n","import SchemaTypes from '../SchemaTypes';\nimport { address, nameId, shortUIntConst } from '../field-types';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  AensWildcard = 1,\n  AensName = 2,\n  AensPreclaim = 3,\n  Oracle = 4,\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(DelegationTag.AensWildcard),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensName),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  nameId,\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensPreclaim),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.OracleResponse),\n  version: shortUIntConst(1, true),\n  queryId: queryIdField,\n  contractAddress: address(Encoding.ContractAddress),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { render } from \"./DelegationSignature.vue?vue&type=template&id=05c62b43\"\nimport script from \"./DelegationSignature.vue?vue&type=script&lang=js\"\nexport * from \"./DelegationSignature.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=73a5f0d8\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion: string,\n): boolean {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const versionComponents = getComponents(version);\n  const geComponents = getComponents(geVersion);\n  const ltComponents = getComponents(ltVersion);\n\n  const base = Math.max(...versionComponents, ...geComponents, ...ltComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  const vNumber = componentsToNumber(versionComponents);\n  const geNumber = componentsToNumber(geComponents);\n  const ltNumber = componentsToNumber(ltComponents);\n  return vNumber >= geNumber && vNumber < ltNumber;\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(key, req.catch(() => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        let body;\n        try {\n          body = JSON.parse(error.response.bodyAsText);\n        } catch (e) {\n          body = null;\n        }\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  ignorePath: string,\n  versionPromise: Promise<string | Error>,\n  geVersion: string,\n  ltVersion: string,\n): PipelinePolicy => ({\n  name: 'version-check',\n  async sendRequest(request, next) {\n    if (new URL(request.url).pathname === ignorePath) return next(request);\n    const version = await versionPromise;\n    if (version instanceof Error) throw version;\n    const args = [version, geVersion, ltVersion] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n    return next(request);\n  },\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  serializedName: \"Tx\",\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    uberParent: \"Tx\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\",\n    },\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hashrate: {\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\",\n        },\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  \"Tx.Tx\": Tx,\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationSpec } from '@azure/core-client';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  #networkIdPromise?: Promise<string | Error>;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => ` ${body.reason}`),\n      ],\n      ...options,\n    });\n    if (!ignoreVersion) {\n      const statusPromise = this.getStatus();\n      const versionPromise = statusPromise.then(({ nodeVersion }) => nodeVersion, (error) => error);\n      this.#networkIdPromise = statusPromise.then(({ networkId }) => networkId, (error) => error);\n      this.pipeline.addPolicy(\n        genVersionCheckPolicy('node', '/v3/status', versionPromise, '6.2.0', '7.0.0'),\n      );\n    }\n    this.intAsString = true;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    this.#networkIdPromise ??= this.getStatus().then(({ networkId }) => networkId);\n    const networkId = await this.#networkIdPromise;\n    if (networkId instanceof Error) throw networkId;\n    return networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { AensName, ConsensusProtocolVersion, Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\nimport { NotImplementedError } from '../utils/errors';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signTypedData(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signTypedData method');\n  }\n\n  /**\n   * Sign delegation of AENS, oracle operations to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @param options.isOracle - Use to generate an oracle delegation signature in Ceres, otherwise an\n   * AENS preclaim delegation signature would be generated\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of an AENS name to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param name - AENS name to manage by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signNameDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signNameDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of all AENS names to a contract (not available in Iris)\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signAllNamesDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signAllNamesDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of oracle query to a contract\n   *\n   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded\n   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.\n   *\n   * Warning! Implementations needs to ensure that oracle query and contract exists unless\n   * https://github.com/aeternity/aesophia/issues/474 is fixed.\n   *\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param oracleQueryId - Oracle query ID to reply by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signOracleQueryDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signOracleQueryDelegationToContract method');\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegation(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegation method');\n  }\n}\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { DelegationTag, schemas } from './schema';\nimport { DlgParams, DlgUnpacked } from './schema.generated';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash, messagePrefixLength,\n} from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { produceNameId } from '../tx/builder/helpers';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\nimport { packDelegation } from '../tx/builder/delegation';\n\nconst secretKeys = new WeakMap();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKeys.get(this)).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return sign(data, secretKeys.get(this));\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion, isOracle }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountMemory:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(produceNameId(name)),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      Buffer.from('AENS'),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    const oracleQueryIdDecoded = decode(oracleQueryId);\n    const addressDecoded = decode(this.address);\n    // TODO: remove after fixing https://github.com/aeternity/aesophia/issues/475\n    if (oracleQueryIdDecoded.compare(addressDecoded) === 0) {\n      throw new ArgumentError('oracleQueryId', 'not equal to account address', oracleQueryId);\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      oracleQueryIdDecoded,\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength, new Uint8Array([1]), Buffer.from(networkId), decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.Oracle === tx.tag || Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n  // TODO: move to fee field of tx builder after dropping Iris\n  (tx, { consensusProtocolVersion }) => ((\n    Tag.GaAttachTx === tx.tag\n      && ConsensusProtocolVersion.Ceres === consensusProtocolVersion\n      && tx.nonce !== 1\n  ) ? [{\n      message: `Account ${tx.ownerId} can't become generalized because it is already used`,\n      key: 'AccountUsed',\n      checkedKeys: ['nonce'],\n    }]\n    : []),\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator';\nimport { ensureError } from './utils/other';\nimport { TransactionError } from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport { SignedTx } from './apis/node';\nimport { Encoded } from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\nimport { poll, waitForTxConfirm } from './chain';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction({ tx }, {\n      requestOptions: {\n        customHeaders: {\n          // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n          '__retry-code': '400',\n          ...__queue != null ? { __queue } : {},\n        },\n      },\n    });\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt, isAddressValid } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport { Tag, AensName, ConsensusProtocolVersion } from './tx/builder/constants';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { UnsupportedProtocolError } from './utils/errors';\nimport { getName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const hasRawPointers = Object.values(allPointers)\n    .some((v) => isAddressValid(v, Encoding.Bytearray));\n  const isIris = (await options.onNode.getNodeInfo())\n    .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n  if (hasRawPointers && isIris) {\n    throw new UnsupportedProtocolError('Raw pointers are available only in Ceres, the current protocol is Iris');\n  }\n\n  const nameUpdateTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameUpdateTx,\n    version: hasRawPointers ? 2 : 1,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  /**\n   * Get the pointers from the node and merge with provided ones. Pointers with the same key will be\n   * overwritten.\n   */\n  extendPointers?: boolean;\n  /**\n   * a suggestion as to how long any clients should cache this information\n   */\n  clientTtl?: number;\n  /**\n   * Name ttl represented in number of blocks (Max value is 50000 blocks)\n   */\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl?: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl, options = {}) {\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid or claiming without preclaim (in Ceres)\n * @param options - options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport { getBalance, resolveName } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.PayingForTx, payerId: options.onAccount.address, tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport { _getPollInterval, getHeight } from './chain';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, onNode, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  interval ??= _getPollInterval('microblock', options);\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= _getPollInterval('microblock', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ ...options, onNode, cached: true });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query'>;\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'callerId' | 'oracleId'>;\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response'>;\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat'>;\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport {\n  Tag, AensName, ConsensusProtocolVersion, DRY_RUN_ACCOUNT,\n} from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun,\n} from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await aeSdk.initializeContract({ sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      const isIris = (await onNode.getNodeInfo())\n        .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n      if (!isIris && isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  {\n    onAccount, omitAddress, isOracle, ...options\n  }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    isOracle?: boolean;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const { nodeNetworkId, consensusProtocolVersion } = await options.onNode.getNodeInfo();\n  const signOpts = { networkId: nodeNetworkId, consensusProtocolVersion };\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signDelegationToContract(contractAddress, { ...signOpts, isOracle }),\n    );\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, signOpts),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, signOpts),\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { getAccount } from '../chain';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport { sendTransaction } from './send-transaction';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection, wrapWithProxy } from './utils/other';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this.getContext(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    return Contract.initialize<Methods>(this.getContext(options as AeSdkMethodsOptions));\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n    /**\n     * Make operation on specific account by providing address (to use account from sdk) or instance\n     * of AccountBase (like MemoryAccount)\n     */\n    onAccount: OnAccount;\n  } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { wrapWithProxy } from './utils/other';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param name - AENS name\n   * @param options - Options\n   */\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signAllNamesDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signAllNamesDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param oracleQueryId - Oracle query id\n   * @param options - Options\n   */\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      },\n    };\n  }\n}\n","import AccountBase from './Base';\nimport { METHODS } from '../aepp-wallet-communication/schema';\nimport { ArgumentError, NotImplementedError, UnsupportedProtocolError } from '../utils/errors';\nimport { Encoded } from '../utils/encoder';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types';\nimport { AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { packDelegation } from '../tx/builder/delegation';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async sign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using wallet');\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient\n      .request(METHODS.signMessage, { onAccount: this.address, message });\n    return Buffer.from(signature, 'hex');\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      name, version, contractAddress, networkId,\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signTypedData, {\n      onAccount: this.address,\n      domain: {\n        name, version, networkId, contractAddress,\n      },\n      aci,\n      data,\n    });\n    return signature;\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { consensusProtocolVersion, isOracle }: {\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountRpc:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      isOracle,\n    });\n    return signature;\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { consensusProtocolVersion }: { consensusProtocolVersion?: ConsensusProtocolVersion } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      name,\n    });\n    return signature;\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { consensusProtocolVersion }: { consensusProtocolVersion?: ConsensusProtocolVersion } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      allNames: true,\n    });\n    return signature;\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { consensusProtocolVersion }: { consensusProtocolVersion?: ConsensusProtocolVersion } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      oracleQueryId,\n    });\n    return signature;\n  }\n\n  override async signDelegation(delegation: Encoded.Bytearray): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(\n      METHODS.signDelegation,\n      { delegation, onAccount: this.address },\n    );\n    return signature;\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\nimport { AensName } from '../../tx/builder/constants';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegationToContract]: (\n    p: {\n      contractAddress: Encoded.ContractAddress;\n      name?: AensName;\n      oracleQueryId?: Encoded.OracleQueryId;\n      allNames?: boolean;\n      isOracle?: boolean;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (\n    p: {\n      delegation: Encoded.Bytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = (\n    new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>()\n  );\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport AccountRpc from './account/Rpc';\nimport { decode, Encoded } from './utils/encoder';\nimport {\n  Accounts, RPC_VERSION, WalletInfo, Network, WalletApi, AeppApi, Node as NodeRpc,\n} from './aepp-wallet-communication/rpc/types';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport { METHODS, SUBSCRIPTION_TYPES } from './aepp-wallet-communication/schema';\nimport {\n  AlreadyConnectedError,\n  NoWalletConnectedError,\n  UnsubscribedAccountError,\n  UnAuthorizedAccountError,\n  RpcConnectionError,\n} from './utils/errors';\nimport Node from './Node';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\n\n/**\n * RPC handler for AEPP side\n * Contain functionality for wallet interaction and connect it to sdk\n * @category aepp wallet communication\n */\nexport default class AeSdkAepp extends AeSdkBase {\n  name: string;\n\n  onAddressChange: (a: Accounts) => void;\n\n  onDisconnect: (p: any) => void;\n\n  onNetworkChange: (a: Network) => void;\n\n  rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  _accounts?: Accounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Aepp name\n   * @param options.onAddressChange - Call-back function for update address event\n   * @param options.onDisconnect - Call-back function for disconnect event\n   * @param options.onNetworkChange - Call-back function for update network event\n   */\n  constructor({\n    name,\n    onAddressChange = () => {},\n    onDisconnect = () => {},\n    onNetworkChange = () => {},\n    ...other\n  }: {\n    name: string;\n    onAddressChange?: (a: Accounts) => void;\n    onDisconnect?: (p: any) => void;\n    onNetworkChange?: (a: Network) => void;\n  } & ConstructorParameters<typeof AeSdkBase>[0]) {\n    super(other);\n    this.onAddressChange = onAddressChange;\n    this.onDisconnect = onDisconnect;\n    this.onNetworkChange = onNetworkChange;\n    this.name = name;\n  }\n\n  override _resolveAccount(account: OnAccount = this.addresses()[0]): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (!this.addresses().includes(address)) throw new UnAuthorizedAccountError(address);\n      this._ensureConnected();\n      account = new AccountRpc(this.rpcClient, address);\n    }\n    if (account == null) this._ensureAccountAccess();\n    return super._resolveAccount(account);\n  }\n\n  override addresses(): Encoded.AccountAddress[] {\n    if (this._accounts == null) return [];\n    const current = Object.keys(this._accounts.current)[0];\n    return [\n      ...current != null ? [current] : [], ...Object.keys(this._accounts.connected),\n    ] as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Connect to wallet\n   * @param connection - Wallet connection object\n   * @param options - Options\n   * @param options.connectNode - Request wallet to bind node\n   * @param options.name - Node name\n   */\n  async connectToWallet(\n    connection: BrowserConnection,\n    { connectNode = false, name = 'wallet-node' }: { connectNode?: boolean; name?: string } = {},\n  ): Promise<WalletInfo & { node?: NodeRpc }> {\n    if (this.rpcClient != null) throw new AlreadyConnectedError('You are already connected to wallet');\n    let disconnectParams: any;\n\n    const updateNetwork = (params: Network): void => {\n      if (connectNode) {\n        if (params.node?.url == null) throw new RpcConnectionError('Missing URLs of the Node');\n        this.pool.delete(name);\n        this.addNode(name, new Node(params.node.url), true);\n      }\n      this.onNetworkChange(params);\n    };\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        delete this.rpcClient;\n        delete this._accounts;\n        this.onDisconnect(disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: (params) => {\n          this._accounts = params;\n          this.onAddressChange(params);\n        },\n        [METHODS.updateNetwork]: updateNetwork,\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    const walletInfo = await client\n      .request(METHODS.connect, { name: this.name, version: RPC_VERSION, connectNode });\n    updateNetwork(walletInfo);\n    this.rpcClient = client;\n    return walletInfo;\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnectWallet(): void {\n    this._ensureConnected();\n    this.rpcClient.notify(METHODS.closeConnection, { reason: 'bye' });\n    this.rpcClient.connection.disconnect();\n  }\n\n  /**\n   * Ask addresses from wallet\n   * @returns Addresses from wallet\n   */\n  async askAddresses(): Promise<Encoded.AccountAddress[]> {\n    this._ensureAccountAccess();\n    return this.rpcClient.request(METHODS.address, undefined);\n  }\n\n  /**\n   * Subscribe for addresses from wallet\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAddress(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<ReturnType<WalletApi[METHODS.subscribeAddress]>> {\n    this._ensureConnected();\n    const result = await this.rpcClient.request(METHODS.subscribeAddress, { type, value });\n    this._accounts = result.address;\n    return result;\n  }\n\n  _ensureConnected(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    if (this.rpcClient != null) return;\n    throw new NoWalletConnectedError('You are not connected to Wallet');\n  }\n\n  _ensureAccountAccess(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    this._ensureConnected();\n    if (this.addresses().length !== 0) return;\n    throw new UnsubscribedAccountError();\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci, CompileResult } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion }: { ignoreVersion?: boolean } = {}) {\n    super();\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    if (ignoreVersion !== true) {\n      const versionPromise = this.api.apiVersion()\n        .then(({ apiVersion }) => apiVersion, (error) => error);\n      this.api.pipeline.addPolicy(\n        genVersionCheckPolicy('compiler', '/api-version', versionPromise, '7.3.0', '9.0.0'),\n      );\n    }\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      cmpOut.warnings ??= []; // TODO: remove after requiring http compiler above or equal to 8.0.0\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","import { shallowReactive } from 'vue';\nimport { createStore } from 'vuex';\nimport { AeSdkAepp, Node, CompilerHttp } from '@aeternity/aepp-sdk';\n\nconst TESTNET_NODE_URL = 'https://testnet.aeternity.io';\nconst MAINNET_NODE_URL = 'https://mainnet.aeternity.io';\nconst COMPILER_URL = 'https://v7.compiler.aepps.com';\n\nconst store = createStore({\n  state: {\n    address: undefined,\n    networkId: undefined,\n    // AeSdkAepp instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n    aeSdk: shallowReactive(new AeSdkAepp({\n      name: 'Simple æpp',\n      nodes: [\n        { name: 'testnet', instance: new Node(TESTNET_NODE_URL) },\n        { name: 'mainnet', instance: new Node(MAINNET_NODE_URL) },\n      ],\n      onCompiler: new CompilerHttp(COMPILER_URL),\n      async onNetworkChange({ networkId }) {\n        const [{ name }] = (await this.getNodesInPool())\n          .filter((node) => node.nodeNetworkId === networkId);\n        this.selectNode(name);\n        store.commit('setNetworkId', networkId);\n      },\n      onAddressChange: ({ current }) => store.commit('setAddress', Object.keys(current)[0]),\n    })),\n  },\n  mutations: {\n    setAddress(state, address) {\n      state.address = address;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n  },\n});\n\nexport default store;\n","import { createApp } from 'vue';\nimport App from './App.vue';\nimport store from './store';\n\ncreateApp(App).use(store).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkaepp\"] = self[\"webpackChunkaepp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(3746); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","class","_createElementBlock","_Fragment","_hoisted_1","_createVNode","_component_Connect","_hoisted_2","href","_normalizeClass","active","_ctx","view","onClick","_cache","$event","_createBlock","_resolveDynamicComponent","key","_createCommentVNode","connectMethod","type","value","_createTextVNode","reverseIframeWalletUrl","walletConnected","args","$options","disconnect","disabled","walletConnecting","connect","cancelWalletDetection","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","walletName","BaseError","Error","constructor","message","super","this","name","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","UnsupportedPlatformError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","UnAuthorizedAccountError","onAccount","UnsubscribedAccountError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","METHODS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","address","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","target","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","connection","onDetected","wallets","method","params","readyToConnect","wallet","info","getConnection","to_waellet","newWallet","reverseIframe","process","walletInfo","computed","mapState","methods","detectWallets","document","createElement","src","style","display","body","appendChild","Promise","resolve","reject","stopDetection","walletDetector","async","confirm","remove","aeSdk","$store","commit","connectToWallet","error","current","subscribeAddress","Object","keys","disconnectWallet","__exports__","_component_Value","balancePromise","heightPromise","_hoisted_6","nodeInfoPromise","_hoisted_7","compilerVersionPromise","_component_SpendCoins","_component_MessageSign","text","props","Array","String","Number","default","watch","handler","then","result","valueToString","warn","immediate","JSON","stringify","k","v","spendTo","placeholder","spendAmount","spendPayload","spendPromise","spend","pause","setTimeout","duration","mapObject","object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","concatBuffers","list","totalLength","el","wrapWithProxy","valueCb","Proxy","t","res","Reflect","bind","unwrapProxy","_wrappedValue","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","base58Type","encodedPayload","extra","split","encoder","components","Value","TextEncoder","_component_FieldAction","title","messageSign","$props","argTitle","$data","argValue","argPlaceholder","promise","actionHandler","actionTitle","resultTitle","required","argDefaultValue","Function","FieldAction","messageToSign","signMessage","SpendCoins","MessageSign","mounted","$watch","networkId","compilerApi","getBalance","getHeight","getNodeInfo","contractSourceCode","createPromise","create","contract","compile","deploy","deployPromise","callOnChain","callStatic","trim","shallowRef","initializeContract","sourceCode","$compile","arg","$deploy","setFactor","multiplyByFactor","_component_GenerateSpendTx","signInnerTx","payForTx","incrementNonce","generatePromise","generate","_hoisted_8","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","isAddressValid","maybeEncoded","encodings","encoding","genSalt","random","BigUint64Array","nacl","BigInt","MAX_SAFE_INTEGER","hash","verify","signature","detached","messagePrefix","messagePrefixLength","genEntryField","serialize","txParams","buildTx","ArrayBuffer","isView","startsWith","buf","unpackTx","tx","genArrayField","itemHandler","items","buffers","genMapField","Mtree","values","MtreeValue","filter","recursiveType","withDefault","defaultValue","field","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","oracleQueryId","senderId","oracleId","_int32","nonceBE","alloc","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","commitmentHash","salt","padStart","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","isAuctionName","uInt","withFormatting","format","genShortUIntConstField","constValue","optional","shortUInt","constValueOptional","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","readUIntBE","subarray","genEncodedField","encodedData","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","serializeAettos","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_FEE_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ChannelOffChainUpdateCallContract","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateTransfer","ContractCreateTx","ContractCallTx","GaAttachTx","GaMetaTx","PayingForTx","factor","TX_FEE_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","plus","ceil","floor","minus","getOracleRelativeTtl","ttlKeys","buildFee","builtTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","coinAmount","_value","_computingMinFee","_canIncreaseFee","minFee","gt","_getPollInterval","_expectedMineRate","_microBlockCycle","base","block","microblock","heightCache","cached","onNode","cache","get","time","Date","now","getCurrentKeyBlockHeight","set","poll","interval","_interval","max","getTransactionByHash","blockHeight","awaitHeight","_interval2","currentHeight","waitForTxConfirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","addr","balance","catch","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","Map","txDryRunHandler","rs","delete","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accounts","Set","accountAddress","pubKey","forEach","results","reason","resultPayload","idx","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","pointer","pointers","p","prepare","absoluteTtl","genNonceField","senderKey","strategy","getAccountNextNonce","replace","nextNonce","addressAny","txFields","parameters","addressName","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","bKey","bId","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","Fate3","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","consensusProtocolVersion","vm","abi","calculateGasLimitMax","gasMax","dividedBy","_computingGasLimit","gasLimitMax","gasLimit","_getProtocolDetails","c","kind","genEnumerationField","enm","getOracleByPubkey","queryFee","rlpEncode","_rlp","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","binary","unpTx","_classPrivateMethodInitSpec","node","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","ORACLE_TTL_TYPES","CallReturnType","entryAny","entry","entrySignedTx","SignedTx","entryMtreeValueArray","entryTreesPoi","TreesPoi","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","flags","gaContract","gaAuthFun","encoded","signatures","raw","SpendTx","recipientId","ttl","accountId","status","NamePreclaimTx","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","pointers2","NameTransferTx","NameRevokeTx","owner","ctVersion","boolean","referers","deposit","gasPrice","callData","callerId","callerNonce","gasUsed","returnValue","returnType","enumeration","queryFormat","responseFormat","oracleTtlValue","oracleTtlType","delta","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","to","caller","callStack","ChannelClientReconnectTx","role","pubkey","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","authFun","gaId","authData","payerId","GaMetaTxAuthData","rlpDecode","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","unpackRecord","encodedRecord","expectedTag","index","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","spendTx","spendTxParams","GenerateSpendTx","txToPayFor","signTransaction","innerTx","payForTransaction","domain","onInput","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","aci","_hoisted_14","_hoisted_15","toPromise","dataEncoded","_hoisted_16","signTypedData","_hoisted_17","_hoisted_18","_hoisted_19","verifySignature","_hoisted_20","verifyAddress","verifyPromise","verifyTypedData","_hoisted_21","_hoisted_22","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","operation","parameter","dataParsed","parse","aciParsed","dataType","getter","DelegationTag","AensPreclaim","AensName","AensWildcard","signPromise","sign","oracleAddressField","queryIdField","signDelegationToContract","isOracle","signNameDelegationToContract","signAllNamesDelegationToContract","signOracleQueryDelegationToContract","Connect","Basic","Contracts","PayForTx","TypedData","DelegationSignature","render","semverSatisfies","getComponents","i","versionComponents","geComponents","ltComponents","componentsToNumber","reverse","reduce","acc","vNumber","geNumber","ltNumber","genRequestQueuesPolicy","requestQueues","policy","sendRequest","request","next","_requestQueues$get","headers","getResponse","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","url","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","e","genVersionCheckPolicy","ignorePath","versionPromise","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","NaN","statusesToNotRetry","intervals","fill","_","intervalSum","a","b","intervalsInMs","attempt","urlParsed","searchParams","_e$response$status","_e$response","Header","className","modelProperties","serializedName","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","pofHash","txsHash","ErrorModel","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","blockHash","Tx","uberParent","polymorphicDiscriminator","clientName","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","op","RelativeTTL","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","NameEntry","PeerPubKey","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","fromParam","limit","typeParam","Node","coreClient","_ref","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxsOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_networkIdPromise","ignoreVersion","allowInsecureConnection","additionalPolicies","statusPromise","pipeline","addPolicy","getNetworkId","_classPrivateFieldGet2","nodeNetworkId","versions","getTransactionSignerAddress","_getSchema$find","AccountBase","signDelegation","delegation","packDelegation","getBufferToSign","prefixes","rlpBinaryTx","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","txBinary","txWithNetworkId","txHashWithNetworkId","checkedKeys","nestedTx","cost","_ref2","oracleCall","contractCreate","contractCall","InvalidTxError","validation","sendTransaction","txUnsigned","waitMined","__queue","requestOptions","customHeaders","pollResult","txData","confirmationHeight","verifyTx","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","hasRawPointers","isIris","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","transfer","revoke","extendTtl","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","claim","opts","otherOptions","aensBid","recipientIdOrName","transferFunds","fraction","desiredAmount","integerValue","ROUND_HALF_UP","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$onNode$getOrac","queries","has","add","stopped","pollForQueryResponse","responseBuffer","getQueryObject","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","lastArg","registerOracle","oracleRegisterTx","Encoder","Calldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","onCompiler","compileBySourceCode","fileSystem","sourceCodePath","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","_opt$gasLimit","_other$result","_calldata","_name","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","ensureOracleQuery","oq","createDelegationSignature","ids","omitAddress","signOpts","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","chainMethods","aensMethods","spendMethods","oracleMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","getContext","mergeWith","prototype","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","_resolveAccount","ensureNodeConnected","pool","selectedNodeName","select","selectNode","isNodeConnected","getNodesInPool","addresses","_options$networkId","_options$consensusPro","_options$networkId2","_options$consensusPro2","_options$networkId3","_options$consensusPro3","_options$networkId4","_options$consensusPro4","_options$networkId5","AccountRpc","rpcClient","_rpcClient","returnSigned","signedTransaction","allNames","RPC_VERSION","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","AeSdkAepp","onAddressChange","onNetworkChange","_ensureConnected","_ensureAccountAccess","_accounts","connectNode","disconnectParams","updateNetwork","_params$node","client","updateAddress","closeConnection","askAddresses","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","_cmpOut$warnings","cmpOut","warning","generateAciBySourceCode","generateAci","TESTNET_NODE_URL","MAINNET_NODE_URL","COMPILER_URL","store","createStore","state","shallowReactive","mutations","setAddress","setNetworkId","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}