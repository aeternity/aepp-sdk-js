{"version":3,"file":"js/app.caae32ba.js","mappings":"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","sources":["webpack://aepp/./src/App.vue","webpack://aepp/./src/Connect.vue","webpack://aepp/../../src/utils/errors.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://aepp/../../src/aepp-wallet-communication/schema.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://aepp/../../src/aepp-wallet-communication/wallet-detector.ts","webpack://aepp/./src/Connect.vue?1a8f","webpack://aepp/./src/Basic.vue","webpack://aepp/./src/components/Value.vue","webpack://aepp/./src/components/Value.vue?9937","webpack://aepp/./src/components/SpendCoins.vue","webpack://aepp/../../src/utils/other.ts","webpack://aepp/../../src/utils/encoder-types.ts","webpack://aepp/../../src/utils/encoder.ts","webpack://aepp/./src/components/SpendCoins.vue?b814","webpack://aepp/./src/components/MessageSign.vue","webpack://aepp/./src/components/FieldAction.vue","webpack://aepp/./src/components/FieldAction.vue?d339","webpack://aepp/./src/components/MessageSign.vue?1f61","webpack://aepp/./src/Basic.vue?efb3","webpack://aepp/./src/Contracts.vue","webpack://aepp/./src/Contracts.vue?05c9","webpack://aepp/./src/PayForTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue","webpack://aepp/../../../src/tx/builder/constants.ts","webpack://aepp/../../src/utils/crypto.ts","webpack://aepp/../../../../src/tx/builder/field-types/entry.ts","webpack://aepp/../../../../src/tx/builder/field-types/array.ts","webpack://aepp/../../../../src/tx/builder/field-types/map.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-default.ts","webpack://aepp/../../src/utils/bytes.ts","webpack://aepp/../../../src/tx/builder/helpers.ts","webpack://aepp/../../../../src/tx/builder/field-types/u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://aepp/../../../../src/tx/builder/field-types/address.ts","webpack://aepp/../../../../src/tx/builder/field-types/encoded.ts","webpack://aepp/../../../../src/tx/builder/field-types/raw.ts","webpack://aepp/../../src/utils/bignumber.ts","webpack://aepp/../../src/utils/amount-formatter.ts","webpack://aepp/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://aepp/../../../../src/tx/builder/field-types/fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/ttl.ts","webpack://aepp/../../../../src/tx/builder/field-types/nonce.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers.ts","webpack://aepp/../../../../src/tx/builder/field-types/field.ts","webpack://aepp/../../../../src/tx/builder/field-types/name.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-id.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers2.ts","webpack://aepp/../../../../src/tx/builder/field-types/ct-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/boolean.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-price.ts","webpack://aepp/../../../../src/tx/builder/field-types/abi-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/enumeration.ts","webpack://aepp/../../../../src/tx/builder/field-types/string.ts","webpack://aepp/../../../../src/tx/builder/field-types/query-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/mptree.ts","webpack://aepp/../../../../src/tx/builder/field-types/wrapped.ts","webpack://aepp/../../../src/tx/builder/schema.ts","webpack://aepp/../../../src/tx/builder/common.ts","webpack://aepp/../../../src/tx/builder/index.ts","webpack://aepp/./src/components/GenerateSpendTx.vue?b650","webpack://aepp/./src/PayForTx.vue?2fdc","webpack://aepp/./src/TypedData.vue","webpack://aepp/../../src/utils/typed-data.ts","webpack://aepp/./src/TypedData.vue?5e40","webpack://aepp/./src/DelegationSignature.vue","webpack://aepp/../../../../src/tx/builder/delegation/schema.ts","webpack://aepp/./src/DelegationSignature.vue?67ef","webpack://aepp/./src/App.vue?7ccd","webpack://aepp/../../src/utils/semver-satisfies.ts","webpack://aepp/../../src/utils/autorest.ts","webpack://aepp/../../../../src/apis/node/models/mappers.ts","webpack://aepp/../../../../src/apis/node/models/parameters.ts","webpack://aepp/../../../src/apis/node/node.ts","webpack://aepp/../src/Node.ts","webpack://aepp/../../src/tx/transaction-signer.ts","webpack://aepp/../../src/account/Base.ts","webpack://aepp/../../../../src/tx/builder/delegation/index.ts","webpack://aepp/../../src/account/Memory.ts","webpack://aepp/../../src/tx/execution-cost.ts","webpack://aepp/../../src/tx/validator.ts","webpack://aepp/../src/chain.ts","webpack://aepp/../src/aens.ts","webpack://aepp/../src/spend.ts","webpack://aepp/../src/oracle.ts","webpack://aepp/../../src/contract/Contract.ts","webpack://aepp/../../src/contract/delegation-signature.ts","webpack://aepp/../../src/contract/ga.ts","webpack://aepp/../src/AeSdkMethods.ts","webpack://aepp/../src/AeSdkBase.ts","webpack://aepp/../../src/account/Rpc.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://aepp/../src/AeSdkAepp.ts","webpack://aepp/../../../../src/apis/compiler/models/mappers.ts","webpack://aepp/../../../../src/apis/compiler/models/parameters.ts","webpack://aepp/../../../src/apis/compiler/compiler.ts","webpack://aepp/../../../src/contract/compiler/Base.ts","webpack://aepp/../../../src/contract/compiler/Http.ts","webpack://aepp/./src/store.js","webpack://aepp/./src/main.js","webpack://aepp/webpack/bootstrap","webpack://aepp/webpack/runtime/chunk loaded","webpack://aepp/webpack/runtime/define property getters","webpack://aepp/webpack/runtime/global","webpack://aepp/webpack/runtime/hasOwnProperty shorthand","webpack://aepp/webpack/runtime/make namespace object","webpack://aepp/webpack/runtime/jsonp chunk loading","webpack://aepp/webpack/startup"],"sourcesContent":["<template>\n  <h2>Simple æpp</h2>\n\n  <Connect />\n\n  <div class=\"nav\">\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Basic' }\"\n      @click=\"view = 'Basic'\"\n    >\n      Basic functionality\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'Contracts' }\"\n      @click=\"view = 'Contracts'\"\n    >\n      Smart contracts\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'PayForTx' }\"\n      @click=\"view = 'PayForTx'\"\n    >\n      Pay for transaction\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'TypedData' }\"\n      @click=\"view = 'TypedData'\"\n    >\n      Typed data\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'DelegationSignature' }\"\n      @click=\"view = 'DelegationSignature'\"\n    >\n      Delegation signature\n    </a>\n  </div>\n\n  <Component\n    v-if=\"view\"\n    :is=\"view\"\n  />\n</template>\n\n<script>\nimport Connect from './Connect.vue';\nimport Basic from './Basic.vue';\nimport Contracts from './Contracts.vue';\nimport PayForTx from './PayForTx.vue';\nimport TypedData from './TypedData.vue';\nimport DelegationSignature from './DelegationSignature.vue';\n\nexport default {\n  components: {\n    Connect, Basic, Contracts, PayForTx, TypedData, DelegationSignature,\n  },\n  data: () => ({ view: '' }),\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","<template>\n  <div class=\"group\">\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"default\">\n        Iframe or WebExtension\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"reverse-iframe\">\n        Reverse iframe\n      </label>\n      <div><input v-model=\"reverseIframeWalletUrl\"></div>\n    </div>\n\n    <button\n      v-if=\"walletConnected\"\n      @click=\"disconnect\"\n    >\n      Disconnect\n    </button>\n    <button\n      v-else-if=\"connectMethod\"\n      :disabled=\"walletConnecting\"\n      @click=\"connect\"\n    >\n      Connect\n    </button>\n\n    <button\n      v-if=\"cancelWalletDetection\"\n      @click=\"cancelWalletDetection\"\n    >\n      Cancel detection\n    </button>\n  </div>\n\n  <div class=\"group\">\n    <div>\n      <div>SDK status</div>\n      <div>\n        {{\n          (walletConnected && 'Wallet connected')\n          || (cancelWalletDetection && 'Wallet detection')\n          || (walletConnecting && 'Wallet connecting')\n          || 'Ready to connect to wallet'\n        }}\n      </div>\n    </div>\n    <div>\n      <div>Wallet name</div>\n      <div>{{ walletName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  walletDetector, BrowserWindowMessageConnection, RpcConnectionDenyError, RpcRejectedByUserError,\n} from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\n\nexport default {\n  data: () => ({\n    connectMethod: 'default',\n    walletConnected: false,\n    walletConnecting: null,\n    reverseIframe: null,\n    reverseIframeWalletUrl: process.env.VUE_APP_WALLET_URL ?? `http://${location.hostname}:9000`,\n    walletInfo: null,\n    cancelWalletDetection: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    walletName() {\n      if (!this.walletConnected) return 'Wallet is not connected';\n      return this.walletInfo.name;\n    },\n  },\n  methods: {\n    async detectWallets() {\n      if (this.connectMethod === 'reverse-iframe') {\n        this.reverseIframe = document.createElement('iframe');\n        this.reverseIframe.src = this.reverseIframeWalletUrl;\n        this.reverseIframe.style.display = 'none';\n        document.body.appendChild(this.reverseIframe);\n      }\n      const connection = new BrowserWindowMessageConnection();\n      return new Promise((resolve, reject) => {\n        const stopDetection = walletDetector(connection, async ({ newWallet }) => {\n          if (confirm(`Do you want to connect to wallet ${newWallet.info.name} with id ${newWallet.info.id}`)) {\n            stopDetection();\n            resolve(newWallet.getConnection());\n            this.cancelWalletDetection = null;\n          }\n        });\n        this.cancelWalletDetection = () => {\n          reject(new Error('Wallet detection cancelled'));\n          stopDetection();\n          this.cancelWalletDetection = null;\n          if (this.reverseIframe) this.reverseIframe.remove();\n        };\n      });\n    },\n    async connect() {\n      this.walletConnecting = true;\n      this.aeSdk.onDisconnect = () => {\n        this.walletConnected = false;\n        this.walletInfo = null;\n        this.$store.commit('setAddress', undefined);\n        if (this.reverseIframe) this.reverseIframe.remove();\n      };\n      try {\n        const connection = await this.detectWallets();\n        try {\n          this.walletInfo = await this.aeSdk.connectToWallet(connection);\n        } catch (error) {\n          if (error instanceof RpcConnectionDenyError) connection.disconnect();\n          throw error;\n        }\n        this.walletConnected = true;\n        const { address: { current } } = await this.aeSdk.subscribeAddress('subscribe', 'connected');\n        this.$store.commit('setAddress', Object.keys(current)[0]);\n      } catch (error) {\n        if (\n          error.message === 'Wallet detection cancelled'\n          || error instanceof RpcConnectionDenyError\n          || error instanceof RpcRejectedByUserError\n        ) return;\n        throw error;\n      } finally {\n        this.walletConnecting = false;\n      }\n    },\n    disconnect() {\n      this.aeSdk.disconnectWallet();\n    },\n  },\n};\n</script>\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants';\nimport * as Encoded from './encoder-types';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super([\n      `Giving up after ${blocks} blocks mined`,\n      `transaction hash: ${th}`,\n    ].join(', '));\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion: string) {\n    super(`Unsupported ${dependency} version ${version}. Supported: >= ${geVersion} < ${ltVersion}`);\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(`the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`);\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. `\n      + 'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}`\n      + ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by`\n      + ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts`\n      + ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidPasswordError extends CryptographyError {\n  constructor() {\n    super('Invalid password or nonce');\n    this.name = 'InvalidPasswordError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected()) throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder';\nimport { BaseError, InternalError } from '../utils/errors';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegationToContract = 'delegationToContract.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser';\nimport { MESSAGE_DIRECTION } from '../schema';\nimport { InternalError, RpcConnectionError } from '../../utils/errors';\n\nexport type ImplPostMessage = Pick<Window, 'addEventListener' | 'removeEventListener' | 'postMessage'>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object'\n        || (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      ) return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError('Can\\'t send messages without target');\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import BrowserConnection from './connection/Browser';\nimport BrowserWindowMessageConnection from './connection/BrowserWindowMessage';\nimport { MESSAGE_DIRECTION, METHODS } from './schema';\nimport { WalletInfo } from './rpc/types';\nimport { UnsupportedPlatformError } from '../utils/errors';\n\ninterface Wallet {\n  info: WalletInfo;\n  getConnection: () => BrowserWindowMessageConnection;\n}\ninterface Wallets { [key: string]: Wallet }\n\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default (\n  connection: BrowserConnection,\n  onDetected: ({ wallets, newWallet }: { wallets: Wallets; newWallet: Wallet }) => void,\n): () => void => {\n  if (window == null) throw new UnsupportedPlatformError('Window object not found, you can run wallet detector only in browser');\n  const wallets: Wallets = {};\n\n  connection.connect((\n    { method, params }: { method: string; params: WalletInfo },\n    origin: string,\n    source: Window,\n  ) => {\n    if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n\n    const wallet = {\n      info: params,\n      getConnection() {\n        return new BrowserWindowMessageConnection({\n          target: source,\n          ...params.type === 'extension' ? {\n            sendDirection: MESSAGE_DIRECTION.to_waellet,\n            receiveDirection: MESSAGE_DIRECTION.to_aepp,\n            ...window.origin !== 'null' && { origin: window.origin },\n          } : {\n            origin: params.origin,\n          },\n        });\n      },\n    };\n    wallets[wallet.info.id] = wallet;\n    onDetected({ wallets, newWallet: wallet });\n  }, () => {});\n\n  return () => connection.disconnect();\n};\n","import { render } from \"./Connect.vue?vue&type=template&id=02b69bc7\"\nimport script from \"./Connect.vue?vue&type=script&lang=js\"\nexport * from \"./Connect.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>General information</h2>\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>Height</div>\n      <Value :value=\"heightPromise\" />\n    </div>\n    <div>\n      <div>Node info</div>\n      <Value :value=\"nodeInfoPromise\" />\n    </div>\n    <div>\n      <div>Compiler version</div>\n      <Value :value=\"compilerVersionPromise\" />\n    </div>\n  </div>\n\n  <SpendCoins />\n\n  <MessageSign />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\n\nexport default {\n  components: { Value, SpendCoins, MessageSign },\n  data: () => ({\n    balancePromise: null,\n    heightPromise: null,\n    nodeInfoPromise: null,\n    compilerVersionPromise: null,\n  }),\n  computed: mapState(['aeSdk', 'address', 'networkId']),\n  mounted() {\n    this.$watch(\n      ({ aeSdk, address, networkId }) => [aeSdk, address, networkId],\n      ([aeSdk, address]) => {\n        this.compilerVersionPromise = aeSdk.compilerApi.version();\n        this.balancePromise = address\n          ? aeSdk.getBalance(address) : Promise.reject(new Error('Address not available'));\n        this.heightPromise = aeSdk.getHeight();\n        this.nodeInfoPromise = aeSdk.getNodeInfo();\n      },\n      { immediate: true },\n    );\n  },\n};\n</script>\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(\n        value,\n        (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v),\n        2,\n      );\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=0047ad3a\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Spend coins</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <button @click=\"() => { spendPromise = spend(); }\">\n      Spend\n    </button>\n    <div v-if=\"spendPromise\">\n      <div>Spend result</div>\n      <Value :value=\"spendPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    spendPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    spend() {\n      return this.aeSdk.spend(this.spendAmount, this.spendTo, {\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n    },\n  },\n};\n</script>\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, duration);\n});\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV], index: number, array: Array<[string, InputV]>\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer => (\n    Buffer.concat(list.map((el) => Buffer.from(el)), totalLength)\n  )\n  : Buffer.concat;\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(([\n      'apply', 'construct', 'defineProperty', 'deleteProperty', 'getOwnPropertyDescriptor',\n      'getPrototypeOf', 'isExtensible', 'ownKeys', 'preventExtensions', 'set', 'setPrototypeOf',\n      'get', 'has',\n    ] as const).map((name) => [name, (t: {}, ...args: unknown[]) => {\n      if (name === 'get' && args[0] === '_wrappedValue') return valueCb();\n      const target = valueCb() as object; // to get a native exception in case it missed\n      const res = (Reflect[name] as any)(target, ...args);\n      return typeof res === 'function' && name === 'get'\n        ? res.bind(target) // otherwise it fails with attempted to get private field on non-instance\n        : res;\n    }])),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return error instanceof RestError && error.statusCode === 404\n    && error.message.includes('Account not found');\n}\n\n// based on https://stackoverflow.com/a/50375286/6176994\nexport type UnionToIntersection<Union> =\n  (Union extends any ? (k: Union) => void : never) extends ((k: infer Intersection) => void)\n    ? Intersection : never;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import { encode as bs58Encode, decode as bs58Decode } from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport {\n  DecodeError,\n  ArgumentError,\n  InvalidChecksumError,\n  PayloadLengthError,\n} from './errors';\nimport { concatBuffers, isKeyOfObject } from './other';\nimport * as Encoded from './encoder-types';\nimport { Encoding } from './encoder-types';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58Encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58Decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError('prefix', `one of ${[...base58Types, ...base64Types].join(', ')}`, maybeType);\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(\n  data: Uint8Array,\n  type: Type,\n): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import { render } from \"./SpendCoins.vue?vue&type=template&id=6217803d\"\nimport script from \"./SpendCoins.vue?vue&type=script&lang=js\"\nexport * from \"./SpendCoins.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <FieldAction\n    title=\"Sign a message\"\n    arg-title=\"Message to sign\"\n    arg-placeholder=\"I want to <action name> at <time> on <network name>\"\n    action-title=\"Sign message\"\n    :action-handler=\"messageSign\"\n    result-title=\"Message sign result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './FieldAction.vue';\n\nexport default {\n  components: { FieldAction },\n  computed: mapState(['aeSdk']),\n  methods: {\n    messageSign(messageToSign) {\n      return this.aeSdk.signMessage(messageToSign);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>{{ title }}</h2>\n  <div class=\"group\">\n    <div v-if=\"argTitle\">\n      <div>{{ argTitle }}</div>\n      <div>\n        <input\n          v-model=\"argValue\"\n          :placeholder=\"argPlaceholder\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { promise = actionHandler(argValue); }\">\n      {{ actionTitle }}\n    </button>\n    <div v-if=\"promise\">\n      <div>{{ resultTitle }}</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  props: {\n    title: { type: String, required: true },\n    argTitle: { type: String, required: false },\n    argPlaceholder: { type: String, required: false },\n    argDefaultValue: { type: String, required: false },\n    actionTitle: { type: String, required: true },\n    actionHandler: { type: Function, required: true },\n    resultTitle: { type: String, required: true },\n  },\n  data() {\n    return {\n      argValue: this.argDefaultValue,\n      promise: null,\n    };\n  },\n};\n</script>\n","import { render } from \"./FieldAction.vue?vue&type=template&id=7b236a56\"\nimport script from \"./FieldAction.vue?vue&type=script&lang=js\"\nexport * from \"./FieldAction.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./MessageSign.vue?vue&type=template&id=2b567dd0\"\nimport script from \"./MessageSign.vue?vue&type=script&lang=js\"\nexport * from \"./MessageSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Basic.vue?vue&type=template&id=4d43cf2d\"\nimport script from \"./Basic.vue?vue&type=script&lang=js\"\nexport * from \"./Basic.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Contract Instance</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract Source Code</div>\n      <div>\n        <textarea\n          v-model=\"contractSourceCode\"\n          placeholder=\"Contact source code\"\n        />\n      </div>\n    </div>\n    <button @click=\"() => { createPromise = create(); }\">\n      Create\n    </button>\n    <div v-if=\"createPromise\">\n      <div>Contract Instance</div>\n      <Value :value=\"createPromise.then(() => 'Ready')\" />\n    </div>\n  </div>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Compile Contract\"\n      action-title=\"Compile\"\n      :action-handler=\"compile\"\n      result-title=\"Bytecode\"\n    />\n  </template>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Deploy Contract\"\n      arg-title=\"Deploy argument\"\n      arg-placeholder=\"Deploy argument\"\n      arg-default-value=\"5\"\n      action-title=\"Deploy\"\n      :action-handler=\"deploy\"\n      result-title=\"Deployed Contract\"\n    />\n  </template>\n\n  <template v-if=\"deployPromise\">\n    <FieldAction\n      title=\"Call Contract on chain\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"7\"\n      action-title=\"Call\"\n      :action-handler=\"callOnChain\"\n      result-title=\"Call Result\"\n    />\n\n    <FieldAction\n      title=\"Call Contract using dry-run (static)\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"8\"\n      action-title=\"Call\"\n      :action-handler=\"callStatic\"\n      result-title=\"Call Result\"\n    />\n  </template>\n</template>\n\n<script>\nimport { shallowRef } from 'vue';\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nconst contractSourceCode = `\ncontract Multiplier =\n  record state = { factor: int }\n\n  entrypoint init(f : int) = { factor = f }\n\n  stateful entrypoint setFactor(f : int) =\n    put(state{ factor = f })\n\n  entrypoint multiplyByFactor(x : int) =\n    x * state.factor\n`.trim();\n\nexport default {\n  components: { Value, FieldAction },\n  data: () => ({\n    contractSourceCode,\n    createPromise: null,\n    contract: null,\n    deployPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async create() {\n      // Contract instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n      this.contract = shallowRef(\n        await this.aeSdk.initializeContract({ sourceCode: this.contractSourceCode }),\n      );\n    },\n    async compile() {\n      return this.contract.$compile();\n    },\n    async deploy(arg) {\n      this.deployPromise = this.contract.$deploy([arg]);\n      return this.deployPromise;\n    },\n    async callOnChain(arg) {\n      return this.contract.setFactor(arg);\n    },\n    async callStatic(arg) {\n      return this.contract.multiplyByFactor(arg);\n    },\n  },\n};\n</script>\n","import { render } from \"./Contracts.vue?vue&type=template&id=c036283c\"\nimport script from \"./Contracts.vue?vue&type=script&lang=js\"\nexport * from \"./Contracts.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <GenerateSpendTx />\n\n  <FieldAction\n    title=\"Sign inner transaction\"\n    arg-title=\"Transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Sign\"\n    :action-handler=\"signInnerTx\"\n    result-title=\"Signed inner transaction\"\n  />\n\n  <FieldAction\n    title=\"Pay for transaction\"\n    arg-title=\"Signed inner transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Pay for transaction\"\n    :action-handler=\"payForTx\"\n    result-title=\"Result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './components/FieldAction.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport GenerateSpendTx from './components/GenerateSpendTx.vue';\n\nexport default {\n  components: {\n    FieldAction, SpendCoins, MessageSign, GenerateSpendTx,\n  },\n  computed: mapState(['aeSdk']),\n  methods: {\n    signInnerTx(txToPayFor) {\n      return this.aeSdk.signTransaction(txToPayFor, { innerTx: true });\n    },\n    payForTx(innerTx) {\n      return this.aeSdk.payForTransaction(innerTx);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>Generate spend transaction</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input\n          v-model=\"spendTo\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\"></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\"></div>\n    </div>\n    <div>\n      <div>Increment nonce by 1</div>\n      <div>\n        <input\n          type=\"checkbox\"\n          v-model=\"incrementNonce\"\n        >\n        (only if you want to pay for this transaction yourself)\n      </div>\n    </div>\n    <button @click=\"() => { generatePromise = generate(); }\">\n      Generate\n    </button>\n    <div v-if=\"generatePromise\">\n      <div>Spend transaction</div>\n      <Value :value=\"generatePromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport {\n  encode, Encoding, Tag, unpackTx, buildTx,\n} from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    incrementNonce: true,\n    generatePromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async generate() {\n      let spendTx = await this.aeSdk.buildTx({\n        tag: Tag.SpendTx,\n        senderId: this.aeSdk.address,\n        recipientId: this.spendTo,\n        amount: this.spendAmount,\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n      if (this.incrementNonce) {\n        const spendTxParams = unpackTx(spendTx);\n        spendTxParams.nonce += 1;\n        spendTx = buildTx(spendTxParams);\n      }\n      return spendTx;\n    },\n  },\n};\n</script>\n","import BigNumber from 'bignumber.js';\nimport { mapObject } from '../../utils/other';\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9;\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject({\n  31: 3,\n  30: 5,\n  29: 8,\n  28: 13,\n  27: 21,\n  26: 34,\n  25: 55,\n  24: 89,\n  23: 144,\n  22: 233,\n  21: 377,\n  20: 610,\n  19: 987,\n  18: 1597,\n  17: 2584,\n  16: 4181,\n  15: 6765,\n  14: 10946,\n  13: 17711,\n  12: 28657,\n  11: 46368,\n  10: 75025,\n  9: 121393,\n  8: 196418,\n  7: 317811,\n  6: 514229,\n  5: 832040,\n  4: 1346269,\n  3: 2178309,\n  2: 3524578,\n  1: 5702887,\n}, ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)]);\n\nexport enum ConsensusProtocolVersion {\n  Iris = 5,\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  Account = 10,\n  SignedTx = 11,\n  SpendTx = 12,\n  Oracle = 20,\n  // OracleQuery = 21,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  Name = 30,\n  // NameCommitment = 31,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  // ChannelSetDelegatesTx = 501,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  ChannelClientReconnectTx = 575,\n  Channel = 58,\n  ChannelSnapshotSoloTx = 59,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n  GaMetaTxAuthData = 810,\n  // KeyBlock = 100,\n  // MicroBlock = 101,\n  // LightMicroBlock = 102,\n  // Pof = 200,\n}\n","import nacl, { SignKeyPair } from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './encoder';\nimport { ArgumentError } from './errors';\n\n/**\n * Generate address from secret key\n * @param secret - Private key as hex string\n * @returns Public key encoded as address\n */\nexport function getAddressFromPriv(secret: string | Uint8Array): Encoded.AccountAddress {\n  const secretBuffer = typeof secret === 'string' ? Buffer.from(secret, 'hex') : secret;\n  const keys = nacl.sign.keyPair.fromSecretKey(secretBuffer);\n  return encode(keys.publicKey, Encoding.AccountAddress);\n}\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n// KEY-PAIR HELPERS\n\n/**\n * Generate keyPair from secret key\n * @param secret - secret key\n * @returns Object with Private(privateKey) and Public(publicKey) keys\n */\nexport function generateKeyPairFromSecret(secret: Uint8Array): SignKeyPair {\n  return nacl.sign.keyPair.fromSecretKey(secret);\n}\n\n/**\n * Generate a random ED25519 keypair\n * @param raw - Whether to return raw (binary) keys\n * @returns Key pair\n */\nexport function generateKeyPair(raw: true): { publicKey: Buffer; secretKey: Buffer };\nexport function generateKeyPair(raw?: false): {\n  publicKey: Encoded.AccountAddress; secretKey: string;\n};\nexport function generateKeyPair(raw = false): {\n  publicKey: Encoded.AccountAddress | Buffer;\n  secretKey: string | Buffer;\n} {\n  const keyPair = nacl.sign.keyPair();\n  const publicBuffer = Buffer.from(keyPair.publicKey);\n  const secretBuffer = Buffer.from(keyPair.secretKey);\n\n  if (raw) {\n    return {\n      publicKey: publicBuffer,\n      secretKey: secretBuffer,\n    };\n  }\n  return {\n    publicKey: encode(publicBuffer, Encoding.AccountAddress),\n    secretKey: secretBuffer.toString('hex'),\n  };\n}\n\n// SIGNATURES\n\n/**\n * Generate signature\n * @param data - Data to sign\n * @param privateKey - Key to sign with\n * @returns Signature\n */\nexport function sign(data: string | Uint8Array, privateKey: string | Uint8Array): Uint8Array {\n  return nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey));\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length);\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length), msg]));\n}\n\nexport function signMessage(message: string, privateKey: string | Buffer): Uint8Array {\n  return sign(messageToHash(message), privateKey);\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n\n/**\n * Check key pair for validity\n *\n * Signs a message, and then verifies that signature\n * @param privateKey - Private key to verify\n * @param publicKey - Public key to verify as hex string\n * @returns Valid?\n */\nexport function isValidKeypair(\n  privateKey: string | Uint8Array,\n  publicKey: string | Uint8Array,\n): boolean {\n  const message = Buffer.from('TheMessage');\n  const signature = sign(message, privateKey);\n  const publicKeyBuffer = typeof publicKey === 'string' ? Buffer.from(publicKey, 'hex') : publicKey;\n  return verify(message, signature, encode(publicKeyBuffer, Encoding.AccountAddress));\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { Tag } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genEntryField<T extends Tag = Tag>(tag?: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...tag != null && { tag } }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      const tx = unpackTx(encode(buf, Encoding.Transaction));\n      if (tag != null && tx.tag !== tag) throw new ArgumentError('Tag', Tag[tag], Tag[tx.tag]);\n      return tx;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(\n  itemHandler: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: readonly Input[], params: unknown) => Binary[];\n    deserialize: (value: Binary[], params: unknown) => Output[];\n  } {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport {\n  encode, Encoding, Encoded, decode,\n} from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nexport default function genMapField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { buildTx }) {\n      return decode(buildTx({\n        tag: Tag.Mtree,\n        values: Object.entries(object).map(([key, value]) => ({\n          tag: Tag.MtreeValue,\n          key: decode(key as Encoded.Generic<E>),\n          value: decode(buildTx({ ...value as any, tag })),\n        })),\n      }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      const { values } = unpackTx(encode(buffer, Encoding.Transaction), Tag.Mtree);\n      return Object.fromEntries(values\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n        .map(({ key, value }) => [\n          encode(key, encoding),\n          unpackTx(encode(value, Encoding.Transaction), tag),\n        ])) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import BigNumber from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { toBytes } from '../../utils/bytes';\nimport { concatBuffers } from '../../utils/other';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants';\nimport { ceil } from '../../utils/bignumber';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(\n    Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]),\n  );\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(\n  name: AensName,\n  salt: number = genSalt(),\n): Encoded.Commitment {\n  return encode(\n    hash(concatBuffers([\n      Buffer.from(nameToPunycode(name)),\n      Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n    ])),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<typeof encodingToPointerKey[number][0]>,\n): typeof encodingToPointerKey[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  { startFee, increment = NAME_FEE_BID_INCREMENT }:\n  { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0)) throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT) throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name))\n      .times(new BigNumber(NAME_FEE_BID_INCREMENT).plus(1)),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h = (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null)\n    ?? 0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers';\nimport { Int } from '../constants';\nimport { ArgumentError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","import uInt from './u-int';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n    serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  } {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors';\nimport shortUInt from './short-u-int';\n\nexport default function genShortUIntConstField<\n  Value extends number, Optional extends boolean = false,\n>(constValue: Value, optional?: Optional): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { isItemOfArray } from '../../../utils/other';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = typeof idTagToEncoding[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n    serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n  } {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n    serialize: Optional extends true\n      ? (value?: Encoded.Generic<E>) => Buffer : (value: Encoded.Generic<E>) => Buffer;\n    deserialize: (value: Buffer) => Encoded.Generic<E>;\n  } {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport BigNumber from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return ['number', 'object', 'string'].includes(typeof number)\n    // eslint-disable-next-line no-restricted-globals\n    && (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number));\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber => bigNumber\n  .integerValue(BigNumber.ROUND_CEIL);\n","import BigNumber from 'bignumber.js';\nimport { isBigNumber } from './bignumber';\nimport { ArgumentError } from './errors';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS, targetDenomination = AE_AMOUNT_FORMATS.AETTOS }:\n  { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix => prefixes.reduce((p, n) => (\n  Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p));\n\nconst getLowerBoundPrefix = (exponent: number): Prefix => prefixes\n  .find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int';\nimport { Int } from '../constants';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n      ),\n    );\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag } from '../constants';\nimport coinAmount from './coin-amount';\nimport { isKeyOfObject } from '../../../utils/other';\nimport { decode, Encoded } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the Base fee gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base fee\n * @example\n * ```js\n * TX_FEE_BASE('channelForceProgress') => new BigNumber(30 * 15000)\n * ```\n */\nconst TX_FEE_BASE_GAS = (txType: Tag): BigNumber => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ChannelOffChainUpdateCallContract]: 0,\n    [Tag.ChannelOffChainUpdateCreateContract]: 0,\n    [Tag.ChannelOffChainUpdateDeposit]: 0,\n    [Tag.ChannelOffChainUpdateWithdraw]: 0,\n    [Tag.ChannelOffChainUpdateTransfer]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return new BigNumber(factor * BASE_GAS);\n};\n\n/**\n * Calculate fee for Other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The Other fee\n * @example\n * ```js\n * TX_FEE_OTHER_GAS('oracleResponse',10, { relativeTtl: 10, innerTxSize: 10 })\n *  => new BigNumber(10).times(20).plus(Math.ceil(32000 * 10 / Math.floor(60 * 24 * 365 / 2)))\n * ```\n */\nconst TX_FEE_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): BigNumber => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return new BigNumber(txSize)\n        .times(GAS_PER_BYTE)\n        .plus(\n          Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL)),\n        );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return new BigNumber(txSize).minus(innerTxSize).times(GAS_PER_BYTE);\n    default:\n      return new BigNumber(txSize).times(GAS_PER_BYTE);\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate fee based on tx type and params\n */\nexport function buildFee(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return TX_FEE_BASE_GAS(txObject.tag)\n    .plus(TX_FEE_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject), innerTxSize,\n    }))\n    .times(MIN_GAS_PRICE);\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = buildFee(rebuildTx(fee), unpackTx, buildTx);\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    {\n      rebuildTx, unpackTx, buildTx, _computingMinFee, _pickBiggerFee,\n    }: {\n      rebuildTx: (params: any) => Encoded.Transaction;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingMinFee?: BigNumber;\n      _pickBiggerFee?: boolean;\n    },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value = new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_pickBiggerFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n};\n","import shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    { onNode, absoluteTtl }: { onNode?: Node; absoluteTtl?: boolean },\n  ) {\n    if (absoluteTtl !== true && value !== 0 && value != null) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value += (await onNode.getCurrentKeyBlock()).height;\n    }\n    return value;\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other';\nimport shortUInt from './short-u-int';\nimport Node from '../../../Node';\nimport { ArgumentError } from '../../../utils/errors';\nimport { NextNonceStrategy } from '../../../apis/node';\n\nexport default function genNonceField<SenderKey extends string>(senderKey: SenderKey): {\n  serialize: (value: number) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & { strategy?: NextNonceStrategy; onNode?: Node },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode.getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport { Encoded } from '../../../utils/encoder';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n\n    return pointers.map(\n      (pointer) => [toBytes(pointer.key), addressAny.serialize(pointer.id)],\n    );\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(\n      ([key, id]) => ({ key: key.toString(), id: addressAny.deserialize(id) }),\n    );\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field';\nimport { AensName } from '../constants';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import BigNumber from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers';\nimport { InsufficientNameFeeError } from '../../../utils/errors';\nimport coinAmount from './coin-amount';\nimport { AensName, Int } from '../constants';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(\n    _value: string | undefined,\n    txFields: { name: AensName },\n  ): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<typeof coinAmount['serialize']>[1],\n    parameters: Parameters<typeof coinAmount['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants';\nimport { produceNameId, isNameValid } from '../helpers';\nimport address from './address';\nimport { Encoded, Encoding } from '../../../utils/encoder';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { NamePointer as NamePointerString } from '../../../apis/node';\nimport { toBytes } from '../../../utils/bytes';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\nimport { isAddressValid } from '../../../utils/crypto';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors';\nimport address, { AddressEncodings, idTagToEncoding } from './address';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default {\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers: NamePointer[]): Buffer[][] {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(`Expected 32 pointers or less, got ${pointers.length} instead`);\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) payload = [ID_TAG, addressAny.serialize(id)];\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError('Raw pointer', `shorter than ${DATA_LENGTH_MAX + 1} bytes`, `${data.length} bytes`);\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers: Array<[key: Buffer, id: Buffer]>): NamePointer[] {\n    return pointers.map(([bKey, bId]) => {\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray);\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n};\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants';\nimport Node from '../../../Node';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Iris]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate2], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate, AbiVersion.Sophia],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3], abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [], abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [], abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE, Tag, MAX_AUTH_FUN_GAS } from '../constants';\nimport shortUInt from './short-u-int';\nimport { buildFee } from './fee';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildFee(rebuildTx(gasMax), unpackTx, buildTx).dividedBy(MIN_GAS_PRICE);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag, rebuildTx, unpackTx, buildTx, _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax = tag === Tag.GaMetaTx ? MAX_AUTH_FUN_GAS : calculateGasLimitMax(\n      gasMax,\n      (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _pickBiggerFee: true }),\n      unpackTx,\n      buildTx,\n    );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","import coinAmount from './coin-amount';\nimport { IllegalArgumentError } from '../../../utils/errors';\nimport { MIN_GAS_PRICE } from '../constants';\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(`Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`);\n    }\n    return value;\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants';\nimport { getProtocolDetails } from './ct-version';\nimport Node from '../../../Node';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind = Tag.ContractCallTx === tag || Tag.GaMetaTx === tag\n      ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    { consensusProtocolVersion = ConsensusProtocolVersion.Iris }:\n    { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { ArgumentError } from '../../../utils/errors';\nimport { isItemOfArray } from '../../../utils/other';\n\nexport default function genEnumerationField<\n  Enum extends { [key: string]: number | string },\n>(enm: Enum): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { toBytes } from '../../../utils/bytes';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import coinAmount from './coin-amount';\nimport { Int } from '../constants';\nimport Node from '../../../Node';\nimport { Encoded } from '../../../utils/encoder';\nimport { ArgumentError } from '../../../utils/errors';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { Tag } from '../constants';\nimport { hash } from '../../../utils/crypto';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../../../utils/encoder';\nimport type { unpackTx } from '..';\nimport type { TxUnpacked } from '../schema.generated';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends Tag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackTx: typeof unpackTx;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpTx - Implementation of unpackTx use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpTx: typeof unpackTx) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackTx = unpTx;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(\n      binary[1].map((node) => [node[0].toString('hex'), node[1]]),\n    );\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError('Can\\'t find a node by root hash');\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError('Can\\'t find a node by hash in extension node');\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...node[16].length !== 0 && { value: node[16] },\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...type === NodeType.Leaf && { value: node[1] },\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => ([\n        Buffer.from(mptHash, 'hex'),\n        value,\n      ])),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) { // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): TxUnpacked & { tag: T } | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackTx(encode(d, Encoding.Transaction), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError('Can\\'t find node in complete tree');\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, TxUnpacked & { tag: T }> {\n    return Object.fromEntries(this.#entriesRaw()\n      // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n      .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n      .map(([k, v]) => [\n        encode(Buffer.from(k, 'hex'), this.#encoding),\n        this.#unpackTx(encode(v, Encoding.Transaction), this.#tag),\n      ])) as Record<Encoded.Generic<E>, TxUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends Tag>(encoding: E, tag: T): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackTx: typeof unpackTx }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackTx }) {\n      return new MPTree(value, encoding, tag, unpackTx);\n    },\n  };\n}\n","import { Tag } from '../constants';\nimport { encode, Encoding, decode } from '../../../utils/encoder';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index';\n\ntype TagWrapping = Tag.AccountsMtree | Tag.CallsMtree | Tag.ChannelsMtree | Tag.ContractsMtree\n| Tag.NameserviceMtree | Tag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(tag: T): {\n  serialize: (\n    // TODO: replace with `(TxParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any, options: { buildTx: typeof buildTxType }\n  ) => Buffer;\n  deserialize: (\n    value: Buffer, options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `(TxUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { buildTx }) {\n      return decode(buildTx({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackTx }) {\n      return unpackTx<TagWrapping>(encode(buffer, Encoding.Transaction), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants';\nimport SchemaTypes from './SchemaTypes';\nimport {\n  uInt, shortUInt, coinAmount, name, nameId, nameFee, gasLimit, gasPrice, fee, address, pointers,\n  pointers2, queryFee, entry, enumeration, mptree, shortUIntConst, string, encoded, raw,\n  array, boolean, ctVersion, abiVersion, ttl, nonce, map, withDefault, withFormatting, wrapped,\n} from './field-types';\nimport { Encoded, Encoding } from '../../utils/encoder';\nimport { ArgumentError } from '../../utils/errors';\nimport { idTagToEncoding } from './field-types/address';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// # CONTRACT\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface EntryAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst entryAny = entry() as unknown as EntryAny;\n\ninterface EntrySignedTx {\n  serialize: (value: TxParams & { tag: Tag.SignedTx } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst entrySignedTx = entry(Tag.SignedTx) as unknown as EntrySignedTx;\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<TxParams & { tag: Tag.MtreeValue } | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<TxUnpacked & { tag: Tag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(Tag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface EntryTreesPoi {\n  serialize: (value: TxParams & { tag: Tag.TreesPoi } | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(Tag.TreesPoi) as unknown as EntryTreesPoi;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, TxParams & { tag: Tag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, TxUnpacked & { tag: Tag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, Tag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, TxParams & { tag: Tag.Account }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.AccountAddress, TxUnpacked & { tag: Tag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, Tag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, TxParams & { tag: Tag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Bytearray, TxUnpacked & { tag: Tag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, Tag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (\n    value: Record<Encoded.Channel, TxParams & { tag: Tag.Channel }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, TxUnpacked & { tag: Tag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, Tag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (\n    value: Record<Encoded.Name, TxParams & { tag: Tag.Name }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, TxUnpacked & { tag: Tag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, Tag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (\n    value: Record<Encoded.OracleAddress, TxParams & { tag: Tag.Oracle }>,\n  ) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.OracleAddress, TxUnpacked & { tag: Tag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, Tag.Oracle) as unknown as MapOracles;\n\n// TODO: inline after dropping Iris compatibility\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\nconst nameTtl = withFormatting(\n  (value) => {\n    const NAME_TTL = 180000;\n    value ??= NAME_TTL;\n    if (value >= 1 && value <= NAME_TTL) return value;\n    throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n  },\n  shortUInt,\n);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [{\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(1),\n  nonce: shortUInt,\n  balance: uInt,\n}, {\n  tag: shortUIntConst(Tag.Account),\n  version: shortUIntConst(2, true),\n  flags: uInt,\n  nonce: shortUInt,\n  balance: uInt,\n  gaContract: address(Encoding.ContractAddress, Encoding.Name),\n  gaAuthFun: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.SignedTx),\n  version: shortUIntConst(1, true),\n  signatures: array(raw),\n  encodedTx: entryAny,\n}, {\n  tag: shortUIntConst(Tag.SpendTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  amount: coinAmount,\n  fee,\n  ttl,\n  nonce: nonce('senderId'),\n  payload: encoded(Encoding.Bytearray, true),\n}, {\n  tag: shortUIntConst(Tag.Name),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nameTtl: shortUInt,\n  status: raw,\n  clientTtl: shortUInt,\n  pointers,\n}, {\n  tag: shortUIntConst(Tag.NamePreclaimTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  commitmentId: address(Encoding.Commitment),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameClaimTx),\n  version: shortUIntConst(2, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  name,\n  nameSalt: uInt,\n  nameFee,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameUpdateTx),\n  version: shortUIntConst(2),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  nameTtl,\n  pointers: pointers2,\n  clientTtl,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameTransferTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  // TODO: accept also an AENS name\n  recipientId: address(Encoding.AccountAddress, Encoding.Name),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.NameRevokeTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  nameId,\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.Contract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  log: encoded(Encoding.ContractBytearray),\n  active: boolean,\n  referers: array(address(Encoding.AccountAddress)),\n  deposit: coinAmount,\n}, {\n  tag: shortUIntConst(Tag.ContractCreateTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  ctVersion,\n  fee,\n  ttl,\n  deposit: withFormatting(\n    (value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    },\n    coinAmount,\n  ),\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCallTx),\n  version: shortUIntConst(1, true),\n  callerId: address(Encoding.AccountAddress),\n  nonce: nonce('callerId'),\n  // TODO: accept also an AENS name\n  contractId: address(Encoding.ContractAddress, Encoding.Name),\n  abiVersion,\n  fee,\n  ttl,\n  amount: coinAmount,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ContractCall),\n  version: shortUIntConst(2, true),\n  callerId: address(Encoding.AccountAddress),\n  callerNonce: shortUInt,\n  height: shortUInt,\n  contractId: address(Encoding.ContractAddress),\n  // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n  gasPrice: uInt,\n  gasUsed: shortUInt,\n  returnValue: encoded(Encoding.ContractBytearray),\n  returnType: enumeration(CallReturnType),\n  // TODO: add serialization for\n  //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n  log: array(raw),\n}, {\n  tag: shortUIntConst(Tag.Oracle),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlValue: shortUInt,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleRegisterTx),\n  version: shortUIntConst(1, true),\n  accountId: address(Encoding.AccountAddress),\n  nonce: nonce('accountId'),\n  queryFormat: string,\n  responseFormat: string,\n  queryFee: coinAmount,\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n  abiVersion,\n}, {\n  tag: shortUIntConst(Tag.OracleExtendTx),\n  version: shortUIntConst(1, true),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  nonce: nonce('oracleId'),\n  oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  oracleTtlValue: withDefault(500, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleQueryTx),\n  version: shortUIntConst(1, true),\n  senderId: address(Encoding.AccountAddress),\n  nonce: nonce('senderId'),\n  // TODO: accept also an AENS name\n  oracleId: address(Encoding.OracleAddress, Encoding.Name),\n  query: string,\n  queryFee,\n  queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  queryTtlValue: withDefault(10, shortUInt),\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.OracleResponseTx),\n  version: shortUIntConst(1, true),\n  oracleId: address(Encoding.OracleAddress),\n  nonce: nonce('oracleId'),\n  queryId: encoded(Encoding.OracleQueryId),\n  response: string,\n  responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n  responseTtlValue: withDefault(10, shortUInt),\n  fee,\n  ttl,\n}, {\n  tag: shortUIntConst(Tag.ChannelCreateTx),\n  version: shortUIntConst(2, true),\n  initiator: address(Encoding.AccountAddress),\n  initiatorAmount: uInt,\n  responder: address(Encoding.AccountAddress),\n  responderAmount: uInt,\n  channelReserve: uInt,\n  lockPeriod: uInt,\n  ttl,\n  fee,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  nonce: nonce('initiator'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSlashTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  poi: entryTreesPoi,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelDepositTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelWithdrawTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  toId: address(Encoding.AccountAddress),\n  amount: uInt,\n  ttl,\n  fee,\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelSettleTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  initiatorAmountFinal: uInt,\n  responderAmountFinal: uInt,\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelForceProgressTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  round: shortUInt,\n  update: encoded(Encoding.ContractBytearray),\n  stateHash: encoded(Encoding.State),\n  offChainTrees: encoded(Encoding.StateTrees),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainTx),\n  version: shortUIntConst(2, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  stateHash: encoded(Encoding.State),\n}, {\n  tag: shortUIntConst(Tag.Channel),\n  version: shortUIntConst(3, true),\n  initiator: address(Encoding.AccountAddress),\n  responder: address(Encoding.AccountAddress),\n  channelAmount: uInt,\n  initiatorAmount: uInt,\n  responderAmount: uInt,\n  channelReserve: uInt,\n  initiatorDelegateIds: array(address(...idTagToEncoding)),\n  responderDelegateIds: array(address(...idTagToEncoding)),\n  stateHash: encoded(Encoding.State),\n  round: shortUInt,\n  soloRound: uInt,\n  lockPeriod: uInt,\n  lockedUntil: uInt,\n  initiatorAuth: encoded(Encoding.ContractBytearray),\n  responderAuth: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  fromId: address(Encoding.AccountAddress),\n  payload: encoded(Encoding.Transaction),\n  ttl,\n  fee,\n  nonce: nonce('fromId'),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateTransfer),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  to: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateDeposit),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateWithdraw),\n  version: shortUIntConst(1, true),\n  from: address(Encoding.AccountAddress),\n  amount: uInt,\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCreateContract),\n  version: shortUIntConst(1, true),\n  owner: address(Encoding.AccountAddress),\n  ctVersion,\n  code: encoded(Encoding.ContractBytearray),\n  deposit: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.ChannelOffChainUpdateCallContract),\n  version: shortUIntConst(1, true),\n  caller: address(Encoding.AccountAddress),\n  contract: address(Encoding.ContractAddress),\n  abiVersion,\n  amount: uInt,\n  callData: encoded(Encoding.ContractBytearray),\n  callStack: raw,\n  gasPrice,\n  gasLimit,\n}, {\n  tag: shortUIntConst(Tag.ChannelClientReconnectTx),\n  version: shortUIntConst(1, true),\n  channelId: address(Encoding.Channel),\n  round: shortUInt,\n  role: string,\n  pubkey: address(Encoding.AccountAddress),\n}, {\n  tag: shortUIntConst(Tag.TreesPoi),\n  version: shortUIntConst(1, true),\n  // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n  accounts: array(mptree(Encoding.AccountAddress, Tag.Account)),\n  calls: array(mptree(Encoding.Bytearray, Tag.ContractCall)),\n  channels: array(mptree(Encoding.Channel, Tag.Channel)),\n  contracts: array(mptree(Encoding.ContractAddress, Tag.Contract)),\n  ns: array(mptree(Encoding.Name, Tag.Name)),\n  oracles: array(mptree(Encoding.OracleAddress, Tag.Oracle)),\n}, {\n  tag: shortUIntConst(Tag.StateTrees),\n  version: shortUIntConst(0, true),\n  contracts: wrapped(Tag.ContractsMtree) as unknown as MapContracts,\n  calls: wrapped(Tag.CallsMtree) as unknown as MapCalls,\n  channels: wrapped(Tag.ChannelsMtree) as unknown as MapChannels,\n  ns: wrapped(Tag.NameserviceMtree) as unknown as MapNames,\n  oracles: wrapped(Tag.OraclesMtree) as unknown as MapOracles,\n  accounts: wrapped(Tag.AccountsMtree) as unknown as MapAccounts,\n}, {\n  tag: shortUIntConst(Tag.Mtree),\n  version: shortUIntConst(1, true),\n  values: entryMtreeValueArray,\n}, {\n  tag: shortUIntConst(Tag.MtreeValue),\n  version: shortUIntConst(1, true),\n  key: raw,\n  value: raw,\n}, {\n  tag: shortUIntConst(Tag.ContractsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapContracts,\n}, {\n  tag: shortUIntConst(Tag.CallsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapCalls,\n}, {\n  tag: shortUIntConst(Tag.ChannelsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapChannels,\n}, {\n  tag: shortUIntConst(Tag.NameserviceMtree),\n  version: shortUIntConst(1, true),\n  payload: mapNames,\n}, {\n  tag: shortUIntConst(Tag.OraclesMtree),\n  version: shortUIntConst(1, true),\n  payload: mapOracles,\n}, {\n  tag: shortUIntConst(Tag.AccountsMtree),\n  version: shortUIntConst(1, true),\n  payload: mapAccounts,\n}, {\n  tag: shortUIntConst(Tag.GaAttachTx),\n  version: shortUIntConst(1, true),\n  ownerId: address(Encoding.AccountAddress),\n  nonce: nonce('ownerId'),\n  code: encoded(Encoding.ContractBytearray),\n  authFun: raw,\n  ctVersion,\n  fee,\n  ttl,\n  gasLimit,\n  gasPrice,\n  callData: encoded(Encoding.ContractBytearray),\n}, {\n  tag: shortUIntConst(Tag.GaMetaTx),\n  version: shortUIntConst(2, true),\n  gaId: address(Encoding.AccountAddress),\n  authData: encoded(Encoding.ContractBytearray),\n  abiVersion,\n  fee,\n  gasLimit,\n  gasPrice,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.PayingForTx),\n  version: shortUIntConst(1, true),\n  payerId: address(Encoding.AccountAddress),\n  nonce: nonce('payerId'),\n  fee,\n  tx: entrySignedTx,\n}, {\n  tag: shortUIntConst(Tag.GaMetaTxAuthData),\n  version: shortUIntConst(1, true),\n  fee: coinAmount,\n  gasPrice,\n  txHash: encoded(Encoding.TxHash),\n}] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types';\nimport {\n  ArgumentError, DecodeError, SchemaNotFoundError, InternalError,\n} from '../../utils/errors';\nimport {\n  Encoding, Encoded, encode, decode,\n} from '../../utils/encoder';\nimport { readInt } from './helpers';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null) throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) => (\n    field.serialize(params[key], { ...params, ...extraParams }, params)\n  ));\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name, field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","import {\n  decode, encode, Encoded, Encoding,\n} from '../../utils/encoder';\nimport { hash } from '../../utils/crypto';\nimport { Field } from './field-types';\nimport { txSchema } from './schema';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated';\nimport { Tag } from './constants';\nimport { buildContractId } from './helpers';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common';\nimport { ArgumentError } from '../../utils/errors';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding = Encoding.Transaction | Encoding.Poi | Encoding.StateTrees\n| Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction;\n/**\n * Build node entry with a custom encoding\n * @param params - Entry params\n * @param options - Options\n * @param options.prefix - Output encoding\n */\nexport function buildTx<E extends TxEncoding>(\n  params: TxParams,\n  { prefix }: { prefix: E },\n): Encoded.Generic<E>;\nexport function buildTx(\n  params: TxParams,\n  { prefix }: { prefix?: TxEncoding } = {},\n): Encoded.Generic<TxEncoding> {\n  return packRecord(txSchema, Tag, params, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n    buildTx,\n    rebuildTx: (overrideParams: any) => buildTx(\n      { ...params, ...overrideParams },\n    ),\n  }, prefix ?? Encoding.Transaction);\n}\n\nexport type BuildTxOptions <TxType extends Tag, OmitFields extends string> =\n  Omit<TxParamsAsync & { tag: TxType }, 'tag' | OmitFields>;\n\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version)\n      .map(async ([key, field]) => {\n        if (field.prepare == null) return;\n        // @ts-expect-error the type of `params[key]` can't be determined accurately\n        params[key] = await field.prepare(params[key], params, params);\n      }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    unpackTx,\n  }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_')\n    ? decode(rawTx)\n    : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx or gaAttach\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  const params = unpackTx(contractTx);\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import { render } from \"./GenerateSpendTx.vue?vue&type=template&id=7508f59e\"\nimport script from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\nexport * from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./PayForTx.vue?vue&type=template&id=6b4a1008\"\nimport script from \"./PayForTx.vue?vue&type=script&lang=js\"\nexport * from \"./PayForTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Domain</h2>\n  <div class=\"group\">\n    <div>\n      <div>Name</div>\n      <div>\n        <input\n          :value=\"domain.name\"\n          @input=\"domain.name = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Version</div>\n      <div>\n        <input\n          :value=\"domain.version\"\n          @input=\"domain.version = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Network id</div>\n      <div>\n        <input\n          :value=\"domain.networkId\"\n          @input=\"domain.networkId = $event.target.value || null\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Contract address</div>\n      <div>\n        <input\n          :value=\"domain.contractAddress\"\n          @input=\"domain.contractAddress = $event.target.value || null\"\n        >\n      </div>\n    </div>\n  </div>\n\n  <h2>Data</h2>\n  <div class=\"group\">\n    <div>\n      <div>Type</div>\n      <div>\n        <textarea\n          v-model=\"aci\"\n          placeholder=\"Type as ACI JSON\"\n        />\n      </div>\n    </div>\n    <div>\n      <div>Data</div>\n      <div>\n        <textarea v-model=\"data\" />\n      </div>\n    </div>\n    <div>\n      <div>Encoded data</div>\n      <Value :value=\"toPromise(() => dataEncoded)\" />\n    </div>\n    <div>\n      <div>Hash</div>\n      <Value :value=\"toPromise(() => hash.toString('base64'))\" />\n    </div>\n  </div>\n\n  <FieldAction\n    title=\"Sign\"\n    action-title=\"Sign\"\n    :action-handler=\"signTypedData\"\n    result-title=\"Signature\"\n  />\n\n  <h2>Verify</h2>\n  <div class=\"group\">\n    <div>\n      <div>Signature</div>\n      <div>\n        <input\n          v-model=\"verifySignature\"\n          placeholder=\"sg-encoded\"\n        >\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input\n          v-model=\"verifyAddress\"\n          placeholder=\"ak_...\"\n        >\n      </div>\n    </div>\n    <button @click=\"() => { verifyPromise = verifyTypedData(); }\">\n      Verify\n    </button>\n    <div v-if=\"verifyPromise\">\n      <div>Is signature correct</div>\n      <Value :value=\"verifyPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { hashTypedData, verify, decode } from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nexport default {\n  components: {\n    Value, FieldAction,\n  },\n  data: () => ({\n    domain: {\n      name: 'Simple æpp',\n      version: 2,\n      networkId: 'ae_uat',\n      contractAddress: null,\n    },\n    aci: Value.methods.valueToString({\n      record: [\n        { name: 'operation', type: 'string' },\n        { name: 'parameter', type: 'int' },\n      ],\n    }),\n    data: Value.methods.valueToString({\n      operation: 'test',\n      parameter: 42,\n    }),\n    verifySignature: null,\n    verifyAddress: null,\n    verifyPromise: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    dataParsed() {\n      return JSON.parse(this.data);\n    },\n    aciParsed() {\n      return JSON.parse(this.aci);\n    },\n    dataEncoded() {\n      const dataType = new TypeResolver().resolveType(this.aciParsed);\n      return new ContractByteArrayEncoder().encodeWithType(this.dataParsed, dataType);\n    },\n    hash() {\n      return hashTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n  },\n  methods: {\n    async toPromise(getter) {\n      return getter();\n    },\n    signTypedData() {\n      return this.aeSdk.signTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n    async verifyTypedData() {\n      return verify(this.hash, decode(this.verifySignature), this.verifyAddress);\n    },\n  },\n};\n</script>\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder';\nimport { hash, messagePrefixLength } from './crypto';\nimport { concatBuffers } from './other';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue = 'void' | 'unit' | 'int' | 'bool' | 'string' | 'bits' | 'hash' | 'signature'\n| 'address' | 'contract_pubkey' | 'Chain.ttl' | 'Chain.ga_meta_tx' | 'Chain.paying_for_tx'\n| 'Chain.base_tx' | 'AENS.pointee' | 'AENS.name' | 'MCL_BLS12_381.fr' | 'MCL_BLS12_381.fp'\n| { 'Set.set': readonly [AciValue] }\n| { bytes: number }\n| { list: readonly [AciValue] }\n| { map: readonly [AciValue, AciValue] }\n| { tuple: readonly AciValue[] }\n| { record: ReadonlyArray<{ name: string; type: AciValue }> }\n| { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n| { option: readonly [AciValue] }\n| { oracle: readonly [AciValue, AciValue] }\n| { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [{\n      name: 'name',\n      type: { option: ['string'] },\n    }, {\n      name: 'version',\n      type: { option: ['int'] },\n    }, {\n      name: 'networkId',\n      type: { option: ['string'] },\n    }, {\n      name: 'contractAddress',\n      type: { option: ['contract_pubkey'] },\n    }],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(concatBuffers([\n    messagePrefixLength, new Uint8Array([0]), hashDomain(domain), hashJson(aci), hash(decode(data)),\n  ]));\n}\n","import { render } from \"./TypedData.vue?vue&type=template&id=6ad6adcf\"\nimport script from \"./TypedData.vue?vue&type=script&lang=js\"\nexport * from \"./TypedData.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign delegation to contract</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract address</div>\n      <div><input v-model=\"contractAddress\"></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensPreclaim\">\n        AENS preclaim\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.Oracle\">\n        Oracle\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensName\">\n        AENS name\n      </label>\n      <div><input v-model=\"name\"></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensWildcard\">\n        All AENS names\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.OracleResponse\">\n        Response to oracle query\n      </label>\n      <div><input v-model=\"oracleQueryId\"></div>\n    </div>\n    <button @click=\"() => { signPromise = sign(); }\">\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signature</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { DelegationTag } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    DelegationTag,\n    type: DelegationTag.AensPreclaim,\n    contractAddress: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    name: 'test.chain',\n    oracleQueryId: 'oq_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    signPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    sign() {\n      switch (this.type) {\n        case DelegationTag.AensPreclaim:\n          return this.aeSdk.signDelegationToContract(this.contractAddress, { isOracle: false });\n        case DelegationTag.Oracle:\n          return this.aeSdk.signDelegationToContract(this.contractAddress, { isOracle: true });\n        case DelegationTag.AensName:\n          return this.aeSdk.signNameDelegationToContract(this.contractAddress, this.name);\n        case DelegationTag.AensWildcard:\n          return this.aeSdk.signAllNamesDelegationToContract(this.contractAddress);\n        case DelegationTag.OracleResponse:\n          return this.aeSdk\n            .signOracleQueryDelegationToContract(this.contractAddress, this.oracleQueryId);\n        default:\n          throw new Error(`Unknown delegation signature type: ${DelegationTag[this.type]}`);\n      }\n    },\n  },\n};\n</script>\n","import SchemaTypes from '../SchemaTypes';\nimport { address, nameId, shortUIntConst } from '../field-types';\nimport {\n  Encoded, Encoding, decode, encode,\n} from '../../../utils/encoder';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  AensWildcard = 1,\n  AensName = 2,\n  AensPreclaim = 3,\n  Oracle = 4,\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [{\n  tag: shortUIntConst(DelegationTag.AensWildcard),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensName),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  nameId,\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.AensPreclaim),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.Oracle),\n  version: shortUIntConst(1, true),\n  accountAddress: address(Encoding.AccountAddress),\n  contractAddress: address(Encoding.ContractAddress),\n}, {\n  tag: shortUIntConst(DelegationTag.OracleResponse),\n  version: shortUIntConst(1, true),\n  queryId: queryIdField,\n  contractAddress: address(Encoding.ContractAddress),\n}] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { render } from \"./DelegationSignature.vue?vue&type=template&id=05c62b43\"\nimport script from \"./DelegationSignature.vue?vue&type=script&lang=js\"\nexport * from \"./DelegationSignature.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=73a5f0d8\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion: string,\n): boolean {\n  const getComponents = (v: string): number[] => v\n    .split(/[-+]/)[0].split('.').map((i) => +i);\n\n  const versionComponents = getComponents(version);\n  const geComponents = getComponents(geVersion);\n  const ltComponents = getComponents(ltVersion);\n\n  const base = Math.max(...versionComponents, ...geComponents, ...ltComponents) + 1;\n  const componentsToNumber = (components: number[]): number => components.reverse()\n    .reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  const vNumber = componentsToNumber(versionComponents);\n  const geNumber = componentsToNumber(geComponents);\n  const ltNumber = componentsToNumber(ltComponents);\n  return vNumber >= geNumber && vNumber < ltNumber;\n}\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport { AdditionalPolicyConfig } from '@azure/core-client';\nimport { pause } from './other';\nimport semverSatisfies from './semver-satisfies';\nimport { UnsupportedVersionError } from './errors';\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        // TODO: remove pause after fixing https://github.com/aeternity/aeternity/issues/3803\n        // gap to ensure that node won't reject the nonce\n        requestQueues.set(key, req.then(async () => pause(750), () => {}));\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (!(error instanceof RestError) || error.request == null) throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        let body;\n        try {\n          body = JSON.parse(error.response.bodyAsText);\n        } catch (e) {\n          body = null;\n        }\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  ignorePath: string,\n  versionPromise: Promise<string | Error>,\n  geVersion: string,\n  ltVersion: string,\n): PipelinePolicy => ({\n  name: 'version-check',\n  async sendRequest(request, next) {\n    if (new URL(request.url).pathname === ignorePath) return next(request);\n    const version = await versionPromise;\n    if (version instanceof Error) throw version;\n    const args = [version, geVersion, ltVersion] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n    return next(request);\n  },\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const statusesToNotRetry = [200, 400, 403, 410, 500];\n\n      const intervals = new Array(retryCount).fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  serializedName: \"Tx\",\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    uberParent: \"Tx\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\",\n    },\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        type: {\n          name: \"String\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasUsed: {\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      soloRound: {\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockedUntil: {\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      difficulty: {\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hashrate: {\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      effectiveAtHeight: {\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameFee: {\n        serializedName: \"name_fee\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelReserve: {\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lockPeriod: {\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmountFinal: {\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      firstSeen: {\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      lastSeen: {\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        serializedName: \"inbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n      outbound: {\n        serializedName: \"outbound\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        serializedName: \"verified\",\n        type: {\n          name: \"String\",\n        },\n      },\n      unverified: {\n        serializedName: \"unverified\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contracts: {\n        serializedName: \"contracts\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractOracles: {\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      locked: {\n        serializedName: \"locked\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracles: {\n        serializedName: \"oracles\",\n        type: {\n          name: \"String\",\n        },\n      },\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pendingRewards: {\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"String\",\n        },\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        serializedName: \"ttl\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        serializedName: \"nonce\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gas: {\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  \"Tx.Tx\": Tx,\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const intAsString: OperationQueryParameter = {\n  parameterPath: \"intAsString\",\n  mapper: {\n    defaultValue: false,\n    serializedName: \"int-as-string\",\n    type: {\n      name: \"Boolean\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  NodeOptionalParams,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n} from \"./models\";\n\nexport class Node extends coreClient.ServiceClient {\n  $host: string;\n  intAsString?: boolean;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Dry-run transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx and\n   * OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.height, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString, Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.intAsString,\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    queryParameters: [Parameters.intAsString],\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  queryParameters: [Parameters.intAsString],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BigNumber from 'bignumber.js';\nimport { OperationArguments, OperationSpec } from '@azure/core-client';\nimport {\n  genRequestQueuesPolicy, genCombineGetRequestsPolicy, genErrorFormatterPolicy,\n  genVersionCheckPolicy, genRetryOnFailurePolicy,\n} from './utils/autorest';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node';\nimport { mapObject } from './utils/other';\nimport { UnsupportedVersionError } from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { ConsensusProtocolVersion } from './tx/builder/constants';\n\nconst bigIntPropertyNames = [\n  'balance', 'queryFee', 'fee', 'amount', 'nameFee', 'channelAmount',\n  'initiatorAmount', 'responderAmount', 'channelReserve', 'initiatorAmountFinal',\n  'responderAmountFinal', 'gasPrice', 'deposit',\n] as const;\n\nconst numberPropertyNames = [\n  'time', 'gas', 'gasUsed', 'nameSalt',\n  'nonce', 'nextNonce', 'height', 'blockHeight', 'topBlockHeight',\n  'ttl', 'nameTtl', 'clientTtl',\n  'inbound', 'outbound', 'peerCount', 'pendingTransactionsCount', 'effectiveAtHeight',\n  'version', 'solutions', 'round',\n] as const;\n\nclass NodeTransformed extends NodeApi {\n  override async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<any> {\n    const args = mapObject(\n      operationArguments,\n      ([key, value]) => [key, this.#encodeArg(value)],\n    ) as OperationArguments;\n    return this.#decodeRes(await super.sendOperationRequest(args, operationSpec));\n  }\n\n  #mapData(data: any, transform: {\n    bigInt: (v: any) => any;\n    number: (v: any) => any;\n  }): unknown {\n    if (Array.isArray(data)) return data.map((d) => this.#mapData(d, transform));\n    if (data != null && typeof data === 'object') {\n      return mapObject(data, ([key, value]) => {\n        if (value == null) return [key, value];\n        if (bigIntPropertyNames.some((k) => k === key)) return [key, transform.bigInt(value)];\n        if (numberPropertyNames.some((k) => k === key)) return [key, transform.number(value)];\n        return [key, this.#mapData(value, transform)];\n      });\n    }\n    return data;\n  }\n\n  #encodeArg(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => {\n        if (value instanceof BigNumber) return value.toFixed();\n        return value.toString();\n      },\n      number: (value) => value.toString(),\n    });\n  }\n\n  #decodeRes(data: any): any {\n    return this.#mapData(data, {\n      bigInt: (value) => BigInt(value),\n      number: (value) => +value,\n    });\n  }\n}\n\ntype BigIntPropertyNames = typeof bigIntPropertyNames[number];\ntype NumberPropertyNames = typeof numberPropertyNames[number];\ntype PreserveOptional<NewType, OrigType> =\n  OrigType extends undefined ? NewType | undefined : NewType;\nexport type TransformNodeType<Type> =\n  Type extends (...args: infer Args) => infer Ret\n    ? (...args: TransformNodeType<Args>) => TransformNodeType<Ret>\n    : Type extends [infer Item, ...infer Rest]\n      ? [TransformNodeType<Item>, ...TransformNodeType<Rest>]\n      : Type extends Array<infer Item>\n        ? Array<TransformNodeType<Item>>\n        : Type extends Promise<infer T>\n          ? Promise<TransformNodeType<T>>\n          : Type extends { [P in any]: any }\n            ? {\n              [Property in keyof Type]:\n              Property extends BigIntPropertyNames\n                ? PreserveOptional<bigint, Type[Property]>\n                : Property extends NumberPropertyNames\n                  ? PreserveOptional<number, Type[Property]>\n                  : Property extends 'txHash'\n                    ? PreserveOptional<Encoded.TxHash, Type[Property]>\n                    : Property extends 'bytecode'\n                      ? PreserveOptional<Encoded.ContractBytearray, Type[Property]>\n                      : TransformNodeType<Type[Property]>\n            }\n            : Type;\ntype NodeTransformedApi = new (...args: ConstructorParameters<typeof NodeApi>) => {\n  [Name in keyof InstanceType<typeof NodeApi>]:\n  Name extends 'pipeline' | 'sendRequest' | 'sendOperationRequest'\n    ? NodeApi[Name] : TransformNodeType<NodeApi[Name]>\n};\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends (NodeTransformed as unknown as NodeTransformedApi) {\n  #networkIdPromise?: Promise<string | Error>;\n\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false, retryCount = 3, retryOverallDelay = 800, ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) => ` ${body.reason}`),\n      ],\n      ...options,\n    });\n    if (!ignoreVersion) {\n      const statusPromise = this.getStatus();\n      const versionPromise = statusPromise.then(({ nodeVersion }) => nodeVersion, (error) => error);\n      this.#networkIdPromise = statusPromise.then(({ networkId }) => networkId, (error) => error);\n      this.pipeline.addPolicy(\n        genVersionCheckPolicy('node', '/v3/status', versionPromise, '6.2.0', '7.0.0'),\n      );\n    }\n    this.intAsString = true;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    this.#networkIdPromise ??= this.getStatus().then(({ networkId }) => networkId);\n    const networkId = await this.#networkIdPromise;\n    if (networkId instanceof Error) throw networkId;\n    return networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce(\n        (acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc),\n        { effectiveAtHeight: -1, version: 0 },\n      )\n      .version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number').map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, getSchema, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null) throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { Encoded } from '../utils/encoder';\nimport Node from '../Node';\nimport CompilerBase from '../contract/compiler/Base';\nimport { AensName, ConsensusProtocolVersion, Int } from '../tx/builder/constants';\nimport { AciValue, Domain } from '../utils/typed-data';\nimport { NotImplementedError } from '../utils/errors';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signTypedData(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signTypedData method');\n  }\n\n  /**\n   * Sign delegation of AENS, oracle operations to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @param options.isOracle - Use to generate an oracle delegation signature in Ceres, otherwise an\n   * AENS preclaim delegation signature would be generated\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of an AENS name to a contract\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param name - AENS name to manage by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signNameDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signNameDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of all AENS names to a contract (not available in Iris)\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signAllNamesDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signAllNamesDelegationToContract method');\n  }\n\n  /**\n   * Sign delegation of oracle query to a contract\n   *\n   * Warning! Implementations needs to ensure that decoded oracle query id is not equal to decoded\n   * current account address unless https://github.com/aeternity/aesophia/issues/475 is fixed.\n   *\n   * Warning! Implementations needs to ensure that oracle query and contract exists unless\n   * https://github.com/aeternity/aesophia/issues/474 is fixed.\n   *\n   * @param contractAddress - Address of a contract to delegate permissions to\n   * @param oracleQueryId - Oracle query ID to reply by a contract\n   * @param options - Options\n   * @returns Signature\n   * @deprecated use AccountBase:signDelegation in Ceres\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signOracleQueryDelegationToContract(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    options?: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signOracleQueryDelegationToContract method');\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(data: string | Uint8Array, options?: any): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  // TODO: make abstract in the next major release\n  // eslint-disable-next-line class-methods-use-this\n  async signDelegation(\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signDelegation method');\n  }\n}\n","import { Encoded, Encoding } from '../../../utils/encoder';\nimport { packRecord, unpackRecord } from '../common';\nimport { DelegationTag, schemas } from './schema';\nimport { DlgParams, DlgUnpacked } from './schema.generated';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import AccountBase from './Base';\nimport {\n  generateKeyPairFromSecret, sign, generateKeyPair, hash, messageToHash, messagePrefixLength,\n} from '../utils/crypto';\nimport { ArgumentError } from '../utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { concatBuffers } from '../utils/other';\nimport { hashTypedData, AciValue } from '../utils/typed-data';\nimport { buildTx } from '../tx/builder';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { produceNameId } from '../tx/builder/helpers';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\nimport { packDelegation } from '../tx/builder/delegation';\n\nconst secretKeys = new WeakMap();\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(secretKey: string | Uint8Array) {\n    super();\n    secretKey = typeof secretKey === 'string' ? Buffer.from(secretKey, 'hex') : secretKey;\n    if (secretKey.length !== 64) {\n      throw new ArgumentError('secretKey', '64 bytes', secretKey.length);\n    }\n    secretKeys.set(this, secretKey);\n    this.address = encode(\n      generateKeyPairFromSecret(secretKeys.get(this)).publicKey,\n      Encoding.AccountAddress,\n    );\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    return new AccountMemory(generateKeyPair().secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return sign(data, secretKeys.get(this));\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name, version, networkId, contractAddress, ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name, version, networkId, contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion, isOracle }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountMemory:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      decode(produceNameId(name)),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      decode(this.address),\n      Buffer.from('AENS'),\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { networkId, consensusProtocolVersion }: {\n      networkId?: string;\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation, { networkId });\n    }\n    const oracleQueryIdDecoded = decode(oracleQueryId);\n    const addressDecoded = decode(this.address);\n    // TODO: remove after fixing https://github.com/aeternity/aesophia/issues/475\n    if (oracleQueryIdDecoded.compare(addressDecoded) === 0) {\n      throw new ArgumentError('oracleQueryId', 'not equal to account address', oracleQueryId);\n    }\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      Buffer.from(networkId),\n      oracleQueryIdDecoded,\n      decode(contractAddress),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength, new Uint8Array([1]), Buffer.from(networkId), decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import { Encoded } from '../utils/encoder';\nimport { buildTx, buildTxHash, unpackTx } from './builder';\nimport { Tag } from './builder/constants';\nimport { verify } from '../utils/crypto';\nimport { getBufferToSign } from '../account/Memory';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors';\nimport Node from '../Node';\nimport getTransactionSignerAddress from './transaction-signer';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx, gasUsed, queryFee, isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError('Transaction shouldn\\'t be a SignedTx, use `getExecutionCostBySignedTx` instead');\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    ((params.tag === Tag.SpendTx && params.senderId !== params.recipientId)\n    || params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n    || params.tag === Tag.ChannelDepositTx) && innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx || params.tag === Tag.ContractCallTx\n      || params.tag === Tag.GaAttachTx || params.tag === Tag.GaMetaTx)\n    && innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false]\n    .map((f) => verify(getBufferToSign(tx, networkId, f), params.signatures[0], address));\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError('Can\\'t verify signature');\n  return getExecutionCost(\n    buildTx(params.encodedTx),\n    { ...isInnerTx && { innerTx: 'freeloader' }, ...options },\n  );\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null && txHash !== false\n    && [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, verify } from '../utils/crypto';\nimport { TxUnpacked } from './builder/schema.generated';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants';\nimport { buildTx, unpackTx } from './builder';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other';\nimport { Encoded, decode } from '../utils/encoder';\nimport Node, { TransformNodeType } from '../Node';\nimport { Account } from '../apis/node';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest';\nimport { UnexpectedTsError } from '../utils/errors';\nimport getTransactionSignerAddress from './transaction-signer';\nimport { getExecutionCostUsingNode } from './execution-cost';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: TransformNodeType<Account> & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  }\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node.getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (await Promise.all(\n    validators.map(async (v) => v(\n      tx,\n      {\n        node, account, height, consensusProtocolVersion, nodeNetworkId, parentTxTypes,\n      },\n    )),\n  )).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline: nodeNotCached.pipeline.clone(),\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from([\n      nodeNetworkId,\n      ...parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [],\n    ].join('-'));\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (verify(txWithNetworkId, signatures[0], account.id)\n      || verify(txHashWithNetworkId, signatures[0], account.id)) return [];\n    return [{\n      message: 'Signature cannot be verified, please ensure that you transaction have'\n        + ' the correct prefix and the correct private key for the sender address',\n      key: 'InvalidSignature',\n      checkedKeys: ['encodedTx', 'signatures'],\n    }];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl >= height) return [];\n    return [{\n      message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n      key: 'ExpiredTTL',\n      checkedKeys: ['ttl'],\n    }];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [{\n      message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n      key: 'InsufficientBalance',\n      checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n    }];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = 'Generalized account can\\'t be used to generate SignedTx with signatures';\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = 'Basic account can\\'t be used to generate GaMetaTx';\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.Oracle === tx.tag || Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type = (oracleCall ? 'oracle-call' : null)\n      ?? (contractCreate ? 'contract-create' : null)\n      ?? (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion)\n      || (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [{\n        message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n        key: 'VmAndAbiVersionMismatch',\n        checkedKeys: ['ctVersion', 'abiVersion'],\n      }];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [{\n        message: `Contract ${tx.contractId} is not active`,\n        key: 'ContractNotActive',\n        checkedKeys: ['contractId'],\n      }];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [{\n        message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n        key: 'ContractNotFound',\n        checkedKeys: ['contractId'],\n      }];\n    }\n  },\n  // TODO: move to fee field of tx builder after dropping Iris\n  (tx, { consensusProtocolVersion }) => ((\n    Tag.GaAttachTx === tx.tag\n      && ConsensusProtocolVersion.Ceres === consensusProtocolVersion\n      && tx.nonce !== 1\n  ) ? [{\n      message: `Account ${tx.ownerId} can't become generalized because it is already used`,\n      key: 'AccountUsed',\n      checkedKeys: ['nonce'],\n    }]\n    : []),\n);\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter';\nimport verifyTransaction, { ValidatorResult } from './tx/validator';\nimport {\n  ensureError, isAccountNotFoundError, pause, unwrapProxy,\n} from './utils/other';\nimport { isNameValid, produceNameId } from './tx/builder/helpers';\nimport { DRY_RUN_ACCOUNT } from './tx/builder/schema';\nimport { AensName } from './tx/builder/constants';\nimport {\n  AensPointerContextError, DryRunError, InvalidAensNameError, TransactionError,\n  TxTimedOutError, TxNotInChainError, InternalError,\n} from './utils/errors';\nimport Node, { TransformNodeType } from './Node';\nimport {\n  Account as AccountNode, ByteCode, ContractObject, DryRunResult, DryRunResults,\n  Generation, KeyBlock, MicroBlockHeader, NameEntry, SignedTx,\n} from './apis/node';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport AccountBase from './account/Base';\nimport { buildTxHash } from './tx/builder';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport function _getPollInterval(\n  type: 'block' | 'microblock', // TODO: rename to 'key-block' | 'micro-block'\n  { _expectedMineRate = 180000, _microBlockCycle = 3000 }:\n  { _expectedMineRate?: number; _microBlockCycle?: number },\n): number {\n  const base = {\n    block: _expectedMineRate,\n    microblock: _microBlockCycle,\n  }[type];\n  return Math.floor(base / 3);\n}\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(\n    message: string,\n    validation: ValidatorResult[],\n    transaction: Encoded.Transaction,\n  ) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight(\n  { cached = false, ...options }: {\n    onNode: Node;\n    cached?: boolean;\n  } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache?.time != null && cache.time > Date.now() - _getPollInterval('block', options)) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Wait for a transaction to be mined\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5, interval, onNode, ...options\n  }:\n  { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<TransformNodeType<SignedTx>> {\n  interval ??= _getPollInterval('microblock', options);\n  const max = await getHeight({ ...options, onNode, cached: true }) + blocks;\n  do {\n    const tx = await onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    await pause(interval);\n  } while (await getHeight({ ...options, onNode, cached: true }) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(_getPollInterval('block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight({ onNode });\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  { confirm = 3, onNode, ...options }:\n  { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode, onAccount, verify = true, waitMined = true, confirm, innerTx, ...options\n  }:\n  SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${\n        validation.map((v: { message: string }) => v.message).join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      __queue != null ? { requestOptions: { customHeaders: { __queue } } } : {},\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] & Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'>\n& Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<TransformNodeType<SignedTx>> {\n  hash: Encoded.TxHash;\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  { height, hash, onNode }:\n  { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): Promise<TransformNodeType<AccountNode>> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  { format = AE_AMOUNT_FORMATS.AETTOS, ...options }:\n  { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : address as Encoded.AccountAddress | Encoded.ContractAddress;\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration(\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<Generation>> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<SignedTx[]>> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<KeyBlock>> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<MicroBlockHeader>> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError('Can\\'t get dry-run request');\n\n  let dryRunRes;\n  try {\n    const top = typeof rs[0].top === 'number'\n      ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress)))\n        .map((pubKey) => ({ pubKey, amount: DRY_RUN_ACCOUNT.amount })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const {\n      resolve, reject, tx, accountAddress,\n    } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top, txEvents, combine, onNode,\n  }:\n  { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{\n    txEvents?: TransformNodeType<DryRunResults['txEvents']>;\n  } & TransformNodeType<DryRunResult>> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx, accountAddress, top, txEvents, resolve, reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => { void txDryRunHandler(key, onNode); });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ByteCode>> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<ContractObject>> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): Promise<TransformNodeType<NameEntry>> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName <\n  Type extends Encoding.AccountAddress | Encoding.ContractAddress,\n>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  { verify = true, resolveByNode = false, onNode }:\n  { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","/**\n * Aens methods - routines to interact with the æternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport BigNumber from 'bignumber.js';\nimport { genSalt, isAddressValid } from './utils/crypto';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers';\nimport { Tag, AensName, ConsensusProtocolVersion } from './tx/builder/constants';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { UnsupportedProtocolError } from './utils/errors';\nimport { sendTransaction, SendTransactionOptions, getName } from './chain';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { TransformNodeType } from './Node';\nimport { NameEntry, NamePointer } from './apis/node';\nimport AccountBase from './account/Base';\nimport { AddressEncodings } from './tx/builder/field-types/address';\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n}\n\n/**\n * Revoke a name\n * @category AENS\n * @param name - Name hash\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensRevoke(name, { fee, ttl , nonce })\n * // or\n * await nameObject.revoke({ fee, ttl, nonce })\n * ```\n */\nexport async function aensRevoke(\n  name: AensName,\n  options: AensRevokeOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameRevokeTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameRevokeTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n  });\n  return sendTransaction(nameRevokeTx, options);\n}\n\ninterface AensRevokeOptions extends\n  BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Update a name\n * @category AENS\n * @param name - AENS name\n * @param pointers - Map of pointer keys to corresponding addresses\n * @param options - Options\n * @throws Invalid pointer array error\n * @example\n * ```js\n * const name = 'test.chain'\n * const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...']\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })\n * // or\n * await nameObject.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n * ```\n */\nexport async function aensUpdate(\n  name: AensName,\n  pointers: KeyPointers,\n  { extendPointers, ...options }: AensUpdateOptions,\n): ReturnType<typeof sendTransaction> {\n  const allPointers = {\n    ...extendPointers === true && Object.fromEntries(\n      (await getName(name, options)).pointers.map(({ key, id }) => [key, id]),\n    ),\n    ...pointers,\n  };\n\n  const hasRawPointers = Object.values(allPointers)\n    .some((v) => isAddressValid(v, Encoding.Bytearray));\n  const isIris = (await options.onNode.getNodeInfo())\n    .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n  if (hasRawPointers && isIris) {\n    throw new UnsupportedProtocolError('Raw pointers are available only in Ceres, the current protocol is Iris');\n  }\n\n  const nameUpdateTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameUpdateTx,\n    version: hasRawPointers ? 2 : 1,\n    nameId: name,\n    accountId: options.onAccount.address,\n    pointers: Object.entries(allPointers)\n      .map(([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id })),\n  });\n\n  return sendTransaction(nameUpdateTx, options);\n}\n\ninterface AensUpdateOptions extends\n  BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers' | 'clientTtl' | 'nameTtl' | 'onNode'>,\n  SendTransactionOptions {\n  /**\n   * Get the pointers from the node and merge with provided ones. Pointers with the same key will be\n   * overwritten.\n   */\n  extendPointers?: boolean;\n  /**\n   * a suggestion as to how long any clients should cache this information\n   */\n  clientTtl?: number;\n  /**\n   * Name ttl represented in number of blocks (Max value is 50000 blocks)\n   */\n  nameTtl?: number;\n}\n\n/**\n * Transfer a domain to another account\n * @category AENS\n * @param name - AENS name\n * @param account - Recipient account publick key\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const recipientPub = 'ak_asd23dasdas...'\n * const nameObject = await sdkInstance.aensQuery(name)\n *\n * await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce })\n * // or\n * await nameObject.transfer(recipientPub, { ttl, fee, nonce })\n * ```\n */\nexport async function aensTransfer(\n  name: AensName,\n  account: Encoded.AccountAddress,\n  options: AensTransferOptions,\n): ReturnType<typeof sendTransaction> {\n  const nameTransferTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameTransferTx,\n    nameId: name,\n    accountId: options.onAccount.address,\n    recipientId: account,\n  });\n\n  return sendTransaction(nameTransferTx, options);\n}\n\ninterface AensTransferOptions extends\n  BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId' | 'onNode'>,\n  SendTransactionOptions {}\n\n/**\n * Query the AENS name info from the node\n * and return the object with info and predefined functions for manipulating name\n * @category AENS\n * @param name - AENS name\n * @param opt - Options\n * @example\n * ```js\n * const nameObject = sdkInstance.aensQuery('test.chain')\n * console.log(nameObject)\n * {\n *  id, // name hash\n *  pointers, // array of pointers\n *  update, // Update name function\n *  extendTtl, // Extend Ttl name function\n *  transfer, // Transfer name function\n *  revoke // Revoke name function\n * }\n * ```\n */\nexport async function aensQuery(\n  name: AensName,\n  opt: Parameters<typeof getName>[1] & Parameters<typeof aensUpdate>[2]\n  & Parameters<typeof aensTransfer>[2],\n): Promise<Readonly<\n  TransformNodeType<NameEntry> & {\n    id: Encoded.Name;\n    owner: Encoded.AccountAddress;\n    pointers: KeyPointers | NamePointer[];\n    ttl: number;\n    update: (\n      pointers: KeyPointers,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n        onAccount?: AccountBase;\n      }\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    transfer: (\n      account: Encoded.AccountAddress,\n      options?: Parameters<typeof aensQuery>[1]\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n    revoke: (options?: Omit<Parameters<typeof aensRevoke>[1], 'onNode' | 'onCompiler' | 'onAccount'> & {\n      onAccount?: AccountBase;\n    }\n    ) => ReturnType<typeof aensRevoke>;\n    extendTtl: (\n      nameTtl?: number,\n      options?: Omit<Parameters<typeof aensQuery>[1], 'onNode' | 'onCompiler' | 'onAccount'>\n    ) => ReturnType<typeof aensUpdate> & ReturnType<typeof aensQuery>;\n  }\n  >> {\n  const nameEntry = await getName(name, opt);\n  return Object.freeze({\n    ...nameEntry,\n    id: nameEntry.id as Encoded.Name,\n    owner: nameEntry.owner as Encoded.AccountAddress,\n    async update(pointers, options) {\n      return {\n        ...await aensUpdate(name, pointers, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async transfer(account, options) {\n      return {\n        ...await aensTransfer(name, account, { ...opt, ...options }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n    async revoke(options) {\n      return aensRevoke(name, { ...opt, ...options });\n    },\n    async extendTtl(nameTtl, options = {}) {\n      return {\n        ...await aensUpdate(name, {}, {\n          ...opt, ...options, nameTtl, extendPointers: true,\n        }),\n        ...await aensQuery(name, { ...opt, ...options }),\n      };\n    },\n  });\n}\n\n/**\n * Claim a previously preclaimed registration. This can only be done after the\n * preclaim step\n * @category AENS\n * @param name - AENS name\n * @param salt - Salt from pre-claim, or 0 if it's a bid or claiming without preclaim (in Ceres)\n * @param options - options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })\n * ```\n */\nexport async function aensClaim(\n  name: AensName,\n  salt: number,\n  options: AensClaimOptions,\n): Promise<AensClaimReturnType> {\n  const claimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NameClaimTx,\n    accountId: options.onAccount.address,\n    nameSalt: salt,\n    name,\n  });\n\n  const result = await sendTransaction(claimTx, options);\n  if (!isAuctionName(name)) {\n    const nameInter = result.blockHeight != null && result.blockHeight > 0\n      ? await aensQuery(name, options)\n      : {};\n    return Object.assign(result, nameInter);\n  }\n  return result;\n}\n\ntype AensClaimOptionsType = BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>\n& SendTransactionOptions & Parameters<typeof aensQuery>[1];\ninterface AensClaimOptions extends AensClaimOptionsType {}\ninterface AensClaimReturnType extends\n  Awaited<ReturnType<typeof sendTransaction>>,\n  Partial<Awaited<ReturnType<typeof aensQuery>>> {}\n\n/**\n * Preclaim a name. Sends a hash of the name and a random salt to the node\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @example\n * ```js\n * const name = 'test.chain'\n * const salt = preclaimResult.salt // salt from pre-claim transaction\n *\n * await sdkInstance.aensPreclaim(name, { ttl, fee, nonce })\n * {\n *   ...transactionResult,\n *   claim, // Claim function (options={}) => claimTransactionResult\n *   salt,\n *   commitmentId\n * }\n * ```\n */\nexport async function aensPreclaim(name: AensName, options: AensPreclaimOptions): Promise<Readonly<\nAwaited<ReturnType<typeof sendTransaction>> & {\n  salt: number;\n  commitmentId: string;\n  claim: (opts?: Parameters<typeof aensClaim>[2]) => ReturnType<typeof aensClaim>;\n}\n>> {\n  const salt = genSalt();\n  const commitmentId = commitmentHash(name, salt);\n\n  const preclaimTx = await buildTxAsync({\n    ...options,\n    tag: Tag.NamePreclaimTx,\n    accountId: options.onAccount.address,\n    commitmentId,\n  });\n\n  return Object.freeze({\n    ...await sendTransaction(preclaimTx, options),\n    salt,\n    commitmentId,\n    async claim(opts?: Parameters<typeof aensClaim>[2]) {\n      const { version, ...otherOptions } = options;\n      return aensClaim(name, salt, { ...otherOptions, ...opts });\n    },\n  });\n}\n\ninterface AensPreclaimOptions extends\n  BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId' | 'onNode'>,\n  SendTransactionOptions,\n  Omit<AensClaimOptions, 'version'> {}\n\n/**\n * Bid to name auction\n * @category AENS\n * @param name - Domain name\n * @param nameFee - Name fee (bid fee)\n * @param options - Options\n * @returns Transaction result\n * @example\n * ```js\n * const name = 'test.chain'\n * const bidFee = computeBidFee(name, { startFee, increment: 0.42 })\n *\n * await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })\n * ```\n */\nexport async function aensBid(\n  name: AensName,\n  nameFee: number | string | BigNumber,\n  options: Omit<Parameters<typeof aensClaim>[2], 'nameFee'>,\n): ReturnType<typeof aensClaim> {\n  return aensClaim(name, 0, { ...options, nameFee });\n}\n","import BigNumber from 'bignumber.js';\nimport {\n  sendTransaction, getBalance, resolveName, SendTransactionOptions,\n} from './chain';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder';\nimport { ArgumentError } from './utils/errors';\nimport { Encoded, Encoding } from './utils/encoder';\nimport { Tag, AensName } from './tx/builder/constants';\nimport AccountBase from './account/Base';\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName<Encoding.AccountAddress>(\n        recipientIdOrName,\n        'account_pubkey',\n        options,\n      ),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName<Encoding.AccountAddress>(\n    recipientIdOrName,\n    'account_pubkey',\n    options,\n  );\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(\n    await getBalance.bind(options.onAccount)(senderId, options),\n  );\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.SpendTx, senderId, recipientId, amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<Tag.SpendTx, 'senderId' | 'recipientId' | 'amount'>\n& Parameters<typeof resolveName>[2] & { onAccount: AccountBase } & SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      ...options, tag: Tag.PayingForTx, payerId: options.onAccount.address, tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions extends\n  BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>, SendTransactionOptions {\n  onAccount: AccountBase;\n}\n","/**\n * Oracle methods - routines to interact with the æternity oracle system\n *\n * The high-level description of the oracle system is\n * https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol\n * repository.\n */\n\nimport { mapObject, pause } from './utils/other';\nimport { oracleQueryId } from './tx/builder/helpers';\nimport { unpackTx, buildTxAsync, BuildTxOptions } from './tx/builder';\nimport { Tag } from './tx/builder/constants';\nimport { RequestTimedOutError } from './utils/errors';\nimport {\n  decode, encode, Encoded, Encoding,\n} from './utils/encoder';\nimport {\n  _getPollInterval, getHeight, sendTransaction, SendTransactionOptions,\n} from './chain';\nimport Node from './Node';\nimport AccountBase from './account/Base';\n\ntype OracleQueries = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'];\n\n/**\n * Poll for oracle queries\n * @category oracle\n * @param oracleId - Oracle public key\n * @param onQuery - OnQuery callback\n * @param options - Options object\n * @param options.interval - Poll interval(default: 5000)\n * @param options.onNode - Node to use\n * @returns Callback to stop polling function\n */\nexport function pollForQueries(\n  oracleId: Encoded.OracleAddress,\n  onQuery: (query: OracleQueries[number]) => void,\n  { interval, onNode, ...options }: { interval?: number; onNode: Node }\n  & Parameters<typeof _getPollInterval>[1],\n): () => void {\n  interval ??= _getPollInterval('microblock', options);\n  const knownQueryIds = new Set();\n  const checkNewQueries = async (): Promise<void> => {\n    const queries = ((await onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries ?? [])\n      .filter(({ id }) => !knownQueryIds.has(id));\n    queries.forEach((query) => {\n      knownQueryIds.add(query.id);\n      onQuery(query);\n    });\n  };\n\n  let stopped = false;\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  (async () => {\n    while (!stopped) { // eslint-disable-line no-unmodified-loop-condition\n      // TODO: allow to handle this error somehow\n      await checkNewQueries().catch(console.error);\n      await pause(interval);\n    }\n  })();\n  return () => { stopped = true; };\n}\n\n/**\n * Poll for oracle query response\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options object\n * @param options.interval - Poll interval\n * @param options.onNode - Node to use\n * @returns OracleQuery object\n */\nexport async function pollForQueryResponse(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  { interval, onNode, ...options }:\n  { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<string> {\n  interval ??= _getPollInterval('microblock', options);\n  let height;\n  let ttl;\n  let response;\n  do {\n    ({ response, ttl } = await onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId));\n    const responseBuffer = decode(response as Encoded.OracleResponse);\n    if (responseBuffer.length > 0) return responseBuffer.toString();\n    await pause(interval);\n    height = await getHeight({ ...options, onNode, cached: true });\n  } while (ttl >= height);\n  throw new RequestTimedOutError(height);\n}\n\n/**\n * Constructor for OracleQuery Object (helper object for using OracleQuery)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param queryId - Oracle Query id\n * @param options - Options\n * @returns OracleQuery object\n */\nexport async function getQueryObject(\n  oracleId: Encoded.OracleAddress,\n  queryId: Encoded.OracleQueryId,\n  options: RespondToQueryOptions & Parameters<typeof pollForQueryResponse>[2],\n): Promise<GetQueryObjectReturnType> {\n  const record = await options.onNode.getOracleQueryByPubkeyAndQueryId(oracleId, queryId);\n  return {\n    ...record,\n    decodedQuery: decode(record.query as Encoded.OracleQueryId).toString(),\n    decodedResponse: decode(record.response as Encoded.OracleResponse).toString(),\n    respond: async (response, opt) => (\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      respondToQuery(queryId, response, { ...options, ...opt })\n    ),\n    pollForResponse: async (opt) => pollForQueryResponse(oracleId, queryId, { ...options, ...opt }),\n  };\n}\n\ninterface GetQueryObjectReturnType extends Awaited<ReturnType<Node['getOracleQueryByPubkeyAndQueryId']>> {\n  decodedQuery: string;\n  decodedResponse: string;\n  respond: (response: string, options?: Parameters<typeof respondToQuery>[2]) =>\n  ReturnType<typeof respondToQuery>;\n  pollForResponse: (options?: Parameters<typeof pollForQueryResponse>[2]) =>\n  ReturnType<typeof pollForQueryResponse>;\n}\n\n/**\n * Post query to oracle\n * @category oracle\n * @param oracleId - Oracle public key\n * @param query - Oracle query object\n * @param options - Options object\n * @returns Query object\n */\nexport async function postQueryToOracle(\n  oracleId: Encoded.OracleAddress,\n  query: string,\n  options: PostQueryToOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getQueryObject>>\n  > {\n  const senderId = options.onAccount.address;\n\n  const oracleQueryTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleQueryTx,\n    oracleId,\n    senderId,\n    query,\n  });\n  const { nonce } = unpackTx(oracleQueryTx, Tag.OracleQueryTx);\n  const queryId = oracleQueryId(senderId, nonce, oracleId);\n  return {\n    ...await sendTransaction(oracleQueryTx, options),\n    ...await getQueryObject(oracleId, queryId, options),\n  };\n}\n\ntype PostQueryToOracleOptionsType = Parameters<typeof sendTransaction>[1]\n& Parameters<typeof getQueryObject>[2]\n& BuildTxOptions<Tag.OracleQueryTx, 'oracleId' | 'senderId' | 'query'>;\ninterface PostQueryToOracleOptions extends PostQueryToOracleOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param options - Options object\n * @returns Oracle object\n */\nexport async function extendOracleTtl(options: ExtendOracleTtlOptions): Promise<\nAwaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n> {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleExtendTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleExtendTx,\n    oracleId,\n  });\n  return {\n    ...await sendTransaction(oracleExtendTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype ExtendOracleTtlOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleExtendTx, 'callerId' | 'oracleId'>;\ninterface ExtendOracleTtlOptions extends ExtendOracleTtlOptionsType {}\n\n/**\n * Extend oracle ttl\n * @category oracle\n * @param queryId - Oracle query id\n * @param response - Oracle query response\n * @param options - Options object\n * @returns Oracle object\n */\nexport async function respondToQuery(\n  queryId: Encoded.OracleQueryId,\n  response: string,\n  options: RespondToQueryOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const oracleId = encode(decode(options.onAccount.address), Encoding.OracleAddress);\n  const oracleRespondTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleResponseTx,\n    oracleId,\n    queryId,\n    response,\n  });\n  return {\n    ...await sendTransaction(oracleRespondTx, options),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    ...await getOracleObject(oracleId, options),\n  };\n}\n\ntype RespondToQueryOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response'>;\ninterface RespondToQueryOptions extends RespondToQueryOptionsType {}\n\n/**\n * Constructor for Oracle Object (helper object for using Oracle)\n * @category oracle\n * @param oracleId - Oracle public key\n * @param options - Options\n * @returns Oracle object\n */\nexport async function getOracleObject(\n  oracleId: Encoded.OracleAddress,\n  options: { onNode: Node; onAccount: AccountBase },\n): Promise<GetOracleObjectReturnType> {\n  return {\n    ...await options.onNode.getOracleByPubkey(oracleId),\n    queries: (await options.onNode.getOracleQueriesByPubkey(oracleId)).oracleQueries,\n    ...mapObject<Function, Function>(\n      {\n        pollQueries: pollForQueries,\n        postQuery: postQueryToOracle,\n        respondToQuery,\n        extendOracle: extendOracleTtl,\n        getQuery: getQueryObject,\n      },\n      ([name, handler]) => [\n        name,\n        (...args: any) => {\n          const lastArg = args[args.length - 1];\n          if (lastArg != null && typeof lastArg === 'object' && lastArg.constructor === Object) {\n            Object.assign(lastArg, { ...options, ...lastArg });\n          } else args.push(options);\n          return handler(\n            ...['extendOracle', 'respondToQuery'].includes(name) ? [] : [oracleId],\n            ...args,\n          );\n        },\n      ],\n    ),\n  } as any;\n}\n\ninterface GetOracleObjectReturnType extends Awaited<ReturnType<Node['getOracleByPubkey']>> {\n  id: Encoded.OracleAddress;\n  queries: OracleQueries;\n  // TODO: replace getOracleObject with a class\n  pollQueries: (cb: Parameters<typeof pollForQueries>[1]) => ReturnType<typeof pollForQueries>;\n  postQuery: Function;\n  respondToQuery: Function;\n  extendOracle: Function;\n  getQuery: Function;\n}\n\n/**\n * Register oracle\n * @category oracle\n * @param queryFormat - Format of query\n * @param responseFormat - Format of query response\n * @param options - Options\n * @returns Oracle object\n */\nexport async function registerOracle(\n  queryFormat: string,\n  responseFormat: string,\n  options: RegisterOracleOptions,\n): Promise<\n  Awaited<ReturnType<typeof sendTransaction>> & Awaited<ReturnType<typeof getOracleObject>>\n  > {\n  const accountId = options.onAccount.address;\n  const oracleRegisterTx = await buildTxAsync({\n    ...options,\n    tag: Tag.OracleRegisterTx,\n    accountId,\n    queryFormat,\n    responseFormat,\n  });\n  return {\n    ...await sendTransaction(oracleRegisterTx, options),\n    ...await getOracleObject(encode(decode(accountId), Encoding.OracleAddress), options),\n  };\n}\n\ntype RegisterOracleOptionsType = SendTransactionOptions & Parameters<typeof getOracleObject>[1]\n& BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat'>;\ninterface RegisterOracleOptions extends RegisterOracleOptionsType {}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { DRY_RUN_ACCOUNT } from '../tx/builder/schema';\nimport { Tag, AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, unpackTx, buildTxAsync, BuildTxOptions, buildTxHash,\n} from '../tx/builder';\nimport { decode, Encoded } from '../utils/encoder';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors';\nimport { hash as calcHash } from '../utils/crypto';\nimport {\n  ContractCallObject as NodeContractCallObject, Event as NodeEvent,\n} from '../apis/node';\nimport CompilerBase, { Aci } from './compiler/Base';\nimport Node, { TransformNodeType } from '../Node';\nimport {\n  getAccount, getContract, getContractByteCode, resolveName, txDryRun, sendTransaction,\n  SendTransactionOptions,\n} from '../chain';\nimport AccountBase from '../account/Base';\nimport { TxUnpacked } from '../tx/builder/schema.generated';\nimport { isAccountNotFoundError } from '../utils/other';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends TransformNodeType<NodeContractCallObject> {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase { [key: string]: (...args: any[]) => any }\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]:\n  M[Name] extends (...args: infer Args) => any\n    ? (...args: [\n      ...Args,\n      ...[] | [Name extends 'init'\n        ? Parameters<Contract<M>['$deploy']>[1] : Parameters<Contract<M>['$call']>[2]],\n    ]) => ReturnType<Contract<M>['$call']>\n    : never\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = keyof M & string | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> =\n  Fn extends 'init'\n    ? M extends { init: any } ? Parameters<M['init']> : []\n    : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await aeSdk.initializeContract({ sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null) throw new IllegalArgumentError('Can\\'t compile without compiler');\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler\n        .compileBySourceCode(this.$options.sourceCode, this.$options.fileSystem);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError('Can\\'t compile without sourceCode and sourceCodePath');\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...txData.blockHeight != null && (\n        await this.$getCallResultByTxHash(txData.hash, fnName, options)\n      ),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2]\n    & Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }> {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t deploy without account');\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t deploy without bytecode');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas('init', params, opt),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(\n      tx,\n      'init',\n      { ...opt, onAccount: opt.onAccount },\n    );\n    this.$options.address = buildContractIdByContractTx(tx);\n    return {\n      ...other,\n      ...other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      },\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find(\n      (f: { name: string }) => f.name === name,\n    );\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [], name: 'init', payable: false, returns: 'unit', stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>>\n    & Parameters<Contract<M>['$decodeEvents']>[1]\n    & Omit<SendTransactionOptions, 'onAccount' | 'onNode'>\n    & Omit<Parameters<typeof txDryRun>[2], 'onNode'>\n    & { onAccount?: AccountBase; onNode?: Node; callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true) throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount = callStatic === true && (\n        (error instanceof TypeError && error.message === 'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead')\n        || (error instanceof NoWalletConnectedError)\n        || (error instanceof InternalError && error.message === 'Use fallback account')\n      );\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null) throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCreateTx, code: this.$options.bytecode, ownerId: callerId,\n        });\n      } else {\n        if (contractId == null) throw new MissingContractAddressError('Can\\'t dry-run contract without address');\n        tx = await buildTxAsync({\n          ...txOpt, tag: Tag.ContractCallTx, callerId, contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null) throw new IllegalArgumentError('Can\\'t handle `top` option in on-chain contract call');\n    if (contractId == null) throw new MissingContractAddressError('Can\\'t call contract without address');\n    const tx = await buildTxAsync({\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? await this._estimateGas(fn, params, opt),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null) throw new IllegalArgumentError('Can\\'t call contract on chain without account');\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) => events.map((event: {}) => (\n        [name, Object.keys(event)[0], Object.values(event)[0]]\n      )))\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0: throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1: return matchedEvents[0][0];\n      default: throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        const topics = event.topics.map((t: string | number) => BigInt(t));\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      }).filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>(\n    {\n      onCompiler,\n      onNode,\n      bytecode,\n      aci,\n      address,\n      sourceCodePath,\n      sourceCode,\n      fileSystem,\n      validateBytecode,\n      ...otherOptions\n    }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n      validateBytecode?: boolean;\n      aci?: Aci;\n      address?: Encoded.ContractAddress | AensName;\n    },\n  ): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = await resolveName(\n        address,\n        'contract_pubkey',\n        { resolveByNode: true, onNode },\n      ) as Encoded.ContractAddress;\n      const isIris = (await onNode.getNodeInfo())\n        .consensusProtocolVersion === ConsensusProtocolVersion.Iris;\n      if (!isIris && isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError('Can\\'t create instance by ACI without address');\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null) throw new MissingContractAddressError('Can\\'t validate bytecode without contract address');\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null) throw new IllegalArgumentError('Can\\'t validate bytecode without compiler');\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError((sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode');\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({ aci, ...otherOptions }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(`The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`);\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(this.#aciContract.functions\n        .map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object') throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        })),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: typeof Contract['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { decode, Encoded } from '../utils/encoder';\nimport { ArgumentError } from '../utils/errors';\nimport { AensName } from '../tx/builder/constants';\nimport AccountBase from '../account/Base';\nimport { isNameValid } from '../tx/builder/helpers';\nimport Node from '../Node';\n\nfunction ensureOracleQuery(oq: string): asserts oq is Encoded.OracleQueryId {\n  if (!oq.startsWith('oq_')) throw new ArgumentError('oq', 'oracle query', oq);\n}\n\n/**\n * Helper to generate a signature to delegate\n *  - pre-claim/claim/transfer/revoke of a name to a contract.\n *  - register/extend/respond of an Oracle to a contract.\n * @category contract\n * @param contractAddress - Address of contract to delegate access\n * @param ids - The list of id's to prepend\n * @param options - Options\n * @param options.omitAddress - Prepend delegation signature with an account address\n * @param options.onAccount - Account to use\n * @param options.onNode - Node to use\n * @returns Signature\n * @deprecated use methods `sign*DelegationToContract` of Account instance instead\n * @example\n * ```js\n * const aeSdk = new AeSdk({ ... })\n * const contractAddress = 'ct_asd2ks...'\n * const aensName = 'example.chain'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Preclaim signature\n * const preclaimSig = await aeSdk.createDelegationSignature(contractAddress, [], { onAccount })\n * // Claim, transfer and revoke signature\n * const aensDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [aensName], { onAccount })\n *\n * const oracleQueryId = 'oq_...'\n * const onAccount = new MemoryAccount(...) // Sign with a specific account\n * // Oracle register and extend signature\n * const oracleDelegationSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [], { onAccount })\n * // Oracle respond signature\n * const respondSig = await aeSdk\n *   .createDelegationSignature(contractAddress, [oracleQueryId], { onAccount, omitAddress: true })\n * ```\n */\nexport default async function createDelegationSignature(\n  contractAddress: Encoded.ContractAddress,\n  ids: Array<Encoded.Any | AensName>,\n  {\n    onAccount, omitAddress, isOracle, ...options\n  }: {\n    omitAddress?: boolean;\n    onAccount: AccountBase;\n    isOracle?: boolean;\n    onNode: Node;\n  },\n): Promise<Uint8Array> {\n  if (ids.length > 1) throw new ArgumentError('ids', 'shorter than 2', ids);\n  const { nodeNetworkId, consensusProtocolVersion } = await options.onNode.getNodeInfo();\n  const signOpts = { networkId: nodeNetworkId, consensusProtocolVersion };\n  if (ids.length === 0) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signDelegationToContract(contractAddress, { ...signOpts, isOracle }),\n    );\n  }\n\n  const [payload] = ids;\n  if (isNameValid(payload)) {\n    if (omitAddress === true) {\n      throw new ArgumentError('omitAddress', 'equal false', omitAddress);\n    }\n    return decode(\n      await onAccount.signNameDelegationToContract(contractAddress, payload, signOpts),\n    );\n  }\n\n  ensureOracleQuery(payload);\n  if (omitAddress !== true) {\n    throw new ArgumentError('omitAddress', 'equal true', omitAddress);\n  }\n  return decode(\n    await onAccount.signOracleQueryDelegationToContract(contractAddress, payload, signOpts),\n  );\n}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants';\nimport {\n  buildContractIdByContractTx, buildTx, buildTxAsync, BuildTxOptions, unpackTx,\n} from '../tx/builder';\nimport { hash } from '../utils/crypto';\nimport {\n  decode, encode, Encoded, Encoding,\n} from '../utils/encoder';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors';\nimport { concatBuffers } from '../utils/other';\nimport AccountBase from '../account/Base';\nimport Contract from './Contract';\nimport Node from '../Node';\nimport { sendTransaction, SendTransactionOptions, getAccount } from '../chain';\nimport CompilerBase from './compiler/Base';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem, ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount, onCompiler, onNode, bytecode, aci, sourceCodePath, sourceCode, fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? await contract._estimateGas('init', args, options),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const contractId = buildContractIdByContractTx(tx);\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode, onAccount, onCompiler, ...options,\n  });\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions extends\n  BuildTxOptions<Tag.GaAttachTx, 'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit'>,\n  SendTransactionOptions,\n  Pick<\n  Parameters<typeof Contract.initialize>[0],\n  'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n  > {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(decode(buildTx({\n      tag: Tag.GaMetaTxAuthData,\n      fee,\n      gasPrice,\n      txHash: encode(payload, Encoding.TxHash),\n    })));\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain';\nimport * as aensMethods from './aens';\nimport * as spendMethods from './spend';\nimport * as oracleMethods from './oracle';\nimport Contract, { ContractMethodsBase } from './contract/Contract';\nimport createDelegationSignature from './contract/delegation-signature';\nimport * as contractGaMethods from './contract/ga';\nimport { buildTxAsync } from './tx/builder';\nimport { mapObject, UnionToIntersection, wrapWithProxy } from './utils/other';\nimport Node from './Node';\nimport { TxParamsAsync } from './tx/builder/schema.generated';\nimport AccountBase from './account/Base';\nimport { Encoded } from './utils/encoder';\nimport CompilerBase from './contract/compiler/Base';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst { InvalidTxError: _2, ...chainMethodsOther } = chainMethods;\n\nconst methods = {\n  ...chainMethodsOther,\n  ...aensMethods,\n  ...spendMethods,\n  ...oracleMethods,\n  createDelegationSignature,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: infer Args) => any\n      ? Args[Decrement<Args['length']>] : never\n  };\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {\n}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    return buildTxAsync({ ...this.getContext(), ...options });\n  }\n\n  async initializeContract<Methods extends ContractMethodsBase>(\n    options?: Omit<Parameters<typeof Contract.initialize>[0], 'onNode'> & { onNode?: Node },\n  ): Promise<Contract<Methods>> {\n    return Contract.initialize<Methods>(this.getContext(options as AeSdkMethodsOptions));\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n    /**\n     * Make operation on specific account by providing address (to use account from sdk) or instance\n     * of AccountBase (like MemoryAccount)\n     */\n    onAccount: OnAccount;\n  } : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<[\n  Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>,\n]>;\n\ntype TransformMethods <Methods extends { [key: string]: Function }> =\n  {\n    [Name in keyof Methods]:\n    Methods[Name] extends (...args: [...infer Args, infer Options]) => infer Ret\n      ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n      : never\n  };\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(AeSdkMethods.prototype, mapObject<Function, Function>(\n  methods,\n  ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ],\n));\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node';\nimport AccountBase from './account/Base';\nimport {\n  CompilerError, DuplicateNodeError, NodeNotFoundError, NotImplementedError, TypeError,\n} from './utils/errors';\nimport { Encoded } from './utils/encoder';\nimport { wrapWithProxy } from './utils/other';\nimport CompilerBase from './contract/compiler/Base';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods';\nimport { AensName } from './tx/builder/constants';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor(\n    { nodes = [], ...options }: AeSdkMethodsOptions & {\n      nodes?: Array<{ name: string; instance: Node }>;\n    } = {},\n  ) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError('You can\\'t use Compiler API. Compiler is not ready!');\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError('You can\\'t use Node API. Node is not connected or not defined!');\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...await this.api.getNodeInfo(),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...await node.getNodeInfo(),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), '\n      + `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { onAccount, ...options }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param name - AENS name\n   * @param options - Options\n   */\n  async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signNameDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signNameDelegationToContract(contractAddress, name, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param options - Options\n   */\n  async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signAllNamesDelegationToContract']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signAllNamesDelegationToContract(contractAddress, options);\n  }\n\n  /**\n   * @deprecated use AeSdkBase:signDelegation in Ceres\n   * @param contractAddress - Contract address\n   * @param oracleQueryId - Oracle query id\n   * @param options - Options\n   */\n  async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signOracleQueryDelegationToContract']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    options.consensusProtocolVersion ??= this.selectedNodeName !== null\n      ? (await this.api.getNodeInfo()).consensusProtocolVersion : undefined;\n    return this._resolveAccount(onAccount)\n      .signOracleQueryDelegationToContract(contractAddress, oracleQueryId, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    { onAccount, ...options }: { onAccount?: OnAccount }\n    & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??= this.selectedNodeName !== null\n      ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      },\n    };\n  }\n}\n","import AccountBase from './Base';\nimport { METHODS } from '../aepp-wallet-communication/schema';\nimport { ArgumentError, NotImplementedError, UnsupportedProtocolError } from '../utils/errors';\nimport { Encoded } from '../utils/encoder';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types';\nimport { AensName, ConsensusProtocolVersion } from '../tx/builder/constants';\nimport { packDelegation } from '../tx/builder/delegation';\nimport { DelegationTag } from '../tx/builder/delegation/schema';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async sign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using wallet');\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient\n      .request(METHODS.signMessage, { onAccount: this.address, message });\n    return Buffer.from(signature, 'hex');\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      name, version, contractAddress, networkId,\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signTypedData, {\n      onAccount: this.address,\n      domain: {\n        name, version, networkId, contractAddress,\n      },\n      aci,\n      data,\n    });\n    return signature;\n  }\n\n  override async signDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { consensusProtocolVersion, isOracle }: {\n      consensusProtocolVersion?: ConsensusProtocolVersion;\n      isOracle?: boolean;\n    } = {},\n  ): Promise<Encoded.Signature> {\n    if (isOracle == null) {\n      const protocol = (consensusProtocolVersion != null) ? ConsensusProtocolVersion[consensusProtocolVersion] : 'unknown';\n      console.warn(`AccountRpc:signDelegationToContract: isOracle is not set. By default, sdk would generate an AENS preclaim delegation signature, but it won't be the same as the oracle delegation signature in Ceres (current protocol is ${protocol}).`);\n    }\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: isOracle === true ? DelegationTag.Oracle : DelegationTag.AensPreclaim,\n        accountAddress: this.address,\n        contractAddress,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      isOracle,\n    });\n    return signature;\n  }\n\n  override async signNameDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    name: AensName,\n    { consensusProtocolVersion }: { consensusProtocolVersion?: ConsensusProtocolVersion } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensName, accountAddress: this.address, contractAddress, nameId: name,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      name,\n    });\n    return signature;\n  }\n\n  override async signAllNamesDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    { consensusProtocolVersion }: { consensusProtocolVersion?: ConsensusProtocolVersion } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.AensWildcard, accountAddress: this.address, contractAddress,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      allNames: true,\n    });\n    return signature;\n  }\n\n  override async signOracleQueryDelegationToContract(\n    contractAddress: Encoded.ContractAddress,\n    oracleQueryId: Encoded.OracleQueryId,\n    { consensusProtocolVersion }: { consensusProtocolVersion?: ConsensusProtocolVersion } = {},\n  ): Promise<Encoded.Signature> {\n    if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n      const delegation = packDelegation({\n        tag: DelegationTag.OracleResponse, queryId: oracleQueryId, contractAddress,\n      });\n      return this.signDelegation(delegation);\n    }\n    const { signature } = await this._rpcClient.request(METHODS.signDelegationToContract, {\n      onAccount: this.address,\n      contractAddress,\n      oracleQueryId,\n    });\n    return signature;\n  }\n\n  override async signDelegation(delegation: Encoded.Bytearray): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(\n      METHODS.signDelegation,\n      { delegation, onAccount: this.address },\n    );\n    return signature;\n  }\n}\n","import { Encoded } from '../../utils/encoder';\nimport { Domain, AciValue } from '../../utils/typed-data';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema';\nimport { TransformNodeType } from '../../Node';\nimport { SignedTx } from '../../apis/node';\nimport { AensName } from '../../tx/builder/constants';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport interface WalletApi {\n  [METHODS.connect]: (\n    p: { name: string; icons?: Icons; version: typeof RPC_VERSION; connectNode: boolean }\n  ) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (\n    p: { type: SUBSCRIPTION_TYPES; value: 'connected' | 'current' }\n  ) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.sign]: ((\n    p: {\n      tx: Encoded.Transaction;\n      onAccount: Encoded.AccountAddress;\n      returnSigned: boolean;\n      /**\n       * @deprecated Wallet provided networkId will be used (current network)\n       * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n       * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n       */\n      networkId: string;\n      innerTx?: boolean;\n    }\n  ) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<TransformNodeType<SignedTx>> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>);\n\n  [METHODS.signMessage]: (\n    p: { message: string; onAccount: Encoded.AccountAddress }\n  ) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (\n    p: {\n      domain: Domain;\n      aci: AciValue;\n      data: Encoded.ContractBytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegationToContract]: (\n    p: {\n      contractAddress: Encoded.ContractAddress;\n      name?: AensName;\n      oracleQueryId?: Encoded.OracleQueryId;\n      allNames?: boolean;\n      isOracle?: boolean;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (\n    p: {\n      delegation: Encoded.Bytearray;\n      onAccount: Encoded.AccountAddress;\n    },\n  ) => Promise<{ signature: Encoded.Signature }>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema';\nimport BrowserConnection from '../connection/Browser';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors';\nimport { ensureError } from '../../utils/other';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient <\n  RemoteApi extends RpcApi<RemoteApi>, LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = (\n    new Map<number, { resolve: (v: any) => void; reject: (e: Error) => void }>()\n  );\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...id != null ? { id } : {},\n      method,\n      ...params != null ? { params } : {},\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...error != null ? { error: error.toJSON() } : { result },\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest(this.#messageId += 1, name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import AeSdkBase from './AeSdkBase';\nimport { OnAccount } from './AeSdkMethods';\nimport AccountBase from './account/Base';\nimport AccountRpc from './account/Rpc';\nimport { decode, Encoded } from './utils/encoder';\nimport {\n  Accounts, RPC_VERSION, WalletInfo, Network, WalletApi, AeppApi, Node as NodeRpc,\n} from './aepp-wallet-communication/rpc/types';\nimport RpcClient from './aepp-wallet-communication/rpc/RpcClient';\nimport { METHODS, SUBSCRIPTION_TYPES } from './aepp-wallet-communication/schema';\nimport {\n  AlreadyConnectedError,\n  NoWalletConnectedError,\n  UnsubscribedAccountError,\n  UnAuthorizedAccountError,\n  RpcConnectionError,\n} from './utils/errors';\nimport Node from './Node';\nimport BrowserConnection from './aepp-wallet-communication/connection/Browser';\n\n/**\n * RPC handler for AEPP side\n * Contain functionality for wallet interaction and connect it to sdk\n * @category aepp wallet communication\n */\nexport default class AeSdkAepp extends AeSdkBase {\n  name: string;\n\n  onAddressChange: (a: Accounts) => void;\n\n  onDisconnect: (p: any) => void;\n\n  onNetworkChange: (a: Network) => void;\n\n  rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  _accounts?: Accounts;\n\n  /**\n   * @param options - Options\n   * @param options.name - Aepp name\n   * @param options.onAddressChange - Call-back function for update address event\n   * @param options.onDisconnect - Call-back function for disconnect event\n   * @param options.onNetworkChange - Call-back function for update network event\n   */\n  constructor({\n    name,\n    onAddressChange = () => {},\n    onDisconnect = () => {},\n    onNetworkChange = () => {},\n    ...other\n  }: {\n    name: string;\n    onAddressChange?: (a: Accounts) => void;\n    onDisconnect?: (p: any) => void;\n    onNetworkChange?: (a: Network) => void;\n  } & ConstructorParameters<typeof AeSdkBase>[0]) {\n    super(other);\n    this.onAddressChange = onAddressChange;\n    this.onDisconnect = onDisconnect;\n    this.onNetworkChange = onNetworkChange;\n    this.name = name;\n  }\n\n  override _resolveAccount(account: OnAccount = this.addresses()[0]): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (!this.addresses().includes(address)) throw new UnAuthorizedAccountError(address);\n      this._ensureConnected();\n      account = new AccountRpc(this.rpcClient, address);\n    }\n    if (account == null) this._ensureAccountAccess();\n    return super._resolveAccount(account);\n  }\n\n  override addresses(): Encoded.AccountAddress[] {\n    if (this._accounts == null) return [];\n    const current = Object.keys(this._accounts.current)[0];\n    return [\n      ...current != null ? [current] : [], ...Object.keys(this._accounts.connected),\n    ] as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Connect to wallet\n   * @param connection - Wallet connection object\n   * @param options - Options\n   * @param options.connectNode - Request wallet to bind node\n   * @param options.name - Node name\n   */\n  async connectToWallet(\n    connection: BrowserConnection,\n    { connectNode = false, name = 'wallet-node' }: { connectNode?: boolean; name?: string } = {},\n  ): Promise<WalletInfo & { node?: NodeRpc }> {\n    if (this.rpcClient != null) throw new AlreadyConnectedError('You are already connected to wallet');\n    let disconnectParams: any;\n\n    const updateNetwork = (params: Network): void => {\n      if (connectNode) {\n        if (params.node?.url == null) throw new RpcConnectionError('Missing URLs of the Node');\n        this.pool.delete(name);\n        this.addNode(name, new Node(params.node.url), true);\n      }\n      this.onNetworkChange(params);\n    };\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        delete this.rpcClient;\n        delete this._accounts;\n        this.onDisconnect(disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: (params) => {\n          this._accounts = params;\n          this.onAddressChange(params);\n        },\n        [METHODS.updateNetwork]: updateNetwork,\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    const walletInfo = await client\n      .request(METHODS.connect, { name: this.name, version: RPC_VERSION, connectNode });\n    updateNetwork(walletInfo);\n    this.rpcClient = client;\n    return walletInfo;\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnectWallet(): void {\n    this._ensureConnected();\n    this.rpcClient.notify(METHODS.closeConnection, { reason: 'bye' });\n    this.rpcClient.connection.disconnect();\n  }\n\n  /**\n   * Ask addresses from wallet\n   * @returns Addresses from wallet\n   */\n  async askAddresses(): Promise<Encoded.AccountAddress[]> {\n    this._ensureAccountAccess();\n    return this.rpcClient.request(METHODS.address, undefined);\n  }\n\n  /**\n   * Subscribe for addresses from wallet\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAddress(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<ReturnType<WalletApi[METHODS.subscribeAddress]>> {\n    this._ensureConnected();\n    const result = await this.rpcClient.request(METHODS.subscribeAddress, { type, value });\n    this._accounts = result.address;\n    return result;\n  }\n\n  _ensureConnected(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    if (this.rpcClient != null) return;\n    throw new NoWalletConnectedError('You are not connected to Wallet');\n  }\n\n  _ensureAccountAccess(): asserts this is AeSdkAepp & { rpcClient: NonNullable<AeSdkAepp['rpcClient']> } {\n    this._ensureConnected();\n    if (this.addresses().length !== 0) return;\n    throw new UnsubscribedAccountError();\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest';\nimport CompilerBase, { Aci, CompileResult } from './Base';\nimport { Encoded } from '../../utils/encoder';\nimport { CompilerError, NotImplementedError } from '../../utils/errors';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion }: { ignoreVersion?: boolean } = {}) {\n    super();\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason\n            }${body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map((e) => `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`)\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    if (ignoreVersion !== true) {\n      const versionPromise = this.api.apiVersion()\n        .then(({ apiVersion }) => apiVersion, (error) => error);\n      this.api.pipeline.addPolicy(\n        genVersionCheckPolicy('compiler', '/api-version', versionPromise, '7.3.0', '9.0.0'),\n      );\n    }\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      cmpOut.warnings ??= []; // TODO: remove after requiring http compiler above or equal to 8.0.0\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","import { shallowReactive } from 'vue';\nimport { createStore } from 'vuex';\nimport { AeSdkAepp, Node, CompilerHttp } from '@aeternity/aepp-sdk';\n\nconst TESTNET_NODE_URL = 'https://testnet.aeternity.io';\nconst MAINNET_NODE_URL = 'https://mainnet.aeternity.io';\nconst COMPILER_URL = 'https://v7.compiler.aepps.com';\n\nconst store = createStore({\n  state: {\n    address: undefined,\n    networkId: undefined,\n    // AeSdkAepp instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/develop/docs/README.md#vue3\n    aeSdk: shallowReactive(new AeSdkAepp({\n      name: 'Simple æpp',\n      nodes: [\n        { name: 'testnet', instance: new Node(TESTNET_NODE_URL) },\n        { name: 'mainnet', instance: new Node(MAINNET_NODE_URL) },\n      ],\n      onCompiler: new CompilerHttp(COMPILER_URL),\n      async onNetworkChange({ networkId }) {\n        const [{ name }] = (await this.getNodesInPool())\n          .filter((node) => node.nodeNetworkId === networkId);\n        this.selectNode(name);\n        store.commit('setNetworkId', networkId);\n      },\n      onAddressChange: ({ current }) => store.commit('setAddress', Object.keys(current)[0]),\n    })),\n  },\n  mutations: {\n    setAddress(state, address) {\n      state.address = address;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n  },\n});\n\nexport default store;\n","import { createApp } from 'vue';\nimport App from './App.vue';\nimport store from './store';\n\ncreateApp(App).use(store).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkaepp\"] = self[\"webpackChunkaepp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(63766); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","class","_createElementBlock","_Fragment","_hoisted_1","_createVNode","_component_Connect","_hoisted_2","href","_normalizeClass","active","_ctx","view","onClick","_cache","$event","_createBlock","_resolveDynamicComponent","key","_createCommentVNode","connectMethod","type","value","_createTextVNode","reverseIframeWalletUrl","walletConnected","args","$options","disconnect","disabled","walletConnecting","connect","cancelWalletDetection","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","walletName","BaseError","Error","constructor","message","super","this","name","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","RequestTimedOutError","height","TxTimedOutError","blocks","th","join","TypeError","UnsupportedPlatformError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","UnAuthorizedAccountError","onAccount","UnsubscribedAccountError","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","map","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","METHODS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","address","RpcInternalError","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","target","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","listener","_message$data$jsonrpc","_message$data$data","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","connection","onDetected","wallets","method","params","readyToConnect","wallet","info","getConnection","to_waellet","newWallet","reverseIframe","process","walletInfo","computed","mapState","methods","detectWallets","document","createElement","src","style","display","body","appendChild","Promise","resolve","reject","stopDetection","walletDetector","async","confirm","remove","aeSdk","$store","commit","connectToWallet","error","current","subscribeAddress","Object","keys","disconnectWallet","__exports__","_component_Value","balancePromise","heightPromise","_hoisted_6","nodeInfoPromise","_hoisted_7","compilerVersionPromise","_component_SpendCoins","_component_MessageSign","text","props","Array","String","Number","default","watch","handler","then","result","valueToString","warn","immediate","JSON","stringify","k","v","spendTo","placeholder","spendAmount","spendPayload","spendPromise","spend","pause","setTimeout","duration","mapObject","object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","concatBuffers","list","totalLength","el","wrapWithProxy","valueCb","Proxy","t","res","Reflect","bind","unwrapProxy","_wrappedValue","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","encode","bs58Encode","decode","bs58Decode","_bs","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","slice","addChecksum","getPayload","buffer","equals","base64","string","base58","parseType","maybeType","base64Type","base58Type","encodedPayload","extra","split","encoder","components","Value","TextEncoder","_component_FieldAction","title","messageSign","$props","argTitle","$data","argValue","argPlaceholder","promise","actionHandler","actionTitle","resultTitle","required","argDefaultValue","Function","FieldAction","messageToSign","signMessage","SpendCoins","MessageSign","mounted","$watch","networkId","compilerApi","getBalance","getHeight","getNodeInfo","contractSourceCode","createPromise","create","contract","compile","deploy","deployPromise","callOnChain","callStatic","trim","shallowRef","initializeContract","sourceCode","$compile","arg","$deploy","setFactor","multiplyByFactor","_component_GenerateSpendTx","signInnerTx","payForTx","incrementNonce","generatePromise","generate","_hoisted_8","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","blake2b","_blakejsBlake2bJs","varuintEncode","_varuintBitcoin","isAddressValid","maybeEncoded","encodings","encoding","genSalt","random","BigUint64Array","nacl","BigInt","MAX_SAFE_INTEGER","hash","verify","signature","detached","messagePrefix","messagePrefixLength","genEntryField","serialize","txParams","buildTx","ArrayBuffer","isView","startsWith","buf","unpackTx","tx","genArrayField","itemHandler","items","buffers","genMapField","Mtree","values","MtreeValue","filter","recursiveType","withDefault","defaultValue","field","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","oracleQueryId","senderId","oracleId","_int32","nonceBE","alloc","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","commitmentHash","salt","padStart","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","isAuctionName","uInt","withFormatting","format","genShortUIntConstField","constValue","optional","shortUInt","constValueOptional","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","readUIntBE","subarray","genEncodedField","encodedData","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","serializeAettos","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_FEE_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ChannelOffChainUpdateCallContract","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateTransfer","ContractCreateTx","ContractCallTx","GaAttachTx","GaMetaTx","PayingForTx","factor","TX_FEE_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","plus","ceil","floor","minus","getOracleRelativeTtl","ttlKeys","buildFee","builtTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","coinAmount","_value","_computingMinFee","_pickBiggerFee","minFee","gt","prepare","onNode","absoluteTtl","getCurrentKeyBlock","genNonceField","senderKey","strategy","getAccountNextNonce","replace","catch","nextNonce","addressAny","pointers","pointer","txFields","parameters","addressName","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","bKey","bId","ProtocolToVmAbi","Iris","vmVersion","Fate2","abiVersion","Fate","Sophia","NoAbi","Ceres","Fate3","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","consensusProtocolVersion","vm","abi","calculateGasLimitMax","gasMax","dividedBy","_computingGasLimit","gasLimitMax","gasLimit","_getProtocolDetails","c","kind","genEnumerationField","enm","getOracleByPubkey","queryFee","rlpEncode","_rlp","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackTx","_getRaw","WeakSet","_entriesRaw","MPTree","isComplete","binary","unpTx","_classPrivateMethodInitSpec","node","forEach","_classStaticPrivateMethodGet","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","get","d","_classPrivateMethodGet","_getRaw2","toObject","_entriesRaw2","path","_key","searchFrom","_MPTree","substring","rec","idx","genMPTreeField","genWrappedField","ORACLE_TTL_TYPES","DRY_RUN_ACCOUNT","pub","CallReturnType","entryAny","entry","entrySignedTx","SignedTx","entryMtreeValueArray","entryTreesPoi","TreesPoi","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","balance","flags","gaContract","gaAuthFun","encoded","signatures","raw","SpendTx","recipientId","ttl","accountId","status","NamePreclaimTx","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","pointers2","NameTransferTx","NameRevokeTx","owner","ctVersion","boolean","referers","deposit","gasPrice","callData","callerId","contractId","callerNonce","gasUsed","returnValue","returnType","enumeration","queryFormat","responseFormat","oracleTtlValue","oracleTtlType","delta","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelSnapshotSoloTx","to","caller","callStack","ChannelClientReconnectTx","role","pubkey","accounts","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","authFun","gaId","authData","payerId","GaMetaTxAuthData","rlpDecode","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","unpackRecord","encodedRecord","expectedTag","index","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","spendTx","spendTxParams","GenerateSpendTx","txToPayFor","signTransaction","innerTx","payForTransaction","domain","onInput","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","aci","_hoisted_14","_hoisted_15","toPromise","dataEncoded","_hoisted_16","signTypedData","_hoisted_17","_hoisted_18","_hoisted_19","verifySignature","_hoisted_20","verifyAddress","verifyPromise","verifyTypedData","_hoisted_21","_hoisted_22","TypeResolver","ContractByteArrayEncoder","_aeternityAeppCalldata","hashJson","_canonicalize","canonicalize","hashDomain","domainAci","record","option","domainType","resolveType","fateValue","encodeWithType","hashTypedData","operation","parameter","dataParsed","parse","aciParsed","dataType","getter","DelegationTag","AensPreclaim","AensName","AensWildcard","signPromise","sign","oracleAddressField","queryIdField","accountAddress","signDelegationToContract","isOracle","signNameDelegationToContract","signAllNamesDelegationToContract","signOracleQueryDelegationToContract","Connect","Basic","Contracts","PayForTx","TypedData","DelegationSignature","render","semverSatisfies","getComponents","i","versionComponents","geComponents","ltComponents","base","max","componentsToNumber","reverse","reduce","acc","vNumber","geNumber","ltNumber","genRequestQueuesPolicy","requestQueues","Map","policy","sendRequest","request","next","_requestQueues$get","headers","delete","getResponse","req","set","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","url","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","_error$response","bodyAsText","e","genVersionCheckPolicy","ignorePath","versionPromise","genRetryOnFailurePolicy","retryCount","retryOverallDelay","statusesToNotRetry","intervals","fill","_","intervalSum","a","b","intervalsInMs","attempt","urlParsed","searchParams","_e$response$status","_e$response","Header","className","modelProperties","serializedName","prevHash","prevKeyHash","miner","beneficiary","pow","constraints","MinItems","MaxItems","element","time","pofHash","txsHash","ErrorModel","reason","KeyBlock","HashResponse","HeightResponse","MicroBlockHeader","SignedTxs","transactions","blockHeight","blockHash","Tx","uberParent","polymorphicDiscriminator","clientName","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","RegExp","allowedValues","Delegates","OffChainUpdate","op","RelativeTTL","isConstant","Ttl","NamePointer","CountResponse","count","Generation","keyBlock","microBlocks","payable","NextNonceResponse","DryRunInput","top","txs","txEvents","DryRunAccount","pubKey","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","results","DryRunResult","callObj","ContractCallObject","Event","topics","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","EncodedTx","PostTxResponse","ContractObject","referrerIds","ByteCode","bytecode","PoI","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","NameEntry","PeerPubKey","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","InclusiveMaximum","InclusiveMinimum","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","OracleRespondTx","CommitmentId","NameHash","ChannelSetDelegatesTx","PubKey","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","Peers","peers","blocked","PeerCount","connected","available","PeerCountConnected","PeerCountAvailable","verified","unverified","UnsignedTx","TokenSupply","contractOracles","locked","pendingRewards","total","GAAttachTx","GAMetaTx","CheckTxInPoolResponse","OffChainTransfer","OffChainWithdrawal","OffChainDeposit","OffChainNewContract","OffChainCallContract","CreateContractUnsignedTx","discriminators","accept","parameterPath","mapper","$host","skipEncoding","intAsString","contentType","DryRunInputMapper","body1","EncodedTxMapper","fromParam","limit","typeParam","Node","coreClient","_ref","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","getTopHeader","sendOperationRequest","getTopHeaderOperationSpec","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeight","getCurrentKeyBlockHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getKeyBlockByHash","getKeyBlockByHashOperationSpec","getKeyBlockByHeight","getKeyBlockByHeightOperationSpec","getMicroBlockHeaderByHash","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHash","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getCurrentGeneration","getCurrentGenerationOperationSpec","getGenerationByHash","getGenerationByHashOperationSpec","getGenerationByHeight","getGenerationByHeightOperationSpec","getAccountByPubkey","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHeightOperationSpec","getAccountByPubkeyAndHash","getAccountByPubkeyAndHashOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAccountNextNonceOperationSpec","protectedDryRunTxs","protectedDryRunTxsOperationSpec","getTransactionByHash","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","postTransaction","postTransactionOperationSpec","getContract","getContractOperationSpec","getContractCode","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getNameEntryByName","getNameEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","serializer","Mappers","httpMethod","responses","bodyMapper","isError","queryParameters","Parameters","urlParameters","headerParameters","requestBody","mediaType","bigIntPropertyNames","numberPropertyNames","_mapData","_encodeArg","_decodeRes","NodeTransformed","NodeApi","operationArguments","operationSpec","_encodeArg2","_decodeRes2","_mapData2","transform","isArray","some","bigInt","_networkIdPromise","ignoreVersion","allowInsecureConnection","additionalPolicies","statusPromise","pipeline","addPolicy","getNetworkId","_classPrivateFieldGet2","nodeNetworkId","p","versions","getTransactionSignerAddress","_getSchema$find","AccountBase","signDelegation","delegation","packDelegation","getBufferToSign","prefixes","rlpBinaryTx","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","account","flat","verifyTransaction","nodeNotCached","clone","_getPollInterval","_expectedMineRate","_microBlockCycle","block","microblock","txBinary","txWithNetworkId","txHashWithNetworkId","checkedKeys","nestedTx","cost","_ref2","oracleCall","contractCreate","contractCall","InvalidTxError","validation","heightCache","cached","cache","Date","now","poll","interval","_interval","awaitHeight","_interval2","currentHeight","waitForTxConfirm","newBlockHeight","sendTransaction","txUnsigned","waitMined","__queue","requestOptions","customHeaders","pollResult","txData","confirmationHeight","assign","verifyTx","getAccount","addr","getGeneration","hashOrHeight","getMicroBlockTransactions","getKeyBlock","getMicroBlockHeader","txDryRunRequests","txDryRunHandler","rs","dryRunRes","Set","resultPayload","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","getName","resolveName","resolveByNode","aensRevoke","nameRevokeTx","aensUpdate","extendPointers","allPointers","hasRawPointers","isIris","nameUpdateTx","aensTransfer","nameTransferTx","aensQuery","opt","nameEntry","freeze","transfer","revoke","extendTtl","aensClaim","claimTx","nameInter","aensPreclaim","preclaimTx","claim","opts","otherOptions","aensBid","recipientIdOrName","transferFunds","fraction","desiredAmount","integerValue","ROUND_HALF_UP","pollForQueries","onQuery","knownQueryIds","checkNewQueries","_await$onNode$getOrac","queries","has","add","stopped","pollForQueryResponse","responseBuffer","getQueryObject","decodedQuery","decodedResponse","respond","respondToQuery","pollForResponse","postQueryToOracle","oracleQueryTx","extendOracleTtl","oracleExtendTx","getOracleObject","oracleRespondTx","pollQueries","postQuery","extendOracle","getQuery","lastArg","registerOracle","oracleRegisterTx","Encoder","Calldata","_getCallResult","_sendAndProcess","_getFunctionAci","_getContractNameByEvent","_aciContract","onCompiler","compileBySourceCode","fileSystem","sourceCodePath","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult2","_estimateGas","$call","_opt$gasLimit","_other$result","_calldata","_name","_sendAndProcess2","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci2","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent2","decoded","decodeEvent","initialize","validateBytecode","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","nameHash","contractAddressToName","addressToName","variant","eventName","calcHash","arr","ensureOracleQuery","oq","createDelegationSignature","ids","omitAddress","signOpts","createGeneralizedAccount","authFnName","_options$gasLimit","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","_2","chainMethodsOther","chainMethods","aensMethods","spendMethods","oracleMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","getContext","mergeWith","prototype","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","_resolveAccount","ensureNodeConnected","pool","selectedNodeName","select","selectNode","isNodeConnected","getNodesInPool","addresses","_options$networkId","_options$consensusPro","_options$networkId2","_options$consensusPro2","_options$networkId3","_options$consensusPro3","_options$networkId4","_options$consensusPro4","_options$networkId5","AccountRpc","rpcClient","_rpcClient","returnSigned","signedTransaction","allNames","RPC_VERSION","_callbacks","_messageId","_methods","_handleMessage","_sendRequest","_sendResponse","_processResponse","RpcClient","_handleMessage2","_sendRequest2","notify","_processResponse2","methodName","_sendResponse2","callbacks","AeSdkAepp","onAddressChange","onNetworkChange","_ensureConnected","_ensureAccountAccess","_accounts","connectNode","disconnectParams","updateNetwork","_params$node","client","updateAddress","closeConnection","askAddresses","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","_cmpOut$warnings","cmpOut","warning","generateAciBySourceCode","generateAci","TESTNET_NODE_URL","MAINNET_NODE_URL","COMPILER_URL","store","createStore","state","shallowReactive","mutations","setAddress","setNetworkId","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","definition","o","defineProperty","enumerable","g","globalThis","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}