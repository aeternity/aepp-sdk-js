{"version":3,"file":"js/app.43a21751.js","mappings":"89JAKOA,MAAM,O,sEALbC,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,mBACEC,EAAAA,EAAAA,IAAmB,UAAf,cAAU,KAEdC,EAAAA,EAAAA,IAAWC,IAEXF,EAAAA,EAAAA,IAqBM,MArBNG,EAqBM,EApBJH,EAAAA,EAAAA,IAEI,KAFDI,KAAK,IAAKP,OANjBQ,EAAAA,EAAAA,IAAA,CAAAC,OAM2C,UAATC,EAAAC,OAAqBC,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAC,KAAO,UAAS,wBAE1E,IACAR,EAAAA,EAAAA,IAEI,KAFDI,KAAK,IAAKP,OATjBQ,EAAAA,EAAAA,IAAA,CAAAC,OAS2C,cAATC,EAAAC,OAAyBC,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAC,KAAO,cAAa,oBAElF,IACAR,EAAAA,EAAAA,IAEI,KAFDI,KAAK,IAAKP,OAZjBQ,EAAAA,EAAAA,IAAA,CAAAC,OAY2C,aAATC,EAAAC,OAAwBC,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAC,KAAO,aAAY,wBAEhF,IACAR,EAAAA,EAAAA,IAEI,KAFDI,KAAK,IAAKP,OAfjBQ,EAAAA,EAAAA,IAAA,CAAAC,OAe2C,cAATC,EAAAC,OAAyBC,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAC,KAAO,cAAa,eAElF,IACAR,EAAAA,EAAAA,IAMI,KALFI,KAAK,IACJP,OApBPQ,EAAAA,EAAAA,IAAA,CAAAC,OAoBiC,wBAATC,EAAAC,OACjBC,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAC,KAAO,wBAChB,yBAED,IACAR,EAAAA,EAAAA,IAA6E,KAA1EI,KAAK,IAAKP,OAzBjBQ,EAAAA,EAAAA,IAAA,CAAAC,OAyB2C,QAATC,EAAAC,OAAmBC,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAC,KAAO,QAAO,MAAG,KAG1DD,EAAAC,OAAI,WAArBI,EAAAA,EAAAA,KAAoCC,EAAAA,EAAAA,IAARN,EAAAC,MAAI,CA5BlCM,IAAA,MAAAC,EAAAA,EAAAA,IAAA,W,UCCOlB,MAAM,O,0CADbC,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,OACEC,EAAAA,EAAAA,IAIM,MAJNG,EAIM,EAHJH,EAAAA,EAAAA,IAAmF,KAAhFI,KAAK,IAAKP,OAFjBQ,EAAAA,EAAAA,IAAA,CAAAC,OAE2C,UAATC,EAAAC,OAAqBC,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAC,KAAO,UAAS,QAAK,IAC/ER,EAAAA,EAAAA,IAAyF,KAAtFI,KAAK,IAAKP,OAHjBQ,EAAAA,EAAAA,IAAA,CAAAC,OAG2C,WAATC,EAAAC,OAAsBC,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAC,KAAO,WAAU,YAAS,IACrFR,EAAAA,EAAAA,IAA4F,KAAzFI,KAAK,IAAKP,OAJjBQ,EAAAA,EAAAA,IAAA,CAAAC,OAI2C,aAATC,EAAAC,OAAwBC,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAC,KAAO,aAAY,WAAQ,KAGzED,EAAAC,OAAI,WAArBI,EAAAA,EAAAA,KAAoCC,EAAAA,EAAAA,IAARN,EAAAC,MAAI,CAPlCM,IAAA,MAAAC,EAAAA,EAAAA,IAAA,W,UCCOlB,MAAM,S,EADb,a,GAsCOA,MAAM,S,4EAtCbC,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,OACEC,EAAAA,EAAAA,IAiCM,MAjCNG,EAiCM,EAhCJH,EAAAA,EAAAA,IAKM,aAJJA,EAAAA,EAAAA,IAGQ,wBAFNA,EAAAA,EAAAA,IAA8D,SAJtE,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAIwBJ,EAAAS,cAAaL,GAAEM,KAAK,QAAQC,MAAM,W,iBAAlCX,EAAAS,iBAAa,eAJrCG,EAAAA,EAAAA,IAIsE,kCAIlEnB,EAAAA,EAAAA,IAMM,aALJA,EAAAA,EAAAA,IAGQ,wBAFNA,EAAAA,EAAAA,IAAqE,SAV7E,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAUwBJ,EAAAS,cAAaL,GAAEM,KAAK,QAAQC,MAAM,kB,iBAAlCX,EAAAS,iBAAa,eAVrCG,EAAAA,EAAAA,IAU6E,wBAGvEnB,EAAAA,EAAAA,IAAqD,sBAAhDA,EAAAA,EAAAA,IAA0C,SAbrD,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAa2BJ,EAAAa,uBAAsBT,I,iBAAtBJ,EAAAa,8BAGTb,EAAAc,kBAAe,WAA7BvB,EAAAA,EAAAA,IAAsE,UAhB1EgB,IAAA,EAgBoCL,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAC,YAAAD,EAAAC,cAAAF,KAAY,eAChCf,EAAAS,gBAAa,WAAhClB,EAAAA,EAAAA,IAAgG,UAjBpGgB,IAAA,EAiBuCW,SAAUlB,EAAAmB,iBAAmBjB,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAI,SAAAJ,EAAAI,WAAAL,KAAS,UAAO,EAjB3FM,KAAAb,EAAAA,EAAAA,IAAA,OAmBkBR,EAAAsB,wBAAqB,WAAnC/B,EAAAA,EAAAA,IAA6F,UAnBjGgB,IAAA,EAmB0CL,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEf,EAAAsB,uBAAAtB,EAAAsB,yBAAAP,KAAuB,sBAnBxEP,EAAAA,EAAAA,IAAA,OAqBoBR,EAAAc,kBAAe,WAA/BvB,EAAAA,EAAAA,IAYWC,EAAAA,GAAA,CAjCfe,IAAA,mBAsBMd,EAAAA,EAAAA,IAAM,qBACNA,EAAAA,EAAAA,IAAkD,UAAzCS,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAO,aAAAP,EAAAO,eAAAR,KAAa,iBAC7BtB,EAAAA,EAAAA,IAAqF,UAA5ES,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEY,EAAAQ,kBAAkB,YAAa,aAAY,sBAC3D/B,EAAAA,EAAAA,IAAyF,UAAhFS,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEY,EAAAQ,kBAAkB,cAAe,aAAY,wBAC7D/B,EAAAA,EAAAA,IAAyF,UAAhFS,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEY,EAAAQ,kBAAkB,YAAa,eAAc,wBAC7D/B,EAAAA,EAAAA,IAA6F,UAApFS,QAAKC,EAAA,MAAAA,EAAA,IAAAC,GAAEY,EAAAQ,kBAAkB,cAAe,eAAc,0BAE/D/B,EAAAA,EAAAA,IAGM,2BAFJA,EAAAA,EAAAA,IAAuB,WAAlB,gBAAY,KACjBA,EAAAA,EAAAA,IAAqF,YAAAgC,EAAAA,EAAAA,IAA7EzB,EAAA0B,YAAYC,KAAKC,GAAYA,EAAQC,QAAQC,MAAM,EAAG,KAAIC,KAAK,OAAD,YA/B9EvB,EAAAA,EAAAA,IAAA,UAoCEd,EAAAA,EAAAA,IAAyFsC,EAAA,CAAzEC,OAASC,GAAO,KAAUC,gBAAgBC,mBAAmBF,I,oBAE7EzC,EAAAA,EAAAA,IAgBM,MAhBN4C,EAgBM,EAfJ5C,EAAAA,EAAAA,IAUM,2BATJA,EAAAA,EAAAA,IAAqB,WAAhB,cAAU,KACfA,EAAAA,EAAAA,IAOM,YAAAgC,EAAAA,EAAAA,KALDzB,EAAAc,gBAAmB,mBAAkCd,EAAAsB,uBAAqB,qBAAsCtB,EAAAmB,kBAAgB,yDAOvI1B,EAAAA,EAAAA,IAGM,2BAFJA,EAAAA,EAAAA,IAAsB,WAAjB,eAAW,KAChBA,EAAAA,EAAAA,IAA2B,YAAAgC,EAAAA,EAAAA,IAAnBT,EAAAsB,YAAU,W,CC3CjB,MAAeC,UAAkBC,MACtCC,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAMK,MAAMC,UAAqBP,EAChCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,cACd,EAMK,MAAME,UAAkBR,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAMK,MAAMG,UAAkBT,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAgBK,MAAMI,UAAsBV,EACjCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,eACd,EAMK,MAAMK,UAAsBX,EACjCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,eACd,EAMK,MAAMM,UAA0BZ,EACrCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,mBACd,EAMK,MAAMO,UAAkBb,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAMK,MAAMQ,UAAyBd,EACpCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,kBACd,EAMK,MAAMS,UAAoBf,EAC/BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,aACd,EAMK,MAAMU,UAAsBhB,EACjCE,WAAAA,CAAYe,EAAsBC,EAAsBC,GACtDf,MAAM,GAAGa,eAA0BC,UAAoBC,aACvDd,KAAKC,KAAO,eACd,EAMK,MAAMc,UAA6BR,EACxCV,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,sBACd,EAoCK,MAAMe,UAA+BrB,EAC1CE,WAAAA,GACEE,MAAM,oCACNC,KAAKC,KAAO,wBACd,EAgBK,MAAMgB,UAAwBtB,EACnCE,WAAAA,CAAYqB,EAAgBC,GAC1BpB,MAAM,mBAAmBmB,qCAA0CC,KACnEnB,KAAKC,KAAO,iBACd,EAMK,MAAMmB,UAAkBzB,EAC7BE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,WACd,EAMK,MAAMoB,UAAiC1B,EAC5CE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,0BACd,EAMK,MAAMqB,UAAiC3B,EAC5CE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,0BACd,EAMK,MAAMsB,UAA4B5B,EACvCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,qBACd,EAMK,MAAMuB,UAAgC7B,EAC3CE,WAAAA,CAAY4B,EAAoBC,EAAiBC,EAAmBC,GAClE7B,MACE,eAAe0B,aAAsBC,oBAA0BC,KAC/C,MAAbC,EAAoB,GAAK,MAAMA,MAEpC5B,KAAKC,KAAO,yBACd,EAgBK,MAAM4B,UAAsBlC,EACjCE,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,eACd,EAMK,MAAM6B,UAA0BD,EACrChC,WAAAA,CAAYC,EAAU,2CACpBC,MAAMD,GACNE,KAAKC,KAAO,mBACd,EAMK,MAAM8B,UAAgC7B,EAC3CL,WAAAA,CAAYZ,GACVc,MAAM,eAAed,mBACrBe,KAAKC,KAAO,yBACd,EAMK,MAAM+B,UAAgC7B,EAC3CN,WAAAA,CAAYoC,EAAmCC,GAC7CnC,MAAM,QAAQkC,6BAAoCC,KAClDlC,KAAKC,KAAO,yBACd,EAMK,MAAMkC,UAAiChC,EAC5CN,WAAAA,CAAYuC,EAAoBC,GAC9BtC,MACE,oBAAoBqC,EAAQE,4DAA4DD,EAAWC,cAErGtC,KAAKC,KAAO,0BACd,EAMK,MAAMsC,UAA6BpC,EACxCN,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,sBACd,EAMK,MAAMuC,UAA+BpC,EAC1CP,WAAAA,CAAYC,GACVC,MAAM,6BAA6BD,KACnCE,KAAKC,KAAO,wBACd,EAMK,MAAMwC,UAA6BrC,EACxCP,WAAAA,CAAY6C,GACV3C,MAAM,0CAA0C2C,KAChD1C,KAAKC,KAAO,sBACd,EAgHK,MAAM0C,UAA8BrC,EACzCT,WAAAA,CAAY+C,GACV7C,MAAM,YAAY6C,6DAClB5C,KAAKC,KAAO,uBACd,EAMK,MAAM4C,UAA+BvC,EAC1CT,WAAAA,GACEE,MAAM,6BACNC,KAAKC,KAAO,wBACd,EAMK,MAAM6C,UAA8BxC,EACzCT,WAAAA,CAAYkD,GACVhD,MAAM,yBAAyBgD,gBAC/B/C,KAAKC,KAAO,uBACd,EAMK,MAAM+C,UAAqC1C,EAChDT,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,8BACd,EAMK,MAAMgD,UAAoC3C,EAC/CT,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,6BACd,EAMK,MAAMiD,UAAgC5C,EAC3CT,WAAAA,GACEE,MAAM,0DACNC,KAAKC,KAAO,yBACd,EAMK,MAAMkD,UAAiC7C,EAC5CT,WAAAA,GACEE,MAAM,6BACNC,KAAKC,KAAO,0BACd,EAMK,MAAMmD,UAA4B9C,EAGvCT,WAAAA,CAAYC,EAAiBuD,GAC3BtD,MAAM,qBAA+B,MAAXD,EAAkB,GAAK,MAAMA,OACvDE,KAAKC,KAAO,sBACZD,KAAKqD,YAAcA,CACrB,EAMK,MAAMC,WAAoChD,EAC/CT,WAAAA,CAAYI,GACVF,MAAM,YAAYE,+BAClBD,KAAKC,KAAO,6BACd,EAMK,MAAMsD,WAAgCjD,EAC3CT,WAAAA,CAAY2D,EAAaC,GACvB1D,MACE,mBAAmByD,mBAAwBC,mEAG7CzD,KAAKC,KAAO,yBACd,EAMK,MAAMyD,WAAoCpD,EAC/CT,WAAAA,CAAY8D,EAAuBC,GACjC7D,MACE,4BAA4B4D,sBAAkCC,yDAGhE5D,KAAKC,KAAO,6BACd,EAMK,MAAM4D,WAAsCvD,EACjDT,WAAAA,CAAY+D,EAAuCE,GACjD/D,MACE,kCAAkC+D,EAAc,GAAG,6CAC7CF,QAAmBE,EAAc/E,KAAI,EAAEkB,KAAU,IAAIA,OAASd,KAAK,wGAG3Ea,KAAKC,KAAO,+BACd,EAMK,MAAM8D,WAA6BxD,EACxCV,WAAAA,GACEE,MAAM,oBACNC,KAAKC,KAAO,sBACd,EAMK,MAAM+D,WAAoCzD,EAC/CV,WAAAA,GACEE,MAAM,0CACNC,KAAKC,KAAO,6BACd,EAMK,MAAMgE,WAA+B1D,EAC1CV,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,wBACd,EAMK,MAAMiE,WAA+B3D,EAC1CV,WAAAA,CAAYsE,GACVpE,MAAM,wBAAwBoE,KAC9BnE,KAAKC,KAAO,wBACd,EAMK,MAAMmE,WAA+B7D,EAC1CV,WAAAA,CAAYwE,GACVtE,MAAM,wBAAwBsE,KAC9BrE,KAAKC,KAAO,wBACd,EAMK,MAAMqE,WAA2B9D,EACtCX,WAAAA,CAAYI,GACVF,MAAM,kBAAkBE,mBACxBD,KAAKC,KAAO,oBACd,EAMK,MAAMsE,WAA0B/D,EACrCX,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,mBACd,EAMK,MAAMuE,WAAoB/D,EAC/BZ,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,aACd,EAMK,MAAMwE,WAA2BhE,EACtCZ,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,oBACd,EAMK,MAAMyE,WAAoBjE,EAC/BZ,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,aACd,EAgBK,MAAM0E,WAA8BlE,EACzCZ,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,uBACd,EAMK,MAAM2E,WAA4BnE,EACvCZ,WAAAA,CAAYgF,GACV9E,MAAM,qBAAqB8E,gBAC3B7E,KAAKC,KAAO,qBACd,EAMK,MAAM6E,WAA4BrE,EACvCZ,WAAAA,CAAYlC,EAAa+D,GACvB3B,MAAM,8CAA8CpC,aAAe+D,KACnE1B,KAAKC,KAAO,qBACd,EAMK,MAAM8E,WAAyBtE,EACpCZ,WAAAA,CAAYqC,GACVnC,MAAM,qBAAqBmC,gBAC3BlC,KAAKC,KAAO,aACd,EAMK,MAAM+E,WAA0BvE,EACrCZ,WAAAA,CAAYoF,GACVlF,MAAM,eAAekF,2BACrBjF,KAAKC,KAAO,mBACd,EAMK,MAAMiF,WAA8BxE,EACzCb,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,uBACd,EAMK,MAAMkF,WAA+BzE,EAC1Cb,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,wBACd,EAMK,MAAMmF,WAA2B1E,EACtCb,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,oBACd,ECzvBa,MAAeoF,GAGlBxF,WAAAA,EAAY,MAAEyF,GAAQ,IAC9BtF,KAAKsF,MAAQA,CACf,CAOA9G,OAAAA,CAEE+G,EAEAC,GAEA,GAAIxF,KAAKyF,cAAe,MAAM,IAAIP,GAAsB,wBAC1D,CAKA7G,UAAAA,GACE,IAAK2B,KAAKyF,cACR,MAAM,IAAIN,GAAuB,kDACrC,CAKUO,cAAAA,CAAe5F,GACnBE,KAAKsF,OAAOK,QAAQC,IAAI,mBAAoB9F,EAClD,CAKA+F,WAAAA,CAAY/F,GACNE,KAAKsF,OAAOK,QAAQC,IAAI,gBAAiB9F,EAC/C,E,wBCxCK,IAAWgG,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,2BAAjBA,EAAiB,qBAAjBA,CAAiB,MAwBjBC,GAAO,SAAPA,GAAO,OAAPA,EAAO,gDAAPA,EAAO,kCAAPA,EAAO,yBAAPA,EAAO,6BAAPA,EAAO,gCAAPA,EAAO,2BAAPA,EAAO,8BAAPA,EAAO,kCAAPA,EAAO,oCAAPA,EAAO,wCAAPA,EAAO,oCAAPA,EAAO,sCAAPA,CAAO,MA8BzB,MAAMC,GAAsE,GAKrE,MAAeC,WAAiBtG,EAOrCuG,MAAAA,GACE,MAAO,CACLC,KAAMnG,KAAKmG,KACXrG,QAASE,KAAKF,QACdsG,KAAMpG,KAAKoG,KAEf,CAEA,kBAAOC,CAAYC,GACjB,MAAMC,EAASP,GAAUQ,MAAMC,GAAOA,EAAGN,OAASG,EAAKH,OACvD,GAAc,MAAVI,EAAgB,MAAM,IAAI1E,EAAc,kCAAkCyE,EAAKH,QACnF,OAAO,IAAII,EAAOD,EAAKF,KACzB,EAMK,MAAMM,WAAmCT,GAK9CpG,WAAAA,CAAYuG,GACVrG,MAAM,wBAAuB4G,EAAAA,GAAAA,GAAA,YAHf,GAId3G,KAAKoG,KAAOA,EACZpG,KAAKC,KAAO,4BACd,GACD0G,EAAAA,GAAAA,GAVYD,GAA0B,OACd,GAUzBV,GAAUY,KAAKF,IAKR,MAAMG,WAA+BZ,GAK1CpG,WAAAA,CAAYuG,GACVrG,MAAM,+BAA8B4G,EAAAA,GAAAA,GAAA,YAHtB,GAId3G,KAAKoG,KAAOA,EACZpG,KAAKC,KAAO,wBACd,GACD0G,EAAAA,GAAAA,GAVYE,GAAsB,OACV,GAUzBb,GAAUY,KAAKC,IAKR,MAAMC,WAAoCb,GAK/CpG,WAAAA,GACEE,MAAM,iCAAgC4G,EAAAA,GAAAA,GAAA,YAHxB,GAId3G,KAAKC,KAAO,6BACd,GACD0G,EAAAA,GAAAA,GATYG,GAA2B,OACf,GASzBd,GAAUY,KAAKE,IAKR,MAAMC,WAA+Bd,GAK1CpG,WAAAA,CAAYuG,GACVrG,MAAM,wCAAuC4G,EAAAA,GAAAA,GAAA,YAH/B,GAId3G,KAAKoG,KAAOA,EACZpG,KAAKC,KAAO,wBACd,GACD0G,EAAAA,GAAAA,GAVYI,GAAsB,OACV,GAUzBf,GAAUY,KAAKG,IAKR,MAAMC,WAA6Bf,GAKxCpG,WAAAA,GACEE,MAAM,wCAAuC4G,EAAAA,GAAAA,GAAA,YAH/B,IAId3G,KAAKC,KAAO,sBACd,GACD0G,EAAAA,GAAAA,GATYK,GAAoB,OACR,IASzBhB,GAAUY,KAAKI,IAKR,MAAMC,WAA+BhB,GAK1CpG,WAAAA,CAAYZ,GACVc,MAAM,sCAAsCd,MAAW0H,EAAAA,GAAAA,GAAA,YAHzC,IAId3G,KAAKoG,KAAOnH,EACZe,KAAKC,KAAO,wBACd,GACD0G,EAAAA,GAAAA,GAVYM,GAAsB,OACV,IAUzBjB,GAAUY,KAAKK,IAKR,MAAMC,WAAyBjB,GAKpCpG,WAAAA,GACEE,MAAM,iEAAgE4G,EAAAA,GAAAA,GAAA,YAHxD,IAId3G,KAAKC,KAAO,kBACd,GACD0G,EAAAA,GAAAA,GATYO,GAAgB,OACJ,IASzBlB,GAAUY,KAAKM,IAKR,MAAMC,WAAyBlB,GAKpCpG,WAAAA,CAAYuH,GACVrH,MAAM,sCAAsCqH,OAAcT,EAAAA,GAAAA,GAAA,YAH5C,IAId3G,KAAKoG,KAAOgB,EACZpH,KAAKC,KAAO,kBACd,GACD0G,EAAAA,GAAAA,GAVYQ,GAAgB,OACJ,IAUzBnB,GAAUY,KAAKO,IAKR,MAAME,WAA+BpB,GAK1CpG,WAAAA,GACEE,MAAM,qBAAoB4G,EAAAA,GAAAA,GAAA,aAHX,OAIf3G,KAAKC,KAAO,wBACd,E,2YACD0G,EAAAA,GAAAA,GATYU,GAAsB,QACT,OAS1BrB,GAAUY,KAAKS,IChO2D,IAAAC,GAAA,IAAAC,QAAAC,GAAA,IAAAD,QAAAE,GAAA,IAAAF,QAW3D,MAAMG,WAAuCrC,GAyB1DxF,WAAAA,EAAY,OACV8H,EAAM,KACNC,EAAOC,OAAM,OACbC,EAAM,cACNC,EAAa,iBACbC,EAAmBlC,GAAkBmC,WAClCC,GAQD,CAAC,GACHnI,MAAMmI,GA/BRC,GAAA,KAAAb,QAAa,GAEba,GAAA,KAASX,QAAO,GAEhBW,GAAA,KAASV,QAAK,GA4BZW,GAAKZ,GAALxH,KAAe2H,GACfS,GAAKX,GAALzH,KAAa4H,GACb5H,KAAK8H,OAASA,EACd9H,KAAK+H,cAAgBA,EACrB/H,KAAKgI,iBAAmBA,CAC1B,CAEAvC,WAAAA,GACE,OAAwB,MAAjBzF,KAAKqI,QACd,CAES7J,OAAAA,CACP+G,EACAC,GAEAzF,MAAMvB,QAAQ+G,EAAWC,GACzBxF,KAAKqI,SAAYvI,IAA+B,IAAAwI,EAE9C,GAC0B,kBAAjBxI,EAAQsG,MAC0C,SAApC,QAArBkC,EAACxI,EAAQsG,KAAKmC,eAAO,IAAAD,EAAAA,EAAIxI,EAAQsG,KAAKA,MAAMmC,SAE5C,OACF,GAAmB,MAAfvI,KAAK8H,QAAkB9H,KAAK8H,SAAWhI,EAAQgI,OAAQ,OAC3D,GAAoB,MAAhBU,GAAKhB,GAALxH,OAAwBwI,GAAKhB,GAALxH,QAAiBF,EAAQ8C,OAAQ,OAC7D5C,KAAK0F,eAAe5F,GACpB,IAAI,KAAEsG,GAAStG,EACf,GAAiB,MAAbsG,EAAKtI,KAAc,CACrB,GAAIgC,EAAQsG,KAAKtI,OAASkC,KAAKgI,iBAAkB,OACjD5B,EAAOA,EAAKA,IACd,CACAb,EAAUa,EAAMtG,EAAQgI,OAAQhI,EAAQ8C,OAAO,EAEjD4F,GAAKf,GAALzH,MAAWyI,iBAAiB,UAAWzI,KAAKqI,UAC5CD,GAAKd,GAALtH,KAAqBwF,EACvB,CAESnH,UAAAA,GAEP,GADA0B,MAAM1B,aACe,MAAjB2B,KAAKqI,UAA0C,MAAtBG,GAAKlB,GAALtH,MAC3B,MAAM,IAAI6B,EAAc,2CAE1B2G,GAAKf,GAALzH,MAAW0I,oBAAoB,UAAW1I,KAAKqI,iBACxCrI,KAAKqI,SACZG,GAAKlB,GAALtH,MAAkB2I,KAAlB3I,MACAoI,GAAKd,GAALtH,UAAqB4I,EACvB,CAES/C,WAAAA,CAAYgD,GAAgB,IAAAC,EACnC,GAAoB,MAAhBN,GAAKhB,GAALxH,MAAsB,MAAM,IAAIoF,GAAmB,sCACvD,MAAMtF,EAAgC,MAAtBE,KAAK+H,cAAwB,CAAEjK,KAAMkC,KAAK+H,cAAe3B,KAAMyC,GAAQA,EACvF9I,MAAM8F,YAAY/F,GAClB0I,GAAKhB,GAALxH,MAAa+I,YAAYjJ,EAAoB,QAAbgJ,EAAE9I,KAAK8H,cAAM,IAAAgB,EAAAA,EAAI,IACnD,ECtFF,QACEE,EACAC,KAEA,GAAc,MAAVpB,OACF,MAAM,IAAIxG,EACR,wEAEJ,MAAM6H,EAAmB,CAAC,EAiC1B,OA/BAF,EAAWxK,SACT,EACI2K,SAAQC,UACVtB,EACAlF,KAEA,GAAIuG,IAAWpD,GAAQsD,gBAAwC,MAAtBH,EAAQE,EAAO1G,IAAa,OAErE,MAAM4G,EAAS,CACbC,KAAMH,EACNI,aAAAA,GACE,OAAO,IAAI9B,GAA+B,CACxCC,OAAQ/E,KACY,cAAhBwG,EAAOtL,KACP,CACEiK,cAAejC,GAAkB2D,WACjCzB,iBAAkBlC,GAAkBmC,WACd,SAAlBJ,OAAOC,QAAqB,CAAEA,OAAQD,OAAOC,SAEnD,CACEA,OAAQsB,EAAOtB,SAGzB,GAEFoB,EAAQI,EAAOC,KAAK7G,IAAM4G,EAC1BL,EAAW,CAAEC,UAASQ,UAAWJ,GAAS,IAE5C,SAGK,IAAMN,EAAW3K,YACzB,E,yFC5Cc,MAAesL,I,4FCjBvB,MAAMC,GAAQC,SACnB,IAAIC,SAASC,IACXC,WAAWD,EAASE,EAAS,IAGpBC,GAAYA,CACvBC,EACA1G,IAK6B2G,OAAOC,YAAYD,OAAOE,QAAQH,GAAQpL,IAAI0E,IAGvE8G,GAAmB,MACvB,IAEE,OADAC,GAAAA,OAAOC,OAAO,CAACC,WAAWC,KAAK,OACxB,CACT,CAAE,MAAOC,GACP,OAAO,CACT,CACD,EAPwB,GASZC,GAAgBN,GACzB,CAACO,EAA6BC,IAC5BP,GAAAA,OAAOC,OACLK,EAAK/L,KAAKiM,GAAOR,GAAAA,OAAOG,KAAKK,KAC7BD,GAEJP,GAAAA,OAAOC,OAOJ,SAASQ,GACdtN,EACAwM,GAEA,OAAOxM,KAAOwM,CAChB,CAOO,SAASe,GAAiBC,EAAWC,GAC1C,OAAOA,EAAMC,SAASF,EACxB,CAEO,SAASG,GAAuBV,GACrC,OACEA,aAAiBW,GAAAA,IACI,MAArBX,EAAMY,YACNZ,EAAM9K,QAAQuL,SAAS,oBAE3B,CAYO,SAASI,GAAYb,GAC1B,KAAIA,aAAiBhL,OACrB,MAAMgL,CACR,CCvEO,IAAKc,GAAQ,SAARA,GAAQ,OAARA,EAAQ,qBAARA,EAAQ,uBAARA,EAAQ,qBAARA,EAAQ,oBAARA,EAAQ,uBAARA,EAAQ,gBAARA,EAAQ,wBAARA,EAAQ,0BAARA,EAAQ,yBAARA,EAAQ,2BAARA,EAAQ,oBAARA,EAAQ,eAARA,EAAQ,sBAARA,EAAQ,oBAARA,EAAQ,sBAARA,EAAQ,uBAARA,EAAQ,uBAARA,EAAQ,yBAARA,EAAQ,kBAARA,EAAQ,mBAARA,EAAQ,mBAARA,EAAQ,aAARA,EAAQ,cAARA,EAAQ,YAARA,EAAQ,mBAARA,EAAQ,sBAARA,EAAQ,kBAARA,CAAQ,MCWb,SAASC,GAAWC,GACzB,OAAO,IAAIC,IAASC,OAAOF,GAAOG,QACpC,CAKA,MAAMC,GAAc,CAClBN,GAASO,kBACTP,GAASQ,iBACTR,GAASS,mBACTT,GAASU,YACTV,GAASW,YACTX,GAASY,eACTZ,GAASa,MACTb,GAASc,IACTd,GAASe,WACTf,GAASgB,cACThB,GAASiB,WAELC,GAAc,CAClBlB,GAASmB,aACTnB,GAASoB,eACTpB,GAASqB,aACTrB,GAASsB,YACTtB,GAASuB,eACTvB,GAASwB,QACTxB,GAASyB,gBACTzB,GAAS0B,OACT1B,GAAS2B,cACT3B,GAAS4B,cACT5B,GAAS6B,eACT7B,GAAS8B,iBACT9B,GAAS+B,UACT/B,GAASgC,WACThC,GAASiC,WACTjC,GAASkC,MAMLC,GAAkB,CACtB,CAACnC,GAASmB,cAAe,GACzB,CAACnB,GAASoB,gBAAiB,GAC3B,CAACpB,GAASqB,cAAe,GACzB,CAACrB,GAASsB,aAAc,GACxB,CAACtB,GAASuB,gBAAiB,GAC3B,CAACvB,GAASwB,SAAU,GACpB,CAACxB,GAASyB,iBAAkB,GAC5B,CAACzB,GAAS0B,QAAS,GACnB,CAAC1B,GAAS2B,eAAgB,GAC1B,CAAC3B,GAAS4B,eAAgB,GAC1B,CAAC5B,GAAS6B,gBAAiB,GAC3B,CAAC7B,GAAS8B,kBAAmB,GAC7B,CAAC9B,GAAS+B,WAAY,GACtB,CAAC/B,GAASgC,YAAa,GACvB,CAAChC,GAASiC,YAAa,GACvB,CAACjC,GAASa,OAAQ,IAGpB,SAASuB,GAAkB1H,EAAkBtI,GAC3C,IAAKmN,GAAcnN,EAAM+P,IAAkB,OAC3C,MAAME,EAASF,GAAgB/P,GAC/B,GAAc,MAAViQ,GAAkB3H,EAAK4H,SAAWD,EACtC,MAAM,IAAItJ,GAAmB,qBAAqBsJ,gBAAqB3H,EAAK4H,iBAC9E,CAEA,MAAMC,GAAeC,GAAgCvC,GAAWA,GAAWuC,IAAUhP,MAAM,EAAG,GAExFiP,GAAeD,GAAgCrD,GAAc,CAACqD,EAASD,GAAYC,KAEzF,SAASE,GAAWC,GAClB,MAAMH,EAAUG,EAAOnP,MAAM,GAAI,GACjC,IAAK+O,GAAYC,GAASI,OAAOD,EAAOnP,OAAO,IAAK,MAAM,IAAI6E,GAC9D,OAAOmK,CACT,CAEA,MAAMK,GAAS,CACbC,OAASH,GAAuBF,GAAYE,GAAQ/L,SAAS,UAC7DmM,OAASC,GAAmBN,GAAW5D,GAAAA,OAAOG,KAAK+D,EAAQ,YAGvDC,GAAS,CACbH,OAASH,GAAuBO,GAAAA,EAAKJ,OAAOL,GAAYE,IACxDI,OAASC,GAAmBN,GAAW5D,GAAAA,OAAOG,KAAKiE,GAAAA,EAAKH,OAAOC,MAG3DG,GAAaC,IACjB,MAAMC,EAAa/C,GAAYxF,MAAMwI,GAAMA,IAAMF,IACjD,GAAkB,MAAdC,EAAoB,MAAO,CAACA,EAAYR,IAC5C,MAAMU,EAAarC,GAAYpG,MAAMwI,GAAMA,IAAMF,IACjD,GAAkB,MAAdG,EAAoB,MAAO,CAACA,EAAYN,IAC5C,MAAM,IAAIhO,EACR,SACA,UAAU,IAAIiM,MAAgBZ,IAAa7M,KAAK,QAChD2P,EACD,EASI,SAASL,GAAOrI,GACrB,MAAOlE,EAAQgN,EAAgBC,GAAS/I,EAAKgJ,MAAM,KACnD,GAAsB,MAAlBF,EAAwB,MAAM,IAAI1K,GAAY,mCAAmC4B,KACrF,GAAa,MAAT+I,EAAe,MAAM,IAAI3K,GAAY,oCAAoC4B,KAC7E,MAAOtI,EAAMuR,GAAWR,GAAU3M,GAC5BgM,EAAUmB,EAAQZ,OAAOS,GAE/B,OADApB,GAAkBI,EAASpQ,GACpBoQ,CACT,CAQO,SAASM,GAA8BpI,EAAkBtI,GAC9D,MAAO,CAAEuR,GAAWR,GAAU/Q,GAE9B,OADAgQ,GAAkB1H,EAAMtI,GACjB,GAAGA,KAAQuR,EAAQb,OAAOpI,IACnC,CChIe,MAAMkJ,WAAmB3F,GAKtC9J,WAAAA,CAAY0P,EAA0CtQ,GACpDc,QACAC,KAAKwP,WAAaD,EAClBvP,KAAKf,QAAUA,CACjB,CAEA,UAAMwQ,CAAKC,GACT,MAAMtJ,EAAOoI,GAAOhE,GAAAA,OAAOG,KAAK+E,GAAUhE,GAASiB,YAC7C,UAAEgD,SAAoB3P,KAAKwP,WAAWI,QAAQ7J,GAAQ8J,WAAY,CACtEC,UAAW9P,KAAKf,QAChBmH,SAEF,OAAOqI,GAAOkB,EAChB,CAEA,qBAAeI,CACbC,GACA,QAAEC,EAAO,UAAE7I,GAA6D,CAAC,GAEzE,GAAiB,MAAbA,EAAmB,MAAM,IAAIzG,EAAc,YAAa,WAAYyG,GACxE,MAAM8I,QAAYlQ,KAAKwP,WAAWI,QAAQ7J,GAAQ0J,KAAM,CACtDK,UAAW9P,KAAKf,QAChB+Q,KACAG,cAAc,EACd/I,YACA6I,YAEF,GAA6B,MAAzBC,EAAIE,kBACN,MAAM,IAAI9O,EAAyB,kDAErC,OAAO4O,EAAIE,iBACb,CAEA,iBAAeC,CAAYvQ,GACzB,MAAM,UAAE6P,SAAoB3P,KAAKwP,WAAWI,QAAQ7J,GAAQsK,YAAa,CACvEP,UAAW9P,KAAKf,QAChBa,YAEF,OAAO0K,GAAAA,OAAOG,KAAKgF,EAAW,MAChC,CAEA,mBAAeW,CACblK,EACAmK,GACA,KAAEtQ,EAAI,QAAEyB,EAAO,gBAAEqB,EAAe,UAAEqE,GAA2D,CAAC,GAE9F,MAAM,UAAEuI,SAAoB3P,KAAKwP,WAAWI,QAAQ7J,GAAQuK,cAAe,CACzER,UAAW9P,KAAKf,QAChBuR,OAAQ,CACNvQ,OACAyB,UACA0F,YACArE,mBAEFwN,MACAnK,SAEF,OAAOuJ,CACT,CAEA,oBAAec,CAAeC,GAC5B,MAAM,UAAEf,SAAoB3P,KAAKwP,WAAWI,QAAQ7J,GAAQ0K,eAAgB,CAC1EC,aACAZ,UAAW9P,KAAKf,UAElB,OAAO0Q,CACT,ECtDK,MAAMgB,GAAc,E,4aC5BwB,IAAAC,GAAA,IAAArJ,QAAAsJ,GAAA,IAAAtJ,QAAAuJ,GAAA,IAAAvJ,QAAAwJ,GAAA,IAAAC,QAkCpC,MAAMC,GAenBpR,WAAAA,CACEmJ,EACAxD,EACA0L,GACAC,GAAA,KAAAJ,IAbF5I,GAAA,KAASyI,GAAa,IAAIQ,KAK1BjJ,GAAA,KAAA0I,GAAa,GAEb1I,GAAA,KAAS2I,QAAQ,GAOf9Q,KAAKgJ,WAAaA,EAClBZ,GAAK0I,GAAL9Q,KAAgBkR,GAChBlI,EAAWxK,QAAQ6S,GAAAN,GAAA/Q,KAAKsR,IAAeC,KAAKvR,MAAOwF,EACrD,CAgEA,aAAMoK,CACJ3P,EACAmJ,GAGA,OADAiI,GAAAN,GAAA/Q,KAAKwR,IAAY7I,KAAjB3I,KAAmBoI,GAAKyI,GAAL7Q,KAAAwI,GAAKqI,GAAL7Q,MAAmB,GAAIC,EAAMmJ,GACzC,IAAIU,SAAQ,CAACC,EAAS0H,KAC3BjJ,GAAKoI,GAAL5Q,MAAgB0R,IAAIlJ,GAAKqI,GAAL7Q,MAAiB,CAAE+J,UAAS0H,UAAS,GAE7D,CAOAE,MAAAA,CAAqC1R,EAAYmJ,GAC/CiI,GAAAN,GAAA/Q,KAAKwR,IAAY7I,KAAjB3I,UAAkB4I,EAAW3I,EAAMmJ,EACrC,EAaD,eAAAkI,GA5FsBzI,EAAuCf,GAC1D,GAAqB,QAAjBe,GAAKN,QAAmB,MAAM,IAAI/F,EAAuBoP,KAAKC,UAAUhJ,IAC5E,GAAI,WAAYA,GAAO,UAAWA,EAEhC,YADAwI,GAAAN,GAAA/Q,KAAK8R,IAAgBnJ,KAArB3I,KAAsB6I,GAIxB,MAAM+G,EAAU/G,EAChB,IAAIkJ,EACAnH,EACJ,IACE,KAAMgF,EAAQzG,UAAUX,GAAKsI,GAAL9Q,OAAgB,MAAM,IAAIqH,GAClD,MAAM2K,EAAapC,EAAQzG,OAC3B4I,QAAevJ,GAAKsI,GAAL9Q,MAAcgS,GAAYpC,EAAQxG,OAAQtB,EAC3D,CAAE,MAAOmK,GACPxG,GAAYwG,GACZrH,EAAQqH,CACV,CASA,GARkB,MAAdrC,EAAQlN,IACV2O,GAAAN,GAAA/Q,KAAKkS,IAAavJ,KAAlB3I,KACE4P,EAAQlN,GACRkN,EAAQzG,OACR4I,EACS,MAATnH,GAAiBA,aAAiB3E,GAAW2E,EAAQ,IAAI1D,IAGhD,MAAT0D,KAAmBA,aAAiB3E,IAAW,MAAM2E,CAC3D,CAAC,SAAA4G,GAGC9O,EACAyG,EACAC,GAEApJ,KAAKgJ,WAAWnD,YAAY,CAC1B0C,QAAS,SACC,MAAN7F,EAAa,CAAEA,MAAO,CAAC,EAC3ByG,YACc,MAAVC,EAAiB,CAAEA,UAAW,CAAC,GAEvC,CAAC,SAAA8I,GAGCxP,EACAyG,EACA4I,EACAnH,GAEA5K,KAAKgJ,WAAWnD,YAAY,CAC1B0C,QAAS,MACT7F,KACAyG,YACa,MAATyB,EAAgB,CAAEA,MAAOA,EAAM1E,UAAa,CAAE6L,WAEtD,CAAC,SAAAD,IA+BgB,GAAEpP,EAAE,MAAEkI,EAAK,OAAEmH,IAC5B,MAAMI,EAAY3J,GAAKoI,GAAL5Q,MAAgBoS,IAAI1P,GACtC,GAAiB,MAAbyP,EAAmB,MAAM,IAAI1P,EAAqBC,GACzC,MAATkI,EAAeuH,EAAUV,OAAOxL,GAASI,YAAYuE,IACpDuH,EAAUpI,QAAQgI,GACvBvJ,GAAKoI,GAAL5Q,MAAgBqS,OAAO3P,EACzB,C,4aC5I0D,IAAA8M,GAAA,IAAAjI,QAAA+K,GAAA,IAAAtB,QAAAuB,GAAA,IAAAhL,QAQ7C,MAAeiL,WAA+CC,GAAAA,EAc3E,eAAIhN,GACF,OAA0B,MAAnB+C,GAAKgH,GAALxP,KACT,CAOA,YAAI0S,GACF,OAAOlK,GAAK+J,GAALvS,KACT,CAEUH,WAAAA,GACRE,QAAQoR,GAAA,KAAAmB,IAzBVnK,GAAA,KAAAqH,QAAU,GAeVrH,GAAA,KAAAoK,GAA0B,GAW1B,CAYA,qBAAaI,CACX1S,EACA+I,EACA4J,EACAC,GAEA,IAAIC,EAEJ,MAAMC,EAAS,IAAI9B,GACjBjI,GACA,KACEZ,GAAUoH,GAAVoD,OAAuBhK,GACvBR,GAAUmK,GAAVK,EAAsB,IACtBA,EAAUI,KAAK,aAAcF,EAAiB,GAEhD,CACE,CAAC/M,GAAQkN,eAAgB5B,GAAAiB,GAAAM,EAAUM,IAAgB3B,KAAKqB,GACxD,CAAC7M,GAAQoN,eAAgBP,EAAUQ,eAAe7B,KAAKqB,GACvD,CAAC7M,GAAQsN,iBAAmBjK,IAC1B0J,EAAmB1J,EACnB2J,EAAO/J,WAAW3K,YAAY,EAEhC,CAAC0H,GAAQsD,gBAAiB,SAG9BjB,GAAUoH,GAAVoD,EAAuBG,GACvB,MAAMO,QAAmB9K,GAAUgH,GAAVoD,GAAqBhD,QAAQ7J,GAAQvH,QAAS,CACrEyB,OACAyB,QAASiP,GACTkC,gBAEFD,EAAUQ,eAAeE,EAC3B,CAKAjV,UAAAA,GACE,MAAM0U,EAAS1B,GAAAiB,GAAAtS,KAAKuT,IAAa5K,KAAlB3I,MACf+S,EAAOpB,OAAO5L,GAAQsN,gBAAiB,CAAEG,OAAQ,QACjDT,EAAO/J,WAAW3K,YACpB,CAKA,iBAAMM,GACJ,MAAMoU,EAAS1B,GAAAiB,GAAAtS,KAAKuT,IAAa5K,KAAlB3I,MACTyT,QAAkBV,EAAOnD,QAAQ7J,GAAQ9G,aAAS2J,GACxD,OAAO6K,EAAU1U,KAAKE,GAAY,IAAIqQ,GAAWyD,EAAQ9T,IAC3D,CAQA,uBAAML,CACJd,EACAC,GAEA,MAAMgU,QAAeV,GAAAiB,GAAAtS,KAAKuT,IAAa5K,KAAlB3I,MAAqB4P,QAAQ7J,GAAQ2N,iBAAkB,CAAE5V,OAAMC,UAEpF,OADAsT,GAAAiB,GAAAtS,KAAKkT,IAAevK,KAApB3I,KAAqB+R,EAAO9S,SACrBuJ,GAAK+J,GAALvS,KACT,CAKA,wBAAMR,CAAmBF,SACjB+R,GAAAiB,GAAAtS,KAAKuT,IAAa5K,KAAlB3I,MAAqB4P,QAAQ7J,GAAQoN,cAAe7T,EAC5D,EACD,SAAAiU,KA5GG,GAAuB,MAAnB/K,GAAKgH,GAALxP,MACF,MAAM,IAAImF,GAAuB,mCACnC,OAAOqD,GAAKgH,GAALxP,KACT,CAAC,SAAAkT,GAwBe9J,GACd,MAAMqK,EAAY,IACb,IAAIE,IAAI,IAAIvJ,OAAOwJ,KAAKxK,EAAOyK,YAAazJ,OAAOwJ,KAAKxK,EAAO0K,cAEpE1L,GAAKmK,GAALvS,KAAiByT,EAAU1U,KAAKE,GAAY,IAAIqQ,GAAW+B,GAAAiB,GAAAtS,KAAKuT,IAAa5K,KAAlB3I,MAAsBf,MACjFe,KAAKgT,KAAK,iBAAkBxK,GAAK+J,GAALvS,MAC9B,C,0YC1DmE,IAAA+T,GAAA,IAAAxM,QAUtD,MAAMyM,WAA6BxB,GAA0C3S,WAAAA,IAAA1B,GAAA,SAAAA,GAC1FgK,GAAA,KAAA4L,GAAa,GAAG,CAKhB,aAAI3M,GACF,OAAOoB,GAAKuL,GAAL/T,KACT,CAEmBoT,cAAAA,CAAehK,GAChChB,GAAK2L,GAAL/T,KAAkBoJ,EAAOhC,WACzBpH,KAAKgT,KAAK,kBAAmBxK,GAAKuL,GAAL/T,MAC/B,CAOA,oBAAaxB,CAAQyB,EAAc+I,GACjC,MAAM4J,EAAY,IAAIoB,GAEtB,aADMA,GAAqBrB,SAAS1S,EAAM+I,EAAY4J,GAAW,GAC1DA,CACT,E,0BClCKlW,MAAM,S,IAFbiB,IAAA,G,qEAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,mBACEC,EAAAA,EAAAA,IAAuB,UAAnB,kBAAc,KAClBA,EAAAA,EAAAA,IAiCM,MAjCNG,GAiCM,EAhCJH,EAAAA,EAAAA,IAYM,yBAXJA,EAAAA,EAAAA,IAAoB,WAAf,aAAS,KACdA,EAAAA,EAAAA,IASM,aARJA,EAAAA,EAAAA,IAGQ,wBAFNA,EAAAA,EAAAA,IAAuD,SAAhDiB,KAAK,QAAQC,MAAM,YAPpC,sBAAAR,EAAA,KAAAA,EAAA,GAAAC,GAOyDJ,EAAA6W,KAAIzW,I,iBAAJJ,EAAA6W,QAAI,aAP7DjW,EAAAA,EAAAA,IAOiE,oBAGzDnB,EAAAA,EAAAA,IAGQ,wBAFNA,EAAAA,EAAAA,IAAqD,SAA9CiB,KAAK,QAAQC,MAAM,UAXpC,sBAAAR,EAAA,KAAAA,EAAA,GAAAC,GAWuDJ,EAAA6W,KAAIzW,I,iBAAJJ,EAAA6W,QAAI,aAX3DjW,EAAAA,EAAAA,IAW+D,sBAK3DnB,EAAAA,EAAAA,IAKM,yBAJJA,EAAAA,EAAAA,IAAkB,WAAb,WAAO,KACZA,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAAgE,SAnBxE,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAmBwBJ,EAAA8Q,QAAO1Q,GAAE0W,YAAY,0B,iBAArB9W,EAAA8Q,gBAGpBrR,EAAAA,EAAAA,IAQS,UAPNS,QAAKC,EAAA,KAAAA,EAAA,QAA6BH,EAAA+W,QAAU/V,EAAAgW,eAAa,IAK3D,oBAGUhX,EAAA+W,UAAO,WAAlBxX,EAAAA,EAAAA,IAGM,MAlCV8B,GAAA,cAgCM5B,EAAAA,EAAAA,IAAgC,WAA3B,yBAAqB,KAC1BC,EAAAA,EAAAA,IAA0BuX,EAAA,CAAlBtW,MAAOX,EAAA+W,SAAO,sBAjC5BvW,EAAAA,EAAAA,IAAA,a,4CCCEjB,EAAAA,EAAAA,IAAwC,OAAlCD,OADRQ,EAAAA,EAAAA,IAAA,CAAA0N,MACiBxN,EAAAwN,U,QAAYxN,EAAAkX,MAAI,E,CAIjC,QACEC,MAAO,CACLxW,MAAO,CAAED,KAAM,CAACsM,OAAQoK,MAAOC,OAAQC,OAAQ5K,SAAU6K,QAAS,OAEpEvO,KAAMA,KAAA,CACJkO,KAAM,GACN1J,OAAO,IAETgK,MAAO,CACL7W,MAAO,CACL,aAAM8W,CAAQ9W,GACPA,GAAO+W,MAIZ9U,KAAKsU,KAAO,wBACZtU,KAAK4K,OAAQ,EACb5K,KAAKsU,WAAavW,EAAM+W,MACrB/C,GAAW/R,KAAK+U,cAAchD,KAC9BnH,IACCjF,QAAQqP,KAAKpK,GACb5K,KAAK4K,OAAQ,EACNA,MAVT5K,KAAKsU,KAAOtU,KAAK+U,cAAchX,EAanC,EACAkX,WAAW,IAGf/D,QAAS,CACP6D,aAAAA,CAAchX,GACZ,MAAqB,kBAAVA,EAA2BA,EAC/B6T,KAAKC,UAAU9T,GAAO,CAACmX,EAAGC,IAAoB,kBAANA,EAAiB,GAAGA,gBAAkBA,GAAI,EAC3F,I,YCjCJ,MAAMC,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,UFmCA,IACEC,WAAY,CAAEC,MAAKA,IACnBf,MAAO,CACLlV,OAAQ,CAAEvB,KAAMyX,SAAUC,UAAU,IAEtCpP,KAAMA,KAAA,CACJ6N,KAAM,YACN/F,QAAS,aACTiG,QAAS,OAEXjD,QAAS,CACP,mBAAMkD,GAEJ,aADMpU,KAAKX,OAAO,CAAE,CAACW,KAAKiU,MAAOjU,KAAKkO,UAC/B,oBACT,IGnDJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,UlB6DA,IACEmH,WAAY,CAAEI,cAAaA,IAC3BrP,KAAMA,KAAA,CACJvI,cAAe,UACfK,iBAAiB,EACjBK,iBAAkB,KAClBmX,cAAe,KACfzX,uBAAwB0X,oBACxBrC,WAAY,KACZ5U,sBAAuB,KACvBI,YAAa,KAEf8W,SAAU,KACLC,EAAAA,GAAAA,IAAS,CAAC,UACbnW,UAAAA,GACE,OAAKM,KAAK9B,gBACH8B,KAAKsT,WAAWrT,KADW,yBAEpC,GAEFiR,QAAS,CACP,iBAAMvS,GACJqB,KAAKlB,kBAAoBkB,KAAKT,gBAAgBZ,cAC1CqB,KAAKlB,YAAYkP,QAAQhO,KAAK8V,WAAW9V,KAAKlB,YAAY,GAChE,EACA,uBAAMF,CAAkBd,EAAMC,SACtBiC,KAAKT,gBAAgBX,kBAAkBd,EAAMC,EACrD,EACA,mBAAMgY,GACuB,mBAAvB/V,KAAKnC,gBACPmC,KAAK0V,cAAgBM,SAASC,cAAc,UAC5CjW,KAAK0V,cAAcQ,IAAMlW,KAAK/B,uBAC9B+B,KAAK0V,cAAcS,MAAMC,QAAU,OACnCJ,SAASK,KAAKC,YAAYtW,KAAK0V,gBAEjC,MAAM1M,EAAa,IAAItB,GACvB,OAAO,IAAIoC,SAAQ,CAACC,EAAS0H,KAC3B,MAAM8E,EAAgBC,GAAexN,GAAYa,OAASH,gBAEtD+M,QACE,oCAAoC/M,EAAUH,KAAKtJ,gBAAgByJ,EAAUH,KAAK7G,QAGpF6T,IACAxM,EAAQL,EAAUF,iBAClBxJ,KAAKtB,sBAAwB,KAC7BsB,KAAKsT,WAAa5J,EAAUH,KAC9B,IAEFvJ,KAAKtB,sBAAwB,KAC3B+S,EAAO,IAAI7R,MAAM,+BACjB2W,IACAvW,KAAKtB,sBAAwB,KACzBsB,KAAK0V,eAAe1V,KAAK0V,cAAcgB,QAAQ,CACpD,GAEL,EACA,aAAMC,CAAQvP,GACZ,OAAO,KAAEnH,WAAiBD,KAAK4W,MAAMC,kBAAkBC,QACpDC,GAASA,EAAKC,gBAAkB5P,IAEnCpH,KAAK4W,MAAMK,WAAWhX,GACtBD,KAAKkX,OAAOC,OAAO,eAAgB/P,EACrC,EACA0O,UAAAA,CAAW9W,GACLoL,OAAOwJ,KAAK5T,KAAK4W,MAAMlE,UAAU1E,QAAQhO,KAAK4W,MAAMQ,cAAcpX,KAAK4W,MAAM3X,SACjFe,KAAK4W,MAAMS,WAAWrY,EAAS,CAAEK,QAAQ,IACzCW,KAAKkX,OAAOC,OAAO,aAAcnY,EAAQC,QAC3C,EACA,aAAMT,GACJwB,KAAKzB,kBAAmB,EACxB,IACE,MAAMyK,QAAmBhJ,KAAK+V,gBAC9B,IACE/V,KAAKT,sBAAwByU,GAAqBxV,QAAQ,aAAcwK,EAC1E,CAAE,MAAO4B,GAEP,MADIA,aAAiB7D,IAAwBiC,EAAW3K,aAClDuM,CACR,CACA5K,KAAKT,gBAAgB+X,GAAG,cAAc,KACpCtX,KAAK9B,iBAAkB,EACvB8B,KAAKsT,WAAa,KAClBtT,KAAKlB,YAAc,GACnBkB,KAAKkX,OAAOC,OAAO,kBAAcvO,GAC7B5I,KAAK0V,eAAe1V,KAAK0V,cAAcgB,QAAQ,IAErD1W,KAAK9B,iBAAkB,EAEvB8B,KAAK2W,QAAQ3W,KAAKT,gBAAgB6H,WAClCpH,KAAKT,gBAAgB+X,GAAG,mBAAoBlQ,GAAcpH,KAAK2W,QAAQvP,KAEvEpH,KAAKT,gBAAgB+X,GAAG,kBAAmB5E,IACzC1S,KAAKlB,YAAc4T,EACfA,EAAS1E,QAAQhO,KAAK8V,WAAWpD,EAAS,GAAG,GAErD,CAAE,MAAO9H,GACP,GACoB,+BAAlBA,EAAM9K,SACN8K,aAAiB7D,IACjB6D,aAAiB/D,GAEjB,OACF,MAAM+D,CACR,CAAE,QACA5K,KAAKzB,kBAAmB,CAC1B,CACF,EACAF,UAAAA,GACE2B,KAAKT,gBAAgBlB,YACvB,ImB3KJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,KAEpE,U,UCNO3B,MAAM,S,IADbiB,IAAA,G,IAAAA,IAAA,G,2CACEhB,EAAAA,EAAAA,IAgBM,MAhBNK,GAgBM,CAfOI,EAAAma,SAAM,WAAjB5a,EAAAA,EAAAA,IAGM,MALV8B,GAAA,cAGM5B,EAAAA,EAAAA,IAA4B,WAAvB,qBAAiB,KACtBA,EAAAA,EAAAA,IAAuB,YAAAgC,EAAAA,EAAAA,IAAfzB,EAAAma,QAAM,MAEIna,EAAAoa,iBAAwC,WAC5D7a,EAAAA,EAAAA,IASWC,EAAAA,GAAA,CAhBfe,IAAA,KAQMd,EAAAA,EAAAA,IAA+C,UAAtCS,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAC,YAAAD,EAAAC,cAAAF,KAAY,eAC5BtB,EAAAA,EAAAA,IAAgD,UAAvCS,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAiZ,YAAAjZ,EAAAiZ,cAAAlZ,KAAY,eACdf,EAAAsV,SAAS1E,OAAS,IAAH,WAA7BrR,EAAAA,EAAAA,IAAiF,UAVvFgB,IAAA,EAU0CL,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAqZ,eAAArZ,EAAAqZ,iBAAAtZ,KAAe,oBAVhEP,EAAAA,EAAAA,IAAA,QAWMf,EAAAA,EAAAA,IAAgD,UAAvCS,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAsZ,YAAAtZ,EAAAsZ,cAAAvZ,KAAY,eACjBf,EAAAsV,SAAS1E,SAAM,WAA1BrR,EAAAA,EAAAA,IAGM,MAfZ8C,GAAA,cAaQ5C,EAAAA,EAAAA,IAAmB,WAAd,YAAQ,KACbA,EAAAA,EAAAA,IAAkF,YAAAgC,EAAAA,EAAAA,IAA1EzB,EAAAsV,SAAS3T,KAAKC,GAAYA,EAAQC,QAAQC,MAAM,EAAG,KAAIC,KAAK,OAAD,OAd3EvB,EAAAA,EAAAA,IAAA,eAMsC,WAAlCjB,EAAAA,EAAAA,IAAqE,UANzEgB,IAAA,EAMyCL,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAI,SAAAJ,EAAAI,WAAAL,KAAS,a,kDCkBlD,SAASwZ,GAAeC,KAAyBC,GAC7B,IAArBA,EAAU7J,SAAc6J,EAAY,CAACnM,GAAS6B,iBAClD,IACEkB,GAAOmJ,GACP,MAAME,EAAWF,EAAaxI,MAAM,KAAK,GACzC,IAAKlE,GAAc4M,EAAUD,GAC3B,MAAM,IAAIlX,EACR,sBACAkX,EAAU7J,OAAS,EAAI,UAAU6J,EAAU1Y,KAAK,QAAU0Y,EAAU,GACpEC,GAGJ,OAAO,CACT,CAAE,MAAOlN,GACP,OAAO,CACT,CACF,CA4BO,SAASmN,GAAKnM,GACnB,OAAOpB,GAAAA,OAAOG,MAAKqN,EAAAA,GAAAA,SAAQpM,OAAOhD,EAAW,IAC/C,CA0BO,SAASqP,GACd7R,EACAuJ,EACA1Q,GAEA,OAAOiZ,GAAAA,KAAUC,SAASF,OAAO7R,EAAMuJ,EAAWlB,GAAOxP,GAC3D,CAEA,MAAMmZ,GAAgB5N,GAAAA,OAAOG,KAAK,8BAA+B,QACpD0N,IAAsBC,EAAAA,GAAAA,IAAcF,GAAcpK,QAAQK,O,gBCtGhE,MAAMkK,GAAkB,CAC7BC,IAAK,4CACLhV,OAAQ,uCAGGiV,GAAmB,IAGnBC,GAAgB,IAEhBC,GAAsB,KAKtBC,GAAsB,GAItBC,GAAkB3O,GAC7B,CACE,GAAI,EACJ,GAAI,EACJ,GAAI,EACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,GAAI,MACJ,GAAI,MACJ,GAAI,MACJ,GAAI,MACJ,GAAI,MACJ,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,QACH,EAAG,QACH,EAAG,QACH,EAAG,UAEL,EAAEvM,EAAKI,KAAW,CAACJ,EAAK,IAAImb,GAAAA,EAAU/a,GAAOgb,MAAMJ,OAG9C,IAAKK,GAAwB,SAAxBA,GAAwB,OAAxBA,EAAAA,EAAwB,oBAAxBA,CAAwB,MAQxBC,GAAS,SAATA,GAAS,OAATA,EAAAA,EAAS,kBAATA,EAAAA,EAAS,sBAATA,EAAAA,EAAS,4DAATA,EAAAA,EAAS,4DAATA,EAAAA,EAAS,kBAATA,EAAAA,EAAS,sDAATA,EAAAA,EAAS,oBAATA,EAAAA,EAAS,oBAATA,CAAS,MAeTC,GAAU,SAAVA,GAAU,OAAVA,EAAAA,EAAU,oBAAVA,EAAAA,EAAU,sBAAVA,EAAAA,EAAU,kBAAVA,CAAU,MAaVC,GAAG,SAAHA,GAAG,OAAHA,EAAAA,EAAG,2BAAHA,EAAAA,EAAG,yBAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,qCAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,iCAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,mCAAHA,EAAAA,EAAG,mCAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,yCAAHA,EAAAA,EAAG,2CAAHA,EAAAA,EAAG,6CAAHA,EAAAA,EAAG,wDAAHA,EAAAA,EAAG,mDAAHA,EAAAA,EAAG,+CAAHA,EAAAA,EAAG,uCAAHA,EAAAA,EAAG,yCAAHA,EAAAA,EAAG,6CAAHA,EAAAA,EAAG,qDAAHA,EAAAA,EAAG,+BAAHA,EAAAA,EAAG,2BAAHA,EAAAA,EAAG,iCAAHA,CAAG,MCxFR,MAAMC,GAAkB,CAC7B,CAACJ,GAAyBK,OAAQ,CAChC,kBAAmB,CACjBC,UAAW,CAACL,GAAUM,OACtBC,WAAY,CAACN,GAAWO,OAE1B,gBAAiB,CACfH,UAAW,GACXE,WAAY,CAACN,GAAWO,OAE1B,cAAe,CACbH,UAAW,GACXE,WAAY,CAACN,GAAWQ,MAAOR,GAAWO,SAUzC,SAASE,GACdC,EACA9b,GACW,IAAA+b,EACX,MAAMC,EAAWV,GAAgBQ,GAAiB9b,GAClD,MAAO,CACLwb,UAAgC,QAAvBO,EAAEC,EAASR,UAAU,UAAE,IAAAO,EAAAA,EAAIZ,GAAUc,MAC9CP,WAAYM,EAASN,WAAW,GAEpC,CAEA,QACEQ,SAAAA,CACEjc,EACAqL,GACA,yBACE6Q,EAA2BjB,GAAyBK,QAE9C,IAAAa,EAGR,OAFK,QAALA,EAAAnc,SAAK,IAAAmc,IAALnc,EAAU4b,GAAmBM,EAA0B,oBAEhDzP,GAAAA,OAAOG,KAAK,CAAC5M,EAAMub,UAAW,EAAGvb,EAAMyb,YAChD,EAEA,aAAMW,CACJpc,EACAqL,EAEAlB,GAEA,OAAa,MAATnK,EAAsBA,EACc,MAApCmK,EAAQ+R,0BACyC,IAAjD7P,OAAOwJ,KAAKoF,IAA0BhL,QACpB,MAAlB9F,EAAQkS,OACHT,UACEzR,EAAQkS,OAAOC,eAAeJ,yBACrC,wBALJ,CASF,EAEA5T,WAAAA,CAAYgI,GACV,MAAOiM,EAAG,CAAGC,GAAOlM,EACpB,MAAO,CAAEiL,WAAYgB,EAAId,YAAae,EACxC,GCtEF,IACEC,mBAAAA,CAAoBC,EAA6B5V,GAC/C,MAAM6V,EACJvB,GAAIwB,iBAAmB9V,GAAOsU,GAAIyB,WAAa/V,EAAM,gBAAkB,cACzE,OAAO8U,GAAmBc,EAAGC,GAAMlB,UACrC,EAEAQ,SAAAA,CACEjc,GACA,IAAE8G,IACF,yBACEoV,EAA2BjB,GAAyBK,QAGtD,MAAMtH,EAAc,OAALhU,QAAK,IAALA,EAAAA,EAASiC,KAAKwa,oBAAoBP,EAA0BpV,GAE3E,OAAO2F,GAAAA,OAAOG,KAAK,CAACoH,GACtB,EAEA,aAAMoI,CACJpc,GACA,IAAE8G,GAEFqD,GAEA,OAAa,MAATnK,EAAsBA,EACc,MAApCmK,EAAQ+R,0BACyC,IAAjD7P,OAAOwJ,KAAKoF,IAA0BhL,QACpB,MAAlB9F,EAAQkS,OACHpa,KAAKwa,2BACHtS,EAAQkS,OAAOC,eAAeJ,yBACrCpV,QALJ,CASF,EAEAwB,WAAAA,CAAYgI,GACV,OAAOA,EAAO,EAChB,GCjCK,SAASwM,GAAQC,EAA0CC,GAAM,GAKtE,GAAW,MAAPD,EAAa,OAAOtQ,GAAAA,OAAOG,KAAK,IACpC,GAAI+J,OAAOsG,UAAUF,IAAQhC,GAAAA,EAAUmC,YAAYH,IAAQC,EAAK,CAE9D,GADKjC,GAAAA,EAAUmC,YAAYH,KAAMA,EAAM,IAAIhC,GAAAA,EAAUgC,KAChDA,EAAIE,YAAa,MAAM,IAAI5Z,EAAU,iCAAiC0Z,EAAII,aAC/E,IAAIC,EAAYL,EAAIxY,SAAS,IAE7B,OADI6Y,EAAUnN,OAAS,IAAM,IAAGmN,EAAY,IAAIA,KACzC3Q,GAAAA,OAAOG,KAAKwQ,EAAW,MAChC,CACA,GAAmB,kBAARL,EACT,OAAOtQ,GAAAA,OAAOG,KAAKmQ,GAErB,MAAM,IAAI9Z,CACZ,CChBO,MAAMoa,GAAkB,CAC7B1P,GAAS6B,eACT7B,GAASkC,KACTlC,GAASgC,WACThC,GAAS2B,cACT3B,GAASyB,gBACTzB,GAASwB,SAKI,SAASmO,MACnBxD,GAKH,MAAO,CAMLmC,SAAAA,CAAUsB,GACR,MAAMC,EAAMD,EAAOpc,MAAM,EAAG,GAC5B,IAAKgM,GAAcqQ,EAAKH,IAAkB,MAAM,IAAIrW,GAAiBwW,GACrE,IAAKrQ,GAAcqQ,EAAK1D,GACtB,MAAM,IAAIlX,EAAc,mBAAoBkX,EAAU1Y,KAAK,MAAOoc,GAEpE,MAAMC,EAAQJ,GAAgBK,QAAQF,GAAO,EAC7C,OAAO/Q,GAAAA,OAAOG,KAAK,IAAIkQ,GAAQW,MAAW/M,GAAO6M,IACnD,EAOAjV,WAAAA,CAAYqV,GACV,MAAMF,EAAQhR,GAAAA,OAAOG,KAAK+Q,GAAKC,WAAW,EAAG,GACvCJ,EAAMH,GAAgBI,EAAQ,GACpC,GAAW,MAAPD,EAAa,MAAM,IAAI3W,GAAoB4W,GAC/C,IAAKtQ,GAAcqQ,EAAK1D,GACtB,MAAM,IAAIlX,EAAc,mBAAoBkX,EAAU1Y,KAAK,MAAOoc,GAEpE,OAAO/M,GAAOkN,EAAIE,SAAS,GAAIL,EACjC,EAEJ,CC3De,SAASM,GAAqCC,GAO3D,MAAO,CACL9B,SAAAA,CAAU+B,EAAO3S,GACf,OAAO2S,EAAMhd,KAAKoM,GAAS2Q,EAAY9B,UAAU7O,EAAM/B,IACzD,EAEA/C,WAAAA,CAAY2V,EAAS5S,GACnB,OAAO4S,EAAQjd,KAAKsP,GAAWyN,EAAYzV,YAAYgI,EAAQjF,IACjE,EAEJ,C,2BCUO,SAAS6S,GACdC,EACAC,GAEA,MAAMC,EAAkB5R,GAAAA,OAAOG,KAAK,IAAI8D,GAAOyN,MAAarB,GAAQsB,KAC9DE,EAAUtE,GAAKqE,GACrB,OAAO5N,GAAO6N,EAAS3Q,GAASyB,gBAClC,CAwBA,MAAMmP,GAAc,SAEb,SAASC,GAAeC,GAC7B,MAAOvc,EAAMwc,KAAWC,GAASF,EAAUpN,MAAM,KACjD,GAAqB,IAAjBsN,EAAM1O,OAAc,MAAM,IAAIrN,EAAc,YAAa,yBAA0B6b,GACvF,GAAIC,IAAWH,GAAYpd,MAAM,GAC/B,MAAM,IAAIyB,EAAc,YAAa,iBAAiB2b,KAAeE,GAEvE,GAAI,0BAA0BG,KAAK1c,GACjC,MAAM,IAAIU,EAAc,YAAa,uBAAwB6b,GAE/D,GAAgB,MAAZvc,EAAK,IAA0B,MAAZA,EAAK,GAC1B,MAAM,IAAIU,EACR,YACA,0DACA6b,GAGJ,GAAgB,MAAZvc,EAAK,GACP,MAAM,IAAIU,EAAc,YAAa,4BAA6B6b,GAEpE,GAAoB,MAAhBvc,EAAK2c,IAAI,GACX,MAAM,IAAIjc,EAAc,YAAa,0BAA2B6b,GAElE,IAAIK,EACJ,IACE,MAAMC,EAAI,IAAIC,IAAI,UAAU9c,KAAQwc,KACpC,GAAIK,EAAEE,SAAWF,EAAEG,SAAWH,EAAEI,KAAOJ,EAAEK,OAASL,EAAE/E,OAAS,IAAqB,MAAf+E,EAAEM,SACnE,MAAM,IAAIzc,EAAc,YAAa,QAAS6b,GAEhDK,EAAWC,EAAEO,IACf,CAAE,MAAOzS,GACP,GAAIA,aAAiBxJ,WAAawJ,EAAM9K,QAAQuL,SAAS,eACvD,MAAM,IAAI1K,EAAc,YAAa,QAAS6b,GAEhD,MAAM5R,CACR,CACA,IAAK,iBAAiB+R,KAAKE,GACzB,MAAM,IAAIlc,EAAc,YAAa,wBAAyB6b,GAEhE,GAAIK,EAAS7O,OAAS,GAAKsO,GAAYtO,OACrC,MAAM,IAAIrN,EAAc,YAAa,eAAgB6b,GAEvD,OAAOK,CACT,CAQO,SAASS,GAAcrd,GAC5B,OAAOuO,GAAOuJ,GAAKwE,GAAetc,IAAQyL,GAASkC,KACrD,CA4BO,SAAS2P,GAAQ7B,EAAclR,GAAAA,OAAOG,KAAK,KAChD,OAAO,IAAImO,GAAAA,EAAUtO,GAAAA,OAAOG,KAAK+Q,GAAKpZ,SAAS,OAAQ,IAAIA,SAAS,GACtE,CAOO,SAASkb,GAAWhB,GACzBD,GAAeC,EACjB,CAQO,SAASiB,GAAYjB,GAC1B,IAEE,OADAgB,GAAWhB,IACJ,CACT,CAAE,MAAO5R,GACP,OAAO,CACT,CACF,CAGGc,GAAS6B,eACT7B,GAAS2B,cACT3B,GAASyB,gBACTzB,GAASwB,QA4BL,SAASwQ,GAAkBzd,GAChC,MAAM0d,EAAapB,GAAetc,GAAM+N,OAASsO,GAAYtO,OAC7D,OAAO6K,GAAgB+E,KAAKC,IAAIF,EAAY/E,IAC9C,CCrMA,QACEoB,SAAAA,CAAUjc,GACR,GAAI2W,OAAO3W,GAAS,EAAG,MAAM,IAAI4C,EAAc,QAAS,wBAAyB5C,GACjF,OAAO8c,GAAQ9c,GAAO,EACxB,EAEAsI,WAAAA,CAAYtI,GACV,OAAOwf,GAAQxf,EACjB,GCJK,MAAMkd,GAAe6C,GACJ,kBAAXA,GAET,CAAC,SAAU,SAAU,UAAUzS,gBAAgByS,MAE7CC,MAAMD,IAAqBpJ,OAAOsG,UAAU8C,IAAWhF,GAAAA,EAAUmC,YAAY6C,ICV5E,IAAKE,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,WAAjBA,EAAiB,oBAAjBA,EAAiB,sBAAjBA,EAAiB,oBAAjBA,EAAiB,oBAAjBA,EAAiB,sBAAjBA,EAAiB,mBAAjBA,CAAiB,MAa7B,MAAMC,GAAyB,CAC7B,CAACD,GAAkBE,IAAK,EACxB,CAACF,GAAkBG,UAAW,EAC9B,CAACH,GAAkBI,WAAY,EAC/B,CAACJ,GAAkBK,UAAW,EAC9B,CAACL,GAAkBM,UAAW,GAC9B,CAACN,GAAkBO,WAAY,GAC/B,CAACP,GAAkBQ,SAAU,IAWlBC,GAAeA,CAC1B1gB,GAEE2gB,eAAeV,GAAkBQ,OACjCG,qBAAqBX,GAAkBQ,WAGzC,IAAKvD,GAAYld,GAAQ,MAAM,IAAI4C,EAAc,QAAS,WAAY5C,GAEtE,OAAO,IAAI+a,GAAAA,EAA2B,kBAAV/a,EAAqBA,EAAMuE,WAAavE,GACjE6gB,UAAUX,GAAuBS,GAAgBT,GAAuBU,IACxEzD,SAAS,EC1Cd,WACK2D,GAGHC,eAAAA,CAAgB/gB,EAA2BqL,EAAYlB,GACrD,OAAY,OAALnK,QAAK,IAALA,EAAAA,EAAS,GAClB,EAEAic,SAAAA,CACEjc,EACAqL,GACA,aAAEsV,EAAeV,GAAkBQ,UAAWtW,IAE9C,OAAO2W,GAAK7E,UACVha,KAAK8e,gBACM,MAAT/gB,EAAgB0gB,GAAa1gB,EAAO,CAAE2gB,iBAAkB3gB,EACxDqL,EACAlB,GAGN,GCrBa,SAAS6W,GACtBjH,EACAkH,GAOA,MAAO,CACLhF,SAAAA,CAAUiF,GACR,GAAmB,MAAfA,EAAqB,CACvB,IAAiB,IAAbD,EAAmB,OAAOxU,GAAAA,OAAOG,KAAK,IAC1C,MAAM,IAAIhK,EAAc,eAAgB,WAAYse,EACtD,CACA,OAAOxQ,GAAOwQ,EAChB,EAEA5Y,WAAAA,CAAYgI,GACV,OAAOG,GAAOH,EAAQyJ,EACxB,EAEJ,CCrBe,SAASoH,GACtBra,GAeA,MAAO,CACLmV,SAAAA,CAAUmF,GAAU,UAAEC,IACpB,OAAIC,YAAYC,OAAOH,GAAkB3U,GAAAA,OAAOG,KAAKwU,GAC7B,kBAAbA,GAAyBA,EAASI,WAAW,OAC/C9Q,GAAO0Q,GAET1Q,GAAO2Q,EAAU,IAAKD,KAAqB,MAAPta,GAAe,CAAEA,SAC9D,EAEAwB,WAAAA,CAAYqV,GAAK,YAAE8D,IACjB,OAAOA,EAAYhR,GAAOkN,EAAKhQ,GAASiB,WAAY9H,EACtD,EAEJ,CC9Be,SAAS4a,GACtBC,GAKA,MAAMC,EAASvV,OAAOuV,OAAOD,GAAK5I,QAAQ3B,GAAmB,kBAANA,IACvD,MAAO,CACL6E,SAAAA,CAAUjc,GACR,GAAqB,kBAAVA,EAAoB,MAAM,IAAI4C,EAAc,QAAS,iBAAkB5C,GAClF,GAAIA,EAAQ,IAAM,MAAM,IAAI4C,EAAc,QAAS,sBAAuB5C,GAC1E,IAAKmN,GAAcnN,EAAO4hB,GACxB,MAAM,IAAIhf,EAAc,QAAS,wBAAyB5C,GAE5D,OAAOyM,GAAAA,OAAOG,KAAK,CAAC5M,GACtB,EAEAsI,WAAAA,CAAYgI,GACV,GAAsB,IAAlBA,EAAOL,OACT,MAAM,IAAIrN,EAAc,SAAU,yBAA0B0N,EAAOL,QAErE,MAAMjQ,EAAQsQ,EAAO,GACrB,IAAKnD,GAAcnN,EAAO4hB,GACxB,MAAM,IAAIhf,EAAc,QAAS,wBAAyB5C,GAE5D,OAAOA,CACT,EAEJ,CCxBA,MAAM6hB,GAAmE,IAAIrY,QAEtEsC,eAAegW,GAA2B9I,GAC/C,MAAM+I,EAAQF,GAAcxN,IAAI2E,GAChC,GAAa,MAAT+I,GAAiBA,EAAMC,KAAOC,KAAKC,MAAQ,IAC7C,OAAOH,EAAMI,SAGf,MAAM,YAAEC,EAAW,YAAEC,UAAuBrJ,EAAKsJ,sBAAsB,GACvE,IAAIH,EACFE,EAAc,GACV,GACAE,OAAO,IAAIxH,GAAAA,EAAUqH,EAAY7d,YAAYyW,MAAM,MAAMwH,eAAerF,WAE9E,MAAMsF,EAA0C,QAAxBF,OAAO5H,IAW/B,OAVIwH,EAAWM,IACb7a,QAAQqP,KACN,uBAAuBkL,8EACKM,4EAG9BN,EAAWM,GAGbZ,GAAclO,IAAIqF,EAAM,CAAEmJ,WAAUH,KAAMC,KAAKC,QACxCC,CACT,CAGA,WACKO,GAEH,aAAMtG,CACJpc,EACAqL,GACA,OACEgR,EAAM,aACNsE,IAMF,GAAa,MAAT3gB,EAAe,OAAOA,EAC1B,GAAc,MAAVqc,EACF,MAAM,IAAIzZ,EAAc,SAAU,2CAA4CyZ,GAEhF,MAAM8F,QAAiBL,GAA2BzF,GAClD,OAAiB,KAAb8F,EACGzB,GAAayB,EAAU,CAAEvB,mBAAoBD,SADpD,CAEF,EAEAI,eAAAA,CAAgB/gB,EAA4B2a,GAAcpW,YACxD,IAAKvE,EAAQ2a,GACX,MAAM,IAAI3X,EACR,aAAahD,EAAMuE,kCAAkCoW,MAGzD,OAAO3a,CACT,GCvDF,MAAM2iB,GAAW,KACXC,GAAe,GACfC,GAAqB,EAYrBC,GAAeC,IAAwB,IAAAC,EAC3C,MAAMC,EAAa,CACjB,CAAC7H,GAAI8H,wBAAyB,GAC9B,CAAC9H,GAAI+H,mBAAoB,EACzB,CAAC/H,GAAIgI,kBAAmB,EACxB,CAAChI,GAAIwB,gBAAiB,GACtB,CAACxB,GAAIiI,YAAa,EAClB,CAACjI,GAAIyB,UAAW,EAChB,CAACzB,GAAIkI,aAAc,IAEfC,EAAsD,QAAhDP,EAAGC,EAAWF,UAAkC,IAAAC,EAAAA,EAAI,EAChE,OAAOO,EAASZ,EAAQ,EAkBpBa,GAAeA,CACnBT,EACAU,GACEC,cAAaC,kBAEf,OAAQZ,GACN,KAAK3H,GAAIwI,iBACT,KAAKxI,GAAIyI,eACT,KAAKzI,GAAI0I,cACT,KAAK1I,GAAI2I,iBACP,OACEN,EAASb,GACT/C,KAAKmE,KAAM,KAAQN,EAAe7D,KAAKoE,MAAO,OAAiBpB,KAEnE,KAAKzH,GAAIyB,SACT,KAAKzB,GAAIkI,YACP,OAAQG,EAASE,GAAef,GAClC,QACE,OAAOa,EAASb,GACpB,EAGF,SAASsB,GAAqB7Y,GAC5B,MAAM8Y,EAAU,CACd,CAAC/I,GAAIwI,kBAAmB,iBACxB,CAACxI,GAAIyI,gBAAiB,iBACtB,CAACzI,GAAI0I,eAAgB,gBACrB,CAAC1I,GAAI2I,kBAAmB,qBAGpB,IAAEjd,GAAQuE,EAChB,OAAK6B,GAAcpG,EAAKqd,GACjB9Y,EAAO8Y,EAAQrd,IADmB,CAE3C,CAKO,SAASsd,GACdC,EACAC,EACAC,GAEA,MAAM,OAAEtU,GAAWS,GAAO2T,GACpBG,EAAWF,EAASD,GAE1B,IAAIV,EAAc,EAKlB,OAJIa,EAAS1d,MAAQsU,GAAIyB,UAAY2H,EAAS1d,MAAQsU,GAAIkI,cACxDK,EAAcjT,GAAO6T,EAAQC,EAASvS,GAAGwS,YAAYxU,QAIrD6S,GAAY0B,EAAS1d,KACrB0c,GAAagB,EAAS1d,IAAKmJ,EAAQ,CACjCyT,YAAaQ,GAAqBM,GAClCb,eAGN,CAOA,SAASe,GACPC,EACAL,EACAC,GAEA,IACIK,EADAC,EAAM,IAAI9J,GAAAA,EAAU,GAExB,GACE6J,EAAcC,EACdA,EAAM,IAAI9J,GAAAA,EAAUJ,IAAeK,MAAMoJ,GAASO,EAAUE,GAAMP,EAAUC,WACpEM,EAAIC,GAAGF,IACjB,OAAOC,CACT,CAKA,MAAME,GAAiB,cASvB,WACKrC,GAEH,aAAMtG,CACJpc,EACAqL,GACA,OAAEgR,IAEF,GAAa,MAATrc,EAAe,OAAOA,EAC1B,GAAc,MAAVqc,EACF,MAAM,IAAIzZ,EAAc,SAAU,sCAAuCyZ,GAE3E,MAAM8F,QAAiBL,GAA2BzF,GAClD,OAAiB,KAAb8F,EACG4C,GAAiB5C,OADxB,CAEF,EAEApB,eAAAA,CACE5E,GACA,UAAEwI,EAAS,SAAEL,EAAQ,QAAEC,EAAO,iBAAES,IAChC,gBAAEC,IAEF,GAAwB,MAApBD,EAA0B,OAAOA,EAAiB7H,UACtD,MAAM+H,EAASR,IACZG,GAAQF,EAAU,CAAEK,iBAAkBH,KACvCP,EACAC,GAEIvkB,GACmC,IAAvCmc,GAAQqF,WAAWuD,IACfG,EAAOC,UAAUxK,IAAeK,MAAMmB,EAAOiJ,QAAQL,GAAgB,KACrE,IAAIhK,GAAAA,EAAgB,OAANoB,QAAM,IAANA,EAAAA,EAAU+I,GAC9B,GAAIA,EAAOG,GAAGrlB,GAAQ,CACpB,IAAwB,IAApBilB,EAA0B,OAAOC,EAAO/H,UAC5C,MAAM,IAAIna,EAAqB,OAAOhD,EAAMuE,kCAAkC2gB,IAChF,CACA,OAAOllB,EAAMmd,SACf,EAEAlB,SAAAA,CACEjc,EACAqL,EACAlB,GAEA,MAAqB,kBAAVnK,GAAsBA,EAAMwhB,WAAWuD,IACzCjE,GAAK7E,UAAUha,KAAK8e,gBAAgB/gB,EAAOqL,EAAQlB,IAErDuY,GAAWzG,UAAUrR,KAAK3I,KAAMjC,EAAOqL,EAAQlB,EACxD,GC/LF,IACE8R,SAAAA,CAAUjc,GACR,OAAO8gB,GAAK7E,UAAUjc,EACxB,EAEAsI,WAAAA,CAAYtI,GACV,OAAQ8gB,GAAKxY,YAAYtI,EAC3B,GCHF,SAASslB,GACPC,EACAZ,EACAL,EACAC,GAEA,OAAOgB,GAAUnB,GAASO,EAAUY,GAASjB,EAAUC,EACzD,CAEA,WACKiB,GAEHvJ,SAAAA,CACEE,GACA,IACErV,EAAG,UACH6d,EAAS,SACTL,EAAQ,QACRC,EAAO,mBACPkB,IAQF,OAAEF,EAAS,MAEX,GAA0B,MAAtBE,EAA4B,OAAOD,GAAUvJ,UAAUwJ,GAE3D,MAAMC,EACJ5e,IAAQsU,GAAIyB,SACRnC,GACA4K,GACEC,GACCI,GAAahB,EAAU,CAAEc,mBAAoBE,EAAUV,iBAAiB,KACzEX,EACAC,GAEFvkB,EAAc,OAANmc,QAAM,IAANA,EAAAA,EAAUuJ,EACxB,GAAI1lB,EAAQ0lB,EACV,MAAM,IAAI1iB,EAAqB,aAAahD,8BAAkC0lB,KAEhF,OAAOF,GAAUvJ,UAAUjc,EAC7B,GCnDF,IACEic,SAAAA,CAAUjc,GACR,OAAOyM,GAAAA,OAAOG,KAAK5M,EACrB,EAEAsI,WAAAA,CAAYtI,GACV,OAAOA,EAAMuE,UACf,GCJF,IAIE0X,SAAAA,CAAUjc,GACR,OAAO4lB,GAAM3J,UAAUjc,EACzB,EAKAsI,WAAAA,CAAYtI,GACV,OAAO4lB,GAAMtd,YAAYtI,EAC3B,GCVF,OACK0iB,GAEH3B,eAAAA,CAAgB5E,EAA4B0J,GAC1C,MAAMvhB,EAAaqb,GAAkBkG,EAAS3jB,MACxClC,EAAQ,IAAI+a,GAAAA,EAAgB,OAANoB,QAAM,IAANA,EAAAA,EAAU7X,GACtC,GAAIA,EAAW+gB,GAAGrlB,GAAQ,MAAM,IAAIoE,EAAyBpE,EAAOsE,GACpE,OAAOtE,EAAMmd,SACf,EAOAlB,SAAAA,CACEjc,EACA6lB,EACAC,GAEA,OAAOpD,GAAWzG,UAAUrR,KAAK3I,KAAMjC,EAAO6lB,EAAUC,EAC1D,GCtBF,MAAMC,GAAc7kB,GAAQyM,GAASkC,MAErC,WACKkW,GAKH9J,SAAAA,CAAUjc,GACR,OAAO+lB,GAAY9J,UAAUyD,GAAY1f,GAASuf,GAAcvf,GAASA,EAC3E,GCRa,SAASgmB,GACtBC,GAiBA,MAAO,IACFT,GAEHvJ,SAAAA,CAAUjc,GAAe,IAAE8G,IACzB,GAAIsU,GAAIiI,aAAevc,GAAiB,IAAV9G,EAC5B,MAAM,IAAI4C,EAAc,QAAS,wBAAyB5C,GAE5D,OAAOwlB,GAAUvJ,UAAUjc,EAC7B,EAEA,aAAMoc,CAAQpc,EAAOqL,EAAQlB,GAC3B,GAAa,MAATnK,EAAe,OAAOA,EAG1B,MAAM,OAAEqc,EAAM,SAAE6J,GAAa/b,EACvBgc,EAAWhc,EAAQ8b,GACnBnjB,EAAc,wCACpB,GAAc,MAAVuZ,EAAgB,MAAM,IAAIzZ,EAAc,SAAUE,EAAauZ,GACnE,GAAgB,MAAZ8J,EAAkB,MAAM,IAAIvjB,EAAc,WAAYE,EAAaqjB,GACvE,aACQ9J,EACH+J,oBAAoBD,EAASf,QAAQ,OAAQ,OAAQ,CAAEc,aACvDG,OAAOxZ,IACN,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAEyZ,UAAW,EAAG,KAE3BA,SACJ,EAEAL,YAEJ,CCjDA,MAAMM,GAAS9Z,GAAAA,OAAOG,KAAK,CAAC,IACtB4Z,GAAW/Z,GAAAA,OAAOG,KAAK,CAAC,IACxB6Z,GAAkB,KAClBC,GAAaxlB,MAAWmc,IAU9B,OACEsJ,IAAkB,CAalB1K,SAAAA,CAAU2K,GACR,GAAIA,EAAS3W,OAAS,GACpB,MAAM,IAAIjN,EACR,qCAAqC4jB,EAAS3W,kBAGlD,OAAO2W,EAAS5lB,KAAI,EAAGpB,MAAK+E,SAC1B,IAAIwL,EAIJ,GAHIyJ,GAAejV,KAAO0Y,MACxBlN,EAAU,IAAKwW,EAAW,CAACJ,IAAU,GAAKG,GAAWzK,UAAUtX,KAE7DiV,GAAejV,EAAIgJ,GAASiB,WAAY,CAC1C,MAAMvG,EAAOqI,GAAO/L,GACpB,GAAI0D,EAAK4H,OAASwW,GAChB,MAAM,IAAI7jB,EACR,cACA,gBAAgB6jB,GAAkB,UAClC,GAAGpe,EAAK4H,gBAGZE,EAAU,CAACqW,GAAUne,EACvB,CACA,GAAe,MAAX8H,EAAiB,MAAM,IAAI1J,GAAY,+BAA+B9B,KAC1E,MAAO,CAACmY,GAAQld,GAAM6M,GAAAA,OAAOC,OAAOyD,GAAS,GAEjD,EAOA7H,WAAAA,CAAYse,GACV,OAAOA,EAAS5lB,KAAI,EAAE6lB,EAAMC,MAC1B,IAAKH,EAAU,MAAO,CAAE/mB,IAAKinB,EAAKtiB,WAAYI,GAAI+hB,GAAWpe,YAAYwe,IACzE,MAAMhgB,EAAMggB,EAAIjJ,SAAS,EAAG,GACtB1N,EAAU2W,EAAIjJ,SAAS,GAC7B,IAAIlZ,EAIJ,GAHImC,EAAIyJ,OAAOgW,MAAS5hB,EAAK+hB,GAAWpe,YAAY6H,IAEhDrJ,EAAIyJ,OAAOiW,MAAW7hB,EAAK8L,GAAON,EAASxC,GAASiB,YAC9C,MAANjK,EAAY,MAAM,IAAI8B,GAAY,6BAA6BK,KACnE,MAAO,CAAElH,IAAKinB,EAAKtiB,WAAYI,KAAI,GAEvC,ICrEF,OACK+d,GAEH,aAAMtG,CACJpc,EACAqL,EACAlB,GAEA,GAAa,MAATnK,EAAe,OAAOA,EAC1B,MAAM,OAAEqc,EAAM,SAAE0K,GAAa5c,EACvBrH,EAAc,2CACpB,GAAc,MAAVuZ,EAAgB,MAAM,IAAIzZ,EAAc,SAAUE,EAAauZ,GACnE,GAAgB,MAAZ0K,EAAkB,MAAM,IAAInkB,EAAc,WAAYE,EAAaikB,GACvE,aAAc1K,EAAO2K,kBAAkBD,IAAWE,SAAS1iB,UAC7D,GCvBF,IACE0X,SAAAA,CAAU3L,GACR,OAAO7D,GAAAA,OAAOG,KAAK0D,EACrB,EAEAhI,WAAAA,CAAYgI,GACV,OAAOA,CACT,GCJa,SAAS4W,GAItBC,EACAlG,GAOA,MAAO,CACLhF,SAAAA,CAAUjc,GACR,KAAkB,IAAbihB,GAA8B,MAATjhB,IAAkBA,IAAUmnB,EACpD,MAAM,IAAIvkB,EAAc,iBAAkBukB,EAAYnnB,GAExD,OAAOwlB,GAAUvJ,UAAUkL,EAC7B,EAEA7e,WAAAA,CAAYqV,GACV,MAAM3d,EAAQwlB,GAAUld,YAAYqV,GACpC,GAAI3d,IAAUmnB,EAAY,MAAM,IAAIvkB,EAAc,iBAAkBukB,EAAYnnB,GAChF,OAAOmnB,CACT,EAEAA,aAEAC,oBAAiC,IAAbnG,EAExB,CC/BA,QACEhF,SAAAA,CAAUtL,GACR,OAAOmM,GAAQnM,EACjB,EAEArI,WAAAA,CAAYgI,GACV,OAAOA,EAAO/L,UAChB,GCLa,SAAS8iB,GACtBvgB,GAeA,MAAO,CACLmV,SAAAA,CAAUmF,GAAU,QAAEmD,IACpB,OAAIjD,YAAYC,OAAOH,GAAkB3U,GAAAA,OAAOG,KAAKwU,GAC7B,kBAAbA,GAAyBA,EAASI,WAAW,OAC/C9Q,GAAO0Q,GAET1Q,GAAO6T,EAAQ,IAAKnD,KAAqB,MAAPta,GAAe,CAAEA,SAC5D,EAEAwB,WAAAA,CAAYqV,GAAK,SAAE2G,IACjB,OAAOA,EAAS7T,GAAOkN,EAAKhQ,GAASU,aAAcvH,EACrD,EAEJ,CC/BO,SAASwgB,GACdC,GAEA,OAAO,IAAIC,MACT,CAAC,EACDnb,OAAOC,YAEH,CACE,QACA,YACA,iBACA,iBACA,2BACA,iBACA,eACA,UACA,oBACA,MACA,iBACA,MACA,OAEFtL,KAAKkB,GAAS,CACdA,EACA,CAAC+O,KAAU7Q,KACT,MAAMwJ,EAAS2d,IACf,GAAc,MAAV3d,EAAgB,MAAM,IAAIhH,EAAc,gBAAiB,UAAWgH,GACxE,GAAa,QAAT1H,GAA8B,kBAAZ9B,EAAK,GAAwB,OAAOwJ,EAC1D,MAAMuI,EAAOsV,QAAQvlB,GAAc0H,KAAWxJ,GAC9C,MAAsB,oBAAR+R,GAA+B,QAATjQ,EAAiBiQ,EAAIqB,KAAK5J,GAAUuI,CAAG,MAKrF,CAEO,SAASuV,GAAkC1nB,GAAqB,IAAA2nB,EACrE,OAAyD,QAAzDA,EAAQ3nB,EAAoC2nB,qBAAa,IAAAA,EAAAA,EAAI3nB,CAC/D,CClBO8L,eAAe8b,GACpB7nB,GACA,kBACE8nB,EAAiB,iBACjBC,EAAgB,OAChBzL,IAEe,IAAA0L,EAAAC,EACjB,MAAMC,EAASnc,MACbmF,EACA8L,EACAmL,EACAC,IAEIlX,IAAMlR,EAAa,KACZ,MAAPgd,EAAoBA,EACkB,iBAA5BV,GAAQ+L,gBAA+BF,EAAaC,EAG9DE,EAEmD,QAF/CN,EACgD,QADhDC,QACDC,EAAO,YAAaJ,EAAmB,EAAG,aAAO,IAAAG,EAAAA,QACjDC,EAAO,cAAeH,EAAkB,EAAG,YAAK,IAAAC,EAAAA,EACvD,MACE,MAAM,IAAIjkB,EAAc,iBAAiB/D,IAC1C,EAFD,GAGF,OAAO8f,KAAKoE,MAAMoE,EAAO,EAC3B,CAEA,MAAMC,GAA+D,IAAI9e,QAWlEsC,eAAeyc,IAAU,OAC9BC,GAAS,KACNre,IAKH,MAAMkS,EAASqL,GAAYvd,EAAQkS,QACnC,GAAImM,EAAQ,CACV,MAAMzG,EAAQuG,GAAYjU,IAAIgI,GAC9B,GAAa,MAAT0F,GAAiBA,EAAMC,KAAOC,KAAKC,YAAe0F,GAAiB,YAAazd,GAClF,OAAO4X,EAAM0G,MAEjB,CACA,MAAM,OAAEA,SAAiBpM,EAAOqM,2BAEhC,OADAJ,GAAY3U,IAAI0I,EAAQ,CAAEoM,SAAQzG,KAAMC,KAAKC,QACtCuG,CACT,CAcO3c,eAAe6c,GACpBvlB,GACA,OACED,EAAS,EAAC,SACVylB,KACGze,IAEqC,IAAA0e,EAE1C,IAAIC,EADI,QAARD,EAAAD,SAAQ,IAAAC,IAARD,QAAmBhB,GAAiB,cAAezd,IAEnD,EAAG,CACD,MAAM8H,QAAW9H,EAAQkS,OAAO0M,qBAAqB3lB,GACrD,IAAwB,IAApB6O,EAAG+W,YAAoB,OAAO/W,EACvB,MAAP6W,IACFA,EAAoB,IAAd7W,EAAGA,GAAGgX,KAAa,QAAWV,GAAU,IAAKpe,EAASqe,QAAQ,IAAWrlB,SAE3E0I,GAAM+c,EACd,QAAkB,IAATE,SAA2BP,GAAU,IAAKpe,EAASqe,QAAQ,IAAWM,GAC/E,MAAM,IAAI5lB,EAAgBC,EAAQC,EACpC,CAWO0I,eAAeod,GACpBT,GACA,SACEG,KACGze,IAEY,IAAAgf,EAEjB,IAAIC,EADI,QAARD,EAAAP,SAAQ,IAAAO,IAARP,EAAa/I,KAAKC,UAAU8H,GAAiB,YAAazd,GAAU,MAEpE,GACuB,MAAjBif,SAA6Bvd,GAAM+c,GACvCQ,QAAsBb,GAAUpe,SACzBif,EAAgBX,GACzB,OAAOW,CACT,CAWOtd,eAAeud,GACpBniB,GACA,QACEwR,EAAU,EAAC,OACX2D,KACGlS,IAGL,MAAM,YAAE6e,SAAsB3M,EAAO0M,qBAAqB7hB,GACpDuhB,QAAeS,GAAYF,EAActQ,EAAS,CAAE2D,YAAWlS,KAC7D6e,YAAaM,SAAyBjN,EAAO0M,qBAAqB7hB,GAC1E,OAAQoiB,GACN,KAAM,EACJ,MAAM,IAAIriB,GAAkBC,GAC9B,KAAK8hB,EACH,OAAOP,EACT,QACE,OAAOY,GAAiBniB,EAAQ,CAAEmV,SAAQ3D,aAAYvO,IAE5D,CAWO2B,eAAeyd,GACpBroB,GACA,OACEunB,EAAM,KACNzO,EAAI,OACJqC,IAGF,OAAc,MAAVoM,EAAuBpM,EAAOmN,4BAA4BtoB,EAASunB,GAC3D,MAARzO,EAAqBqC,EAAOoN,0BAA0BvoB,EAAS8Y,GAC5DqC,EAAOqN,mBAAmBxoB,EACnC,CAYO4K,eAAe6d,GACpBzoB,GACA,OACE0oB,EAAS3J,GAAkBQ,UACxBtW,IAGL,MAAM0f,EAAO3oB,EAAQsgB,WAAW,OAC5B/Q,GAAOC,GAAOxP,GAAUyM,GAAS6B,gBAChCtO,GAEC,QAAE4oB,SAAkBP,GAAWM,EAAM1f,GAASkc,OAAOxZ,IACzD,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAEid,QAAS,GAAI,IAGxB,OAAOpJ,GAAaoJ,EAAS,CAAElJ,mBAAoBgJ,GACrD,CASO9d,eAAeie,IAAqB,OACzC1N,IAIA,OAAOA,EAAO0N,sBAChB,CAUOje,eAAeke,GACpBC,GACA,OAAE5N,IAEF,MAA4B,kBAAjB4N,EAAkC5N,EAAO6N,sBAAsBD,GACnE5N,EAAO8N,oBAAoBF,EACpC,CAUOne,eAAese,GACpBpQ,GACA,OAAEqC,IAEF,aAAcA,EAAOgO,gCAAgCrQ,IAAOsQ,YAC9D,CAUOxe,eAAeye,GACpBN,GACA,OAAE5N,IAEF,MAA4B,kBAAjB4N,EAAkC5N,EAAOmO,oBAAoBP,GACjE5N,EAAOoO,kBAAkBR,EAClC,CAUOne,eAAe4e,GACpB1Q,GACA,OAAEqC,IAEF,OAAOA,EAAOsO,0BAA0B3Q,EAC1C,CAUA,MAAM4Q,GAAoF,IAAIvX,IAE9FvH,eAAe+e,GAAgBjrB,EAAayc,GAC1C,MAAMyO,EAAKF,GAAiBvW,IAAIzU,GAEhC,GADAgrB,GAAiBtW,OAAO1U,GACd,MAANkrB,EAAY,MAAM,IAAIhnB,EAAc,6BAExC,IAAIinB,EACJ,IACE,MAAMC,EACiB,kBAAdF,EAAG,GAAGE,WAA0BT,GAAYO,EAAG,GAAGE,IAAK,CAAE3O,YAAWrC,KAAO8Q,EAAG,GAAGE,IAC1FD,QAAkB1O,EAAO4O,mBAAmB,CAC1CD,MACAE,SAAUJ,EAAG,GAAGI,SAChBC,IAAKL,EAAG9pB,KAAKoqB,IAAG,CAAQnZ,GAAImZ,EAAInZ,OAChC0C,SAAU8B,MAAM7J,KAAK,IAAIgJ,IAAIkV,EAAG9pB,KAAKoqB,GAAQA,EAAIC,mBAAkBrqB,KAAKsqB,IAAM,CAC5EA,SACA7lB,OAAQ+U,GAAgB/U,YAG9B,CAAE,MAAOoH,GAEP,YADAie,EAAGS,SAAQ,EAAG7X,YAAaA,EAAO7G,IAEpC,CAEA,MAAM,QAAE2e,EAAO,SAAEN,GAAaH,EAC9BS,EAAQD,SAAQ,EAAGvX,SAAQyB,YAAWgW,GAAiBC,KACrD,MAAM,QAAE1f,EAAO,OAAE0H,EAAM,GAAEzB,EAAE,eAAEoZ,GAAmBP,EAAGY,GACpC,OAAX1X,EAAiBhI,EAAQ,IAAKyf,EAAeP,aAC5CxX,EAAOrH,OAAOsf,OAAO,IAAIhlB,GAAY8O,GAAmB,CAAExD,KAAIoZ,mBAAkB,GAEzF,CAaOvf,eAAe8f,GACpB3Z,EACAoZ,GACA,IACEL,EAAG,SACHE,EAAQ,QACRW,EAAO,OACPxP,IAEgE,IAAAyP,EAClE,MAAMlsB,GAAkB,IAAZisB,EAAmB,CAACb,EAAKE,GAAU9pB,OAAS,YAClD2qB,EAAoC,QAA5BD,EAAGlB,GAAiBvW,IAAIzU,UAAI,IAAAksB,EAAAA,EAAI,GAE9C,OADAlB,GAAiBjX,IAAI/T,EAAKmsB,GACnB,IAAIhgB,SAAQ,CAACC,EAAS0H,KAAW,IAAAsY,EACtCD,EAASljB,KAAK,CACZoJ,KACAoZ,iBACAL,MACAE,WACAlf,UACA0H,YAEc,IAAZmY,EAIY,QAAhBG,EAAAD,EAASE,eAAO,IAAAD,IAAhBD,EAASE,QAAYhgB,YAAW,KACzB4e,GAAgBjrB,EAAKyc,EAAO,KAJ5BwO,GAAgBjrB,EAAKyc,EAK1B,GAEN,CASOvQ,eAAeogB,GACpBC,GACA,OAAE9P,IAEF,OAAOA,EAAO+P,gBAAgBD,EAChC,CASOrgB,eAAeugB,GACpBF,GACA,OAAE9P,IAEF,OAAOA,EAAOgQ,YAAYF,EAC5B,CASOrgB,eAAewgB,GACpBpqB,GACA,OAAEma,IAEF,OAAOA,EAAOkQ,mBAAmBrqB,EACnC,CAcO4J,eAAe0gB,GACpBtoB,EACAtE,GACA,OACEsa,GAAS,EAAI,cACbuS,GAAgB,EAAK,OACrBpQ,IAGF,GAAIqD,GAAYxb,GAAW,CACzB,GAAIgW,GAAUuS,EAAe,CAC3B,MAAMvqB,QAAama,EAAOkQ,mBAAmBroB,GACvCwoB,EAAUxqB,EAAK0kB,SAASne,MAAMkkB,GAAMA,EAAE/sB,MAAQA,IACpD,GAAe,MAAX8sB,EAAiB,MAAM,IAAIzoB,EAAwBC,EAAUtE,GACjE,GAAI6sB,EAAe,OAAOC,EAAQ/nB,EACpC,CACA,OAAO4a,GAAcrb,EACvB,CACA,IAEE,OADAwM,GAAOxM,GACAA,CACT,CAAE,MAAO2I,GACP,MAAM,IAAIrI,EAAqB,4BAA4BN,IAC7D,CACF,CClcA,WACKshB,GAEHvJ,SAAAA,CAAUjc,GACR,OAAOwlB,GAAUvJ,UAAe,OAALjc,QAAK,IAALA,EAAAA,EAAS,EACtC,EAEA,aAAMoc,CACJpc,EACAqL,GAEA,OACEgR,EAAM,YACNuQ,EAAW,iBACXC,KACG1iB,IAOL,IAAoB,IAAhByiB,GAAkC,IAAV5sB,IAAyB,MAATA,IAAsC,IAArB6sB,GAA4B,KAAA1Q,EACvF,GAAc,MAAVE,EAAgB,MAAM,IAAIzZ,EAAc,SAAU,WAAYyZ,GAClErc,GAAc,QAANmc,EAACnc,SAAK,IAAAmc,EAAAA,EAAI,SAAYoM,GAAU,IAAKpe,EAASkS,SAAQmM,QAAQ,GACxE,CACA,OAAOxoB,CACT,GCnCa,SAAS8sB,GACtBC,EACAnH,GAQA,MAAO,IACFA,EAEH3J,SAAAA,CAAUjc,EAAOqL,GACf,OAAOua,EAAM3J,UAAe,OAALjc,QAAK,IAALA,EAAAA,EAAS+sB,EAAc1hB,EAChD,EAEJ,CCjBe,SAAS2hB,GACtBpD,EACAhE,GAQA,MAAO,IACFA,EAEH3J,SAAAA,CAAUjc,EAAOqL,EAAQlB,GACvB,OAAOyb,EAAM3J,UAAU2N,EAAO5pB,GAAQqL,EAAQlB,EAChD,EAEJ,CCjBO,IAAK8iB,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,cAAdA,EAAAA,EAAc,oBAAdA,EAAAA,EAAc,sBAAdA,CAAc,MASdC,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,yBAARA,EAAAA,EAAQ,uBAARA,EAAAA,EAAQ,mBAARA,EAAAA,EAAQ,2BAARA,EAAAA,EAAQ,mCAARA,EAAAA,EAAQ,sEAARA,EAAAA,EAAQ,oEAARA,EAAAA,EAAQ,sEAARA,EAAAA,EAAQ,kFAARA,EAAAA,EAAQ,8EAARA,EAAAA,EAAQ,yBAARA,EAAAA,EAAQ,2BAARA,EAAAA,EAAQ,+BAARA,EAAAA,EAAQ,qBAARA,EAAAA,EAAQ,+BAARA,EAAAA,EAAQ,wCAARA,EAAAA,EAAQ,gCAARA,EAAAA,EAAQ,sCAARA,EAAAA,EAAQ,4CAARA,EAAAA,EAAQ,oCAARA,EAAAA,EAAQ,sCAARA,EAAAA,EAAQ,4CAARA,CAAQ,MC8BRC,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,oBAAhBA,EAAAA,EAAgB,oBAAhBA,CAAgB,MAY5B,MAAMC,GAAiB9nB,KAUjB+nB,GAAsB/nB,GAAY8V,GAAIkS,UAUtCC,GAAgBC,GAAMN,GAASO,UAE/BC,GAAYZ,GAAY,KAAStH,IAKjCmI,GAAUX,IAAgBhtB,IAAU,IAAAmc,EACxC,MAAMyR,EAAW,KAEjB,GADK,QAALzR,EAAAnc,SAAK,IAAAmc,IAALnc,EAAU4tB,GACN5tB,GAAS,GAAKA,GAAS4tB,EAAU,OAAO5tB,EAC5C,MAAM,IAAI4C,EAAc,UAAW,0BAA0BgrB,WAAmB5tB,EAAM,GACrFwlB,IAKUqI,GAAW,CACtB,CACE/mB,IAAKgnB,GAAe1S,GAAIkS,UACxB3pB,QAASmqB,GAAe,GAAG,GAC3BC,WAAY1gB,GAAM2gB,IAClBvJ,UAAW2I,IAEb,CACEtmB,IAAKgnB,GAAe1S,GAAI6S,SACxBtqB,QAASmqB,GAAe,GAAG,GAC3B3H,SAAUjlB,GAAQyM,GAAS6B,gBAE3B0e,YAAahtB,GAAQyM,GAAS6B,eAAgB7B,GAASyB,gBAAiBzB,GAASkC,MACjFpK,OAAQid,GACRmC,IAAG,GACHoE,IAAG,GACH7K,MAAOA,GAAM,YACbjO,QAASge,GAAQxgB,GAASiB,WAAW,IAEvC,CACE9H,IAAKgnB,GAAe1S,GAAIgT,gBACxBzqB,QAASmqB,GAAe,GAAG,GAC3BO,UAAWntB,GAAQyM,GAAS6B,gBAC5B4O,MAAOA,GAAM,aACbkQ,aAAcptB,GAAQyM,GAASgC,YAC/BkV,IAAG,GACHoE,IAAGA,IAEL,CACEniB,IAAKgnB,GAAe1S,GAAImT,aACxB5qB,QAASmqB,GAAe,GAAG,GAC3BO,UAAWntB,GAAQyM,GAAS6B,gBAC5B4O,MAAOA,GAAM,aACblc,KAAI,GACJssB,SAAU1B,GAAY,EAAGhM,IACzBzc,QAAO,GACPwgB,IAAG,GACHoE,IAAGA,IAEL,CACEniB,IAAKgnB,GAAe1S,GAAIqT,cACxB9qB,QAASmqB,GAAe,GAAG,GAC3BO,UAAWntB,GAAQyM,GAAS6B,gBAC5B4O,MAAOA,GAAM,aACbsQ,OAAM,GACNf,WACA/G,SAAUA,IAAS,GACnB8G,aACA7I,IAAG,GACHoE,IAAGA,IAEL,CACEniB,IAAKgnB,GAAe1S,GAAIqT,cACxB9qB,QAASmqB,GAAe,GACxBO,UAAWntB,GAAQyM,GAAS6B,gBAC5B4O,MAAOA,GAAM,aACbsQ,OAAM,GACNf,WACA/G,SAAUA,IAAS,GACnB8G,aACA7I,IAAG,GACHoE,IAAGA,IAEL,CACEniB,IAAKgnB,GAAe1S,GAAIuT,gBACxBhrB,QAASmqB,GAAe,GAAG,GAC3BO,UAAWntB,GAAQyM,GAAS6B,gBAC5B4O,MAAOA,GAAM,aACbsQ,OAAM,GAENR,YAAahtB,GAAQyM,GAAS6B,eAAgB7B,GAASkC,MACvDgV,IAAG,GACHoE,IAAGA,IAEL,CACEniB,IAAKgnB,GAAe1S,GAAIwT,cACxBjrB,QAASmqB,GAAe,GAAG,GAC3BO,UAAWntB,GAAQyM,GAAS6B,gBAC5B4O,MAAOA,GAAM,aACbsQ,OAAM,GACN7J,IAAG,GACHoE,IAAGA,IAEL,CACEniB,IAAKgnB,GAAe1S,GAAIgI,kBACxBzf,QAASmqB,GAAe,GAAG,GAC3B3P,QAASjd,GAAQyM,GAAS6B,gBAC1B4O,MAAOA,GAAM,WACbhW,KAAM+lB,GAAQxgB,GAASO,mBACvB2gB,UAAS,GACThK,IAAG,GACHoE,IAAG,GACH6F,QAAS9B,IAAe,CAAChtB,EAAQ,KAC/B,GAAe,KAAVA,EAAa,OAAOA,EACzB,MAAM,IAAI4C,EAAc,UAAW,sCAAuC5C,EAAM,GAC/E0iB,IACHjd,OAAQid,GACRiD,SAAQ,GACRxD,SAAQ,GACR4M,SAAUZ,GAAQxgB,GAASO,oBAE7B,CACEpH,IAAKgnB,GAAe1S,GAAIwB,gBACxBjZ,QAASmqB,GAAe,GAAG,GAC3BkB,SAAU9tB,GAAQyM,GAAS6B,gBAC3B4O,MAAOA,GAAM,YAEb+N,WAAYjrB,GAAQyM,GAASyB,gBAAiBzB,GAASkC,MACvD4L,WAAU,GACVoJ,IAAG,GACHoE,IAAG,GACHxjB,OAAQid,GACRiD,SAAQ,GACRxD,SAAQ,GACR4M,SAAUZ,GAAQxgB,GAASO,oBAE7B,CACEpH,IAAKgnB,GAAe1S,GAAIwI,kBACxBjgB,QAASmqB,GAAe,GAAG,GAC3BO,UAAWntB,GAAQyM,GAAS6B,gBAC5B4O,MAAOA,GAAM,aACb6Q,YAAate,GACbue,eAAgBve,GAChBsW,SAAUvE,GACVyM,cAAerC,GAAYK,GAAiBiC,MAAOC,GAAYlC,KAC/DmC,eAAgBxC,GAAY,IAAKtH,IACjCX,IAAG,GACHoE,IAAG,GACHxN,WAAUA,IAEZ,CACE3U,IAAKgnB,GAAe1S,GAAIyI,gBACxBlgB,QAASmqB,GAAe,GAAG,GAE3B/G,SAAU7lB,GAAQyM,GAAS2B,cAAe3B,GAASkC,MACnDuO,MAAOA,GAAM,YACb+Q,cAAerC,GAAYK,GAAiBiC,MAAOC,GAAYlC,KAC/DmC,eAAgBxC,GAAY,IAAKtH,IACjCX,IAAG,GACHoE,IAAGA,IAEL,CACEniB,IAAKgnB,GAAe1S,GAAI0I,eACxBngB,QAASmqB,GAAe,GAAG,GAC3B3H,SAAUjlB,GAAQyM,GAAS6B,gBAC3B4O,MAAOA,GAAM,YAEb2I,SAAU7lB,GAAQyM,GAAS2B,cAAe3B,GAASkC,MACnD0f,MAAO5e,GACPsW,SAAQ,GACRuI,aAAc1C,GAAYK,GAAiBiC,MAAOC,GAAYlC,KAC9DsC,cAAe3C,GAAY,GAAItH,IAC/BkK,gBAAiB5C,GAAYK,GAAiBiC,MAAOC,GAAYlC,KACjEwC,iBAAkB7C,GAAY,GAAItH,IAClCX,IAAG,GACHoE,IAAGA,IAEL,CACEniB,IAAKgnB,GAAe1S,GAAI2I,kBACxBpgB,QAASmqB,GAAe,GAAG,GAC3B/G,SAAU7lB,GAAQyM,GAAS2B,eAC3B8O,MAAOA,GAAM,YACbwR,QAASzB,GAAQxgB,GAAS4B,eAC1BsgB,SAAUlf,GACV+e,gBAAiB5C,GAAYK,GAAiBiC,MAAOC,GAAYlC,KACjEwC,iBAAkB7C,GAAY,GAAItH,IAClCX,IAAG,GACHoE,IAAGA,IAEL,CACEniB,IAAKgnB,GAAe1S,GAAI0U,iBACxBnsB,QAASmqB,GAAe,GAAG,GAC3BiC,UAAW7uB,GAAQyM,GAAS6B,gBAC5BwgB,gBAAiBlP,GACjBmP,UAAW/uB,GAAQyM,GAAS6B,gBAC5B0gB,gBAAiBpP,GACjBqP,eAAgBrP,GAChBsP,WAAYtP,GACZmI,IAAG,GACHpE,IAAG,GACHwL,qBAAsBhjB,GAAMnM,MAAWmc,KACvCiT,qBAAsBjjB,GAAMnM,MAAWmc,KACvCkT,UAAWpC,GAAQxgB,GAASa,OAC5B4P,MAAOA,GAAM,cAEf,CACEtX,IAAKgnB,GAAe1S,GAAIoV,sBACxB7sB,QAASmqB,GAAe,GAAG,GAC3B2C,UAAWvvB,GAAQyM,GAASwB,SAC5BuhB,OAAQxvB,GAAQyM,GAAS6B,gBACzBmhB,qBAAsB7P,GACtB8P,qBAAsB9P,GACtBmI,IAAG,GACHpE,IAAG,GACHzG,MAAOA,GAAM,WAEf,CACEtX,IAAKgnB,GAAe1S,GAAIyV,oBACxBltB,QAASmqB,GAAe,GAAG,GAC3B2C,UAAWvvB,GAAQyM,GAASwB,SAC5BuhB,OAAQxvB,GAAQyM,GAAS6B,gBACzBW,QAASge,GAAQxgB,GAASU,aAC1ByiB,IAAKvD,GACLtE,IAAG,GACHpE,IAAG,GACHzG,MAAOA,GAAM,WAEf,CACEtX,IAAKgnB,GAAe1S,GAAI2V,gBACxBptB,QAASmqB,GAAe,GAAG,GAC3B2C,UAAWvvB,GAAQyM,GAASwB,SAC5BuhB,OAAQxvB,GAAQyM,GAAS6B,gBACzBW,QAASge,GAAQxgB,GAASU,aAC1ByiB,IAAKvD,GACLtE,IAAG,GACHpE,IAAG,GACHzG,MAAOA,GAAM,WAEf,CACEtX,IAAKgnB,GAAe1S,GAAI4V,kBACxBrtB,QAASmqB,GAAe,GAAG,GAC3B2C,UAAWvvB,GAAQyM,GAASwB,SAC5BuhB,OAAQxvB,GAAQyM,GAAS6B,gBACzB/J,OAAQqb,GACRmI,IAAG,GACHpE,IAAG,GACH0L,UAAWpC,GAAQxgB,GAASa,OAC5ByiB,MAAOzL,GACPpH,MAAOA,GAAM,WAEf,CACEtX,IAAKgnB,GAAe1S,GAAI8V,mBACxBvtB,QAASmqB,GAAe,GAAG,GAC3B2C,UAAWvvB,GAAQyM,GAASwB,SAC5BgiB,KAAMjwB,GAAQyM,GAAS6B,gBACvB/J,OAAQqb,GACRmI,IAAG,GACHpE,IAAG,GACH0L,UAAWpC,GAAQxgB,GAASa,OAC5ByiB,MAAOzL,GACPpH,MAAOA,GAAM,WAEf,CACEtX,IAAKgnB,GAAe1S,GAAIgW,iBACxBztB,QAASmqB,GAAe,GAAG,GAC3B2C,UAAWvvB,GAAQyM,GAASwB,SAC5BuhB,OAAQxvB,GAAQyM,GAAS6B,gBACzBmhB,qBAAsB7P,GACtB8P,qBAAsB9P,GACtBmI,IAAG,GACHpE,IAAG,GACHzG,MAAOA,GAAM,WAEf,CACEtX,IAAKgnB,GAAe1S,GAAI8H,wBACxBvf,QAASmqB,GAAe,GAAG,GAC3B2C,UAAWvvB,GAAQyM,GAASwB,SAC5BuhB,OAAQxvB,GAAQyM,GAAS6B,gBACzBW,QAASge,GAAQxgB,GAASU,aAC1B4iB,MAAOzL,GACPzX,OAAQogB,GAAQxgB,GAASO,mBACzBqiB,UAAWpC,GAAQxgB,GAASa,OAC5B6iB,cAAelD,GAAQxgB,GAASe,YAChCua,IAAG,GACHpE,IAAG,GACHzG,MAAOA,GAAM,WAEf,CACEtX,IAAKgnB,GAAe1S,GAAI+H,mBACxBxf,QAASmqB,GAAe,GAAG,GAC3B2C,UAAWvvB,GAAQyM,GAASwB,SAC5B8hB,MAAOzL,GACP+K,UAAWpC,GAAQxgB,GAASa,QAE9B,CACE1H,IAAKgnB,GAAe1S,GAAIkW,uBACxB3tB,QAASmqB,GAAe,GAAG,GAC3B2C,UAAWvvB,GAAQyM,GAASwB,SAC5BuhB,OAAQxvB,GAAQyM,GAAS6B,gBACzBW,QAASge,GAAQxgB,GAASU,aAC1B4a,IAAG,GACHpE,IAAG,GACHzG,MAAOA,GAAM,WAEf,CACEtX,IAAKgnB,GAAe1S,GAAIiI,YACxB1f,QAASmqB,GAAe,GAAG,GAC3B3P,QAASjd,GAAQyM,GAAS6B,gBAC1B4O,MAAOA,GAAM,WACbhW,KAAM+lB,GAAQxgB,GAASO,mBACvBqjB,QAASvD,GACTa,UAAS,GACThK,IAAG,GACHoE,IAAG,GACHtD,SAAQ,GACRxD,SAAQ,GACR4M,SAAUZ,GAAQxgB,GAASO,oBAE7B,CACEpH,IAAKgnB,GAAe1S,GAAIyB,UACxBlZ,QAASmqB,GAAe,GAAG,GAC3B0D,KAAMtwB,GAAQyM,GAAS6B,gBACvBiiB,SAAUtD,GAAQxgB,GAASO,mBAC3BuN,WAAU,GACVoJ,IAAG,GACHc,SAAQ,GACRxD,SAAQ,GACRlQ,GAAIob,IAEN,CACEvmB,IAAKgnB,GAAe1S,GAAIkI,aACxB3f,QAASmqB,GAAe,GAAG,GAC3B4D,QAASxwB,GAAQyM,GAAS6B,gBAC1B4O,MAAOA,GAAM,WACbyG,IAAG,GACH5S,GAAIob,K,gBCnYD,SAASsE,GACdC,EACAxW,EACAtU,EACAnD,GAEA,MAAMkuB,EAAaD,EAAQ7Y,QAAQ+Y,GAAMA,EAAEhrB,IAAIqgB,aAAergB,IAC9D,GAA0B,IAAtB+qB,EAAW5hB,OAAc,MAAM,IAAIlJ,GAAoB,GAAGqU,EAAItU,OAASA,KAAQ,GACnF,GAAe,MAAXnD,EAAiB,CACnB,MAAMouB,EAAgBF,EAAWppB,MAAMupB,GAAWA,EAAOruB,QAAQyjB,qBACjE,GAAqB,MAAjB2K,EACF,MAAM,IAAIjuB,EAAc,gCAAgCsX,EAAItU,OAASA,MACvEnD,EAAUouB,EAAcpuB,QAAQwjB,UAClC,CACA,MAAM6K,EAASH,EAAWppB,MAAMqpB,GAAMA,EAAEnuB,QAAQwjB,aAAexjB,IAC/D,GAAc,MAAVquB,EAAgB,MAAM,IAAIjrB,GAAoB,GAAGqU,EAAItU,OAASA,KAAQnD,GAC1E,OAAO0I,OAAOE,QAAQylB,EACxB,CAEO,SAASC,GACdL,EACAxW,EACA/P,EAKA6mB,EACAnY,GAEA,MAAMiY,EAASL,GAAUC,EAASxW,EAAK/P,EAAOvE,IAAKuE,EAAO1H,SACpDwuB,EAASH,EAAOhxB,KAAI,EAAEpB,EAAKgmB,KAC/BA,EAAM3J,UAAU5Q,EAAOzL,GAAM,IAAKyL,KAAW6mB,GAAe7mB,KAE9D,OAAOoF,IAAO2hB,EAAAA,GAAAA,QAAUD,GAASpY,EACnC,CAEO,SAASsY,GACdT,EACAxW,EACAkX,EACAC,EACAL,GAEA,MAAMC,GAASK,EAAAA,GAAAA,QAAU9hB,GAAO4hB,IAC1BxrB,GAAO0Y,GAAQ2S,EAAO,IACtBxuB,GAAW6b,GAAQ2S,EAAO,IAC1BH,EAASL,GAAUC,EAASxW,EAAKtU,EAAKnD,GAC5C,GAAmB,MAAf4uB,GAAuBA,IAAgBzrB,EACzC,MAAM,IAAIL,GAAY,YAAY2U,EAAImX,eAAyBnX,EAAItU,cAErE,GAAIqrB,EAAOliB,SAAW+hB,EAAO/hB,OAC3B,MAAM,IAAIrN,EAAc,aAAcovB,EAAO/hB,OAAQkiB,EAAOliB,QAE9D,OAAO5D,OAAOC,YACZ0lB,EAAOhxB,KAAI,EAAEkB,EAAM0jB,GAAQ6M,IAAU,CACnCvwB,EACA0jB,EAAMtd,YAAY6pB,EAAOM,GAAsBP,MAGrD,CC5EA,I,GAAA,IACEjW,SAAAA,CAAUjc,GACR,OAAOyM,GAAAA,OAAOG,KAAK,CAAC5M,EAAQ,EAAI,GAClC,EAEAsI,WAAAA,CAAYgI,GACV,OAAqB,IAAdA,EAAO,EAChB,GCHa,SAASoiB,GACtB3Y,EACAjT,GAgBA,MAAO,CACLmV,SAAAA,CAAU7P,GAAQ,UAAEiV,IAClB,OAAO3Q,GACL2Q,EAAU,CACRva,IAAKomB,GAASyF,MACd/Q,OAAQvV,OAAOE,QAAQH,GAAQpL,KAC7B,EAAEpB,EAAKI,MAAM,CAET8G,IAAKomB,GAAS0F,WACdhzB,IAAK8Q,GAAO9Q,GACZI,MAAO0Q,GAAO2Q,EAAU,IAAMrhB,EAAe8G,eAKzD,EAEAwB,WAAAA,CAAYgI,GAAQ,YAAEmR,IACpB,MAAM,OAAEG,GAAWH,EAAYhR,GAAOH,EAAQ3C,GAASiB,WAAYse,GAASyF,OAC5E,OAAOtmB,OAAOC,YACZsV,EAEG7I,QAAO,EAAGnZ,SAAUma,IAAapM,GAASyB,iBAAkC,KAAfxP,EAAIqQ,SACjEjP,KAAI,EAAGpB,MAAKI,WAAY,CACvByQ,GAAO7Q,EAAKma,GACZ0H,EAAYhR,GAAOzQ,EAAO2N,GAASiB,WAAY9H,MAGvD,EAEA+rB,eAAe,EAEnB,C,4aC3C8E,IAIzEC,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,sBAARA,EAAAA,EAAQ,4BAARA,EAAAA,EAAQ,kBAARA,CAAQ,EAARA,IAAQ,IAAAC,GAAA,IAAAvpB,QAAAwpB,GAAA,IAAAxpB,QAAAypB,GAAA,IAAAzpB,QAAA0pB,GAAA,IAAA1pB,QAAA2pB,GAAA,IAAA3pB,QAAA4pB,GAAA,IAAA5pB,QAAA6pB,GAAA,IAAApgB,QAQb,MAAMqgB,GAKJ,cAAIC,GACF,OAAO9oB,GAAKuoB,GAAL/wB,KACT,CAqBAH,WAAAA,CAAYqwB,EAAsBpY,EAAajT,EAAQ0sB,GAOrD,GA0EFpgB,GAAA,KAAAigB,IA5GAjpB,GAAA,KAAS2oB,QAAS,GAElB3oB,GAAA,KAAA4oB,IAAc,GAMd5oB,GAAA,KAAS6oB,QAAM,GAEf7oB,GAAA,KAAS8oB,QAAS,GAElB9oB,GAAA,KAAS+oB,QAAI,GAEb/oB,GAAA,KAASgpB,QAAY,GAcnB/oB,GAAK6oB,GAALjxB,KAAiB8X,GACjB1P,GAAK8oB,GAALlxB,KAAY6E,GACZuD,GAAK+oB,GAALnxB,KAAoBuxB,GACpBnpB,GAAK0oB,GAAL9wB,KAAiBkwB,EAAO,GAAG5tB,SAAS,QACpC8F,GAAK4oB,GAALhxB,KAAcoK,OAAOC,YAAY6lB,EAAO,GAAGnxB,KAAKgY,GAAS,CAACA,EAAK,GAAGzU,SAAS,OAAQyU,EAAK,QAErD,MAA/BvO,GAAKwoB,GAALhxB,MAAYwI,GAAKsoB,GAAL9wB,OAOhBoK,OAAOE,QAAQ9B,GAAKwoB,GAALhxB,OAAaspB,SAAQ,EAAE3rB,EAAKoZ,MACzC,GAAIya,GAAgB7oB,KAAhB0oB,GAAiBta,KAAUpZ,EAAK,MAAM,IAAIqG,GAC9C,MAAM,KAAElG,GAAS2zB,GAAiB9oB,KAAjB0oB,GAAkBta,GACnC,OAAQjZ,GACN,KAAK+yB,GAASa,OACZ3a,EACG7X,MAAM,EAAG,IACT4X,QAAQ6a,GAAMA,EAAE3jB,SAChBsb,SAASqI,IAK8B,MAAlCnpB,GAAKwoB,GAALhxB,MAAY2xB,EAAErvB,SAAS,SAAiB8F,GAAK2oB,GAAL/wB,MAAmB,EAAH,IAEhE,MACF,KAAK6wB,GAASe,UACZ,GAA4C,MAAxCppB,GAAKwoB,GAALhxB,MAAY+W,EAAK,GAAGzU,SAAS,QAC/B,MAAM,IAAI2B,GAAuB,+CAEnC,MACF,KAAK4sB,GAASgB,KACZ,MACF,QACE,MAAM,IAAIhwB,EAAc,6BAA6B/D,KACzD,QAhCF,CACE,GAAwC,IAApCsM,OAAOwJ,KAAKpL,GAAKwoB,GAALhxB,OAAagO,OAC3B,MAAM,IAAI/J,GAAuB,kCAEnCmE,GAAK2oB,GAAL/wB,MAAmB,EAErB,CA4BF,CAEA8xB,OAAAA,CAAQC,GACN,OAAOvpB,GAAKsoB,GAAL9wB,QAAmBwI,GAAKsoB,GAALiB,EAC5B,CA6BA/X,SAAAA,GACE,MAAO,CACLxP,GAAAA,OAAOG,KAAKnC,GAAKsoB,GAAL9wB,MAAgB,OAC5BoK,OAAOE,QAAQ9B,GAAKwoB,GAALhxB,OAAajB,KAAI,EAAEizB,EAASj0B,KAAW,CAACyM,GAAAA,OAAOG,KAAKqnB,EAAS,OAAQj0B,KAExF,CA2CAqU,GAAAA,CAAIzU,GACF,MAAMs0B,EAAI5gB,GAAA+f,GAAApxB,KAAKkyB,IAAOvpB,KAAZ3I,KAAayO,GAAO9Q,GAAK2E,SAAS,QAC5C,OAAS,MAAL2vB,EAAkBA,EACfzpB,GAAK2oB,GAALnxB,MAAiB2I,KAAjB3I,KAAkBwO,GAAOyjB,EAAGvmB,GAASiB,WAAYnE,GAAK0oB,GAALlxB,MAC1D,CAmCAmyB,QAAAA,GACE,OAAO/nB,OAAOC,YACZgH,GAAA+f,GAAApxB,KAAKoyB,IAAWzpB,KAAhB3I,MAEG8W,QAAO,EAAE5B,KAAO1M,GAAKyoB,GAALjxB,QAAmB0L,GAASyB,iBAAgC,KAAb+H,EAAElH,SACjEjP,KAAI,EAAEmW,EAAGC,KAAO,CACf3G,GAAOhE,GAAAA,OAAOG,KAAKuK,EAAG,OAAQ1M,GAAKyoB,GAALjxB,OAC9BwI,GAAK2oB,GAALnxB,MAAiB2I,KAAjB3I,KAAkBwO,GAAO2G,EAAGzJ,GAASiB,WAAYnE,GAAK0oB,GAALlxB,UAGzD,EAvMU,SAAAwxB,GAiBOza,GACf,OAAOvM,GAAAA,OAAOG,KAAKoN,IAAKoY,EAAAA,GAAAA,QAAUpZ,KAAQzU,SAAS,MACrD,CAAC,SAAAmvB,GAwDiB1a,GAChB,OAAQA,EAAK/I,QACX,KAAK,GACH,MAAO,CACLlQ,KAAM+yB,GAASa,UACS,IAApB3a,EAAK,IAAI/I,QAAgB,CAAEjQ,MAAOgZ,EAAK,MAE/C,KAAK,EAAG,CACN,MAAM1S,EAAS0S,EAAK,GAAG,IAAM,EAC7B,GAAI1S,EAAS,EAAG,MAAM,IAAID,GAAuBC,GACjD,MAAMvG,EAAOuG,GAAU,EAAIwsB,GAASe,UAAYf,GAASgB,KACnD3yB,EAAQ,CAAC,EAAG,GAAGmM,SAAShH,GAAU,EAAI,EAC5C,MAAO,CACLvG,UACIA,IAAS+yB,GAASgB,MAAQ,CAAE9zB,MAAOgZ,EAAK,IAC5Csb,KAAMtb,EAAK,GAAGzU,SAAS,OAAOpD,MAAMA,GAExC,CACA,QACE,MAAM,IAAIgF,GAAuB6S,EAAK/I,QAE5C,CAAC,SAAAkkB,GAkBOI,GACN,IAAIC,EAAa/pB,GAAKsoB,GAAL9wB,MACbrC,EAAM20B,EACV,MAAO,EAAM,CAEX,MAAMvb,EAAOvO,GAAKwoB,GAALhxB,MAAYuyB,GACzB,GAAY,MAARxb,EAAc,CAChB,IAAK/W,KAAKsxB,WAAY,OACtB,MAAM,IAAIzvB,EAAc,mCAC1B,CACA,MAAM,KAAE/D,EAAI,MAAEC,EAAK,KAAEs0B,GAASZ,GAAiB9oB,KAAjB6pB,GAAkBzb,GAChD,OAAQjZ,GACN,KAAK+yB,GAASa,OACZ,GAAmB,IAAf/zB,EAAIqQ,OAAc,OAAOjQ,EAC7Bw0B,EAAaxb,GAAM,KAAKpZ,EAAI,MAAM2E,SAAS,OAC3C3E,EAAMA,EAAI80B,UAAU,GACpB,MACF,KAAK5B,GAASe,UACZ,GAAIj0B,EAAI80B,UAAU,EAAGJ,GAAMrkB,UAAYqkB,EAAM,OAC7CE,EAAaxb,EAAK,GAAGzU,SAAS,OAC9B3E,EAAMA,EAAI80B,UAAUJ,EAAKrkB,QACzB,MACF,KAAK6iB,GAASgB,KACZ,GAAIQ,IAAS10B,EAAK,OAClB,OAAOI,EACT,QACE,MAAM,IAAI8D,EAAc,6BAA6B/D,KAE3D,CACF,CAAC,SAAAs0B,KAcC,MAAM9nB,EAAmC,GACnCooB,EAAMA,CAACH,EAAoB50B,KAC/B,MAAMoZ,EAAOvO,GAAKwoB,GAALhxB,MAAYuyB,GACzB,GAAY,MAARxb,EAAc,CAChB,IAAK/W,KAAKsxB,WAAY,OACtB,MAAM,IAAIzvB,EAAc,mCAC1B,CACA,MAAM,KAAE/D,EAAI,MAAEC,EAAK,KAAEs0B,GAASZ,GAAiB9oB,KAAjB6pB,GAAkBzb,GAChD,OAAQjZ,GACN,KAAK+yB,GAASa,OACZ3a,EACG7X,MAAM,EAAG,IACTH,KAAI,CAACiQ,EAAGya,IAA4B,CAACza,EAAGya,KACxC3S,QAAO,EAAE9H,KAAOA,EAAEhB,SAClBsb,SAAQ,EAAEta,EAAGya,KAASiJ,EAAI1jB,EAAE1M,SAAS,OAAQ3E,EAAM8rB,EAAInnB,SAAS,OACtD,MAATvE,GAAeuM,EAAQ1D,KAAK,CAACjJ,EAAKI,IACtC,MACF,KAAK8yB,GAASe,UACZc,EAAI3b,EAAK,GAAGzU,SAAS,OAAQ3E,EAAM00B,GACnC,MACF,KAAKxB,GAASgB,KACZ,GAAa,MAAT9zB,EAAe,MAAM,IAAI+D,EAC7BwI,EAAQ1D,KAAK,CAACjJ,EAAM00B,EAAMt0B,IAC1B,MACF,QACE,MAAM,IAAI8D,EAAc,6BAA6B/D,KACzD,EAGF,OADA40B,EAAIlqB,GAAKsoB,GAAL9wB,MAAgB,IACbsK,CACT,CAea,SAASqoB,GACtB7a,EACAjT,GAKA,MAAO,CACLmV,SAAAA,CAAUjc,GACR,OAAOA,EAAMic,WACf,EAEA3T,WAAAA,CAAYtI,GAAO,YAAEyhB,IACnB,OAAO,IAAI6R,GAAOtzB,EAAO+Z,EAAUjT,EAAK2a,EAC1C,EAEJ,CCrOe,SAASoT,GACtB/tB,GAgBA,MAAO,CACLmV,SAAAA,CAAU9L,GAAS,UAAEkR,IACnB,OAAO3Q,GAAO2Q,EAAU,CAAEva,MAAKqJ,YACjC,EAEA7H,WAAAA,CAAYgI,GAAQ,YAAEmR,IACpB,OAAOA,EAAyBhR,GAAOH,EAAQ3C,GAASiB,WAAY9H,GAAKqJ,OAC3E,EAEA0iB,eAAe,EAEnB,CDuLC4B,GAxMKnB,GESN,MAAMwB,GAAuBznB,GAAMmgB,GAAMN,GAAS0F,aAY5CmC,GAAe/zB,GAAI2M,GAASyB,gBAAiB8d,GAAS8H,UAYtDC,GAAcj0B,GAAI2M,GAAS6B,eAAgB0d,GAASgI,SAYpDC,GAAWn0B,GAAI2M,GAASiB,UAAWse,GAASkI,cAQ5CC,GAAcr0B,GAAI2M,GAASwB,QAAS+d,GAAS/d,SAQ7CmmB,GAAWt0B,GAAI2M,GAASkC,KAAMqd,GAASrd,MAUvC0lB,GAAav0B,GAAI2M,GAAS2B,cAAe4d,GAASsI,QAK3C5D,GAAU,CACrB,CACE9qB,IAAKgnB,GAAeZ,GAASgI,SAC7BvxB,QAASmqB,GAAe,GACxB1P,MAAOoH,GACPsE,QAAShJ,IAEX,CACEha,IAAKgnB,GAAeZ,GAASgI,SAC7BvxB,QAASmqB,GAAe,GAAG,GAC3B2H,MAAO3U,GACP1C,MAAOoH,GACPsE,QAAShJ,GACT4U,WAAYx0B,GAAQyM,GAASyB,gBAAiBzB,GAASkC,MACvD8lB,UAAWxH,GAAQxgB,GAASO,oBAE9B,CACEpH,IAAKgnB,GAAeZ,GAASrd,MAC7BlM,QAASmqB,GAAe,GAAG,GAC3BO,UAAWntB,GAAQyM,GAAS6B,gBAC5Bme,QAASnI,GACThM,OAAQwU,GAIRN,UAAWlI,GACXoB,SAAQA,IAEV,CACE9f,IAAKgnB,GAAeZ,GAAS8H,UAC7BrxB,QAASmqB,GAAe,GAAG,GAC3B8H,MAAO10B,GAAQyM,GAAS6B,gBACxBqf,UAAS,GACTzmB,KAAM+lB,GAAQxgB,GAASO,mBACvBrG,IAAKsmB,GAAQxgB,GAASO,mBACtB9O,OAAQy2B,GACRC,SAAUzoB,GAAMnM,GAAQyM,GAAS6B,iBACjCsf,QAASpM,IAEX,CACE5b,IAAKgnB,GAAeZ,GAASkI,cAC7BzxB,QAASmqB,GAAe,GAAG,GAC3BkB,SAAU9tB,GAAQyM,GAAS6B,gBAC3BumB,YAAavQ,GACbiD,OAAQjD,GACR2G,WAAYjrB,GAAQyM,GAASyB,iBAE7B+S,SAAUrB,GACVkV,QAASxQ,GACTyQ,YAAa9H,GAAQxgB,GAASO,mBAC9BgoB,WAAY7G,GAAYpC,IAGxBplB,IAAKwF,GAAM2gB,KAEb,CACElnB,IAAKgnB,GAAeZ,GAASsI,QAC7B7xB,QAASmqB,GAAe,GAAG,GAC3BO,UAAWntB,GAAQyM,GAAS6B,gBAC5Byf,YAAate,GACbue,eAAgBve,GAChBsW,SAAUvE,GACV4M,eAAgB9J,GAChB/J,WAAUA,IAEZ,CACE3U,IAAKgnB,GAAeZ,GAAS/d,SAC7BxL,QAASmqB,GAAe,GAAG,GAC3BiC,UAAW7uB,GAAQyM,GAAS6B,gBAC5BygB,UAAW/uB,GAAQyM,GAAS6B,gBAC5B2mB,cAAerV,GACfkP,gBAAiBlP,GACjBoP,gBAAiBpP,GACjBqP,eAAgBrP,GAChBuP,qBAAsBhjB,GAAMnM,MAAWmc,KACvCiT,qBAAsBjjB,GAAMnM,MAAWmc,KACvCkT,UAAWpC,GAAQxgB,GAASa,OAC5ByiB,MAAOzL,GACP4Q,UAAWtV,GACXsP,WAAYtP,GACZuV,YAAavV,GACbwV,cAAenI,GAAQxgB,GAASO,mBAChCqoB,cAAepI,GAAQxgB,GAASO,oBAElC,CACEpH,IAAKgnB,GAAeZ,GAASsJ,+BAC7B7yB,QAASmqB,GAAe,GAAG,GAC3BlhB,KAAM1L,GAAQyM,GAAS6B,gBACvBinB,GAAIv1B,GAAQyM,GAAS6B,gBACrB/J,OAAQqb,IAEV,CACEha,IAAKgnB,GAAeZ,GAASwJ,8BAC7B/yB,QAASmqB,GAAe,GAAG,GAC3BlhB,KAAM1L,GAAQyM,GAAS6B,gBACvB/J,OAAQqb,IAEV,CACEha,IAAKgnB,GAAeZ,GAASyJ,+BAC7BhzB,QAASmqB,GAAe,GAAG,GAC3BlhB,KAAM1L,GAAQyM,GAAS6B,gBACvB/J,OAAQqb,IAEV,CACEha,IAAKgnB,GAAeZ,GAAS0J,qCAC7BjzB,QAASmqB,GAAe,GAAG,GAC3B8H,MAAO10B,GAAQyM,GAAS6B,gBACxBqf,UAAS,GACTzmB,KAAM+lB,GAAQxgB,GAASO,mBACvB4gB,QAAShO,GACTiO,SAAUZ,GAAQxgB,GAASO,oBAE7B,CACEpH,IAAKgnB,GAAeZ,GAAS2J,mCAC7BlzB,QAASmqB,GAAe,GAAG,GAC3BgJ,OAAQ51B,GAAQyM,GAAS6B,gBACzBunB,SAAU71B,GAAQyM,GAASyB,iBAC3BqM,WAAU,GACVhW,OAAQqb,GACRiO,SAAUZ,GAAQxgB,GAASO,mBAC3B8oB,UAAWhJ,GACX7L,SAAQ,GACRwD,SAAQA,IAEV,CACE7e,IAAKgnB,GAAeZ,GAASO,UAC7B9pB,QAASmqB,GAAe,GAAG,GAE3BnZ,SAAUtH,GAAM4pB,GAAOtpB,GAAS6B,eAAgB0d,GAASgI,UACzDgC,MAAO7pB,GAAM4pB,GAAOtpB,GAASiB,UAAWse,GAASkI,eACjD+B,SAAU9pB,GAAM4pB,GAAOtpB,GAASwB,QAAS+d,GAAS/d,UAClDioB,UAAW/pB,GAAM4pB,GAAOtpB,GAASyB,gBAAiB8d,GAAS8H,WAC3DqC,GAAIhqB,GAAM4pB,GAAOtpB,GAASkC,KAAMqd,GAASrd,OACzCynB,QAASjqB,GAAM4pB,GAAOtpB,GAAS2B,cAAe4d,GAASsI,UAEzD,CACE1uB,IAAKgnB,GAAeZ,GAASxe,YAC7B/K,QAASmqB,GAAe,GAAG,GAC3BsJ,UAAWG,GAAQrK,GAASsK,gBAC5BN,MAAOK,GAAQrK,GAASuK,YACxBN,SAAUI,GAAQrK,GAASwK,eAC3BL,GAAIE,GAAQrK,GAASyK,kBACrBL,QAASC,GAAQrK,GAAS0K,cAC1BjjB,SAAU4iB,GAAQrK,GAAS2K,gBAE7B,CACE/wB,IAAKgnB,GAAeZ,GAASyF,OAC7BhvB,QAASmqB,GAAe,GAAG,GAC3BlM,OAAQkT,IAEV,CACEhuB,IAAKgnB,GAAeZ,GAAS0F,YAC7BjvB,QAASmqB,GAAe,GAAG,GAC3BluB,IAAKouB,GACLhuB,MAAOguB,IAET,CACElnB,IAAKgnB,GAAeZ,GAASsK,gBAC7B7zB,QAASmqB,GAAe,GAAG,GAC3B3d,QAAS4kB,IAEX,CACEjuB,IAAKgnB,GAAeZ,GAASuK,YAC7B9zB,QAASmqB,GAAe,GAAG,GAC3B3d,QAASglB,IAEX,CACEruB,IAAKgnB,GAAeZ,GAASwK,eAC7B/zB,QAASmqB,GAAe,GAAG,GAC3B3d,QAASklB,IAEX,CACEvuB,IAAKgnB,GAAeZ,GAASyK,kBAC7Bh0B,QAASmqB,GAAe,GAAG,GAC3B3d,QAASmlB,IAEX,CACExuB,IAAKgnB,GAAeZ,GAAS0K,cAC7Bj0B,QAASmqB,GAAe,GAAG,GAC3B3d,QAASolB,IAEX,CACEzuB,IAAKgnB,GAAeZ,GAAS2K,eAC7Bl0B,QAASmqB,GAAe,GAAG,GAC3B3d,QAAS8kB,IAEX,CACEnuB,IAAKgnB,GAAeZ,GAAS4K,kBAC7Bn0B,QAASmqB,GAAe,GAAG,GAC3BjJ,IAAKnC,GACLP,SAAQ,GACRjb,OAAQinB,GAAQxgB,GAAS0B,UC5RvB0oB,GAAc,CAClB,CAAC7K,GAASuK,WAAY9pB,GAASgB,eAC/B,CAACue,GAASxe,WAAYf,GAASe,YAC/B,CAACwe,GAASO,SAAU9f,GAASc,MAaxB,SAAS4S,GAAUhW,GAAgC,IAAA2sB,EACxD,MAAMje,EAA+D,QAAvDie,EAAGD,GAAYtvB,MAAK,EAAE3B,KAASA,IAAQuE,EAAOvE,QAAO,UAAE,IAAAkxB,EAAAA,EAAIrqB,GAASiB,UAClF,OAAOqjB,GAAWL,GAAS1E,GAAU7hB,EAAQ,CAAEgW,cAAatH,EAC9D,CAoBO,SAAS0H,GAAY0M,EAAsBoE,GAAqC,IAAA0F,EAErF,OADW,QAAXA,EAAA1F,SAAW,IAAA0F,IAAX1F,EAAgBwF,GAAYtvB,MAAK,EAAE,CAAE+U,KAAS2Q,EAAQ3M,WAAWhE,OAAQ,IAClE6U,GAAaT,GAAS1E,GAAUiB,EAASoE,EAAa,CAAE9Q,gBACjE,CCjCO,SAASkQ,GAAU7qB,EAAUnD,GAClC,OAAOu0B,GAAgBrK,GAAUzS,GAAKtU,EAAKnD,EAC7C,CAaO,SAAS4gB,GAAQlZ,GACtB,OAAO4mB,GACLpE,GACAzS,GACA/P,EACA,CAEEiZ,YACAC,WACAI,UAAYwT,GAAwB5T,GAAQ,IAAKlZ,KAAW8sB,IAC5D9W,UAASA,IAEX1T,GAASU,YAEb,CAcOvC,eAAessB,GAAa/sB,GAUjC,aATMU,QAAQssB,IACZ1G,GAAUtmB,EAAOvE,IAAKuE,EAAO1H,SAAS3C,KAAI8K,OAAQlM,EAAKgmB,MAChC,MAAjBA,EAAMxJ,UAEV/Q,EAAOzL,SAAagmB,EAAMxJ,QAAQ/Q,EAAOzL,GAAMyL,EAAQA,GAAO,KAK3DkZ,GAAQlZ,EACjB,CASO,SAASiZ,GACdG,EACA1B,GAEA,OAAOsP,GAAaxE,GAAUzS,GAAKqJ,EAAW1B,EAAQ,CAAEuB,YAAU7C,YAAWA,IAC/E,CAQO,SAAS6W,GAAYC,GAC1B,MAAMlwB,EAAwB,kBAAVkwB,GAAsBA,EAAM/W,WAAW,OAAS9Q,GAAO6nB,GAASA,EACpF,OAAO9nB,GAAOuJ,GAAK3R,GAAOsF,GAAS0B,OACrC,CAQO,SAASmpB,GACdC,GAEA,IAAIptB,EAASiZ,GAASmU,GAEtB,GADIrd,GAAIkS,WAAajiB,EAAOvE,MAAKuE,EAASA,EAAOoZ,WAC7CrJ,GAAIgI,mBAAqB/X,EAAOvE,KAAOsU,GAAIiI,aAAehY,EAAOvE,IACnE,MAAM,IAAIlE,EAAc,aAAc,iCAAkCyI,EAAOvE,KAEjF,OAAOoX,GAAgB7S,EAAO8S,QAAS9S,EAAO+S,MAChD,CCxGO,MAAMsa,GAAM,IACNC,GAAc,EACdC,GAAmB,EACnBC,GAAwB,EACxBC,GAAwB,EAKtB,MAAMC,WAAsBntB,GAMzC9J,WAAAA,CACWk3B,EACAvG,EACSvxB,GAElBc,QAAQ,KAJCg3B,UAAAA,EAAoB,KACpBvG,MAAAA,EAAa,KACJvxB,QAAAA,EAGlB83B,EAAUC,sBAAsBh3B,KAAM,CAAC,kBAAmB,eAAgB,MAC5E,CAGA,UAAeyP,GACb,MAAM,IAAIlO,EAAoB,8BAChC,CAGA,mBAAe+O,GACb,MAAM,IAAI/O,EAAoB,qCAChC,CAGA,oBAAekP,GACb,MAAM,IAAIlP,EAAoB,qCAChC,CAEA,qBAAewO,CACbC,GACA,QAAEC,EAAO,UAAE7I,GAAyD,CAAC,GAErE,GAAe,MAAX6I,EAAiB,MAAM,IAAI1O,EAAoB,mCACnD,GAAiB,MAAb6F,EAAmB,MAAM,IAAIzG,EAAc,YAAa,WAAYyG,GAExE,MAAMkvB,EAAQ7nB,GAAOuB,GACrB,IAAIinB,EAAS,EACb,MAAMC,EAAe,EACfC,EAAkB3sB,GAAAA,OAAOG,KAAKvD,GAC9BgwB,EAAS,GACf,MAAOH,IAAWX,EAAMtoB,OAAQ,CAC9B,MAAMqpB,EAA0B,IAAXJ,EAAe,IAAMC,EAAeC,EAAgBnpB,OAAS,IAC5EspB,EAAYL,EAASI,EAAef,EAAMtoB,OAASsoB,EAAMtoB,OAASipB,EAASI,EAC3EhpB,EAAS7D,GAAAA,OAAO+sB,MACT,IAAXN,EAAeC,EAAeC,EAAgBnpB,OAASspB,EAAYA,GAErE,GAAe,IAAXL,EAAc,CAChB,IAAIO,EAAenpB,EAAOopB,cAAcz3B,KAAKwwB,MAAO,GACpDgH,EAAenpB,EAAOopB,cAAcnB,EAAMtoB,OAAQwpB,GAClDA,EAAenpB,EAAOqpB,WAAWP,EAAgBnpB,OAAQwpB,GACzDA,GAAgBL,EAAgBQ,KAAKtpB,EAAQmpB,EAAc,EAAGL,EAAgBnpB,QAC9EsoB,EAAMqB,KAAKtpB,EAAQmpB,EAAc,EAAG,IAAMA,EAC5C,MACElB,EAAMqB,KAAKtpB,EAAQ,EAAG4oB,EAAQA,EAASK,GAEzCF,EAAOxwB,KAAKyH,GACZ4oB,GAAUK,CACZ,CACA,MAAM1J,QAAiBwJ,EAAOQ,QAC5B/tB,MAAOguB,EAAUzxB,EAAM0xB,WACfD,EACC73B,KAAK+2B,UAAUgB,KAAKtB,GAAKE,GAAwB,IAANmB,EAAU,EAAO,IAAM,EAAM1xB,KAEjF0D,QAAQC,QAAQS,GAAAA,OAAO+sB,MAAM,KAEzBzL,EAAa,CAAC8B,EAAShS,SAAS,EAAG,KAEzC,OAAO0G,GAAQ,CAAEzd,IAAKsU,GAAIkS,SAAU7I,UAAW8T,EAAOxK,cACxD,CAEA,iBAAezb,CAAY2nB,GACzB,IAAIf,EAAS,EACb,MAAMn3B,EAAU0K,GAAAA,OAAOG,KAAKqtB,GACtBZ,EAAS,GACf,MAAOH,IAAWn3B,EAAQkO,OAAQ,CAChC,MAAMqpB,EAA0B,IAAXJ,EAAe,IAAc,IAC5CK,EACJL,EAASI,EAAev3B,EAAQkO,OAASlO,EAAQkO,OAASipB,EAASI,EAC/DhpB,EAAS7D,GAAAA,OAAO+sB,MAAiB,IAAXN,EAAe,EAAQK,EAAYA,GAChD,IAAXL,GACF5oB,EAAOopB,cAAcz3B,KAAKwwB,MAAO,GACjCniB,EAAOopB,cAAc33B,EAAQkO,OAAQ,GACrClO,EAAQ63B,KAAKtpB,EAAQ,EAAO4oB,EAAQA,EAASK,IAE7Cx3B,EAAQ63B,KAAKtpB,EAAQ,EAAG4oB,EAAQA,EAASK,GAE3CF,EAAOxwB,KAAKyH,GACZ4oB,GAAUK,CACZ,CACA,MAAM1J,QAAiBwJ,EAAOQ,QAC5B/tB,MAAOguB,EAAUzxB,EAAM0xB,WACfD,EACC73B,KAAK+2B,UAAUgB,KAAKtB,GAAKI,GAA6B,IAANiB,EAAU,EAAO,IAAM,EAAM1xB,KAEtF0D,QAAQC,QAAQS,GAAAA,OAAO+sB,MAAM,KAE/B,OAAO3J,EAAShS,SAAS,EAAG,GAC9B,ECnHF,SAASqc,GAAOC,EAAWC,GACzB,MAAMC,EAAiBjjB,GACrBA,EACG/F,MAAM,QAAQ,GACdA,MAAM,KACNrQ,KAAK+4B,IAAOA,IAEXO,EAAcD,EAAcF,GAC5BI,EAAcF,EAAcD,GAE5B/R,EAAOxI,KAAKiJ,OAAOwR,KAAgBC,GAAe,EAClDC,EAAsBljB,GAC1BA,EAAWmjB,UAAUZ,QAAO,CAACa,EAAK9G,EAAGlI,IAAQgP,EAAM9G,EAAIvL,GAAQqD,GAAK,GAEtE,OAAO8O,EAAmBF,GAAeE,EAAmBD,EAC9D,CAEe,SAASI,GACtBh3B,EACAC,EACAC,GAEA,OAAOq2B,GAAOv2B,EAASC,IAAc,IAAmB,MAAbC,GAAqBq2B,GAAOv2B,EAASE,GAAa,EAC/F,CCjBe,MAAe+2B,GAa5B,cAAMC,CAAS7hB,GACb,IAAIyZ,EAAQ,EACZ,MAAMze,EAAS,GACf,IAAI/S,EACJ,GACiB,MAAXA,GAAiB+S,EAAOnL,KAAK5H,GACjCA,QAAgBgB,KAAK64B,WAAWrI,GAChCA,GAAS,cAEHzZ,EAAK0Q,mBAAmBzoB,EAAQC,SAAS6V,MAC7C,KAAM,IACN,KAAM,KAGV,OAAO/C,CACT,E,4aC7BgD,IAAA+mB,GAAA,IAAAvxB,QAAAwxB,GAAA,IAAA/nB,QASnC,MAAMgoB,WAA6BL,GAIhD94B,WAAAA,CAAqBk3B,GACnBh3B,QAAQoR,GAAA,KAAA4nB,IAIV5wB,GAAA,KAAA2wB,QAAmB,GAAiB,KALf/B,UAAAA,EAEnBA,EAAUC,sBAAsBh3B,KAAM,CAAC,aAAc,uBAAwB,MAC/E,CAQA,iBAAMi5B,GACJ,MAAM,QAAEv3B,SAAkB2P,GAAA0nB,GAAA/4B,KAAKk5B,IAAoBvwB,KAAzB3I,MACpB7B,EAAO,CAACuD,EAAS,QAAS,SAChC,IAAKg3B,MAAmBv6B,GACtB,MAAM,IAAIqD,EAAwB,6BAA8BrD,GAClEiK,GAAK0wB,GAAL94B,KAA2B8J,QAAQC,UACrC,CAiBA,yBAAMovB,GACJ,OAAO9nB,GAAA0nB,GAAA/4B,KAAKk5B,IAAoBvwB,KAAzB3I,KACT,CAOA,gBAAMo5B,CAAWC,EAAsBphB,GAAS,SACxC5G,GAAA0nB,GAAA/4B,KAAKs5B,IAAY3wB,KAAjB3I,MACN,MAAMqO,EAAS7D,GAAAA,OAAO+sB,MAAM,GAC5BlpB,EAAOopB,cAAc4B,EAAc,GACnC,MAAMzL,QAAiB5tB,KAAK+2B,UAAUgB,KACpCtB,GACAC,GACAze,EAAS,EAAO,EAChB,EACA5J,GAEIkrB,EAAgB3L,EAAS,GAC/B,OAAOA,EAAShS,SAAS,EAAG,EAAI2d,GAAej3B,SAAS,QAC1D,CAMA,gBAAMu2B,CAAWQ,GACf,OAAO,IAAIvC,GAAc92B,KAAK+2B,UAAWsC,QAAoBr5B,KAAKo5B,WAAWC,GAC/E,EACD,eAAAC,KA9CqC,IAAAE,EAElC,OADwB,QAAxBA,EAAAhxB,GAAKswB,GAAL94B,aAAwB,IAAAw5B,GAAxBpxB,GAAK0wB,GAAL94B,KAA6BA,KAAKi5B,eAC3BzwB,GAAKswB,GAAL94B,KACT,CAAC,eAAAk5B,KAGC,MAAMtL,QAAiB5tB,KAAK+2B,UAAUgB,KAAKtB,GAAKG,GAAuB,EAAM,GAC7E,MAAO,CACLl1B,QAAS,CAACksB,EAAS,GAAIA,EAAS,GAAIA,EAAS,IAAIzuB,KAAK,KAE1D,C,gBjDtBF,IACEs6B,OAAAA,GACEz5B,KAAKwX,eAAiB,IACxB,EACApR,KAAMA,KAAA,CACJmR,OAAQ,GACR7E,SAAU,KAEZkD,UAAUC,EAAAA,GAAAA,IAAS,CAAC,UACpB3E,QAAS,CACP,aAAM1S,GACJ,IACEwB,KAAKuX,OAAS,8BACd,MAAMwf,QAAkB2C,GAAAA,EAAgBC,SACxC35B,KAAKwX,eAAiB,IAAIwhB,GAAqBjC,EACjD,CAAE,MAAOnsB,GACP,GAAmB,+BAAfA,EAAM3K,KAAuC,OACjD,MAAM2K,CACR,CAAE,QACA5K,KAAKuX,OAAS,EAChB,CACF,EACA,gBAAMlZ,GACJ2B,KAAKwX,eAAiB,KACtBxX,KAAK0S,SAAW,GAChB1S,KAAKkX,OAAOC,OAAO,kBAAcvO,GAC7BwB,OAAOwJ,KAAK5T,KAAK4W,MAAMlE,UAAU1E,QAAQhO,KAAK4W,MAAMQ,cAAcpX,KAAK4W,MAAM3X,QACnF,EACA,gBAAMoY,GACJ,IACErX,KAAKuX,OAAS,8BACd,MAAMkS,EAAMzpB,KAAK0S,SAAS1E,OACpBhP,QAAgBgB,KAAKwX,eAAeqhB,WAAWpP,GACrDzpB,KAAKuX,OAAS,eAAevY,EAAQC,iDAC/Be,KAAKwX,eAAe4hB,WAAW3P,GAAK,GAC1CzpB,KAAK0S,SAAS9L,KAAK5H,GACnBgB,KAAK8V,WAAW9V,KAAK0S,SAAS,GAChC,CAAE,MAAO9H,GACP,GAAyB,QAArBA,EAAMY,WAAuB,OACjC,MAAMZ,CACR,CAAE,QACA5K,KAAKuX,OAAS,EAChB,CACF,EACAE,aAAAA,GACEzX,KAAK0S,SAAS9L,KAAK5G,KAAK0S,SAASknB,SACjC55B,KAAK8V,WAAW9V,KAAK0S,SAAS,GAChC,EACA,gBAAMgF,GACJ,MAAMtQ,EAA4C,eAAhCpH,KAAKkX,OAAO2iB,MAAMzyB,UAA6B,SAAW,eACrE,KAAEnH,WAAiBD,KAAK4W,MAAMC,kBAAkBC,QACpDC,GAASA,EAAKC,gBAAkB5P,IAEnCpH,KAAK4W,MAAMK,WAAWhX,GACtBD,KAAKkX,OAAOC,OAAO,eAAgB/P,EACrC,EACA0O,UAAAA,CAAW9W,GACLoL,OAAOwJ,KAAK5T,KAAK4W,MAAMlE,UAAU1E,QAAQhO,KAAK4W,MAAMQ,cAAcpX,KAAK4W,MAAM3X,SACjFe,KAAK4W,MAAMS,WAAWrY,EAAS,CAAEK,QAAQ,IACzCW,KAAKkX,OAAOC,OAAO,aAAcnY,EAAQC,QAC3C,IkDhFJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,U,UCNOvC,MAAM,S,IADbiB,IAAA,G,IAAAA,IAAA,G,qEACEhB,EAAAA,EAAAA,IAiBM,MAjBNK,GAiBM,CAhBWI,EAAAoa,iBAAwC,WACvD7a,EAAAA,EAAAA,IAUWC,EAAAA,GAAA,CAbfe,IAAA,KAIMd,EAAAA,EAAAA,IAA+C,UAAtCS,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAC,YAAAD,EAAAC,cAAAF,KAAY,eAC5BtB,EAAAA,EAAAA,IAA4D,UAAnDS,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAA07B,aAAA17B,EAAA07B,eAAA37B,KAAa,2BAC7BtB,EAAAA,EAAAA,IAAgD,UAAvCS,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAiZ,YAAAjZ,EAAAiZ,cAAAlZ,KAAY,eACdf,EAAAsV,SAAS1E,OAAS,IAAH,WAA7BrR,EAAAA,EAAAA,IAAiF,UAPvFgB,IAAA,EAO0CL,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAqZ,eAAArZ,EAAAqZ,iBAAAtZ,KAAe,oBAPhEP,EAAAA,EAAAA,IAAA,QAQMf,EAAAA,EAAAA,IAAgD,UAAvCS,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAsZ,YAAAtZ,EAAAsZ,cAAAvZ,KAAY,eACjBf,EAAAsV,SAAS1E,SAAM,WAA1BrR,EAAAA,EAAAA,IAGM,MAZZ8B,GAAA,cAUQ5B,EAAAA,EAAAA,IAAmB,WAAd,YAAQ,KACbA,EAAAA,EAAAA,IAAkF,YAAAgC,EAAAA,EAAAA,IAA1EzB,EAAAsV,SAAS3T,KAAKC,GAAYA,EAAQC,QAAQC,MAAM,EAAG,KAAIC,KAAK,OAAD,OAX3EvB,EAAAA,EAAAA,IAAA,eAEiC,WAA7BjB,EAAAA,EAAAA,IAAgE,UAFpEgB,IAAA,EAEoCL,QAAKC,EAAA,KAAAA,EAAA,OAAAY,IAAEC,EAAAI,SAAAJ,EAAAI,WAAAL,KAAS,YAYrCf,EAAAma,SAAM,WAAjB5a,EAAAA,EAAAA,IAGM,MAjBV8C,GAAA,cAeM5C,EAAAA,EAAAA,IAAiB,WAAZ,UAAM,KACXC,EAAAA,EAAAA,IAAyBuX,EAAA,CAAjBtW,MAAOX,EAAAma,QAAM,sBAhB3B3Z,EAAAA,EAAAA,IAAA,Q,CCKO,MAAMm8B,GAAS,6BAEflwB,eAAemwB,GACpBC,EACA9wB,EACAC,EACAzL,GAEA,MAAMiwB,QAAiBqM,EAASrqB,QAAoC,CAClEzG,OAAQ,oBACRC,OAAQ,CAAE2wB,UAAQnqB,QAAS,CAAEzG,SAAQC,aAEvC,GAAgB,MAAZwkB,EAAkB,MAAM,IAAI/rB,EAAc,2BAC9C,KAAMlE,KAAOiwB,GACX,MAAM,IAAI/rB,EAAc,OAAOlE,wBAA0BiU,KAAKC,UAAU+b,MAE1E,OAAOA,EAASjwB,EAClB,CAMe,MAAMu8B,WAAwBvwB,GAU3C9J,WAAAA,CAAYo6B,EAAwBzJ,EAAevxB,GACjDc,QACAC,KAAKi6B,SAAWA,EAChBj6B,KAAKwwB,MAAQA,EACbxwB,KAAKf,QAAUA,CACjB,CAGA,UAAewQ,GACb,MAAM,IAAIlO,EAAoB,6BAChC,CAGA,mBAAe+O,GACb,MAAM,IAAI/O,EAAoB,oCAChC,CAGA,oBAAekP,GACb,MAAM,IAAIlP,EAAoB,oCAChC,CAGA,qBAAewO,CACbC,GACA,QAAEC,EAAO,UAAE7I,GAAyD,CAAC,GAErE,GAAe,MAAX6I,EAAiB,MAAM,IAAI1O,EAAoB,qCACnD,GAAiB,MAAb6F,EAAmB,MAAM,IAAIzG,EAAc,YAAa,WAAYyG,GAExE,OAAO4yB,GACLh6B,KAAKi6B,SACL,kBACA,CAAEE,eAAgB,CAAC,GAAGn6B,KAAKwwB,SAAU,KAAM,MAAOxgB,KAAI5I,aACtD,WAEJ,CAGA,iBAAeiJ,CAAYvQ,GACzB,MAAM6P,QAAkBqqB,GACtBh6B,KAAKi6B,SACL,cACA,CACEE,eAAgB,CAAC,GAAGn6B,KAAKwwB,SAAU,KAAM,MACzC1wB,QAAS0K,GAAAA,OAAOG,KAAK7K,GAASwC,SAAS,WAEzC,aAEF,OAAOkI,GAAAA,OAAOG,KAAKgF,EAAW,SAChC,E,4aC7EF,MAAMyqB,GAAiB,QACjBC,GAAiB,QAAQ,IAAAC,GAAA,IAAAtpB,QAAA8nB,GAAA,IAAAvxB,QAahB,MAAMgzB,WAA+B5B,GAMlD94B,WAAAA,CAAYo6B,GAEV,GADAl6B,QAkBFoR,GAAA,KAAAmpB,IAcAnyB,GAAA,KAAA2wB,QAAmB,GA/BD,MAAZmB,EAAJ,CAIA,GAAc,MAAVpyB,OACF,MAAM,IAAIxG,EACR,mGAGJ,KAAM,aAAcwG,SAA8B,MAAnBA,OAAO2yB,SACpC,MAAM,IAAIn5B,EACR,kHAGJrB,KAAKi6B,SAAWpyB,OAAO2yB,QAXvB,MAFEx6B,KAAKi6B,SAAWA,CAcpB,CAqBA,iBAAMH,SACEzoB,GAAAipB,GAAAt6B,KAAKy6B,IAAwB9xB,KAA7B3I,MACN,MAAM06B,QAAiB16B,KAAKi6B,SAASrqB,QAAQ,CAC3CzG,OAAQ,sBACRC,OAAQ,CAAE,CAAC2wB,IAAS,CAAEr4B,QAAS04B,OAGjC,OADAhyB,GAAK0wB,GAAL94B,KAA2B8J,QAAQC,WAC5B2wB,EAAQX,GACjB,CAMA,iBAAMd,GACJ,MAAM0B,QAAoB36B,KAAK46B,iBACzBz8B,EAAO,CAACw8B,EAAaP,GAAgBC,IAC3C,IAAK3B,MAAmBv6B,GACtB,MAAM,IAAIqD,EAAwB,gCAAiCrD,GACrEiK,GAAK0wB,GAAL94B,KAA2B8J,QAAQC,UACrC,CAUA,oBAAM6wB,SACEvpB,GAAAipB,GAAAt6B,KAAKy6B,IAAwB9xB,KAA7B3I,MACN,MAAM66B,QAAe76B,KAAKi6B,SAASrqB,QAAQ,CAAEzG,OAAQ,oBAI/CzH,EAAUm5B,EAAMd,KAASr4B,QAC/B,GAAe,MAAXA,EACF,MAAM,IAAIL,EAAyB,+CACrC,OAAOK,CACT,CAMA,gBAAMm3B,CAAWQ,SACThoB,GAAAipB,GAAAt6B,KAAKs5B,IAAY3wB,KAAjB3I,MACN,MAAMf,QAAgB+6B,GACpBh6B,KAAKi6B,SACL,eACA,CAAEE,eAAgB,CAAC,GAAGd,KAAiB,KAAM,OAC7C,aAEF,OAAO,IAAIa,GAAgBl6B,KAAKi6B,SAAUZ,EAAcp6B,EAC1D,EACD,eAAAw7B,KAvEG,MAAM/4B,QAAgB1B,KAAKi6B,SAASrqB,QAAgB,CAAEzG,OAAQ,uBAC9D,GAAe,MAAXzH,EAAiB,MAAM,IAAIG,EAAc,uCAC7C,MAAMi5B,EAAiB,aACvB,IAAKp5B,EAAQ6d,WAAWub,GACtB,MAAM,IAAIz5B,EAAyB,0BAA0BK,aAE/D,MAAMvD,EAAO,CAACuD,EAAQxC,MAAM47B,EAAe9sB,QAAS,UACpD,IAAK0qB,MAAmBv6B,GAAO,MAAM,IAAIqD,EAAwB,cAAerD,EAClF,CAAC,eAAAm7B,KA6BmC,IAAAE,EAElC,OADwB,QAAxBA,EAAAhxB,GAAKswB,GAAL94B,aAAwB,IAAAw5B,GAAxBpxB,GAAK0wB,GAAL94B,KAA6BA,KAAKi5B,eAC3BzwB,GAAKswB,GAAL94B,KACT,CFpEF,QACEqV,WAAY,CAAEC,MAAKA,IACnBmkB,OAAAA,GACEz5B,KAAKwX,eAAiB,IACxB,EACApR,KAAMA,KAAA,CACJmR,OAAQ,GACR7E,SAAU,KAEZkD,UAAUC,EAAAA,GAAAA,IAAS,CAAC,UACpB3E,QAAS,CACP1S,OAAAA,GACE,IACEwB,KAAKuX,OAAS,gCACdvX,KAAKwX,eAAiB,IAAI+iB,GAC1Bv6B,KAAKuX,OAAS,EAChB,CAAE,MAAO3M,GACP,GAAIA,aAAiBvJ,EAEnB,YADArB,KAAKuX,OAAS3M,EAAM9K,SAItB,MADAE,KAAKuX,OAAS,GACR3M,CACR,CACF,EACAvM,UAAAA,GACE2B,KAAKwX,eAAiB,KACtBxX,KAAK0S,SAAW,GAChB1S,KAAKkX,OAAOC,OAAO,kBAAcvO,GAC7BwB,OAAOwJ,KAAK5T,KAAK4W,MAAMlE,UAAU1E,QAAQhO,KAAK4W,MAAMQ,cAAcpX,KAAK4W,MAAM3X,QACnF,EACA,iBAAM66B,GACJ,IACE95B,KAAKuX,OAAS,gCACdvX,KAAKuX,aAAevX,KAAKwX,eAAesiB,aAC1C,CAAE,MAAOlvB,GACP,GAAIA,aAAiBvJ,EAEnB,YADArB,KAAKuX,OAAS3M,EAAM9K,SAItB,GADAE,KAAKuX,OAAS,GACK,OAAf3M,EAAMzE,KAAe,OACzB,MAAMyE,CACR,CACF,EACA,gBAAMyM,GACJ,IACErX,KAAKuX,OAAS,gCACd,MAAMkS,EAAMzpB,KAAK0S,SAAS1E,OACpBhP,QAAgBgB,KAAKwX,eAAeqhB,WAAWpP,GACrDzpB,KAAK0S,SAAS9L,KAAK5H,GACnBgB,KAAK8V,WAAW9V,KAAK0S,SAAS,GAChC,CAAE,MAAO9H,GACP,GAAmB,OAAfA,EAAMzE,KAAe,OACzB,MAAMyE,CACR,CAAE,QACA5K,KAAKuX,OAAS,EAChB,CACF,EACAE,aAAAA,GACEzX,KAAK0S,SAAS9L,KAAK5G,KAAK0S,SAASknB,SACjC55B,KAAK8V,WAAW9V,KAAK0S,SAAS,GAChC,EACA,gBAAMgF,GACJ,MAAMtQ,EAA4C,eAAhCpH,KAAKkX,OAAO2iB,MAAMzyB,UAA6B,SAAW,eACrE,KAAEnH,WAAiBD,KAAK4W,MAAMC,kBAAkBC,QACpDC,GAASA,EAAKC,gBAAkB5P,IAEnCpH,KAAK4W,MAAMK,WAAWhX,GACtBD,KAAKkX,OAAOC,OAAO,eAAgB/P,EACrC,EACA0O,UAAAA,CAAW9W,GACLoL,OAAOwJ,KAAK5T,KAAK4W,MAAMlE,UAAU1E,QAAQhO,KAAK4W,MAAMQ,cAAcpX,KAAK4W,MAAM3X,SACjFe,KAAK4W,MAAMS,WAAWrY,EAAS,CAAEK,QAAQ,IACzCW,KAAKkX,OAAOC,OAAO,aAAcnY,EAAQC,QAC3C,IGhGJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,U3EQA,IACEoW,WAAY,CAAE0lB,MAAK,GAAEC,OAAM,GAAEC,SAAQA,IACrC70B,KAAMA,KAAA,CAAS/I,KAAM,W4EZvB,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,KAEpE,U,UCLOX,MAAM,S,+IAFbC,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,mBACEC,EAAAA,EAAAA,IAA4B,UAAxB,uBAAmB,KACvBA,EAAAA,EAAAA,IAqBM,MArBNG,GAqBM,EApBJH,EAAAA,EAAAA,IAGM,yBAFJA,EAAAA,EAAAA,IAAkB,WAAb,WAAO,KACZA,EAAAA,EAAAA,IAAwB,YAAAgC,EAAAA,EAAAA,IAAhBzB,EAAA6B,SAAO,MAEjBpC,EAAAA,EAAAA,IAGM,yBAFJA,EAAAA,EAAAA,IAAkB,WAAb,WAAO,KACZC,EAAAA,EAAAA,IAAiCuX,EAAA,CAAzBtW,MAAOX,EAAA89B,gBAAc,qBAE/Br+B,EAAAA,EAAAA,IAGM,yBAFJA,EAAAA,EAAAA,IAAiB,WAAZ,UAAM,KACXC,EAAAA,EAAAA,IAAgCuX,EAAA,CAAxBtW,MAAOX,EAAA+9B,eAAa,qBAE9Bt+B,EAAAA,EAAAA,IAGM,yBAFJA,EAAAA,EAAAA,IAAoB,WAAf,aAAS,KACdC,EAAAA,EAAAA,IAAkCuX,EAAA,CAA1BtW,MAAOX,EAAAg+B,iBAAe,qBAEhCv+B,EAAAA,EAAAA,IAGM,yBAFJA,EAAAA,EAAAA,IAA2B,WAAtB,oBAAgB,KACrBC,EAAAA,EAAAA,IAAyCuX,EAAA,CAAjCtW,MAAOX,EAAAi+B,wBAAsB,uBAIzCv+B,EAAAA,EAAAA,IAAcw+B,IAEdx+B,EAAAA,EAAAA,IAAey+B,IAEfz+B,EAAAA,EAAAA,IAAY0+B,IAAA,G,WC3BP9+B,MAAM,S,IAFbiB,IAAA,G,qEAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,mBACEC,EAAAA,EAAAA,IAAoB,UAAhB,eAAW,KACfA,EAAAA,EAAAA,IA4BM,MA5BNG,GA4BM,EA3BJH,EAAAA,EAAAA,IAKM,yBAJJA,EAAAA,EAAAA,IAA4B,WAAvB,qBAAiB,KACtBA,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAAgD,SANxD,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAMwBJ,EAAAq+B,QAAOj+B,GAAE0W,YAAY,U,iBAArB9W,EAAAq+B,gBAGpB5+B,EAAAA,EAAAA,IAGM,yBAFJA,EAAAA,EAAAA,IAAuB,WAAlB,gBAAY,KACjBA,EAAAA,EAAAA,IAA0C,sBAArCA,EAAAA,EAAAA,IAA+B,SAX1C,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAW2BJ,EAAAs+B,YAAWl+B,I,iBAAXJ,EAAAs+B,oBAEvB7+B,EAAAA,EAAAA,IAGM,yBAFJA,EAAAA,EAAAA,IAAkB,WAAb,WAAO,KACZA,EAAAA,EAAAA,IAA2C,sBAAtCA,EAAAA,EAAAA,IAAgC,SAf3C,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAe2BJ,EAAAu+B,aAAYn+B,I,iBAAZJ,EAAAu+B,qBAEvB9+B,EAAAA,EAAAA,IAQS,UAPNS,QAAKC,EAAA,KAAAA,EAAA,QAA6BH,EAAAw+B,aAAex9B,EAAAy9B,OAAK,IAKxD,WAGUz+B,EAAAw+B,eAAY,WAAvBj/B,EAAAA,EAAAA,IAGM,MA7BV8B,GAAA,cA2BM5B,EAAAA,EAAAA,IAAuB,WAAlB,gBAAY,KACjBC,EAAAA,EAAAA,IAA+BuX,EAAA,CAAvBtW,MAAOX,EAAAw+B,cAAY,sBA5BjCh+B,EAAAA,EAAAA,IAAA,a,CAsCA,QACEyX,WAAY,CAAEC,MAAKA,IACnBlP,KAAMA,KAAA,CACJq1B,QAAS,GACTC,YAAa,GACbC,aAAc,GACdC,aAAc,OAEhBhmB,UAAUC,EAAAA,GAAAA,IAAS,CAAC,UACpB3E,QAAS,CACP2qB,KAAAA,GACE,OAAO77B,KAAK4W,MAAMilB,MAAM77B,KAAK07B,YAAa17B,KAAKy7B,QAAS,CACtDvtB,QAASM,IAAO,IAAIstB,aAActtB,OAAOxO,KAAK27B,cAAejwB,GAASiB,YAE1E,IC/CJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,U,2ECNElP,EAAAA,EAAAA,IAOEs+B,EAAA,CANAC,MAAM,iBACN,YAAU,kBACV,kBAAgB,sDAChB,eAAa,eACZ,iBAAgB59B,EAAA69B,YACjB,eAAa,uB,qCCLVv/B,MAAM,S,IAFbiB,IAAA,G,GAAA,gB,IAAAA,IAAA,G,qEAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,OACEC,EAAAA,EAAAA,IAAoB,WAAAgC,EAAAA,EAAAA,IAAbq9B,EAAAF,OAAK,IACZn/B,EAAAA,EAAAA,IAoBM,MApBNG,GAoBM,CAnBOk/B,EAAAC,WAAQ,WAAnBx/B,EAAAA,EAAAA,IAKM,MARV8B,GAAA,EAIM5B,EAAAA,EAAAA,IAAyB,YAAAgC,EAAAA,EAAAA,IAAjBq9B,EAAAC,UAAQ,IAChBt/B,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAA0D,SANlE,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAMwB4+B,EAAAC,SAAQ7+B,GAAG0W,YAAagoB,EAAAI,gB,OANhD78B,IAAA,OAMwB28B,EAAAC,kBANxBz+B,EAAAA,EAAAA,IAAA,QASIf,EAAAA,EAAAA,IAQS,UAPNS,QAAKC,EAAA,KAAAA,EAAA,QAA6B6+B,EAAAjoB,QAAU+nB,EAAAK,cAAcH,EAAAC,SAAQ,K,QAMhEH,EAAAM,aAAW,GAELJ,EAAAjoB,UAAO,WAAlBxX,EAAAA,EAAAA,IAGM,MArBV8/B,GAAA,EAmBM5/B,EAAAA,EAAAA,IAA4B,YAAAgC,EAAAA,EAAAA,IAApBq9B,EAAAQ,aAAW,IACnB5/B,EAAAA,EAAAA,IAA0BuX,EAAA,CAAlBtW,MAAOq+B,EAAAjoB,SAAO,sBApB5BvW,EAAAA,EAAAA,IAAA,a,CA4BA,QACEyX,WAAY,CAAEC,MAAKA,IACnBf,MAAO,CACLynB,MAAO,CAAEl+B,KAAM2W,OAAQe,UAAU,GACjC2mB,SAAU,CAAEr+B,KAAM2W,OAAQe,UAAU,GACpC8mB,eAAgB,CAAEx+B,KAAM2W,OAAQe,UAAU,GAC1CmnB,gBAAiB,CAAE7+B,KAAM2W,OAAQe,UAAU,GAC3CgnB,YAAa,CAAE1+B,KAAM2W,OAAQe,UAAU,GACvC+mB,cAAe,CAAEz+B,KAAMyX,SAAUC,UAAU,GAC3CknB,YAAa,CAAE5+B,KAAM2W,OAAQe,UAAU,IAEzCpP,IAAAA,GACE,MAAO,CACLi2B,SAAUr8B,KAAK28B,gBACfxoB,QAAS,KAEb,GCvCF,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,UFQA,IACEkB,WAAY,CAAEunB,YAAWA,IACzBhnB,UAAUC,EAAAA,GAAAA,IAAS,CAAC,UACpB3E,QAAS,CACP+qB,WAAAA,CAAYY,GACV,OAAO78B,KAAK4W,MAAMvG,YAAYwsB,EAChC,IGhBJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,U,UCLOngC,MAAM,S,GAFb,U,GAAA,U,IAAAiB,IAAA,G,qEAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,mBACEC,EAAAA,EAAAA,IAA+B,UAA3B,0BAAsB,KAC1BA,EAAAA,EAAAA,IAwCM,MAxCNG,GAwCM,EAvCJH,EAAAA,EAAAA,IASM,yBARJA,EAAAA,EAAAA,IAAuB,WAAlB,gBAAY,KACjBA,EAAAA,EAAAA,IAMM,aALJA,EAAAA,EAAAA,IAIE,SAHCkB,MAAOK,EAAA0+B,WAAWx6B,WAClBy6B,QAAKx/B,EAAA,KAAAA,EAAA,GAAAC,GAAEY,EAAA4+B,QAAQx/B,EAAOmK,OAAO5J,QAC9BmW,YAAY,c,QATtBzV,SAaI5B,EAAAA,EAAAA,IASM,yBARJA,EAAAA,EAAAA,IAAsB,WAAjB,eAAW,KAChBA,EAAAA,EAAAA,IAMM,aALJA,EAAAA,EAAAA,IAIE,SAHCkB,MAAOK,EAAA0+B,WAAWx6B,SAAS,OAC3By6B,QAAKx/B,EAAA,KAAAA,EAAA,GAAAC,GAAEY,EAAA4+B,QAAQx/B,EAAOmK,OAAO5J,MAAO,QACrCmW,YAAY,oB,QAnBtBzU,SAuBI5C,EAAAA,EAAAA,IAKM,yBAJJA,EAAAA,EAAAA,IAAuB,WAAlB,gBAAY,KACjBA,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAAuD,SA1B/D,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GA0BwBJ,EAAAgJ,KAAI5I,GAAE0W,YAAY,oB,iBAAlB9W,EAAAgJ,aAGpBvJ,EAAAA,EAAAA,IAQS,UAPNS,QAAKC,EAAA,KAAAA,EAAA,QAA6BH,EAAA+W,QAAU/V,EAAA6+B,UAAQ,IAKtD,eAGU7/B,EAAA+W,UAAO,WAAlBxX,EAAAA,EAAAA,IAGM,MAzCV8/B,GAAA,cAuCM5/B,EAAAA,EAAAA,IAA2B,WAAtB,oBAAgB,KACrBC,EAAAA,EAAAA,IAA0BuX,EAAA,CAAlBtW,MAAOX,EAAA+W,SAAO,sBAxC5BvW,EAAAA,EAAAA,IAAA,a,iBAmDA,MAAMs/B,GAAY1uB,GAAO2uB,GAAAA,OAAOxyB,KAAK,IAAKe,GAASiB,WAEnD,QACE0I,WAAY,CAAEC,MAAKA,IACnBM,SAAU,KACLC,EAAAA,GAAAA,IAAS,CAAC,UACbinB,UAAAA,GACE,IACE,OAAOK,GAAAA,OAAOxyB,KAAK8D,GAAOzO,KAAKoG,MAAQ82B,IACzC,CAAE,MAAOtyB,GACP,OAAOuyB,GAAAA,OAAOxyB,KAAK,GACrB,CACF,GAEFvE,KAAMA,KAAA,CACJA,KAAM,GACN+N,QAAS,OAEXjD,QAAS,CACP8rB,OAAAA,CAAQ52B,EAAMtI,GACZkC,KAAKoG,KAAOoI,GAAO2uB,GAAAA,OAAOxyB,KAAKvE,EAAMtI,GAAO4N,GAASiB,UACvD,EACAswB,QAAAA,GACE,OAAOj9B,KAAK4W,MAAMnH,KAAKhB,GAAOzO,KAAKoG,MAAQ82B,IAC7C,ICtEJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,URgCA,IACE7nB,WAAY,CACVC,MAAK,GACL8nB,WAAU,GACVC,YAAW,GACXC,SAAQA,IAEVl3B,KAAMA,KAAA,CACJ80B,eAAgB,KAChBC,cAAe,KACfC,gBAAiB,KACjBC,uBAAwB,OAE1BzlB,UAAUC,EAAAA,GAAAA,IAAS,CAAC,QAAS,UAAW,cACxC0nB,OAAAA,GACEv9B,KAAKw9B,QACH,EAAG5mB,QAAO3X,UAASmI,eAAgB,CAACwP,EAAO3X,EAASmI,KACpD,EAAEwP,EAAO3X,MACPe,KAAKq7B,uBAAyBzkB,EAAM6mB,YAAY/7B,UAChD1B,KAAKk7B,eAAiBj8B,EAClB2X,EAAM8Q,WAAWzoB,GACjB6K,QAAQ2H,OAAO,IAAI7R,MAAM,0BAC7BI,KAAKm7B,cAAgBvkB,EAAM0P,YAC3BtmB,KAAKo7B,gBAAkBxkB,EAAMyD,aAAa,GAE5C,CAAEpF,WAAW,GAEjB,GS7DF,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,U,UCLOvY,MAAM,S,IAFbiB,IAAA,G,+FAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,mBACEC,EAAAA,EAAAA,IAA0B,UAAtB,qBAAiB,KACrBA,EAAAA,EAAAA,IAoBM,MApBNG,GAoBM,EAnBJH,EAAAA,EAAAA,IAKM,yBAJJA,EAAAA,EAAAA,IAA+B,WAA1B,wBAAoB,KACzBA,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAA2E,YANnF,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAM2BJ,EAAAsgC,mBAAkBlgC,GAAE0W,YAAY,uB,iBAAhC9W,EAAAsgC,2BAGvB7gC,EAAAA,EAAAA,IAQS,UAPNS,QAAKC,EAAA,KAAAA,EAAA,QAA6BH,EAAAugC,cAAgBv/B,EAAAu7B,QAAM,IAK1D,YAGUv8B,EAAAugC,gBAAa,WAAxBhhC,EAAAA,EAAAA,IAGM,MArBV8B,GAAA,cAmBM5B,EAAAA,EAAAA,IAA4B,WAAvB,qBAAiB,KACtBC,EAAAA,EAAAA,IAAoDuX,EAAA,CAA5CtW,MAAOX,EAAAugC,cAAc7oB,MAAK,IAAM,W,sBApB9ClX,EAAAA,EAAAA,IAAA,SAwBkBR,EAAA03B,WAAQ,WACtBr3B,EAAAA,EAAAA,IAKEs+B,EAAA,CA9BNp+B,IAAA,EA0BMq+B,MAAM,mBACN,eAAa,UACZ,iBAAgB59B,EAAAw/B,QACjB,eAAa,Y,6BA7BnBhgC,EAAAA,EAAAA,IAAA,OAiCkBR,EAAA03B,WAAQ,WACtBr3B,EAAAA,EAAAA,IAQEs+B,EAAA,CA1CNp+B,IAAA,EAmCMq+B,MAAM,kBACN,YAAU,kBACV,kBAAgB,kBAChB,oBAAkB,IAClB,eAAa,SACZ,iBAAgB59B,EAAAy/B,OACjB,eAAa,qB,6BAzCnBjgC,EAAAA,EAAAA,IAAA,OA6CkBR,EAAA0gC,gBAAa,WAA7BnhC,EAAAA,EAAAA,IAoBWC,EAAAA,GAAA,CAjEbe,IAAA,KA8CIb,EAAAA,EAAAA,IAQEi/B,EAAA,CAPAC,MAAM,yBACN,YAAU,gBACV,kBAAgB,gBAChB,oBAAkB,IAClB,eAAa,OACZ,iBAAgB59B,EAAA2/B,YACjB,eAAa,e,4BAGfjhC,EAAAA,EAAAA,IAQEi/B,EAAA,CAPAC,MAAM,uCACN,YAAU,gBACV,kBAAgB,gBAChB,oBAAkB,IAClB,eAAa,OACZ,iBAAgB59B,EAAA4/B,WACjB,eAAa,e,kCA/DnBpgC,EAAAA,EAAAA,IAAA,W,yCCWA,MAAMqgC,GAAe,gBAERC,GAAmBA,IAC3B//B,KAEH,MAAMggC,GAAaC,EAAAA,GAAAA,OAAwBjgC,IACrC,UAAE6b,EAAS,YAAE3T,GAAgB83B,EACnC,OAAO/zB,OAAOsf,OAAOyU,EAAY,CAC/BnkB,SAAAA,KACMqkB,EAAQl0B,EAAQm0B,EAAYp2B,IAGhC,GAAyB,WAArBm2B,EAAOvgC,KAAKmC,MAA+B,MAAVkK,EACnC,OAAO6P,EAAUrR,KAAK3I,KAAMq+B,EAAQl0B,EAAQm0B,EAAYp2B,GAE1B,IAAAq2B,EAAhC,GAAsB,kBAAXp0B,EAET,MADU,QAAVo0B,EAAAD,SAAU,IAAAC,IAAVD,EAAeD,EAAOG,gBAChB,IAAI5+B,MAAM,GAAG0+B,gBAAyBn0B,6BAE9C,OAAOA,EAAO7H,UAChB,EAEA+D,WAAAA,KACMg4B,EAAQI,EAAcH,EAAYp2B,IAGtC,GAAyB,WAArBm2B,EAAOvgC,KAAKmC,MAAqC,MAAhBw+B,EAAsB,CAC7B,kBAAjBA,GAA6BA,EAAalf,WAAW0e,MAC9Dt4B,QAAQqP,KAAK,sCAAsCypB,yBACnDA,GAAgBA,EAAatb,QAAQ8a,GAAc,KAErD,MAAMlsB,EAAS1L,EAAYsC,KAAK3I,KAAMq+B,EAAQI,EAAcH,EAAYp2B,GAGxE,OAAI6J,aAAkBiO,KAAa,IAAIA,MAAMjO,EAAS,KAC/CA,CACT,CACA,GAA4B,kBAAjB0sB,GAA6BA,EAAe/pB,OAAOgqB,iBAC5D,MAAM,IAAI78B,EAAc,UAAU48B,+CAEpC,OAAOne,OAAOme,EAAan8B,WAAW6gB,QAAQ8a,GAAc,IAC9D,GACA,EAGEU,GAAajqB,OAAOgqB,iBAAiBp8B,WAAW0L,OAChD4wB,GAAmB,IAAIC,OAAOpqB,OAAOsX,GAAG,kBAAkB4S,iBAA0B,KACpFG,GAAoB,IAAID,OAAOpqB,OAAOsX,GAAG,gBAAgB4S,UAAmB,KACrEI,GAAoC,CAC/C9+B,KAAM,gBACN,iBAAM++B,CAAYpvB,EAASqvB,GACzB,MAAMrR,QAAiBqR,EAAKrvB,GAC5B,OAA2B,MAAvBge,EAASsR,aAEbtR,EAASsR,WAAatR,EAASsR,WAAWC,WACxC,IAAIN,OAAOD,GAAkB,MAC5BQ,IACC,MAAMC,EAAQD,EAAQC,MAAMT,IAC5B,GAAa,MAATS,EAAe,MAAM,IAAIv9B,EAC7B,MAAO,CAAE7B,EAAMlC,EAAOuhC,GAAOD,EAC7B,MAAO,CACLp/B,GACClC,EAAQ2W,OAAOgqB,iBAAmB,IAAIT,KAAelgC,KAAWA,EACjEuhC,GACAngC,KAAK,GAAG,IAIdyuB,EAASsR,WAAatR,EAASsR,WAAWC,WACxC,IAAIN,OAAOC,GAAmB,MAC7BM,IACC,MAAMC,EAAQD,EAAQC,MAAMP,IAC5B,GAAa,MAATO,EAAe,MAAM,IAAIv9B,EAC7B,MAAO,CAAEI,EAAQnE,GAASshC,EAC1B,MAAO,GAAGn9B,KAAU+7B,KAAelgC,IAAQ,KAtBP6vB,CA0B1C,GAGW2R,GAAyBA,KACpC,MAAMC,EAAgB,IAAIpuB,IAE1B,MAAO,CACLquB,OAAQ,CACNx/B,KAAM,iBACN,iBAAM++B,CAAYpvB,EAASqvB,GAAM,IAAAS,EAC/B,MAAM/hC,EAAMiS,EAAQ+vB,QAAQvtB,IAAI,WAChCxC,EAAQ+vB,QAAQttB,OAAO,WACvB,MAAMutB,EAAc/1B,SAAuCo1B,EAAKrvB,GAChE,GAAW,MAAPjS,EAAa,OAAOiiC,IACxB,MAAMzW,GAA6B,QAAvBuW,EAACF,EAAcptB,IAAIzU,UAAI,IAAA+hC,EAAAA,EAAI51B,QAAQC,WAAW+K,KAAK8qB,GAK/D,OAJAJ,EAAc9tB,IACZ/T,EACAwrB,EAAI/E,OAAM,UAEL+E,CACT,GAEF0W,SAAU,UACX,EAGUC,GAA8BA,KACzC,MAAMC,EAAqB,IAAI3uB,IAE/B,MAAO,CACLquB,OAAQ,CACNx/B,KAAM,uBACN,iBAAM++B,CAAYpvB,EAASqvB,GAAM,IAAAe,EAC/B,GAAuB,QAAnBpwB,EAAQzG,OAAkB,OAAO81B,EAAKrvB,GAC1C,MAAMjS,EAAMiU,KAAKC,UAAU,CAACjC,EAAQqwB,IAAKrwB,EAAQyG,OAC3CuX,EAAsC,QAA9BoS,EAAGD,EAAmB3tB,IAAIzU,UAAI,IAAAqiC,EAAAA,EAAIf,EAAKrvB,GACrDmwB,EAAmBruB,IAAI/T,EAAKiwB,GAC5B,IACE,aAAaA,CACf,CAAE,QACAmS,EAAmB1tB,OAAO1U,EAC5B,CACF,GAEFkiC,SAAU,UACX,EAGUK,GAAuCA,KAClD,MAAMC,EAAc,IAAI/uB,IAExB,MAAO,CACLquB,OAAQ,CACNx/B,KAAM,iCACN,iBAAM++B,CAAYpvB,EAASqvB,GAAM,IAAAmB,EAC/B,GAAuB,QAAnBxwB,EAAQzG,OAAkB,OAAO81B,EAAKrvB,GAC1C,MAAMjS,EAAMiU,KAAKC,UAAU,CAACjC,EAAQqwB,IAAKrwB,EAAQyG,OAC3CuX,EAA+B,QAAvBwS,EAAGD,EAAY/tB,IAAIzU,UAAI,IAAAyiC,EAAAA,EAAInB,EAAKrvB,GAE9C,OADAuwB,EAAYzuB,IAAI/T,EAAKiwB,GACdA,CACT,GAEFiS,SAAU,UACX,EAGUQ,GACXC,IAA8B,CAE9Bb,OAAQ,CACNx/B,KAAM,kBACN,iBAAM++B,CAAYpvB,EAASqvB,GACzB,IACE,aAAaA,EAAKrvB,EACpB,CAAE,MAAOhF,GACP,KACIA,aAAiBW,GAAAA,KACF,MAAjBX,EAAMgF,SACNhF,EAAM9K,QAAQyf,WAAW,UAEzB,MAAM3U,EACR,MAAM1I,EAAS,GAAG,IAAI6a,IAAInS,EAAMgF,QAAQqwB,KAAK7iB,SAASle,MAAM,WAE5D,GAAkC,MAA9B0L,EAAMgjB,UAAUsR,WAElB,KADsB,KAAlBt0B,EAAM9K,UAAgB8K,EAAM9K,QAAU,GAAGoC,MAAW0I,EAAMzE,QACxDyE,EAGR,MAAMyL,EAAQzL,EAAMgjB,SAAmC2S,WACvD31B,EAAM9K,QAAUoC,EAChB,MAAMpC,EAAkB,MAARuW,EAAe,IAAIzL,EAAMgjB,SAASrW,qBAAuB+oB,EAAWjqB,GAEpF,KADgB,KAAZvW,IAAgB8K,EAAM9K,SAAW,IAAIA,KACnC8K,CACR,CACF,GAEFi1B,SAAU,YAGCW,GAAwBA,CACnCvgC,EACAwgC,EACA9+B,EACAC,KAAiB,CAEjB69B,OAAQ,CACNx/B,KAAM,gBACN,iBAAM++B,CAAYpvB,EAASqvB,GACzB,GAAIrvB,EAAQ+vB,QAAQe,IAAI,mBAEtB,OADA9wB,EAAQ+vB,QAAQttB,OAAO,mBAChB4sB,EAAKrvB,GAEd,MAAM1H,EAAU,CAAEy4B,eAAgB,CAAEC,cAAe,CAAE,kBAAmB,UAClEziC,EAAO,OAAOsiC,EAAUv4B,GAAUvG,EAAWC,GACnD,IAAK82B,MAAmBv6B,GAAO,MAAM,IAAIqD,EAAwBvB,KAAS9B,GAC1E,OAAO8gC,EAAKrvB,EACd,GAEFiwB,SAAU,YAGCgB,GAA0BA,CACrCC,EACAC,KAAyB,CAEzBtB,OAAQ,CACNx/B,KAAM,mBACN,iBAAM++B,CAAYpvB,EAASqvB,GAAM,IAAA+B,EAC/B,MAAMC,EAA+C,QAAtCD,EAAGpxB,EAAQ+vB,QAAQvtB,IAAI,uBAAe,IAAA4uB,EAAAA,EAAIE,IACzDtxB,EAAQ+vB,QAAQttB,OAAO,gBACvB,MAAM8uB,EAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKrqB,QAAQ2D,GAAMA,KAAOwmB,IAEpEG,EAAY,IAAI5sB,MAAMssB,GACzBO,KAAK,GACLtiC,KAAI,CAACuiC,EAAG7X,MAAUA,EAAM,GAAKqX,IAAe,IACzCS,EAAcH,EAAUxJ,QAAO,CAACM,EAAGC,IAAMD,EAAIC,GAAG,GAChDqJ,EAAgBJ,EAAUriC,KAAKkT,GAAM2L,KAAKoE,MAAO/P,EAAIsvB,EAAeR,KAE1E,IAAIn2B,EAAQ,IAAIW,GAAAA,GAAU,6BAC1B,IAAK,IAAIk2B,EAAU,EAAGA,GAAWX,EAAYW,GAAW,EAAG,CACzD,GAAgB,IAAZA,EAAe,OACX73B,GAAM43B,EAAcC,EAAU,IACpC,MAAMC,EAAY,IAAI3kB,IAAInN,EAAQqwB,KAClCyB,EAAUC,aAAajwB,IAAI,cAAe+vB,EAAQn/B,YAClDsN,EAAQqwB,IAAMyB,EAAUp/B,UAC1B,CACA,IACE,aAAa28B,EAAKrvB,EACpB,CAAE,MAAOqC,GAAG,IAAA2vB,EACV,KAAM3vB,aAAa1G,GAAAA,IAAY,MAAM0G,EACrC,GAAIkvB,EAAmB91B,SAA2B,QAAnBu2B,EAAC3vB,EAAE2b,UAAUrW,cAAM,IAAAqqB,EAAAA,EAAI,GAAI,MAAM3vB,EAChErH,EAAQqH,CACV,CACF,CACA,MAAMrH,CACR,GAEFi1B,SAAU,YCpPC5M,GAAsC,CACjDn1B,KAAM,CACJmC,KAAM,YACN4hC,UAAW,UACXC,gBAAiB,CACfp/B,GAAI,CACF87B,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV4nB,QAAS,CACPka,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViiC,QAAS,CACP1D,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,YAGVya,KAAM,CACJ8jB,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,OACNkiC,cAAe,CAAC,QAAS,iBAG7BjY,WAAY,CACVsU,eAAgB,cAChB1gC,KAAM,CACJmC,KAAM,WAGVqvB,QAAS,CACPkP,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,cAOHmiC,GAAyC,CACpDtkC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aACXC,gBAAiB,CACftuB,OAAQ,CACNgrB,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVoiC,UAAW,CACT7D,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,cAOHqiC,GAAgD,CAC3DxkC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,oBACXC,gBAAiB,CACfzd,UAAW,CACT0d,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHsiC,GAAwC,CACnDzkC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,YACXC,gBAAiB,CACfzZ,aAAc,CACZmW,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBASZxW,GAAuC,CAClDvtB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACf9xB,GAAI,CACFwuB,eAAgB,KAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,OAGf9a,YAAa,CACXgb,YAAa,CACXE,iBAAkB,oBAClBD,kBAAmB,GAErBxD,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwiC,UAAW,CACTjE,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV8X,KAAM,CACJymB,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuiB,UAAW,CACTgc,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,WAGV6rB,WAAY,CACV0S,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,gBASPyiC,GAAiC,CAC5C5kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,KACXC,gBAAiB,CACf7V,YAAa,CACXuS,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChB1gC,KAAM,CAEJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVikB,SAAU,CACRsa,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGViO,QAAS,CACPswB,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,WAGV0iC,YAAa,CACXnE,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,WAGV8tB,gBAAiB,CACfgU,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,mBAChB1gC,KAAM,CAEJmC,KAAM,WAGV2iC,YAAa,CACXpE,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,WAGVguB,gBAAiB,CACf8T,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,mBAChB1gC,KAAM,CAEJmC,KAAM,WAGViuB,eAAgB,CACd6T,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,kBAChB1gC,KAAM,CAEJmC,KAAM,WAGVkuB,WAAY,CACV4T,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,cAChB1gC,KAAM,CACJmC,KAAM,WAGVquB,UAAW,CACTkQ,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,WAGV4iC,YAAa,CACXrE,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cAGfrT,UAAW,CACTgQ,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,WAGVwuB,OAAQ,CACN+P,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,WAGV+uB,MAAO,CACL+S,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGVivB,KAAM,CACJsP,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV6L,OAAQ,CACN0yB,eAAgB,SAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBAGfiB,cAAe,CACbtE,eAAgB,iBAChB1gC,KAAM,CACJmC,KAAM,WAGVyuB,qBAAsB,CACpBqT,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,yBAChB1gC,KAAM,CAEJmC,KAAM,WAGV0uB,qBAAsB,CACpBoT,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,yBAChB1gC,KAAM,CAEJmC,KAAM,WAGV4uB,IAAK,CACH2P,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVmuB,qBAAsB,CACpBoQ,eAAgB,yBAChB1gC,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,aAKdouB,qBAAsB,CACpBmQ,eAAgB,yBAChB1gC,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,aAKd+sB,YAAa,CACXwR,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,WAGVgtB,eAAgB,CACduR,eAAgB,kBAChB1gC,KAAM,CACJmC,KAAM,WAGV+kB,SAAU,CACR+c,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChB1gC,KAAM,CAEJmC,KAAM,WAGV8iC,UAAW,CACTvE,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBAGfzV,UAAW,CACToS,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChB1gC,KAAM,CACJmC,KAAM,WAGV6kB,SAAU,CACR0Z,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,WAGVqtB,MAAO,CACLkR,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV+iC,SAAU,CACRxE,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,QAGfoB,YAAa,CACXzE,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBAGflU,QAAS,CACP6Q,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WAGV2tB,SAAU,CACR4Q,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WAGVosB,aAAc,CACZmS,eAAgB,gBAChB1gC,KAAM,CACJmC,KAAM,WAGVA,KAAM,CACJu+B,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,WAGVssB,SAAU,CACRwV,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,WAGVmC,QAAS,CACP2/B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,WAChB1gC,KAAM,CAEJmC,KAAM,WAGVwsB,OAAQ,CACN+R,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,WAGVyrB,QAAS,CACPqW,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WAGV0kB,SAAU,CACR6Z,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBAKnBpW,UAAW,CACTsW,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,WAGVic,QAAS,CACPsiB,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WAGVkG,KAAM,CACJq4B,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,WAGVqZ,UAAW,CACTyoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,WAGV4sB,QAAS,CACPkV,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,UAChB1gC,KAAM,CAEJmC,KAAM,WAGVijC,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVigB,SAAU,CACR6hB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChB1gC,KAAM,CAEJmC,KAAM,WAGV6sB,SAAU,CACR0R,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,WAGV8sB,SAAU,CACRyR,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,WAGViqB,WAAY,CACVsU,eAAgB,cAChB1gC,KAAM,CACJmC,KAAM,WAGVqvB,QAAS,CACPyS,YAAa,CACXoB,QAAS,IAAItE,OAAO,2BAEtBL,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WAGVsvB,KAAM,CACJiP,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGVuvB,SAAU,CACRgP,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,WAGV+P,GAAI,CACFwuB,eAAgB,KAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aAGfpS,QAAS,CACP+O,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WAGVyB,QAAS,CACPqgC,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVnC,KAAM,CACJ0gC,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,OACNkiC,cAAe,CACb,UACA,kBACA,mBACA,oBACA,yBACA,uBACA,qBACA,iBACA,kBACA,wBACA,wBACA,mBACA,iBACA,gBACA,kBACA,iBACA,cACA,eACA,iBACA,eACA,mBACA,iBACA,aACA,WACA,oBAQCiB,GAAwC,CACnDtlC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,YACXC,gBAAiB,CACfhU,UAAW,CACT0Q,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,aAKd+tB,UAAW,CACTwQ,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,gBASPojC,GAA6C,CACxDvlC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBACXyB,WAAY,iBACZC,yBAA0B,CACxB/E,eAAgB,KAChBgF,WAAY,MAEd1B,gBAAiB,CACf2B,GAAI,CACFjF,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHyjC,GAA0C,CACrD5lC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cACXC,gBAAiB,CACfhkC,KAAM,CACJgtB,aAAc,QACd6Y,YAAY,EACZnF,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,WAGVlC,MAAO,CACLgkC,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH2jC,GAAkC,CAC7C9lC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,MACXC,gBAAiB,CACfhkC,KAAM,CACJ0gC,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,OACNkiC,cAAe,CAAC,QAAS,WAG7BpkC,MAAO,CACLgkC,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH4jC,GAA0C,CACrD/lC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cACXC,gBAAiB,CACfnkC,IAAK,CACH6gC,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV6jC,WAAY,CACVtF,eAAgB,cAChB1gC,KAAM,CACJmC,KAAM,WAGVyC,GAAI,CACF87B,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH8jC,GAA2C,CACtDjmC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,eACXC,gBAAiB,CACfp/B,GAAI,CACF87B,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+jC,UAAW,CACTjC,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,WAGVgkC,OAAQ,CACNlC,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVikC,cAAe,CACb1F,eAAgB,iBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkkC,WAAY,CACVpC,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHiN,GAAsC,CACjDpP,KAAM,CACJmC,KAAM,YACN4hC,UAAW,UACXC,gBAAiB,CACfp/B,GAAI,CACF87B,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0iC,YAAa,CACXnE,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2iC,YAAa,CACXpE,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVi0B,cAAe,CACb6N,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,iBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV8tB,gBAAiB,CACfgU,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,mBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVguB,gBAAiB,CACf8T,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,mBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGViuB,eAAgB,CACd6T,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,kBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV4iC,YAAa,CACXrE,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cAGfvT,UAAW,CACTkQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+uB,MAAO,CACL+S,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVk0B,UAAW,CACT4N,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkuB,WAAY,CACV4T,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVm0B,YAAa,CACX2N,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHmkC,GAA6C,CACxDtmC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBACXC,gBAAiB,CACfp/B,GAAI,CACF87B,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVic,QAAS,CACPsiB,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVqZ,UAAW,CACTyoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV9C,OAAQ,CACNqhC,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,YAGVokC,YAAa,CACX7F,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,aAKd4sB,QAAS,CACPkV,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,cAOHqkC,GAAuC,CAClDxmC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACfyC,SAAU,CACR/F,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHukC,GAAkC,CAC7C1mC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,MACXC,gBAAiB,CACfjT,IAAK,CACH2P,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHwkC,GAAuC,CAClD3mC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACf7hC,KAAM,CACJu+B,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVykC,OAAQ,CACNlG,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0kC,QAAS,CACPnG,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2kC,gBAAiB,CACf7C,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,oBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV4kC,mBAAoB,CAClBrG,eAAgB,uBAChB1gC,KAAM,CACJmC,KAAM,WAGV6kC,kBAAmB,CACjBtG,eAAgB,sBAChB1gC,KAAM,CACJmC,KAAM,WAGV8kC,KAAM,CACJvG,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,UAGfmD,cAAe,CACbxG,eAAgB,iBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVglC,gBAAiB,CACfzG,eAAgB,mBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVilC,YAAa,CACX1G,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHklC,GAAoC,CAC/CrnC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,QACXC,gBAAiB,CACfhkC,KAAM,CACJ0gC,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,WAGVmG,KAAM,CACJo4B,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,cAOHmlC,GAA0C,CACrDtnC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cACXC,gBAAiB,CACf/Y,IAAK,CACHyV,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVyS,SAAU,CACR8rB,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,oBAKnB3Y,IAAK,CACHsV,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,sBAKnB5Y,SAAU,CACR6B,cAAc,EACd0T,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,eAOHolC,GAA4C,CACvDvnC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACfzY,OAAQ,CACNmV,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,cAOHqlC,GAA8C,CACzDxnC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBACXC,gBAAiB,CACf9xB,GAAI,CACFwuB,eAAgB,KAChB1gC,KAAM,CACJmC,KAAM,WAGVgF,OAAQ,CACNu5B,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,WAGVslC,QAAS,CACP/G,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,qBAOR2D,GAA4C,CACvD1nC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACf2D,SAAU,CACRjH,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV60B,SAAU,CACR0J,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChB1gC,KAAM,CAEJmC,KAAM,WAGVijC,IAAK,CACHnB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV40B,OAAQ,CACN2J,eAAgB,SAChB1gC,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChB1gC,KAAM,CACJmC,KAAM,WAGVylC,QAAS,CACPlH,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,yBAOR8D,GAAgD,CAC3D7nC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,oBACXC,gBAAiB,CACf9xB,GAAI,CACFwuB,eAAgB,KAChB1gC,KAAM,CACJmC,KAAM,WAGVgF,OAAQ,CACNu5B,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,WAGV2lC,SAAU,CACRpH,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,eAOH4lC,GAA4C,CACvD/nC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACfvY,QAAS,CACPiV,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBAKnB5Y,SAAU,CACRuV,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,aACNlC,MAAO,CAAED,KAAM,CAAEmC,KAAM,eASxB6lC,GAA2C,CACtDhoC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,eACXC,gBAAiB,CACfhkC,KAAM,CACJ0gC,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV8R,OAAQ,CACNysB,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuT,OAAQ,CACNgrB,eAAgB,SAChB1gC,KAAM,CACJmC,KAAM,WAGV8lC,QAAS,CACPvH,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,0BAORmE,GAAiD,CAC5DloC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,qBACXC,gBAAiB,CACf/U,SAAU,CACRyR,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV6zB,YAAa,CACXiO,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVumB,OAAQ,CACNub,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViqB,WAAY,CACVsU,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVigB,SAAU,CACR6hB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV8zB,QAAS,CACPgO,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2F,IAAK,CACH44B,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,YAKnB7N,YAAa,CACXwK,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVg0B,WAAY,CACVuK,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,OACNkiC,cAAe,CAAC,KAAM,QAAS,eAO5B8D,GAAoC,CAC/CnoC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,QACXC,gBAAiB,CACf7iC,QAAS,CACPu/B,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVimC,OAAQ,CACN1H,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACPT,YAAa,CACXC,iBAAkB,GAEpBlkC,KAAM,CAEJmC,KAAM,aAKdmG,KAAM,CACJo4B,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHkmC,GAAyC,CACpDroC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aACXC,gBAAiB,CACfsE,SAAU,CACR5H,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aAGfwE,YAAa,CACX7H,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,gBASPqmC,GAAuC,CAClDxoC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACf/pB,KAAM,CACJymB,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVumB,OAAQ,CACNub,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVsmC,SAAU,CACR/H,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVumC,YAAa,CACXhI,eAAgB,gBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVquB,UAAW,CACTkQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwmC,MAAO,CACLjI,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVymC,YAAa,CACXlI,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0H,OAAQ,CACNo6B,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0mC,IAAK,CACH5E,YAAa,CACX6E,SAAU,GACVC,SAAU,IAEZrI,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACPT,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBlkC,KAAM,CACJmC,KAAM,aAKdkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV8f,KAAM,CACJye,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,aAGVyB,QAAS,CACPqgC,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVsJ,KAAM,CACJi1B,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH6mC,GAAqC,CAChDhpC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,SACXC,gBAAiB,CACf/pB,KAAM,CACJymB,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVumB,OAAQ,CACNub,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVsmC,SAAU,CACR/H,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVumC,YAAa,CACXhI,eAAgB,gBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVquB,UAAW,CACTkQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwmC,MAAO,CACLjI,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGVymC,YAAa,CACXlI,eAAgB,cAChB1gC,KAAM,CACJmC,KAAM,WAGV0H,OAAQ,CACNo6B,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,SAChB1gC,KAAM,CACJmC,KAAM,WAGV0mC,IAAK,CACH5E,YAAa,CACX6E,SAAU,GACVC,SAAU,IAEZrI,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACPT,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBlkC,KAAM,CACJmC,KAAM,aAKdkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV8f,KAAM,CACJye,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,aAGVyB,QAAS,CACPqgC,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVsJ,KAAM,CACJi1B,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,WAGV8mC,QAAS,CACPvI,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WAGV+mC,QAAS,CACPxI,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WAGV0P,UAAW,CACT6uB,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,cAOHgnC,GAA2C,CACtDnpC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,eACXC,gBAAiB,CACf/pB,KAAM,CACJymB,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHinC,GAA6C,CACxDppC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBACXC,gBAAiB,CACftb,OAAQ,CACNub,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHknC,GAA+C,CAC1DrpC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBACXC,gBAAiB,CACf/pB,KAAM,CACJymB,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVumB,OAAQ,CACNub,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV8mC,QAAS,CACPvI,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVsmC,SAAU,CACR/H,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVumC,YAAa,CACXhI,eAAgB,gBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVquB,UAAW,CACTkQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+mC,QAAS,CACPxI,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0P,UAAW,CACT6uB,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV8f,KAAM,CACJye,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,aAGVyB,QAAS,CACPqgC,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHmnC,GAA4C,CACvDtpC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACfuF,MAAO,CACLtF,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHqnC,GAAwC,CACnDxpC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,YACXC,gBAAiB,CACfp/B,GAAI,CACF87B,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0zB,MAAO,CACL6K,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0kB,SAAU,CACR6Z,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,qBASZ0F,GAA+C,CAC1DzpC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBACXC,gBAAiB,CACfp/B,GAAI,CACF87B,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+sB,YAAa,CACXwR,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVgtB,eAAgB,CACduR,eAAgB,kBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+kB,SAAU,CACR+c,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHunC,GAA4C,CACvD1pC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACf2F,cAAe,CACbjJ,eAAgB,iBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,qBASZx1B,GAA0C,CACrDvO,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cACXC,gBAAiB,CACfp/B,GAAI,CACF87B,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVikB,SAAU,CACRsa,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVynC,YAAa,CACX3F,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV6kB,SAAU,CACR0Z,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVqtB,MAAO,CACLkR,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2tB,SAAU,CACR4Q,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVgjC,YAAa,CACXzE,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,QAGfjf,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,cAOH0nC,GAAyC,CACpD7pC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aACXC,gBAAiB,CACf8F,OAAQ,CACNpJ,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH4nC,GAA4C,CACvD/pC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACf3hB,YAAa,CACX4hB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,gBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVmgB,YAAa,CACX2hB,YAAa,CACXE,iBAAkB,IAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV6nC,QAAS,CACP/F,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH8nC,GAAqC,CAChDjqC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,SACXC,gBAAiB,CACfkG,oBAAqB,CACnBxJ,eAAgB,yBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVgoC,UAAW,CACTlG,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVioC,WAAY,CACVnG,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkoC,SAAU,CACRpG,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVmoC,QAAS,CACP5J,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,YAGVooC,aAAc,CACZtG,YAAa,CACXE,iBAAkB,IAClBD,iBAAkB,GAEpBxD,eAAgB,gBAChB1gC,KAAM,CACJmC,KAAM,WAGVqoC,OAAQ,CACN9J,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVsoC,UAAW,CACT/J,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,YAGVuoC,UAAW,CACThK,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,eAKnB4G,YAAa,CACXjK,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVyoC,aAAc,CACZlK,eAAgB,gBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0oC,UAAW,CACT5G,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2oC,gBAAiB,CACfpK,eAAgB,mBAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,oBAGfgH,yBAA0B,CACxB9G,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,6BAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVmH,UAAW,CACTo3B,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV6oC,WAAY,CACVtK,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV8oC,gBAAiB,CACfvK,eAAgB,qBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+oC,eAAgB,CACdjH,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,mBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHgpC,GAAuC,CAClDnrC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACfpgC,QAAS,CACPqgC,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVipC,kBAAmB,CACjBnH,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,sBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHkpC,GAA8C,CACzDrrC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBACXC,gBAAiB,CACfsH,QAAS,CACPrH,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVopC,SAAU,CACRtH,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHqpC,GAAyC,CACpDxrC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aACXC,gBAAiB,CACfyH,SAAU,CACR/K,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0H,OAAQ,CACNo6B,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVupC,MAAO,CACLhL,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwpC,SAAU,CACR1H,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHypC,GAAwC,CACnD5rC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,YACXC,gBAAiB,CACf9xB,GAAI,CACFwuB,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH0pC,GAA6C,CACxD7rC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBACXC,gBAAiB,CACf78B,OAAQ,CACNu5B,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH2pC,GAA2C,CACtD9rC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,eACXC,gBAAiB,CACf+H,SAAU,CACRrL,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,uBAGfiI,OAAQ,CACNtL,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aAGfkI,OAAQ,CACNvL,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,cAOH+pC,GAAuC,CAClDlsC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACf/U,SAAU,CACRyR,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVumB,OAAQ,CACNub,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVigB,SAAU,CACR6hB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV8zB,QAAS,CACPgO,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+zB,YAAa,CACXwK,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVg0B,WAAY,CACVuK,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,OACNkiC,cAAe,CAAC,KAAM,WAG1B8H,YAAa,CACXzL,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,oBAORtT,GAAmD,CAC9DzwB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,uBACXC,gBAAiB,CACftT,UAAW,CACTgQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwuB,OAAQ,CACN+P,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVyuB,qBAAsB,CACpBqT,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,yBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV0uB,qBAAsB,CACpBoT,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,yBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH2uB,GAAiD,CAC5D9wB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,qBACXC,gBAAiB,CACftT,UAAW,CACTgQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwuB,OAAQ,CACN+P,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViO,QAAS,CACPswB,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV4uB,IAAK,CACH2P,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH4tB,GAA8C,CACzD/vB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBACXC,gBAAiB,CACfa,YAAa,CACXnE,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV8tB,gBAAiB,CACfgU,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,mBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV2iC,YAAa,CACXpE,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVguB,gBAAiB,CACf8T,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,mBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGViuB,eAAgB,CACd6T,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,kBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkuB,WAAY,CACV4T,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGVquB,UAAW,CACTkQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV4iC,YAAa,CACXrE,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBAOR9S,GAA+C,CAC1DjxB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBACXC,gBAAiB,CACftT,UAAW,CACTgQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwuB,OAAQ,CACN+P,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVquB,UAAW,CACTkQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+uB,MAAO,CACL+S,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHghB,GAAqD,CAChEnjB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,yBACXC,gBAAiB,CACftT,UAAW,CACTgQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwuB,OAAQ,CACN+P,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViO,QAAS,CACPswB,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+uB,MAAO,CACL+S,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV6L,OAAQ,CACN0yB,eAAgB,SAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBAGfvT,UAAW,CACTkQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV6iC,cAAe,CACbtE,eAAgB,iBAChB1gC,KAAM,CACJmC,KAAM,cAOHiqC,GAAoD,CAC/DpsC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,wBACXC,gBAAiB,CACftT,UAAW,CACTgQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwuB,OAAQ,CACN+P,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVmuB,qBAAsB,CACpBoQ,eAAgB,yBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,aAKdouB,qBAAsB,CACpBmQ,eAAgB,yBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,aAKdquB,UAAW,CACTkQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+uB,MAAO,CACL+S,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViO,QAAS,CACPswB,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,cAOHkvB,GAA8C,CACzDrxB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBACXC,gBAAiB,CACftT,UAAW,CACTgQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwuB,OAAQ,CACN+P,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVyuB,qBAAsB,CACpBqT,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,yBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV0uB,qBAAsB,CACpBoT,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,yBAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH6uB,GAA6C,CACxDhxB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBACXC,gBAAiB,CACftT,UAAW,CACTgQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwuB,OAAQ,CACN+P,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViO,QAAS,CACPswB,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV4uB,IAAK,CACH2P,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHovB,GAAoD,CAC/DvxB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,wBACXC,gBAAiB,CACftT,UAAW,CACTgQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVwuB,OAAQ,CACN+P,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViO,QAAS,CACPswB,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,cAOHgvB,GAAgD,CAC3DnxB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,oBACXC,gBAAiB,CACftT,UAAW,CACTgQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVivB,KAAM,CACJsP,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVquB,UAAW,CACTkQ,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+uB,MAAO,CACL+S,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHkqC,GAAoD,CAC/DrsC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,wBACXC,gBAAiB,CACfvqB,OAAQ,CACNinB,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHmqC,GAA2C,CACtDtsC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,eACXC,gBAAiB,CACfzV,aAAc,CACZmS,eAAgB,gBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH0a,GAA6C,CACxD7c,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBACXC,gBAAiB,CACf/U,SAAU,CACRyR,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGViqB,WAAY,CACVsU,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVijC,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVigB,SAAU,CACR6hB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV6sB,SAAU,CACR0R,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHkhB,GAA+C,CAC1DrjB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBACXC,gBAAiB,CACf5lB,QAAS,CACPsiB,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGVkG,KAAM,CACJq4B,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVqZ,UAAW,CACTyoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV4sB,QAAS,CACPkV,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVijC,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVigB,SAAU,CACR6hB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV6sB,SAAU,CACR0R,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHoqC,GAAyC,CACpDvsC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aACXC,gBAAiB,CACf9xB,GAAI,CACFwuB,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHqqC,GAAyC,CACpDxsC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aACXC,gBAAiB,CACf5lB,QAAS,CACPsiB,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGVkG,KAAM,CACJq4B,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVqZ,UAAW,CACTyoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVijC,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVigB,SAAU,CACR6hB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV6sB,SAAU,CACR0R,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVqvB,QAAS,CACPyS,YAAa,CACXoB,QAAS,IAAItE,OAAO,2BAEtBL,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHsqC,GAAuC,CAClDzsC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACfvS,KAAM,CACJiP,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVijC,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVigB,SAAU,CACR6hB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVuvB,SAAU,CACRgP,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+P,GAAI,CACFwuB,eAAgB,KAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBAORvV,GAA0C,CACrDxuB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cACXC,gBAAiB,CACf7hC,KAAM,CACJu+B,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVssB,SAAU,CACRwV,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVmC,QAAS,CACP2/B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,WAChB1gC,KAAM,CAEJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVmsB,UAAW,CACToS,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,cAOHuqC,GAAuC,CAClD1sC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACfrV,OAAQ,CACN+R,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHksB,GAA6C,CACxDruB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBACXC,gBAAiB,CACfzV,aAAc,CACZmS,eAAgB,gBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVmsB,UAAW,CACToS,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,cAOH0sB,GAA2C,CACtD7uB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,eACXC,gBAAiB,CACfrV,OAAQ,CACN+R,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVmsB,UAAW,CACToS,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,cAOHysB,GAA6C,CACxD5uB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBACXC,gBAAiB,CACfrV,OAAQ,CACN+R,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVgsB,YAAa,CACXuS,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVmsB,UAAW,CACToS,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,cAOHusB,GAA2C,CACtD1uB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,eACXC,gBAAiB,CACfrV,OAAQ,CACN+R,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVyrB,QAAS,CACPqW,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0kB,SAAU,CACR6Z,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBAKnBpW,UAAW,CACTsW,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVmsB,UAAW,CACToS,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,cAOHwqC,GAA0C,CACrD3sC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cACXC,gBAAiB,CACfzkB,KAAM,CACJmhB,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVid,KAAM,CACJ6kB,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVyqC,UAAW,CACT3I,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0qC,SAAU,CACR5I,YAAa,CACXE,iBAAkB,WAClBD,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2qC,YAAa,CACXpM,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV4qC,QAAS,CACPrM,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV6qC,cAAe,CACb/I,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,iBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVmH,UAAW,CACTo3B,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,WAGVwoC,YAAa,CACXjK,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,WAGVyoC,aAAc,CACZlK,eAAgB,gBAChB1gC,KAAM,CACJmC,KAAM,WAGV8qC,WAAY,CACVvM,eAAgB,cAChB1gC,KAAM,CACJmC,KAAM,WAGV+qC,OAAQ,CACNxM,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,cAOH2hB,GAA6C,CACxD9jB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBACXC,gBAAiB,CACflf,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV8iC,UAAW,CACTvE,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBAGf/c,SAAU,CACR0Z,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,cAOH4hB,GAA4C,CACvD/jB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACfhd,SAAU,CACR0Z,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVqtB,MAAO,CACLkR,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+kB,SAAU,CACR+c,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+iC,SAAU,CACRxE,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,QAGfoB,YAAa,CACXzE,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBAGfjf,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVikB,SAAU,CACRsa,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,cAOH0hB,GAA+C,CAC1D7jB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBACXC,gBAAiB,CACf9U,YAAa,CACXwR,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVgtB,eAAgB,CACduR,eAAgB,kBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+kB,SAAU,CACR+c,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV8iC,UAAW,CACTvE,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,QAGfzV,UAAW,CACToS,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChB1gC,KAAM,CACJmC,KAAM,cAOHgrC,GAA8C,CACzDntC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBACXC,gBAAiB,CACfnU,QAAS,CACP6Q,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2tB,SAAU,CACR4Q,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVgjC,YAAa,CACXzE,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBAGfjf,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGV6kB,SAAU,CACR0Z,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,cAOHohB,GAA0C,CACrDvjB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cACXC,gBAAiB,CACfrS,QAAS,CACP+O,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGV+P,GAAI,CACFwuB,eAAgB,KAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBAORqJ,GAAwC,CACnDptC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,YACXC,gBAAiB,CACfhuB,UAAW,CACT0qB,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,uBAGfsJ,UAAW,CACT3M,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,uBAGfuJ,QAAS,CACPrJ,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHorC,GAAiD,CAC5DvtC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,qBACXC,gBAAiB,CACfsH,QAAS,CACPrH,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,WAGVopC,SAAU,CACRtH,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,cAOHqrC,GAAiD,CAC5DxtC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,qBACXC,gBAAiB,CACfyJ,SAAU,CACRxJ,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WAGVurC,WAAY,CACVzJ,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,aAChB1gC,KAAM,CACJmC,KAAM,cAOHwrC,GAAoC,CAC/C3tC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,QACXC,gBAAiB,CACf4J,MAAO,CACLlN,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,aAKdmrC,QAAS,CACP5M,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,gBASP0rC,GAAqC,CAChD7tC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,SACXC,gBAAiB,CACfzY,OAAQ,CACNmV,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH+rB,GAAsC,CACjDluB,KAAM,CACJmC,KAAM,YACN4hC,UAAW,UACXC,gBAAiB,CACf7V,YAAa,CACXuS,eAAgB,eAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV2iB,IAAK,CACHmf,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV+mB,IAAK,CACH+a,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,WAGVikB,SAAU,CACRsa,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkc,MAAO,CACL4lB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,WAGViO,QAAS,CACPswB,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH2rC,GAA0C,CACrD9tC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cACXC,gBAAiB,CACfpvB,SAAU,CACRqvB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,WAGVk1B,UAAW,CACT4M,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChB1gC,KAAM,CACJmC,KAAM,WAGV4rC,gBAAiB,CACf9J,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,mBAChB1gC,KAAM,CACJmC,KAAM,WAGV6rC,OAAQ,CACN/J,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChB1gC,KAAM,CACJmC,KAAM,WAGVo1B,QAAS,CACP0M,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,WAGVwnC,cAAe,CACb1F,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,iBAChB1gC,KAAM,CACJmC,KAAM,WAGV8rC,eAAgB,CACdhK,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,kBAChB1gC,KAAM,CACJmC,KAAM,WAGV+rC,MAAO,CACLjK,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,cAOHgsC,GAAmD,CAC9DzN,eAAgB,uBAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,uBACXyB,WAAY,iBACZC,yBAA0BF,GAAevlC,KAAKylC,yBAC9CzB,gBAAiB,IACZuB,GAAevlC,KAAKgkC,gBACvBjN,OAAQ,CACN2J,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV60B,SAAU,CACR0J,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGVijC,IAAK,CACHnB,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVigB,SAAU,CACR6hB,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV6sB,SAAU,CACR0R,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHisC,GAA8C,CACzD1N,eAAgB,kBAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBACXyB,WAAY,iBACZC,yBAA0BF,GAAevlC,KAAKylC,yBAC9CzB,gBAAiB,IACZuB,GAAevlC,KAAKgkC,gBACvBn3B,KAAM,CACJ6zB,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,cAOHksC,GAAkD,CAC7D3N,eAAgB,sBAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,sBACXyB,WAAY,iBACZC,yBAA0BF,GAAevlC,KAAKylC,yBAC9CzB,gBAAiB,IACZuB,GAAevlC,KAAKgkC,gBACvBnO,MAAO,CACL6K,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVqZ,UAAW,CACTyoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuZ,WAAY,CACVuoB,YAAa,CACXE,iBAAkB,MAClBD,iBAAkB,GAEpBxD,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVkG,KAAM,CACJq4B,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aAGfhV,QAAS,CACPkV,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,WAGV6sB,SAAU,CACR0R,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHmsC,GAA+C,CAC1D5N,eAAgB,mBAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBACXyB,WAAY,iBACZC,yBAA0BF,GAAevlC,KAAKylC,yBAC9CzB,gBAAiB,IACZuB,GAAevlC,KAAKgkC,gBACvBn3B,KAAM,CACJ6zB,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVu0B,GAAI,CACFgK,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,cAOHosC,GAAiD,CAC5D7N,eAAgB,qBAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,qBACXyB,WAAY,iBACZC,yBAA0BF,GAAevlC,KAAKylC,yBAC9CzB,gBAAiB,IACZuB,GAAevlC,KAAKgkC,gBACvBtN,GAAI,CACFgK,eAAgB,KAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVuD,OAAQ,CACNu+B,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CAEJmC,KAAM,cAOHqsC,GAAuD,CAClExuC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,2BACXC,gBAAiB,IACZuI,GAAWvsC,KAAKgkC,gBACnB5X,WAAY,CACVsU,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOT,IAAIssC,GAAiB,CAC1BlJ,eAAgBA,GAChB,sCAAuC4I,GACvC,iCAAkCC,GAClC,qCAAsCC,GACtC,kCAAmCC,GACnC,oCAAqCC,IC/yKhC,MAAMG,GAA6B,CACxCC,cAAe,SACfpO,OAAQ,CACNvT,aAAc,mBACd6Y,YAAY,EACZnF,eAAgB,SAChB1gC,KAAM,CACJmC,KAAM,YAKCysC,GAA+B,CAC1CD,cAAe,QACfpO,OAAQ,CACNG,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0sC,cAAc,GAGH/E,GAAgC,CAC3C6E,cAAe,SACfpO,OAAQ,CACNG,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,YAKC8X,GAA8B,CACzC00B,cAAe,OACfpO,OAAQ,CACNG,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,YAKCumB,GAAgC,CAC3CimB,cAAe,SACfpO,OAAQ,CACN0D,YAAa,CACXE,iBAAkB,oBAClBD,iBAAkB,GAEpBxD,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,YAKCgkB,GAAoC,CAC/CwoB,cAAe,CAAC,UAAW,YAC3BpO,OAAQ,CACNvT,aAAc,MACd0T,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,OACNkiC,cAAe,CAAC,MAAO,iBAKhBliC,GAA8B,CACzCwsC,cAAe,OACfpO,OAAQ,CACNG,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,YAKC2sC,GAAkC,CAC7CH,cAAe,CAAC,UAAW,eAC3BpO,OAAQ,CACNvT,aAAc,mBACd6Y,YAAY,EACZnF,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,YAKCoW,GAA2B,CACtCo2B,cAAe,OACfpO,OAAQwO,IAGGrc,GAA+B,CAC1Cic,cAAe,QACfpO,OAAQ,CACN0D,YAAa,CACXC,iBAAkB,GAEpBxD,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,YAKC6sC,GAAkC,CAC7CL,cAAe,WACfpO,OAAQ,CACNG,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,YAKC8sC,GAAqC,CAChDN,cAAe,CAAC,UAAW,QAC3BpO,OAAQ,CACNG,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,YAKC+sC,GAAiC,CAC5CP,cAAe,CAAC,UAAW,SAC3BpO,OAAQ,CACNvT,aAAc,GACdiX,YAAa,CACXE,iBAAkB,IAClBD,iBAAkB,GAEpBxD,eAAgB,QAChB1gC,KAAM,CACJmC,KAAM,YAKCgtC,GAAqC,CAChDR,cAAe,CAAC,UAAW,QAC3BpO,OAAQ,CACNvT,aAAc,MACd0T,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,OACNkiC,cAAe,CAAC,OAAQ,SAAU,UAK3BxU,GAAiC,CAC5C8e,cAAe,UACfpO,OAAQ,CACNG,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,YAKCitC,GAA4B,CACvCT,cAAe,OACfpO,OAAQ8O,IClGH,MAAMC,WAAaC,GAAAA,GAQxBxtC,WAAAA,CAAY6sC,EAAexkC,GAA8B,IAAA4d,EAAAwnB,EACvD,QAAc1kC,IAAV8jC,EACF,MAAM,IAAI9sC,MAAM,0BAIbsI,IACHA,EAAU,CAAC,GAEb,MAAMqlC,EAA+B,CACnCC,mBAAoB,mCAGhBC,EAAiB,6BACjBC,EACJxlC,EAAQylC,kBAAoBzlC,EAAQylC,iBAAiBD,gBACjD,GAAGxlC,EAAQylC,iBAAiBD,mBAAmBD,IAC/C,GAAGA,IAEHG,EAAsB,IACvBL,KACArlC,EACHylC,iBAAkB,CAChBD,mBAEFG,SAA6C,QAArC/nB,EAAkB,QAAlBwnB,EAAEplC,EAAQ2lC,gBAAQ,IAAAP,EAAAA,EAAIplC,EAAQ4lC,eAAO,IAAAhoB,EAAAA,EAAI,WAEnD/lB,MAAM6tC,GAEN5tC,KAAK0sC,MAAQA,CACf,CAOAjlB,kBAAAA,CACEmgB,EACA1/B,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQ1/B,WACV8lC,GAEJ,CASAxmB,yBAAAA,CACEogB,EACA7vB,EACA7P,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQ7vB,OAAM7P,WAChB+lC,GAEJ,CAQA1mB,2BAAAA,CACEqgB,EACAphB,EACAte,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQphB,SAAQte,WAClBgmC,GAEJ,CAQA/pB,mBAAAA,CACEyjB,EACA1/B,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQ1/B,WACVimC,GAEJ,CAOAC,qCAAAA,CACExG,EACA1/B,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQ1/B,WACVmmC,GAEJ,CAOAC,qBAAAA,CACEruC,EACAiI,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE9tC,OAAMiI,WACRqmC,GAEJ,CAOAC,kBAAAA,CACE5G,EACA1/B,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQ1/B,WACVumC,GAEJ,CAOArkB,WAAAA,CACEwd,EACA1/B,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQ1/B,WACVwmC,GAEJ,CAOAvkB,eAAAA,CACEyd,EACA1/B,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQ1/B,WACVymC,GAEJ,CAOAC,cAAAA,CACEhH,EACA1/B,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQ1/B,WACV2mC,GAEJ,CAMAC,WAAAA,CACE5mC,GAEA,OAAOlI,KAAK+tC,qBAAqB,CAAE7lC,WAAW6mC,GAChD,CAUA/lB,kBAAAA,CACE3S,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACR8mC,GAEJ,CAMAlnB,oBAAAA,CACE5f,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE7lC,WACF+mC,GAEJ,CAOA/mB,mBAAAA,CACEnQ,EACA7P,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEh2B,OAAM7P,WACRgnC,GAEJ,CAOAjnB,qBAAAA,CACEzB,EACAte,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEvnB,SAAQte,WACVinC,GAEJ,CAMAC,YAAAA,CACElnC,GAEA,OAAOlI,KAAK+tC,qBAAqB,CAAE7lC,WAAWmnC,GAChD,CAMAC,kBAAAA,CACEpnC,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE7lC,WACFqnC,GAEJ,CAMAC,sBAAAA,CACEtnC,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE7lC,WACFunC,GAEJ,CAMAhpB,wBAAAA,CACEve,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE7lC,WACFwnC,GAEJ,CAOAlnB,iBAAAA,CACEzQ,EACA7P,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEh2B,OAAM7P,WACRynC,GAEJ,CAOApnB,mBAAAA,CACE/B,EACAte,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEvnB,SAAQte,WACV0nC,GAEJ,CAMAC,kBAAAA,CACE3nC,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE7lC,WACF4nC,GAEJ,CAOApnB,yBAAAA,CACE3Q,EACA7P,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEh2B,OAAM7P,WACR6nC,GAEJ,CAOA3nB,+BAAAA,CACErQ,EACA7P,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEh2B,OAAM7P,WACR8nC,GAEJ,CAOAC,oCAAAA,CACEl4B,EACA7P,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEh2B,OAAM7P,WACRgoC,GAEJ,CAQAC,sCAAAA,CACEp4B,EACAyY,EACAtoB,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEh2B,OAAMyY,QAAOtoB,WACfkoC,GAEJ,CAOA9lB,kBAAAA,CACErqB,EACAiI,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE9tC,OAAMiI,WACRmoC,GAEJ,CAOAC,sBAAAA,CACExD,EACA5kC,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEjB,WAAU5kC,WACZqoC,GAEJ,CAOAxrB,iBAAAA,CACE6iB,EACA1/B,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQ1/B,WACVsoC,GAEJ,CAOAC,wBAAAA,CACE7I,EACA1/B,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQ1/B,WACVwoC,GAEJ,CAQAC,gCAAAA,CACE/I,EACAja,EACAzlB,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEnG,SAAQja,UAASzlB,WACnB0oC,GAEJ,CAMAC,aAAAA,CACE3oC,GAEA,OAAOlI,KAAK+tC,qBAAqB,CAAE7lC,WAAW4oC,GAChD,CAMAzwB,kBAAAA,CACEnY,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE7lC,WACF6oC,GAEJ,CAMAC,SAAAA,CAAU9oC,GACR,OAAOlI,KAAK+tC,qBAAqB,CAAE7lC,WAAW+oC,GAChD,CAMAC,YAAAA,CACEhpC,GAEA,OAAOlI,KAAK+tC,qBAAqB,CAAE7lC,WAAWipC,GAChD,CAMAC,aAAAA,CACElpC,GAEA,OAAOlI,KAAK+tC,qBAAqB,CAAE7lC,WAAWmpC,GAChD,CAOAC,eAAAA,CACEj7B,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACRqpC,GAEJ,CAOAzqB,oBAAAA,CACE/O,EACA7P,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEh2B,OAAM7P,WACRspC,GAEJ,CAMAC,wBAAAA,CACE15B,EACA7P,GAEA,OAAOlI,KAAK+tC,qBACV,CAAEh2B,OAAM7P,WACRwpC,GAEJ,EAGF,MAAMvT,GAAaD,GAAiByT,GAAqB,GAEnD3D,GAA4D,CAChE3b,KAAM,wBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEI8P,GAAmE,CACvE5b,KAAM,oCACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,GAAmBA,IACrDC,iBAAkB,CAACD,IACnB9T,eAEI+P,GAAqE,CACzE7b,KAAM,wCACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,GAAmBA,IACrDC,iBAAkB,CAACD,IACnB9T,eAEIgQ,GAA6D,CACjE9b,KAAM,mCACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbI,gBAAiB,CAACF,IAClBD,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIkQ,GACJ,CACEhc,KAAM,6CACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEEoQ,GAA+D,CACnElc,KAAM,sBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIsQ,GAA4D,CAChEpc,KAAM,wBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIuQ,GAAqD,CACzDrc,KAAM,yBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIwQ,GAAyD,CAC7Dtc,KAAM,8BACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEI0Q,GAAwD,CAC5Dxc,KAAM,6BACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEI4Q,GAAqD,CACzD1c,KAAM,eACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,KAGhBK,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEI6Q,GAA4D,CAChE3c,KAAM,cACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAmBA,IACtCI,UAAW,OACXlU,eAEI8Q,GAA8D,CAClE5c,KAAM,0BACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEI+Q,GAA6D,CACjE7c,KAAM,8BACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIgR,GAA+D,CACnE9c,KAAM,kCACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIkR,GAAsD,CAC1Dhd,KAAM,kBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEIoR,GAA4D,CAChEld,KAAM,yBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEIsR,GAAgE,CACpEpd,KAAM,8BACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEIuR,GAAkE,CACtErd,KAAM,gCACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEIwR,GAA2D,CAC/Dtd,KAAM,6BACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIyR,GAA6D,CACjEvd,KAAM,iCACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEI2R,GAA4D,CAChEzd,KAAM,yBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEI4R,GAAmE,CACvE1d,KAAM,sCACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEI6R,GAAyE,CAC7E3d,KAAM,4CACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEI+R,GACJ,CACE7d,KAAM,kDACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEEiS,GACJ,CACE/d,KAAM,0DACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,GAAiBA,IACnDC,iBAAkB,CAACD,IACnB9T,eAEEkS,GAA4D,CAChEhe,KAAM,mBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIoS,GAAgE,CACpEle,KAAM,6BACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIqS,GAA2D,CAC/Dne,KAAM,uBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIuS,GAAkE,CACtEre,KAAM,+BACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbI,gBAAiB,CACfF,GACAA,GACAA,IAEFD,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIyS,GACJ,CACEve,KAAM,0CACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,GAAmBA,IACrDC,iBAAkB,CAACD,IACnB9T,eAEE2S,GAAuD,CAC3Dze,KAAM,mBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,KAGhBK,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEI4S,GAA4D,CAChE1e,KAAM,wBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACVh0C,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CAAE1kC,KAAM,CAAEmC,KAAM,YAAa4hC,UAAW,qBAIvD,IAAK,CACHiQ,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEI8S,GAAmD,CACvD5e,KAAM,aACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,KAGhBK,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEIgT,GAAsD,CAC1D9e,KAAM,wBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACVh0C,KAAM,CAAEmC,KAAM,WAAYuiC,QAAS,CAAE1kC,KAAM,CAAEmC,KAAM,eAIzD+xC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEIkT,GAAuD,CAC3Dhf,KAAM,kBACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,eAEIoT,GAAyD,CAC7Dlf,KAAM,mBACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAmBA,IACtCI,UAAW,OACXlU,eAEIqT,GAA8D,CAClEnf,KAAM,0BACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,eAEIuT,GAAkE,CACtErf,KAAM,+BACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,GAEX,IAAK,CACHD,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,GAAkBA,IAClCC,iBAAkB,CAACD,IACnB9T,e,0YC93CmE,IAAAmU,GAAA,IAAA/qC,QAStD,MAAM6lC,WAAamF,GAQhC1yC,WAAAA,CACEogC,GACA,cACEuS,GAAgB,EAAK,WACrB1R,EAAa,EAAC,kBACdC,EAAoB,OACjB74B,GAKD,CAAC,GAEL,MAAMuqC,EAAa5oC,gBACV7J,KAAK0yC,iBAAiBC,IAAOlK,YAEtC1oC,MAAMkgC,EAAK,CACT2S,yBAAyB,EACzBC,mBAAoB,IACdL,EAAgB,GAAK,CAAChS,GAAsB,OAAQiS,EAAY,QAAS,UAC7ElT,KACAO,KACAe,GAAwBC,EAAYC,GACpCV,IAAyBhqB,GACvB,CAAC,IAAKA,EAAK7C,OAA0B,MAAlB6C,EAAKgsB,UAAoB,GAAK,KAAKhsB,EAAKgsB,cAAcljC,KAAK,UAG/E+I,IASPC,GAAA,KAAAmqC,QAAoB,GAPlBtyC,KAAK8yC,SAASC,UAAUhU,GAAmB,CAAEiU,MAAO,gBACpDhzC,KAAK8yC,SAASG,aAAa,CAAEhzC,KAAMizC,GAAAA,KACnClzC,KAAK8yC,SAASG,aAAa,CAAEhzC,KAAMkzC,GAAAA,KAEnCnzC,KAAK8yC,SAASG,aAAa,CAAEhzC,KAAM,sBACrC,CAIA,sBAAMyyC,CAAiBxqC,GACrB,OAAiC,MAA7BM,GAAK8pC,GAALtyC,MAA0CwI,GAAK8pC,GAALtyC,MACvCA,KAAKgxC,UAAU9oC,EACxB,CAEA,eAAe8oC,IACV7yC,GAEH,MAAMgW,EAAUpU,MAAMixC,aAAa7yC,GAOnC,OANAgW,EAAQW,MACN,KACE1M,GAAKkqC,GAALtyC,KAA4BmU,EAAH,IAE3B,SAEKA,CACT,CAMA,kBAAMgS,GACJ,aAAcnmB,KAAK0yC,oBAAoBtrC,SACzC,CAEA,iBAAMiT,GACJ,MAAM,YACJouB,EACArhC,UAAW4P,EAAa,UACxBwxB,EAAS,eACTQ,SACQhpC,KAAKgxC,YAET/2B,EAA2BuuB,EAC9B1xB,QAAO,EAAGoyB,uBAAwBF,GAAkBE,IACpDtR,QAAO,CAACa,EAAK/N,IAAOA,EAAEwe,kBAAoBzQ,EAAIyQ,kBAAoBxe,EAAI+N,GAAM,CAC3EyQ,mBAAoB,EACpBxnC,QAAS,IACRA,QACL,GAA0D,MAAtDsX,GAAyBiB,GAAmC,CAC9D,MAAMvY,EAAUuY,EAAyB3X,WACnC8wC,EAAWhpC,OAAOuV,OAAO3G,IAC5BlC,QAAQ9L,GAAqB,kBAAPA,IACtBjM,KAAKiM,IAAQA,IACVrJ,EAAYic,KAAKC,OAAOu1B,GAAU9wC,WAClCV,GAAagc,KAAKiJ,OAAOusB,GAAY,GAAG9wC,WAC9C,MAAM,IAAId,EAAwB,qBAAsBE,EAASC,EAAWC,EAC9E,CAEA,MAAO,CACLq+B,IAAKjgC,KAAK0sC,MACV11B,gBACAtV,QAAS+mC,EACTxuB,2BAEJ,ECnHa,SAASo5B,GACtBhwC,GAEA,MAAM+F,EAASiZ,GAAShf,GACxB,OAAQ+F,EAAOvE,KACb,KAAKsU,GAAIkS,SACP,OAAOgoB,GAA4B/wB,GAAQlZ,EAAOoZ,YACpD,KAAKrJ,GAAIyB,SACP,OAAOxR,EAAOmmB,KAChB,SAGF,MAAMpT,EAAQuT,GAAUtmB,EAAOvE,IAAKuE,EAAO1H,SAAS8E,MAAK,EAAEvG,KAAmB,UAATA,MAAoB,GACzF,GAAa,MAATkc,EACF,MAAM,IAAI1b,EAAiB,mCAAmC0Y,GAAI/P,EAAOvE,QAC3E,KAAM,cAAesX,GAAQ,MAAM,IAAIra,EACvC,MAAM7C,EAAUmK,EAAO+S,EAAM6H,WAC7B,OAAO/kB,EAAQkkB,QAAQ,OAAQ,MACjC,C,gBClBO,SAASmwB,GAASltC,GAAuB,IAAAmtC,EAC9C,OAAOx7B,GAAuB,QAAnBw7B,EAACC,GAAaptC,UAAK,IAAAmtC,EAAAA,EAAI,GACpC,CA4CO,SAASE,GAAWjjC,GACzB,MAAMkjC,EAAY,CAChBC,OAAQ,CACN,CACE1zC,KAAM,OACNnC,KAAM,CAAE81C,OAAQ,CAAC,YAEnB,CACE3zC,KAAM,UACNnC,KAAM,CAAE81C,OAAQ,CAAC,SAEnB,CACE3zC,KAAM,YACNnC,KAAM,CAAE81C,OAAQ,CAAC,YAEnB,CACE3zC,KAAM,kBACNnC,KAAM,CAAE81C,OAAQ,CAAC,uBAIjBC,GAAa,IAAIC,GAAAA,cAAeC,YAAYL,EAAW,CAAC,GACxDM,GAAY,IAAIC,GAAAA,0BAA2BC,eAAe1jC,EAAQqjC,GACxE,OAAO97B,GAAKtJ,GAAOulC,GACrB,CAEO,SAASG,GACd/tC,EACAmK,EACAC,GAEA,OAAOuH,GACLlN,GAAc,CACZwN,GACA,IAAI3N,WAAW,CAAC,IAChB+oC,GAAWjjC,GACX8iC,GAAS/iC,GACTwH,GAAKtJ,GAAOrI,MAGlB,CCrFO,SAASguC,GACd/wC,EACA+D,EACA6I,GAEA,MAAMokC,EAAW,CAACjtC,GACd6I,GAASokC,EAASztC,KAAK,YAC3B,MAAM0tC,EAAc7lC,GAAOpL,GAC3B,OAAOwH,GAAc,CAACL,GAAAA,OAAOG,KAAK0pC,EAASl1C,KAAK,MAAO4Y,GAAKu8B,IAC9D,CCkBO,SAASC,GACdlxC,GACA,QACE4M,EAAO,QACP8jB,EAAO,SACP/O,EAAQ,YACRwvB,GAME,CAAC,GAEL,MAAMprC,EAASiZ,GAAShf,GACxB,GAAI+F,EAAOvE,MAAQsU,GAAIkS,SACrB,MAAM,IAAItqB,EACR,iFAIJ,IAAImP,EAAM,GA0CV,MAzCI,QAAS9G,GAAsB,eAAZ6G,IACrBC,GAAOoQ,OAAOlX,EAAOwZ,MAEnBxZ,EAAOvE,MAAQsU,GAAImT,cACrBpc,GAAOoQ,OAAOlX,EAAOhH,UAEnBgH,EAAOvE,MAAQsU,GAAI0I,gBACrB3R,GAAOoQ,OAAOlX,EAAO4b,WAEnB5b,EAAOvE,MAAQsU,GAAI2I,mBACrB5R,GAAOoQ,OAAe,OAAR0E,QAAQ,IAARA,EAAAA,EAAY,IAExB5b,EAAOvE,MAAQsU,GAAIgW,mBACD,IAAhBqlB,IAAsBtkC,GAAOoQ,OAAOlX,EAAOslB,wBAC3B,IAAhB8lB,IAAuBtkC,GAAOoQ,OAAOlX,EAAOulB,wBAG/CvlB,EAAOvE,MAAQsU,GAAI6S,SAClB5iB,EAAOvE,MAAQsU,GAAIgI,kBACnB/X,EAAOvE,MAAQsU,GAAIwB,gBACnBvR,EAAOvE,MAAQsU,GAAI4V,kBACT,cAAZ9e,IAEAC,GAAOoQ,OAAOlX,EAAO5F,SAEnB4F,EAAOvE,MAAQsU,GAAIgI,mBAAkBjR,GAAOoQ,OAAOlX,EAAOyjB,UAE3DzjB,EAAOvE,MAAQsU,GAAIgI,kBAClB/X,EAAOvE,MAAQsU,GAAIwB,gBACnBvR,EAAOvE,MAAQsU,GAAIiI,YACnBhY,EAAOvE,MAAQsU,GAAIyB,UACT,eAAZ3K,IAEAC,GAAOoQ,OAAOlX,EAAO8W,UAAYI,OAAc,OAAPyT,QAAO,IAAPA,EAAAA,EAAW3qB,EAAOsa,WAExDta,EAAOvE,MAAQsU,GAAIyB,UAAYxR,EAAOvE,MAAQsU,GAAIkI,cACpDnR,GAAOqkC,GACLjyB,GAAQlZ,EAAO4G,GAAGwS,WAClBpZ,EAAOvE,MAAQsU,GAAIkI,YAAc,CAAEpR,QAAS,aAAgB,CAAC,IAG1DC,CACT,CAQO,SAASukC,GACdpxC,EACA+D,EACAc,GAEA,MAAMkB,EAASiZ,GAAShf,EAAa8V,GAAIkS,UACzC,GAAIjiB,EAAOoZ,UAAU3d,MAAQsU,GAAIyB,SAC/B,OAAO25B,GAAiBjyB,GAAQlZ,EAAOoZ,WAAYta,GAGrD,MAAM8H,EAAKsS,GAAQlZ,EAAOoZ,WACpBvjB,EAAUo0C,GAA4BrjC,IACrC0kC,EAAWC,GAAgB,EAAC,GAAM,GAAO51C,KAAK61C,GACnD38B,GAAOm8B,GAAgBpkC,EAAI5I,EAAWwtC,GAAIxrC,EAAO0iB,WAAW,GAAI7sB,KAElE,IAAKy1C,IAAcC,EAAc,MAAM,IAAIl0C,EAAiB,0BAC5D,OAAO8zC,GAAiBjyB,GAAQlZ,EAAOoZ,WAAY,IAC7CkyB,GAAa,CAAEzkC,QAAS,iBACzB/H,GAEP,CASO2B,eAAegrC,GACpBxxC,EACA0T,GACA,QAAE+9B,KAAY5sC,GAA4E,CAAC,GAE3F,IAAIkB,EAASiZ,GAAShf,GACtB,MAAM0xC,EAAa3rC,EAAOvE,MAAQsU,GAAIkS,SAChCpmB,EAAS8vC,IAA0B,IAAZD,GAAoBze,GAAYhzB,GAI7D,GAHI+F,EAAOvE,MAAQsU,GAAIkS,WAAUjiB,EAASA,EAAOoZ,WAI5B,MAAnBta,EAAQ6rB,UACG,IAAX9uB,GACA,CAACkU,GAAIgI,iBAAkBhI,GAAIwB,eAAgBxB,GAAIiI,WAAYjI,GAAIyB,UAAUvP,SAASjC,EAAOvE,KACzF,CACA,MAAM,SAAEglC,EAAQ,OAAEC,SAAiB/yB,EAAK06B,yBAAyBxsC,GAC3D+vC,EAAuB,OAARnL,QAAQ,IAARA,EAAAA,EAAYC,EACjC,GAAoB,MAAhBkL,EACF,MAAM,IAAInzC,EAAc,wDAAwDoD,KAElFiD,EAAQ6rB,QAAUihB,EAAajhB,OACjC,CAMA,GAJwB,MAApB7rB,EAAQ8c,UAAoB7L,GAAI2I,mBAAqB1Y,EAAOvE,MAC9DqD,EAAQ8c,gBAAkBjO,EAAKgO,kBAAkB3b,EAAO0b,WAAWE,SAAS1iB,YAGnD,MAAvB4F,EAAQssC,aAAuBr7B,GAAIgW,kBAAoB/lB,EAAOvE,MAAmB,IAAZiwC,EAAkB,CACzF,MAAM,YAAEnS,SAAsB5rB,EAAKy3B,mBAAmBplC,EAAOolB,WAC7DtmB,EAAQssC,YAAcprC,EAAOqlB,SAAWkU,CAC1C,CAEA,OAAOoS,EACHN,GAA2BpxC,QAAmB0T,EAAKoP,eAAgBje,GACnEqsC,GAAiBlxC,EAAa6E,EACpC,CC5IA,MAAM+sC,GAA0B,GAEhCprC,eAAeqrC,GACbllC,EACA+G,EACAo+B,GAEA,MAAMl2C,EAAUo0C,GAA4B/wB,GAAQtS,KAC7ChR,GAAS,OAAEwnB,IAAU,yBAAEvM,EAAwB,cAAEjD,UAAyBlN,QAAQssB,IAAI,CAC3Frf,EACG0Q,mBAAmBxoB,GACnBmlB,OAAOxZ,IACN,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAElI,GAAIzD,EAAS4oB,QAAS,GAAI1L,MAAO,EAAG,IAG9CrH,MAAM2jB,IAAG,IAAWA,EAAK/1B,GAAI+1B,EAAI/1B,OACpCqU,EAAK0P,2BACL1P,EAAKsD,gBAGP,aACQvQ,QAAQssB,IACZ6e,GAAWl2C,KAAI8K,SACbsL,EAAEnF,EAAI,CACJ+G,OACA/X,UACAwnB,SACAvM,2BACAjD,gBACAm+B,sBAINC,MACJ,CAYevrC,eAAewrC,GAC5BhyC,EACAiyC,GAEA,MAAMxC,EAAWwC,EAAcxC,SAASyC,QACxCzC,EAASG,aAAa,CAAEhzC,KAAM,kBAC9B,MAAM8W,EAAO,IAAIq2B,GAAKkI,EAAc5I,MAAO,CACzC8F,eAAe,EACfM,WACAD,mBAAoB,CAAC3S,QAEvB,OAAOgV,GAA0B7yB,GAAShf,GAAc0T,EAAM,GAChE,CAEAk+B,GAAWruC,MACT,CAACoJ,GAAMhR,UAASgY,gBAAem+B,oBAC7B,GAAInlC,EAAGnL,MAAQsU,GAAIkS,SAAU,MAAO,GACpC,MAAM,UAAE7I,EAAS,WAAEsJ,GAAe9b,EAClC,GAAiC,OAAnB,OAATwS,QAAS,IAATA,EAAAA,EAAasJ,GAAqB,MAAO,GAC9C,GAA0B,IAAtBA,EAAW9d,OAAc,MAAO,GACpC,MAAM9L,EAASsI,GAAAA,OAAOG,KACpB,CAACqM,KAAmBm+B,EAAc9pC,SAAS8N,GAAIkI,aAAe,CAAC,YAAc,IAAKliB,KAAK,MAEnFq2C,EAAW/mC,GAAO6T,GAAQE,IAC1BizB,EAAkB5qC,GAAc,CAAC3I,EAAQszC,IACzCE,EAAsB7qC,GAAc,CAAC3I,EAAQ6V,GAAKy9B,KACxD,OACEv9B,GAAOw9B,EAAiB3pB,EAAW,GAAI9sB,EAAQ0D,KAC/CuV,GAAOy9B,EAAqB5pB,EAAW,GAAI9sB,EAAQ0D,IAE5C,GACF,CACL,CACE5C,QACE,8IAEFnC,IAAK,mBACLg4C,YAAa,CAAC,YAAa,eAE9B,IAEH9rC,MAAOmG,GAAM+G,OAAMo+B,oBACjB,IAAIS,EAGJ,MAFI,cAAe5lC,IAAI4lC,EAAW5lC,EAAGwS,WACjC,OAAQxS,IAAI4lC,EAAW5lC,EAAGA,IACd,MAAZ4lC,EAAyB,GACtBV,GAA0BU,EAAU7+B,EAAM,IAAIo+B,EAAenlC,EAAGnL,KAAK,IAE9E,CAACmL,GAAMwW,YACC,QAASxW,EACA,IAAXA,EAAGgX,KAAahX,EAAGgX,IAAMR,EAAe,GACrC,CACL,CACE1mB,QAAS,OAAOkQ,EAAGgX,6CAA6CR,IAChE7oB,IAAK,aACLg4C,YAAa,CAAC,SANS,KAU7B9rC,MAAOmG,GAAMhR,UAASm2C,gBAAep+B,WACnC,GAA6B,IAAzBo+B,EAAcnnC,OAAc,MAAO,GACvC,MAAM6nC,QAAahB,GAA0BvyB,GAAQtS,GAAK+G,GAAMqN,OAAM,IAAM,KAC5E,OAAIyxB,GAAQ72C,EAAQ6oB,QAAgB,GAC7B,CACL,CACE/nB,QAAS,mBAAmBd,EAAQ6oB,+DAA+DguB,IACnGl4C,IAAK,sBACLg4C,YAAa,CAAC,SAAU,MAAO,UAAW,WAAY,aAEzD,IAEH9rC,MAAOmG,GAAM+G,WACX,GAAI/G,EAAGnL,MAAQsU,GAAI6S,SAAWrU,GAAe3H,EAAGic,YAAavgB,GAASkC,MAAO,MAAO,GACpF,MAAMkoC,QAAkB/+B,EAAK0Q,mBAAmBzX,EAAGic,aAAa7H,OAAOxZ,IACrE,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,OAAO,IAAI,IAEb,OAAiB,MAAbkrC,IAA2C,IAAtBA,EAAU5T,QAAyB,GACrD,CACL,CACEpiC,QAAS,mCACTnC,IAAK,6BACLg4C,YAAa,CAAC,gBAEjB,IAEH,CAAC3lC,GAAMhR,cACL,IAAIc,EAOJ,OANIkQ,EAAGnL,MAAQsU,GAAIkS,UAA6B,gBAAjBrsB,EAAQ0b,MAAmD,IAAzB1K,EAAG8b,WAAW9d,SAC7ElO,EAAU,0EAERkQ,EAAGnL,MAAQsU,GAAIyB,UAA6B,UAAjB5b,EAAQ0b,OACrC5a,EAAU,oDAEG,MAAXA,EAAwB,GACrB,CAAC,CAAEA,UAASnC,IAAK,qBAAsBg4C,YAAa,CAAC,QAAS,IAIvE,CAAC3lC,GAAMiK,+BAA+B,IAAA6L,EAAAiwB,EACpC,MAAMC,EAAa78B,GAAIwI,mBAAqB3R,EAAGnL,IACzCoxC,EAAiB98B,GAAIgI,mBAAqBnR,EAAGnL,KAAOsU,GAAIiI,aAAepR,EAAGnL,IAC1EqxC,EAAe/8B,GAAIwB,iBAAmB3K,EAAGnL,KAAOsU,GAAIyB,WAAa5K,EAAGnL,IACpE/G,EAEsC,QAFlCgoB,EAC0B,QAD1BiwB,EACPC,EAAa,cAAgB,YAAI,IAAAD,EAAAA,EACjCE,EAAiB,kBAAoB,YAAI,IAAAnwB,EAAAA,EACzCowB,EAAe,gBAAkB,KACpC,GAAY,MAARp4C,EAAc,MAAO,GACzB,MAAMgc,EAAWV,GAAgBa,GAA0Bnc,GAK3D,IAAI8uB,EAGJ,GAFI,eAAgB5c,IAAI4c,EAAY,CAAEpT,WAAYxJ,EAAGwJ,aACjD,cAAexJ,IAAI4c,EAAY5c,EAAG4c,WACrB,MAAbA,EAAmB,MAAM,IAAI9qB,EACjC,OACGgY,EAASN,WAAWnO,SAASuhB,EAAUpT,aACvCy8B,IAAmBn8B,EAASR,UAAUjO,SAASuhB,EAAUtT,WAEnD,CACL,CACExZ,QAAS,kBAAkB8R,KAAKC,UAAU+a,8BAAsChb,KAAKC,UAAUiI,KAC/Fnc,IAAK,0BACLg4C,YAAa,CAAC,YAAa,gBAI1B,EAAE,IAEX9rC,MAAOmG,GAAM+G,WACX,GAAIoC,GAAIwB,iBAAmB3K,EAAGnL,IAAK,MAAO,GAE1C,GAAImL,EAAGka,WAAW3K,WAAW,OAAQ,MAAO,GAC5C,IACE,MAAM,OAAEpiB,SAAiB4Z,EAAKqT,YAAYpa,EAAGka,YAC7C,OAAI/sB,EAAe,GACZ,CACL,CACE2C,QAAS,YAAYkQ,EAAGka,2BACxBvsB,IAAK,oBACLg4C,YAAa,CAAC,eAGpB,CAAE,MAAO/qC,GACP,KAAMA,aAAiBW,GAAAA,KAA4C,MAA9BX,EAAMgjB,UAAUsR,WAAoB,MAAMt0B,EAC/E,MAAO,CACL,CACE9K,QAAS8R,KAAKukC,MAAMvrC,EAAMgjB,SAASsR,YAAY1rB,OAC/C7V,IAAK,mBACLg4C,YAAa,CAAC,eAGpB,KC9NG,MAAMS,WAAuB31C,EAKlCZ,WAAAA,CAAYC,EAAiBu2C,EAA+BhzC,GAC1DtD,MAAMD,GACNE,KAAKC,KAAO,iBACZD,KAAKq2C,WAAaA,EAClBr2C,KAAKqD,YAAcA,CACrB,EAUKwG,eAAeysC,GACpBC,GACA,OACEn8B,EAAM,UACNtK,EAAS,OACTmI,GAAS,EAAI,UACbu+B,GAAY,EAAI,QAChB//B,EAAO,QACPxG,KACG/H,IAGL,MAAM8H,QAAWF,EAAUC,gBAAgBwmC,EAAY,IAClDruC,EACHkS,SACAnK,UACA7I,gBAAiBgT,EAAO+L,iBAG1B,IAAgB,IAAZlW,EAAkB,MAAO,CAAE8H,KAAMse,GAAYrmB,GAAKsmB,MAAOtmB,GAE7D,GAAIiI,EAAQ,CACV,MAAMo+B,QAAmBhB,GAAkBrlC,EAAIoK,GAC/C,GAAIi8B,EAAWroC,OAAS,EAAG,CACzB,MAAMlO,EAAU,oCAAoCu2C,EACjDt3C,KAAKoW,GAA2BA,EAAErV,UAClCX,KAAK,QACR,MAAM,IAAIi3C,GAAet2C,EAASu2C,EAAYrmC,EAChD,CACF,CAEA,IACE,IAAIymC,EACJ,IACEA,EAAuB,MAAb3mC,EAAoB,MAAMA,EAAU7Q,UAAY,IAC5D,CAAE,MAAO2L,GACP6rC,EAAU,IACZ,CACA,MAAM,OAAExxC,SAAiBmV,EAAOk3B,gBAC9B,CAAEthC,MACF,CACE2wB,eAAgB,CACdC,cAAe,CAEb,eAAgB,SACD,MAAX6V,EAAkB,CAAEA,WAAY,CAAC,MAM7C,GAAID,EAAW,CACb,MAAME,QAAmBhwB,GAAKzhB,EAAQ,CAAEmV,YAAWlS,IAC7CyuC,EAAS,IACVD,EACH3+B,KAAM2+B,EAAW3+B,KACjBue,MAAOtmB,GAGT,GAAe,MAAXyG,IAAoBA,EAAU,EAAG,CACnC,MAAMgE,EAAuB,mBAAZhE,OAAwB7N,EAAY6N,EACrD,MAAO,IACFkgC,EACHC,yBAA0BxvB,GAAiBniB,EAAQ,CAAEmV,SAAQ3D,QAASgE,KAAMvS,IAEhF,CACA,OAAOyuC,CACT,CACA,MAAO,CAAE5+B,KAAM9S,EAAQqxB,MAAOtmB,EAChC,CAAE,MAAOpF,GAEP,MADAa,GAAYb,GACNR,OAAOsf,OAAO9e,EAAO,CACzB0rB,MAAOtmB,EACP6mC,SAAUhtC,SAAYwrC,GAAkBrlC,EAAIoK,IAEhD,CACF,C,4aC7DsE,IAAA08B,GAAA,IAAA9lC,QAAA+lC,GAAA,IAAAxvC,QA4FtE,MAAMwrB,GAKJ,cAAMikB,GACJ,GAA8B,MAA1Bh3C,KAAK5B,SAASmmC,SAAkB,OAAOvkC,KAAK5B,SAASmmC,SACzD,GAAgC,MAA5BvkC,KAAK5B,SAAS64C,WAChB,MAAM,IAAIl2C,EAAqB,kCACjC,GAAgC,MAA5Bf,KAAK5B,SAAS84C,WAAoB,CACpC,MAAM,SAAE3S,SAAmBvkC,KAAK5B,SAAS64C,WAAWE,oBAClDn3C,KAAK5B,SAAS84C,WACdl3C,KAAK5B,SAASg5C,YAEhBp3C,KAAK5B,SAASmmC,SAAWA,CAC3B,CACA,GAAoC,MAAhCvkC,KAAK5B,SAASi5C,eAAwB,CACxC,MAAM,SAAE9S,SAAmBvkC,KAAK5B,SAAS64C,WAAWrZ,QAAQ59B,KAAK5B,SAASi5C,gBAC1Er3C,KAAK5B,SAASmmC,SAAWA,CAC3B,CACA,GAA8B,MAA1BvkC,KAAK5B,SAASmmC,SAChB,MAAM,IAAIxjC,EAAqB,uDAEjC,OAAOf,KAAK5B,SAASmmC,QACvB,CAkDA,4BAAM+S,CACJv/B,EACAw/B,EACArvC,GAEA,MAAM,SAAE2hC,SAAmB7pC,KAAK5B,SAASgc,OAAOq3B,yBAAyB15B,GACzE,GAAgB,MAAZ8xB,EACF,MAAM,IAAIvpC,EAAc,6CAA6CyX,KAEvE,MAAMy/B,EAAgB3N,EACtB,MAAO,IACFx4B,GAAAylC,GAAA92C,KAAKy3C,IAAc9uC,KAAnB3I,KAAoBw3C,EAAeD,OAAQ3uC,EAAWV,GACzD6J,OAAQylC,EAEZ,CAEA,kBAAME,CACJz3C,EACAmJ,EACAlB,EAAmE,CAAC,GAEpE,MAAM,OAAE6J,SAAiB/R,KAAK23C,MAAM13C,EAAMmJ,EAAQ,IAAKlB,EAAS81B,YAAY,IAC5E,GAAc,MAAVjsB,EAAgB,MAAM,IAAIjQ,EAC9B,MAAM,QAAEiyB,GAAYhiB,EAEpB,OAAO6L,KAAKoE,MAAgB,KAAV+R,EACpB,CAQA,aAAM6jB,CACJxuC,EACAlB,GASA,IAAA2vC,EACA,MAAM,WAAE7Z,KAAe8Z,GAAQ,IAAK93C,KAAK5B,YAAa8J,GAEtD,GAD8B,MAA1BlI,KAAK5B,SAASmmC,gBAAwBvkC,KAAKg3C,YAC5B,IAAfhZ,EAAqB,OAAOh+B,KAAK23C,MAAM,OAAQvuC,EAAQ,IAAK0uC,EAAK9Z,eACrE,GAA6B,MAAzBh+B,KAAK5B,SAASa,QAAiB,MAAM,IAAI4D,EAE7C,GAAqB,MAAjBi1C,EAAIhoC,UAAmB,MAAM,IAAI/O,EAAqB,gCAC1D,MAAMmb,EAAU47B,EAAIhoC,UAAU7Q,QAC9B,GAA8B,MAA1Be,KAAK5B,SAASmmC,SAChB,MAAM,IAAIxjC,EAAqB,iCACjC,MAAMiP,QAAWmmB,GAAa,CAC5BvL,kBAAkB,KACfktB,EACHjzC,IAAKsU,GAAIgI,iBACTuC,SAAsB,QAAdm0B,EAAEC,EAAIp0B,gBAAQ,IAAAm0B,EAAAA,QAAW73C,KAAK03C,aAAa,OAAQtuC,EAAQ0uC,GACnEhrB,SAAU9sB,KAAK+3C,UAAUvpC,OAAOxO,KAAKg4C,MAAO,OAAQ5uC,GACpDjD,KAAMnG,KAAK5B,SAASmmC,SACpBroB,aAEI,KAAEnE,KAAS2E,SAAgBrL,GAAAylC,GAAA92C,KAAKi4C,IAAetvC,KAApB3I,KAAqBgQ,EAAI,OAAQ,IAC7D8nC,EACHhoC,UAAWgoC,EAAIhoC,YAGjB,OADA9P,KAAK5B,SAASa,QAAUs3B,GAA4B7Z,EAAM4Z,OACnD,IACF5Z,KACsB,MAArBA,EAAM3K,QAAQnM,KAAe,CAC/BsyC,cAAel4C,KAAKm4C,cAAcz7B,EAAM3K,OAAOnM,IAAKkyC,IAEtDnkB,MAAOzX,EACP7Y,YAAa0U,EACb9Y,QAASe,KAAK5B,SAASa,QAE3B,CA+BA,WAAM04C,CACJl0C,EACA2F,EACAlB,EAG8E,CAAC,GACI,IAAAkwC,EACnF,MAAM,WAAEpa,EAAU,IAAEjV,KAAQ+uB,GAAQ,IAAK93C,KAAK5B,YAAa8J,GACrDmwC,EAAQhnC,GAAAylC,GAAA92C,KAAKs4C,IAAe3vC,KAApB3I,KAAqByD,IAC7B,QAAExE,EAAO,KAAEgB,GAASD,KAAK5B,SAEzB8rB,EAAqB,MAARjqB,EAAeqd,GAAcrd,GAAQhB,GAClD,OAAEmb,GAAW09B,EAEnB,GAAU,MAANr0C,EAAY,MAAM,IAAIN,EAC1B,GAAW,SAAPM,IAAgC,IAAfu6B,EACnB,MAAM,IAAIh7B,EAA6B,wCACzC,GAAW,SAAPS,GAA+B,MAAdq0C,EAAIt0C,QAAkBkR,OAAOojC,EAAIt0C,QAAU,IAAM60C,EAAMnW,QAC1E,MAAM,IAAI3+B,GAAwBu0C,EAAIt0C,OAAQC,GAGhD,IAAIspB,EACJ,IACE,GAAqB,MAAjB+qB,EAAIhoC,UAAmB,MAAM,IAAIjO,EAAc,wBACnDkrB,EAAW+qB,EAAIhoC,UAAU7Q,OAC3B,CAAE,MAAO2L,GACP,MAAM2tC,GACW,IAAfva,IACEpzB,aAAiB4tC,GAEf,yGADF5tC,EAAM9K,SAEN8K,aAAiBzF,IAChByF,aAAiB/I,GAAmC,yBAAlB+I,EAAM9K,SAC7C,IAAKy4C,EAAoB,MAAM3tC,EAC/BmiB,EAAWxU,GAAgBC,GAC7B,CACA,MAAMsU,EAAW9sB,KAAK+3C,UAAUvpC,OAAOxO,KAAKg4C,MAAOv0C,EAAI2F,GAEvD,IAAmB,IAAf40B,EAAqB,CACvB,GAAiB,MAAb8Z,EAAI37B,MAAe,CACrB,MAAMs8B,EAAmB,MAAP1vB,GAAe,CAAE,CAAgB,kBAARA,EAAmB,SAAW,QAASA,GAC5E/pB,QAAgBsoB,GAAWyF,EAAU,IAAK0rB,EAAWr+B,WAAUgK,OAAOxZ,IAC1E,IAAKU,GAAuBV,GAAQ,MAAMA,EAC1C,MAAO,CAAE8P,KAAM,QAASyB,MAAO,EAAG,IAEpC27B,EAAI37B,MAAyB,gBAAjBnd,EAAQ0b,KAAyB,EAAI1b,EAAQmd,MAAQ,CACnE,CAEA,MAAMu8B,EAAQ,IAAKZ,EAAK19B,SAAQ0S,YAChC,IAAI9c,EACJ,GAAW,SAAPvM,EAAe,CACjB,GAA8B,MAA1BzD,KAAK5B,SAASmmC,SAChB,MAAM,IAAIxjC,EAAqB,0CACjCiP,QAAWmmB,GAAa,IACnBuiB,EACH7zC,IAAKsU,GAAIgI,iBACThb,KAAMnG,KAAK5B,SAASmmC,SACpBroB,QAAS6Q,GAEb,KAAO,CACL,GAAkB,MAAd7C,EACF,MAAM,IAAIjnB,EAA4B,0CACxC+M,QAAWmmB,GAAa,IACnBuiB,EACH7zC,IAAKsU,GAAIwB,eACToS,WACA7C,cAEJ,CAEA,MAAM,QAAE6b,KAAY4S,SAAsBhvB,GAAS3Z,EAAI+c,EAAU,IAAK+qB,EAAK/uB,QAC3E,GAAe,MAAXgd,EACF,MAAM,IAAIlkC,EAAc,4CAA4CmO,KAEtE,MAAMwnC,EAAgBzR,EACtB,MAAO,IACF4S,KACAtnC,GAAAylC,GAAA92C,KAAKy3C,IAAc9uC,KAAnB3I,KAAoBw3C,EAAe/zC,EAAIuM,EAAI8nC,GAC9C9nC,GAAIqS,GAASrS,GACb+B,OAAQylC,EACRlhB,MAAOtmB,EACP+H,KAAMse,GAAYrmB,GAClB2mC,YAAQ/tC,EAEZ,CAEA,GAAW,MAAPmgB,EACF,MAAM,IAAIhoB,EAAqB,uDACjC,GAAkB,MAAdmpB,EACF,MAAM,IAAIjnB,EAA4B,uCACxC,MAAM+M,QAAWmmB,GAAa,CAC5BvL,kBAAkB,KACfktB,EACHjzC,IAAKsU,GAAIwB,eACT+I,SAAsB,QAAd00B,EAAEN,EAAIp0B,gBAAQ,IAAA00B,EAAAA,QAAWp4C,KAAK03C,aAAaj0C,EAAI2F,EAAQ0uC,GAC/D/qB,WACA7C,aACA4C,aAEF,GAAqB,MAAjBgrB,EAAIhoC,UACN,MAAM,IAAI/O,EAAqB,gDACjC,OAAOsQ,GAAAylC,GAAA92C,KAAKi4C,IAAetvC,KAApB3I,KAAqBgQ,EAAIvM,EAAI,IAAKq0C,EAAKhoC,UAAWgoC,EAAIhoC,WAC/D,CAgDAqoC,aAAAA,CACES,GACA,YAAEC,KAAgBf,GAAmE,CAAC,GAEtF,OAAOc,EACJ75C,KAAK+5C,IACJ,IAAIC,EACJ,IACEA,EAAe1nC,GAAAylC,GAAA92C,KAAKg5C,IAAuBrwC,KAA5B3I,KAA6B84C,EAAM75C,QAAS65C,EAAM5S,OAAO,GAAI4R,EAC9E,CAAE,MAAOltC,GACP,GAAgB,OAAXiuC,QAAW,IAAXA,GAAAA,GAAyBjuC,aAAiBlH,GAA6B,OAAO,KACnF,MAAMkH,CACR,CACA,MAAMquC,EAAUj5C,KAAK+3C,UAAUmB,YAAYH,EAAcD,EAAM1yC,KAAM0yC,EAAM5S,SACpEjmC,EAAM9B,GAAQiM,OAAOE,QAAQ2uC,GAAS,GAC7C,MAAO,CACLh5C,OACA9B,OACA22B,SAAU,CACR70B,KAAM84C,EACN95C,QAAS65C,EAAM75C,SAElB,IAEF6X,QAAQ7E,GAAmD,MAALA,GAC3D,CAEA,uBAAa4mB,EAA0C,WACrDoe,EAAU,OACV78B,EAAM,SACNmqB,EAAQ,IACRh0B,EAAG,QACHtR,EAAO,eACPo4C,EAAc,WACdH,EAAU,WACVE,EAAU,iBACV+B,KACGC,IAMH,GAAW,MAAP7oC,GAA6B,MAAd0mC,EAAoB,CACrC,IAAI/mC,EAGa,IAAAmpC,EAAjB,GAFsB,MAAlBhC,IAAwBnnC,QAAY+mC,EAAWrZ,QAAQyZ,IACzC,MAAdH,IAAoBhnC,QAAY+mC,EAAWE,oBAAoBD,EAAYE,IACpE,MAAPlnC,EACFK,EAAML,EAAIK,IACF,QAAR8oC,EAAA9U,SAAQ,IAAA8U,IAAR9U,EAAar0B,EAAIq0B,SAErB,CACA,GAAW,MAAPh0B,EAAa,MAAM,IAAIrN,EAE3B,IAAIjD,EASJ,GARe,MAAXhB,IACFA,QAAiBsrB,GAAYtrB,EAAS,kBAAmB,CACvDurB,eAAe,EACfpQ,WAEEqD,GAAYxe,KAAUgB,EAAOhB,IAGpB,MAAXA,GAAiC,MAAdi4C,GAAwC,MAAlBG,GAAsC,MAAZ9S,EACrE,MAAM,IAAIthC,EAA4B,gDAGxC,GAAe,MAAXhE,EAAiB,CACnB,MAAM61B,QAAiB1K,GAAYnrB,EAAS,CAAEmb,WAC9C,GAAuB,MAAnB0a,EAAS33B,OAAgB,MAAM,IAAI2F,EAAsB7D,EAC/D,CAEA,IAAyB,IAArBk6C,EAA2B,CAC7B,GAAe,MAAXl6C,EACF,MAAM,IAAIgE,EAA4B,oDACxC,MAAMq2C,SAAwBrvB,GAAoBhrB,EAAS,CAAEmb,YAAWmqB,SACxE,IAAIgV,GAAU,EACd,GAAgB,MAAZhV,EAAkBgV,EAAUhV,IAAa+U,OACxC,GAAkB,MAAdpC,EAAoB,CAC3B,GAAkB,MAAdD,EACF,MAAM,IAAIl2C,EAAqB,4CACjCw4C,QAAgBtC,EAAWuC,qBAAqBF,EAAgBpC,EAAYE,EAC9E,MAAO,GAAsB,MAAlBC,EAAwB,CACjC,GAAkB,MAAdJ,EACF,MAAM,IAAIl2C,EAAqB,4CACjCw4C,QAAgBtC,EAAWwC,SAASH,EAAgBjC,EACtD,CACA,IAAKkC,EACH,MAAM,IAAI52C,EAC0B,OAAvB,OAAVu0C,QAAU,IAAVA,EAAAA,EAAcG,GAA0B,cAAgB,WAG/D,CAEA,OAAO,IAAIqC,GAAuB,CAChCzC,aACA78B,SACA88B,aACAG,iBACA9S,WACAh0B,MACAtR,UACAgB,OACAm3C,gBACGgC,GAEP,CAeAv5C,WAAAA,EAAY,IACV0Q,KACG6oC,IAcsCjoC,GAAA,KAAA2lC,IA3B3C3uC,GAAA,KAAS4uC,QAAY,GA4BnB/2C,KAAK25C,KAAOppC,EACZ,MAAMqpC,EAAUrpC,EAAIA,EAAIvC,OAAS,GACjC,GAAwB,MAApB4rC,EAAQ9kB,SACV,MAAM,IAAI/zB,EACR,uDAAuDqJ,OAAOwJ,KAAKgmC,mBAGvExxC,GAAK2uC,GAAL/2C,KAAoB45C,EAAQ9kB,UAC5B90B,KAAKg4C,MAAQxvC,GAAKuuC,GAAL/2C,MAAkBC,KAC/BD,KAAK+3C,UAAY,IAAI8B,GAAAA,QAAStpC,GAC9BvQ,KAAK5B,SAAWg7C,EAgBhBhvC,OAAOsf,OACL1pB,KACAoK,OAAOC,YACL7B,GAAKuuC,GAAL/2C,MAAkB85C,UAAU/6C,KAAI,EAAGkB,OAAM85C,UAAWC,EAASpU,eAC3D,MAAM5H,EAAsB,SAAT/9B,IAAoB2lC,EACvC,MAAO,CACL3lC,EACA4J,SAAU1L,KACR,MAAM+J,EAAU/J,EAAK6P,SAAWgsC,EAAQhsC,OAAS,EAAI7P,EAAK87C,MAAQ,CAAC,EACnE,GAAuB,kBAAZ/xC,EACT,MAAM,IAAIswC,EAAU,gCAAgCtwC,KACtD,MAAa,SAATjI,EAAwBD,KAAK43C,QAAQz5C,EAAM,CAAE6/B,gBAAe91B,IACzDlI,KAAK23C,MAAM13C,EAAM9B,EAAM,CAAE6/B,gBAAe91B,GAAU,EAE5D,KAIT,EApgBY,SAAAuvC,IA2BV,WAAExjB,EAAU,YAAED,EAAW,IAAEpuB,GAC3B2xC,EACAl0C,EACA6E,GAEA,IAAIpI,EACJ,OAAQm0B,GACN,IAAK,KAAM,CACT,MAAMokB,EAAQhnC,GAAAylC,GAAA92C,KAAKs4C,IAAe3vC,KAApB3I,KAAqBu3C,GACnC,MAAO,CACL2C,cAAel6C,KAAK+3C,UAAUtpC,OAAOzO,KAAKg4C,MAAOK,EAAMp4C,KAAM+zB,GAC7DkkB,cAAel4C,KAAKm4C,cAAcvyC,EAAKsC,GAE3C,CACA,IAAK,SACHpI,EAAUE,KAAK+3C,UAAUoC,iBAAiBnmB,GAC1C,MACF,IAAK,QAEH,GADAl0B,EAAU2O,GAAOulB,GAAa1xB,WAC1B,kCAAkCqa,KAAK7c,GACzC,MAAM,IAAIQ,EACR,8DAA8DR,KAGlE,MACF,QACE,MAAM,IAAI+B,EAAc,wBAAwBoyB,KAEpD,MAAM,IAAI7wB,EAAoBtD,EAASuD,EACzC,CAAC,eAAA40C,GAGCjoC,EACAunC,EACArvC,GAEA,MAAMyuC,QAAeL,GAAgBtmC,EAAI,IAAKhQ,KAAK5B,YAAa8J,IAChE,MAAO,CACL6P,KAAM4+B,EAAO5+B,KACb/H,GAAIqS,GAAoDs0B,EAAOrgB,OAC/DqgB,SACArgB,MAAOqgB,EAAOrgB,SACY,MAAtBqgB,EAAO5vB,mBACF/mB,KAAKs3C,uBAAuBX,EAAO5+B,KAAMw/B,EAAQrvC,GAE9D,CAAC,SAAAowC,GAuFer4C,GACd,MAAMwD,EAAK+E,GAAKuuC,GAAL/2C,MAAkB85C,UAAUtzC,MAAMouC,GAAwBA,EAAE30C,OAASA,IAChF,GAAU,MAANwD,EACF,OAAOA,EAET,GAAa,SAATxD,EACF,MAAO,CACL85C,UAAW,GACX95C,KAAM,OACNiiC,SAAS,EACTkY,QAAS,OACTxU,UAAU,GAGd,MAAM,IAAItiC,GAA4BrD,EACxC,CAAC,SAAA+4C,GA2HCqB,EACAvN,GACA,sBAAEwN,IAEF,MAAMC,EAAgB,IAAKv6C,KAAK5B,SAASk8C,yBAA0BA,GACnE,GAAgC,MAA5BC,EAAcF,GAAoB,OAAOE,EAAcF,GAG3D,MAAMvoB,EAAUA,CAACoG,EAAQC,IAAoBvmB,KAAKC,UAAUqmB,KAAOtmB,KAAKC,UAAUsmB,GAE5EhD,EAAYn1B,KAAK25C,KACpB56C,KAAI,EAAG+1B,cAAeA,IACtBhe,QAAQge,GAAaA,GAAUgkB,QAC5Bh1C,EAAgBqxB,EACnBp2B,KAAK+1B,GAAa,CAACA,EAAS70B,KAAM60B,EAASgkB,MAAM0B,WACjDz7C,KAAI,EAAEkB,EAAM24C,KACXA,EAAO75C,KAAK+5C,GAAc,CAAC74C,EAAMmK,OAAOwJ,KAAKklC,GAAO,GAAI1uC,OAAOuV,OAAOm5B,GAAO,QAE9E1D,OACAt+B,QAAO,EAAE,CAAE2jC,KAAen6B,OAAO,KAAKo6B,GAASD,GAAWn4C,SAAS,YAAcwqC,IACjFh2B,QAAO,EAAE,CAAC,CAAGhZ,GAAO2rB,EAAKkxB,KAASA,EAAIz7C,MAAM,EAAGuqB,GAAKmxB,MAAM5vC,GAAO8mB,EAAQ9mB,EAAG,GAAIlN,OACnF,OAAQgG,EAAckK,QACpB,KAAK,EACH,MAAM,IAAItK,GAA4BopC,EAASxqC,WAAY+3C,GAC7D,KAAK,EACH,OAAOv2C,EAAc,GAAG,GAC1B,QACE,MAAM,IAAID,GAA8Bw2C,EAAWv2C,GAEzD,CAyMF,MAAM41C,GAAgD3mB,GAEtD,UZllBA,MAAM2K,GAAqB,2PAWzBmd,OAEF,QACExlC,WAAY,CAAEC,MAAK,GAAEsnB,YAAWA,IAChCx2B,KAAMA,KAAA,CACJs3B,sBACAC,cAAe,KACf7I,SAAU,KACVgJ,cAAe,OAEjBloB,UAAUC,EAAAA,GAAAA,IAAS,CAAC,UACpB3E,QAAS,CACP,YAAMyoB,GAEJ35B,KAAK80B,UAAWgmB,EAAAA,GAAAA,UACR/nB,GAAS8F,WAAW,IACrB74B,KAAK4W,MAAMmkC,aACd7D,WAAYl3C,KAAK09B,qBAGvB,EACA,aAAME,GACJ,OAAO59B,KAAK80B,SAASkiB,UACvB,EACA,YAAMnZ,CAAOmd,GAEX,OADAh7C,KAAK89B,cAAgB99B,KAAK80B,SAAS8iB,QAAQ,CAACoD,IACrCh7C,KAAK89B,aACd,EACA,iBAAMC,CAAYid,GAChB,OAAOh7C,KAAK80B,SAASmmB,UAAUD,EACjC,EACA,gBAAMhd,CAAWgd,GACf,OAAOh7C,KAAK80B,SAASomB,iBAAiBF,EACxC,IalHJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,U,yGCPAr+C,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,OACEE,EAAAA,EAAAA,IAAmBq+C,IAEnBr+C,EAAAA,EAAAA,IAOEi/B,EAAA,CANAC,MAAM,yBACN,YAAU,cACV,kBAAgB,SAChB,eAAa,OACZ,iBAAgB59B,EAAAg9C,YACjB,eAAa,4B,4BAGft+C,EAAAA,EAAAA,IAOEi/B,EAAA,CANAC,MAAM,sBACN,YAAU,2BACV,kBAAgB,SAChB,eAAa,sBACZ,iBAAgB59B,EAAAi9C,SACjB,eAAa,U,0CChBV3+C,MAAM,S,IAFbiB,IAAA,G,qEAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,qBACEC,EAAAA,EAAAA,IAAmC,UAA/B,8BAA0B,KAC9BA,EAAAA,EAAAA,IAmCM,MAnCNG,GAmCM,EAlCJH,EAAAA,EAAAA,IAKM,yBAJJA,EAAAA,EAAAA,IAA4B,WAAvB,qBAAiB,KACtBA,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAAgD,SANxD,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAMwBJ,EAAAq+B,QAAOj+B,GAAE0W,YAAY,U,iBAArB9W,EAAAq+B,gBAGpB5+B,EAAAA,EAAAA,IAGM,yBAFJA,EAAAA,EAAAA,IAAuB,WAAlB,gBAAY,KACjBA,EAAAA,EAAAA,IAA0C,sBAArCA,EAAAA,EAAAA,IAA+B,SAX1C,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAW2BJ,EAAAs+B,YAAWl+B,I,iBAAXJ,EAAAs+B,oBAEvB7+B,EAAAA,EAAAA,IAGM,yBAFJA,EAAAA,EAAAA,IAAkB,WAAb,WAAO,KACZA,EAAAA,EAAAA,IAA2C,sBAAtCA,EAAAA,EAAAA,IAAgC,SAf3C,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAe2BJ,EAAAu+B,aAAYn+B,I,iBAAZJ,EAAAu+B,qBAEvB9+B,EAAAA,EAAAA,IAMM,yBALJA,EAAAA,EAAAA,IAA+B,WAA1B,wBAAoB,KACzBA,EAAAA,EAAAA,IAGM,sBAFJA,EAAAA,EAAAA,IAAkD,SAA3CiB,KAAK,WApBpB,sBAAAP,EAAA,KAAAA,EAAA,GAAAC,GAoBwCJ,EAAAk+C,eAAc99C,I,iBAAdJ,EAAAk+C,kBAAc,aApBtDt9C,EAAAA,EAAAA,IAoB0D,mEAItDnB,EAAAA,EAAAA,IAQS,UAPNS,QAAKC,EAAA,KAAAA,EAAA,QAA6BH,EAAAm+C,gBAAkBn9C,EAAAo9C,UAAQ,IAK9D,cAGUp+C,EAAAm+C,kBAAe,WAA1B5+C,EAAAA,EAAAA,IAGM,MApCV8B,GAAA,gBAkCM5B,EAAAA,EAAAA,IAA4B,WAAvB,qBAAiB,KACtBC,EAAAA,EAAAA,IAAkCuX,EAAA,CAA1BtW,MAAOX,EAAAm+C,iBAAe,sBAnCpC39C,EAAAA,EAAAA,IAAA,a,CA6CA,QACEyX,WAAY,CAAEC,MAAKA,IACnBlP,KAAMA,KAAA,CACJq1B,QAAS,GACTC,YAAa,GACbC,aAAc,GACd2f,gBAAgB,EAChBC,gBAAiB,OAEnB3lC,UAAUC,EAAAA,GAAAA,IAAS,CAAC,UACpB3E,QAAS,CACP,cAAMsqC,GACJ,IAAIC,QAAgBz7C,KAAK4W,MAAM0L,QAAQ,CACrCzd,IAAKsU,GAAI6S,QACT9H,SAAUlkB,KAAK4W,MAAM3X,QACrBgtB,YAAajsB,KAAKy7B,QAClBj4B,OAAQxD,KAAK07B,YACbxtB,QAASM,IAAO,IAAIstB,aAActtB,OAAOxO,KAAK27B,cAAejwB,GAASiB,aAExE,GAAI3M,KAAKs7C,eAAgB,CACvB,MAAMI,EAAgBr5B,GAASo5B,GAC/BC,EAAcv/B,OAAS,EACvBs/B,EAAUn5B,GAAQo5B,EACpB,CACA,OAAOD,CACT,ICjEJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,UFsBA,IACEpmC,WAAY,CACVunB,YAAW,GACXQ,WAAU,GACVC,YAAW,GACXse,gBAAeA,IAEjB/lC,UAAUC,EAAAA,GAAAA,IAAS,CAAC,UACpB3E,QAAS,CACPkqC,WAAAA,CAAYQ,GACV,OAAO57C,KAAK4W,MAAM7G,gBAAgB6rC,EAAY,CAAE3rC,SAAS,GAC3D,EACAorC,QAAAA,CAASprC,GACP,OAAOjQ,KAAK4W,MAAMilC,kBAAkB5rC,EACtC,IGtCJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,U,UCLOvT,MAAM,S,GAFb,U,GAAA,U,GAAA,U,GAAA,U,IAiCOA,MAAM,S,IA+BNA,MAAM,S,IAhEbiB,IAAA,G,+FAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,qBACEC,EAAAA,EAAAA,IAAe,UAAX,UAAM,KACVA,EAAAA,EAAAA,IA4BM,MA5BNG,GA4BM,EA3BJH,EAAAA,EAAAA,IAKM,yBAJJA,EAAAA,EAAAA,IAAe,WAAV,QAAI,KACTA,EAAAA,EAAAA,IAEM,aADJA,EAAAA,EAAAA,IAAiF,SAAzEkB,MAAOX,EAAAoT,OAAOvQ,KAAO88B,QAAKx/B,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAoT,OAAOvQ,KAAOzC,EAAOmK,OAAO5J,OAAS,O,QANjFU,SASI5B,EAAAA,EAAAA,IAKM,2BAJJA,EAAAA,EAAAA,IAAkB,WAAb,WAAO,KACZA,EAAAA,EAAAA,IAEM,aADJA,EAAAA,EAAAA,IAAuF,SAA/EkB,MAAOX,EAAAoT,OAAO9O,QAAUq7B,QAAKx/B,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAoT,OAAO9O,QAAUlE,EAAOmK,OAAO5J,OAAS,O,QAZvF0B,SAeI5C,EAAAA,EAAAA,IAKM,2BAJJA,EAAAA,EAAAA,IAAqB,WAAhB,cAAU,KACfA,EAAAA,EAAAA,IAEM,aADJA,EAAAA,EAAAA,IAA2F,SAAnFkB,MAAOX,EAAAoT,OAAOpJ,UAAY21B,QAAKx/B,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAoT,OAAOpJ,UAAY5J,EAAOmK,OAAO5J,OAAS,O,QAlB3F0+B,SAqBI5/B,EAAAA,EAAAA,IAQM,2BAPJA,EAAAA,EAAAA,IAA2B,WAAtB,oBAAgB,KACrBA,EAAAA,EAAAA,IAKM,aAJJA,EAAAA,EAAAA,IAGE,SAFCkB,MAAOX,EAAAoT,OAAOzN,gBACdg6B,QAAKx/B,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAoT,OAAOzN,gBAAkBvF,EAAOmK,OAAO5J,OAAS,O,QA1BlE+9C,UAAA,eAgCEj/C,EAAAA,EAAAA,IAAa,UAAT,QAAI,KACRA,EAAAA,EAAAA,IAqBM,MArBNk/C,GAqBM,EApBJl/C,EAAAA,EAAAA,IAKM,2BAJJA,EAAAA,EAAAA,IAAe,WAAV,QAAI,KACTA,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAAyD,YArCjE,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAqC2BJ,EAAAmT,IAAG/S,GAAE0W,YAAY,oB,iBAAjB9W,EAAAmT,YAGvB1T,EAAAA,EAAAA,IAKM,2BAJJA,EAAAA,EAAAA,IAAe,WAAV,QAAI,KACTA,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAA2B,YA3CnC,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GA2C2BJ,EAAAgJ,KAAI5I,I,iBAAJJ,EAAAgJ,aAGvBvJ,EAAAA,EAAAA,IAGM,2BAFJA,EAAAA,EAAAA,IAAuB,WAAlB,gBAAY,KACjBC,EAAAA,EAAAA,IAA+CuX,EAAA,CAAvCtW,MAAOK,EAAA49C,WAAU,IAAM59C,EAAA69C,e,qBAEjCp/C,EAAAA,EAAAA,IAGM,2BAFJA,EAAAA,EAAAA,IAAe,WAAV,QAAI,KACTC,EAAAA,EAAAA,IAA2DuX,EAAA,CAAnDtW,MAAOK,EAAA49C,WAAU,IAAM59C,EAAA2Z,KAAKzV,SAAS,a,uBAIjDxF,EAAAA,EAAAA,IAKEi/B,EAAA,CAJAC,MAAM,OACN,eAAa,OACZ,iBAAgB59B,EAAAkS,cACjB,eAAa,a,0CAGfzT,EAAAA,EAAAA,IAAe,UAAX,UAAM,KACVA,EAAAA,EAAAA,IA0BM,MA1BNq/C,GA0BM,EAzBJr/C,EAAAA,EAAAA,IAKM,2BAJJA,EAAAA,EAAAA,IAAoB,WAAf,aAAS,KACdA,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAA4D,SApEpE,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAoEwBJ,EAAA++C,gBAAe3+C,GAAE0W,YAAY,c,iBAA7B9W,EAAA++C,wBAGpBt/C,EAAAA,EAAAA,IAKM,2BAJJA,EAAAA,EAAAA,IAAyB,WAApB,kBAAc,KACnBA,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAAsD,SA1E9D,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GA0EwBJ,EAAAg/C,cAAa5+C,GAAE0W,YAAY,U,iBAA3B9W,EAAAg/C,sBAGpBv/C,EAAAA,EAAAA,IAQS,UAPNS,QAAKC,EAAA,KAAAA,EAAA,QAA6BH,EAAAi/C,cAAgBj+C,EAAAk+C,iBAAe,IAKnE,YAGUl/C,EAAAi/C,gBAAa,WAAxB1/C,EAAAA,EAAAA,IAGM,MAzFV4/C,GAAA,gBAuFM1/C,EAAAA,EAAAA,IAA+B,WAA1B,wBAAoB,KACzBC,EAAAA,EAAAA,IAAgCuX,EAAA,CAAxBtW,MAAOX,EAAAi/C,eAAa,sBAxFlCz+C,EAAAA,EAAAA,IAAA,a,iBAoGA,IACEyX,WAAY,CACVC,MAAK,GACLsnB,YAAWA,IAEbx2B,KAAMA,KAAA,CACJoK,OAAQ,CACNvQ,KAAM,aACNyB,QAAS,EACT0F,UAAW,SACXrE,gBAAiB,MAEnBwN,IAAK+E,GAAMpE,QAAQ6D,cAAc,CAC/B4+B,OAAQ,CACN,CAAE1zC,KAAM,YAAanC,KAAM,UAC3B,CAAEmC,KAAM,YAAanC,KAAM,UAG/BsI,KAAMkP,GAAMpE,QAAQ6D,cAAc,CAChCynC,UAAW,OACXC,UAAW,KAEbN,gBAAiB,KACjBC,cAAe,KACfC,cAAe,OAEjBzmC,SAAU,KACLC,EAAAA,GAAAA,IAAS,CAAC,UACb6mC,UAAAA,GACE,OAAO9qC,KAAKukC,MAAMn2C,KAAKoG,KACzB,EACAu2C,SAAAA,GACE,OAAO/qC,KAAKukC,MAAMn2C,KAAKuQ,IACzB,EACA0rC,WAAAA,GACE,MAAMW,GAAW,IAAI9I,GAAAA,cAAeC,YAAY/zC,KAAK28C,WACrD,OAAO,IAAI1I,GAAAA,0BAA2BC,eAAel0C,KAAK08C,WAAYE,EACxE,EACA7kC,IAAAA,GACE,OAAOo8B,GAAcn0C,KAAKi8C,YAAaj8C,KAAK28C,UAAW38C,KAAKwQ,OAC9D,GAEFU,QAAS,CACP,eAAM8qC,CAAUa,GACd,OAAOA,GACT,EACAvsC,aAAAA,GACE,OAAOtQ,KAAK4W,MAAMtG,cAActQ,KAAKi8C,YAAaj8C,KAAK28C,UAAW38C,KAAKwQ,OACzE,EACA,qBAAM8rC,GACJ,OAAOrkC,GAAOjY,KAAK+X,KAAMtJ,GAAOzO,KAAKm8C,iBAAkBn8C,KAAKo8C,cAC9D,IClJJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,U,UCLO1/C,MAAM,S,GAFb,U,GAAA,U,GAAA,U,GAAA,U,GAAA,U,IAAAiB,IAAA,G,qEAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,qBACEC,EAAAA,EAAAA,IAAoC,UAAhC,+BAA2B,KAC/BA,EAAAA,EAAAA,IAkDM,MAlDNG,GAkDM,EAjDJH,EAAAA,EAAAA,IAGM,yBAFJA,EAAAA,EAAAA,IAA2B,WAAtB,oBAAgB,KACrBA,EAAAA,EAAAA,IAA8C,sBAAzCA,EAAAA,EAAAA,IAAmC,SAL9C,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAK2BJ,EAAA2F,gBAAevF,I,iBAAfJ,EAAA2F,wBAEvBlG,EAAAA,EAAAA,IAKM,aAJJA,EAAAA,EAAAA,IAGQ,wBAFNA,EAAAA,EAAAA,IAAyE,SATjF,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GASwBJ,EAAAU,KAAIN,GAAEM,KAAK,QAASC,MAAOX,EAAA0/C,cAAcC,c,OATjEt+C,IAAA,OASwBrB,EAAAU,QAAI,eAT5BE,EAAAA,EAAAA,IASiF,yBAI7EnB,EAAAA,EAAAA,IAKM,aAJJA,EAAAA,EAAAA,IAGQ,wBAFNA,EAAAA,EAAAA,IAAmE,SAf3E,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAewBJ,EAAAU,KAAIN,GAAEM,KAAK,QAASC,MAAOX,EAAA0/C,cAAcvpB,Q,OAfjE9zB,IAAA,OAewBrC,EAAAU,QAAI,eAf5BE,EAAAA,EAAAA,IAe2E,kBAIvEnB,EAAAA,EAAAA,IAMM,aALJA,EAAAA,EAAAA,IAGQ,wBAFNA,EAAAA,EAAAA,IAAqE,SArB7E,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAqBwBJ,EAAAU,KAAIN,GAAEM,KAAK,QAASC,MAAOX,EAAA0/C,cAAcE,U,OArBjEvgB,IAAA,OAqBwBr/B,EAAAU,QAAI,eArB5BE,EAAAA,EAAAA,IAqB6E,mBAGvEnB,EAAAA,EAAAA,IAAmC,sBAA9BA,EAAAA,EAAAA,IAAwB,SAxBnC,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAwB2BJ,EAAA6C,KAAIzC,I,iBAAJJ,EAAA6C,aAEvBpD,EAAAA,EAAAA,IAKM,aAJJA,EAAAA,EAAAA,IAGQ,wBAFNA,EAAAA,EAAAA,IAAyE,SA5BjF,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GA4BwBJ,EAAAU,KAAIN,GAAEM,KAAK,QAASC,MAAOX,EAAA0/C,cAAcG,c,OA5BjEnB,IAAA,OA4BwB1+C,EAAAU,QAAI,eA5B5BE,EAAAA,EAAAA,IA4BiF,0BAI7EnB,EAAAA,EAAAA,IAMM,aALJA,EAAAA,EAAAA,IAGQ,wBAFNA,EAAAA,EAAAA,IAA2E,SAlCnF,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAkCwBJ,EAAAU,KAAIN,GAAEM,KAAK,QAASC,MAAOX,EAAA0/C,cAAcxwC,gB,OAlCjEyvC,IAAA,OAkCwB3+C,EAAAU,QAAI,eAlC5BE,EAAAA,EAAAA,IAkCmF,kCAG7EnB,EAAAA,EAAAA,IAA4C,sBAAvCA,EAAAA,EAAAA,IAAiC,SArC5C,sBAAAU,EAAA,KAAAA,EAAA,GAAAC,GAqC2BJ,EAAA8/C,cAAa1/C,I,iBAAbJ,EAAA8/C,sBAEvBrgD,EAAAA,EAAAA,IAQS,UAPNS,QAAKC,EAAA,KAAAA,EAAA,QAA6BH,EAAA+/C,YAAc/+C,EAAAqR,MAAI,IAKtD,UAGUrS,EAAA+/C,cAAW,WAAtBxgD,EAAAA,EAAAA,IAGM,MAnDVu/C,GAAA,gBAiDMr/C,EAAAA,EAAAA,IAAoB,WAAf,aAAS,KACdC,EAAAA,EAAAA,IAA8BuX,EAAA,CAAtBtW,MAAOX,EAAA+/C,aAAW,sBAlDhCv/C,EAAAA,EAAAA,IAAA,a,CCSO,IAAKk/C,GAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,sBAAbA,EAAAA,EAAa,sCAAbA,CAAa,MAuBzB,MAAMM,GAAqBn+C,GAAQyM,GAAS2B,eAItCgwC,GAAe,CACnBrjC,SAAAA,CAAUjc,GACR,OAAOq/C,GAAmBpjC,UAAUxL,GAAOC,GAAO1Q,GAAQ2N,GAAS2B,eACrE,EACAhH,WAAAA,CAAYtI,GACV,OAAOyQ,GAAOC,GAAO2uC,GAAmB/2C,YAAYtI,IAAS2N,GAAS4B,cACxE,GAMIvK,GAAkB9D,GAAQyM,GAASyB,iBAK5BwiB,GAAU,CACrB,CACE9qB,IAAKgnB,GAAeixB,GAAcG,cAClCv7C,QAASmqB,GAAe,GAAG,GAC3BzC,eAAgBnqB,GAAQyM,GAAS6B,gBACjCxK,oBAEF,CACE8B,IAAKgnB,GAAeixB,GAAcE,UAClCt7C,QAASmqB,GAAe,GAAG,GAC3BzC,eAAgBnqB,GAAQyM,GAAS6B,gBAIjCkf,OAAM,GACN1pB,oBAEF,CACE8B,IAAKgnB,GAAeixB,GAAcC,cAClCr7C,QAASmqB,GAAe,GAAG,GAC3BzC,eAAgBnqB,GAAQyM,GAAS6B,gBACjCxK,oBAEF,CACE8B,IAAKgnB,GAAeixB,GAAcvpB,QAClC7xB,QAASmqB,GAAe,GAAG,GAC3BzC,eAAgBnqB,GAAQyM,GAAS6B,gBACjCxK,oBAEF,CACE8B,IAAKgnB,GAAeixB,GAAcxwC,gBAClC5K,QAASmqB,GAAe,GAAG,GAC3B8B,QAAS0vB,GACTt6C,qBC3EG,SAASu6C,GAAel0C,GAC7B,OAAO4mB,GAAWL,GAASmtB,GAAe1zC,EAAQ,CAAC,EAAGsC,GAASiB,UACjE,CF+CA,QACE0I,WAAY,CAAEC,MAAKA,IACnBlP,KAAMA,KAAA,CACJ02C,cAAa,GACbh/C,KAAMg/C,GAAcC,aACpBh6C,gBAAiB,uDACjB9C,KAAM,aACNi9C,cAAe,uDACfC,YAAa,OAEfvnC,UAAUC,EAAAA,GAAAA,IAAS,CAAC,UACpB3E,QAAS,CACPqsC,mBAAAA,GACE,OAAQv9C,KAAKlC,MACX,KAAKg/C,GAAcC,aACjB,MAAO,CAAEl4C,IAAKi4C,GAAcC,cAC9B,KAAKD,GAAcvpB,OACjB,MAAO,CAAE1uB,IAAKi4C,GAAcvpB,QAC9B,KAAKupB,GAAcE,SACjB,MAAO,CAAEn4C,IAAKi4C,GAAcE,SAAUvwB,OAAQzsB,KAAKC,MACrD,KAAK68C,GAAcG,aACjB,MAAO,CAAEp4C,IAAKi4C,GAAcG,cAC9B,KAAKH,GAAcxwC,eACjB,MAAO,CAAEzH,IAAKi4C,GAAcxwC,eAAgBqhB,QAAS3tB,KAAKk9C,eAC5D,QACE,MAAM,IAAIt9C,MAAM,sCAAsCk9C,GAAc98C,KAAKlC,SAE/E,EACA2R,IAAAA,GACE,MAAMiB,EAAa4sC,GAAe,IAC7Bt9C,KAAKu9C,sBACRx6C,gBAAiB/C,KAAK+C,gBACtBqmB,eAAgBppB,KAAK4W,MAAM3X,UAE7B,OAAOe,KAAK4W,MAAMnG,eAAeC,EACnC,IG1FJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,U,UCLOhU,MAAM,S,GAFb,U,IAAAiB,IAAA,G,IA+BOjB,MAAM,S,GA/Bb,U,GAAA,U,IAAAiB,IAAA,G,qEAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,qBACEC,EAAAA,EAAAA,IAAuB,UAAnB,kBAAc,KAClBA,EAAAA,EAAAA,IA0BM,MA1BNG,GA0BM,EAzBJH,EAAAA,EAAAA,IAKM,yBAJJA,EAAAA,EAAAA,IAA0B,WAArB,mBAAe,KACpBA,EAAAA,EAAAA,IAEM,aADJA,EAAAA,EAAAA,IAAqF,SAA7EkB,MAAOX,EAAAogD,cAAgBzgB,QAAKx/B,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAogD,cAAgBhgD,EAAOmK,OAAO5J,OAAS,O,QANrFU,SASI5B,EAAAA,EAAAA,IAKM,yBAJJA,EAAAA,EAAAA,IAA4B,WAAvB,qBAAiB,KACtBA,EAAAA,EAAAA,IAEM,sBADJA,EAAAA,EAAAA,IAAiD,SAA1CiB,KAAK,WAZpB,sBAAAP,EAAA,KAAAA,EAAA,GAAAC,GAYwCJ,EAAAqgD,cAAajgD,I,iBAAbJ,EAAAqgD,sBAGpC5gD,EAAAA,EAAAA,IAQS,UAPNS,QAAKC,EAAA,KAAAA,EAAA,QAA6BH,EAAA+/C,YAAc/+C,EAAAqR,MAAI,IAKtD,UAGUrS,EAAA+/C,cAAW,WAAtBxgD,EAAAA,EAAAA,IAGM,MA3BV8C,GAAA,cAyBM5C,EAAAA,EAAAA,IAAqB,WAAhB,cAAU,KACfC,EAAAA,EAAAA,IAA8BuX,EAAA,CAAtBtW,MAAOX,EAAA+/C,aAAW,sBA1BhCv/C,EAAAA,EAAAA,IAAA,wBA8BEf,EAAAA,EAAAA,IAA8B,UAA1B,yBAAqB,KACzBA,EAAAA,EAAAA,IA0BM,MA1BN4/B,GA0BM,EAzBJ5/B,EAAAA,EAAAA,IAKM,yBAJJA,EAAAA,EAAAA,IAAwB,WAAnB,iBAAa,KAClBA,EAAAA,EAAAA,IAEM,aADJA,EAAAA,EAAAA,IAAiE,SAAzDkB,MAAOX,EAAAsgD,IAAM3gB,QAAKx/B,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAAsgD,IAAMlgD,EAAOmK,OAAO5J,OAAS,O,QAnCjE+9C,SAsCIj/C,EAAAA,EAAAA,IAKM,2BAJJA,EAAAA,EAAAA,IAAyB,WAApB,kBAAc,KACnBA,EAAAA,EAAAA,IAEM,aADJA,EAAAA,EAAAA,IAAyE,SAAjEkB,MAAOX,EAAA6B,QAAU89B,QAAKx/B,EAAA,KAAAA,EAAA,GAAAC,GAAEJ,EAAA6B,QAAUzB,EAAOmK,OAAO5J,OAAS,O,QAzCzEg+C,SA4CIl/C,EAAAA,EAAAA,IAQS,UAPNS,QAAKC,EAAA,KAAAA,EAAA,QAA6BH,EAAAugD,cAAgBv/C,EAAAw/C,QAAM,IAK1D,YAGUxgD,EAAAugD,gBAAa,WAAxBhhD,EAAAA,EAAAA,IAGM,MAxDVu/C,GAAA,gBAsDMr/C,EAAAA,EAAAA,IAAwB,WAAnB,iBAAa,KAClBC,EAAAA,EAAAA,IAAgCuX,EAAA,CAAxBtW,MAAOX,EAAAugD,eAAa,sBAvDlC//C,EAAAA,EAAAA,IAAA,a,CCOA,MAAMigD,GAAez3C,GACnBoE,GAAAA,OAAOG,KAAKvE,GAAM9D,SAAS,UAAU68B,WAAW,IAAK,KAAKA,WAAW,IAAK,KAAKhc,QAAQ,MAAO,IAE1F26B,GAAiB13C,GACrBoE,GAAAA,OAAOG,KAAKvE,EAAK+4B,WAAW,IAAK,KAAKA,WAAW,IAAK,KAAM,UAExD4e,GAAqB33C,IAAS,IAAAmtC,EAAA,OAAasK,GAA8B,QAAnBtK,EAACC,GAAaptC,UAAK,IAAAmtC,EAAAA,EAAI,GAAG,EAEhFyK,GAAS,uCAeRn0C,eAAeo0C,GAAQC,EAAsBl/C,GAClD,MAAMkP,EAAU,IAAKgwC,GACf,YAAahwC,IACjBA,EAAQiwC,QAAU,CAChBC,IAAK,MACLC,IAAK,UACLC,EAAGT,GAAYpvC,GAAOzP,EAAQC,iBAGV2J,IAApBsF,EAAQiwC,gBAA8BjwC,EAAQiwC,QAClD,MAAM9nC,EAAO,GAAG2nC,MAAUD,GAAkB7vC,KACtCyB,QAAkB3Q,EAAQyQ,KAAK4G,GACrC,MAAO,GAAGA,KAAQwnC,GAAYluC,IAChC,CAQO,SAAS4uC,GACdb,EACAz+C,GAUA,IAAAu/C,EACA,MAAMnpC,EAAaqoC,EAAItuC,MAAM,KAC7B,GAA0B,IAAtBiG,EAAWrH,OACb,MAAM,IAAIrN,EAAc,uBAAwB,EAAG0U,EAAWrH,QAChE,MAAOywC,EAAGC,EAAgB/uC,GAAa0F,EACvC,GAAIopC,IAAMT,GAAQ,MAAM,IAAIr9C,EAAc,aAAcq9C,GAAQS,GAChE,MAAMvwC,EAAU0D,KAAKukC,MAAM2H,GAAcY,GAAgBp8C,YACnDq8C,EAAqB,QAAlBH,EAAGtwC,EAAQiwC,eAAO,IAAAK,EAAAA,EAAI,CAAC,EAC1BI,EACK,MAATD,EAAIL,GAAyB,QAAZK,EAAIP,KAA6B,YAAZO,EAAIN,IACtCp/C,EACAuP,GAAOsvC,GAAca,EAAIL,GAAI5yC,GAAS6B,gBAC5C,GAAe,MAAXtO,GAAmB2/C,IAAW3/C,EAChC,MAAM,IAAI0B,EAAc,UAAW,GAAGi+C,gBAAsB3/C,GAE9D,GACY,MAAV2/C,IACC3mC,GAAOzN,GAAAA,OAAOG,KAAK,GAAG8zC,KAAKC,KAAmBZ,GAAcnuC,GAAYivC,GAEzE,MAAM,IAAIj6C,GAAsB,wBAAwBi6C,KAE1D,MAAO,CAAE1wC,UAAS0wC,SACpB,CDpBA,QACEvpC,WAAY,CAAEC,MAAKA,IACnBM,UAAUC,EAAAA,GAAAA,IAAS,CAAC,UACpBzP,KAAMA,KAAA,CACJo3C,cAAe,mBACfC,eAAe,EACfN,YAAa,KACbO,IAAK,2QACLz+C,QAAS,KACT0+C,cAAe,OAEjBzsC,QAAS,CACP,UAAMzB,GACJ,MAAMvB,EAAU0D,KAAKukC,MAAMn2C,KAAKw9C,eAGhC,OAFKx9C,KAAKy9C,gBAAevvC,EAAQiwC,aAAUv1C,GAEpCq1C,GAAQ/vC,EAASlO,KAAK4W,MAAMioC,gBAAgB7+C,KAAK4W,MAAM3X,SAChE,EACA,YAAM2+C,GACJ,OAAOW,GAAUv+C,KAAK09C,IAAK19C,KAAKf,QAClC,IEhFJ,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAAS,MAEpE,UlHiCA,IACEoW,WAAY,CACVypC,QAAO,GACPC,MAAK,GACLC,UAAS,GACTC,SAAQ,GACRC,UAAS,GACTC,oBAAmB,GACnBC,IAAGA,IAELh5C,KAAMA,KAAA,CAAS/I,KAAM,MmH3CvB,MAAM,IAA2B,QAAgB,GAAQ,CAAC,CAAC,SAASgiD,KAEpE,UCUOx1C,eAAegyB,GACpBr4B,EACA87C,EACAp3C,GAEA,OAAOouC,SACCngB,GAAa,CACjBvL,kBAAkB,KACf1iB,EACHrD,IAAKsU,GAAI6S,QACT9H,SAAUhc,EAAQ4H,UAAU7Q,QAC5BgtB,kBAAmB1B,GAAY+0B,EAAmB,iBAAkBp3C,GACpE1E,WAEF0E,EAEJ,CA4BO2B,eAAe01C,GACpBC,EACAF,EACAp3C,GAEA,IAAKs3C,EAAW,IAAMA,EAAW,EAC/B,MAAM,IAAI7+C,EAAc,WAAY,2BAA4B6+C,GAElE,MAAMvzB,QAAoB1B,GAAY+0B,EAAmB,iBAAkBp3C,GACrEgc,EAAWhc,EAAQ4H,UAAU7Q,QAC7B4oB,EAAU,IAAI/O,GAAAA,QAAgB4O,GAAWnW,KAAKrJ,EAAQ4H,UAAxB4X,CAAmCxD,EAAUhc,IAC3Eu3C,EAAgB53B,EAAQ9O,MAAMymC,GAAUj/B,aAAazH,GAAAA,EAAU4mC,gBAC/D,IAAE98B,GAAQP,SACR8T,GAAa,CACjBvL,kBAAkB,KACf1iB,EACHrD,IAAKsU,GAAI6S,QACT9H,WACA+H,cACAzoB,OAAQi8C,IAEVtmC,GAAI6S,SAGAxoB,EAASi8C,EAAcE,KAAK/8B,GAAKQ,GAAGyE,GAAWA,EAAQ+3B,MAAMh9B,GAAO68B,EAC1E,OAAOnJ,SACCngB,GAAa,CACjBvL,kBAAkB,KACf1iB,EACHrD,IAAKsU,GAAI6S,QACT9H,WACA+H,cACAzoB,WAEF0E,EAEJ,CAiBO2B,eAAegyC,GACpBx4C,EACA6E,GAEA,OAAOouC,SACCngB,GAAa,CACjBvL,kBAAkB,KACf1iB,EACHrD,IAAKsU,GAAIkI,YACToO,QAASvnB,EAAQ4H,UAAU7Q,QAC3B+Q,GAAI3M,IAEN6E,EAEJ,CClGO2B,eAAeg2C,GACpBC,EACA3hD,GACA,UACE2R,EAAS,WACTmnC,EAAU,OACV78B,EAAM,SACNmqB,EAAQ,IACRh0B,EAAG,eACH8mC,EAAc,WACdH,EAAU,WACVE,KACGlvC,IASL,IAAA63C,EACA,MAAM7jC,EAAUpM,EAAU7Q,QAC1B,GAAqD,uBAA1CqoB,GAAWpL,EAAS,CAAE9B,YAAWM,KAC1C,MAAM,IAAI3Z,EAAqB,WAAWmb,mBAG5C,MAAM4Y,QAAiB/B,GAAS8F,WAA4C,CAC1E/oB,YACAmnC,aACA78B,SACAmqB,WACAh0B,MACA8mC,iBACAH,aACAE,eAGIpnC,QAAWmmB,GAAa,CAC5BvL,kBAAkB,KACf1iB,EACHrD,IAAKsU,GAAIiI,WACThH,SACAjU,WAAY2uB,EAASkiB,WACrBtzB,SAA0B,QAAlBq8B,EAAE73C,EAAQwb,gBAAQ,IAAAq8B,EAAAA,QAAWjrB,EAAS4iB,aAAa,OAAQv5C,EAAM+J,GACzEgU,UACA4Q,SAAUgI,EAASijB,UAAUvpC,OAAOsmB,EAASkjB,MAAO,OAAQ75C,GAC5DmxB,QAASvX,GAAK+nC,MAER/nC,KAAM1U,EAAW,MAAEizB,SAAgBggB,GAAgBtmC,EAAI,CAC7DoK,SACAtK,YACAmnC,gBACG/uC,IAECgiB,EAAaqM,GAA4BD,GAE/C,OAAOlsB,OAAO41C,OAAO,CACnBrsB,MAAOzX,EACP7Y,cACAizB,QACA2pB,aAAc/1B,GAElB,CA0BOrgB,eAAeq2C,GACpB78C,GACA,IAAEuf,EAAG,SAAE1C,EAAQ,OAAE9F,IAEjB,MAAM,cAAEpD,EAAa,yBAAEiD,SAAmCG,EAAOC,cACjE,IAAInM,EAAU6J,GAAKlN,GAAc,CAACL,GAAAA,OAAOG,KAAKqM,GAAgBvI,GAAOpL,MACrE,GAAI4W,IAA6BjB,GAAyBK,MAAO,CAC/D,GAAW,MAAPuJ,EAAa,MAAM,IAAIjiB,EAAc,MAAO,sBAAuBiiB,GACvE,GAAgB,MAAZ1C,EAAkB,MAAM,IAAIvf,EAAc,WAAY,sBAAuBuf,GACjFhS,EAAU6J,GACRtJ,GACE2Q,GAAU,CACRva,IAAKomB,GAAS4K,iBACdjT,MACA1C,WACAjb,OAAQuJ,GAAON,EAASxC,GAAS0B,WAIzC,CACA,OAAOc,CACT,CAUOrE,eAAes2C,GACpB98C,GACA,OAAE+W,IAEF,MAAM+E,EAAWkD,GAAShf,EAAa8V,GAAIkS,UAC3C,GAAIlM,EAASqD,UAAU3d,MAAQsU,GAAIyB,SACjC,MAAM,IAAIja,EAAc,cAAe,sBAAuBwY,GAAIgG,EAASqD,UAAU3d,MAEvF,OAAOq7C,GAAgB59B,GAAQnD,EAASqD,UAAUxS,GAAGwS,WAAY,CAC/DI,IAAKzD,EAASqD,UAAUI,IACxB1C,SAAUf,EAASqD,UAAUtC,SAC7B9F,UAEJ,C,0YCtJA,MAAMlJ,GAAU,IACXkvC,EACH9J,gBAAe,MACZ+J,KACAC,GACM,IAAAC,GAAA,IAAAh5C,QA+BX,MAAMi5C,GAQJ3gD,WAAAA,CAAYqI,EAA+B,CAAC,IAAGvB,EAAAA,GAAAA,GAAA,gBAPf,CAAC,GAEjCwB,GAAA,KAASo4C,QAAe,GAMtBn2C,OAAOsf,OAAO1pB,KAAKygD,SAAUv4C,GAC7BE,GAAKm4C,GAALvgD,KAAuB,CACrB8P,UAAWuV,IAAc,IAAMrlB,KAAKygD,SAAS3wC,YAC7CsK,OAAQiL,IAAc,IAAMrlB,KAAKygD,SAASrmC,SAC1C68B,WAAY5xB,IAAc,IAAMrlB,KAAKygD,SAASxJ,cAElD,CAQA8D,UAAAA,CAAW2F,EAAiC,CAAC,GAC3C,MAAO,IACF1gD,KAAKygD,YACLj4C,GAAK+3C,GAALvgD,SACA0gD,EAEP,CAGA,aAAMp+B,CAAQpa,GAEZ,OAAOiuB,GAAa,IAAMn2B,KAAK+6C,gBAAyB7yC,GAC1D,EAiCFkC,OAAOsf,OACL82B,GAAaG,UACbz2C,GAA8BgH,IAAS,EAAEjR,EAAM4U,KAAa,CAC1D5U,EACA,YAA8C9B,GAC5CA,EAAK6P,OAAS6G,EAAQ7G,OACtB,MAAM9F,EAAU/J,EAAKA,EAAK6P,OAAS,GAEnC,OADA7P,EAAKA,EAAK6P,OAAS,GAAKhO,KAAK+6C,WAAW7yC,GACjC2M,KAAW1W,EACpB,MAMJ,MAAMyiD,GAAoBJ,GAC1B,U,0YC3HiG,IAAAD,GAAA,IAAAh5C,QAUlF,MAAMs5C,WAAkBL,GAWrC3gD,WAAAA,EAAY,MACVihD,EAAQ,MACL54C,GAGD,CAAC,GACHnI,MAAMmI,IAASvB,EAAAA,GAAAA,GAAA,YAhBS,IAAIyK,KAI9BjJ,GAAA,KAASo4C,QAAe,GActBO,EAAMx3B,SAAQ,EAAGrpB,OAAM8gD,YAAYjpB,IAAM93B,KAAKghD,QAAQ/gD,EAAM8gD,EAAgB,IAANjpB,KAEtE1vB,GAAKm4C,GAALvgD,KAAuB,CACrBoa,OAAQiL,IAAc,IAAMrlB,KAAKihD,MACjChK,WAAY5xB,IAAc,IAAMrlB,KAAKy9B,cACrC3tB,UAAWuV,IAAc,IAAMrlB,KAAK6+C,qBAExC,CAKA,eAAIphB,GACF,GAAgC,MAA5Bz9B,KAAKygD,SAASxJ,WAChB,MAAM,IAAI52C,EAAc,sDAE1B,OAAOL,KAAKygD,SAASxJ,UACvB,CAEA,OAAIgK,GAEF,OADAjhD,KAAKkhD,sBACElhD,KAAKmhD,KAAK/uC,IAAIpS,KAAKohD,iBAC5B,CAaAJ,OAAAA,CAAQ/gD,EAAc8W,EAAY1X,GAAS,GACzC,GAAIW,KAAKmhD,KAAKzgB,IAAIzgC,GAAO,MAAM,IAAIqE,GAAmBrE,GAEtDD,KAAKmhD,KAAKzvC,IAAIzR,EAAM8W,IAChB1X,GAAmC,MAAzBW,KAAKohD,mBACjBphD,KAAKiX,WAAWhX,EAEpB,CAQAgX,UAAAA,CAAWhX,GACT,IAAKD,KAAKmhD,KAAKzgB,IAAIzgC,GAAO,MAAM,IAAIsE,GAAkB,kBAAkBtE,iBACxED,KAAKohD,iBAAmBnhD,CAC1B,CAOAohD,eAAAA,GACE,OAAgC,MAAzBrhD,KAAKohD,gBACd,CAEUF,mBAAAA,GACR,IAAKlhD,KAAKqhD,kBACR,MAAM,IAAI98C,GAAkB,gEAEhC,CASA,iBAAM8V,GAEJ,OADAra,KAAKkhD,sBACE,CACLjhD,KAAMD,KAAKohD,0BACDphD,KAAKihD,IAAI5mC,cAEvB,CAOA,oBAAMxD,GACJ,OAAO/M,QAAQssB,IACb5hB,MAAM7J,KAAK3K,KAAKmhD,KAAK72C,WAAWvL,KAAI8K,OAAQ5J,EAAM8W,MAAU,CAC1D9W,gBACU8W,EAAKsD,kBAGrB,CAGA5G,SAAAA,GACE,MAAO,EACT,CAMAorC,eAAAA,CAAgB7/C,EAAqBgB,KAAKygD,SAAS3wC,WACjD,GAAuB,kBAAZ9Q,EAAsB,MAAM,IAAIuC,EAAoB,8BAC/D,GAAuB,kBAAZvC,EAAsB,OAAOA,EACxC,MAAM,IAAIw5C,EAEN,sFAAmC/jC,OAAOzV,aAEhD,CAEA,WAAIC,GACF,OAAOe,KAAK6+C,kBAAkB5/C,OAChC,CAOA,UAAMwQ,CACJrJ,GACA,UAAE0J,KAAc5H,GAAuC,CAAC,GAExD,OAAOlI,KAAK6+C,gBAAgB/uC,GAAWL,KAAKrJ,EAAM8B,EACpD,CAOA,qBAAM6H,CACJC,GACA,UACEF,KACG5H,GAC0E,CAAC,GAEhF,MAAMd,EAAsC,OAA1BpH,KAAKohD,uBAAkCphD,KAAKihD,IAAI96B,oBAAiBvd,EACnF,OAAO5I,KAAK6+C,gBAAgB/uC,GAAWC,gBAAgBC,EAAI,CAAE5I,eAAcc,GAC7E,CAOA,iBAAMmI,CACJvQ,GACA,UACEgQ,KACG5H,GACsE,CAAC,GAE5E,OAAOlI,KAAK6+C,gBAAgB/uC,GAAWO,YAAYvQ,EAASoI,EAC9D,CAQA,mBAAMoI,CACJlK,EACAmK,GACA,UACET,KACG5H,GACwE,CAAC,GAE9E,OAAOlI,KAAK6+C,gBAAgB/uC,GAAWQ,cAAclK,EAAMmK,EAAKrI,EAClE,CAOA,oBAAMuI,CACJC,GACA,UACEZ,KACG5H,GACyE,CAAC,GACnD,IAAAo5C,EAG5B,OAFiB,QAAjBA,EAAAp5C,EAAQd,iBAAS,IAAAk6C,IAAjBp5C,EAAQd,UACoB,OAA1BpH,KAAKohD,uBAAkCphD,KAAKihD,IAAI96B,oBAAiBvd,GAC5D5I,KAAK6+C,gBAAgB/uC,GAAWW,eAAeC,EAAYxI,EACpE,CAMS6yC,UAAAA,CAAW2F,EAAiC,CAAC,GACpD,MAAO,IACF1gD,KAAKygD,YACLj4C,GAAK+3C,GAALvgD,SACA0gD,KACwB,MAAvBA,EAAU5wC,WAAqB,CACjCA,UAAW9P,KAAK6+C,gBAAgB6B,EAAU5wC,YAGhD,ECtPa,MAAMyxC,WAAcV,GAQjChhD,WAAAA,EAAY,SACV6S,KACGxK,GAC0E,CAAC,GAC9EnI,MAAMmI,IAASvB,EAAAA,GAAAA,GAAA,gBAX0C,CAAC,GAY1D+L,GAAU4W,SAAQ,CAACtqB,EAASyqB,IAAQzpB,KAAKqX,WAAWrY,EAAS,CAAEK,OAAgB,IAARoqB,KACzE,CAESo1B,eAAAA,CAAgB7/C,EAAqBgB,KAAKwhD,iBACjD,GAAuB,kBAAZxiD,EAAsB,CAC/B,MAAMC,EAAUD,EAEhB,GADAyP,GAAOxP,GACuB,MAA1Be,KAAK0S,SAASzT,GAAkB,MAAM,IAAI8C,EAAwB/C,GACtEA,EAAUgB,KAAK0S,SAASzT,EAC1B,CACA,OAAOc,MAAM8+C,gBAAgB7/C,EAC/B,CAMSyU,SAAAA,GACP,OAAOrJ,OAAOwJ,KAAK5T,KAAK0S,SAC1B,CASA2E,UAAAA,CAAWrY,GAAsB,OAAEK,GAAiC,CAAC,GACnE,MAAM,QAAEJ,GAAYD,EACpBgB,KAAK0S,SAASzT,GAAWD,GACV,IAAXK,GAAiBW,KAAKyhD,cAAcxiD,EAC1C,CAOAmY,aAAAA,CAAcnY,GACZ,GAA8B,MAA1Be,KAAK0S,SAASzT,GAAkB,MAAM,IAAI8C,EAAwB9C,UAC/De,KAAK0S,SAASzT,GACjBe,KAAKwhD,kBAAoBviD,UAAgBe,KAAKwhD,eACpD,CAOAC,aAAAA,CAAcxiD,GAEZ,GADAwP,GAAOxP,GACuB,MAA1Be,KAAK0S,SAASzT,GAAkB,MAAM,IAAI8C,EAAwB9C,GACtEe,KAAKwhD,gBAAkBviD,CACzB,ECvEK,MAAM8zB,GAAuC,CAClDj1B,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACf37B,KAAM,CACJq4B,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViI,QAAS,CACPs2B,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBAOR6f,GAA0C,CACrD5jD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,cACXC,gBAAiB,CACfsV,WAAY,CACV5Y,eAAgB,cAChB1gC,KAAM,CACJmC,KAAM,aACNlC,MAAO,CAAED,KAAM,CAAEmC,KAAM,UAG3B0hD,QAAS,CACPnjB,eAAgB,WAChB1gC,KAAM,CACJmC,KAAM,cAOHI,GAA4C,CACvDvC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACfhkC,KAAM,CACJ0gC,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2hD,IAAK,CACHpjB,eAAgB,MAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aAGf/hC,QAAS,CACP0+B,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVylC,QAAS,CACPlH,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,cAOH4hD,GAAuC,CAClD/jD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACfggB,KAAM,CACJtjB,eAAgB,OAChB1gC,KAAM,CACJmC,KAAM,WAGV8hD,KAAM,CACJvjB,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV+hD,IAAK,CACHxjB,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHgiD,GAA4C,CACvDnkD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACfyC,SAAU,CACR/F,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVsQ,IAAK,CACHiuB,eAAgB,MAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,aACNlC,MAAO,CAAED,KAAM,CAAEmC,KAAM,YAK/BiiD,SAAU,CACR1jB,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,uBASZsgB,GAAoD,CAC/DrkD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,wBACXC,gBAAiB,CACfl/B,OAAQ,CACN47B,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViI,QAAS,CACPs2B,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBAGfugB,SAAU,CACR5jB,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVoiD,WAAY,CACV7jB,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVqiD,UAAW,CACT9jB,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHsiD,GAAsD,CACjEzkD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,0BACXC,gBAAiB,CACfyC,SAAU,CACR/F,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVmiD,SAAU,CACR5jB,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVoiD,WAAY,CACV7jB,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVqiD,UAAW,CACT9jB,eAAgB,aAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHuiD,GAAgD,CAC3D1kD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,oBACXC,gBAAiB,CACfsgB,SAAU,CACR5jB,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV8R,OAAQ,CACNysB,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,aACNlC,MAAO,CAAED,KAAM,CAAEmC,KAAM,aAOpBwiD,GAAgD,CAC3D3kD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,oBACXC,gBAAiB,CACfl/B,OAAQ,CACN47B,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViI,QAAS,CACPs2B,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBAGfugB,SAAU,CACR5jB,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV85C,UAAW,CACTvb,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,gBASP45C,GAAuC,CAClD/7C,KAAM,CACJmC,KAAM,YACN4hC,UAAW,WACXC,gBAAiB,CACf2D,SAAU,CACRjH,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHyiD,GAAqD,CAChE5kD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,yBACXC,gBAAiB,CACf2D,SAAU,CACRjH,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVskC,SAAU,CACR/F,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH0iD,GAA8C,CACzD7kD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBACXC,gBAAiB,CACfsgB,SAAU,CACR5jB,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV85C,UAAW,CACTvb,eAAgB,YAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CACJmC,KAAM,aACNlC,MAAO,CAAED,KAAM,CAAEmC,KAAM,eASxBmiC,GAAyC,CACpDtkC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aACXC,gBAAiB,CACftuB,OAAQ,CACNgrB,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH2iD,GAAmD,CAC9D9kD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,uBACXC,gBAAiB,CACfl/B,OAAQ,CACN47B,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViI,QAAS,CACPs2B,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBAGf4D,SAAU,CACRjH,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVmiD,SAAU,CACR5jB,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH4iD,GAA4C,CACvD/kD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACfyC,SAAU,CACR/F,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH6iD,GAA4C,CACvDhlD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,gBACXC,gBAAiB,CACfihB,cAAe,CACbvkB,eAAgB,iBAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOH+iD,GAAoD,CAC/DllD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,wBACXC,gBAAiB,CACfyC,SAAU,CACR/F,eAAgB,WAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV2C,OAAQ,CACN47B,eAAgB,SAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGViI,QAAS,CACPs2B,eAAgB,UAChB1gC,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBAORohB,GAA8C,CACzDnlD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,kBACXC,gBAAiB,CACfpgC,QAAS,CACP88B,eAAgB,UAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHijD,GAAyC,CACpDplD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,aACXC,gBAAiB,CACfqhB,WAAY,CACV3kB,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHmjD,GAA+C,CAC1DtlD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,mBACXC,gBAAiB,CACfuhB,WAAY,CACV7kB,eAAgB,cAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGVmG,KAAM,CACJo4B,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,cAOHqjD,GAA6C,CACxDxlD,KAAM,CACJmC,KAAM,YACN4hC,UAAW,iBACXC,gBAAiB,CACf17B,KAAM,CACJo4B,eAAgB,OAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,aACNlC,MAAO,CAAED,KAAM,CAAEmC,KAAM,aCzhBpB2sC,GAAkC,CAC7CH,cAAe,CAAC,UAAW,eAC3BpO,OAAQ,CACNvT,aAAc,mBACd6Y,YAAY,EACZnF,eAAgB,eAChB1gC,KAAM,CACJmC,KAAM,YAKCoW,GAA2B,CACtCo2B,cAAe,OACfpO,OAAQklB,IAGG/W,GAA6B,CACxCC,cAAe,SACfpO,OAAQ,CACNvT,aAAc,mBACd6Y,YAAY,EACZnF,eAAgB,SAChB1gC,KAAM,CACJmC,KAAM,YAKCysC,GAA+B,CAC1CD,cAAe,QACfpO,OAAQ,CACNG,eAAgB,QAChBhpB,UAAU,EACV1X,KAAM,CACJmC,KAAM,WAGV0sC,cAAc,GAGHO,GAA4B,CACvCT,cAAe,OACfpO,OAAQmlB,IAGGC,GAA4B,CACvChX,cAAe,OACfpO,OAAQqlB,IAGGC,GAA4B,CACvClX,cAAe,OACfpO,OAAQulB,IAGGC,GAA4B,CACvCpX,cAAe,OACfpO,OAAQylB,IAGGC,GAA4B,CACvCtX,cAAe,OACfpO,OAAQ2lB,IAGGC,GAA4B,CACvCxX,cAAe,OACfpO,OAAQ6lB,IAGGC,GAA4B,CACvC1X,cAAe,OACfpO,OAAQ+lB,IC7CH,MAAMC,WAAiBhX,GAAAA,GAQ5BxtC,WAAAA,CAAY6sC,EAAexkC,GAAkC,IAAA4d,EAAAwnB,EAC3D,QAAc1kC,IAAV8jC,EACF,MAAM,IAAI9sC,MAAM,0BAIbsI,IACHA,EAAU,CAAC,GAEb,MAAMqlC,EAAmC,CACvCC,mBAAoB,mCAGhBC,EAAiB,iCACjBC,EACJxlC,EAAQylC,kBAAoBzlC,EAAQylC,iBAAiBD,gBACjD,GAAGxlC,EAAQylC,iBAAiBD,mBAAmBD,IAC/C,GAAGA,IAEHG,EAAsB,IACvBL,KACArlC,EACHylC,iBAAkB,CAChBD,mBAEFG,SAA6C,QAArC/nB,EAAkB,QAAlBwnB,EAAEplC,EAAQ2lC,gBAAQ,IAAAP,EAAAA,EAAIplC,EAAQ4lC,eAAO,IAAAhoB,EAAAA,EAAI,WAEnD/lB,MAAM6tC,GAEN5tC,KAAK0sC,MAAQA,CACf,CAOA4X,WAAAA,CACEjuC,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACRq8C,GAEJ,CAOAC,eAAAA,CACEnuC,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACRu8C,GAEJ,CAOAC,gBAAAA,CACEruC,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACRy8C,GAEJ,CAOAC,wBAAAA,CACEvuC,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACR28C,GAEJ,CAOAC,cAAAA,CACEzuC,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACR68C,GAEJ,CAOAC,sBAAAA,CACE3uC,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACR+8C,GAEJ,CAOAC,oBAAAA,CACE7uC,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACRi9C,GAEJ,CAOAC,oBAAAA,CACE/uC,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACRm9C,GAEJ,CAOAC,gBAAAA,CACEjvC,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACRq9C,GAEJ,CAOAC,kBAAAA,CACEnvC,EACAnO,GAEA,OAAOlI,KAAK+tC,qBACV,CAAE13B,OAAMnO,WACRu9C,GAEJ,CAMA/jD,OAAAA,CAAQwG,GACN,OAAOlI,KAAK+tC,qBAAqB,CAAE7lC,WAAWw9C,GAChD,CAMAvC,UAAAA,CAAWj7C,GACT,OAAOlI,KAAK+tC,qBAAqB,CAAE7lC,WAAWy9C,GAChD,CAMA1E,GAAAA,CAAI/4C,GACF,OAAOlI,KAAK+tC,qBAAqB,CAAE7lC,WAAW09C,GAChD,EAGF,MAAMznB,GAAakP,GAAAA,GAA4BsE,GAAqB,GAE9D4S,GAAqD,CACzDlyB,KAAM,OACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACVh0C,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CACP1kC,KAAM,CAAEmC,KAAM,aAAclC,MAAO,CAAED,KAAM,CAAEmC,KAAM,aAK3D,IAAK,CACH6xC,WAAY,CACVh0C,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CAAE1kC,KAAM,CAAEmC,KAAM,YAAa4hC,UAAW,oBAGrDkQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACXlU,WAAUA,IAENsmB,GAAyD,CAC7DpyB,KAAM,WACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACVh0C,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CAAE1kC,KAAM,CAAEmC,KAAM,YAAa4hC,UAAW,oBAGrDkQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACXlU,WAAUA,IAENwmB,GAA0D,CAC9DtyB,KAAM,sBACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAY,CAAEh0C,KAAM,CAAEmC,KAAM,SAE9B,IAAK,CACH6xC,WAAY,CACVh0C,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CAAE1kC,KAAM,CAAEmC,KAAM,YAAa4hC,UAAW,oBAGrDkQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACXlU,WAAUA,IAEN0mB,GAAkE,CACtExyB,KAAM,+BACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACVh0C,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CAAE1kC,KAAM,CAAEmC,KAAM,YAAa4hC,UAAW,oBAGrDkQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACXlU,WAAUA,IAEN4mB,GAAwD,CAC5D1yB,KAAM,mBACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACVh0C,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CAAE1kC,KAAM,CAAEmC,KAAM,YAAa4hC,UAAW,oBAGrDkQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACXlU,WAAUA,IAEN8mB,GAAgE,CACpE5yB,KAAM,4BACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACXlU,WAAUA,IAENgnB,GAA8D,CAClE9yB,KAAM,0BACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAY,CACVh0C,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CAAE1kC,KAAM,CAAEmC,KAAM,YAAa4hC,UAAW,oBAGrDkQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACXlU,WAAUA,IAENknB,GAA8D,CAClEhzB,KAAM,kBACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACXlU,WAAUA,IAENonB,GAA0D,CAC9DlzB,KAAM,sBACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CAAC,EACN,IAAK,CACHC,WAAY,CACVh0C,KAAM,CACJmC,KAAM,WACNuiC,QAAS,CAAE1kC,KAAM,CAAEmC,KAAM,YAAa4hC,UAAW,oBAGrDkQ,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACXlU,WAAUA,IAENsnB,GAA4D,CAChEpzB,KAAM,oBACNuf,WAAY,OACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbK,YAAaH,GACbD,cAAe,CAACC,IAChBC,iBAAkB,CAACD,GAAwBA,IAC3CI,UAAW,OACXlU,WAAUA,IAENunB,GAAiD,CACrDrzB,KAAM,WACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,WAAUA,IAENwnB,GAAoD,CACxDtzB,KAAM,eACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAYH,IAEd,IAAK,CACHG,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,WAAUA,IAENynB,GAA6C,CACjDvzB,KAAM,OACNuf,WAAY,MACZC,UAAW,CACT,IAAK,CACHC,WAAY,CACVh0C,KAAM,CAAEmC,KAAM,aAAclC,MAAO,CAAED,KAAM,CAAEmC,KAAM,WAGvD,IAAK,CACH6xC,WAAYH,GACZI,SAAS,IAGbC,cAAe,CAACC,IAChBC,iBAAkB,CAACD,IACnB9T,WAAUA,ICxeG,MAAe0nB,ICTf,MAAMC,WAAqBD,GAQxChmD,WAAAA,CAAYkmD,GAAqB,cAAEvT,GAAgB,GAAuC,CAAC,GAGzF,IAAI9wC,EAFJ3B,QAGA,MAAM0yC,EAAa5oC,UACF,MAAXnI,IACJA,SAAiB1B,KAAKihD,IAAIkC,WAAWxQ,IAAOwQ,YADhBzhD,GAK9B1B,KAAKihD,IAAM,IAAI+E,GAAYD,EAAa,CACtCnT,yBAAyB,EACzBC,mBAAoB,IACdL,EAAgB,GAAK,CAAChS,GAAsB,WAAYiS,EAAY,QAAS,UACjFpS,IAAyBhqB,IACvB,IAAIvW,EAAU,GAed,MAdI,WAAYuW,IACdvW,GAAW,IAAIuW,EAAK7C,SACA,MAAlB6C,EAAKomC,UAAoB,OAAOpmC,EAAKomC,YAAc,KAErC,MAAbpmC,EAAK9M,KAAe,KAAKqI,KAAKC,UAAUwE,EAAK9M,SAAW,MAEzDiL,MAAMyxC,QAAQ5vC,KAChBvW,GAAW,KAAKuW,EACbtX,KACEkT,GACC,GAAGA,EAAEnU,QAAQmU,EAAE2vC,IAAIG,QAAQ9vC,EAAE2vC,IAAII,QAAQ/vC,EAAEnS,UAAuB,MAAbmS,EAAEyzB,QAAkB,KAAKzzB,EAAEyzB,WAAa,OAEhGvmC,KAAK,SAEHW,CAAO,OAIpBE,KAAKihD,IAAInO,SAASG,aAAa,CAAEhzC,KAAMizC,GAAAA,KACvClzC,KAAKihD,IAAInO,SAASG,aAAa,CAAEhzC,KAAMkzC,GAAAA,IACzC,CAEA,yBAAMgE,CACJD,EACAE,GAEA,IACE,MAAM8O,QAAelmD,KAAKihD,IAAIuD,gBAAgB,CAAEr+C,KAAM+wC,EAAYhvC,QAAS,CAAEkvC,gBACvE8K,EAAWgE,EAAOhE,SAASnjD,KAAI,EAAGjB,UAASqoD,KAAcA,IACzDj2C,EAAM,IAAKg2C,EAAQhE,YAEzB,OAAOhyC,CACT,CAAE,MAAOtF,GACP,GAAIA,aAAiBW,GAAAA,IAAkC,MAArBX,EAAMY,WACtC,MAAM,IAAInL,EAAcuK,EAAM9K,SAEhC,MAAM8K,CACR,CACF,CAGA,aAAMgzB,CAAQvL,GACZ,MAAM,IAAI9wB,EAAoB,mDAChC,CAEA,6BAAM6kD,CACJlP,EACAE,GAEA,IACE,aAAap3C,KAAKihD,IAAIqD,YAAY,CAAEn+C,KAAM+wC,EAAYhvC,QAAS,CAAEkvC,eACnE,CAAE,MAAOxsC,GACP,GAAIA,aAAiBW,GAAAA,IAAkC,MAArBX,EAAMY,WACtC,MAAM,IAAInL,EAAcuK,EAAM9K,SAEhC,MAAM8K,CACR,CACF,CAGA,iBAAMy7C,CAAYh0B,GAChB,MAAM,IAAI9wB,EAAoB,mDAChC,CAEA,0BAAMi4C,CACJjV,EACA2S,EACAE,GAEA,IAEE,aADMp3C,KAAKihD,IAAIqE,iBAAiB,CAAE/gB,WAAU3hC,OAAQs0C,EAAYhvC,QAAS,CAAEkvC,iBACpE,CACT,CAAE,MACA,OAAO,CACT,CACF,CAGA,cAAMqC,CAASlV,EAAqClS,GAClD,MAAM,IAAI9wB,EAAoB,mDAChC,CAEA,aAAMG,GACJ,aAAc1B,KAAKihD,IAAIv/C,WAAWA,OACpC,ECpIF,MAAM4kD,IAAQC,EAAAA,GAAAA,IAAY,CACxB1sB,MAAO,CACL56B,aAAS2J,EACTxB,eAAWwB,EAEXgO,OAAOkkC,EAAAA,GAAAA,IACL,IAAIyG,GAAM,CACRT,MAAO,CACL,CAAE7gD,KAAM,UAAW8gD,SAAU,IAAI3T,GAAK,iCACtC,CAAEntC,KAAM,UAAW8gD,SAAU,IAAI3T,GAAK,kCAExC6J,WAAY,IAAI6O,GAAa,qCAInCU,UAAW,CACTC,UAAAA,CAAW5sB,EAAO56B,GAChB46B,EAAM56B,QAAUA,CAClB,EACAynD,YAAAA,CAAa7sB,EAAOzyB,GAClByyB,EAAMzyB,UAAYA,CACpB,KAIJ,WCzBAu/C,EAAAA,EAAAA,IAAUC,IAAKC,IAAIP,IAAOQ,MAAM,O,sBCH5BC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBr+C,IAAjBs+C,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUt+C,KAAKy+C,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAGpEI,EAAOD,OACf,CAGAH,EAAoBM,EAAID,E,WCzBxB,IAAIE,EAAW,GACfP,EAAoBQ,EAAI,SAASz1C,EAAQ01C,EAAUhkD,EAAIikD,GACtD,IAAGD,EAAH,CAMA,IAAIE,EAAeC,IACnB,IAAS9vB,EAAI,EAAGA,EAAIyvB,EAASv5C,OAAQ8pB,IAAK,CACrC2vB,EAAWF,EAASzvB,GAAG,GACvBr0B,EAAK8jD,EAASzvB,GAAG,GACjB4vB,EAAWH,EAASzvB,GAAG,GAE3B,IAJA,IAGI+vB,GAAY,EACPC,EAAI,EAAGA,EAAIL,EAASz5C,OAAQ85C,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAat9C,OAAOwJ,KAAKozC,EAAoBQ,GAAGO,OAAM,SAASpqD,GAAO,OAAOqpD,EAAoBQ,EAAE7pD,GAAK8pD,EAASK,GAAK,IAChKL,EAASO,OAAOF,IAAK,IAErBD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbN,EAASS,OAAOlwB,IAAK,GACrB,IAAImwB,EAAIxkD,SACEmF,IAANq/C,IAAiBl2C,EAASk2C,EAC/B,CACD,CACA,OAAOl2C,CArBP,CAJC21C,EAAWA,GAAY,EACvB,IAAI,IAAI5vB,EAAIyvB,EAASv5C,OAAQ8pB,EAAI,GAAKyvB,EAASzvB,EAAI,GAAG,GAAK4vB,EAAU5vB,IAAKyvB,EAASzvB,GAAKyvB,EAASzvB,EAAI,GACrGyvB,EAASzvB,GAAK,CAAC2vB,EAAUhkD,EAAIikD,EAwB/B,C,eC5BAV,EAAoBr1B,EAAI,SAASy1B,GAChC,IAAIvK,EAASuK,GAAUA,EAAOc,WAC7B,WAAa,OAAOd,EAAO,UAAY,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADAJ,EAAoB/0B,EAAE4qB,EAAQ,CAAE3kB,EAAG2kB,IAC5BA,CACR,C,eCNAmK,EAAoB/0B,EAAI,SAASk1B,EAASgB,GACzC,IAAI,IAAIxqD,KAAOwqD,EACXnB,EAAoBoB,EAAED,EAAYxqD,KAASqpD,EAAoBoB,EAAEjB,EAASxpD,IAC5EyM,OAAOi+C,eAAelB,EAASxpD,EAAK,CAAE2qD,YAAY,EAAMl2C,IAAK+1C,EAAWxqD,IAG3E,C,eCPAqpD,EAAoBuB,EAAI,WACvB,GAA0B,kBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOxoD,MAAQ,IAAIuV,SAAS,cAAb,EAChB,CAAE,MAAOtD,GACR,GAAsB,kBAAXpK,OAAqB,OAAOA,MACxC,CACA,CAPuB,E,eCAxBm/C,EAAoBoB,EAAI,SAASK,EAAKC,GAAQ,OAAOt+C,OAAOu2C,UAAUgI,eAAehgD,KAAK8/C,EAAKC,EAAO,C,eCCtG1B,EAAoBiB,EAAI,SAASd,GACX,qBAAXyB,QAA0BA,OAAOC,aAC1Cz+C,OAAOi+C,eAAelB,EAASyB,OAAOC,YAAa,CAAE9qD,MAAO,WAE7DqM,OAAOi+C,eAAelB,EAAS,aAAc,CAAEppD,OAAO,GACvD,C,eCDA,IAAI+qD,EAAkB,CACrB,IAAK,GAaN9B,EAAoBQ,EAAEM,EAAI,SAASiB,GAAW,OAAoC,IAA7BD,EAAgBC,EAAgB,EAGrF,IAAIC,EAAuB,SAASC,EAA4B7iD,GAC/D,IAKI6gD,EAAU8B,EALVtB,EAAWrhD,EAAK,GAChB8iD,EAAc9iD,EAAK,GACnB+iD,EAAU/iD,EAAK,GAGI0xB,EAAI,EAC3B,GAAG2vB,EAAS7M,MAAK,SAASl4C,GAAM,OAA+B,IAAxBomD,EAAgBpmD,EAAW,IAAI,CACrE,IAAIukD,KAAYiC,EACZlC,EAAoBoB,EAAEc,EAAajC,KACrCD,EAAoBM,EAAEL,GAAYiC,EAAYjC,IAGhD,GAAGkC,EAAS,IAAIp3C,EAASo3C,EAAQnC,EAClC,CAEA,IADGiC,GAA4BA,EAA2B7iD,GACrD0xB,EAAI2vB,EAASz5C,OAAQ8pB,IACzBixB,EAAUtB,EAAS3vB,GAChBkvB,EAAoBoB,EAAEU,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAO/B,EAAoBQ,EAAEz1C,EAC9B,EAEIq3C,EAAqBxhD,KAAK,oBAAsBA,KAAK,qBAAuB,GAChFwhD,EAAmB9/B,QAAQ0/B,EAAqBz3C,KAAK,KAAM,IAC3D63C,EAAmBxiD,KAAOoiD,EAAqBz3C,KAAK,KAAM63C,EAAmBxiD,KAAK2K,KAAK63C,G,IC/CvF,IAAIC,EAAsBrC,EAAoBQ,OAAE5+C,EAAW,CAAC,MAAM,WAAa,OAAOo+C,EAAoB,MAAQ,IAClHqC,EAAsBrC,EAAoBQ,EAAE6B,E","sources":["webpack://aepp/./src/App.vue","webpack://aepp/./src/Connect.vue","webpack://aepp/./src/components/ConnectFrame.vue","webpack://aepp/../../src/utils/errors.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/Browser.ts","webpack://aepp/../../src/aepp-wallet-communication/schema.ts","webpack://aepp/../../../src/aepp-wallet-communication/connection/BrowserWindowMessage.ts","webpack://aepp/../../src/aepp-wallet-communication/wallet-detector.ts","webpack://aepp/../../src/account/Base.ts","webpack://aepp/../../src/utils/other.ts","webpack://aepp/../../src/utils/encoder-types.ts","webpack://aepp/../../src/utils/encoder.ts","webpack://aepp/../../src/account/Rpc.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/types.ts","webpack://aepp/../../../src/aepp-wallet-communication/rpc/RpcClient.ts","webpack://aepp/../../src/aepp-wallet-communication/WalletConnectorFrameBase.ts","webpack://aepp/../../src/aepp-wallet-communication/WalletConnectorFrame.ts","webpack://aepp/./src/components/SelectNetwork.vue","webpack://aepp/./src/components/Value.vue","webpack://aepp/./src/components/Value.vue?9937","webpack://aepp/./src/components/SelectNetwork.vue?ecd2","webpack://aepp/./src/components/ConnectFrame.vue?5d1f","webpack://aepp/./src/components/ConnectLedger.vue","webpack://aepp/../../src/utils/crypto.ts","webpack://aepp/../../../src/tx/builder/constants.ts","webpack://aepp/../../../../src/tx/builder/field-types/ct-version.ts","webpack://aepp/../../../../src/tx/builder/field-types/abi-version.ts","webpack://aepp/../../src/utils/bytes.ts","webpack://aepp/../../../../src/tx/builder/field-types/address.ts","webpack://aepp/../../../../src/tx/builder/field-types/array.ts","webpack://aepp/../../../src/tx/builder/helpers.ts","webpack://aepp/../../../../src/tx/builder/field-types/u-int.ts","webpack://aepp/../../src/utils/bignumber.ts","webpack://aepp/../../src/utils/amount-formatter.ts","webpack://aepp/../../../../src/tx/builder/field-types/coin-amount.ts","webpack://aepp/../../../../src/tx/builder/field-types/encoded.ts","webpack://aepp/../../../../src/tx/builder/field-types/entry.ts","webpack://aepp/../../../../src/tx/builder/field-types/enumeration.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-price.ts","webpack://aepp/../../../../src/tx/builder/field-types/fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int.ts","webpack://aepp/../../../../src/tx/builder/field-types/gas-limit.ts","webpack://aepp/../../../../src/tx/builder/field-types/field.ts","webpack://aepp/../../../../src/tx/builder/field-types/name.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/name-id.ts","webpack://aepp/../../../../src/tx/builder/field-types/nonce.ts","webpack://aepp/../../../../src/tx/builder/field-types/pointers.ts","webpack://aepp/../../../../src/tx/builder/field-types/query-fee.ts","webpack://aepp/../../../../src/tx/builder/field-types/raw.ts","webpack://aepp/../../../../src/tx/builder/field-types/short-u-int-const.ts","webpack://aepp/../../../../src/tx/builder/field-types/string.ts","webpack://aepp/../../../../src/tx/builder/field-types/transaction.ts","webpack://aepp/../../src/utils/wrap-proxy.ts","webpack://aepp/../src/chain.ts","webpack://aepp/../../../../src/tx/builder/field-types/ttl.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-default.ts","webpack://aepp/../../../../src/tx/builder/field-types/with-formatting.ts","webpack://aepp/../../../../src/tx/builder/entry/constants.ts","webpack://aepp/../../../src/tx/builder/schema.ts","webpack://aepp/../../../src/tx/builder/common.ts","webpack://aepp/../../../../src/tx/builder/field-types/boolean.ts","webpack://aepp/../../../../src/tx/builder/field-types/map.ts","webpack://aepp/../../../../src/tx/builder/field-types/mptree.ts","webpack://aepp/../../../../src/tx/builder/field-types/wrapped.ts","webpack://aepp/../../../../src/tx/builder/entry/schema.ts","webpack://aepp/../../../../src/tx/builder/entry/index.ts","webpack://aepp/../../../src/tx/builder/index.ts","webpack://aepp/../../src/account/Ledger.ts","webpack://aepp/../../src/utils/semver-satisfies.ts","webpack://aepp/../../src/account/BaseFactory.ts","webpack://aepp/../../src/account/LedgerFactory.ts","webpack://aepp/./src/components/ConnectLedger.vue?1bc5","webpack://aepp/./src/components/ConnectMetamask.vue","webpack://aepp/../../src/account/Metamask.ts","webpack://aepp/../../src/account/MetamaskFactory.ts","webpack://aepp/./src/components/ConnectMetamask.vue?9f66","webpack://aepp/./src/Connect.vue?1a8f","webpack://aepp/./src/Basic.vue","webpack://aepp/./src/components/SpendCoins.vue","webpack://aepp/./src/components/SpendCoins.vue?b814","webpack://aepp/./src/components/MessageSign.vue","webpack://aepp/./src/components/FieldAction.vue","webpack://aepp/./src/components/FieldAction.vue?d339","webpack://aepp/./src/components/MessageSign.vue?1f61","webpack://aepp/./src/components/DataSign.vue","webpack://aepp/./src/components/DataSign.vue?2083","webpack://aepp/./src/Basic.vue?efb3","webpack://aepp/./src/Contracts.vue","webpack://aepp/../../src/utils/autorest.ts","webpack://aepp/../../../../src/apis/node/models/mappers.ts","webpack://aepp/../../../../src/apis/node/models/parameters.ts","webpack://aepp/../../../src/apis/node/node.ts","webpack://aepp/../src/Node.ts","webpack://aepp/../../src/tx/transaction-signer.ts","webpack://aepp/../../src/utils/typed-data.ts","webpack://aepp/../../src/account/Memory.ts","webpack://aepp/../../src/tx/execution-cost.ts","webpack://aepp/../../src/tx/validator.ts","webpack://aepp/../src/send-transaction.ts","webpack://aepp/../../src/contract/Contract.ts","webpack://aepp/./src/Contracts.vue?05c9","webpack://aepp/./src/PayForTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue","webpack://aepp/./src/components/GenerateSpendTx.vue?b650","webpack://aepp/./src/PayForTx.vue?2fdc","webpack://aepp/./src/TypedData.vue","webpack://aepp/./src/TypedData.vue?5e40","webpack://aepp/./src/DelegationSignature.vue","webpack://aepp/../../../../src/tx/builder/delegation/schema.ts","webpack://aepp/../../../../src/tx/builder/delegation/index.ts","webpack://aepp/./src/DelegationSignature.vue?67ef","webpack://aepp/./src/Jwt.vue","webpack://aepp/../../src/utils/jwt.ts","webpack://aepp/./src/Jwt.vue?1275","webpack://aepp/./src/App.vue?7ccd","webpack://aepp/../src/spend.ts","webpack://aepp/../../src/contract/ga.ts","webpack://aepp/../src/AeSdkMethods.ts","webpack://aepp/../src/AeSdkBase.ts","webpack://aepp/../src/AeSdk.ts","webpack://aepp/../../../../src/apis/compiler/models/mappers.ts","webpack://aepp/../../../../src/apis/compiler/models/parameters.ts","webpack://aepp/../../../src/apis/compiler/compiler.ts","webpack://aepp/../../../src/contract/compiler/Base.ts","webpack://aepp/../../../src/contract/compiler/Http.ts","webpack://aepp/./src/store.js","webpack://aepp/./src/main.js","webpack://aepp/webpack/bootstrap","webpack://aepp/webpack/runtime/chunk loaded","webpack://aepp/webpack/runtime/compat get default export","webpack://aepp/webpack/runtime/define property getters","webpack://aepp/webpack/runtime/global","webpack://aepp/webpack/runtime/hasOwnProperty shorthand","webpack://aepp/webpack/runtime/make namespace object","webpack://aepp/webpack/runtime/jsonp chunk loading","webpack://aepp/webpack/startup"],"sourcesContent":["<template>\n  <h2>Simple æpp</h2>\n\n  <Connect />\n\n  <div class=\"nav\">\n    <a href=\"#\" :class=\"{ active: view === 'Basic' }\" @click=\"view = 'Basic'\">\n      Basic functionality\n    </a>\n    <a href=\"#\" :class=\"{ active: view === 'Contracts' }\" @click=\"view = 'Contracts'\">\n      Smart contracts\n    </a>\n    <a href=\"#\" :class=\"{ active: view === 'PayForTx' }\" @click=\"view = 'PayForTx'\">\n      Pay for transaction\n    </a>\n    <a href=\"#\" :class=\"{ active: view === 'TypedData' }\" @click=\"view = 'TypedData'\">\n      Typed data\n    </a>\n    <a\n      href=\"#\"\n      :class=\"{ active: view === 'DelegationSignature' }\"\n      @click=\"view = 'DelegationSignature'\"\n    >\n      Delegation signature\n    </a>\n    <a href=\"#\" :class=\"{ active: view === 'Jwt' }\" @click=\"view = 'Jwt'\">JWT</a>\n  </div>\n\n  <Component v-if=\"view\" :is=\"view\" />\n</template>\n\n<script>\nimport Connect from './Connect.vue';\nimport Basic from './Basic.vue';\nimport Contracts from './Contracts.vue';\nimport PayForTx from './PayForTx.vue';\nimport TypedData from './TypedData.vue';\nimport DelegationSignature from './DelegationSignature.vue';\nimport Jwt from './Jwt.vue';\n\nexport default {\n  components: {\n    Connect,\n    Basic,\n    Contracts,\n    PayForTx,\n    TypedData,\n    DelegationSignature,\n    Jwt,\n  },\n  data: () => ({ view: '' }),\n};\n</script>\n\n<style lang=\"scss\" src=\"./styles.scss\" />\n","<template>\n  <div class=\"nav\">\n    <a href=\"#\" :class=\"{ active: view === 'Frame' }\" @click=\"view = 'Frame'\">Frame</a>\n    <a href=\"#\" :class=\"{ active: view === 'Ledger' }\" @click=\"view = 'Ledger'\">Ledger HW</a>\n    <a href=\"#\" :class=\"{ active: view === 'Metamask' }\" @click=\"view = 'Metamask'\">MetaMask</a>\n  </div>\n\n  <Component v-if=\"view\" :is=\"view\" />\n</template>\n\n<script>\nimport Frame from './components/ConnectFrame.vue';\nimport Ledger from './components/ConnectLedger.vue';\nimport Metamask from './components/ConnectMetamask.vue';\n\nexport default {\n  components: { Frame, Ledger, Metamask },\n  data: () => ({ view: 'Frame' }),\n};\n</script>\n","<template>\n  <div class=\"group\">\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"default\" />\n        Iframe or WebExtension\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"connectMethod\" type=\"radio\" value=\"reverse-iframe\" />\n        Reverse iframe\n      </label>\n      <div><input v-model=\"reverseIframeWalletUrl\" /></div>\n    </div>\n\n    <button v-if=\"walletConnected\" @click=\"disconnect\">Disconnect</button>\n    <button v-else-if=\"connectMethod\" :disabled=\"walletConnecting\" @click=\"connect\">Connect</button>\n\n    <button v-if=\"cancelWalletDetection\" @click=\"cancelWalletDetection\">Cancel detection</button>\n\n    <template v-if=\"walletConnected\">\n      <br />\n      <button @click=\"getAccounts\">Get accounts</button>\n      <button @click=\"subscribeAccounts('subscribe', 'current')\">Subscribe current</button>\n      <button @click=\"subscribeAccounts('unsubscribe', 'current')\">Unsubscribe current</button>\n      <button @click=\"subscribeAccounts('subscribe', 'connected')\">Subscribe connected</button>\n      <button @click=\"subscribeAccounts('unsubscribe', 'connected')\">Unsubscribe connected</button>\n\n      <div>\n        <div>RPC Accounts</div>\n        <div>{{ rpcAccounts.map((account) => account.address.slice(0, 8)).join(', ') }}</div>\n      </div>\n    </template>\n  </div>\n\n  <SelectNetwork :select=\"(network) => this.walletConnector.askToSelectNetwork(network)\" />\n\n  <div class=\"group\">\n    <div>\n      <div>SDK status</div>\n      <div>\n        {{\n          (walletConnected && 'Wallet connected') ||\n          (cancelWalletDetection && 'Wallet detection') ||\n          (walletConnecting && 'Wallet connecting') ||\n          'Ready to connect to wallet'\n        }}\n      </div>\n    </div>\n    <div>\n      <div>Wallet name</div>\n      <div>{{ walletName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  walletDetector,\n  BrowserWindowMessageConnection,\n  RpcConnectionDenyError,\n  RpcRejectedByUserError,\n  WalletConnectorFrame,\n} from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\nimport SelectNetwork from './SelectNetwork.vue';\n\nexport default {\n  components: { SelectNetwork },\n  data: () => ({\n    connectMethod: 'default',\n    walletConnected: false,\n    walletConnecting: null,\n    reverseIframe: null,\n    reverseIframeWalletUrl: process.env.VUE_APP_WALLET_URL ?? `http://${location.hostname}:9000`,\n    walletInfo: null,\n    cancelWalletDetection: null,\n    rpcAccounts: [],\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    walletName() {\n      if (!this.walletConnected) return 'Wallet is not connected';\n      return this.walletInfo.name;\n    },\n  },\n  methods: {\n    async getAccounts() {\n      this.rpcAccounts = await this.walletConnector.getAccounts();\n      if (this.rpcAccounts.length) this.setAccount(this.rpcAccounts[0]);\n    },\n    async subscribeAccounts(type, value) {\n      await this.walletConnector.subscribeAccounts(type, value);\n    },\n    async detectWallets() {\n      if (this.connectMethod === 'reverse-iframe') {\n        this.reverseIframe = document.createElement('iframe');\n        this.reverseIframe.src = this.reverseIframeWalletUrl;\n        this.reverseIframe.style.display = 'none';\n        document.body.appendChild(this.reverseIframe);\n      }\n      const connection = new BrowserWindowMessageConnection();\n      return new Promise((resolve, reject) => {\n        const stopDetection = walletDetector(connection, async ({ newWallet }) => {\n          if (\n            confirm(\n              `Do you want to connect to wallet ${newWallet.info.name} with id ${newWallet.info.id}`,\n            )\n          ) {\n            stopDetection();\n            resolve(newWallet.getConnection());\n            this.cancelWalletDetection = null;\n            this.walletInfo = newWallet.info;\n          }\n        });\n        this.cancelWalletDetection = () => {\n          reject(new Error('Wallet detection cancelled'));\n          stopDetection();\n          this.cancelWalletDetection = null;\n          if (this.reverseIframe) this.reverseIframe.remove();\n        };\n      });\n    },\n    async setNode(networkId) {\n      const [{ name }] = (await this.aeSdk.getNodesInPool()).filter(\n        (node) => node.nodeNetworkId === networkId,\n      );\n      this.aeSdk.selectNode(name);\n      this.$store.commit('setNetworkId', networkId);\n    },\n    setAccount(account) {\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n      this.aeSdk.addAccount(account, { select: true });\n      this.$store.commit('setAddress', account.address);\n    },\n    async connect() {\n      this.walletConnecting = true;\n      try {\n        const connection = await this.detectWallets();\n        try {\n          this.walletConnector = await WalletConnectorFrame.connect('Simple æpp', connection);\n        } catch (error) {\n          if (error instanceof RpcConnectionDenyError) connection.disconnect();\n          throw error;\n        }\n        this.walletConnector.on('disconnect', () => {\n          this.walletConnected = false;\n          this.walletInfo = null;\n          this.rpcAccounts = [];\n          this.$store.commit('setAddress', undefined);\n          if (this.reverseIframe) this.reverseIframe.remove();\n        });\n        this.walletConnected = true;\n\n        this.setNode(this.walletConnector.networkId);\n        this.walletConnector.on('networkIdChange', (networkId) => this.setNode(networkId));\n\n        this.walletConnector.on('accountsChange', (accounts) => {\n          this.rpcAccounts = accounts;\n          if (accounts.length) this.setAccount(accounts[0]);\n        });\n      } catch (error) {\n        if (\n          error.message === 'Wallet detection cancelled' ||\n          error instanceof RpcConnectionDenyError ||\n          error instanceof RpcRejectedByUserError\n        )\n          return;\n        throw error;\n      } finally {\n        this.walletConnecting = false;\n      }\n    },\n    disconnect() {\n      this.walletConnector.disconnect();\n    },\n  },\n};\n</script>\n","// eslint-disable-next-line max-classes-per-file\nimport { BigNumber } from 'bignumber.js';\nimport { AensName, Int } from '../tx/builder/constants.js';\nimport * as Encoded from './encoder-types.js';\n\n/**\n * aepp-sdk originated error\n * @category exception\n */\nexport abstract class BaseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'BaseError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AccountError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AensError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AeppError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AeppError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CompilerError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CompilerError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ContractError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class CryptographyError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CryptographyError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TransactionError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class WalletError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'WalletError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentError extends BaseError {\n  constructor(argumentName: string, requirement: unknown, argumentValue: unknown) {\n    super(`${argumentName} should be ${requirement}, got ${argumentValue} instead`);\n    this.name = 'ArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalArgumentError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalArgumentError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ArgumentCountMismatchError extends BaseError {\n  constructor(functionName: string, requiredCount: number, providedCount: number) {\n    super(`${functionName} expects ${requiredCount} arguments, got ${providedCount} instead`);\n    this.name = 'ArgumentCountMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientBalanceError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InsufficientBalanceError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingParamError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingParamError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSerializerFoundError extends BaseError {\n  constructor() {\n    super('Byte serialization not supported');\n    this.name = 'NoSerializerFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RequestTimedOutError extends BaseError {\n  constructor(height: number) {\n    super(`Giving up at height ${height}`);\n    this.name = 'RequestTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxTimedOutError extends BaseError {\n  constructor(blocks: number, th: Encoded.TxHash) {\n    super(`Giving up after ${blocks} blocks mined, transaction hash: ${th}`);\n    this.name = 'TxTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TypeError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TypeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedPlatformError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedPlatformError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedProtocolError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnsupportedProtocolError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotImplementedError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NotImplementedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsupportedVersionError extends BaseError {\n  constructor(dependency: string, version: string, geVersion: string, ltVersion?: string) {\n    super(\n      `Unsupported ${dependency} version ${version}. Supported: >= ${geVersion}` +\n        (ltVersion == null ? '' : ` < ${ltVersion}`),\n    );\n    this.name = 'UnsupportedVersionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class LogicError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'LogicError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InternalError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedTsError extends InternalError {\n  constructor(message = 'Expected to not happen, required for TS') {\n    super(message);\n    this.name = 'UnexpectedTsError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnavailableAccountError extends AccountError {\n  constructor(address: Encoded.AccountAddress) {\n    super(`Account for ${address} not available`);\n    this.name = 'UnavailableAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AensPointerContextError extends AensError {\n  constructor(nameOrId: AensName | Encoded.Name, prefix: string) {\n    super(`Name ${nameOrId} don't have pointers for ${prefix}`);\n    this.name = 'AensPointerContextError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InsufficientNameFeeError extends AensError {\n  constructor(nameFee: BigNumber, minNameFee: BigNumber) {\n    super(\n      `the provided fee ${nameFee.toString()} is not enough to execute the claim, required: ${minNameFee.toString()}`,\n    );\n    this.name = 'InsufficientNameFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAensNameError extends AensError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAensNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidRpcMessageError extends AeppError {\n  constructor(message: string) {\n    super(`Received invalid message: ${message}`);\n    this.name = 'InvalidRpcMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingCallbackError extends AeppError {\n  constructor(id: number) {\n    super(`Can't find callback for this messageId ${id}`);\n    this.name = 'MissingCallbackError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnAuthorizedAccountError extends AeppError {\n  constructor(onAccount: Encoded.AccountAddress) {\n    super(`You do not have access to account ${onAccount}`);\n    this.name = 'UnAuthorizedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownRpcClientError extends AeppError {\n  constructor(id: string) {\n    super(`RpcClient with id ${id} do not exist`);\n    this.name = 'UnknownRpcClientError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnsubscribedAccountError extends AeppError {\n  constructor() {\n    super('You are not subscribed for an account.');\n    this.name = 'UnsubscribedAccountError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelCallError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelCallError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelConnectionError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ChannelConnectionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelPingTimedOutError extends ChannelError {\n  constructor() {\n    super('Server pong timed out');\n    this.name = 'ChannelPingTimedOutError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnexpectedChannelMessageError extends ChannelError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedChannelMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class ChannelIncomingMessageError extends ChannelError {\n  handlerError: Error;\n\n  incomingMessage: { [key: string]: any };\n\n  constructor(handlerError: Error, incomingMessage: { [key: string]: any }) {\n    super(handlerError.message);\n    this.handlerError = handlerError;\n    this.incomingMessage = incomingMessage;\n    this.name = 'ChannelIncomingMessageError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownChannelStateError extends ChannelError {\n  constructor() {\n    super('State Channels FSM entered unknown state');\n    this.name = 'UnknownChannelStateError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidAuthDataError extends CompilerError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidAuthDataError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class BytecodeMismatchError extends ContractError {\n  constructor(source: 'source code' | 'bytecode') {\n    super(`Contract ${source} do not correspond to the bytecode deployed on the chain`);\n    this.name = 'BytecodeMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateContractError extends ContractError {\n  constructor() {\n    super('Contract already deployed');\n    this.name = 'DuplicateContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InactiveContractError extends ContractError {\n  constructor(contractAddress: Encoded.ContractAddress) {\n    super(`Contract with address ${contractAddress} not active`);\n    this.name = 'InactiveContractError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidMethodInvocationError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidMethodInvocationError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractAddressError extends ContractError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingContractAddressError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingContractDefError extends ContractError {\n  constructor() {\n    super('Either ACI or sourceCode or sourceCodePath is required');\n    this.name = 'MissingContractDefError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingFunctionNameError extends ContractError {\n  constructor() {\n    super('Function name is required');\n    this.name = 'MissingFunctionNameError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeInvocationError extends ContractError {\n  transaction?: Encoded.Transaction;\n\n  constructor(message: string, transaction?: Encoded.Transaction) {\n    super(`Invocation failed${message == null ? '' : `: \"${message}\"`}`);\n    this.name = 'NodeInvocationError';\n    this.transaction = transaction;\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoSuchContractFunctionError extends ContractError {\n  constructor(name: string) {\n    super(`Function ${name} doesn't exist in contract`);\n    this.name = 'NoSuchContractFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NotPayableFunctionError extends ContractError {\n  constructor(amount: Int, fn: string) {\n    super(\n      `You try to pay \"${amount}\" to function \"${fn}\" which is not payable. ` +\n        'Only payable function can accept coins',\n    );\n    this.name = 'NotPayableFunctionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingEventDefinitionError extends ContractError {\n  constructor(eventNameHash: string, eventAddress: Encoded.ContractAddress) {\n    super(\n      `Can't find definition of ${eventNameHash} event emitted by ${eventAddress}` +\n        ' (use omitUnknown option to ignore events like this)',\n    );\n    this.name = 'MissingEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AmbiguousEventDefinitionError extends ContractError {\n  constructor(eventAddress: Encoded.ContractAddress, matchedEvents: Array<[string, string]>) {\n    super(\n      `Found multiple definitions of \"${matchedEvents[0][1]}\" event with different types emitted by` +\n        ` ${eventAddress} in ${matchedEvents.map(([name]) => `\"${name}\"`).join(', ')} contracts` +\n        ' (use contractAddressToName option to specify contract name corresponding to address)',\n    );\n    this.name = 'AmbiguousEventDefinitionError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidChecksumError extends CryptographyError {\n  constructor() {\n    super('Invalid checksum');\n    this.name = 'InvalidChecksumError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MerkleTreeHashMismatchError extends CryptographyError {\n  constructor() {\n    super('Node hash is not equal to provided one');\n    this.name = 'MerkleTreeHashMismatchError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class MissingNodeInTreeError extends CryptographyError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MissingNodeInTreeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownNodeLengthError extends CryptographyError {\n  constructor(nodeLength: number) {\n    super(`Unknown node length: ${nodeLength}`);\n    this.name = 'UnknownNodeLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class UnknownPathNibbleError extends CryptographyError {\n  constructor(nibble: number) {\n    super(`Unknown path nibble: ${nibble}`);\n    this.name = 'UnknownPathNibbleError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DuplicateNodeError extends NodeError {\n  constructor(name: string) {\n    super(`Node with name ${name} already exist`);\n    this.name = 'DuplicateNodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NodeNotFoundError extends NodeError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NodeNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DecodeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PayloadLengthError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'PayloadLengthError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class DryRunError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'DryRunError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class IllegalBidFeeError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'IllegalBidFeeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class InvalidSignatureError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidSignatureError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class PrefixNotFoundError extends TransactionError {\n  constructor(tag: number) {\n    super(`Prefix for id-tag ${tag} not found.`);\n    this.name = 'PrefixNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class SchemaNotFoundError extends TransactionError {\n  constructor(key: string, version: number) {\n    super(`Transaction schema not implemented for tag ${key} version ${version}`);\n    this.name = 'SchemaNotFoundError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TagNotFoundError extends TransactionError {\n  constructor(prefix: string) {\n    super(`Id tag for prefix ${prefix} not found.`);\n    this.name = 'DecodeError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class TxNotInChainError extends TransactionError {\n  constructor(txHash: Encoded.TxHash) {\n    super(`Transaction ${txHash} is removed from chain`);\n    this.name = 'TxNotInChainError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class AlreadyConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class NoWalletConnectedError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoWalletConnectedError';\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcConnectionError extends WalletError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'RpcConnectionError';\n  }\n}\n","import { AlreadyConnectedError, NoWalletConnectedError } from '../../utils/errors.js';\n\n/**\n * Browser connection base interface\n * @category aepp wallet communication\n */\nexport default abstract class BrowserConnection {\n  debug: boolean;\n\n  protected constructor({ debug = false }: { debug?: boolean }) {\n    this.debug = debug;\n  }\n\n  /**\n   * Connect\n   * @param onMessage - Message handler\n   * @param onDisconnect - trigger when runtime connection in closed\n   */\n  connect(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onMessage: (message: any, origin: string, source: any) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onDisconnect: () => void,\n  ): void {\n    if (this.isConnected()) throw new AlreadyConnectedError('You already connected');\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect(): void {\n    if (!this.isConnected())\n      throw new NoWalletConnectedError('You dont have connection. Please connect before');\n  }\n\n  /**\n   * Receive message\n   */\n  protected receiveMessage(message: any): void {\n    if (this.debug) console.log('Receive message:', message);\n  }\n\n  /**\n   * Send message\n   */\n  sendMessage(message: any): void {\n    if (this.debug) console.log('Send message:', message);\n  }\n\n  /**\n   * Check if connected\n   * @returns Is connected\n   */\n  abstract isConnected(): boolean;\n}\n","// eslint-disable-next-line max-classes-per-file\nimport { Encoded } from '../utils/encoder.js';\nimport { BaseError, InternalError } from '../utils/errors.js';\n\n/**\n * @category aepp wallet communication\n */\nexport const enum MESSAGE_DIRECTION {\n  to_waellet = 'to_waellet',\n  to_aepp = 'to_aepp',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum WALLET_TYPE {\n  window = 'window',\n  extension = 'extension',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum SUBSCRIPTION_TYPES {\n  subscribe = 'subscribe',\n  unsubscribe = 'unsubscribe',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum METHODS {\n  readyToConnect = 'connection.announcePresence',\n  updateAddress = 'address.update',\n  address = 'address.get',\n  connect = 'connection.open',\n  unsafeSign = 'data.unsafeSign',\n  sign = 'transaction.sign',\n  signMessage = 'message.sign',\n  signTypedData = 'typedData.sign',\n  signDelegation = 'delegation.sign',\n  subscribeAddress = 'address.subscribe',\n  updateNetwork = 'networkId.update',\n  closeConnection = 'connection.close',\n}\n\n/**\n * @category aepp wallet communication\n */\nexport const enum RPC_STATUS {\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  WAITING_FOR_CONNECTION_REQUEST = 'WAITING_FOR_CONNECTION_REQUEST',\n}\n\ninterface RpcErrorAsJson {\n  code: number;\n  message: string;\n  data?: any;\n}\n\nconst rpcErrors: Array<(new (data?: any) => RpcError) & { code: number }> = [];\n\n/**\n * @category exception\n */\nexport abstract class RpcError extends BaseError {\n  static code: number;\n\n  code!: number;\n\n  data?: any;\n\n  toJSON(): RpcErrorAsJson {\n    return {\n      code: this.code,\n      message: this.message,\n      data: this.data,\n    };\n  }\n\n  static deserialize(json: RpcErrorAsJson): RpcError {\n    const RpcErr = rpcErrors.find((cl) => cl.code === json.code);\n    if (RpcErr == null) throw new InternalError(`Can't find RpcError with code: ${json.code}`);\n    return new RpcErr(json.data);\n  }\n}\n\n/**\n * @category exception\n */\nexport class RpcInvalidTransactionError extends RpcError {\n  static override code = 2;\n\n  override code = 2;\n\n  constructor(data?: any) {\n    super('Invalid transaction');\n    this.data = data;\n    this.name = 'RpcInvalidTransactionError';\n  }\n}\nrpcErrors.push(RpcInvalidTransactionError);\n\n/**\n * @category exception\n */\nexport class RpcRejectedByUserError extends RpcError {\n  static override code = 4;\n\n  override code = 4;\n\n  constructor(data?: any) {\n    super('Operation rejected by user');\n    this.data = data;\n    this.name = 'RpcRejectedByUserError';\n  }\n}\nrpcErrors.push(RpcRejectedByUserError);\n\n/**\n * @category exception\n */\nexport class RpcUnsupportedProtocolError extends RpcError {\n  static override code = 5;\n\n  override code = 5;\n\n  constructor() {\n    super('Unsupported Protocol Version');\n    this.name = 'RpcUnsupportedProtocolError';\n  }\n}\nrpcErrors.push(RpcUnsupportedProtocolError);\n\n/**\n * @category exception\n */\nexport class RpcConnectionDenyError extends RpcError {\n  static override code = 9;\n\n  override code = 9;\n\n  constructor(data?: any) {\n    super('Wallet deny your connection request');\n    this.data = data;\n    this.name = 'RpcConnectionDenyError';\n  }\n}\nrpcErrors.push(RpcConnectionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcNotAuthorizeError extends RpcError {\n  static override code = 10;\n\n  override code = 10;\n\n  constructor() {\n    super('You are not connected to the wallet');\n    this.name = 'RpcNotAuthorizeError';\n  }\n}\nrpcErrors.push(RpcNotAuthorizeError);\n\n/**\n * @category exception\n */\nexport class RpcPermissionDenyError extends RpcError {\n  static override code = 11;\n\n  override code = 11;\n\n  constructor(address: Encoded.AccountAddress) {\n    super(`You are not subscribed for account ${address}`);\n    this.data = address;\n    this.name = 'RpcPermissionDenyError';\n  }\n}\nrpcErrors.push(RpcPermissionDenyError);\n\n/**\n * @category exception\n */\nexport class RpcInternalError extends RpcError {\n  static override code = 12;\n\n  override code = 12;\n\n  constructor() {\n    super('The peer failed to execute your request due to unknown error');\n    this.name = 'RpcInternalError';\n  }\n}\nrpcErrors.push(RpcInternalError);\n\n/**\n * @category exception\n */\nexport class RpcNoNetworkById extends RpcError {\n  static override code = 13;\n\n  override code = 13;\n\n  constructor(networkId: string) {\n    super(`Wallet can't find a network by id \"${networkId}\"`);\n    this.data = networkId;\n    this.name = 'RpcNoNetworkById';\n  }\n}\nrpcErrors.push(RpcNoNetworkById);\n\n/**\n * @category exception\n */\nexport class RpcMethodNotFoundError extends RpcError {\n  static override code = -32601;\n\n  override code = -32601;\n\n  constructor() {\n    super('Method not found');\n    this.name = 'RpcMethodNotFoundError';\n  }\n}\nrpcErrors.push(RpcMethodNotFoundError);\n","import BrowserConnection from './Browser.js';\nimport { MESSAGE_DIRECTION } from '../schema.js';\nimport { InternalError, RpcConnectionError } from '../../utils/errors.js';\n\nexport type ImplPostMessage = Pick<\n  Window,\n  'addEventListener' | 'removeEventListener' | 'postMessage'\n>;\n\n/**\n * Browser window Post Message connector module\n * @category aepp wallet communication\n */\nexport default class BrowserWindowMessageConnection extends BrowserConnection {\n  origin?: string;\n\n  sendDirection?: MESSAGE_DIRECTION;\n\n  receiveDirection: MESSAGE_DIRECTION;\n\n  listener?: (this: Window, ev: MessageEvent<any>) => void;\n\n  #onDisconnect?: () => void;\n\n  readonly #target?: ImplPostMessage;\n\n  readonly #self: ImplPostMessage;\n\n  /**\n   * @param options - Options\n   * @param options.target Target window for message\n   * @param options.self Host window for message\n   * @param options.origin Origin of receiver\n   * @param options.sendDirection Wrapping messages into additional struct\n   * `({ type: 'to_aepp' || 'to_waellet', data })`\n   * Used for handling messages between content script and page\n   * @param options.receiveDirection Unwrapping messages from additional struct\n   */\n  constructor({\n    target,\n    self = window,\n    origin,\n    sendDirection,\n    receiveDirection = MESSAGE_DIRECTION.to_aepp,\n    ...options\n  }: {\n    target?: ImplPostMessage;\n    self?: ImplPostMessage;\n    origin?: string;\n    sendDirection?: MESSAGE_DIRECTION;\n    receiveDirection?: MESSAGE_DIRECTION;\n    debug?: boolean;\n  } = {}) {\n    super(options);\n    this.#target = target;\n    this.#self = self;\n    this.origin = origin;\n    this.sendDirection = sendDirection;\n    this.receiveDirection = receiveDirection;\n  }\n\n  isConnected(): boolean {\n    return this.listener != null;\n  }\n\n  override connect(\n    onMessage: (message: any, origin: string, source: MessageEventSource | null) => void,\n    onDisconnect: () => void,\n  ): void {\n    super.connect(onMessage, onDisconnect);\n    this.listener = (message: MessageEvent<any>) => {\n      // TODO: strict validate origin and source instead of checking message structure\n      if (\n        typeof message.data !== 'object' ||\n        (message.data.jsonrpc ?? message.data.data?.jsonrpc) !== '2.0'\n      )\n        return;\n      if (this.origin != null && this.origin !== message.origin) return;\n      if (this.#target != null && this.#target !== message.source) return;\n      this.receiveMessage(message);\n      let { data } = message;\n      if (data.type != null) {\n        if (message.data.type !== this.receiveDirection) return;\n        data = data.data;\n      }\n      onMessage(data, message.origin, message.source);\n    };\n    this.#self.addEventListener('message', this.listener);\n    this.#onDisconnect = onDisconnect;\n  }\n\n  override disconnect(): void {\n    super.disconnect();\n    if (this.listener == null || this.#onDisconnect == null) {\n      throw new InternalError('Expected to not happen, required for TS');\n    }\n    this.#self.removeEventListener('message', this.listener);\n    delete this.listener;\n    this.#onDisconnect();\n    this.#onDisconnect = undefined;\n  }\n\n  override sendMessage(msg: any): void {\n    if (this.#target == null) throw new RpcConnectionError(\"Can't send messages without target\");\n    const message = this.sendDirection != null ? { type: this.sendDirection, data: msg } : msg;\n    super.sendMessage(message);\n    this.#target.postMessage(message, this.origin ?? '*');\n  }\n}\n","import BrowserConnection from './connection/Browser.js';\nimport BrowserWindowMessageConnection from './connection/BrowserWindowMessage.js';\nimport { MESSAGE_DIRECTION, METHODS } from './schema.js';\nimport { WalletInfo } from './rpc/types.js';\nimport { UnsupportedPlatformError } from '../utils/errors.js';\n\ninterface Wallet {\n  info: WalletInfo;\n  getConnection: () => BrowserWindowMessageConnection;\n}\ninterface Wallets {\n  [key: string]: Wallet;\n}\n\n/**\n * A function to detect available wallets\n * @category aepp wallet communication\n * @param connection - connection to use to detect wallets\n * @param onDetected - call-back function which trigger on new wallet\n * @returns a function to stop scanning\n */\nexport default (\n  connection: BrowserConnection,\n  onDetected: ({ wallets, newWallet }: { wallets: Wallets; newWallet: Wallet }) => void,\n): (() => void) => {\n  if (window == null)\n    throw new UnsupportedPlatformError(\n      'Window object not found, you can run wallet detector only in browser',\n    );\n  const wallets: Wallets = {};\n\n  connection.connect(\n    (\n      { method, params }: { method: string; params: WalletInfo },\n      origin: string,\n      source: Window,\n    ) => {\n      if (method !== METHODS.readyToConnect || wallets[params.id] != null) return;\n\n      const wallet = {\n        info: params,\n        getConnection() {\n          return new BrowserWindowMessageConnection({\n            target: source,\n            ...(params.type === 'extension'\n              ? {\n                  sendDirection: MESSAGE_DIRECTION.to_waellet,\n                  receiveDirection: MESSAGE_DIRECTION.to_aepp,\n                  ...(window.origin !== 'null' && { origin: window.origin }),\n                }\n              : {\n                  origin: params.origin,\n                }),\n          });\n        },\n      };\n      wallets[wallet.info.id] = wallet;\n      onDetected({ wallets, newWallet: wallet });\n    },\n    () => {},\n  );\n\n  return () => connection.disconnect();\n};\n","import { Encoded } from '../utils/encoder.js';\nimport Node from '../Node.js';\nimport CompilerBase from '../contract/compiler/Base.js';\nimport { Int } from '../tx/builder/constants.js';\nimport { AciValue, Domain } from '../utils/typed-data.js';\n\ninterface AuthData {\n  fee?: Int;\n  gasLimit?: number;\n  gasPrice?: Int;\n  callData?: Encoded.ContractBytearray;\n  sourceCode?: string;\n  args?: any[];\n}\n\n/**\n * Account is one of the three basic building blocks of an\n * {@link AeSdk} and provides access to a signing key pair.\n */\nexport default abstract class AccountBase {\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   * @param options.innerTx - Sign as inner transaction for PayingFor\n   * @param options.authData - Object with gaMeta params\n   * @returns Signed transaction\n   */\n  abstract signTransaction(\n    tx: Encoded.Transaction,\n    options: {\n      innerTx?: boolean;\n      networkId?: string;\n      authData?: AuthData | ((tx: Encoded.Transaction) => Promise<AuthData>);\n      onNode?: Node;\n      onCompiler?: CompilerBase;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Transaction>;\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signMessage(\n    message: string,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    options?: Domain & {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n\n  /**\n   * Sign data blob\n   * @param data - Data blob to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract sign(\n    data: string | Uint8Array,\n    options?: {\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Uint8Array>;\n\n  /**\n   * Account address\n   */\n  readonly address!: Encoded.AccountAddress;\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   * @returns Signature\n   */\n  abstract signDelegation(\n    delegation: Encoded.Bytearray,\n    options?: {\n      networkId?: string;\n      aeppOrigin?: string;\n      aeppRpcClientId?: string;\n    },\n  ): Promise<Encoded.Signature>;\n}\n","import { RestError } from '@azure/core-rest-pipeline';\n\nexport const pause = async (duration: number): Promise<void> =>\n  new Promise((resolve) => {\n    setTimeout(resolve, duration);\n  });\n\nexport const mapObject = <InputV, OutputV>(\n  object: { [k: string]: InputV },\n  fn: (\n    value: [string, InputV],\n    index: number,\n    array: Array<[string, InputV]>,\n  ) => [number | string, OutputV],\n): { [k: string]: OutputV } => Object.fromEntries(Object.entries(object).map(fn));\n\n// remove after dropping webpack4 support\nconst isWebpack4Buffer = (() => {\n  try {\n    Buffer.concat([Uint8Array.from([])]);\n    return false;\n  } catch (error) {\n    return true;\n  }\n})();\n\nexport const concatBuffers = isWebpack4Buffer\n  ? (list: readonly Uint8Array[], totalLength?: number): Buffer =>\n      Buffer.concat(\n        list.map((el) => Buffer.from(el)),\n        totalLength,\n      )\n  : Buffer.concat;\n\n/**\n * Object key type guard\n * @param key - Maybe object key\n * @param object - Object\n */\nexport function isKeyOfObject<T extends object>(\n  key: string | number | symbol,\n  object: T,\n): key is keyof T {\n  return key in object;\n}\n\n/**\n * Array item type guard\n * @param item - Maybe array item\n * @param array - Array\n */\nexport function isItemOfArray<T>(item: any, array: readonly T[]): item is T {\n  return array.includes(item);\n}\n\nexport function isAccountNotFoundError(error: Error): boolean {\n  return (\n    error instanceof RestError &&\n    error.statusCode === 404 &&\n    error.message.includes('Account not found')\n  );\n}\n\n// based on https://stackoverflow.com/a/50375286\nexport type UnionToIntersection<Union> = (Union extends any ? (k: Union) => void : never) extends (\n  k: infer Intersection,\n) => void\n  ? Intersection\n  : never;\n\n// based on https://stackoverflow.com/a/61108377\nexport type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\nexport function ensureError(error: unknown): asserts error is Error {\n  if (error instanceof Error) return;\n  throw error;\n}\n","/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/master/node/api/api_encoding.md}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L205-L230}\n */\nexport enum Encoding {\n  KeyBlockHash = 'kh',\n  MicroBlockHash = 'mh',\n  BlockPofHash = 'bf',\n  BlockTxHash = 'bx',\n  BlockStateHash = 'bs',\n  Channel = 'ch',\n  ContractAddress = 'ct',\n  ContractBytearray = 'cb',\n  ContractStoreKey = 'ck',\n  ContractStoreValue = 'cv',\n  Transaction = 'tx',\n  TxHash = 'th',\n  OracleAddress = 'ok',\n  OracleQuery = 'ov',\n  OracleQueryId = 'oq',\n  OracleResponse = 'or',\n  AccountAddress = 'ak',\n  AccountSecretKey = 'sk',\n  Signature = 'sg',\n  Commitment = 'cm',\n  PeerPubkey = 'pp',\n  Name = 'nm',\n  State = 'st',\n  Poi = 'pi',\n  StateTrees = 'ss',\n  CallStateTree = 'cs',\n  Bytearray = 'ba',\n}\n\nexport type KeyBlockHash = `${Encoding.KeyBlockHash}_${string}`;\nexport type MicroBlockHash = `${Encoding.MicroBlockHash}_${string}`;\nexport type BlockPofHash = `${Encoding.BlockPofHash}_${string}`;\nexport type BlockTxHash = `${Encoding.BlockTxHash}_${string}`;\nexport type BlockStateHash = `${Encoding.BlockStateHash}_${string}`;\nexport type Channel = `${Encoding.Channel}_${string}`;\nexport type ContractAddress = `${Encoding.ContractAddress}_${string}`;\nexport type ContractBytearray = `${Encoding.ContractBytearray}_${string}`;\nexport type ContractStoreKey = `${Encoding.ContractStoreKey}_${string}`;\nexport type ContractStoreValue = `${Encoding.ContractStoreValue}_${string}`;\nexport type Transaction = `${Encoding.Transaction}_${string}`;\nexport type TxHash = `${Encoding.TxHash}_${string}`;\nexport type OracleAddress = `${Encoding.OracleAddress}_${string}`;\nexport type OracleQuery = `${Encoding.OracleQuery}_${string}`;\nexport type OracleQueryId = `${Encoding.OracleQueryId}_${string}`;\nexport type OracleResponse = `${Encoding.OracleResponse}_${string}`;\nexport type AccountAddress = `${Encoding.AccountAddress}_${string}`;\nexport type AccountSecretKey = `${Encoding.AccountSecretKey}_${string}`;\nexport type Signature = `${Encoding.Signature}_${string}`;\nexport type Commitment = `${Encoding.Commitment}_${string}`;\nexport type PeerPubkey = `${Encoding.PeerPubkey}_${string}`;\nexport type Name = `${Encoding.Name}_${string}`;\nexport type State = `${Encoding.State}_${string}`;\nexport type Poi = `${Encoding.Poi}_${string}`;\nexport type StateTrees = `${Encoding.StateTrees}_${string}`;\nexport type CallStateTree = `${Encoding.CallStateTree}_${string}`;\nexport type Bytearray = `${Encoding.Bytearray}_${string}`;\n\nexport type Generic<Type extends Encoding> = `${Type}_${string}`;\nexport type Any = `${Encoding}_${string}`;\n","import bs58 from 'bs58';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport Sha256 from 'sha.js/sha256.js';\nimport { DecodeError, ArgumentError, InvalidChecksumError, PayloadLengthError } from './errors.js';\nimport { concatBuffers, isKeyOfObject } from './other.js';\nimport * as Encoded from './encoder-types.js';\nimport { Encoding } from './encoder-types.js';\n\nexport { Encoded, Encoding };\n\n/**\n * Calculate SHA256 hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function sha256hash(input: Uint8Array | string): Buffer {\n  return new Sha256().update(input).digest();\n}\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L177-L202}\n */\nconst base64Types = [\n  Encoding.ContractBytearray,\n  Encoding.ContractStoreKey,\n  Encoding.ContractStoreValue,\n  Encoding.Transaction,\n  Encoding.OracleQuery,\n  Encoding.OracleResponse,\n  Encoding.State,\n  Encoding.Poi,\n  Encoding.StateTrees,\n  Encoding.CallStateTree,\n  Encoding.Bytearray,\n] as const;\nconst base58Types = [\n  Encoding.KeyBlockHash,\n  Encoding.MicroBlockHash,\n  Encoding.BlockPofHash,\n  Encoding.BlockTxHash,\n  Encoding.BlockStateHash,\n  Encoding.Channel,\n  Encoding.ContractAddress,\n  Encoding.TxHash,\n  Encoding.OracleAddress,\n  Encoding.OracleQueryId,\n  Encoding.AccountAddress,\n  Encoding.AccountSecretKey,\n  Encoding.Signature,\n  Encoding.Commitment,\n  Encoding.PeerPubkey,\n  Encoding.Name,\n] as const;\n\n/**\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L261-L286}\n */\nconst byteSizeForType = {\n  [Encoding.KeyBlockHash]: 32,\n  [Encoding.MicroBlockHash]: 32,\n  [Encoding.BlockPofHash]: 32,\n  [Encoding.BlockTxHash]: 32,\n  [Encoding.BlockStateHash]: 32,\n  [Encoding.Channel]: 32,\n  [Encoding.ContractAddress]: 32,\n  [Encoding.TxHash]: 32,\n  [Encoding.OracleAddress]: 32,\n  [Encoding.OracleQueryId]: 32,\n  [Encoding.AccountAddress]: 32,\n  [Encoding.AccountSecretKey]: 32,\n  [Encoding.Signature]: 64,\n  [Encoding.Commitment]: 32,\n  [Encoding.PeerPubkey]: 32,\n  [Encoding.State]: 32,\n} as const;\n\nfunction ensureValidLength(data: Uint8Array, type: Encoding): void {\n  if (!isKeyOfObject(type, byteSizeForType)) return;\n  const reqLen = byteSizeForType[type];\n  if (reqLen == null || data.length === reqLen) return;\n  throw new PayloadLengthError(`Payload should be ${reqLen} bytes, got ${data.length} instead`);\n}\n\nconst getChecksum = (payload: Uint8Array): Buffer => sha256hash(sha256hash(payload)).slice(0, 4);\n\nconst addChecksum = (payload: Uint8Array): Buffer => concatBuffers([payload, getChecksum(payload)]);\n\nfunction getPayload(buffer: Buffer): Buffer {\n  const payload = buffer.slice(0, -4);\n  if (!getChecksum(payload).equals(buffer.slice(-4))) throw new InvalidChecksumError();\n  return payload;\n}\n\nconst base64 = {\n  encode: (buffer: Uint8Array) => addChecksum(buffer).toString('base64'),\n  decode: (string: string) => getPayload(Buffer.from(string, 'base64')),\n};\n\nconst base58 = {\n  encode: (buffer: Uint8Array) => bs58.encode(addChecksum(buffer)),\n  decode: (string: string) => getPayload(Buffer.from(bs58.decode(string))),\n};\n\nconst parseType = (maybeType: unknown): [Encoding, typeof base64] => {\n  const base64Type = base64Types.find((t) => t === maybeType);\n  if (base64Type != null) return [base64Type, base64];\n  const base58Type = base58Types.find((t) => t === maybeType);\n  if (base58Type != null) return [base58Type, base58];\n  throw new ArgumentError(\n    'prefix',\n    `one of ${[...base58Types, ...base64Types].join(', ')}`,\n    maybeType,\n  );\n};\n\n/**\n * Decode data using the default encoding/decoding algorithm\n * @param data - An Base58/64check encoded and prefixed string\n * (ex tx_..., sg_..., ak_....)\n * @returns Decoded data\n */\nexport function decode(data: Encoded.Any): Buffer {\n  const [prefix, encodedPayload, extra] = data.split('_');\n  if (encodedPayload == null) throw new DecodeError(`Encoded string missing payload: ${data}`);\n  if (extra != null) throw new DecodeError(`Encoded string have extra parts: ${data}`);\n  const [type, encoder] = parseType(prefix);\n  const payload = encoder.decode(encodedPayload);\n  ensureValidLength(payload, type);\n  return payload;\n}\n\n/**\n * Encode data using the default encoding/decoding algorithm\n * @param data - An decoded data\n * @param type - Prefix of Transaction\n * @returns Encoded string Base58check or Base64check data\n */\nexport function encode<Type extends Encoding>(data: Uint8Array, type: Type): Encoded.Generic<Type> {\n  const [, encoder] = parseType(type);\n  ensureValidLength(data, type);\n  return `${type}_${encoder.encode(data)}`;\n}\n","import AccountBase from './Base.js';\nimport { METHODS } from '../aepp-wallet-communication/schema.js';\nimport { ArgumentError, UnsupportedProtocolError } from '../utils/errors.js';\nimport { Encoded, Encoding, decode, encode } from '../utils/encoder.js';\nimport RpcClient from '../aepp-wallet-communication/rpc/RpcClient.js';\nimport { AeppApi, WalletApi } from '../aepp-wallet-communication/rpc/types.js';\n\n/**\n * Account provided by wallet\n * @param params - Params\n * @param params.rpcClient - RpcClient instance\n * @param params.address - RPC account address\n * @returns AccountRpc instance\n */\nexport default class AccountRpc extends AccountBase {\n  _rpcClient: RpcClient<WalletApi, AeppApi>;\n\n  override readonly address: Encoded.AccountAddress;\n\n  constructor(rpcClient: RpcClient<WalletApi, AeppApi>, address: Encoded.AccountAddress) {\n    super();\n    this._rpcClient = rpcClient;\n    this.address = address;\n  }\n\n  async sign(dataRaw: string | Uint8Array): Promise<Uint8Array> {\n    const data = encode(Buffer.from(dataRaw), Encoding.Bytearray);\n    const { signature } = await this._rpcClient.request(METHODS.unsafeSign, {\n      onAccount: this.address,\n      data,\n    });\n    return decode(signature);\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const res = await this._rpcClient.request(METHODS.sign, {\n      onAccount: this.address,\n      tx,\n      returnSigned: true,\n      networkId,\n      innerTx,\n    });\n    if (res.signedTransaction == null) {\n      throw new UnsupportedProtocolError('signedTransaction is missed in wallet response');\n    }\n    return res.signedTransaction;\n  }\n\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const { signature } = await this._rpcClient.request(METHODS.signMessage, {\n      onAccount: this.address,\n      message,\n    });\n    return Buffer.from(signature, 'hex');\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    { name, version, contractAddress, networkId }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signTypedData, {\n      onAccount: this.address,\n      domain: {\n        name,\n        version,\n        networkId,\n        contractAddress,\n      },\n      aci,\n      data,\n    });\n    return signature;\n  }\n\n  override async signDelegation(delegation: Encoded.Bytearray): Promise<Encoded.Signature> {\n    const { signature } = await this._rpcClient.request(METHODS.signDelegation, {\n      delegation,\n      onAccount: this.address,\n    });\n    return signature;\n  }\n}\n","import { Encoded } from '../../utils/encoder.js';\nimport { Domain, AciValue } from '../../utils/typed-data.js';\nimport { METHODS, SUBSCRIPTION_TYPES, WALLET_TYPE } from '../schema.js';\nimport { SignedTx } from '../../apis/node/index.js';\n\nexport interface WalletInfo {\n  id: string;\n  name: string;\n  networkId: string;\n  origin: string; // TODO: origin needs to be provided by transport\n  type: WALLET_TYPE;\n}\n\nexport interface Accounts {\n  connected: { [pub: Encoded.AccountAddress]: {} };\n  current: { [pub: Encoded.AccountAddress]: {} };\n}\n\nexport interface Node {\n  // TODO: name is not used, can be removed\n  name: string;\n  url: string;\n}\n\nexport interface Network {\n  networkId: string;\n  node?: Node;\n}\n\ntype Icons = Array<{ src: string; sizes?: string; type?: string; purpose?: string }>;\n\nexport const RPC_VERSION = 1;\n\nexport type NetworkToSelect = { networkId: string } | { nodeUrl: string };\n\nexport interface WalletApi {\n  [METHODS.connect]: (p: {\n    name: string;\n    icons?: Icons;\n    version: typeof RPC_VERSION;\n    connectNode: boolean;\n  }) => Promise<WalletInfo & { node?: Node }>;\n\n  [METHODS.closeConnection]: (p: any) => void;\n\n  [METHODS.subscribeAddress]: (p: {\n    type: SUBSCRIPTION_TYPES;\n    value: 'connected' | 'current';\n  }) => Promise<{ subscription: Array<'connected' | 'current'>; address: Accounts }>;\n\n  [METHODS.address]: () => Promise<Encoded.AccountAddress[]>;\n\n  [METHODS.unsafeSign]: (p: {\n    data: Encoded.Bytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.sign]: (p: {\n    tx: Encoded.Transaction;\n    onAccount: Encoded.AccountAddress;\n    returnSigned: boolean;\n    /**\n     * @deprecated Wallet provided networkId will be used (current network)\n     * required to maintain backward compatibility with wallets using SDK v11.0.1 and below\n     * @see {@link https://github.com/aeternity/aepp-sdk-js/commit/153fd89a52c4eab39fcd659b356b36d32129c1ba}\n     */\n    networkId: string;\n    innerTx?: boolean;\n  }) => Promise<{\n    /**\n     * @deprecated this is not a hash at all, will be removed later at the same time\n     * as dropping ability to broadcast transaction by wallet\n     */\n    transactionHash?: Partial<SignedTx> & {\n      hash: Encoded.TxHash;\n      rawTx: Encoded.Transaction;\n    };\n    signedTransaction?: Encoded.Transaction;\n  }>;\n\n  [METHODS.signMessage]: (p: {\n    message: string;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: string }>;\n\n  [METHODS.signTypedData]: (p: {\n    domain: Domain;\n    aci: AciValue;\n    data: Encoded.ContractBytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.signDelegation]: (p: {\n    delegation: Encoded.Bytearray;\n    onAccount: Encoded.AccountAddress;\n  }) => Promise<{ signature: Encoded.Signature }>;\n\n  [METHODS.updateNetwork]: (a: NetworkToSelect) => Promise<null>;\n}\n\nexport interface AeppApi {\n  [METHODS.updateAddress]: (a: Accounts) => void;\n  [METHODS.updateNetwork]: (a: Network) => void;\n  [METHODS.readyToConnect]: (w: WalletInfo) => void;\n  [METHODS.closeConnection]: (p: any) => void;\n}\n","import { RpcError, RpcInternalError, RpcMethodNotFoundError } from '../schema.js';\nimport BrowserConnection from '../connection/Browser.js';\nimport { InvalidRpcMessageError, MissingCallbackError } from '../../utils/errors.js';\nimport { ensureError } from '../../utils/other.js';\n\ninterface JsonRpcRequest {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  params?: any;\n}\n\ninterface JsonRpcResponse {\n  jsonrpc: '2.0';\n  id: number;\n  method: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ntype RpcApiHandler = (p?: any) => any | undefined;\ntype RpcApi<Api> = { [k in keyof Api]: RpcApiHandler };\ntype WithOrigin<Api extends RpcApi<Api>> = {\n  [k in keyof Api]: (p: Parameters<Api[k]>[0], origin: string) => ReturnType<Api[k]>;\n};\n\n/**\n * Contain functionality for using RPC conection\n * @category aepp wallet communication\n * @param connection - Connection object\n * @param onDisconnect - Disconnect callback\n * @param methods - Object containing handlers for each request by name\n */\nexport default class RpcClient<\n  RemoteApi extends RpcApi<RemoteApi>,\n  LocalApi extends RpcApi<LocalApi>,\n> {\n  connection: BrowserConnection;\n\n  readonly #callbacks = new Map<\n    number,\n    { resolve: (v: any) => void; reject: (e: Error) => void }\n  >();\n\n  #messageId = 0;\n\n  readonly #methods: WithOrigin<LocalApi>;\n\n  constructor(\n    connection: BrowserConnection,\n    onDisconnect: () => void,\n    methods: WithOrigin<LocalApi>,\n  ) {\n    this.connection = connection;\n    this.#methods = methods;\n    connection.connect(this.#handleMessage.bind(this), onDisconnect);\n  }\n\n  async #handleMessage(msg: JsonRpcRequest | JsonRpcResponse, origin: string): Promise<void> {\n    if (msg?.jsonrpc !== '2.0') throw new InvalidRpcMessageError(JSON.stringify(msg));\n    if ('result' in msg || 'error' in msg) {\n      this.#processResponse(msg);\n      return;\n    }\n\n    const request = msg as JsonRpcRequest;\n    let result;\n    let error: Error | undefined;\n    try {\n      if (!(request.method in this.#methods)) throw new RpcMethodNotFoundError();\n      const methodName = request.method as keyof LocalApi;\n      result = await this.#methods[methodName](request.params, origin);\n    } catch (e) {\n      ensureError(e);\n      error = e;\n    }\n    if (request.id != null) {\n      this.#sendResponse(\n        request.id,\n        request.method as keyof LocalApi,\n        result,\n        error == null || error instanceof RpcError ? error : new RpcInternalError(),\n      );\n    }\n    if (error != null && !(error instanceof RpcError)) throw error;\n  }\n\n  #sendRequest(\n    id: number | undefined,\n    method: keyof RemoteApi | keyof LocalApi,\n    params?: any,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      ...(id != null ? { id } : {}),\n      method,\n      ...(params != null ? { params } : {}),\n    });\n  }\n\n  #sendResponse(\n    id: number,\n    method: keyof RemoteApi | keyof LocalApi, // TODO: remove as far it is not required in JSON RPC\n    result?: any,\n    error?: RpcError,\n  ): void {\n    this.connection.sendMessage({\n      jsonrpc: '2.0',\n      id,\n      method,\n      ...(error != null ? { error: error.toJSON() } : { result }),\n    });\n  }\n\n  /**\n   * Make a request\n   * @param name - Method name\n   * @param params - Method params\n   * @returns Promise which will be resolved after receiving response message\n   */\n  async request<Name extends keyof RemoteApi>(\n    name: Name,\n    params: Parameters<RemoteApi[Name]>[0],\n  ): Promise<ReturnType<RemoteApi[Name]>> {\n    this.#sendRequest((this.#messageId += 1), name, params);\n    return new Promise((resolve, reject) => {\n      this.#callbacks.set(this.#messageId, { resolve, reject });\n    });\n  }\n\n  /**\n   * Make a notification\n   * @param name - Method name\n   * @param params - Method params\n   */\n  notify<Name extends keyof RemoteApi>(name: Name, params: Parameters<RemoteApi[Name]>[0]): void {\n    this.#sendRequest(undefined, name, params);\n  }\n\n  /**\n   * Process response message\n   * @param msg - Message object\n   */\n  #processResponse({ id, error, result }: { id: number; error?: any; result?: any }): void {\n    const callbacks = this.#callbacks.get(id);\n    if (callbacks == null) throw new MissingCallbackError(id);\n    if (error != null) callbacks.reject(RpcError.deserialize(error));\n    else callbacks.resolve(result);\n    this.#callbacks.delete(id);\n  }\n}\n","import { EventEmitter } from 'eventemitter3';\nimport AccountRpc from '../account/Rpc.js';\nimport { Encoded } from '../utils/encoder.js';\nimport {\n  Accounts,\n  RPC_VERSION,\n  Network,\n  WalletApi,\n  AeppApi,\n  NetworkToSelect,\n} from './rpc/types.js';\nimport RpcClient from './rpc/RpcClient.js';\nimport { METHODS, SUBSCRIPTION_TYPES } from './schema.js';\nimport { NoWalletConnectedError } from '../utils/errors.js';\nimport BrowserConnection from './connection/Browser.js';\n\ninterface EventsBase {\n  accountsChange: (accounts: AccountRpc[]) => void;\n  disconnect: (p: any) => void;\n}\n\nexport default abstract class WalletConnectorFrameBase<T extends {}> extends EventEmitter<\n  EventsBase | T\n> {\n  #rpcClient?: RpcClient<WalletApi, AeppApi>;\n\n  #getRpcClient(): RpcClient<WalletApi, AeppApi> {\n    if (this.#rpcClient == null)\n      throw new NoWalletConnectedError('You are not connected to Wallet');\n    return this.#rpcClient;\n  }\n\n  /**\n   * Is connected to wallet\n   */\n  get isConnected(): boolean {\n    return this.#rpcClient != null;\n  }\n\n  #accounts: AccountRpc[] = [];\n\n  /**\n   * Accounts provided by wallet over subscription\n   */\n  get accounts(): AccountRpc[] {\n    return this.#accounts;\n  }\n\n  protected constructor() {\n    super();\n  }\n\n  protected abstract _updateNetwork(params: Network): void;\n\n  #updateAccounts(params: Accounts): void {\n    const addresses = [\n      ...new Set([...Object.keys(params.current), ...Object.keys(params.connected)]),\n    ] as Encoded.AccountAddress[];\n    this.#accounts = addresses.map((address) => new AccountRpc(this.#getRpcClient(), address));\n    this.emit('accountsChange', this.#accounts);\n  }\n\n  static async _connect(\n    name: string,\n    connection: BrowserConnection,\n    connector: WalletConnectorFrameBase<any>,\n    connectNode: boolean,\n  ): Promise<void> {\n    let disconnectParams: any;\n\n    const client = new RpcClient<WalletApi, AeppApi>(\n      connection,\n      () => {\n        connector.#rpcClient = undefined;\n        connector.#accounts = [];\n        connector.emit('disconnect', disconnectParams);\n      },\n      {\n        [METHODS.updateAddress]: connector.#updateAccounts.bind(connector),\n        [METHODS.updateNetwork]: connector._updateNetwork.bind(connector),\n        [METHODS.closeConnection]: (params) => {\n          disconnectParams = params;\n          client.connection.disconnect();\n        },\n        [METHODS.readyToConnect]: () => {},\n      },\n    );\n    connector.#rpcClient = client;\n    const walletInfo = await connector.#rpcClient.request(METHODS.connect, {\n      name,\n      version: RPC_VERSION,\n      connectNode,\n    });\n    connector._updateNetwork(walletInfo);\n  }\n\n  /**\n   * Disconnect from wallet\n   */\n  disconnect(): void {\n    const client = this.#getRpcClient();\n    client.notify(METHODS.closeConnection, { reason: 'bye' });\n    client.connection.disconnect();\n  }\n\n  /**\n   * Request accounts from wallet\n   */\n  async getAccounts(): Promise<AccountRpc[]> {\n    const client = this.#getRpcClient();\n    const addresses = await client.request(METHODS.address, undefined);\n    return addresses.map((address) => new AccountRpc(client, address));\n  }\n\n  /**\n   * Subscribe for wallet accounts, get account updates adding handler to `accountsChange` event\n   * @param type - Subscription type\n   * @param value - Should be one of 'current' (the selected account), 'connected' (all)\n   * @returns Accounts from wallet\n   */\n  async subscribeAccounts(\n    type: SUBSCRIPTION_TYPES,\n    value: 'current' | 'connected',\n  ): Promise<AccountRpc[]> {\n    const result = await this.#getRpcClient().request(METHODS.subscribeAddress, { type, value });\n    this.#updateAccounts(result.address);\n    return this.#accounts;\n  }\n\n  /**\n   * Ask wallet to select a network\n   */\n  async askToSelectNetwork(network: NetworkToSelect): Promise<void> {\n    await this.#getRpcClient().request(METHODS.updateNetwork, network);\n  }\n}\n","import { Network } from './rpc/types.js';\nimport BrowserConnection from './connection/Browser.js';\nimport WalletConnectorFrameBase from './WalletConnectorFrameBase.js';\n\ninterface EventsNetworkId {\n  networkIdChange: (networkId: string) => void;\n}\n\n/**\n * Connect to wallet as iframe/web-extension\n * @category aepp wallet communication\n */\nexport default class WalletConnectorFrame extends WalletConnectorFrameBase<EventsNetworkId> {\n  #networkId = '';\n\n  /**\n   * The last network id reported by wallet\n   */\n  get networkId(): string {\n    return this.#networkId;\n  }\n\n  protected override _updateNetwork(params: Network): void {\n    this.#networkId = params.networkId;\n    this.emit('networkIdChange', this.#networkId);\n  }\n\n  /**\n   * Connect to wallet\n   * @param name - Aepp name\n   * @param connection - Wallet connection object\n   */\n  static async connect(name: string, connection: BrowserConnection): Promise<WalletConnectorFrame> {\n    const connector = new WalletConnectorFrame();\n    await WalletConnectorFrame._connect(name, connection, connector, false);\n    return connector;\n  }\n}\n","<template>\n  <h2>Select network</h2>\n  <div class=\"group\">\n    <div>\n      <div>Select by</div>\n      <div>\n        <label>\n          <input type=\"radio\" value=\"networkId\" v-model=\"mode\" />\n          Network ID\n        </label>\n        <label>\n          <input type=\"radio\" value=\"nodeUrl\" v-model=\"mode\" />\n          Node URL\n        </label>\n      </div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div>\n        <input v-model=\"payload\" placeholder=\"Network ID or node URL\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          promise = selectNetwork();\n        }\n      \"\n    >\n      Select network\n    </button>\n    <div v-if=\"promise\">\n      <div>Select network result</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  props: {\n    select: { type: Function, required: true },\n  },\n  data: () => ({\n    mode: 'networkId',\n    payload: 'ae_mainnet',\n    promise: null,\n  }),\n  methods: {\n    async selectNetwork() {\n      await this.select({ [this.mode]: this.payload });\n      return 'Accepted by wallet';\n    },\n  },\n};\n</script>\n","<template>\n  <div :class=\"{ error }\">{{ text }}</div>\n</template>\n\n<script>\nexport default {\n  props: {\n    value: { type: [Object, Array, String, Number, Promise], default: null },\n  },\n  data: () => ({\n    text: '',\n    error: false,\n  }),\n  watch: {\n    value: {\n      async handler(value) {\n        if (!value?.then) {\n          this.text = this.valueToString(value);\n          return;\n        }\n        this.text = 'Waiting for resolving';\n        this.error = false;\n        this.text = await value.then(\n          (result) => this.valueToString(result),\n          (error) => {\n            console.warn(error);\n            this.error = true;\n            return error;\n          },\n        );\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    valueToString(value) {\n      if (typeof value !== 'object') return value;\n      return JSON.stringify(value, (k, v) => (typeof v === 'bigint' ? `${v} (as BigInt)` : v), 2);\n    },\n  },\n};\n</script>\n","import { render } from \"./Value.vue?vue&type=template&id=a5c5ed22\"\nimport script from \"./Value.vue?vue&type=script&lang=js\"\nexport * from \"./Value.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./SelectNetwork.vue?vue&type=template&id=1d7df290\"\nimport script from \"./SelectNetwork.vue?vue&type=script&lang=js\"\nexport * from \"./SelectNetwork.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./ConnectFrame.vue?vue&type=template&id=3711aa0f\"\nimport script from \"./ConnectFrame.vue?vue&type=script&lang=js\"\nexport * from \"./ConnectFrame.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"group\">\n    <div v-if=\"status\">\n      <div>Connection status</div>\n      <div>{{ status }}</div>\n    </div>\n    <button v-else-if=\"!accountFactory\" @click=\"connect\">Connect</button>\n    <template v-else>\n      <button @click=\"disconnect\">Disconnect</button>\n      <button @click=\"addAccount\">Add Account</button>\n      <button v-if=\"accounts.length > 1\" @click=\"switchAccount\">Switch Account</button>\n      <button @click=\"switchNode\">Switch Node</button>\n      <div v-if=\"accounts.length\">\n        <div>Accounts</div>\n        <div>{{ accounts.map((account) => account.address.slice(0, 8)).join(', ') }}</div>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { AccountLedgerFactory } from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\n\nexport default {\n  created() {\n    this.accountFactory = null;\n  },\n  data: () => ({\n    status: '',\n    accounts: [],\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async connect() {\n      try {\n        this.status = 'Waiting for Ledger response';\n        const transport = await TransportWebUSB.create();\n        this.accountFactory = new AccountLedgerFactory(transport);\n      } catch (error) {\n        if (error.name === 'TransportOpenUserCancelled') return;\n        throw error;\n      } finally {\n        this.status = '';\n      }\n    },\n    async disconnect() {\n      this.accountFactory = null;\n      this.accounts = [];\n      this.$store.commit('setAddress', undefined);\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n    },\n    async addAccount() {\n      try {\n        this.status = 'Waiting for Ledger response';\n        const idx = this.accounts.length;\n        const account = await this.accountFactory.initialize(idx);\n        this.status = `Ensure that ${account.address} is displayed on Ledger HW screen`;\n        await this.accountFactory.getAddress(idx, true);\n        this.accounts.push(account);\n        this.setAccount(this.accounts[0]);\n      } catch (error) {\n        if (error.statusCode === 0x6985) return;\n        throw error;\n      } finally {\n        this.status = '';\n      }\n    },\n    switchAccount() {\n      this.accounts.push(this.accounts.shift());\n      this.setAccount(this.accounts[0]);\n    },\n    async switchNode() {\n      const networkId = this.$store.state.networkId === 'ae_mainnet' ? 'ae_uat' : 'ae_mainnet';\n      const [{ name }] = (await this.aeSdk.getNodesInPool()).filter(\n        (node) => node.nodeNetworkId === networkId,\n      );\n      this.aeSdk.selectNode(name);\n      this.$store.commit('setNetworkId', networkId);\n    },\n    setAccount(account) {\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n      this.aeSdk.addAccount(account, { select: true });\n      this.$store.commit('setAddress', account.address);\n    },\n  },\n};\n</script>\n","import nacl from 'tweetnacl';\n// js extension is required for mjs build, not importing the whole package to reduce bundle size\n// eslint-disable-next-line import/extensions\nimport { blake2b } from 'blakejs/blake2b.js';\nimport { encode as varuintEncode } from 'varuint-bitcoin';\n\nimport { concatBuffers, isItemOfArray } from './other.js';\nimport { decode, encode, Encoded, Encoding } from './encoder.js';\nimport { ArgumentError } from './errors.js';\n\n/**\n * Check if address is valid\n * @param maybeAddress - Address to check\n */\nexport function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;\n/**\n * Check if data is encoded in one of provided encodings\n * @param maybeEncoded - Data to check\n * @param encodings - Rest parameters with encodings to check against\n */\nexport function isAddressValid<E extends Encoding>(\n  maybeEncoded: string,\n  ...encodings: E[]\n): maybeEncoded is Encoded.Generic<E>;\nexport function isAddressValid(maybeEncoded: string, ...encodings: Encoding[]): boolean {\n  if (encodings.length === 0) encodings = [Encoding.AccountAddress];\n  try {\n    decode(maybeEncoded as Encoded.Any);\n    const encoding = maybeEncoded.split('_')[0];\n    if (!isItemOfArray(encoding, encodings)) {\n      throw new ArgumentError(\n        'Encoded string type',\n        encodings.length > 1 ? `one of ${encodings.join(', ')}` : encodings[0],\n        encoding,\n      );\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Generate a random salt (positive integer)\n * @returns random salt\n */\nexport function genSalt(): number {\n  const [random] = new BigUint64Array(nacl.randomBytes(8).buffer);\n  return Number(random % BigInt(Number.MAX_SAFE_INTEGER));\n}\n\n/**\n * Converts a positive integer to the smallest possible\n * representation in a binary digit representation\n * @param value - Value to encode\n * @returns Encoded number\n */\nexport function encodeUnsigned(value: number): Buffer {\n  const binary = Buffer.allocUnsafe(4);\n  binary.writeUInt32BE(value);\n  return binary.slice(binary.findIndex((i) => i !== 0));\n}\n\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @param input - Data to hash\n * @returns Hash\n */\nexport function hash(input: string | Uint8Array): Buffer {\n  return Buffer.from(blake2b(input, undefined, 32)); // 256 bits\n}\n\n// Todo Duplicated in tx builder. remove\n/**\n * Compute contract address\n * @category contract\n * @param owner - Address of contract owner\n * @param nonce - Round when contract was created\n * @returns Contract address\n */\nexport function encodeContractAddress(\n  owner: Encoded.AccountAddress,\n  nonce: number,\n): Encoded.ContractAddress {\n  const publicKey = decode(owner);\n  const binary = concatBuffers([publicKey, encodeUnsigned(nonce)]);\n  return encode(hash(binary), Encoding.ContractAddress);\n}\n\n/**\n * Verify that signature was signed by public key\n * @param data - Data that was signed\n * @param signature - Signature of data\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\nexport function verify(\n  data: Uint8Array,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return nacl.sign.detached.verify(data, signature, decode(address));\n}\n\nconst messagePrefix = Buffer.from('aeternity Signed Message:\\n', 'utf8');\nexport const messagePrefixLength = varuintEncode(messagePrefix.length).buffer;\n\n// TODO: consider rename to hashMessage\nexport function messageToHash(message: string): Buffer {\n  const msg = Buffer.from(message, 'utf8');\n  return hash(\n    concatBuffers([messagePrefixLength, messagePrefix, varuintEncode(msg.length).buffer, msg]),\n  );\n}\n\n/**\n * Verify that message was signed by address\n * @param message - Message that was signed\n * @param signature - Signature of message\n * @param address - Address to verify against\n * @returns is data was signed by address\n */\n// TODO: deprecate in favour of `verify(messageToHash(message), ...`, also the name is confusing\n// it should contain \"signature\"\nexport function verifyMessage(\n  message: string,\n  signature: Uint8Array,\n  address: Encoded.AccountAddress,\n): boolean {\n  return verify(messageToHash(message), signature, address);\n}\n","import { BigNumber } from 'bignumber.js';\nimport { mapObject } from '../../utils/other.js';\n\nexport const DRY_RUN_ACCOUNT = {\n  pub: 'ak_11111111111111111111111111111111273Yts',\n  amount: 100000000000000000000000000000000000n,\n} as const;\n\nexport const MAX_AUTH_FUN_GAS = 50000;\nexport type Int = number | string | BigNumber;\nexport type AensName = `${string}.chain`;\nexport const MIN_GAS_PRICE = 1e9; // TODO: don't use number for ae\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L67\nexport const NAME_FEE_MULTIPLIER = 1e14; // 100000000000000\nexport const NAME_FEE_BID_INCREMENT = 0.05; // # the increment is in percentage\n// # see https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L272\nexport const NAME_BID_TIMEOUT_BLOCKS = 480; // # ~1 day\n// # this is the max length for a domain that requires a base fee to be paid\nexport const NAME_MAX_LENGTH_FEE = 31;\n// # https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L290\n// # https://github.com/aeternity/protocol/blob/master/AENS.md#protocol-fees-and-protection-times\n// # bid ranges:\nexport const NAME_BID_RANGES = mapObject(\n  {\n    31: 3,\n    30: 5,\n    29: 8,\n    28: 13,\n    27: 21,\n    26: 34,\n    25: 55,\n    24: 89,\n    23: 144,\n    22: 233,\n    21: 377,\n    20: 610,\n    19: 987,\n    18: 1597,\n    17: 2584,\n    16: 4181,\n    15: 6765,\n    14: 10946,\n    13: 17711,\n    12: 28657,\n    11: 46368,\n    10: 75025,\n    9: 121393,\n    8: 196418,\n    7: 317811,\n    6: 514229,\n    5: 832040,\n    4: 1346269,\n    3: 2178309,\n    2: 3524578,\n    1: 5702887,\n  },\n  ([key, value]) => [key, new BigNumber(value).times(NAME_FEE_MULTIPLIER)],\n);\n\nexport enum ConsensusProtocolVersion {\n  Ceres = 6,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum VmVersion {\n  NoVm = 0,\n  Sophia = 1,\n  SophiaImprovementsMinerva = 3,\n  SophiaImprovementsFortuna = 4,\n  Fate = 5,\n  SophiaImprovementsLima = 6,\n  Fate2 = 7,\n  Fate3 = 8,\n}\n\n/**\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/contracts/contract_vms.md#virtual-machines-on-the-%C3%A6ternity-blockchain}\n */\nexport enum AbiVersion {\n  NoAbi = 0,\n  Sophia = 1,\n  Fate = 3,\n}\n\n/**\n * Enum with tag types\n * @category transaction builder\n * @see {@link https://github.com/aeternity/protocol/blob/0f6dee3d9d1e8e2469816798f5c7587a6c918f94/serializations.md#binary-serialization}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_chain_objects.erl#L39-L97}\n */\n// TODO: implement serialisation for commented-out tags\nexport enum Tag {\n  SignedTx = 11,\n  SpendTx = 12,\n  OracleRegisterTx = 22,\n  OracleQueryTx = 23,\n  OracleResponseTx = 24,\n  OracleExtendTx = 25,\n  NameClaimTx = 32,\n  NamePreclaimTx = 33,\n  NameUpdateTx = 34,\n  NameRevokeTx = 35,\n  NameTransferTx = 36,\n  ContractCreateTx = 42,\n  ContractCallTx = 43,\n  ChannelCreateTx = 50,\n  ChannelDepositTx = 51,\n  ChannelWithdrawTx = 52,\n  ChannelForceProgressTx = 521,\n  ChannelCloseMutualTx = 53,\n  ChannelCloseSoloTx = 54,\n  ChannelSlashTx = 55,\n  ChannelSettleTx = 56,\n  ChannelOffChainTx = 57,\n  ChannelSnapshotSoloTx = 59,\n  GaAttachTx = 80,\n  GaMetaTx = 81,\n  PayingForTx = 82,\n}\n","import { ConsensusProtocolVersion, VmVersion, AbiVersion } from '../constants.js';\nimport Node from '../../../Node.js';\n\n/*\n * First abi/vm by default\n * @see {@link https://github.com/aeternity/protocol/blob/71cf111/contracts/contract_vms.md#virtual-machines-on-the-æternity-blockchain}\n */\nexport const ProtocolToVmAbi = {\n  [ConsensusProtocolVersion.Ceres]: {\n    'contract-create': {\n      vmVersion: [VmVersion.Fate3],\n      abiVersion: [AbiVersion.Fate],\n    },\n    'contract-call': {\n      vmVersion: [],\n      abiVersion: [AbiVersion.Fate],\n    },\n    'oracle-call': {\n      vmVersion: [],\n      abiVersion: [AbiVersion.NoAbi, AbiVersion.Fate],\n    },\n  },\n} as const;\n\nexport interface CtVersion {\n  vmVersion: VmVersion;\n  abiVersion: AbiVersion;\n}\n\nexport function getProtocolDetails(\n  protocolVersion: ConsensusProtocolVersion,\n  type: 'contract-create' | 'contract-call' | 'oracle-call',\n): CtVersion {\n  const protocol = ProtocolToVmAbi[protocolVersion][type];\n  return {\n    vmVersion: protocol.vmVersion[0] ?? VmVersion.Fate2,\n    abiVersion: protocol.abiVersion[0],\n  };\n}\n\nexport default {\n  serialize(\n    value: CtVersion | undefined,\n    params: {},\n    {\n      consensusProtocolVersion = ConsensusProtocolVersion.Ceres,\n    }: { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    value ??= getProtocolDetails(consensusProtocolVersion, 'contract-create');\n\n    return Buffer.from([value.vmVersion, 0, value.abiVersion]);\n  },\n\n  async prepare(\n    value: CtVersion | undefined,\n    params: {},\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<CtVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        'contract-create',\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): CtVersion {\n    const [vm, , abi] = buffer;\n    return { vmVersion: +vm, abiVersion: +abi };\n  },\n};\n","import { Tag, ConsensusProtocolVersion, AbiVersion } from '../constants.js';\nimport { getProtocolDetails } from './ct-version.js';\nimport Node from '../../../Node.js';\n\nexport default {\n  _getProtocolDetails(c: ConsensusProtocolVersion, tag: Tag): AbiVersion {\n    const kind =\n      Tag.ContractCallTx === tag || Tag.GaMetaTx === tag ? 'contract-call' : 'oracle-call';\n    return getProtocolDetails(c, kind).abiVersion;\n  },\n\n  serialize(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    {\n      consensusProtocolVersion = ConsensusProtocolVersion.Ceres,\n    }: { consensusProtocolVersion?: ConsensusProtocolVersion },\n  ): Buffer {\n    const result = value ?? this._getProtocolDetails(consensusProtocolVersion, tag);\n\n    return Buffer.from([result]);\n  },\n\n  async prepare(\n    value: AbiVersion | undefined,\n    { tag }: { tag: Tag },\n    // TODO: { consensusProtocolVersion: ConsensusProtocolVersion } | { onNode: Node } | {}\n    options: { consensusProtocolVersion?: ConsensusProtocolVersion; onNode?: Node },\n  ): Promise<AbiVersion | undefined> {\n    if (value != null) return value;\n    if (options.consensusProtocolVersion != null) return undefined;\n    if (Object.keys(ConsensusProtocolVersion).length === 2) return undefined;\n    if (options.onNode != null) {\n      return this._getProtocolDetails(\n        (await options.onNode.getNodeInfo()).consensusProtocolVersion,\n        tag,\n      );\n    }\n    return undefined;\n  },\n\n  deserialize(buffer: Buffer): AbiVersion {\n    return buffer[0];\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { NoSerializerFoundError, TypeError } from './errors.js';\n\n/**\n * Convert string, number, or BigNumber to byte array\n * @param val - value to convert\n * @param big - enables force conversion to BigNumber\n * @returns Buffer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function toBytes(val?: null | string | number | BigNumber, big = false): Buffer {\n  // Encode a value to bytes.\n  // If the value is an int it will be encoded as bytes big endian\n  // Raises ValueError if the input is not an int or string\n\n  if (val == null) return Buffer.from([]);\n  if (Number.isInteger(val) || BigNumber.isBigNumber(val) || big) {\n    if (!BigNumber.isBigNumber(val)) val = new BigNumber(val);\n    if (!val.isInteger()) throw new TypeError(`Unexpected not integer value: ${val.toFixed()}`);\n    let hexString = val.toString(16);\n    if (hexString.length % 2 === 1) hexString = `0${hexString}`;\n    return Buffer.from(hexString, 'hex');\n  }\n  if (typeof val === 'string') {\n    return Buffer.from(val);\n  }\n  throw new NoSerializerFoundError();\n}\n","import { ArgumentError, PrefixNotFoundError, TagNotFoundError } from '../../../utils/errors.js';\nimport { toBytes } from '../../../utils/bytes.js';\nimport { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { isItemOfArray } from '../../../utils/other.js';\n\n/**\n * Map of prefix to ID tag constant\n * @see {@link https://github.com/aeternity/protocol/blob/master/serializations.md#the-id-type}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_id.erl#L97-L102}\n * @see {@link https://github.com/aeternity/aeserialization/blob/eb68fe331bd476910394966b7f5ede7a74d37e35/src/aeser_api_encoder.erl#L163-L168}\n */\nexport const idTagToEncoding = [\n  Encoding.AccountAddress,\n  Encoding.Name,\n  Encoding.Commitment,\n  Encoding.OracleAddress,\n  Encoding.ContractAddress,\n  Encoding.Channel,\n] as const;\n\nexport type AddressEncodings = (typeof idTagToEncoding)[number];\n\nexport default function genAddressField<Encoding extends AddressEncodings>(\n  ...encodings: Encoding[]\n): {\n  serialize: (value: Encoded.Generic<Encoding>) => Buffer;\n  deserialize: (value: Buffer) => Encoded.Generic<Encoding>;\n} {\n  return {\n    /**\n     * Utility function to create and _id type\n     * @param hashId - Encoded hash\n     * @returns Buffer Buffer with ID tag and decoded HASh\n     */\n    serialize(hashId) {\n      const enc = hashId.slice(0, 2);\n      if (!isItemOfArray(enc, idTagToEncoding)) throw new TagNotFoundError(enc);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      const idTag = idTagToEncoding.indexOf(enc) + 1;\n      return Buffer.from([...toBytes(idTag), ...decode(hashId)]);\n    },\n\n    /**\n     * Utility function to read and _id type\n     * @param buf - Data\n     * @returns Encoded hash string with prefix\n     */\n    deserialize(buf) {\n      const idTag = Buffer.from(buf).readUIntBE(0, 1);\n      const enc = idTagToEncoding[idTag - 1];\n      if (enc == null) throw new PrefixNotFoundError(idTag);\n      if (!isItemOfArray(enc, encodings)) {\n        throw new ArgumentError('Address encoding', encodings.join(', '), enc);\n      }\n      return encode(buf.subarray(1), enc) as Encoded.Generic<Encoding>;\n    },\n  };\n}\n","export default function genArrayField<Input, Output, Binary>(itemHandler: {\n  serialize: (value: Input, params: unknown) => Binary;\n  deserialize: (value: Binary, params: unknown) => Output;\n}): {\n  serialize: (value: readonly Input[], params: unknown) => Binary[];\n  deserialize: (value: Binary[], params: unknown) => Output[];\n} {\n  return {\n    serialize(items, params) {\n      return items.map((item) => itemHandler.serialize(item, params));\n    },\n\n    deserialize(buffers, params) {\n      return buffers.map((buffer) => itemHandler.deserialize(buffer, params));\n    },\n  };\n}\n","import { BigNumber } from 'bignumber.js';\nimport { genSalt, hash } from '../../utils/crypto.js';\nimport { decode, encode, Encoded, Encoding } from '../../utils/encoder.js';\nimport { toBytes } from '../../utils/bytes.js';\nimport { concatBuffers } from '../../utils/other.js';\nimport {\n  AensName,\n  NAME_BID_RANGES,\n  NAME_BID_TIMEOUT_BLOCKS,\n  NAME_FEE_BID_INCREMENT,\n  NAME_MAX_LENGTH_FEE,\n} from './constants.js';\nimport { ceil } from '../../utils/bignumber.js';\nimport { ArgumentError, IllegalBidFeeError } from '../../utils/errors.js';\n\n/**\n * JavaScript-based Transaction builder helper function's\n */\n\n/**\n * Build a contract public key\n * @category contract\n * @param ownerId - The public key of the owner account\n * @param nonce - the nonce of the transaction\n * @returns Contract public key\n */\nexport function buildContractId(\n  ownerId: Encoded.AccountAddress,\n  nonce: number | BigNumber,\n): Encoded.ContractAddress {\n  const ownerIdAndNonce = Buffer.from([...decode(ownerId), ...toBytes(nonce)]);\n  const b2bHash = hash(ownerIdAndNonce);\n  return encode(b2bHash, Encoding.ContractAddress);\n}\n\n/**\n * Build a oracle query id\n * @category oracle\n * @param senderId - The public key of the sender account\n * @param nonce - the nonce of the transaction\n * @param oracleId - The oracle public key\n * @returns Contract public key\n */\nexport function oracleQueryId(\n  senderId: Encoded.AccountAddress,\n  nonce: number | BigNumber | string,\n  oracleId: Encoded.OracleAddress,\n): Encoded.OracleQueryId {\n  function _int32(val: number | string | BigNumber): Buffer {\n    const nonceBE = toBytes(val, true);\n    return concatBuffers([Buffer.alloc(32 - nonceBE.length), nonceBE]);\n  }\n\n  const b2bHash = hash(Buffer.from([...decode(senderId), ..._int32(nonce), ...decode(oracleId)]));\n  return encode(b2bHash, Encoding.OracleQueryId);\n}\n\nconst AENS_SUFFIX = '.chain';\n\nexport function nameToPunycode(maybeName: string): AensName {\n  const [name, suffix, ...other] = maybeName.split('.');\n  if (other.length !== 0) throw new ArgumentError('aens name', 'including only one dot', maybeName);\n  if (suffix !== AENS_SUFFIX.slice(1)) {\n    throw new ArgumentError('aens name', `suffixed with ${AENS_SUFFIX}`, maybeName);\n  }\n  if (/\\p{Emoji_Presentation}/u.test(name)) {\n    throw new ArgumentError('aens name', 'not containing emoji', maybeName);\n  }\n  if (name[2] === '-' && name[3] === '-') {\n    throw new ArgumentError(\n      'aens name',\n      'without \"-\" char in both the third and fourth positions',\n      maybeName,\n    );\n  }\n  if (name[0] === '-') {\n    throw new ArgumentError('aens name', 'starting with no \"-\" char', maybeName);\n  }\n  if (name.at(-1) === '-') {\n    throw new ArgumentError('aens name', 'ending with no \"-\" char', maybeName);\n  }\n  let punycode;\n  try {\n    const u = new URL(`http://${name}.${suffix}`);\n    if (u.username + u.password + u.port + u.search + u.hash !== '' || u.pathname !== '/') {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    punycode = u.host;\n  } catch (error) {\n    if (error instanceof TypeError && error.message.includes('Invalid URL')) {\n      throw new ArgumentError('aens name', 'valid', maybeName);\n    }\n    throw error;\n  }\n  if (!/^[a-z0-9.-]+$/i.test(punycode)) {\n    throw new ArgumentError('aens name', 'without illegal chars', maybeName);\n  }\n  if (punycode.length > 63 + AENS_SUFFIX.length) {\n    throw new ArgumentError('aens name', 'not too long', maybeName);\n  }\n  return punycode as AensName;\n}\n\n/**\n * Encode an AENS name\n * @category AENS\n * @param name - Name to encode\n * @returns `nm_` prefixed encoded AENS name\n */\nexport function produceNameId(name: AensName): Encoded.Name {\n  return encode(hash(nameToPunycode(name)), Encoding.Name);\n}\n\n/**\n * Generate the commitment hash by hashing the salt and\n * name, base 58 encoding the result and prepending 'cm_'\n * @category transaction builder\n * @param name - Name to be registered\n * @param salt - Random number\n * @returns Commitment hash\n */\nexport function commitmentHash(name: AensName, salt: number = genSalt()): Encoded.Commitment {\n  return encode(\n    hash(\n      concatBuffers([\n        Buffer.from(nameToPunycode(name)),\n        Buffer.from(salt.toString(16).padStart(64, '0'), 'hex'),\n      ]),\n    ),\n    Encoding.Commitment,\n  );\n}\n\n/**\n * Utility function to convert bytes to int\n * @category transaction builder\n * @param buf - Value\n * @returns Buffer Buffer from number(BigEndian)\n */\nexport function readInt(buf: Buffer = Buffer.from([])): string {\n  return new BigNumber(Buffer.from(buf).toString('hex'), 16).toString(10);\n}\n\n/**\n * Ensure that name is valid AENS name, would throw an exception otherwise\n * @category AENS\n * @param maybeName - AENS name\n */\nexport function ensureName(maybeName: string): asserts maybeName is AensName {\n  nameToPunycode(maybeName);\n}\n\n/**\n * Is AENS name valid\n * @category AENS\n * @param maybeName - AENS name\n */\n// TODO: consider renaming to isName\nexport function isNameValid(maybeName: string): maybeName is AensName {\n  try {\n    ensureName(maybeName);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nconst encodingToPointerKey = [\n  [Encoding.AccountAddress, 'account_pubkey'],\n  [Encoding.OracleAddress, 'oracle_pubkey'],\n  [Encoding.ContractAddress, 'contract_pubkey'],\n  [Encoding.Channel, 'channel'],\n] as const;\n\n/**\n * @category AENS\n * @param identifier - account/oracle/contract address, or channel\n * @returns default AENS pointer key\n */\nexport function getDefaultPointerKey(\n  identifier: Encoded.Generic<(typeof encodingToPointerKey)[number][0]>,\n): (typeof encodingToPointerKey)[number][1] {\n  decode(identifier);\n  const encoding = identifier.substring(0, 2);\n  const result = encodingToPointerKey.find(([e]) => e === encoding)?.[1];\n  if (result != null) return result;\n  throw new ArgumentError(\n    'identifier',\n    `prefixed with one of ${encodingToPointerKey.map(([e]) => `${e}_`).join(', ')}`,\n    identifier,\n  );\n}\n\n/**\n * Get the minimum AENS name fee\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @returns the minimum fee for the AENS name auction\n */\nexport function getMinimumNameFee(name: AensName): BigNumber {\n  const nameLength = nameToPunycode(name).length - AENS_SUFFIX.length;\n  return NAME_BID_RANGES[Math.min(nameLength, NAME_MAX_LENGTH_FEE)];\n}\n\n/**\n * Compute bid fee for AENS auction\n * @category AENS\n * @param name - the AENS name to get the fee for\n * @param options - Options\n * @param options.startFee - Auction start fee\n * @param options.increment - Bid multiplier(In percentage, must be between 0 and 1)\n * @returns Bid fee\n */\nexport function computeBidFee(\n  name: AensName,\n  {\n    startFee,\n    increment = NAME_FEE_BID_INCREMENT,\n  }: { startFee?: number | string | BigNumber; increment?: number } = {},\n): BigNumber {\n  if (!(Number(increment) === increment && increment % 1 !== 0))\n    throw new IllegalBidFeeError(`Increment must be float. Current increment ${increment}`);\n  if (increment < NAME_FEE_BID_INCREMENT)\n    throw new IllegalBidFeeError(`minimum increment percentage is ${NAME_FEE_BID_INCREMENT}`);\n  // FIXME: increment should be used somehow here\n  return ceil(\n    new BigNumber(startFee ?? getMinimumNameFee(name)).times(\n      new BigNumber(NAME_FEE_BID_INCREMENT).plus(1),\n    ),\n  );\n}\n\n/**\n * Compute auction end height\n * @category AENS\n * @param name - Name to compute auction end for\n * @param claimHeight - Auction starting height\n * @see {@link https://github.com/aeternity/aeternity/blob/72e440b8731422e335f879a31ecbbee7ac23a1cf/apps/aecore/src/aec_governance.erl#L273}\n * @returns Auction end height\n */\nexport function computeAuctionEndBlock(name: AensName, claimHeight: number): number {\n  const length = nameToPunycode(name).length - AENS_SUFFIX.length;\n  const h =\n    (length <= 4 ? 62 * NAME_BID_TIMEOUT_BLOCKS : null) ??\n    (length <= 8 ? 31 * NAME_BID_TIMEOUT_BLOCKS : null) ??\n    (length <= 12 ? NAME_BID_TIMEOUT_BLOCKS : null) ??\n    0;\n  return h + claimHeight;\n}\n\n/**\n * Is name accept going to auction\n * @category AENS\n */\nexport function isAuctionName(name: AensName): boolean {\n  return nameToPunycode(name).length < 13 + AENS_SUFFIX.length;\n}\n","import { readInt } from '../helpers.js';\nimport { Int } from '../constants.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { toBytes } from '../../../utils/bytes.js';\n\nexport default {\n  serialize(value: Int): Buffer {\n    if (Number(value) < 0) throw new ArgumentError('value', 'greater or equal to 0', value);\n    return toBytes(value, true);\n  },\n\n  deserialize(value: Buffer): string {\n    return readInt(value);\n  },\n};\n","/**\n * Big Number Helpers\n */\nimport { BigNumber } from 'bignumber.js';\n\n/**\n * Check if value is BigNumber, Number, BigInt or number string representation\n * @param number - number to check\n */\nexport const isBigNumber = (number: string | number | bigint | BigNumber): boolean => {\n  if (typeof number === 'bigint') return true;\n  return (\n    ['number', 'object', 'string'].includes(typeof number) &&\n    // eslint-disable-next-line no-restricted-globals\n    (!isNaN(number as number) || Number.isInteger(number) || BigNumber.isBigNumber(number))\n  );\n};\n\n/**\n * BigNumber ceil operation\n */\nexport const ceil = (bigNumber: BigNumber): BigNumber =>\n  bigNumber.integerValue(BigNumber.ROUND_CEIL);\n","import { BigNumber } from 'bignumber.js';\nimport { isBigNumber } from './bignumber.js';\nimport { ArgumentError } from './errors.js';\n\nexport enum AE_AMOUNT_FORMATS {\n  AE = 'ae',\n  MILI_AE = 'miliAE',\n  MICRO_AE = 'microAE',\n  NANO_AE = 'nanoAE',\n  PICO_AE = 'picoAE',\n  FEMTO_AE = 'femtoAE',\n  AETTOS = 'aettos',\n}\n\n/**\n * DENOMINATION_MAGNITUDE\n */\nconst DENOMINATION_MAGNITUDE = {\n  [AE_AMOUNT_FORMATS.AE]: 0,\n  [AE_AMOUNT_FORMATS.MILI_AE]: -3,\n  [AE_AMOUNT_FORMATS.MICRO_AE]: -6,\n  [AE_AMOUNT_FORMATS.NANO_AE]: -9,\n  [AE_AMOUNT_FORMATS.PICO_AE]: -12,\n  [AE_AMOUNT_FORMATS.FEMTO_AE]: -15,\n  [AE_AMOUNT_FORMATS.AETTOS]: -18,\n} as const;\n\n/**\n * Convert amount from one to other denomination\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n * @param options.targetDenomination - target denomination,\n * can be ['ae', 'aettos']\n */\nexport const formatAmount = (\n  value: string | number | bigint | BigNumber,\n  {\n    denomination = AE_AMOUNT_FORMATS.AETTOS,\n    targetDenomination = AE_AMOUNT_FORMATS.AETTOS,\n  }: { denomination?: AE_AMOUNT_FORMATS; targetDenomination?: AE_AMOUNT_FORMATS },\n): string => {\n  if (!isBigNumber(value)) throw new ArgumentError('value', 'a number', value);\n\n  return new BigNumber(typeof value === 'bigint' ? value.toString() : value)\n    .shiftedBy(DENOMINATION_MAGNITUDE[denomination] - DENOMINATION_MAGNITUDE[targetDenomination])\n    .toFixed();\n};\n\n/**\n * Convert amount to AE\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAe = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AETTOS }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination, targetDenomination: AE_AMOUNT_FORMATS.AE });\n\n/**\n * Convert amount to aettos\n * @param value - amount to convert\n * @param options - options\n * @param options.denomination - denomination of amount, can be ['ae', 'aettos']\n */\nexport const toAettos = (\n  value: string | number | BigNumber,\n  { denomination = AE_AMOUNT_FORMATS.AE }: { denomination?: AE_AMOUNT_FORMATS } = {},\n): string => formatAmount(value, { denomination });\n\ninterface Prefix {\n  name: string;\n  magnitude: number;\n}\n\nconst prefixes: Prefix[] = [\n  { name: 'exa', magnitude: 18 },\n  { name: 'giga', magnitude: 9 },\n  { name: '', magnitude: 0 },\n  { name: 'pico', magnitude: -12 },\n];\n\nconst getNearestPrefix = (exponent: number): Prefix =>\n  prefixes.reduce((p, n) =>\n    Math.abs(n.magnitude - exponent) < Math.abs(p.magnitude - exponent) ? n : p,\n  );\n\nconst getLowerBoundPrefix = (exponent: number): Prefix =>\n  prefixes.find((p) => p.magnitude <= exponent) ?? prefixes[prefixes.length - 1];\n\nexport const prefixedAmount = (rawValue: string | number | BigNumber): string => {\n  const value: BigNumber = new BigNumber(rawValue);\n\n  const exp = value.e ?? 0;\n  const { name, magnitude } = (exp < 0 ? getNearestPrefix : getLowerBoundPrefix)(exp);\n  const v = value\n    .shiftedBy(-magnitude)\n    .precision(9 + Math.min(exp - magnitude, 0))\n    .toFixed();\n  return `${v}${name !== '' ? ' ' : ''}${name}`;\n};\n","import uInt from './u-int.js';\nimport { Int } from '../constants.js';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter.js';\n\nexport default {\n  ...uInt,\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  serializeAettos(value: string | undefined, params: {}, options: {}): string {\n    return value ?? '0';\n  },\n\n  serialize(\n    value: Int | undefined,\n    params: {},\n    { denomination = AE_AMOUNT_FORMATS.AETTOS, ...options }: { denomination?: AE_AMOUNT_FORMATS },\n  ): Buffer {\n    return uInt.serialize(\n      this.serializeAettos(\n        value != null ? formatAmount(value, { denomination }) : value,\n        params,\n        options,\n      ),\n    );\n  },\n};\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { ArgumentError } from '../../../utils/errors.js';\n\nexport default function genEncodedField<E extends Encoding, Optional extends boolean = false>(\n  encoding: E,\n  optional?: Optional,\n): {\n  serialize: Optional extends true\n    ? (value?: Encoded.Generic<E>) => Buffer\n    : (value: Encoded.Generic<E>) => Buffer;\n  deserialize: (value: Buffer) => Encoded.Generic<E>;\n} {\n  return {\n    serialize(encodedData?: Encoded.Generic<E>) {\n      if (encodedData == null) {\n        if (optional === true) return Buffer.from([]);\n        throw new ArgumentError('Encoded data', 'provided', encodedData);\n      }\n      return decode(encodedData);\n    },\n\n    deserialize(buffer) {\n      return encode(buffer, encoding);\n    },\n  };\n}\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { EntryTag } from '../entry/constants.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\nexport default function genEntryField<T extends EntryTag = EntryTag>(\n  tag?: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { packEntry }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(packEntry({ ...txParams, ...(tag != null && { tag }) }));\n    },\n\n    deserialize(buf, { unpackEntry }) {\n      return unpackEntry(encode(buf, Encoding.Bytearray), tag);\n    },\n  };\n}\n","import { ArgumentError } from '../../../utils/errors.js';\nimport { isItemOfArray } from '../../../utils/other.js';\n\nexport default function genEnumerationField<Enum extends { [key: string]: number | string }>(\n  enm: Enum,\n): {\n  serialize: (value: Enum[keyof Enum]) => Buffer;\n  deserialize: (value: Buffer) => Enum[keyof Enum];\n} {\n  const values = Object.values(enm).filter((v) => typeof v === 'number');\n  return {\n    serialize(value) {\n      if (typeof value !== 'number') throw new ArgumentError('value', 'to be a number', value);\n      if (value > 0xff) throw new ArgumentError('value', 'to be less than 256', value);\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return Buffer.from([value]);\n    },\n\n    deserialize(buffer) {\n      if (buffer.length !== 1) {\n        throw new ArgumentError('buffer', 'to have single element', buffer.length);\n      }\n      const value = buffer[0];\n      if (!isItemOfArray(value, values)) {\n        throw new ArgumentError('value', 'to be a value of Enum', value);\n      }\n      return value as Enum[keyof Enum];\n    },\n  };\n}\n","import { BigNumber } from 'bignumber.js';\nimport coinAmount from './coin-amount.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors.js';\nimport { Int, MIN_GAS_PRICE } from '../constants.js';\nimport Node from '../../../Node.js';\nimport { AE_AMOUNT_FORMATS, formatAmount } from '../../../utils/amount-formatter.js';\n\nconst gasPriceCache: WeakMap<Node, { time: number; gasPrice: bigint }> = new WeakMap();\n\nexport async function getCachedIncreasedGasPrice(node: Node): Promise<bigint> {\n  const cache = gasPriceCache.get(node);\n  if (cache != null && cache.time > Date.now() - 20 * 1000) {\n    return cache.gasPrice;\n  }\n\n  const { minGasPrice, utilization } = (await node.getRecentGasPrices())[0];\n  let gasPrice =\n    utilization < 70\n      ? 0n\n      : BigInt(new BigNumber(minGasPrice.toString()).times(1.01).integerValue().toFixed());\n\n  const maxSafeGasPrice = BigInt(MIN_GAS_PRICE) * 100000n; // max microblock fee is 600ae or 35usd\n  if (gasPrice > maxSafeGasPrice) {\n    console.warn(\n      `Estimated gas price ${gasPrice} exceeds the maximum safe value for unknown reason.` +\n        ` It will be limited to ${maxSafeGasPrice}.` +\n        ' To overcome this restriction provide `gasPrice`/`fee` in options.',\n    );\n    gasPrice = maxSafeGasPrice;\n  }\n\n  gasPriceCache.set(node, { gasPrice, time: Date.now() });\n  return gasPrice;\n}\n\n// TODO: use withFormatting after using a single type for coins representation\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    {\n      onNode,\n      denomination,\n    }: {\n      onNode?: Node;\n      denomination?: AE_AMOUNT_FORMATS;\n    },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `gasPrice` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return formatAmount(gasPrice, { targetDenomination: denomination });\n  },\n\n  serializeAettos(value: string | undefined = MIN_GAS_PRICE.toString()): string {\n    if (+value < MIN_GAS_PRICE) {\n      throw new IllegalArgumentError(\n        `Gas price ${value.toString()} must be bigger than ${MIN_GAS_PRICE}`,\n      );\n    }\n    return value;\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { ArgumentError, IllegalArgumentError } from '../../../utils/errors.js';\nimport { Int, MIN_GAS_PRICE, Tag } from '../constants.js';\nimport uInt from './u-int.js';\nimport coinAmount from './coin-amount.js';\nimport { getCachedIncreasedGasPrice } from './gas-price.js';\nimport { isKeyOfObject } from '../../../utils/other.js';\nimport { decode, Encoded } from '../../../utils/encoder.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\nimport Node from '../../../Node.js';\n\nconst BASE_GAS = 15000;\nconst GAS_PER_BYTE = 20;\nconst KEY_BLOCK_INTERVAL = 3;\n\n/**\n * Calculate the base gas\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @returns The base gas\n * @example\n * ```js\n * TX_BASE_GAS(Tag.ChannelForceProgressTx) => 30 * 15000\n * ```\n */\nconst TX_BASE_GAS = (txType: Tag): number => {\n  const feeFactors = {\n    [Tag.ChannelForceProgressTx]: 30,\n    [Tag.ChannelOffChainTx]: 0,\n    [Tag.ContractCreateTx]: 5,\n    [Tag.ContractCallTx]: 12,\n    [Tag.GaAttachTx]: 5,\n    [Tag.GaMetaTx]: 5,\n    [Tag.PayingForTx]: 1 / 5,\n  } as const;\n  const factor = feeFactors[txType as keyof typeof feeFactors] ?? 1;\n  return factor * BASE_GAS;\n};\n\n/**\n * Calculate gas for other types of transactions\n * @see {@link https://github.com/aeternity/protocol/blob/master/consensus/README.md#gas}\n * @param txType - The transaction type\n * @param txSize - The transaction size\n * @returns parameters - The transaction parameters\n * @returns parameters.relativeTtl - The relative ttl\n * @returns parameters.innerTxSize - The size of the inner transaction\n * @returns The other gas\n * @example\n * ```js\n * TX_OTHER_GAS(Tag.OracleResponseTx, 10, { relativeTtl: 12, innerTxSize: 0 })\n *  => 10 * 20 + Math.ceil(32000 * 12 / Math.floor(60 * 24 * 365 / 3))\n * ```\n */\nconst TX_OTHER_GAS = (\n  txType: Tag,\n  txSize: number,\n  { relativeTtl, innerTxSize }: { relativeTtl: number; innerTxSize: number },\n): number => {\n  switch (txType) {\n    case Tag.OracleRegisterTx:\n    case Tag.OracleExtendTx:\n    case Tag.OracleQueryTx:\n    case Tag.OracleResponseTx:\n      return (\n        txSize * GAS_PER_BYTE +\n        Math.ceil((32000 * relativeTtl) / Math.floor((60 * 24 * 365) / KEY_BLOCK_INTERVAL))\n      );\n    case Tag.GaMetaTx:\n    case Tag.PayingForTx:\n      return (txSize - innerTxSize) * GAS_PER_BYTE;\n    default:\n      return txSize * GAS_PER_BYTE;\n  }\n};\n\nfunction getOracleRelativeTtl(params: any): number {\n  const ttlKeys = {\n    [Tag.OracleRegisterTx]: 'oracleTtlValue',\n    [Tag.OracleExtendTx]: 'oracleTtlValue',\n    [Tag.OracleQueryTx]: 'queryTtlValue',\n    [Tag.OracleResponseTx]: 'responseTtlValue',\n  } as const;\n\n  const { tag } = params;\n  if (!isKeyOfObject(tag, ttlKeys)) return 1;\n  return params[ttlKeys[tag]];\n}\n\n/**\n * Calculate gas based on tx type and params\n */\nexport function buildGas(\n  builtTx: Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  const { length } = decode(builtTx);\n  const txObject = unpackTx(builtTx);\n\n  let innerTxSize = 0;\n  if (txObject.tag === Tag.GaMetaTx || txObject.tag === Tag.PayingForTx) {\n    innerTxSize = decode(buildTx(txObject.tx.encodedTx)).length;\n  }\n\n  return (\n    TX_BASE_GAS(txObject.tag) +\n    TX_OTHER_GAS(txObject.tag, length, {\n      relativeTtl: getOracleRelativeTtl(txObject),\n      innerTxSize,\n    })\n  );\n}\n\n/**\n * Calculate min fee\n * @category transaction builder\n * @param rebuildTx - Callback to get built transaction with specific fee\n */\nfunction calculateMinFee(\n  rebuildTx: (value: BigNumber) => Encoded.Transaction,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): BigNumber {\n  let fee = new BigNumber(0);\n  let previousFee;\n  do {\n    previousFee = fee;\n    fee = new BigNumber(MIN_GAS_PRICE).times(buildGas(rebuildTx(fee), unpackTx, buildTx));\n  } while (!fee.eq(previousFee));\n  return fee;\n}\n\n// TODO: Get rid of this workaround. Transaction builder can't accept/return gas price instead of\n// fee because it may get a decimal gas price. So, it should accept the optional `gasPrice` even\n// if it is not a contract-related transaction. And use this `gasPrice` to calculate `fee`.\nconst gasPricePrefix = '_gas-price:';\n\nexport interface SerializeAettosParams {\n  rebuildTx: (params: any) => Encoded.Transaction;\n  unpackTx: typeof unpackTxType;\n  buildTx: typeof buildTxType;\n  _computingMinFee?: BigNumber;\n}\n\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    { onNode }: { onNode?: Node },\n  ): Promise<Int | undefined> {\n    if (value != null) return value;\n    if (onNode == null) {\n      throw new ArgumentError('onNode', 'provided (or provide `fee` instead)', onNode);\n    }\n    const gasPrice = await getCachedIncreasedGasPrice(onNode);\n    if (gasPrice === 0n) return undefined;\n    return gasPricePrefix + gasPrice;\n  },\n\n  serializeAettos(\n    _value: string | undefined,\n    { rebuildTx, unpackTx, buildTx, _computingMinFee }: SerializeAettosParams,\n    { _canIncreaseFee }: { _canIncreaseFee?: boolean },\n  ): string {\n    if (_computingMinFee != null) return _computingMinFee.toFixed();\n    const minFee = calculateMinFee(\n      (fee) => rebuildTx({ _computingMinFee: fee }),\n      unpackTx,\n      buildTx,\n    );\n    const value =\n      _value?.startsWith(gasPricePrefix) === true\n        ? minFee.dividedBy(MIN_GAS_PRICE).times(_value.replace(gasPricePrefix, ''))\n        : new BigNumber(_value ?? minFee);\n    if (minFee.gt(value)) {\n      if (_canIncreaseFee === true) return minFee.toFixed();\n      throw new IllegalArgumentError(`Fee ${value.toString()} must be bigger than ${minFee}`);\n    }\n    return value.toFixed();\n  },\n\n  serialize(\n    value: Parameters<typeof coinAmount.serialize>[0],\n    params: Parameters<typeof coinAmount.serialize>[1] & SerializeAettosParams,\n    options: { _canIncreaseFee?: boolean } & Parameters<typeof coinAmount.serialize>[2],\n  ): Buffer {\n    if (typeof value === 'string' && value.startsWith(gasPricePrefix)) {\n      return uInt.serialize(this.serializeAettos(value, params, options));\n    }\n    return coinAmount.serialize.call(this, value, params, options);\n  },\n};\n","import uInt from './u-int.js';\n\nexport default {\n  serialize(value: number): Buffer {\n    return uInt.serialize(value);\n  },\n\n  deserialize(value: Buffer): number {\n    return +uInt.deserialize(value);\n  },\n};\n","import { IllegalArgumentError } from '../../../utils/errors.js';\nimport { Tag, MAX_AUTH_FUN_GAS } from '../constants.js';\nimport shortUInt from './short-u-int.js';\nimport { buildGas } from './fee.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\n\nfunction calculateGasLimitMax(\n  gasMax: number,\n  rebuildTx: (value: number) => any,\n  unpackTx: typeof unpackTxType,\n  buildTx: typeof buildTxType,\n): number {\n  return gasMax - +buildGas(rebuildTx(gasMax), unpackTx, buildTx);\n}\n\nexport default {\n  ...shortUInt,\n\n  serialize(\n    _value: number | undefined,\n    {\n      tag,\n      rebuildTx,\n      unpackTx,\n      buildTx,\n      _computingGasLimit,\n    }: {\n      tag: Tag;\n      rebuildTx: (params: any) => any;\n      unpackTx: typeof unpackTxType;\n      buildTx: typeof buildTxType;\n      _computingGasLimit?: number;\n    },\n    { gasMax = 6e6 }: { gasMax?: number },\n  ): Buffer {\n    if (_computingGasLimit != null) return shortUInt.serialize(_computingGasLimit);\n\n    const gasLimitMax =\n      tag === Tag.GaMetaTx\n        ? MAX_AUTH_FUN_GAS\n        : calculateGasLimitMax(\n            gasMax,\n            (gasLimit) => rebuildTx({ _computingGasLimit: gasLimit, _canIncreaseFee: true }),\n            unpackTx,\n            buildTx,\n          );\n    const value = _value ?? gasLimitMax;\n    if (value > gasLimitMax) {\n      throw new IllegalArgumentError(`Gas limit ${value} must be less or equal to ${gasLimitMax}`);\n    }\n    return shortUInt.serialize(value);\n  },\n};\n","export default {\n  serialize(value: string): Buffer {\n    return Buffer.from(value);\n  },\n\n  deserialize(value: Buffer): string {\n    return value.toString();\n  },\n};\n","import field from './field.js';\nimport { AensName } from '../constants.js';\n\nexport default {\n  /**\n   * @param value - AENS name\n   */\n  serialize(value: AensName): Buffer {\n    return field.serialize(value);\n  },\n\n  /**\n   * @param value - AENS name\n   */\n  deserialize(value: Buffer): AensName {\n    return field.deserialize(value) as AensName;\n  },\n};\n","import { BigNumber } from 'bignumber.js';\nimport { getMinimumNameFee } from '../helpers.js';\nimport { InsufficientNameFeeError } from '../../../utils/errors.js';\nimport coinAmount from './coin-amount.js';\nimport { AensName, Int } from '../constants.js';\n\nexport default {\n  ...coinAmount,\n\n  serializeAettos(_value: string | undefined, txFields: { name: AensName }): string {\n    const minNameFee = getMinimumNameFee(txFields.name);\n    const value = new BigNumber(_value ?? minNameFee);\n    if (minNameFee.gt(value)) throw new InsufficientNameFeeError(value, minNameFee);\n    return value.toFixed();\n  },\n\n  /**\n   * @param value - AENS name fee\n   * @param txFields - Transaction fields\n   * @param txFields.name - AENS Name in transaction\n   */\n  serialize(\n    value: Int | undefined,\n    txFields: { name: AensName } & Parameters<(typeof coinAmount)['serialize']>[1],\n    parameters: Parameters<(typeof coinAmount)['serialize']>[2],\n  ): Buffer {\n    return coinAmount.serialize.call(this, value, txFields, parameters);\n  },\n};\n","import { AensName } from '../constants.js';\nimport { produceNameId, isNameValid } from '../helpers.js';\nimport address from './address.js';\nimport { Encoded, Encoding } from '../../../utils/encoder.js';\n\nconst addressName = address(Encoding.Name);\n\nexport default {\n  ...addressName,\n\n  /**\n   * @param value - AENS name ID\n   */\n  serialize(value: AensName | Encoded.Name): Buffer {\n    return addressName.serialize(isNameValid(value) ? produceNameId(value) : value);\n  },\n};\n","import { isAccountNotFoundError } from '../../../utils/other.js';\nimport shortUInt from './short-u-int.js';\nimport Node from '../../../Node.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { NextNonceStrategy } from '../../../apis/node/index.js';\nimport { Tag } from '../constants.js';\n\nexport default function genNonceField<SenderKey extends string>(\n  senderKey: SenderKey,\n): {\n  serialize: (value: number, params: { tag: Tag }) => Buffer;\n  // TODO: (value: number) => Promise<number> | (value: undefined, ...) => Promise<number>\n  prepare: (\n    value: number | undefined,\n    params: {},\n    // TODO: replace `string` with AddressEncodings\n    options: { [key in SenderKey]: string } & {\n      strategy?: NextNonceStrategy;\n      onNode?: Node;\n      _isInternalBuild?: boolean;\n    },\n  ) => Promise<number>;\n  deserialize: (value: Buffer) => number;\n  senderKey: string;\n} {\n  return {\n    ...shortUInt,\n\n    serialize(value: number, { tag }): Buffer {\n      if (Tag.GaAttachTx === tag && value !== 1) {\n        throw new ArgumentError('nonce', 'equal 1 if GaAttachTx', value);\n      }\n      return shortUInt.serialize(value);\n    },\n\n    async prepare(value, params, options) {\n      if (value != null) return value;\n      // TODO: uncomment the below line\n      // if (options._isInternalBuild === true) return 0;\n      const { onNode, strategy } = options;\n      const senderId = options[senderKey];\n      const requirement = 'provided (or provide `nonce` instead)';\n      if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n      if (senderId == null) throw new ArgumentError('senderId', requirement, senderId);\n      return (\n        await onNode\n          .getAccountNextNonce(senderId.replace(/^ok_/, 'ak_'), { strategy })\n          .catch((error) => {\n            if (!isAccountNotFoundError(error)) throw error;\n            return { nextNonce: 1 };\n          })\n      ).nextNonce;\n    },\n\n    senderKey,\n  };\n}\n","import { NamePointer as NamePointerString } from '../../../apis/node/index.js';\nimport { toBytes } from '../../../utils/bytes.js';\nimport { Encoded, Encoding, decode, encode } from '../../../utils/encoder.js';\nimport { isAddressValid } from '../../../utils/crypto.js';\nimport { IllegalArgumentError, DecodeError, ArgumentError } from '../../../utils/errors.js';\nimport address, { AddressEncodings, idTagToEncoding } from './address.js';\n\nconst ID_TAG = Buffer.from([1]);\nconst DATA_TAG = Buffer.from([2]);\nconst DATA_LENGTH_MAX = 1024;\nconst addressAny = address(...idTagToEncoding);\n\n// TODO: remove after fixing node types\ntype NamePointer = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings>;\n};\ntype NamePointerRaw = NamePointerString & {\n  id: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n};\n\nexport default <AllowRaw extends boolean>(\n  allowRaw: AllowRaw,\n): {\n  serialize: (pointers: Array<AllowRaw extends true ? NamePointerRaw : NamePointer>) => Buffer[][];\n  deserialize: (\n    pointers: Array<[key: Buffer, id: Buffer]>,\n  ) => Array<AllowRaw extends true ? NamePointerRaw : NamePointer>;\n} => ({\n  /**\n   * Helper function to build pointers for name update TX\n   * @param pointers - Array of pointers\n   * `([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])`\n   * @returns Serialized pointers array\n   */\n  serialize(pointers) {\n    if (pointers.length > 32) {\n      throw new IllegalArgumentError(\n        `Expected 32 pointers or less, got ${pointers.length} instead`,\n      );\n    }\n    return pointers.map(({ key, id }) => {\n      let payload;\n      if (isAddressValid(id, ...idTagToEncoding)) {\n        payload = [...(allowRaw ? [ID_TAG] : []), addressAny.serialize(id)];\n      }\n      if (isAddressValid(id, Encoding.Bytearray)) {\n        const data = decode(id);\n        if (data.length > DATA_LENGTH_MAX) {\n          throw new ArgumentError(\n            'Raw pointer',\n            `shorter than ${DATA_LENGTH_MAX + 1} bytes`,\n            `${data.length} bytes`,\n          );\n        }\n        payload = [DATA_TAG, data];\n      }\n      if (payload == null) throw new DecodeError(`Unknown AENS pointer value: ${id}`);\n      return [toBytes(key), Buffer.concat(payload)];\n    });\n  },\n\n  /**\n   * Helper function to read pointers from name update TX\n   * @param pointers - Array of pointers\n   * @returns Deserialize pointer array\n   */\n  deserialize(pointers) {\n    return pointers.map(([bKey, bId]) => {\n      if (!allowRaw) return { key: bKey.toString(), id: addressAny.deserialize(bId) };\n      const tag = bId.subarray(0, 1);\n      const payload = bId.subarray(1);\n      let id;\n      if (tag.equals(ID_TAG)) id = addressAny.deserialize(payload);\n      // TS can't figure out the real type depending on allowRaw\n      if (tag.equals(DATA_TAG)) id = encode(payload, Encoding.Bytearray) as Encoded.AccountAddress;\n      if (id == null) throw new DecodeError(`Unknown AENS pointer tag: ${tag}`);\n      return { key: bKey.toString(), id };\n    });\n  },\n});\n","import coinAmount from './coin-amount.js';\nimport { Int } from '../constants.js';\nimport Node from '../../../Node.js';\nimport { Encoded } from '../../../utils/encoder.js';\nimport { ArgumentError } from '../../../utils/errors.js';\n\n/**\n * Oracle query fee\n */\nexport default {\n  ...coinAmount,\n\n  async prepare(\n    value: Int | undefined,\n    params: {},\n    options: { oracleId?: Encoded.OracleAddress; onNode?: Node },\n  ) {\n    if (value != null) return value;\n    const { onNode, oracleId } = options;\n    const requirement = 'provided (or provide `queryFee` instead)';\n    if (onNode == null) throw new ArgumentError('onNode', requirement, onNode);\n    if (oracleId == null) throw new ArgumentError('oracleId', requirement, oracleId);\n    return (await onNode.getOracleByPubkey(oracleId)).queryFee.toString();\n  },\n};\n","export default {\n  serialize(buffer: Uint8Array): Buffer {\n    return Buffer.from(buffer);\n  },\n\n  deserialize(buffer: Buffer): Buffer {\n    return buffer;\n  },\n};\n","import { ArgumentError } from '../../../utils/errors.js';\nimport shortUInt from './short-u-int.js';\n\nexport default function genShortUIntConstField<\n  Value extends number,\n  Optional extends boolean = false,\n>(\n  constValue: Value,\n  optional?: Optional,\n): {\n  serialize: Optional extends true ? (value?: Value) => Buffer : (value: Value) => Buffer;\n  deserialize: (value: Buffer) => Value;\n  constValue: Value;\n  constValueOptional: boolean;\n} {\n  return {\n    serialize(value?: Value) {\n      if ((optional !== true || value != null) && value !== constValue) {\n        throw new ArgumentError('ShortUIntConst', constValue, value);\n      }\n      return shortUInt.serialize(constValue);\n    },\n\n    deserialize(buf) {\n      const value = shortUInt.deserialize(buf);\n      if (value !== constValue) throw new ArgumentError('ShortUIntConst', constValue, value);\n      return constValue;\n    },\n\n    constValue,\n\n    constValueOptional: optional === true,\n  };\n}\n","import { toBytes } from '../../../utils/bytes.js';\n\nexport default {\n  serialize(string: string): Buffer {\n    return toBytes(string);\n  },\n\n  deserialize(buffer: Buffer): string {\n    return buffer.toString();\n  },\n};\n","import { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport { Tag } from '../constants.js';\nimport type { unpackTx as unpackTxType, buildTx as buildTxType } from '../index.js';\n\nexport default function genTransactionField<T extends Tag = Tag>(\n  tag?: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { buildTx: typeof buildTxType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackTx: typeof unpackTxType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n} {\n  return {\n    serialize(txParams, { buildTx }) {\n      if (ArrayBuffer.isView(txParams)) return Buffer.from(txParams as any);\n      if (typeof txParams === 'string' && txParams.startsWith('tx_')) {\n        return decode(txParams as Encoded.Transaction);\n      }\n      return decode(buildTx({ ...txParams, ...(tag != null && { tag }) }));\n    },\n\n    deserialize(buf, { unpackTx }) {\n      return unpackTx(encode(buf, Encoding.Transaction), tag);\n    },\n  };\n}\n","import { ArgumentError } from './errors.js';\n\nexport function wrapWithProxy<Value extends object | undefined>(\n  valueCb: () => Value,\n): NonNullable<Value> {\n  return new Proxy(\n    {},\n    Object.fromEntries(\n      (\n        [\n          'apply',\n          'construct',\n          'defineProperty',\n          'deleteProperty',\n          'getOwnPropertyDescriptor',\n          'getPrototypeOf',\n          'isExtensible',\n          'ownKeys',\n          'preventExtensions',\n          'set',\n          'setPrototypeOf',\n          'get',\n          'has',\n        ] as const\n      ).map((name) => [\n        name,\n        (t: {}, ...args: unknown[]) => {\n          const target = valueCb();\n          if (target == null) throw new ArgumentError('wrapped value', 'defined', target);\n          if (name === 'get' && args[0] === '_wrappedValue') return target;\n          const res = (Reflect[name] as any)(target, ...args);\n          return typeof res === 'function' && name === 'get' ? res.bind(target) : res;\n        },\n      ]),\n    ),\n  ) as NonNullable<Value>;\n}\n\nexport function unwrapProxy<Value extends object>(value: Value): Value {\n  return (value as { _wrappedValue?: Value })._wrappedValue ?? value;\n}\n","import { AE_AMOUNT_FORMATS, formatAmount } from './utils/amount-formatter.js';\nimport { isAccountNotFoundError, pause } from './utils/other.js';\nimport { unwrapProxy } from './utils/wrap-proxy.js';\nimport { isNameValid, produceNameId } from './tx/builder/helpers.js';\nimport { AensName, DRY_RUN_ACCOUNT } from './tx/builder/constants.js';\nimport {\n  AensPointerContextError,\n  DryRunError,\n  InvalidAensNameError,\n  TxTimedOutError,\n  TxNotInChainError,\n  InternalError,\n} from './utils/errors.js';\nimport Node from './Node.js';\nimport { DryRunResult, DryRunResults, SignedTx } from './apis/node/index.js';\nimport { decode, encode, Encoded, Encoding } from './utils/encoder.js';\n\n/**\n * @category chain\n * @param type - Type\n * @param options - Options\n */\nexport async function _getPollInterval(\n  type: 'key-block' | 'micro-block',\n  {\n    _expectedMineRate,\n    _microBlockCycle,\n    onNode,\n  }: { _expectedMineRate?: number; _microBlockCycle?: number; onNode: Node },\n): Promise<number> {\n  const getVal = async (\n    t: string,\n    val: number | undefined,\n    devModeDef: number,\n    def: number,\n  ): Promise<number | null> => {\n    if (t !== type) return null;\n    if (val != null) return val;\n    return (await onNode?.getNetworkId()) === 'ae_dev' ? devModeDef : def;\n  };\n\n  const base =\n    (await getVal('key-block', _expectedMineRate, 0, 180000)) ??\n    (await getVal('micro-block', _microBlockCycle, 0, 3000)) ??\n    (() => {\n      throw new InternalError(`Unknown type: ${type}`);\n    })();\n  return Math.floor(base / 3);\n}\n\nconst heightCache: WeakMap<Node, { time: number; height: number }> = new WeakMap();\n\n/**\n * Obtain current height of the chain\n * @category chain\n * @param options - Options\n * @param options.cached - Get height from the cache. The lag behind the actual height shouldn't\n * be more than 1 block. Use if needed to reduce requests count, and approximate value can be used.\n * For example, for timeout check in transaction status polling.\n * @returns Current chain height\n */\nexport async function getHeight({\n  cached = false,\n  ...options\n}: {\n  onNode: Node;\n  cached?: boolean;\n} & Parameters<typeof _getPollInterval>[1]): Promise<number> {\n  const onNode = unwrapProxy(options.onNode);\n  if (cached) {\n    const cache = heightCache.get(onNode);\n    if (cache != null && cache.time > Date.now() - (await _getPollInterval('key-block', options))) {\n      return cache.height;\n    }\n  }\n  const { height } = await onNode.getCurrentKeyBlockHeight();\n  heightCache.set(onNode, { height, time: Date.now() });\n  return height;\n}\n\n/**\n * Return transaction details if it is mined, fail otherwise.\n * If the transaction has ttl specified then would wait till it leaves the mempool.\n * Otherwise would fail if a specified amount of blocks were mined.\n * @category chain\n * @param th - The hash of transaction to poll\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.blocks - Number of blocks mined after which to fail if transaction ttl is not set\n * @param options.onNode - Node to use\n * @returns The transaction as it was mined\n */\nexport async function poll(\n  th: Encoded.TxHash,\n  {\n    blocks = 5,\n    interval,\n    ...options\n  }: { blocks?: number; interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): ReturnType<Node['getTransactionByHash']> {\n  interval ??= await _getPollInterval('micro-block', options);\n  let max;\n  do {\n    const tx = await options.onNode.getTransactionByHash(th);\n    if (tx.blockHeight !== -1) return tx;\n    if (max == null) {\n      max = tx.tx.ttl !== 0 ? -1 : (await getHeight({ ...options, cached: true })) + blocks;\n    }\n    await pause(interval);\n  } while (max === -1 ? true : (await getHeight({ ...options, cached: true })) < max);\n  throw new TxTimedOutError(blocks, th);\n}\n\n/**\n * Wait for the chain to reach a specific height\n * @category chain\n * @param height - Height to wait for\n * @param options - Options\n * @param options.interval - Interval (in ms) at which to poll the chain\n * @param options.onNode - Node to use\n * @returns Current chain height\n */\nexport async function awaitHeight(\n  height: number,\n  {\n    interval,\n    ...options\n  }: { interval?: number; onNode: Node } & Parameters<typeof _getPollInterval>[1],\n): Promise<number> {\n  interval ??= Math.min(await _getPollInterval('key-block', options), 5000);\n  let currentHeight;\n  do {\n    if (currentHeight != null) await pause(interval);\n    currentHeight = await getHeight(options);\n  } while (currentHeight < height);\n  return currentHeight;\n}\n\n/**\n * Wait for transaction confirmation\n * @category chain\n * @param txHash - Transaction hash\n * @param options - Options\n * @param options.confirm - Number of micro blocks to wait for transaction confirmation\n * @param options.onNode - Node to use\n * @returns Current Height\n */\nexport async function waitForTxConfirm(\n  txHash: Encoded.TxHash,\n  {\n    confirm = 3,\n    onNode,\n    ...options\n  }: { confirm?: number; onNode: Node } & Parameters<typeof awaitHeight>[1],\n): Promise<number> {\n  const { blockHeight } = await onNode.getTransactionByHash(txHash);\n  const height = await awaitHeight(blockHeight + confirm, { onNode, ...options });\n  const { blockHeight: newBlockHeight } = await onNode.getTransactionByHash(txHash);\n  switch (newBlockHeight) {\n    case -1:\n      throw new TxNotInChainError(txHash);\n    case blockHeight:\n      return height;\n    default:\n      return waitForTxConfirm(txHash, { onNode, confirm, ...options });\n  }\n}\n\n/**\n * Get account by account public key\n * @category chain\n * @param address - Account address (public key)\n * @param options - Options\n * @param options.height - Get account on specific block by block height\n * @param options.hash - Get account on specific block by micro block hash or key block hash\n * @param options.onNode - Node to use\n */\nexport async function getAccount(\n  address: Encoded.AccountAddress | Encoded.ContractAddress,\n  {\n    height,\n    hash,\n    onNode,\n  }: { height?: number; hash?: Encoded.KeyBlockHash | Encoded.MicroBlockHash; onNode: Node },\n): ReturnType<Node['getAccountByPubkey']> {\n  if (height != null) return onNode.getAccountByPubkeyAndHeight(address, height);\n  if (hash != null) return onNode.getAccountByPubkeyAndHash(address, hash);\n  return onNode.getAccountByPubkey(address);\n}\n\n/**\n * Request the balance of specified account\n * @category chain\n * @param address - The public account address to obtain the balance for\n * @param options - Options\n * @param options.format\n * @param options.height - The chain height at which to obtain the balance for\n * (default: top of chain)\n * @param options.hash - The block hash on which to obtain the balance for (default: top of chain)\n */\nexport async function getBalance(\n  address: Encoded.AccountAddress | Encoded.ContractAddress | Encoded.OracleAddress,\n  {\n    format = AE_AMOUNT_FORMATS.AETTOS,\n    ...options\n  }: { format?: AE_AMOUNT_FORMATS } & Parameters<typeof getAccount>[1],\n): Promise<string> {\n  const addr = address.startsWith('ok_')\n    ? encode(decode(address), Encoding.AccountAddress)\n    : (address as Encoded.AccountAddress | Encoded.ContractAddress);\n\n  const { balance } = await getAccount(addr, options).catch((error) => {\n    if (!isAccountNotFoundError(error)) throw error;\n    return { balance: 0n };\n  });\n\n  return formatAmount(balance, { targetDenomination: format });\n}\n\n/**\n * Obtain current generation\n * @category chain\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Current Generation\n */\nexport async function getCurrentGeneration({\n  onNode,\n}: {\n  onNode: Node;\n}): ReturnType<Node['getCurrentGeneration']> {\n  return onNode.getCurrentGeneration();\n}\n\n/**\n * Get generation by hash or height\n * @category chain\n * @param hashOrHeight - Generation hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Generation\n */\nexport async function getGeneration(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getGenerationByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getGenerationByHeight(hashOrHeight);\n  return onNode.getGenerationByHash(hashOrHeight);\n}\n\n/**\n * Get micro block transactions\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transactions\n */\nexport async function getMicroBlockTransactions(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): Promise<SignedTx[]> {\n  return (await onNode.getMicroBlockTransactionsByHash(hash)).transactions;\n}\n\n/**\n * Get key block\n * @category chain\n * @param hashOrHeight - Key block hash or height\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Key Block\n */\nexport async function getKeyBlock(\n  hashOrHeight: Encoded.KeyBlockHash | number,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getKeyBlockByHash']> {\n  if (typeof hashOrHeight === 'number') return onNode.getKeyBlockByHeight(hashOrHeight);\n  return onNode.getKeyBlockByHash(hashOrHeight);\n}\n\n/**\n * Get micro block header\n * @category chain\n * @param hash - Micro block hash\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Micro block header\n */\nexport async function getMicroBlockHeader(\n  hash: Encoded.MicroBlockHash,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getMicroBlockHeaderByHash']> {\n  return onNode.getMicroBlockHeaderByHash(hash);\n}\n\ninterface TxDryRunArguments {\n  tx: Encoded.Transaction;\n  accountAddress: Encoded.AccountAddress;\n  top?: number | Encoded.KeyBlockHash | Encoded.MicroBlockHash;\n  txEvents?: any;\n  resolve: Function;\n  reject: Function;\n}\nconst txDryRunRequests: Map<string, TxDryRunArguments[] & { timeout?: NodeJS.Timeout }> = new Map();\n\nasync function txDryRunHandler(key: string, onNode: Node): Promise<void> {\n  const rs = txDryRunRequests.get(key);\n  txDryRunRequests.delete(key);\n  if (rs == null) throw new InternalError(\"Can't get dry-run request\");\n\n  let dryRunRes;\n  try {\n    const top =\n      typeof rs[0].top === 'number' ? (await getKeyBlock(rs[0].top, { onNode })).hash : rs[0].top;\n    dryRunRes = await onNode.protectedDryRunTxs({\n      top,\n      txEvents: rs[0].txEvents,\n      txs: rs.map((req) => ({ tx: req.tx })),\n      accounts: Array.from(new Set(rs.map((req) => req.accountAddress))).map((pubKey) => ({\n        pubKey,\n        amount: DRY_RUN_ACCOUNT.amount,\n      })),\n    });\n  } catch (error) {\n    rs.forEach(({ reject }) => reject(error));\n    return;\n  }\n\n  const { results, txEvents } = dryRunRes;\n  results.forEach(({ result, reason, ...resultPayload }, idx) => {\n    const { resolve, reject, tx, accountAddress } = rs[idx];\n    if (result === 'ok') resolve({ ...resultPayload, txEvents });\n    else reject(Object.assign(new DryRunError(reason as string), { tx, accountAddress }));\n  });\n}\n\n/**\n * Transaction dry-run\n * @category chain\n * @param tx - transaction to execute\n * @param accountAddress - address that will be used to execute transaction\n * @param options - Options\n * @param options.top - hash of block on which to make dry-run\n * @param options.txEvents - collect and return on-chain tx events that would result from the call\n * @param options.combine - Enables combining of similar requests to a single dry-run call\n * @param options.onNode - Node to use\n */\nexport async function txDryRun(\n  tx: Encoded.Transaction,\n  accountAddress: Encoded.AccountAddress,\n  {\n    top,\n    txEvents,\n    combine,\n    onNode,\n  }: { top?: TxDryRunArguments['top']; txEvents?: boolean; combine?: boolean; onNode: Node },\n): Promise<{ txEvents?: DryRunResults['txEvents'] } & DryRunResult> {\n  const key = combine === true ? [top, txEvents].join() : 'immediate';\n  const requests = txDryRunRequests.get(key) ?? [];\n  txDryRunRequests.set(key, requests);\n  return new Promise((resolve, reject) => {\n    requests.push({\n      tx,\n      accountAddress,\n      top,\n      txEvents,\n      resolve,\n      reject,\n    });\n    if (combine !== true) {\n      void txDryRunHandler(key, onNode);\n      return;\n    }\n    requests.timeout ??= setTimeout(() => {\n      void txDryRunHandler(key, onNode);\n    });\n  });\n}\n\n/**\n * Get contract byte code\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContractByteCode(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContractCode']> {\n  return onNode.getContractCode(contractId);\n}\n\n/**\n * Get contract entry\n * @category contract\n * @param contractId - Contract address\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getContract(\n  contractId: Encoded.ContractAddress,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getContract']> {\n  return onNode.getContract(contractId);\n}\n\n/**\n * Get name entry\n * @category AENS\n * @param name - AENS name\n * @param options - Options\n * @param options.onNode - Node to use\n */\nexport async function getName(\n  name: AensName,\n  { onNode }: { onNode: Node },\n): ReturnType<Node['getNameEntryByName']> {\n  return onNode.getNameEntryByName(name);\n}\n\n/**\n * Resolve AENS name and return name hash\n * @category AENS\n * @param nameOrId - AENS name or address\n * @param key - in AENS pointers record\n * @param options - Options\n * @param options.verify - To ensure that name exist and have a corresponding pointer\n * // TODO: avoid that to don't trust to current api gateway\n * @param options.resolveByNode - Enables pointer resolving using node\n * @param options.onNode - Node to use\n * @returns Address or AENS name hash\n */\nexport async function resolveName<Type extends Encoding.AccountAddress | Encoding.ContractAddress>(\n  nameOrId: AensName | Encoded.Generic<Type>,\n  key: string,\n  {\n    verify = true,\n    resolveByNode = false,\n    onNode,\n  }: { verify?: boolean; resolveByNode?: boolean; onNode: Node },\n): Promise<Encoded.Generic<Type | Encoding.Name>> {\n  if (isNameValid(nameOrId)) {\n    if (verify || resolveByNode) {\n      const name = await onNode.getNameEntryByName(nameOrId);\n      const pointer = name.pointers.find((p) => p.key === key);\n      if (pointer == null) throw new AensPointerContextError(nameOrId, key);\n      if (resolveByNode) return pointer.id as Encoded.Generic<Type>;\n    }\n    return produceNameId(nameOrId);\n  }\n  try {\n    decode(nameOrId);\n    return nameOrId;\n  } catch (error) {\n    throw new InvalidAensNameError(`Invalid name or address: ${nameOrId}`);\n  }\n}\n","import shortUInt from './short-u-int.js';\nimport Node from '../../../Node.js';\nimport { ArgumentError } from '../../../utils/errors.js';\nimport { _getPollInterval, getHeight } from '../../../chain.js';\n\n/**\n * Time to leave\n */\nexport default {\n  ...shortUInt,\n\n  serialize(value: number | undefined): Buffer {\n    return shortUInt.serialize(value ?? 0);\n  },\n\n  async prepare(\n    value: number | undefined,\n    params: {},\n    // TODO: { absoluteTtl: true } | { absoluteTtl: false, onNode: Node }\n    {\n      onNode,\n      absoluteTtl,\n      _isInternalBuild,\n      ...options\n    }: {\n      onNode?: Node;\n      absoluteTtl?: boolean;\n      _isInternalBuild?: boolean;\n    } & Omit<Parameters<typeof _getPollInterval>[1], 'onNode'>,\n  ) {\n    if (absoluteTtl !== true && value !== 0 && (value != null || _isInternalBuild === true)) {\n      if (onNode == null) throw new ArgumentError('onNode', 'provided', onNode);\n      value = (value ?? 3) + (await getHeight({ ...options, onNode, cached: true }));\n    }\n    return value;\n  },\n};\n","export default function withDefault<Input, Output, Binary>(\n  defaultValue: Input,\n  field: {\n    serialize: (value: Input, params: unknown) => Binary;\n    deserialize: (value: Binary, params: unknown) => Output;\n  },\n): {\n  serialize: (value: Input | undefined, params: unknown) => Binary;\n  deserialize: (value: Binary, params: unknown) => Output;\n} {\n  return {\n    ...field,\n\n    serialize(value, params) {\n      return field.serialize(value ?? defaultValue, params);\n    },\n  };\n}\n","export default function withFormatting<Input, Output, Binary, Params, Options>(\n  format: (v: Input | undefined) => Input,\n  field: {\n    serialize: (value: Input, params: Params, options: Options) => Binary;\n    deserialize: (value: Binary) => Output;\n  },\n): {\n  serialize: (value: Input | undefined, params: Params, options: Options) => Binary;\n  deserialize: (value: Binary) => Output;\n} {\n  return {\n    ...field,\n\n    serialize(value, params, options) {\n      return field.serialize(format(value), params, options);\n    },\n  };\n}\n","export enum CallReturnType {\n  Ok = 0,\n  Error = 1,\n  Revert = 2,\n}\n\n/**\n * @category entry building\n */\nexport enum EntryTag {\n  Account = 10,\n  Oracle = 20,\n  // OracleQuery = 21,\n  Name = 30,\n  // NameCommitment = 31,\n  // NameAuction = 37,\n  Contract = 40,\n  ContractCall = 41,\n  ChannelOffChainUpdateTransfer = 570,\n  ChannelOffChainUpdateDeposit = 571,\n  ChannelOffChainUpdateWithdraw = 572,\n  ChannelOffChainUpdateCreateContract = 573,\n  ChannelOffChainUpdateCallContract = 574,\n  // ChannelOffChainUpdateMeta = 576,\n  Channel = 58,\n  TreesPoi = 60,\n  // TreesDb = 61,\n  StateTrees = 62,\n  Mtree = 63,\n  MtreeValue = 64,\n  ContractsMtree = 621,\n  CallsMtree = 622,\n  ChannelsMtree = 623,\n  NameserviceMtree = 624,\n  OraclesMtree = 625,\n  AccountsMtree = 626,\n  // CompilerSophia = 70,\n  GaMetaTxAuthData = 810,\n}\n","/**\n * Transaction Schema for TxBuilder\n */\n// # RLP version number\n// # https://github.com/aeternity/protocol/blob/master/serializations.md#binary-serialization\n\nimport { Tag } from './constants.js';\nimport SchemaTypes from './SchemaTypes.js';\nimport abiVersion from './field-types/abi-version.js';\nimport address, { idTagToEncoding } from './field-types/address.js';\nimport array from './field-types/array.js';\nimport coinAmount from './field-types/coin-amount.js';\nimport ctVersion from './field-types/ct-version.js';\nimport encoded from './field-types/encoded.js';\nimport entry from './field-types/entry.js';\nimport enumeration from './field-types/enumeration.js';\nimport fee from './field-types/fee.js';\nimport gasLimit from './field-types/gas-limit.js';\nimport gasPrice from './field-types/gas-price.js';\nimport name from './field-types/name.js';\nimport nameFee from './field-types/name-fee.js';\nimport nameId from './field-types/name-id.js';\nimport nonce from './field-types/nonce.js';\nimport pointers from './field-types/pointers.js';\nimport queryFee from './field-types/query-fee.js';\nimport raw from './field-types/raw.js';\nimport shortUInt from './field-types/short-u-int.js';\nimport shortUIntConst from './field-types/short-u-int-const.js';\nimport string from './field-types/string.js';\nimport transaction from './field-types/transaction.js';\nimport ttl from './field-types/ttl.js';\nimport uInt from './field-types/u-int.js';\nimport withDefault from './field-types/with-default.js';\nimport withFormatting from './field-types/with-formatting.js';\nimport { Encoded, Encoding } from '../../utils/encoder.js';\nimport { ArgumentError } from '../../utils/errors.js';\nimport { EntryTag } from './entry/constants.js';\nimport { EntParams, EntUnpacked } from './entry/schema.generated.js';\n\nexport enum ORACLE_TTL_TYPES {\n  delta = 0,\n  block = 1,\n}\n\n// TODO: figure out how to omit overriding types of recursive fields\ninterface TransactionAny {\n  serialize: (value: TxParams | Uint8Array | Encoded.Transaction) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked;\n  recursiveType: true;\n}\n\nconst transactionAny = transaction() as unknown as TransactionAny;\n\ninterface TransactionSignedTx {\n  serialize: (\n    value: (TxParams & { tag: Tag.SignedTx }) | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => TxUnpacked & { tag: Tag.SignedTx };\n  recursiveType: true;\n}\n\nconst transactionSignedTx = transaction(Tag.SignedTx) as unknown as TransactionSignedTx;\n\ninterface EntryTreesPoi {\n  serialize: (\n    value: (EntParams & { tag: EntryTag.TreesPoi }) | Uint8Array | Encoded.Transaction,\n  ) => Buffer;\n  deserialize: (value: Buffer) => EntUnpacked & { tag: EntryTag.TreesPoi };\n  recursiveType: true;\n}\n\nconst entryTreesPoi = entry(EntryTag.TreesPoi) as unknown as EntryTreesPoi;\n\nconst clientTtl = withDefault(60 * 60, shortUInt);\n// https://github.com/aeternity/protocol/blob/fd17982/AENS.md#update\n/**\n * Name ttl represented in number of blocks (Max value is 50000 blocks)\n */\nconst nameTtl = withFormatting((value) => {\n  const NAME_TTL = 180000;\n  value ??= NAME_TTL;\n  if (value >= 1 && value <= NAME_TTL) return value;\n  throw new ArgumentError('nameTtl', `a number between 1 and ${NAME_TTL} blocks`, value);\n}, shortUInt);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/c007deeac4a01e401238412801ac7084ac72d60e/serializations.md#accounts-version-1-basic-accounts}\n */\nexport const txSchema = [\n  {\n    tag: shortUIntConst(Tag.SignedTx),\n    version: shortUIntConst(1, true),\n    signatures: array(raw), // TODO: use sg_ (Encoding.Signature) instead\n    encodedTx: transactionAny,\n  },\n  {\n    tag: shortUIntConst(Tag.SpendTx),\n    version: shortUIntConst(1, true),\n    senderId: address(Encoding.AccountAddress),\n    // TODO: accept also an AENS name\n    recipientId: address(Encoding.AccountAddress, Encoding.ContractAddress, Encoding.Name),\n    amount: coinAmount,\n    fee,\n    ttl,\n    nonce: nonce('senderId'),\n    payload: encoded(Encoding.Bytearray, true),\n  },\n  {\n    tag: shortUIntConst(Tag.NamePreclaimTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    commitmentId: address(Encoding.Commitment),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameClaimTx),\n    version: shortUIntConst(2, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    name,\n    nameSalt: withDefault(0, uInt),\n    nameFee,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameUpdateTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    nameTtl,\n    pointers: pointers(false),\n    clientTtl,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameUpdateTx),\n    version: shortUIntConst(2),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    nameTtl,\n    pointers: pointers(true),\n    clientTtl,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameTransferTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    // TODO: accept also an AENS name\n    recipientId: address(Encoding.AccountAddress, Encoding.Name),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.NameRevokeTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    nameId,\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.ContractCreateTx),\n    version: shortUIntConst(1, true),\n    ownerId: address(Encoding.AccountAddress),\n    nonce: nonce('ownerId'),\n    code: encoded(Encoding.ContractBytearray),\n    ctVersion,\n    fee,\n    ttl,\n    deposit: withFormatting((value = 0) => {\n      if (+value === 0) return value;\n      throw new ArgumentError('deposit', 'equal 0 (because is not refundable)', value);\n    }, coinAmount),\n    amount: coinAmount,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.ContractCallTx),\n    version: shortUIntConst(1, true),\n    callerId: address(Encoding.AccountAddress),\n    nonce: nonce('callerId'),\n    // TODO: accept also an AENS name\n    contractId: address(Encoding.ContractAddress, Encoding.Name),\n    abiVersion,\n    fee,\n    ttl,\n    amount: coinAmount,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.OracleRegisterTx),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nonce: nonce('accountId'),\n    queryFormat: string,\n    responseFormat: string,\n    queryFee: coinAmount,\n    oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    oracleTtlValue: withDefault(500, shortUInt),\n    fee,\n    ttl,\n    abiVersion,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleExtendTx),\n    version: shortUIntConst(1, true),\n    // TODO: accept also an AENS name\n    oracleId: address(Encoding.OracleAddress, Encoding.Name),\n    nonce: nonce('oracleId'),\n    oracleTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    oracleTtlValue: withDefault(500, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleQueryTx),\n    version: shortUIntConst(1, true),\n    senderId: address(Encoding.AccountAddress),\n    nonce: nonce('senderId'),\n    // TODO: accept also an AENS name\n    oracleId: address(Encoding.OracleAddress, Encoding.Name),\n    query: string,\n    queryFee,\n    queryTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    queryTtlValue: withDefault(10, shortUInt),\n    responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    responseTtlValue: withDefault(10, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.OracleResponseTx),\n    version: shortUIntConst(1, true),\n    oracleId: address(Encoding.OracleAddress),\n    nonce: nonce('oracleId'),\n    queryId: encoded(Encoding.OracleQueryId),\n    response: string,\n    responseTtlType: withDefault(ORACLE_TTL_TYPES.delta, enumeration(ORACLE_TTL_TYPES)),\n    responseTtlValue: withDefault(10, shortUInt),\n    fee,\n    ttl,\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCreateTx),\n    version: shortUIntConst(2, true),\n    initiator: address(Encoding.AccountAddress),\n    initiatorAmount: uInt,\n    responder: address(Encoding.AccountAddress),\n    responderAmount: uInt,\n    channelReserve: uInt,\n    lockPeriod: uInt,\n    ttl,\n    fee,\n    initiatorDelegateIds: array(address(...idTagToEncoding)),\n    responderDelegateIds: array(address(...idTagToEncoding)),\n    stateHash: encoded(Encoding.State),\n    nonce: nonce('initiator'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCloseMutualTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    initiatorAmountFinal: uInt,\n    responderAmountFinal: uInt,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelCloseSoloTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    poi: entryTreesPoi,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSlashTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    poi: entryTreesPoi,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelDepositTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    amount: uInt,\n    ttl,\n    fee,\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelWithdrawTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    toId: address(Encoding.AccountAddress),\n    amount: uInt,\n    ttl,\n    fee,\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSettleTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    initiatorAmountFinal: uInt,\n    responderAmountFinal: uInt,\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelForceProgressTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    round: shortUInt,\n    update: encoded(Encoding.ContractBytearray),\n    stateHash: encoded(Encoding.State),\n    offChainTrees: encoded(Encoding.StateTrees),\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelOffChainTx),\n    version: shortUIntConst(2, true),\n    channelId: address(Encoding.Channel),\n    round: shortUInt,\n    stateHash: encoded(Encoding.State),\n  },\n  {\n    tag: shortUIntConst(Tag.ChannelSnapshotSoloTx),\n    version: shortUIntConst(1, true),\n    channelId: address(Encoding.Channel),\n    fromId: address(Encoding.AccountAddress),\n    payload: encoded(Encoding.Transaction),\n    ttl,\n    fee,\n    nonce: nonce('fromId'),\n  },\n  {\n    tag: shortUIntConst(Tag.GaAttachTx),\n    version: shortUIntConst(1, true),\n    ownerId: address(Encoding.AccountAddress),\n    nonce: nonce('ownerId'),\n    code: encoded(Encoding.ContractBytearray),\n    authFun: raw,\n    ctVersion,\n    fee,\n    ttl,\n    gasLimit,\n    gasPrice,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(Tag.GaMetaTx),\n    version: shortUIntConst(2, true),\n    gaId: address(Encoding.AccountAddress),\n    authData: encoded(Encoding.ContractBytearray),\n    abiVersion,\n    fee,\n    gasLimit,\n    gasPrice,\n    tx: transactionSignedTx,\n  },\n  {\n    tag: shortUIntConst(Tag.PayingForTx),\n    version: shortUIntConst(1, true),\n    payerId: address(Encoding.AccountAddress),\n    nonce: nonce('payerId'),\n    fee,\n    tx: transactionSignedTx,\n  },\n] as const;\n\ntype TxSchema = SchemaTypes<typeof txSchema>;\nexport type TxParams = TxSchema['TxParams'];\nexport type TxParamsAsync = TxSchema['TxParamsAsync'];\nexport type TxUnpacked = TxSchema['TxUnpacked'];\n","import { decode as rlpDecode, encode as rlpEncode } from 'rlp';\nimport { Field, BinaryData } from './field-types/interface.js';\nimport {\n  ArgumentError,\n  DecodeError,\n  SchemaNotFoundError,\n  InternalError,\n} from '../../utils/errors.js';\nimport { Encoding, Encoded, encode, decode } from '../../utils/encoder.js';\nimport { readInt } from './helpers.js';\n\ntype Schemas = ReadonlyArray<{\n  tag: { constValue: number } & Field;\n  version: { constValue: number; constValueOptional: boolean } & Field;\n}>;\n\nexport function getSchema(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  tag: number,\n  version: number | undefined,\n): Array<[string, Field]> {\n  const subSchemas = schemas.filter((s) => s.tag.constValue === tag);\n  if (subSchemas.length === 0) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, 0);\n  if (version == null) {\n    const defaultSchema = subSchemas.find((schema) => schema.version.constValueOptional);\n    if (defaultSchema == null)\n      throw new InternalError(`Can't find default schema of ${Tag[tag]} (${tag})`);\n    version = defaultSchema.version.constValue;\n  }\n  const schema = subSchemas.find((s) => s.version.constValue === version);\n  if (schema == null) throw new SchemaNotFoundError(`${Tag[tag]} (${tag})`, version);\n  return Object.entries(schema);\n}\n\nexport function packRecord<E extends Encoding>(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  params: {\n    tag: number;\n    version?: number;\n    [k: string]: unknown;\n  },\n  extraParams: { [k: string]: unknown },\n  encoding: E,\n): Encoded.Generic<E> {\n  const schema = getSchema(schemas, Tag, params.tag, params.version);\n  const binary = schema.map(([key, field]) =>\n    field.serialize(params[key], { ...params, ...extraParams }, params),\n  );\n  return encode(rlpEncode(binary), encoding);\n}\n\nexport function unpackRecord(\n  schemas: Schemas,\n  Tag: { [key: number]: string },\n  encodedRecord: Encoded.Any,\n  expectedTag: number | undefined,\n  extraParams: { [k: string]: unknown },\n): unknown {\n  const binary = rlpDecode(decode(encodedRecord));\n  const tag = +readInt(binary[0] as Buffer);\n  const version = +readInt(binary[1] as Buffer);\n  const schema = getSchema(schemas, Tag, tag, version);\n  if (expectedTag != null && expectedTag !== tag) {\n    throw new DecodeError(`Expected ${Tag[expectedTag]} tag, got ${Tag[tag]} instead`);\n  }\n  if (binary.length !== schema.length) {\n    throw new ArgumentError('RLP length', schema.length, binary.length);\n  }\n  return Object.fromEntries(\n    schema.map(([name, field], index) => [\n      name,\n      field.deserialize(binary[index] as BinaryData, extraParams),\n    ]),\n  );\n}\n","export default {\n  serialize(value: boolean): Buffer {\n    return Buffer.from([value ? 1 : 0]);\n  },\n\n  deserialize(buffer: Buffer): boolean {\n    return buffer[0] === 1;\n  },\n};\n","import { EntryTag } from '../entry/constants.js';\nimport { encode, Encoding, Encoded, decode } from '../../../utils/encoder.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\nexport default function genMapField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n  serialize: (\n    // TODO: replace with `TxParams & { tag: T }`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: Record<Encoded.Generic<E>, any>,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `TxUnpacked & { tag: T }`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => Record<Encoded.Generic<E>, any>;\n  recursiveType: true;\n} {\n  return {\n    serialize(object, { packEntry }) {\n      return decode(\n        packEntry({\n          tag: EntryTag.Mtree,\n          values: Object.entries(object).map(\n            ([key, value]) =>\n              ({\n                tag: EntryTag.MtreeValue,\n                key: decode(key as Encoded.Generic<E>),\n                value: decode(packEntry({ ...(value as any), tag })),\n              }) as const,\n          ),\n        }),\n      );\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      const { values } = unpackEntry(encode(buffer, Encoding.Bytearray), EntryTag.Mtree);\n      return Object.fromEntries(\n        values\n          // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n          .filter(({ key }) => encoding !== Encoding.ContractAddress || key.length === 32)\n          .map(({ key, value }) => [\n            encode(key, encoding),\n            unpackEntry(encode(value, Encoding.Bytearray), tag),\n          ]),\n      ) as Record<Encoded.Generic<E>, any>;\n    },\n\n    recursiveType: true,\n  };\n}\n","import { encode as rlpEncode, Input } from 'rlp';\nimport { EntryTag } from '../entry/constants.js';\nimport { hash } from '../../../utils/crypto.js';\nimport {\n  MerkleTreeHashMismatchError,\n  MissingNodeInTreeError,\n  UnknownPathNibbleError,\n  UnexpectedTsError,\n  UnknownNodeLengthError,\n  InternalError,\n} from '../../../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../../../utils/encoder.js';\nimport type { unpackEntry } from '../entry/index.js';\nimport type { EntUnpacked } from '../entry/schema.generated.js';\n\nenum NodeType {\n  Branch,\n  Extension,\n  Leaf,\n}\n\ntype MPTreeBinary = [Buffer, Array<[Buffer, Buffer[]]>];\n\nclass MPTree<E extends Encoding, T extends EntryTag> {\n  readonly #rootHash: string;\n\n  #isComplete = true;\n\n  get isComplete(): boolean {\n    return this.#isComplete;\n  }\n\n  readonly #nodes: { [key: string]: Buffer[] };\n\n  readonly #encoding: E;\n\n  readonly #tag: T;\n\n  readonly #unpackEntry: typeof unpackEntry;\n\n  static #nodeHash(node: Input): string {\n    return Buffer.from(hash(rlpEncode(node))).toString('hex');\n  }\n\n  /**\n   * Deserialize Merkle Patricia Tree\n   * @param binary - Binary\n   * @param tag - Tag to use to decode value\n   * @param unpEnt - Implementation of unpackEntry use to decode values\n   * @returns Merkle Patricia Tree\n   */\n  constructor(binary: MPTreeBinary, encoding: E, tag: T, unpEnt: typeof unpackEntry) {\n    this.#encoding = encoding;\n    this.#tag = tag;\n    this.#unpackEntry = unpEnt;\n    this.#rootHash = binary[0].toString('hex');\n    this.#nodes = Object.fromEntries(binary[1].map((node) => [node[0].toString('hex'), node[1]]));\n\n    if (this.#nodes[this.#rootHash] == null) {\n      if (Object.keys(this.#nodes).length !== 0) {\n        throw new MissingNodeInTreeError(\"Can't find a node by root hash\");\n      }\n      this.#isComplete = false;\n      return;\n    }\n    Object.entries(this.#nodes).forEach(([key, node]) => {\n      if (MPTree.#nodeHash(node) !== key) throw new MerkleTreeHashMismatchError();\n      const { type } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .filter((n) => n.length)\n            .forEach((n) => {\n              // TODO: enable after resolving https://github.com/aeternity/aeternity/issues/4066\n              // if (n.length !== 32) {\n              //   throw new ArgumentError('MPTree branch item length', 32, n.length);\n              // }\n              if (this.#nodes[n.toString('hex')] == null) this.#isComplete = false;\n            });\n          break;\n        case NodeType.Extension:\n          if (this.#nodes[node[1].toString('hex')] == null) {\n            throw new MissingNodeInTreeError(\"Can't find a node by hash in extension node\");\n          }\n          break;\n        case NodeType.Leaf:\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    });\n  }\n\n  isEqual(tree: MPTree<E, T>): boolean {\n    return this.#rootHash === tree.#rootHash;\n  }\n\n  static #parseNode(node: Buffer[]): { type: NodeType; value?: Buffer; path?: string } {\n    switch (node.length) {\n      case 17:\n        return {\n          type: NodeType.Branch,\n          ...(node[16].length !== 0 && { value: node[16] }),\n        };\n      case 2: {\n        const nibble = node[0][0] >> 4; // eslint-disable-line no-bitwise\n        if (nibble > 3) throw new UnknownPathNibbleError(nibble);\n        const type = nibble <= 1 ? NodeType.Extension : NodeType.Leaf;\n        const slice = [0, 2].includes(nibble) ? 2 : 1;\n        return {\n          type,\n          ...(type === NodeType.Leaf && { value: node[1] }),\n          path: node[0].toString('hex').slice(slice),\n        };\n      }\n      default:\n        throw new UnknownNodeLengthError(node.length);\n    }\n  }\n\n  /**\n   * Serialize Merkle Patricia Tree\n   * @returns Binary\n   */\n  serialize(): MPTreeBinary {\n    return [\n      Buffer.from(this.#rootHash, 'hex'),\n      Object.entries(this.#nodes).map(([mptHash, value]) => [Buffer.from(mptHash, 'hex'), value]),\n    ];\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param _key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  #getRaw(_key: string): Buffer | undefined {\n    let searchFrom = this.#rootHash;\n    let key = _key;\n    while (true) {\n      // eslint-disable-line no-constant-condition\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return undefined;\n        throw new InternalError(\"Can't find node in complete tree\");\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          if (key.length === 0) return value;\n          searchFrom = node[+`0x${key[0]}`].toString('hex');\n          key = key.substring(1);\n          break;\n        case NodeType.Extension:\n          if (key.substring(0, path?.length) !== path) return undefined;\n          searchFrom = node[1].toString('hex');\n          key = key.substring(path.length);\n          break;\n        case NodeType.Leaf:\n          if (path !== key) return undefined;\n          return value;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieve value from Merkle Patricia Tree\n   * @param key - The key of the element to retrieve\n   * @returns Value associated to the specified key\n   */\n  get(key: Encoded.Generic<E>): (EntUnpacked & { tag: T }) | undefined {\n    const d = this.#getRaw(decode(key).toString('hex'));\n    if (d == null) return d;\n    return this.#unpackEntry(encode(d, Encoding.Bytearray), this.#tag);\n  }\n\n  #entriesRaw(): Array<[string, Buffer]> {\n    const entries: Array<[string, Buffer]> = [];\n    const rec = (searchFrom: string, key: string): void => {\n      const node = this.#nodes[searchFrom];\n      if (node == null) {\n        if (!this.isComplete) return;\n        throw new InternalError(\"Can't find node in complete tree\");\n      }\n      const { type, value, path } = MPTree.#parseNode(node);\n      switch (type) {\n        case NodeType.Branch:\n          node\n            .slice(0, 16)\n            .map((t, idx): [typeof t, number] => [t, idx])\n            .filter(([t]) => t.length)\n            .forEach(([t, idx]) => rec(t.toString('hex'), key + idx.toString(16)));\n          if (value != null) entries.push([key, value]);\n          break;\n        case NodeType.Extension:\n          rec(node[1].toString('hex'), key + path);\n          break;\n        case NodeType.Leaf:\n          if (value == null) throw new UnexpectedTsError();\n          entries.push([key + path, value]);\n          break;\n        default:\n          throw new InternalError(`Unknown MPTree node type: ${type}`);\n      }\n    };\n    rec(this.#rootHash, '');\n    return entries;\n  }\n\n  toObject(): Record<Encoded.Generic<E>, EntUnpacked & { tag: T }> {\n    return Object.fromEntries(\n      this.#entriesRaw()\n        // TODO: remove after resolving https://github.com/aeternity/aeternity/issues/4066\n        .filter(([k]) => this.#encoding !== Encoding.ContractAddress || k.length !== 66)\n        .map(([k, v]) => [\n          encode(Buffer.from(k, 'hex'), this.#encoding),\n          this.#unpackEntry(encode(v, Encoding.Bytearray), this.#tag),\n        ]),\n    ) as Record<Encoded.Generic<E>, EntUnpacked & { tag: T }>;\n  }\n}\n\nexport default function genMPTreeField<E extends Encoding, T extends EntryTag>(\n  encoding: E,\n  tag: T,\n): {\n  serialize: (value: MPTree<E, T>) => MPTreeBinary;\n  deserialize: (value: MPTreeBinary, o: { unpackEntry: typeof unpackEntry }) => MPTree<E, T>;\n} {\n  return {\n    serialize(value) {\n      return value.serialize();\n    },\n\n    deserialize(value, { unpackEntry }) {\n      return new MPTree(value, encoding, tag, unpackEntry);\n    },\n  };\n}\n","import { EntryTag } from '../entry/constants.js';\nimport { encode, Encoding, decode } from '../../../utils/encoder.js';\nimport type { unpackEntry as unpackEntryType, packEntry as packEntryType } from '../entry/index.js';\n\ntype TagWrapping =\n  | EntryTag.AccountsMtree\n  | EntryTag.CallsMtree\n  | EntryTag.ChannelsMtree\n  | EntryTag.ContractsMtree\n  | EntryTag.NameserviceMtree\n  | EntryTag.OraclesMtree;\n\nexport default function genWrappedField<T extends TagWrapping>(\n  tag: T,\n): {\n  serialize: (\n    // TODO: replace with `(EntParams & { tag: T })['payload']`,\n    //  but fix TS2502 value is referenced directly or indirectly in its own type annotation\n    value: any,\n    options: { packEntry: typeof packEntryType },\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n    options: { unpackEntry: typeof unpackEntryType },\n    // TODO: replace with `(EntUnpacked & { tag: T })['payload']`,\n    //  TS2577 Return type annotation circularly references itself\n  ) => any;\n  recursiveType: true;\n} {\n  return {\n    serialize(payload, { packEntry }) {\n      return decode(packEntry({ tag, payload }));\n    },\n\n    deserialize(buffer, { unpackEntry }) {\n      return unpackEntry<TagWrapping>(encode(buffer, Encoding.Bytearray), tag).payload;\n    },\n\n    recursiveType: true,\n  };\n}\n","import SchemaTypes from '../SchemaTypes.js';\nimport abiVersion from '../field-types/abi-version.js';\nimport address, { idTagToEncoding } from '../field-types/address.js';\nimport array from '../field-types/array.js';\nimport boolean from '../field-types/boolean.js';\nimport coinAmount from '../field-types/coin-amount.js';\nimport ctVersion from '../field-types/ct-version.js';\nimport encoded from '../field-types/encoded.js';\nimport entry from '../field-types/entry.js';\nimport enumeration from '../field-types/enumeration.js';\nimport gasLimit from '../field-types/gas-limit.js';\nimport gasPrice from '../field-types/gas-price.js';\nimport map from '../field-types/map.js';\nimport mptree from '../field-types/mptree.js';\nimport pointers from '../field-types/pointers.js';\nimport raw from '../field-types/raw.js';\nimport shortUInt from '../field-types/short-u-int.js';\nimport shortUIntConst from '../field-types/short-u-int-const.js';\nimport string from '../field-types/string.js';\nimport uInt from '../field-types/u-int.js';\nimport wrapped from '../field-types/wrapped.js';\nimport { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { EntryTag, CallReturnType } from './constants.js';\n\ninterface EntryMtreeValueArray {\n  serialize: (\n    value: Array<(EntParams & { tag: EntryTag.MtreeValue }) | Uint8Array | Encoded.Transaction>,\n  ) => Buffer[];\n  deserialize: (value: Buffer[]) => Array<EntUnpacked & { tag: EntryTag.MtreeValue }>;\n  recursiveType: true;\n}\n\nconst entryMtreeValueArray = array(entry(EntryTag.MtreeValue)) as unknown as EntryMtreeValueArray;\n\ninterface MapContracts {\n  serialize: (\n    value: Record<Encoded.ContractAddress, EntParams & { tag: EntryTag.Contract }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.ContractAddress, EntUnpacked & { tag: EntryTag.Contract }>;\n  recursiveType: true;\n}\n\nconst mapContracts = map(Encoding.ContractAddress, EntryTag.Contract) as unknown as MapContracts;\n\ninterface MapAccounts {\n  serialize: (\n    value: Record<Encoded.AccountAddress, EntParams & { tag: EntryTag.Account }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.AccountAddress, EntUnpacked & { tag: EntryTag.Account }>;\n  recursiveType: true;\n}\n\nconst mapAccounts = map(Encoding.AccountAddress, EntryTag.Account) as unknown as MapAccounts;\n\ninterface MapCalls {\n  serialize: (\n    value: Record<Encoded.Bytearray, EntParams & { tag: EntryTag.ContractCall }>,\n  ) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.Bytearray, EntUnpacked & { tag: EntryTag.ContractCall }>;\n  recursiveType: true;\n}\n\nconst mapCalls = map(Encoding.Bytearray, EntryTag.ContractCall) as unknown as MapCalls;\n\ninterface MapChannels {\n  serialize: (value: Record<Encoded.Channel, EntParams & { tag: EntryTag.Channel }>) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Channel, EntUnpacked & { tag: EntryTag.Channel }>;\n  recursiveType: true;\n}\n\nconst mapChannels = map(Encoding.Channel, EntryTag.Channel) as unknown as MapChannels;\n\ninterface MapNames {\n  serialize: (value: Record<Encoded.Name, EntParams & { tag: EntryTag.Name }>) => Buffer;\n  deserialize: (value: Buffer) => Record<Encoded.Name, EntUnpacked & { tag: EntryTag.Name }>;\n  recursiveType: true;\n}\n\nconst mapNames = map(Encoding.Name, EntryTag.Name) as unknown as MapNames;\n\ninterface MapOracles {\n  serialize: (value: Record<Encoded.OracleAddress, EntParams & { tag: EntryTag.Oracle }>) => Buffer;\n  deserialize: (\n    value: Buffer,\n  ) => Record<Encoded.OracleAddress, EntUnpacked & { tag: EntryTag.Oracle }>;\n  recursiveType: true;\n}\n\nconst mapOracles = map(Encoding.OracleAddress, EntryTag.Oracle) as unknown as MapOracles;\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [\n  {\n    tag: shortUIntConst(EntryTag.Account),\n    version: shortUIntConst(1),\n    nonce: shortUInt,\n    balance: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Account),\n    version: shortUIntConst(2, true),\n    flags: uInt,\n    nonce: shortUInt,\n    balance: uInt,\n    gaContract: address(Encoding.ContractAddress, Encoding.Name),\n    gaAuthFun: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.Name),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    nameTtl: shortUInt,\n    status: raw,\n    /**\n     * a suggestion as to how long any clients should cache this information\n     */\n    clientTtl: shortUInt,\n    pointers,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Contract),\n    version: shortUIntConst(1, true),\n    owner: address(Encoding.AccountAddress),\n    ctVersion,\n    code: encoded(Encoding.ContractBytearray),\n    log: encoded(Encoding.ContractBytearray),\n    active: boolean,\n    referers: array(address(Encoding.AccountAddress)),\n    deposit: coinAmount,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ContractCall),\n    version: shortUIntConst(2, true),\n    callerId: address(Encoding.AccountAddress),\n    callerNonce: shortUInt,\n    height: shortUInt,\n    contractId: address(Encoding.ContractAddress),\n    // TODO: rename after resolving https://github.com/aeternity/protocol/issues/506\n    gasPrice: uInt,\n    gasUsed: shortUInt,\n    returnValue: encoded(Encoding.ContractBytearray),\n    returnType: enumeration(CallReturnType),\n    // TODO: add serialization for\n    //  <log> :: [ { <address> :: id, [ <topics> :: binary() }, <data> :: binary() } ]\n    log: array(raw),\n  },\n  {\n    tag: shortUIntConst(EntryTag.Oracle),\n    version: shortUIntConst(1, true),\n    accountId: address(Encoding.AccountAddress),\n    queryFormat: string,\n    responseFormat: string,\n    queryFee: coinAmount,\n    oracleTtlValue: shortUInt,\n    abiVersion,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Channel),\n    version: shortUIntConst(3, true),\n    initiator: address(Encoding.AccountAddress),\n    responder: address(Encoding.AccountAddress),\n    channelAmount: uInt,\n    initiatorAmount: uInt,\n    responderAmount: uInt,\n    channelReserve: uInt,\n    initiatorDelegateIds: array(address(...idTagToEncoding)),\n    responderDelegateIds: array(address(...idTagToEncoding)),\n    stateHash: encoded(Encoding.State),\n    round: shortUInt,\n    soloRound: uInt,\n    lockPeriod: uInt,\n    lockedUntil: uInt,\n    initiatorAuth: encoded(Encoding.ContractBytearray),\n    responderAuth: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateTransfer),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    to: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateDeposit),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateWithdraw),\n    version: shortUIntConst(1, true),\n    from: address(Encoding.AccountAddress),\n    amount: uInt,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCreateContract),\n    version: shortUIntConst(1, true),\n    owner: address(Encoding.AccountAddress),\n    ctVersion,\n    code: encoded(Encoding.ContractBytearray),\n    deposit: uInt,\n    callData: encoded(Encoding.ContractBytearray),\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelOffChainUpdateCallContract),\n    version: shortUIntConst(1, true),\n    caller: address(Encoding.AccountAddress),\n    contract: address(Encoding.ContractAddress),\n    abiVersion,\n    amount: uInt,\n    callData: encoded(Encoding.ContractBytearray),\n    callStack: raw,\n    gasPrice,\n    gasLimit,\n  },\n  {\n    tag: shortUIntConst(EntryTag.TreesPoi),\n    version: shortUIntConst(1, true),\n    // TODO: inline an extra wrapping array after resolving https://github.com/aeternity/protocol/issues/505\n    accounts: array(mptree(Encoding.AccountAddress, EntryTag.Account)),\n    calls: array(mptree(Encoding.Bytearray, EntryTag.ContractCall)),\n    channels: array(mptree(Encoding.Channel, EntryTag.Channel)),\n    contracts: array(mptree(Encoding.ContractAddress, EntryTag.Contract)),\n    ns: array(mptree(Encoding.Name, EntryTag.Name)),\n    oracles: array(mptree(Encoding.OracleAddress, EntryTag.Oracle)),\n  },\n  {\n    tag: shortUIntConst(EntryTag.StateTrees),\n    version: shortUIntConst(0, true),\n    contracts: wrapped(EntryTag.ContractsMtree) as unknown as MapContracts,\n    calls: wrapped(EntryTag.CallsMtree) as unknown as MapCalls,\n    channels: wrapped(EntryTag.ChannelsMtree) as unknown as MapChannels,\n    ns: wrapped(EntryTag.NameserviceMtree) as unknown as MapNames,\n    oracles: wrapped(EntryTag.OraclesMtree) as unknown as MapOracles,\n    accounts: wrapped(EntryTag.AccountsMtree) as unknown as MapAccounts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.Mtree),\n    version: shortUIntConst(1, true),\n    values: entryMtreeValueArray,\n  },\n  {\n    tag: shortUIntConst(EntryTag.MtreeValue),\n    version: shortUIntConst(1, true),\n    key: raw,\n    value: raw,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ContractsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapContracts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.CallsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapCalls,\n  },\n  {\n    tag: shortUIntConst(EntryTag.ChannelsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapChannels,\n  },\n  {\n    tag: shortUIntConst(EntryTag.NameserviceMtree),\n    version: shortUIntConst(1, true),\n    payload: mapNames,\n  },\n  {\n    tag: shortUIntConst(EntryTag.OraclesMtree),\n    version: shortUIntConst(1, true),\n    payload: mapOracles,\n  },\n  {\n    tag: shortUIntConst(EntryTag.AccountsMtree),\n    version: shortUIntConst(1, true),\n    payload: mapAccounts,\n  },\n  {\n    tag: shortUIntConst(EntryTag.GaMetaTxAuthData),\n    version: shortUIntConst(1, true),\n    fee: coinAmount,\n    gasPrice,\n    txHash: encoded(Encoding.TxHash),\n  },\n] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type EntParams = Schemas['TxParams'];\nexport type EntUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { packRecord, unpackRecord } from '../common.js';\nimport { schemas } from './schema.js';\nimport { EntryTag } from './constants.js';\nimport { EntParams, EntUnpacked } from './schema.generated.js';\n\nconst encodingTag = [\n  [EntryTag.CallsMtree, Encoding.CallStateTree],\n  [EntryTag.StateTrees, Encoding.StateTrees],\n  [EntryTag.TreesPoi, Encoding.Poi],\n] as const;\n\nexport function packEntry(params: EntParams & { tag: EntryTag.CallsMtree }): Encoded.CallStateTree;\nexport function packEntry(params: EntParams & { tag: EntryTag.StateTrees }): Encoded.StateTrees;\nexport function packEntry(params: EntParams & { tag: EntryTag.TreesPoi }): Encoded.Poi;\n/**\n * Pack entry\n * @category entry builder\n * @param params - Params of entry\n * @returns Encoded entry\n */\nexport function packEntry(params: EntParams): Encoded.Any;\nexport function packEntry(params: EntParams): Encoded.Any {\n  const encoding = encodingTag.find(([tag]) => tag === params.tag)?.[1] ?? Encoding.Bytearray;\n  return packRecord(schemas, EntryTag, params, { packEntry }, encoding);\n}\n\nexport function unpackEntry(\n  encoded: Encoded.CallStateTree,\n): EntUnpacked & { tag: EntryTag.CallsMtree };\nexport function unpackEntry(\n  encoded: Encoded.StateTrees,\n): EntUnpacked & { tag: EntryTag.StateTrees };\nexport function unpackEntry(encoded: Encoded.Poi): EntUnpacked & { tag: EntryTag.TreesPoi };\n/**\n * Unpack entry\n * @category entry builder\n * @param encoded - Encoded entry\n * @param expectedTag - Expected entry type\n * @returns Params of entry\n */\nexport function unpackEntry<T extends EntryTag>(\n  encoded: Encoded.Any,\n  expectedTag?: T,\n): EntUnpacked & { tag: T };\nexport function unpackEntry(encoded: Encoded.Any, expectedTag?: EntryTag): EntUnpacked {\n  expectedTag ??= encodingTag.find(([, enc]) => encoded.startsWith(enc))?.[0];\n  return unpackRecord(schemas, EntryTag, encoded, expectedTag, { unpackEntry }) as any;\n}\n","import { decode, encode, Encoded, Encoding } from '../../utils/encoder.js';\nimport { hash } from '../../utils/crypto.js';\nimport { Field } from './field-types/interface.js';\nimport { txSchema } from './schema.js';\nimport { TxUnpacked, TxParams, TxParamsAsync } from './schema.generated.js';\nimport { Tag } from './constants.js';\nimport { buildContractId } from './helpers.js';\nimport { getSchema as getSchemaCommon, packRecord, unpackRecord } from './common.js';\nimport { ArgumentError } from '../../utils/errors.js';\nimport { packEntry, unpackEntry } from './entry/index.js';\n\n/**\n * JavaScript-based Transaction builder\n */\n\nexport function getSchema(tag: Tag, version?: number): Array<[string, Field]> {\n  return getSchemaCommon(txSchema, Tag, tag, version);\n}\n\ntype TxEncoding =\n  | Encoding.Transaction\n  | Encoding.Poi\n  | Encoding.StateTrees\n  | Encoding.CallStateTree;\n\n/**\n * Build transaction\n * @category transaction builder\n * @param params - Transaction params\n */\nexport function buildTx(params: TxParams): Encoded.Transaction {\n  return packRecord(\n    txSchema,\n    Tag,\n    params,\n    {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      unpackTx,\n      buildTx,\n      rebuildTx: (overrideParams: any) => buildTx({ ...params, ...overrideParams }),\n      packEntry,\n    },\n    Encoding.Transaction,\n  );\n}\n\nexport type BuildTxOptions<TxType extends Tag, OmitFields extends string> = Omit<\n  TxParamsAsync & { tag: TxType },\n  'tag' | OmitFields\n>;\n\n// TODO: require onNode because it is the only reason this builder is async [breaking change]\n/**\n * Build transaction async (may request node for additional data)\n * @category transaction builder\n * @param params - Transaction params\n * @returns tx_-encoded transaction\n */\nexport async function buildTxAsync(params: TxParamsAsync): Promise<Encoded.Transaction> {\n  await Promise.all(\n    getSchema(params.tag, params.version).map(async ([key, field]) => {\n      if (field.prepare == null) return;\n      // @ts-expect-error the type of `params[key]` can't be determined accurately\n      params[key] = await field.prepare(params[key], params, params);\n    }),\n  );\n\n  // @ts-expect-error after preparation properties should be compatible with sync tx builder\n  return buildTx(params);\n}\n\n/**\n * Unpack transaction encoded as string\n * @category transaction builder\n * @param encodedTx - Encoded transaction\n * @param txType - Expected transaction type\n * @returns Transaction params\n */\nexport function unpackTx<TxType extends Tag>(\n  encodedTx: Encoded.Generic<TxEncoding>,\n  txType?: TxType,\n): TxUnpacked & { tag: TxType } {\n  return unpackRecord(txSchema, Tag, encodedTx, txType, { unpackTx, unpackEntry }) as any;\n}\n\n/**\n * Build a transaction hash\n * @category transaction builder\n * @param rawTx - base64 or rlp encoded transaction\n * @returns Transaction hash\n */\nexport function buildTxHash(rawTx: Encoded.Transaction | Uint8Array): Encoded.TxHash {\n  const data = typeof rawTx === 'string' && rawTx.startsWith('tx_') ? decode(rawTx) : rawTx;\n  return encode(hash(data), Encoding.TxHash);\n}\n\n/**\n * Build a contract public key by contractCreateTx, gaAttach or signedTx\n * @category contract\n * @param contractTx - Transaction\n * @returns Contract public key\n */\nexport function buildContractIdByContractTx(\n  contractTx: Encoded.Transaction,\n): Encoded.ContractAddress {\n  let params = unpackTx(contractTx);\n  if (Tag.SignedTx === params.tag) params = params.encodedTx;\n  if (Tag.ContractCreateTx !== params.tag && Tag.GaAttachTx !== params.tag) {\n    throw new ArgumentError('contractTx', 'a contractCreateTx or gaAttach', params.tag);\n  }\n  return buildContractId(params.ownerId, params.nonce);\n}\n","import type Transport from '@ledgerhq/hw-transport';\nimport AccountBase from './Base.js';\nimport { ArgumentError, NotImplementedError } from '../utils/errors.js';\nimport { decode, Encoded } from '../utils/encoder.js';\nimport { buildTx } from '../tx/builder/index.js';\nimport { Tag } from '../tx/builder/constants.js';\n\nexport const CLA = 0xe0;\nexport const GET_ADDRESS = 0x02;\nexport const SIGN_TRANSACTION = 0x04;\nexport const GET_APP_CONFIGURATION = 0x06;\nexport const SIGN_PERSONAL_MESSAGE = 0x08;\n\n/**\n * Ledger wallet account class\n */\nexport default class AccountLedger extends AccountBase {\n  /**\n   * @param transport - Connection to Ledger to use\n   * @param index - Index of account\n   * @param address - Address of account\n   */\n  constructor(\n    readonly transport: Transport,\n    readonly index: number,\n    override readonly address: Encoded.AccountAddress,\n  ) {\n    super();\n    transport.decorateAppAPIMethods(this, ['signTransaction', 'signMessage'], 'w0w');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async sign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using Ledger HW');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signTypedData(): Promise<Encoded.Signature> {\n    throw new NotImplementedError('Typed data signing using Ledger HW');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signDelegation(): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signing delegation using Ledger HW');\n  }\n\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (innerTx != null) throw new NotImplementedError('innerTx option in AccountLedger');\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n\n    const rawTx = decode(tx);\n    let offset = 0;\n    const headerLength = 4 + 1 + 4;\n    const networkIdBuffer = Buffer.from(networkId);\n    const toSend = [];\n    while (offset !== rawTx.length) {\n      const maxChunkSize = offset === 0 ? 150 - headerLength - networkIdBuffer.length : 150;\n      const chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n      const buffer = Buffer.alloc(\n        offset === 0 ? headerLength + networkIdBuffer.length + chunkSize : chunkSize,\n      );\n      if (offset === 0) {\n        let bufferOffset = buffer.writeUInt32BE(this.index, 0);\n        bufferOffset = buffer.writeUInt32BE(rawTx.length, bufferOffset);\n        bufferOffset = buffer.writeUInt8(networkIdBuffer.length, bufferOffset);\n        bufferOffset += networkIdBuffer.copy(buffer, bufferOffset, 0, networkIdBuffer.length);\n        rawTx.copy(buffer, bufferOffset, 0, 150 - bufferOffset);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    const response = await toSend.reduce(\n      async (previous, data, i) => {\n        await previous;\n        return this.transport.send(CLA, SIGN_TRANSACTION, i === 0 ? 0x00 : 0x80, 0x00, data);\n      },\n      Promise.resolve(Buffer.alloc(0)),\n    );\n    const signatures = [response.subarray(0, 64)];\n\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rawTx, signatures });\n  }\n\n  override async signMessage(messageStr: string): Promise<Uint8Array> {\n    let offset = 0;\n    const message = Buffer.from(messageStr);\n    const toSend = [];\n    while (offset !== message.length) {\n      const maxChunkSize = offset === 0 ? 150 - 4 - 4 : 150;\n      const chunkSize =\n        offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n      const buffer = Buffer.alloc(offset === 0 ? 4 + 4 + chunkSize : chunkSize);\n      if (offset === 0) {\n        buffer.writeUInt32BE(this.index, 0);\n        buffer.writeUInt32BE(message.length, 4);\n        message.copy(buffer, 4 + 4, offset, offset + chunkSize);\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n    const response = await toSend.reduce(\n      async (previous, data, i) => {\n        await previous;\n        return this.transport.send(CLA, SIGN_PERSONAL_MESSAGE, i === 0 ? 0x00 : 0x80, 0x00, data);\n      },\n      Promise.resolve(Buffer.alloc(0)),\n    );\n    return response.subarray(0, 64);\n  }\n}\n","function verCmp(a: string, b: string): number {\n  const getComponents = (v: string): number[] =>\n    v\n      .split(/[-+]/)[0]\n      .split('.')\n      .map((i) => +i);\n\n  const aComponents = getComponents(a);\n  const bComponents = getComponents(b);\n\n  const base = Math.max(...aComponents, ...bComponents) + 1;\n  const componentsToNumber = (components: number[]): number =>\n    components.reverse().reduce((acc, n, idx) => acc + n * base ** idx, 0);\n\n  return componentsToNumber(aComponents) - componentsToNumber(bComponents);\n}\n\nexport default function semverSatisfies(\n  version: string,\n  geVersion: string,\n  ltVersion?: string,\n): boolean {\n  return verCmp(version, geVersion) >= 0 && (ltVersion == null || verCmp(version, ltVersion) < 0);\n}\n","import Node from '../Node.js';\nimport AccountBase from './Base.js';\n\n/**\n * A factory class that generates instances of AccountBase by index.\n */\nexport default abstract class AccountBaseFactory {\n  /**\n   * Get an instance of AccountBase for a given account index.\n   * @param accountIndex - Index of account\n   */\n  abstract initialize(accountIndex: number): Promise<AccountBase>;\n\n  /**\n   * Discovers accounts in set that already have been used (has any on-chain transactions).\n   * It returns an empty array if none of accounts been used.\n   * If a used account is preceded by an unused account then it would be ignored.\n   * @param node - Instance of Node to get account information from\n   */\n  async discover(node: Node): Promise<AccountBase[]> {\n    let index = 0;\n    const result = [];\n    let account;\n    do {\n      if (account != null) result.push(account);\n      account = await this.initialize(index);\n      index += 1;\n    } while (\n      await node.getAccountByPubkey(account.address).then(\n        () => true,\n        () => false,\n      )\n    );\n    return result;\n  }\n}\n","import type Transport from '@ledgerhq/hw-transport';\nimport AccountLedger, { CLA, GET_ADDRESS, GET_APP_CONFIGURATION } from './Ledger.js';\nimport { UnsupportedVersionError } from '../utils/errors.js';\nimport { Encoded } from '../utils/encoder.js';\nimport semverSatisfies from '../utils/semver-satisfies.js';\nimport AccountBaseFactory from './BaseFactory.js';\n\ninterface AppConfiguration {\n  version: string;\n}\n\n/**\n * A factory class that generates instances of AccountLedger based on provided transport.\n */\nexport default class AccountLedgerFactory extends AccountBaseFactory {\n  /**\n   * @param transport - Connection to Ledger to use\n   */\n  constructor(readonly transport: Transport) {\n    super();\n    transport.decorateAppAPIMethods(this, ['getAddress', 'getAppConfiguration'], 'w0w');\n  }\n\n  #ensureReadyPromise?: Promise<void>;\n\n  /**\n   * It throws an exception if Aeternity app on Ledger has an incompatible version, not opened or\n   * not installed.\n   */\n  async ensureReady(): Promise<void> {\n    const { version } = await this.#getAppConfiguration();\n    const args = [version, '0.4.4', '0.5.0'] as const;\n    if (!semverSatisfies(...args))\n      throw new UnsupportedVersionError('Aeternity app on Ledger', ...args);\n    this.#ensureReadyPromise = Promise.resolve();\n  }\n\n  async #ensureReady(): Promise<void> {\n    this.#ensureReadyPromise ??= this.ensureReady();\n    return this.#ensureReadyPromise;\n  }\n\n  async #getAppConfiguration(): Promise<AppConfiguration> {\n    const response = await this.transport.send(CLA, GET_APP_CONFIGURATION, 0x00, 0x00);\n    return {\n      version: [response[1], response[2], response[3]].join('.'),\n    };\n  }\n\n  /**\n   * @returns the version of Aeternity app installed on Ledger wallet\n   */\n  async getAppConfiguration(): Promise<AppConfiguration> {\n    return this.#getAppConfiguration();\n  }\n\n  /**\n   * Get `ak_`-prefixed address for a given account index.\n   * @param accountIndex - Index of account\n   * @param verify - Ask user to confirm address by showing it on the device screen\n   */\n  async getAddress(accountIndex: number, verify = false): Promise<Encoded.AccountAddress> {\n    await this.#ensureReady();\n    const buffer = Buffer.alloc(4);\n    buffer.writeUInt32BE(accountIndex, 0);\n    const response = await this.transport.send(\n      CLA,\n      GET_ADDRESS,\n      verify ? 0x01 : 0x00,\n      0x00,\n      buffer,\n    );\n    const addressLength = response[0];\n    return response.subarray(1, 1 + addressLength).toString('ascii') as Encoded.AccountAddress;\n  }\n\n  /**\n   * Get an instance of AccountLedger for a given account index.\n   * @param accountIndex - Index of account\n   */\n  async initialize(accountIndex: number): Promise<AccountLedger> {\n    return new AccountLedger(this.transport, accountIndex, await this.getAddress(accountIndex));\n  }\n}\n","import { render } from \"./ConnectLedger.vue?vue&type=template&id=1793f88a\"\nimport script from \"./ConnectLedger.vue?vue&type=script&lang=js\"\nexport * from \"./ConnectLedger.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"group\">\n    <button v-if=\"!accountFactory\" @click=\"connect\">Connect</button>\n    <template v-else>\n      <button @click=\"disconnect\">Disconnect</button>\n      <button @click=\"installSnap\">Install Aeternity Snap</button>\n      <button @click=\"addAccount\">Add Account</button>\n      <button v-if=\"accounts.length > 1\" @click=\"switchAccount\">Switch Account</button>\n      <button @click=\"switchNode\">Switch Node</button>\n      <div v-if=\"accounts.length\">\n        <div>Accounts</div>\n        <div>{{ accounts.map((account) => account.address.slice(0, 8)).join(', ') }}</div>\n      </div>\n    </template>\n    <div v-if=\"status\">\n      <div>Status</div>\n      <Value :value=\"status\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { AccountMetamaskFactory, UnsupportedPlatformError } from '@aeternity/aepp-sdk';\nimport { mapState } from 'vuex';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  created() {\n    this.accountFactory = null;\n  },\n  data: () => ({\n    status: '',\n    accounts: [],\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    connect() {\n      try {\n        this.status = 'Waiting for MetaMask response';\n        this.accountFactory = new AccountMetamaskFactory();\n        this.status = '';\n      } catch (error) {\n        if (error instanceof UnsupportedPlatformError) {\n          this.status = error.message;\n          return;\n        }\n        this.status = '';\n        throw error;\n      }\n    },\n    disconnect() {\n      this.accountFactory = null;\n      this.accounts = [];\n      this.$store.commit('setAddress', undefined);\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n    },\n    async installSnap() {\n      try {\n        this.status = 'Waiting for MetaMask response';\n        this.status = await this.accountFactory.installSnap();\n      } catch (error) {\n        if (error instanceof UnsupportedPlatformError) {\n          this.status = error.message;\n          return;\n        }\n        this.status = '';\n        if (error.code === 4001) return;\n        throw error;\n      }\n    },\n    async addAccount() {\n      try {\n        this.status = 'Waiting for MetaMask response';\n        const idx = this.accounts.length;\n        const account = await this.accountFactory.initialize(idx);\n        this.accounts.push(account);\n        this.setAccount(this.accounts[0]);\n      } catch (error) {\n        if (error.code === 4001) return;\n        throw error;\n      } finally {\n        this.status = '';\n      }\n    },\n    switchAccount() {\n      this.accounts.push(this.accounts.shift());\n      this.setAccount(this.accounts[0]);\n    },\n    async switchNode() {\n      const networkId = this.$store.state.networkId === 'ae_mainnet' ? 'ae_uat' : 'ae_mainnet';\n      const [{ name }] = (await this.aeSdk.getNodesInPool()).filter(\n        (node) => node.nodeNetworkId === networkId,\n      );\n      this.aeSdk.selectNode(name);\n      this.$store.commit('setNetworkId', networkId);\n    },\n    setAccount(account) {\n      if (Object.keys(this.aeSdk.accounts).length) this.aeSdk.removeAccount(this.aeSdk.address);\n      this.aeSdk.addAccount(account, { select: true });\n      this.$store.commit('setAddress', account.address);\n    },\n  },\n};\n</script>\n","import type { BaseProvider } from '@metamask/providers';\nimport AccountBase from './Base.js';\nimport { Encoded } from '../utils/encoder.js';\nimport { ArgumentError, InternalError, NotImplementedError } from '../utils/errors.js';\n\nexport const snapId = 'npm:@aeternity-snap/plugin';\n\nexport async function invokeSnap<R>(\n  provider: BaseProvider,\n  method: string,\n  params: unknown,\n  key: string,\n): Promise<R> {\n  const response = await provider.request<{ [k in string]: unknown }>({\n    method: 'wallet_invokeSnap',\n    params: { snapId, request: { method, params } },\n  });\n  if (response == null) throw new InternalError('Empty MetaMask response');\n  if (!(key in response)) {\n    throw new InternalError(`Key ${key} missed in response ${JSON.stringify(response)}`);\n  }\n  return response[key] as R;\n}\n\n/**\n * Account connected to Aeternity Snap for MetaMask\n * https://www.npmjs.com/package/\\@aeternity-snap/plugin\n */\nexport default class AccountMetamask extends AccountBase {\n  readonly provider: BaseProvider;\n\n  readonly index: number;\n\n  override readonly address: Encoded.AccountAddress;\n\n  /**\n   * @param address - Address of account\n   */\n  constructor(provider: BaseProvider, index: number, address: Encoded.AccountAddress) {\n    super();\n    this.provider = provider;\n    this.index = index;\n    this.address = address;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async sign(): Promise<Uint8Array> {\n    throw new NotImplementedError('RAW signing using MetaMask');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signTypedData(): Promise<Encoded.Signature> {\n    throw new NotImplementedError('Typed data signing using MetaMask');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signDelegation(): Promise<Encoded.Signature> {\n    throw new NotImplementedError('signing delegation using MetaMask');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signTransaction(\n    tx: Encoded.Transaction,\n    { innerTx, networkId }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (innerTx != null) throw new NotImplementedError('innerTx option in AccountMetamask');\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n\n    return invokeSnap<Encoded.Transaction>(\n      this.provider,\n      'signTransaction',\n      { derivationPath: [`${this.index}'`, \"0'\", \"0'\"], tx, networkId },\n      'signedTx',\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  override async signMessage(message: string): Promise<Uint8Array> {\n    const signature = await invokeSnap<string>(\n      this.provider,\n      'signMessage',\n      {\n        derivationPath: [`${this.index}'`, \"0'\", \"0'\"],\n        message: Buffer.from(message).toString('base64'),\n      },\n      'signature',\n    );\n    return Buffer.from(signature, 'base64');\n  }\n}\n","import type { BaseProvider } from '@metamask/providers';\nimport {\n  InternalError,\n  UnsupportedPlatformError,\n  UnsupportedVersionError,\n} from '../utils/errors.js';\nimport { Encoded } from '../utils/encoder.js';\nimport semverSatisfies from '../utils/semver-satisfies.js';\nimport AccountBaseFactory from './BaseFactory.js';\nimport AccountMetamask, { invokeSnap, snapId } from './Metamask.js';\n\nconst snapMinVersion = '0.0.9';\nconst snapMaxVersion = '0.1.0';\n\ninterface SnapDetails {\n  blocked: boolean;\n  enabled: boolean;\n  id: typeof snapId;\n  version: string;\n  initialPermissions: Record<string, unknown>;\n}\n\n/**\n * A factory class that generates instances of AccountMetamask.\n */\nexport default class AccountMetamaskFactory extends AccountBaseFactory {\n  readonly provider: BaseProvider;\n\n  /**\n   * @param provider - Connection to MetaMask to use\n   */\n  constructor(provider?: BaseProvider) {\n    super();\n    if (provider != null) {\n      this.provider = provider;\n      return;\n    }\n    if (window == null) {\n      throw new UnsupportedPlatformError(\n        'Window object not found, you can run AccountMetamaskFactory only in browser or setup a provider',\n      );\n    }\n    if (!('ethereum' in window) || window.ethereum == null) {\n      throw new UnsupportedPlatformError(\n        '`ethereum` object not found, you can run AccountMetamaskFactory only with Metamask enabled or setup a provider',\n      );\n    }\n    this.provider = window.ethereum as BaseProvider;\n  }\n\n  /**\n   * It throws an exception if MetaMask has an incompatible version.\n   */\n  async #ensureMetamaskSupported(): Promise<void> {\n    const version = await this.provider.request<string>({ method: 'web3_clientVersion' });\n    if (version == null) throw new InternalError(\"Can't get Ethereum Provider version\");\n    const metamaskPrefix = 'MetaMask/v';\n    if (!version.startsWith(metamaskPrefix)) {\n      throw new UnsupportedPlatformError(`Expected Metamask, got ${version} instead`);\n    }\n    const args = [version.slice(metamaskPrefix.length), '12.2.4'] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError('Metamask', ...args);\n  }\n\n  #ensureReadyPromise?: Promise<void>;\n\n  /**\n   * Request MetaMask to install Aeternity snap.\n   */\n  async installSnap(): Promise<SnapDetails> {\n    await this.#ensureMetamaskSupported();\n    const details = (await this.provider.request({\n      method: 'wallet_requestSnaps',\n      params: { [snapId]: { version: snapMinVersion } },\n    })) as { [key in typeof snapId]: SnapDetails };\n    this.#ensureReadyPromise = Promise.resolve();\n    return details[snapId];\n  }\n\n  /**\n   * It throws an exception if MetaMask or Aeternity snap has an incompatible version or is not\n   * installed.\n   */\n  async ensureReady(): Promise<void> {\n    const snapVersion = await this.getSnapVersion();\n    const args = [snapVersion, snapMinVersion, snapMaxVersion] as const;\n    if (!semverSatisfies(...args))\n      throw new UnsupportedVersionError('Aeternity snap in MetaMask', ...args);\n    this.#ensureReadyPromise = Promise.resolve();\n  }\n\n  async #ensureReady(): Promise<void> {\n    this.#ensureReadyPromise ??= this.ensureReady();\n    return this.#ensureReadyPromise;\n  }\n\n  /**\n   * @returns the version of snap installed in MetaMask\n   */\n  async getSnapVersion(): Promise<string> {\n    await this.#ensureMetamaskSupported();\n    const snaps = (await this.provider.request({ method: 'wallet_getSnaps' })) as Record<\n      string,\n      { version: string }\n    >;\n    const version = snaps[snapId]?.version;\n    if (version == null)\n      throw new UnsupportedPlatformError('Aeternity snap is not installed to MetaMask');\n    return version;\n  }\n\n  /**\n   * Get an instance of AccountMetaMask for a given account index.\n   * @param accountIndex - Index of account\n   */\n  async initialize(accountIndex: number): Promise<AccountMetamask> {\n    await this.#ensureReady();\n    const address = await invokeSnap<Encoded.AccountAddress>(\n      this.provider,\n      'getPublicKey',\n      { derivationPath: [`${accountIndex}'`, \"0'\", \"0'\"] },\n      'publicKey',\n    );\n    return new AccountMetamask(this.provider, accountIndex, address);\n  }\n}\n","import { render } from \"./ConnectMetamask.vue?vue&type=template&id=15063c19\"\nimport script from \"./ConnectMetamask.vue?vue&type=script&lang=js\"\nexport * from \"./ConnectMetamask.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Connect.vue?vue&type=template&id=263da7b4\"\nimport script from \"./Connect.vue?vue&type=script&lang=js\"\nexport * from \"./Connect.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>General information</h2>\n  <div class=\"group\">\n    <div>\n      <div>Address</div>\n      <div>{{ address }}</div>\n    </div>\n    <div>\n      <div>Balance</div>\n      <Value :value=\"balancePromise\" />\n    </div>\n    <div>\n      <div>Height</div>\n      <Value :value=\"heightPromise\" />\n    </div>\n    <div>\n      <div>Node info</div>\n      <Value :value=\"nodeInfoPromise\" />\n    </div>\n    <div>\n      <div>Compiler version</div>\n      <Value :value=\"compilerVersionPromise\" />\n    </div>\n  </div>\n\n  <SpendCoins />\n\n  <MessageSign />\n\n  <DataSign />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport Value from './components/Value.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport DataSign from './components/DataSign.vue';\n\nexport default {\n  components: {\n    Value,\n    SpendCoins,\n    MessageSign,\n    DataSign,\n  },\n  data: () => ({\n    balancePromise: null,\n    heightPromise: null,\n    nodeInfoPromise: null,\n    compilerVersionPromise: null,\n  }),\n  computed: mapState(['aeSdk', 'address', 'networkId']),\n  mounted() {\n    this.$watch(\n      ({ aeSdk, address, networkId }) => [aeSdk, address, networkId],\n      ([aeSdk, address]) => {\n        this.compilerVersionPromise = aeSdk.compilerApi.version();\n        this.balancePromise = address\n          ? aeSdk.getBalance(address)\n          : Promise.reject(new Error('Address not available'));\n        this.heightPromise = aeSdk.getHeight();\n        this.nodeInfoPromise = aeSdk.getNodeInfo();\n      },\n      { immediate: true },\n    );\n  },\n};\n</script>\n","<template>\n  <h2>Spend coins</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input v-model=\"spendTo\" placeholder=\"ak_...\" />\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\" /></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\" /></div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          spendPromise = spend();\n        }\n      \"\n    >\n      Spend\n    </button>\n    <div v-if=\"spendPromise\">\n      <div>Spend result</div>\n      <Value :value=\"spendPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    spendPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    spend() {\n      return this.aeSdk.spend(this.spendAmount, this.spendTo, {\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n    },\n  },\n};\n</script>\n","import { render } from \"./SpendCoins.vue?vue&type=template&id=634716bc\"\nimport script from \"./SpendCoins.vue?vue&type=script&lang=js\"\nexport * from \"./SpendCoins.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <FieldAction\n    title=\"Sign a message\"\n    arg-title=\"Message to sign\"\n    arg-placeholder=\"I want to <action name> at <time> on <network name>\"\n    action-title=\"Sign message\"\n    :action-handler=\"messageSign\"\n    result-title=\"Message sign result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './FieldAction.vue';\n\nexport default {\n  components: { FieldAction },\n  computed: mapState(['aeSdk']),\n  methods: {\n    messageSign(messageToSign) {\n      return this.aeSdk.signMessage(messageToSign);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>{{ title }}</h2>\n  <div class=\"group\">\n    <div v-if=\"argTitle\">\n      <div>{{ argTitle }}</div>\n      <div>\n        <input v-model=\"argValue\" :placeholder=\"argPlaceholder\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          promise = actionHandler(argValue);\n        }\n      \"\n    >\n      {{ actionTitle }}\n    </button>\n    <div v-if=\"promise\">\n      <div>{{ resultTitle }}</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  props: {\n    title: { type: String, required: true },\n    argTitle: { type: String, required: false },\n    argPlaceholder: { type: String, required: false },\n    argDefaultValue: { type: String, required: false },\n    actionTitle: { type: String, required: true },\n    actionHandler: { type: Function, required: true },\n    resultTitle: { type: String, required: true },\n  },\n  data() {\n    return {\n      argValue: this.argDefaultValue,\n      promise: null,\n    };\n  },\n};\n</script>\n","import { render } from \"./FieldAction.vue?vue&type=template&id=a3dd1e14\"\nimport script from \"./FieldAction.vue?vue&type=script&lang=js\"\nexport * from \"./FieldAction.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./MessageSign.vue?vue&type=template&id=2b567dd0\"\nimport script from \"./MessageSign.vue?vue&type=script&lang=js\"\nexport * from \"./MessageSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign raw data (unsafe)</h2>\n  <div class=\"group\">\n    <div>\n      <div>Data as text</div>\n      <div>\n        <input\n          :value=\"dataBuffer.toString()\"\n          @input=\"setData($event.target.value)\"\n          placeholder=\"Plain text\"\n        />\n      </div>\n    </div>\n    <div>\n      <div>Data as hex</div>\n      <div>\n        <input\n          :value=\"dataBuffer.toString('hex')\"\n          @input=\"setData($event.target.value, 'hex')\"\n          placeholder=\"hex-encoded data\"\n        />\n      </div>\n    </div>\n    <div>\n      <div>Data encoded</div>\n      <div>\n        <input v-model=\"data\" placeholder=\"ba_-encoded data\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          promise = dataSign();\n        }\n      \"\n    >\n      Sign data\n    </button>\n    <div v-if=\"promise\">\n      <div>Data sign result</div>\n      <Value :value=\"promise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { Buffer } from 'buffer';\nimport { decode, encode, Encoding } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nconst emptyData = encode(Buffer.from([]), Encoding.Bytearray);\n\nexport default {\n  components: { Value },\n  computed: {\n    ...mapState(['aeSdk']),\n    dataBuffer() {\n      try {\n        return Buffer.from(decode(this.data || emptyData));\n      } catch (error) {\n        return Buffer.from([]);\n      }\n    },\n  },\n  data: () => ({\n    data: '',\n    promise: null,\n  }),\n  methods: {\n    setData(data, type) {\n      this.data = encode(Buffer.from(data, type), Encoding.Bytearray);\n    },\n    dataSign() {\n      return this.aeSdk.sign(decode(this.data || emptyData));\n    },\n  },\n};\n</script>\n","import { render } from \"./DataSign.vue?vue&type=template&id=18aa9f7a\"\nimport script from \"./DataSign.vue?vue&type=script&lang=js\"\nexport * from \"./DataSign.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Basic.vue?vue&type=template&id=355d1bbc\"\nimport script from \"./Basic.vue?vue&type=script&lang=js\"\nexport * from \"./Basic.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Contract Instance</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract Source Code</div>\n      <div>\n        <textarea v-model=\"contractSourceCode\" placeholder=\"Contact source code\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          createPromise = create();\n        }\n      \"\n    >\n      Create\n    </button>\n    <div v-if=\"createPromise\">\n      <div>Contract Instance</div>\n      <Value :value=\"createPromise.then(() => 'Ready')\" />\n    </div>\n  </div>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Compile Contract\"\n      action-title=\"Compile\"\n      :action-handler=\"compile\"\n      result-title=\"Bytecode\"\n    />\n  </template>\n\n  <template v-if=\"contract\">\n    <FieldAction\n      title=\"Deploy Contract\"\n      arg-title=\"Deploy argument\"\n      arg-placeholder=\"Deploy argument\"\n      arg-default-value=\"5\"\n      action-title=\"Deploy\"\n      :action-handler=\"deploy\"\n      result-title=\"Deployed Contract\"\n    />\n  </template>\n\n  <template v-if=\"deployPromise\">\n    <FieldAction\n      title=\"Call Contract on chain\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"7\"\n      action-title=\"Call\"\n      :action-handler=\"callOnChain\"\n      result-title=\"Call Result\"\n    />\n\n    <FieldAction\n      title=\"Call Contract using dry-run (static)\"\n      arg-title=\"Call argument\"\n      arg-placeholder=\"Call argument\"\n      arg-default-value=\"8\"\n      action-title=\"Call\"\n      :action-handler=\"callStatic\"\n      result-title=\"Call Result\"\n    />\n  </template>\n</template>\n\n<script>\nimport { shallowRef } from 'vue';\nimport { mapState } from 'vuex';\nimport { Contract } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nconst contractSourceCode = `\ncontract Multiplier =\n  record state = { factor: int }\n\n  entrypoint init(f : int) = { factor = f }\n\n  stateful entrypoint setFactor(f : int) =\n    put(state{ factor = f })\n\n  entrypoint multiplyByFactor(x : int) =\n    x * state.factor\n`.trim();\n\nexport default {\n  components: { Value, FieldAction },\n  data: () => ({\n    contractSourceCode,\n    createPromise: null,\n    contract: null,\n    deployPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async create() {\n      // Contract instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/568c291b92c030011ca9e68169f328be6ff79488/docs/README.md#vue3\n      this.contract = shallowRef(\n        await Contract.initialize({\n          ...this.aeSdk.getContext(),\n          sourceCode: this.contractSourceCode,\n        }),\n      );\n    },\n    async compile() {\n      return this.contract.$compile();\n    },\n    async deploy(arg) {\n      this.deployPromise = this.contract.$deploy([arg]);\n      return this.deployPromise;\n    },\n    async callOnChain(arg) {\n      return this.contract.setFactor(arg);\n    },\n    async callStatic(arg) {\n      return this.contract.multiplyByFactor(arg);\n    },\n  },\n};\n</script>\n","import { RestError, PipelineResponse, PipelinePolicy } from '@azure/core-rest-pipeline';\nimport {\n  AdditionalPolicyConfig,\n  FullOperationResponse,\n  OperationOptions,\n  createSerializer as createSerializerOrig,\n} from '@azure/core-client';\nimport { pause } from './other.js';\nimport semverSatisfies from './semver-satisfies.js';\nimport { InternalError, UnexpectedTsError, UnsupportedVersionError } from './errors.js';\n\nconst bigIntPrefix = '_sdk-big-int-';\n\nexport const createSerializer = (\n  ...args: Parameters<typeof createSerializerOrig>\n): ReturnType<typeof createSerializerOrig> => {\n  const serializer = createSerializerOrig(...args);\n  const { serialize, deserialize } = serializer;\n  return Object.assign(serializer, {\n    serialize(\n      ...[mapper, object, objectName, options]: Parameters<typeof serialize>\n    ): ReturnType<typeof serialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || object == null) {\n        return serialize.call(this, mapper, object, objectName, options);\n      }\n      if (typeof object !== 'bigint') {\n        objectName ??= mapper.serializedName;\n        throw new Error(`${objectName} with value ${object} must be of type bigint.`);\n      }\n      return object.toString();\n    },\n\n    deserialize(\n      ...[mapper, responseBody, objectName, options]: Parameters<typeof deserialize>\n    ): ReturnType<typeof deserialize> {\n      // @ts-expect-error we are extending autorest with BigInt support\n      if (mapper.type.name !== 'BigInt' || responseBody == null) {\n        if (typeof responseBody === 'string' && responseBody.startsWith(bigIntPrefix)) {\n          console.warn(`AeSdk internal error: BigInt value ${responseBody} handled incorrectly`);\n          responseBody = +responseBody.replace(bigIntPrefix, '');\n        }\n        const result = deserialize.call(this, mapper, responseBody, objectName, options);\n        // TODO: remove after fixing https://github.com/aeternity/ae_mdw/issues/1891\n        // and https://github.com/aeternity/aeternity/issues/4386\n        if (result instanceof Date) return new Date(+result / 1000);\n        return result;\n      }\n      if (typeof responseBody === 'number' && responseBody > Number.MAX_SAFE_INTEGER) {\n        throw new InternalError(`Number ${responseBody} is not accurate to be converted to BigInt`);\n      }\n      return BigInt(responseBody.toString().replace(bigIntPrefix, ''));\n    },\n  });\n};\n\nconst safeLength = Number.MAX_SAFE_INTEGER.toString().length;\nconst bigIntPropertyRe = new RegExp(String.raw`(\"\\w+\":\\s*)(\\d{${safeLength},})(\\s*[,}])`, 'm');\nconst bigIntArrayItemRe = new RegExp(String.raw`([[,]\\s*)(\\d{${safeLength},})\\b`, 'm');\nexport const parseBigIntPolicy: PipelinePolicy = {\n  name: 'parse-big-int',\n  async sendRequest(request, next) {\n    const response = await next(request);\n    if (response.bodyAsText == null) return response;\n    // TODO: replace with https://caniuse.com/mdn-javascript_builtins_json_parse_reviver_parameter_context_argument when it gets support in FF and Safari\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntPropertyRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntPropertyRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, name, value, end] = match;\n        return [\n          name,\n          +value > Number.MAX_SAFE_INTEGER ? `\"${bigIntPrefix}${value}\"` : value,\n          end,\n        ].join('');\n      },\n    );\n    // FIXME: may break strings inside json\n    response.bodyAsText = response.bodyAsText.replaceAll(\n      new RegExp(bigIntArrayItemRe, 'g'),\n      (matched) => {\n        const match = matched.match(bigIntArrayItemRe);\n        if (match == null) throw new UnexpectedTsError();\n        const [, prefix, value] = match;\n        return `${prefix}\"${bigIntPrefix}${value}\"`;\n      },\n    );\n    return response;\n  },\n};\n\nexport const genRequestQueuesPolicy = (): AdditionalPolicyConfig => {\n  const requestQueues = new Map<string, Promise<unknown>>();\n\n  return {\n    policy: {\n      name: 'request-queues',\n      async sendRequest(request, next) {\n        const key = request.headers.get('__queue');\n        request.headers.delete('__queue');\n        const getResponse = async (): Promise<PipelineResponse> => next(request);\n        if (key == null) return getResponse();\n        const req = (requestQueues.get(key) ?? Promise.resolve()).then(getResponse);\n        requestQueues.set(\n          key,\n          req.catch(() => {}),\n        );\n        return req;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genCombineGetRequestsPolicy = (): AdditionalPolicyConfig => {\n  const pendingGetRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'combine-get-requests',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = pendingGetRequests.get(key) ?? next(request);\n        pendingGetRequests.set(key, response);\n        try {\n          return await response;\n        } finally {\n          pendingGetRequests.delete(key);\n        }\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genAggressiveCacheGetResponsesPolicy = (): AdditionalPolicyConfig => {\n  const getRequests = new Map<string, Promise<PipelineResponse>>();\n\n  return {\n    policy: {\n      name: 'aggressive-cache-get-responses',\n      async sendRequest(request, next) {\n        if (request.method !== 'GET') return next(request);\n        const key = JSON.stringify([request.url, request.body]);\n        const response = getRequests.get(key) ?? next(request);\n        getRequests.set(key, response);\n        return response;\n      },\n    },\n    position: 'perCall',\n  };\n};\n\nexport const genErrorFormatterPolicy = (\n  getMessage: (b: any) => string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'error-formatter',\n    async sendRequest(request, next) {\n      try {\n        return await next(request);\n      } catch (error) {\n        if (\n          !(error instanceof RestError) ||\n          error.request == null ||\n          error.message.startsWith('Error ')\n        )\n          throw error;\n        const prefix = `${new URL(error.request.url).pathname.slice(1)} error`;\n\n        if (error.response?.bodyAsText == null) {\n          if (error.message === '') error.message = `${prefix}: ${error.code}`;\n          throw error;\n        }\n\n        const body = (error.response as FullOperationResponse).parsedBody;\n        error.message = prefix;\n        const message = body == null ? ` ${error.response.status} status code` : getMessage(body);\n        if (message !== '') error.message += `:${message}`;\n        throw error;\n      }\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genVersionCheckPolicy = (\n  name: string,\n  versionCb: (options: OperationOptions) => Promise<string>,\n  geVersion: string,\n  ltVersion: string,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'version-check',\n    async sendRequest(request, next) {\n      if (request.headers.has('__version-check')) {\n        request.headers.delete('__version-check');\n        return next(request);\n      }\n      const options = { requestOptions: { customHeaders: { '__version-check': 'true' } } };\n      const args = [await versionCb(options), geVersion, ltVersion] as const;\n      if (!semverSatisfies(...args)) throw new UnsupportedVersionError(name, ...args);\n      return next(request);\n    },\n  },\n  position: 'perCall',\n});\n\nexport const genRetryOnFailurePolicy = (\n  retryCount: number,\n  retryOverallDelay: number,\n): AdditionalPolicyConfig => ({\n  policy: {\n    name: 'retry-on-failure',\n    async sendRequest(request, next) {\n      const retryCode = request.headers.get('__retry-code') ?? NaN;\n      request.headers.delete('__retry-code');\n      const statusesToNotRetry = [200, 400, 403, 410, 500].filter((c) => c !== +retryCode);\n\n      const intervals = new Array(retryCount)\n        .fill(0)\n        .map((_, idx) => ((idx + 1) / retryCount) ** 2);\n      const intervalSum = intervals.reduce((a, b) => a + b, 0);\n      const intervalsInMs = intervals.map((e) => Math.floor((e / intervalSum) * retryOverallDelay));\n\n      let error = new RestError('Not expected to be thrown');\n      for (let attempt = 0; attempt <= retryCount; attempt += 1) {\n        if (attempt !== 0) {\n          await pause(intervalsInMs[attempt - 1]);\n          const urlParsed = new URL(request.url);\n          urlParsed.searchParams.set('__sdk-retry', attempt.toString());\n          request.url = urlParsed.toString();\n        }\n        try {\n          return await next(request);\n        } catch (e) {\n          if (!(e instanceof RestError)) throw e;\n          if (statusesToNotRetry.includes(e.response?.status ?? 0)) throw e;\n          error = e;\n        }\n      }\n      throw error;\n    },\n  },\n  position: 'perCall',\n});\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Account: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Account\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      balance: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"balance\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payable: {\n        serializedName: \"payable\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"basic\", \"generalized\"],\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      errorCode: {\n        serializedName: \"error_code\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NextNonceResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NextNonceResponse\",\n    modelProperties: {\n      nextNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"next_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTxs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTxs\",\n    modelProperties: {\n      transactions: {\n        serializedName: \"transactions\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedTx\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"Tx\",\n        },\n      },\n      blockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: -1,\n        },\n        serializedName: \"block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      blockHash: {\n        serializedName: \"block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedTx: {\n        serializedName: \"encoded_tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signatures: {\n        serializedName: \"signatures\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Tx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Tx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      channelId: {\n        serializedName: \"channel_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      queryId: {\n        serializedName: \"query_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        type: {\n          name: \"String\",\n        },\n      },\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nameId: {\n        serializedName: \"name_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callerId: {\n        serializedName: \"caller_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        type: {\n          name: \"String\",\n        },\n      },\n      gaId: {\n        serializedName: \"ga_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n      payerId: {\n        serializedName: \"payer_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SpendTx\",\n            \"ChannelCreateTx\",\n            \"ChannelDepositTx\",\n            \"ChannelWithdrawTx\",\n            \"ChannelForceProgressTx\",\n            \"ChannelCloseMutualTx\",\n            \"ChannelCloseSoloTx\",\n            \"ChannelSlashTx\",\n            \"ChannelSettleTx\",\n            \"ChannelSnapshotSoloTx\",\n            \"ChannelSetDelegatesTx\",\n            \"OracleRegisterTx\",\n            \"OracleExtendTx\",\n            \"OracleQueryTx\",\n            \"OracleRespondTx\",\n            \"NamePreclaimTx\",\n            \"NameClaimTx\",\n            \"NameUpdateTx\",\n            \"NameTransferTx\",\n            \"NameRevokeTx\",\n            \"ContractCreateTx\",\n            \"ContractCallTx\",\n            \"GAAttachTx\",\n            \"GAMetaTx\",\n            \"PayingForTx\",\n          ],\n        },\n      },\n    },\n  },\n};\n\nexport const Delegates: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Delegates\",\n    modelProperties: {\n      initiator: {\n        serializedName: \"initiator\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responder: {\n        serializedName: \"responder\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainUpdate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OffChainUpdate\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: {\n      serializedName: \"op\",\n      clientName: \"op\",\n    },\n    modelProperties: {\n      op: {\n        serializedName: \"op\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const RelativeTTL: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RelativeTTL\",\n    modelProperties: {\n      type: {\n        defaultValue: \"delta\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Ttl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Ttl\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"delta\", \"block\"],\n        },\n      },\n      value: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePointer: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePointer\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      encodedKey: {\n        serializedName: \"encoded_key\",\n        type: {\n          name: \"String\",\n        },\n      },\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const AuctionEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuctionEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      startedAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"started_at\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      endsAt: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ends_at\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      highestBidder: {\n        serializedName: \"highest_bidder\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      highestBid: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"highest_bid\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      channelAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      soloRound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solo_round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lockedUntil: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked_until\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractObject\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      active: {\n        serializedName: \"active\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      referrerIds: {\n        serializedName: \"referrer_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCode\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PoI: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PoI\",\n    modelProperties: {\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Currency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Currency\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      symbol: {\n        serializedName: \"symbol\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunit: {\n        serializedName: \"subunit\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      subunitsPerUnit: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"subunits_per_unit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fiatConverstionUrl: {\n        serializedName: \"fiat_converstion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      fiatConversionUrl: {\n        serializedName: \"fiat_conversion_url\",\n        type: {\n          name: \"String\",\n        },\n      },\n      logo: {\n        serializedName: \"logo\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\",\n        },\n      },\n      primaryColour: {\n        serializedName: \"primary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      secondaryColour: {\n        serializedName: \"secondary_colour\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      networkName: {\n        serializedName: \"network_name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Image: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInput\",\n    modelProperties: {\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"String\",\n        },\n      },\n      accounts: {\n        serializedName: \"accounts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunAccount\",\n            },\n          },\n        },\n      },\n      txs: {\n        serializedName: \"txs\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunInputItem\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        defaultValue: false,\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunAccount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunAccount\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunInputItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunInputItem\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callReq: {\n        serializedName: \"call_req\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallReq\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallReq: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallReq\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      caller: {\n        serializedName: \"caller\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"Composite\",\n          className: \"DryRunCallContext\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunCallContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunCallContext\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txHash: {\n        serializedName: \"tx_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      stateful: {\n        serializedName: \"stateful\",\n        type: {\n          name: \"Boolean\",\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResults: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResults\",\n    modelProperties: {\n      results: {\n        serializedName: \"results\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DryRunResult\",\n            },\n          },\n        },\n      },\n      txEvents: {\n        serializedName: \"tx_events\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const DryRunResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DryRunResult\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\",\n        },\n      },\n      callObj: {\n        serializedName: \"call_obj\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callerNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"caller_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      log: {\n        serializedName: \"log\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\",\n            },\n          },\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\", \"revert\"],\n        },\n      },\n    },\n  },\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      address: {\n        serializedName: \"address\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topics: {\n        serializedName: \"topics\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMinimum: 0,\n            },\n            type: {\n              // @ts-expect-error we are extending autorest with BigInt support\n              name: \"BigInt\",\n            },\n          },\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Generation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Generation\",\n    modelProperties: {\n      keyBlock: {\n        serializedName: \"key_block\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyBlock\",\n        },\n      },\n      microBlocks: {\n        serializedName: \"micro_blocks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const KeyBlock: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyBlock\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const Header: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Header\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      miner: {\n        serializedName: \"miner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      beneficiary: {\n        serializedName: \"beneficiary\",\n        type: {\n          name: \"String\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pow: {\n        constraints: {\n          MinItems: 42,\n          MaxItems: 42,\n        },\n        serializedName: \"pow\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMaximum: 4294967295,\n              InclusiveMinimum: 0,\n            },\n            type: {\n              name: \"Number\",\n            },\n          },\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      info: {\n        serializedName: \"info\",\n        type: {\n          name: \"String\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HashResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HashResponse\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const HeightResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HeightResponse\",\n    modelProperties: {\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const MicroBlockHeader: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MicroBlockHeader\",\n    modelProperties: {\n      hash: {\n        serializedName: \"hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pofHash: {\n        serializedName: \"pof_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevHash: {\n        serializedName: \"prev_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      prevKeyHash: {\n        serializedName: \"prev_key_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      txsHash: {\n        serializedName: \"txs_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      signature: {\n        serializedName: \"signature\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      time: {\n        serializedName: \"time\",\n        required: true,\n        type: {\n          name: \"UnixTime\",\n        },\n      },\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CountResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CountResponse\",\n    modelProperties: {\n      count: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameEntry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameEntry\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      owner: {\n        serializedName: \"owner\",\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const RegisteredOracle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegisteredOracle\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueries: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueries\",\n    modelProperties: {\n      oracleQueries: {\n        serializedName: \"oracle_queries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OracleQuery\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQuery\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      senderNonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sender_nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerPubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerPubKey\",\n    modelProperties: {\n      pubkey: {\n        serializedName: \"pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GasPricesItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GasPricesItem\",\n    modelProperties: {\n      minGasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"min_gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      utilization: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"utilization\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      minutes: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"minutes\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      genesisKeyBlockHash: {\n        serializedName: \"genesis_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      solutions: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"solutions\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      difficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      hashrate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"hashrate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      syncing: {\n        serializedName: \"syncing\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      syncProgress: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"sync_progress\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      uptime: {\n        serializedName: \"uptime\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      listening: {\n        serializedName: \"listening\",\n        required: true,\n        type: {\n          name: \"Boolean\",\n        },\n      },\n      protocols: {\n        serializedName: \"protocols\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Protocol\",\n            },\n          },\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"peer_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      peerConnections: {\n        serializedName: \"peer_connections\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerConnections\",\n        },\n      },\n      pendingTransactionsCount: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_transactions_count\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      peerPubkey: {\n        serializedName: \"peer_pubkey\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topKeyBlockHash: {\n        serializedName: \"top_key_block_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topBlockHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_block_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Protocol: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Protocol\",\n    modelProperties: {\n      version: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      effectiveAtHeight: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"effective_at_height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerConnections: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerConnections\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const SyncStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SyncStatus\",\n    modelProperties: {\n      progress: {\n        serializedName: \"progress\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      target: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"target\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      speed: {\n        serializedName: \"speed\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      estimate: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"estimate\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const EncodedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const PostTxResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PostTxResponse\",\n    modelProperties: {\n      txHash: {\n        serializedName: \"tx_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TxInfoObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TxInfoObject\",\n    modelProperties: {\n      callInfo: {\n        serializedName: \"call_info\",\n        type: {\n          name: \"Composite\",\n          className: \"ContractCallObject\",\n        },\n      },\n      gaInfo: {\n        serializedName: \"ga_info\",\n        type: {\n          name: \"Composite\",\n          className: \"GAObject\",\n        },\n      },\n      txInfo: {\n        serializedName: \"tx_info\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAObject\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      height: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gasUsed: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_used\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      returnValue: {\n        serializedName: \"return_value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      returnType: {\n        serializedName: \"return_type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"ok\", \"error\"],\n        },\n      },\n      innerObject: {\n        serializedName: \"inner_object\",\n        type: {\n          name: \"Composite\",\n          className: \"TxInfoObject\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseMutualTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseMutualTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCloseSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCloseSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelCreateTx\",\n    modelProperties: {\n      initiatorId: {\n        serializedName: \"initiator_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderId: {\n        serializedName: \"responder_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responderAmount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      channelReserve: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"channel_reserve\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      lockPeriod: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"lock_period\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      delegateIds: {\n        serializedName: \"delegate_ids\",\n        type: {\n          name: \"Composite\",\n          className: \"Delegates\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelDepositTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelDepositTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelForceProgressTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelForceProgressTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      update: {\n        serializedName: \"update\",\n        type: {\n          name: \"Composite\",\n          className: \"OffChainUpdate\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      offchainTrees: {\n        serializedName: \"offchain_trees\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSetDelegatesTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSetDelegatesTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorDelegateIds: {\n        serializedName: \"initiator_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      responderDelegateIds: {\n        serializedName: \"responder_delegate_ids\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSettleTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSettleTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      initiatorAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"initiator_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      responderAmountFinal: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"responder_amount_final\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSlashTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSlashTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      poi: {\n        serializedName: \"poi\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelSnapshotSoloTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelSnapshotSoloTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fromId: {\n        serializedName: \"from_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const ChannelWithdrawTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelWithdrawTx\",\n    modelProperties: {\n      channelId: {\n        serializedName: \"channel_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      toId: {\n        serializedName: \"to_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      stateHash: {\n        serializedName: \"state_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      round: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"round\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CheckTxInPoolResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CheckTxInPoolResponse\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CommitmentId: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CommitmentId\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCallTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCallTx\",\n    modelProperties: {\n      callerId: {\n        serializedName: \"caller_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ContractCreateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ContractCreateTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const UnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UnsignedTx\",\n    modelProperties: {\n      tx: {\n        serializedName: \"tx\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAAttachTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAAttachTx\",\n    modelProperties: {\n      ownerId: {\n        serializedName: \"owner_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      authFun: {\n        constraints: {\n          Pattern: new RegExp(\"^(0x|0X)?[a-fA-F0-9]+$\"),\n        },\n        serializedName: \"auth_fun\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const GAMetaTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GAMetaTx\",\n    modelProperties: {\n      gaId: {\n        serializedName: \"ga_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      authData: {\n        serializedName: \"auth_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameClaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameClaimTx\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameSalt: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_salt\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      nameFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_fee\",\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameHash: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameHash\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const NamePreclaimTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NamePreclaimTx\",\n    modelProperties: {\n      commitmentId: {\n        serializedName: \"commitment_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameRevokeTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameRevokeTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameTransferTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameTransferTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const NameUpdateTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NameUpdateTx\",\n    modelProperties: {\n      nameId: {\n        serializedName: \"name_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nameTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"name_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      pointers: {\n        serializedName: \"pointers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"NamePointer\",\n            },\n          },\n        },\n      },\n      clientTtl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"client_ttl\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerDetails\",\n    modelProperties: {\n      host: {\n        serializedName: \"host\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      port: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"port\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      firstSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"first_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      lastSeen: {\n        constraints: {\n          InclusiveMaximum: 4294967295,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"last_seen\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      genesisHash: {\n        serializedName: \"genesis_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topHash: {\n        serializedName: \"top_hash\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      topDifficulty: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"top_difficulty\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      networkId: {\n        serializedName: \"network_id\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVersion: {\n        serializedName: \"node_version\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeRevision: {\n        serializedName: \"node_revision\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeVendor: {\n        serializedName: \"node_vendor\",\n        type: {\n          name: \"String\",\n        },\n      },\n      nodeOs: {\n        serializedName: \"node_os\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleExtendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleExtendTx\",\n    modelProperties: {\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleQueryTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleQueryTx\",\n    modelProperties: {\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      query: {\n        serializedName: \"query\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      queryTtl: {\n        serializedName: \"query_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRegisterTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRegisterTx\",\n    modelProperties: {\n      queryFormat: {\n        serializedName: \"query_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseFormat: {\n        serializedName: \"response_format\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      queryFee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"query_fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      oracleTtl: {\n        serializedName: \"oracle_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"Ttl\",\n        },\n      },\n      accountId: {\n        serializedName: \"account_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OracleRespondTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OracleRespondTx\",\n    modelProperties: {\n      queryId: {\n        serializedName: \"query_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      response: {\n        serializedName: \"response\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      responseTtl: {\n        serializedName: \"response_ttl\",\n        type: {\n          name: \"Composite\",\n          className: \"RelativeTTL\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleId: {\n        serializedName: \"oracle_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PayingForTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PayingForTx\",\n    modelProperties: {\n      payerId: {\n        serializedName: \"payer_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      tx: {\n        serializedName: \"tx\",\n        type: {\n          name: \"Composite\",\n          className: \"SignedTx\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCount: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCount\",\n    modelProperties: {\n      connected: {\n        serializedName: \"connected\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountConnected\",\n        },\n      },\n      available: {\n        serializedName: \"available\",\n        type: {\n          name: \"Composite\",\n          className: \"PeerCountAvailable\",\n        },\n      },\n      blocked: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountConnected: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountConnected\",\n    modelProperties: {\n      inbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"inbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      outbound: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"outbound\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const PeerCountAvailable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PeerCountAvailable\",\n    modelProperties: {\n      verified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"verified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      unverified: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"unverified\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const Peers: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Peers\",\n    modelProperties: {\n      peers: {\n        serializedName: \"peers\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n      blocked: {\n        serializedName: \"blocked\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const PubKey: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PubKey\",\n    modelProperties: {\n      pubKey: {\n        serializedName: \"pub_key\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SpendTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SpendTx\",\n    modelProperties: {\n      recipientId: {\n        serializedName: \"recipient_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      fee: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"fee\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      ttl: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"ttl\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      senderId: {\n        serializedName: \"sender_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      nonce: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"nonce\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      payload: {\n        serializedName: \"payload\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const TokenSupply: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenSupply\",\n    modelProperties: {\n      accounts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"accounts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contracts: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contracts\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      contractOracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"contract_oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      locked: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"locked\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracles: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracles\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      oracleQueries: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"oracle_queries\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      pendingRewards: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"pending_rewards\",\n        type: {\n          name: \"Number\",\n        },\n      },\n      total: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"total\",\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainCallContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainCallContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainCallContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      caller: {\n        serializedName: \"caller\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      contract: {\n        serializedName: \"contract\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      gas: {\n        constraints: {\n          InclusiveMaximum: 18446744073709552000,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      gasPrice: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"gas_price\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainDeposit: coreClient.CompositeMapper = {\n  serializedName: \"OffChainDeposit\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainDeposit\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainNewContract: coreClient.CompositeMapper = {\n  serializedName: \"OffChainNewContract\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainNewContract\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      owner: {\n        serializedName: \"owner\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      vmVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"vm_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      abiVersion: {\n        constraints: {\n          InclusiveMaximum: 65535,\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"abi_version\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"Composite\",\n          className: \"ByteCode\",\n        },\n      },\n      deposit: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"deposit\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n      callData: {\n        serializedName: \"call_data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainTransfer: coreClient.CompositeMapper = {\n  serializedName: \"OffChainTransfer\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainTransfer\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      from: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const OffChainWithdrawal: coreClient.CompositeMapper = {\n  serializedName: \"OffChainWithdrawal\",\n  type: {\n    name: \"Composite\",\n    className: \"OffChainWithdrawal\",\n    uberParent: \"OffChainUpdate\",\n    polymorphicDiscriminator: OffChainUpdate.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OffChainUpdate.type.modelProperties,\n      to: {\n        serializedName: \"to\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      amount: {\n        constraints: {\n          InclusiveMinimum: 0,\n        },\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          // @ts-expect-error we are extending autorest with BigInt support\n          name: \"BigInt\",\n        },\n      },\n    },\n  },\n};\n\nexport const CreateContractUnsignedTx: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CreateContractUnsignedTx\",\n    modelProperties: {\n      ...UnsignedTx.type.modelProperties,\n      contractId: {\n        serializedName: \"contract_id\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport let discriminators = {\n  OffChainUpdate: OffChainUpdate,\n  \"OffChainUpdate.OffChainCallContract\": OffChainCallContract,\n  \"OffChainUpdate.OffChainDeposit\": OffChainDeposit,\n  \"OffChainUpdate.OffChainNewContract\": OffChainNewContract,\n  \"OffChainUpdate.OffChainTransfer\": OffChainTransfer,\n  \"OffChainUpdate.OffChainWithdrawal\": OffChainWithdrawal,\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n} from \"@azure/core-client\";\nimport {\n  DryRunInput as DryRunInputMapper,\n  EncodedTx as EncodedTxMapper,\n} from \"../models/mappers.js\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const pubkey: OperationURLParameter = {\n  parameterPath: \"pubkey\",\n  mapper: {\n    serializedName: \"pubkey\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const hash: OperationURLParameter = {\n  parameterPath: \"hash\",\n  mapper: {\n    serializedName: \"hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const height: OperationURLParameter = {\n  parameterPath: \"height\",\n  mapper: {\n    constraints: {\n      InclusiveMaximum: 18446744073709552000,\n      InclusiveMinimum: 0,\n    },\n    serializedName: \"height\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const strategy: OperationQueryParameter = {\n  parameterPath: [\"options\", \"strategy\"],\n  mapper: {\n    defaultValue: \"max\",\n    serializedName: \"strategy\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"max\", \"continuity\"],\n    },\n  },\n};\n\nexport const name: OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    serializedName: \"name\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DryRunInputMapper,\n};\n\nexport const index: OperationURLParameter = {\n  parameterPath: \"index\",\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"index\",\n    required: true,\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const nameHash: OperationURLParameter = {\n  parameterPath: \"nameHash\",\n  mapper: {\n    serializedName: \"name_hash\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const fromParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"from\"],\n  mapper: {\n    serializedName: \"from\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const limit: OperationQueryParameter = {\n  parameterPath: [\"options\", \"limit\"],\n  mapper: {\n    defaultValue: 20,\n    constraints: {\n      InclusiveMaximum: 1000,\n      InclusiveMinimum: 1,\n    },\n    serializedName: \"limit\",\n    type: {\n      name: \"Number\",\n    },\n  },\n};\n\nexport const typeParam: OperationQueryParameter = {\n  parameterPath: [\"options\", \"type\"],\n  mapper: {\n    defaultValue: \"all\",\n    serializedName: \"type\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"open\", \"closed\", \"all\"],\n    },\n  },\n};\n\nexport const queryId: OperationURLParameter = {\n  parameterPath: \"queryId\",\n  mapper: {\n    serializedName: \"query-id\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: EncodedTxMapper,\n};\n","import { createSerializer } from \"../../utils/autorest.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters.js\";\nimport * as Mappers from \"./models/mappers.js\";\nimport {\n  NodeOptionalParams,\n  GetAccountByPubkeyOptionalParams,\n  GetAccountByPubkeyResponse,\n  GetAccountByPubkeyAndHashOptionalParams,\n  GetAccountByPubkeyAndHashResponse,\n  GetAccountByPubkeyAndHeightOptionalParams,\n  GetAccountByPubkeyAndHeightResponse,\n  GetAccountNextNonceOptionalParams,\n  GetAccountNextNonceResponse,\n  GetPendingAccountTransactionsByPubkeyOptionalParams,\n  GetPendingAccountTransactionsByPubkeyResponse,\n  GetAuctionEntryByNameOptionalParams,\n  GetAuctionEntryByNameResponse,\n  GetChannelByPubkeyOptionalParams,\n  GetChannelByPubkeyResponse,\n  GetContractOptionalParams,\n  GetContractResponse,\n  GetContractCodeOptionalParams,\n  GetContractCodeResponse,\n  GetContractPoIOptionalParams,\n  GetContractPoIResponse,\n  GetCurrencyOptionalParams,\n  GetCurrencyResponse,\n  DryRunInput,\n  ProtectedDryRunTxsOptionalParams,\n  ProtectedDryRunTxsResponse,\n  GetCurrentGenerationOptionalParams,\n  GetCurrentGenerationResponse,\n  GetGenerationByHashOptionalParams,\n  GetGenerationByHashResponse,\n  GetGenerationByHeightOptionalParams,\n  GetGenerationByHeightResponse,\n  GetTopHeaderOptionalParams,\n  GetTopHeaderResponse,\n  GetCurrentKeyBlockOptionalParams,\n  GetCurrentKeyBlockResponse,\n  GetCurrentKeyBlockHashOptionalParams,\n  GetCurrentKeyBlockHashResponse,\n  GetCurrentKeyBlockHeightOptionalParams,\n  GetCurrentKeyBlockHeightResponse,\n  GetKeyBlockByHashOptionalParams,\n  GetKeyBlockByHashResponse,\n  GetKeyBlockByHeightOptionalParams,\n  GetKeyBlockByHeightResponse,\n  GetPendingKeyBlockOptionalParams,\n  GetPendingKeyBlockResponse,\n  GetMicroBlockHeaderByHashOptionalParams,\n  GetMicroBlockHeaderByHashResponse,\n  GetMicroBlockTransactionsByHashOptionalParams,\n  GetMicroBlockTransactionsByHashResponse,\n  GetMicroBlockTransactionsCountByHashOptionalParams,\n  GetMicroBlockTransactionsCountByHashResponse,\n  GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  GetMicroBlockTransactionByHashAndIndexResponse,\n  GetNameEntryByNameOptionalParams,\n  GetNameEntryByNameResponse,\n  GetNameEntryByNameHashOptionalParams,\n  GetNameEntryByNameHashResponse,\n  GetOracleByPubkeyOptionalParams,\n  GetOracleByPubkeyResponse,\n  GetOracleQueriesByPubkeyOptionalParams,\n  GetOracleQueriesByPubkeyResponse,\n  GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  GetOracleQueryByPubkeyAndQueryIdResponse,\n  GetPeerPubkeyOptionalParams,\n  GetPeerPubkeyResponse,\n  GetRecentGasPricesOptionalParams,\n  GetRecentGasPricesResponse,\n  GetStatusOptionalParams,\n  GetStatusResponse,\n  GetChainEndsOptionalParams,\n  GetChainEndsResponse,\n  GetSyncStatusOptionalParams,\n  GetSyncStatusResponse,\n  EncodedTx,\n  PostTransactionOptionalParams,\n  PostTransactionResponse,\n  GetTransactionByHashOptionalParams,\n  GetTransactionByHashResponse,\n  GetTransactionInfoByHashOptionalParams,\n  GetTransactionInfoByHashResponse,\n} from \"./models/index.js\";\n\nexport class Node extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Node class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: NodeOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NodeOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-node/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Get an account by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountByPubkey(\n    pubkey: string,\n    options?: GetAccountByPubkeyOptionalParams,\n  ): Promise<GetAccountByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the block indicated by hash. Can be either a micro block or a\n   * keyblock hash\n   * @param pubkey The public key of the account\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHash(\n    pubkey: string,\n    hash: string,\n    options?: GetAccountByPubkeyAndHashOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHashResponse> {\n    return this.sendOperationRequest(\n      { pubkey, hash, options },\n      getAccountByPubkeyAndHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account by public key after the opening key block of the generation at height\n   * @param pubkey The public key of the account\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getAccountByPubkeyAndHeight(\n    pubkey: string,\n    height: number,\n    options?: GetAccountByPubkeyAndHeightOptionalParams,\n  ): Promise<GetAccountByPubkeyAndHeightResponse> {\n    return this.sendOperationRequest(\n      { pubkey, height, options },\n      getAccountByPubkeyAndHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get an account's next nonce; This is computed according to whatever is the current account nonce and\n   * what transactions are currently present in the transaction pool\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getAccountNextNonce(\n    pubkey: string,\n    options?: GetAccountNextNonceOptionalParams,\n  ): Promise<GetAccountNextNonceResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getAccountNextNonceOperationSpec,\n    );\n  }\n\n  /**\n   * Get pending account transactions by public key\n   * @param pubkey The public key of the account\n   * @param options The options parameters.\n   */\n  getPendingAccountTransactionsByPubkey(\n    pubkey: string,\n    options?: GetPendingAccountTransactionsByPubkeyOptionalParams,\n  ): Promise<GetPendingAccountTransactionsByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getPendingAccountTransactionsByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get auction entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getAuctionEntryByName(\n    name: string,\n    options?: GetAuctionEntryByNameOptionalParams,\n  ): Promise<GetAuctionEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getAuctionEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get channel by public key\n   * @param pubkey The pubkey of the channel\n   * @param options The options parameters.\n   */\n  getChannelByPubkey(\n    pubkey: string,\n    options?: GetChannelByPubkeyOptionalParams,\n  ): Promise<GetChannelByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getChannelByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get a contract by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContract(\n    pubkey: string,\n    options?: GetContractOptionalParams,\n  ): Promise<GetContractResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractOperationSpec,\n    );\n  }\n\n  /**\n   * Get contract code by pubkey\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractCode(\n    pubkey: string,\n    options?: GetContractCodeOptionalParams,\n  ): Promise<GetContractCodeResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Get a proof of inclusion for a contract\n   * @param pubkey Contract pubkey to get proof for\n   * @param options The options parameters.\n   */\n  getContractPoI(\n    pubkey: string,\n    options?: GetContractPoIOptionalParams,\n  ): Promise<GetContractPoIResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getContractPoIOperationSpec,\n    );\n  }\n\n  /**\n   * Get the currency metadata of a node\n   * @param options The options parameters.\n   */\n  getCurrency(\n    options?: GetCurrencyOptionalParams,\n  ): Promise<GetCurrencyResponse> {\n    return this.sendOperationRequest({ options }, getCurrencyOperationSpec);\n  }\n\n  /**\n   * Dry-run unsigned transactions on top of a given block. Supports all TXs except GAMetaTx, PayingForTx\n   * and OffchainTx. The maximum gas limit of all calls is capped. The maximum gas limit per request is a\n   * global node setting. Since DryRunCallReq object do not have a mandatory gas field, if not set a\n   * default value of 1000000 is being used instead.\n   * @param body transactions\n   * @param options The options parameters.\n   */\n  protectedDryRunTxs(\n    body: DryRunInput,\n    options?: ProtectedDryRunTxsOptionalParams,\n  ): Promise<ProtectedDryRunTxsResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      protectedDryRunTxsOperationSpec,\n    );\n  }\n\n  /**\n   * Get the current generation\n   * @param options The options parameters.\n   */\n  getCurrentGeneration(\n    options?: GetCurrentGenerationOptionalParams,\n  ): Promise<GetCurrentGenerationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentGenerationOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by hash\n   * @param hash The hash of the key block\n   * @param options The options parameters.\n   */\n  getGenerationByHash(\n    hash: string,\n    options?: GetGenerationByHashOptionalParams,\n  ): Promise<GetGenerationByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getGenerationByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a generation by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getGenerationByHeight(\n    height: number,\n    options?: GetGenerationByHeightOptionalParams,\n  ): Promise<GetGenerationByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getGenerationByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the top header (either key or micro block)\n   * @param options The options parameters.\n   */\n  getTopHeader(\n    options?: GetTopHeaderOptionalParams,\n  ): Promise<GetTopHeaderResponse> {\n    return this.sendOperationRequest({ options }, getTopHeaderOperationSpec);\n  }\n\n  /**\n   * Get the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlock(\n    options?: GetCurrentKeyBlockOptionalParams,\n  ): Promise<GetCurrentKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get the hash of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHash(\n    options?: GetCurrentKeyBlockHashOptionalParams,\n  ): Promise<GetCurrentKeyBlockHashResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get the height of the current key block\n   * @param options The options parameters.\n   */\n  getCurrentKeyBlockHeight(\n    options?: GetCurrentKeyBlockHeightOptionalParams,\n  ): Promise<GetCurrentKeyBlockHeightResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getCurrentKeyBlockHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getKeyBlockByHash(\n    hash: string,\n    options?: GetKeyBlockByHashOptionalParams,\n  ): Promise<GetKeyBlockByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getKeyBlockByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a key block by height\n   * @param height The height\n   * @param options The options parameters.\n   */\n  getKeyBlockByHeight(\n    height: number,\n    options?: GetKeyBlockByHeightOptionalParams,\n  ): Promise<GetKeyBlockByHeightResponse> {\n    return this.sendOperationRequest(\n      { height, options },\n      getKeyBlockByHeightOperationSpec,\n    );\n  }\n\n  /**\n   * Get the pending key block\n   * @param options The options parameters.\n   */\n  getPendingKeyBlock(\n    options?: GetPendingKeyBlockOptionalParams,\n  ): Promise<GetPendingKeyBlockResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getPendingKeyBlockOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block header by hash\n   * @param hash The hash of the block - either a keyblock or a microblock\n   * @param options The options parameters.\n   */\n  getMicroBlockHeaderByHash(\n    hash: string,\n    options?: GetMicroBlockHeaderByHashOptionalParams,\n  ): Promise<GetMicroBlockHeaderByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockHeaderByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transactions by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get micro block transaction count by hash\n   * @param hash The hash of the micro block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionsCountByHash(\n    hash: string,\n    options?: GetMicroBlockTransactionsCountByHashOptionalParams,\n  ): Promise<GetMicroBlockTransactionsCountByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getMicroBlockTransactionsCountByHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get a micro block transaction by hash and index\n   * @param hash The hash of the micro block\n   * @param index The index of the transaction in a block\n   * @param options The options parameters.\n   */\n  getMicroBlockTransactionByHashAndIndex(\n    hash: string,\n    index: number,\n    options?: GetMicroBlockTransactionByHashAndIndexOptionalParams,\n  ): Promise<GetMicroBlockTransactionByHashAndIndexResponse> {\n    return this.sendOperationRequest(\n      { hash, index, options },\n      getMicroBlockTransactionByHashAndIndexOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param name The name key of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByName(\n    name: string,\n    options?: GetNameEntryByNameOptionalParams,\n  ): Promise<GetNameEntryByNameResponse> {\n    return this.sendOperationRequest(\n      { name, options },\n      getNameEntryByNameOperationSpec,\n    );\n  }\n\n  /**\n   * Get name entry from naming system\n   * @param nameHash The name hash of the name entry\n   * @param options The options parameters.\n   */\n  getNameEntryByNameHash(\n    nameHash: string,\n    options?: GetNameEntryByNameHashOptionalParams,\n  ): Promise<GetNameEntryByNameHashResponse> {\n    return this.sendOperationRequest(\n      { nameHash, options },\n      getNameEntryByNameHashOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleByPubkey(\n    pubkey: string,\n    options?: GetOracleByPubkeyOptionalParams,\n  ): Promise<GetOracleByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get oracle queries by public key\n   * @param pubkey The public key of the oracle\n   * @param options The options parameters.\n   */\n  getOracleQueriesByPubkey(\n    pubkey: string,\n    options?: GetOracleQueriesByPubkeyOptionalParams,\n  ): Promise<GetOracleQueriesByPubkeyResponse> {\n    return this.sendOperationRequest(\n      { pubkey, options },\n      getOracleQueriesByPubkeyOperationSpec,\n    );\n  }\n\n  /**\n   * Get an oracle query by public key and query ID\n   * @param pubkey The public key of the oracle\n   * @param queryId The ID of the query\n   * @param options The options parameters.\n   */\n  getOracleQueryByPubkeyAndQueryId(\n    pubkey: string,\n    queryId: string,\n    options?: GetOracleQueryByPubkeyAndQueryIdOptionalParams,\n  ): Promise<GetOracleQueryByPubkeyAndQueryIdResponse> {\n    return this.sendOperationRequest(\n      { pubkey, queryId, options },\n      getOracleQueryByPubkeyAndQueryIdOperationSpec,\n    );\n  }\n\n  /**\n   * Get peer public key\n   * @param options The options parameters.\n   */\n  getPeerPubkey(\n    options?: GetPeerPubkeyOptionalParams,\n  ): Promise<GetPeerPubkeyResponse> {\n    return this.sendOperationRequest({ options }, getPeerPubkeyOperationSpec);\n  }\n\n  /**\n   * Get minimum gas prices in recent blocks\n   * @param options The options parameters.\n   */\n  getRecentGasPrices(\n    options?: GetRecentGasPricesOptionalParams,\n  ): Promise<GetRecentGasPricesResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getRecentGasPricesOperationSpec,\n    );\n  }\n\n  /**\n   * Get the status of a node\n   * @param options The options parameters.\n   */\n  getStatus(options?: GetStatusOptionalParams): Promise<GetStatusResponse> {\n    return this.sendOperationRequest({ options }, getStatusOperationSpec);\n  }\n\n  /**\n   * Get oldest keyblock hashes counting from genesis including orphans\n   * @param options The options parameters.\n   */\n  getChainEnds(\n    options?: GetChainEndsOptionalParams,\n  ): Promise<GetChainEndsResponse> {\n    return this.sendOperationRequest({ options }, getChainEndsOperationSpec);\n  }\n\n  /**\n   * Get the sync status of a node\n   * @param options The options parameters.\n   */\n  getSyncStatus(\n    options?: GetSyncStatusOptionalParams,\n  ): Promise<GetSyncStatusResponse> {\n    return this.sendOperationRequest({ options }, getSyncStatusOperationSpec);\n  }\n\n  /**\n   * Post a new transaction\n   * @param body The new transaction\n   * @param options The options parameters.\n   */\n  postTransaction(\n    body: EncodedTx,\n    options?: PostTransactionOptionalParams,\n  ): Promise<PostTransactionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      postTransactionOperationSpec,\n    );\n  }\n\n  /**\n   * Get a transaction by hash\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionByHash(\n    hash: string,\n    options?: GetTransactionByHashOptionalParams,\n  ): Promise<GetTransactionByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionByHashOperationSpec,\n    );\n  }\n\n  /**\n   * @param hash The hash of the transaction\n   * @param options The options parameters.\n   */\n  getTransactionInfoByHash(\n    hash: string,\n    options?: GetTransactionInfoByHashOptionalParams,\n  ): Promise<GetTransactionInfoByHashResponse> {\n    return this.sendOperationRequest(\n      { hash, options },\n      getTransactionInfoByHashOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\nconst getAccountByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountByPubkeyAndHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Account,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAccountNextNonceOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/accounts/{pubkey}/next-nonce\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NextNonceResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.strategy],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingAccountTransactionsByPubkeyOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/accounts/{pubkey}/transactions/pending\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTxs,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAuctionEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/auctions/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AuctionEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChannelByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/channels/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ContractObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/code\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ByteCode,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getContractPoIOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/contracts/{pubkey}/poi\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PoI,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrencyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/currency\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Currency,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst protectedDryRunTxsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/dry-run\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DryRunResults,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCurrentGenerationOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getGenerationByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/generations/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Generation,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTopHeaderOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/headers/top\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Header,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/hash\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HashResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCurrentKeyBlockHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/current/height\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.HeightResponse,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/hash/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getKeyBlockByHeightOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/height/{height}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.height],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getPendingKeyBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/key-blocks/pending\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBlock,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockHeaderByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/header\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MicroBlockHeader,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/micro-blocks/hash/{hash}/transactions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTxs,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getMicroBlockTransactionsCountByHashOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/count\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.CountResponse,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getMicroBlockTransactionByHashAndIndexOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/micro-blocks/hash/{hash}/transactions/index/{index}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.SignedTx,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.hash, Parameters.index],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getNameEntryByNameOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getNameEntryByNameHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/names/hash/{name_hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.NameEntry,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.nameHash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegisteredOracle,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueriesByPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/oracles/{pubkey}/queries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OracleQueries,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.fromParam,\n    Parameters.limit,\n    Parameters.typeParam,\n  ],\n  urlParameters: [Parameters.$host, Parameters.pubkey],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOracleQueryByPubkeyAndQueryIdOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/v3/oracles/{pubkey}/queries/{query-id}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.OracleQuery,\n      },\n      400: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n      404: {\n        bodyMapper: Mappers.ErrorModel,\n        isError: true,\n      },\n    },\n    urlParameters: [Parameters.$host, Parameters.pubkey, Parameters.queryId],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getPeerPubkeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/peers/pubkey\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerPubKey,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecentGasPricesOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/recent-gas-prices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"GasPricesItem\" } },\n        },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Status,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChainEndsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/status/chain-ends\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n      },\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSyncStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/sync-status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SyncStatus,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst postTransactionOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PostTxResponse,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getTransactionByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SignedTx,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getTransactionInfoByHashOperationSpec: coreClient.OperationSpec = {\n  path: \"/v3/transactions/{hash}/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TxInfoObject,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    404: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n    410: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.hash],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","// eslint-disable-next-line max-classes-per-file\nimport { OperationOptions } from '@azure/core-client';\nimport { userAgentPolicyName, setClientRequestIdPolicyName } from '@azure/core-rest-pipeline';\nimport {\n  genRequestQueuesPolicy,\n  genCombineGetRequestsPolicy,\n  genErrorFormatterPolicy,\n  parseBigIntPolicy,\n  genVersionCheckPolicy,\n  genRetryOnFailurePolicy,\n} from './utils/autorest.js';\nimport { Node as NodeApi, NodeOptionalParams, ErrorModel } from './apis/node/index.js';\nimport { UnsupportedVersionError } from './utils/errors.js';\nimport { ConsensusProtocolVersion } from './tx/builder/constants.js';\n\ninterface NodeInfo {\n  url: string;\n  nodeNetworkId: string;\n  version: string;\n  consensusProtocolVersion: ConsensusProtocolVersion;\n}\n\nexport default class Node extends NodeApi {\n  /**\n   * @param url - Url for node API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't ensure that the node is supported\n   * @param options.retryCount - Amount of extra requests to do in case of failure\n   * @param options.retryOverallDelay - Time in ms to wait between all retries\n   */\n  constructor(\n    url: string,\n    {\n      ignoreVersion = false,\n      retryCount = 3,\n      retryOverallDelay = 800,\n      ...options\n    }: NodeOptionalParams & {\n      ignoreVersion?: boolean;\n      retryCount?: number;\n      retryOverallDelay?: number;\n    } = {},\n  ) {\n    const getVersion = async (opts: OperationOptions): Promise<string> =>\n      (await this._getCachedStatus(opts)).nodeVersion;\n    // eslint-disable-next-line constructor-super\n    super(url, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...(ignoreVersion ? [] : [genVersionCheckPolicy('node', getVersion, '7.1.0', '8.0.0')]),\n        genRequestQueuesPolicy(),\n        genCombineGetRequestsPolicy(),\n        genRetryOnFailurePolicy(retryCount, retryOverallDelay),\n        genErrorFormatterPolicy((body: ErrorModel) =>\n          [' ', body.reason, body.errorCode == null ? '' : ` (${body.errorCode})`].join(''),\n        ),\n      ],\n      ...options,\n    });\n    this.pipeline.addPolicy(parseBigIntPolicy, { phase: 'Deserialize' });\n    this.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n    // TODO: use instead our retry policy\n    this.pipeline.removePolicy({ name: 'defaultRetryPolicy' });\n  }\n\n  #cachedStatusPromise?: ReturnType<NodeApi['getStatus']>;\n\n  async _getCachedStatus(options?: OperationOptions): ReturnType<NodeApi['getStatus']> {\n    if (this.#cachedStatusPromise != null) return this.#cachedStatusPromise;\n    return this.getStatus(options);\n  }\n\n  override async getStatus(\n    ...args: Parameters<NodeApi['getStatus']>\n  ): ReturnType<NodeApi['getStatus']> {\n    const promise = super.getStatus(...args);\n    promise.then(\n      () => {\n        this.#cachedStatusPromise = promise;\n      },\n      () => {},\n    );\n    return promise;\n  }\n\n  /**\n   * Returns network ID provided by node.\n   * This method won't do extra requests on subsequent calls.\n   */\n  async getNetworkId(): Promise<string> {\n    return (await this._getCachedStatus()).networkId;\n  }\n\n  async getNodeInfo(): Promise<NodeInfo> {\n    const {\n      nodeVersion,\n      networkId: nodeNetworkId,\n      protocols,\n      topBlockHeight,\n    } = await this.getStatus();\n\n    const consensusProtocolVersion = protocols\n      .filter(({ effectiveAtHeight }) => topBlockHeight >= effectiveAtHeight)\n      .reduce((acc, p) => (p.effectiveAtHeight > acc.effectiveAtHeight ? p : acc), {\n        effectiveAtHeight: -1,\n        version: 0,\n      }).version;\n    if (ConsensusProtocolVersion[consensusProtocolVersion] == null) {\n      const version = consensusProtocolVersion.toString();\n      const versions = Object.values(ConsensusProtocolVersion)\n        .filter((el) => typeof el === 'number')\n        .map((el) => +el);\n      const geVersion = Math.min(...versions).toString();\n      const ltVersion = (Math.max(...versions) + 1).toString();\n      throw new UnsupportedVersionError('consensus protocol', version, geVersion, ltVersion);\n    }\n\n    return {\n      url: this.$host,\n      nodeNetworkId,\n      version: nodeVersion,\n      consensusProtocolVersion,\n    };\n  }\n}\n","import { Encoded } from '../utils/encoder.js';\nimport { buildTx, getSchema, unpackTx } from './builder/index.js';\nimport { Tag } from './builder/constants.js';\nimport { TransactionError, UnexpectedTsError } from '../utils/errors.js';\n\n/**\n * Returns account address that signed a transaction\n * @param transaction - transaction to get a signer of\n */\nexport default function getTransactionSignerAddress(\n  transaction: Encoded.Transaction,\n): Encoded.AccountAddress {\n  const params = unpackTx(transaction);\n  switch (params.tag) {\n    case Tag.SignedTx:\n      return getTransactionSignerAddress(buildTx(params.encodedTx));\n    case Tag.GaMetaTx:\n      return params.gaId;\n    default:\n  }\n\n  const nonce = getSchema(params.tag, params.version).find(([name]) => name === 'nonce')?.[1];\n  if (nonce == null)\n    throw new TransactionError(`Transaction doesn't have nonce: ${Tag[params.tag]}`);\n  if (!('senderKey' in nonce)) throw new UnexpectedTsError();\n  const address = params[nonce.senderKey as keyof typeof params] as unknown as string;\n  return address.replace(/^ok_/, 'ak_') as Encoded.AccountAddress;\n}\n","import { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport canonicalize from 'canonicalize';\nimport { Encoded, decode } from './encoder.js';\nimport { hash, messagePrefixLength } from './crypto.js';\nimport { concatBuffers } from './other.js';\n\n/**\n * Hashes arbitrary object, can be used to inline the aci hash to contract source code\n */\nexport function hashJson(data: unknown): Buffer {\n  return hash(canonicalize(data) ?? '');\n}\n\n// TODO: move this type to calldata library https://github.com/aeternity/aepp-calldata-js/issues/215\n// based on https://github.com/aeternity/aepp-calldata-js/blob/82b5a98f9b308482627da8d7484d213e9cf87151/src/AciTypeResolver.js#L129\nexport type AciValue =\n  | 'void'\n  | 'unit'\n  | 'int'\n  | 'bool'\n  | 'string'\n  | 'bits'\n  | 'hash'\n  | 'signature'\n  | 'address'\n  | 'contract_pubkey'\n  | 'Chain.ttl'\n  | 'Chain.ga_meta_tx'\n  | 'Chain.paying_for_tx'\n  | 'Chain.base_tx'\n  | 'AENS.pointee'\n  | 'AENS.name'\n  | 'MCL_BLS12_381.fr'\n  | 'MCL_BLS12_381.fp'\n  | { 'Set.set': readonly [AciValue] }\n  | { bytes: number }\n  | { list: readonly [AciValue] }\n  | { map: readonly [AciValue, AciValue] }\n  | { tuple: readonly AciValue[] }\n  | { record: ReadonlyArray<{ name: string; type: AciValue }> }\n  | { variant: ReadonlyArray<{ [key: string]: readonly AciValue[] }> }\n  | { option: readonly [AciValue] }\n  | { oracle: readonly [AciValue, AciValue] }\n  | { oracle_query: readonly [AciValue, AciValue] };\n\nexport interface Domain {\n  name?: string;\n  version?: number;\n  networkId?: string;\n  contractAddress?: Encoded.ContractAddress;\n}\n\n/**\n * Hashes domain object, can be used to inline domain hash to contract source code\n */\nexport function hashDomain(domain: Domain): Buffer {\n  const domainAci = {\n    record: [\n      {\n        name: 'name',\n        type: { option: ['string'] },\n      },\n      {\n        name: 'version',\n        type: { option: ['int'] },\n      },\n      {\n        name: 'networkId',\n        type: { option: ['string'] },\n      },\n      {\n        name: 'contractAddress',\n        type: { option: ['contract_pubkey'] },\n      },\n    ],\n  } as const;\n  const domainType = new TypeResolver().resolveType(domainAci, {});\n  const fateValue = new ContractByteArrayEncoder().encodeWithType(domain, domainType);\n  return hash(decode(fateValue));\n}\n\nexport function hashTypedData(\n  data: Encoded.ContractBytearray,\n  aci: AciValue,\n  domain: Domain,\n): Buffer {\n  return hash(\n    concatBuffers([\n      messagePrefixLength,\n      new Uint8Array([0]),\n      hashDomain(domain),\n      hashJson(aci),\n      hash(decode(data)),\n    ]),\n  );\n}\n","import nacl from 'tweetnacl';\nimport AccountBase from './Base.js';\nimport { hash, messageToHash, messagePrefixLength } from '../utils/crypto.js';\nimport { ArgumentError } from '../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../utils/encoder.js';\nimport { concatBuffers } from '../utils/other.js';\nimport { hashTypedData, AciValue } from '../utils/typed-data.js';\nimport { buildTx } from '../tx/builder/index.js';\nimport { Tag } from '../tx/builder/constants.js';\n\nexport function getBufferToSign(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  innerTx: boolean,\n): Uint8Array {\n  const prefixes = [networkId];\n  if (innerTx) prefixes.push('inner_tx');\n  const rlpBinaryTx = decode(transaction);\n  return concatBuffers([Buffer.from(prefixes.join('-')), hash(rlpBinaryTx)]);\n}\n\n/**\n * In-memory account class\n */\nexport default class AccountMemory extends AccountBase {\n  override readonly address: Encoded.AccountAddress;\n\n  readonly #secretKeyDecoded: Uint8Array;\n\n  /**\n   * @param secretKey - Secret key\n   */\n  constructor(public readonly secretKey: Encoded.AccountSecretKey) {\n    super();\n    const keyPair = nacl.sign.keyPair.fromSeed(decode(secretKey));\n    this.#secretKeyDecoded = keyPair.secretKey;\n    this.address = encode(keyPair.publicKey, Encoding.AccountAddress);\n  }\n\n  /**\n   * Generates a new AccountMemory using a random secret key\n   */\n  static generate(): AccountMemory {\n    const secretKey = encode(nacl.randomBytes(32), Encoding.AccountSecretKey);\n    return new AccountMemory(secretKey);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override async sign(data: string | Uint8Array, options?: any): Promise<Uint8Array> {\n    return nacl.sign.detached(Buffer.from(data), this.#secretKeyDecoded);\n  }\n\n  override async signTransaction(\n    transaction: Encoded.Transaction,\n    { innerTx, networkId, ...options }: { innerTx?: boolean; networkId?: string } = {},\n  ): Promise<Encoded.Transaction> {\n    if (networkId == null) {\n      throw new ArgumentError('networkId', 'provided', networkId);\n    }\n    const rlpBinaryTx = decode(transaction);\n    const txWithNetworkId = getBufferToSign(transaction, networkId, innerTx === true);\n\n    const signatures = [await this.sign(txWithNetworkId, options)];\n    return buildTx({ tag: Tag.SignedTx, encodedTx: rlpBinaryTx, signatures });\n  }\n\n  override async signMessage(message: string, options?: any): Promise<Uint8Array> {\n    return this.sign(messageToHash(message), options);\n  }\n\n  override async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: AciValue,\n    {\n      name,\n      version,\n      networkId,\n      contractAddress,\n      ...options\n    }: Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    const dHash = hashTypedData(data, aci, {\n      name,\n      version,\n      networkId,\n      contractAddress,\n    });\n    const signature = await this.sign(dHash, options);\n    return encode(signature, Encoding.Signature);\n  }\n\n  override async signDelegation(\n    delegation: Encoded.Bytearray,\n    { networkId }: { networkId?: string } = {},\n  ): Promise<Encoded.Signature> {\n    if (networkId == null) throw new ArgumentError('networkId', 'provided', networkId);\n    const payload = concatBuffers([\n      messagePrefixLength,\n      new Uint8Array([1]),\n      Buffer.from(networkId),\n      decode(delegation),\n    ]);\n    const signature = await this.sign(payload);\n    return encode(signature, Encoding.Signature);\n  }\n}\n","import { Encoded } from '../utils/encoder.js';\nimport { buildTx, buildTxHash, unpackTx } from './builder/index.js';\nimport { Tag } from './builder/constants.js';\nimport { verify } from '../utils/crypto.js';\nimport { getBufferToSign } from '../account/Memory.js';\nimport { IllegalArgumentError, InternalError, TransactionError } from '../utils/errors.js';\nimport Node from '../Node.js';\nimport getTransactionSignerAddress from './transaction-signer.js';\n\n/**\n * Calculates the cost of transaction execution\n * Provides an upper cost of contract-call-related transactions because of `gasLimit`.\n * Also assumes that oracle query fee is 0 unless it is provided in options.\n *\n * The idea is that if you need to show transaction details with some accuracy you can define\n * expense fields that you want to show separately. And to show `getExecutionCost` result as a fee,\n * subtracting all fields shown separately.\n *\n * @example\n * ```vue\n * <template>\n * Amount: {{ txUnpacked.amount }}\n * Name fee: {{ txUnpacked.nameFee }}\n * Other fees: {{ getExecutionCost(txEncoded) - txUnpacked.amount - txUnpacked.nameFee }}\n * </template>\n * ```\n *\n * Doing this way you won't worry to show wrong fee for a transaction you may not support. Because\n * the SDK calculates the overall price of any transaction on its side.\n *\n * @param transaction - Transaction to calculate the cost of\n * @param options - Options\n * @param options.innerTx - Should be provided if transaction wrapped with Tag.PayingForTx\n * @param options.gasUsed - Amount of gas actually used to make calculation more accurate\n * @param options.queryFee - Oracle query fee\n * @param options.isInitiator - Is transaction signer an initiator of state channel\n */\nexport function getExecutionCost(\n  transaction: Encoded.Transaction,\n  {\n    innerTx,\n    gasUsed,\n    queryFee,\n    isInitiator,\n  }: {\n    innerTx?: 'fee-payer' | 'freeloader';\n    gasUsed?: number;\n    queryFee?: string;\n    isInitiator?: boolean;\n  } = {},\n): bigint {\n  const params = unpackTx(transaction);\n  if (params.tag === Tag.SignedTx) {\n    throw new IllegalArgumentError(\n      \"Transaction shouldn't be a SignedTx, use `getExecutionCostBySignedTx` instead\",\n    );\n  }\n\n  let res = 0n;\n  if ('fee' in params && innerTx !== 'freeloader') {\n    res += BigInt(params.fee);\n  }\n  if (params.tag === Tag.NameClaimTx) {\n    res += BigInt(params.nameFee);\n  }\n  if (params.tag === Tag.OracleQueryTx) {\n    res += BigInt(params.queryFee);\n  }\n  if (params.tag === Tag.OracleResponseTx) {\n    res -= BigInt(queryFee ?? 0);\n  }\n  if (params.tag === Tag.ChannelSettleTx) {\n    if (isInitiator === true) res -= BigInt(params.initiatorAmountFinal);\n    if (isInitiator === false) res -= BigInt(params.responderAmountFinal);\n  }\n  if (\n    (params.tag === Tag.SpendTx ||\n      params.tag === Tag.ContractCreateTx ||\n      params.tag === Tag.ContractCallTx ||\n      params.tag === Tag.ChannelDepositTx) &&\n    innerTx !== 'fee-payer'\n  ) {\n    res += BigInt(params.amount);\n  }\n  if (params.tag === Tag.ContractCreateTx) res += BigInt(params.deposit);\n  if (\n    (params.tag === Tag.ContractCreateTx ||\n      params.tag === Tag.ContractCallTx ||\n      params.tag === Tag.GaAttachTx ||\n      params.tag === Tag.GaMetaTx) &&\n    innerTx !== 'freeloader'\n  ) {\n    res += BigInt(params.gasPrice) * BigInt(gasUsed ?? params.gasLimit);\n  }\n  if (params.tag === Tag.GaMetaTx || params.tag === Tag.PayingForTx) {\n    res += getExecutionCost(\n      buildTx(params.tx.encodedTx),\n      params.tag === Tag.PayingForTx ? { innerTx: 'fee-payer' } : {},\n    );\n  }\n  return res;\n}\n\n/**\n * Calculates the cost of signed transaction execution\n * @param transaction - Transaction to calculate the cost of\n * @param networkId - Network id used to sign the transaction\n * @param options - Options\n */\nexport function getExecutionCostBySignedTx(\n  transaction: Encoded.Transaction,\n  networkId: string,\n  options?: Omit<Parameters<typeof getExecutionCost>[1], 'innerTx'>,\n): bigint {\n  const params = unpackTx(transaction, Tag.SignedTx);\n  if (params.encodedTx.tag === Tag.GaMetaTx) {\n    return getExecutionCost(buildTx(params.encodedTx), options);\n  }\n\n  const tx = buildTx(params.encodedTx);\n  const address = getTransactionSignerAddress(tx);\n  const [isInnerTx, isNotInnerTx] = [true, false].map((f) =>\n    verify(getBufferToSign(tx, networkId, f), params.signatures[0], address),\n  );\n  if (!isInnerTx && !isNotInnerTx) throw new TransactionError(\"Can't verify signature\");\n  return getExecutionCost(buildTx(params.encodedTx), {\n    ...(isInnerTx && { innerTx: 'freeloader' }),\n    ...options,\n  });\n}\n\n/**\n * Calculates the cost of signed and not signed transaction execution using node\n * @param transaction - Transaction to calculate the cost of\n * @param node - Node to use\n * @param options - Options\n * @param options.isMined - Is transaction already mined or not\n */\nexport async function getExecutionCostUsingNode(\n  transaction: Encoded.Transaction,\n  node: Node,\n  { isMined, ...options }: { isMined?: boolean } & Parameters<typeof getExecutionCost>[1] = {},\n): Promise<bigint> {\n  let params = unpackTx(transaction);\n  const isSignedTx = params.tag === Tag.SignedTx;\n  const txHash = isSignedTx && isMined === true && buildTxHash(transaction);\n  if (params.tag === Tag.SignedTx) params = params.encodedTx;\n\n  // TODO: set gasUsed for PayingForTx after solving https://github.com/aeternity/aeternity/issues/4087\n  if (\n    options.gasUsed == null &&\n    txHash !== false &&\n    [Tag.ContractCreateTx, Tag.ContractCallTx, Tag.GaAttachTx, Tag.GaMetaTx].includes(params.tag)\n  ) {\n    const { callInfo, gaInfo } = await node.getTransactionInfoByHash(txHash);\n    const combinedInfo = callInfo ?? gaInfo;\n    if (combinedInfo == null) {\n      throw new InternalError(`callInfo and gaInfo is not available for transaction ${txHash}`);\n    }\n    options.gasUsed = combinedInfo.gasUsed;\n  }\n\n  if (options.queryFee == null && Tag.OracleResponseTx === params.tag) {\n    options.queryFee = (await node.getOracleByPubkey(params.oracleId)).queryFee.toString();\n  }\n\n  if (options.isInitiator == null && Tag.ChannelSettleTx === params.tag && isMined !== true) {\n    const { initiatorId } = await node.getChannelByPubkey(params.channelId);\n    options.isInitiator = params.fromId === initiatorId;\n  }\n\n  return isSignedTx\n    ? getExecutionCostBySignedTx(transaction, await node.getNetworkId(), options)\n    : getExecutionCost(transaction, options);\n}\n","import { RestError } from '@azure/core-rest-pipeline';\nimport { hash, isAddressValid, verify } from '../utils/crypto.js';\nimport { TxUnpacked } from './builder/schema.generated.js';\nimport { CtVersion, ProtocolToVmAbi } from './builder/field-types/ct-version.js';\nimport { Tag, ConsensusProtocolVersion } from './builder/constants.js';\nimport { buildTx, unpackTx } from './builder/index.js';\nimport { concatBuffers, isAccountNotFoundError } from '../utils/other.js';\nimport { Encoded, Encoding, decode } from '../utils/encoder.js';\nimport Node from '../Node.js';\nimport { Account } from '../apis/node/index.js';\nimport { genAggressiveCacheGetResponsesPolicy } from '../utils/autorest.js';\nimport { UnexpectedTsError } from '../utils/errors.js';\nimport getTransactionSignerAddress from './transaction-signer.js';\nimport { getExecutionCostUsingNode } from './execution-cost.js';\n\nexport interface ValidatorResult {\n  message: string;\n  key: string;\n  checkedKeys: string[];\n}\n\ntype Validator = (\n  tx: TxUnpacked,\n  options: {\n    // TODO: remove after fixing node types\n    account: Account & { id: Encoded.AccountAddress };\n    nodeNetworkId: string;\n    parentTxTypes: Tag[];\n    node: Node;\n    height: number;\n    consensusProtocolVersion: ConsensusProtocolVersion;\n  },\n) => ValidatorResult[] | Promise<ValidatorResult[]>;\n\nconst validators: Validator[] = [];\n\nasync function verifyTransactionInternal(\n  tx: TxUnpacked,\n  node: Node,\n  parentTxTypes: Tag[],\n): Promise<ValidatorResult[]> {\n  const address = getTransactionSignerAddress(buildTx(tx));\n  const [account, { height }, { consensusProtocolVersion, nodeNetworkId }] = await Promise.all([\n    node\n      .getAccountByPubkey(address)\n      .catch((error) => {\n        if (!isAccountNotFoundError(error)) throw error;\n        return { id: address, balance: 0n, nonce: 0 };\n      })\n      // TODO: remove after fixing https://github.com/aeternity/aepp-sdk-js/issues/1537\n      .then((acc) => ({ ...acc, id: acc.id as Encoded.AccountAddress })),\n    node.getCurrentKeyBlockHeight(), // TODO: don't request height on each validation, use caching\n    node.getNodeInfo(),\n  ]);\n\n  return (\n    await Promise.all(\n      validators.map(async (v) =>\n        v(tx, {\n          node,\n          account,\n          height,\n          consensusProtocolVersion,\n          nodeNetworkId,\n          parentTxTypes,\n        }),\n      ),\n    )\n  ).flat();\n}\n\n/**\n * Transaction Validator\n * This function validates some transaction properties,\n * to make sure it can be posted it to the chain\n * @category transaction builder\n * @param transaction - Base64Check-encoded transaction\n * @param nodeNotCached - Node to validate transaction against\n * @returns Array with verification errors\n * @example const errors = await verifyTransaction(transaction, node)\n */\nexport default async function verifyTransaction(\n  transaction: Parameters<typeof unpackTx>[0],\n  nodeNotCached: Node,\n): Promise<ValidatorResult[]> {\n  const pipeline = nodeNotCached.pipeline.clone();\n  pipeline.removePolicy({ name: 'parse-big-int' });\n  const node = new Node(nodeNotCached.$host, {\n    ignoreVersion: true,\n    pipeline,\n    additionalPolicies: [genAggressiveCacheGetResponsesPolicy()],\n  });\n  return verifyTransactionInternal(unpackTx(transaction), node, []);\n}\n\nvalidators.push(\n  (tx, { account, nodeNetworkId, parentTxTypes }) => {\n    if (tx.tag !== Tag.SignedTx) return [];\n    const { encodedTx, signatures } = tx;\n    if ((encodedTx ?? signatures) == null) return [];\n    if (signatures.length !== 1) return []; // TODO: Support multisignature like in state channels\n    const prefix = Buffer.from(\n      [nodeNetworkId, ...(parentTxTypes.includes(Tag.PayingForTx) ? ['inner_tx'] : [])].join('-'),\n    );\n    const txBinary = decode(buildTx(encodedTx));\n    const txWithNetworkId = concatBuffers([prefix, txBinary]);\n    const txHashWithNetworkId = concatBuffers([prefix, hash(txBinary)]);\n    if (\n      verify(txWithNetworkId, signatures[0], account.id) ||\n      verify(txHashWithNetworkId, signatures[0], account.id)\n    )\n      return [];\n    return [\n      {\n        message:\n          'Signature cannot be verified, please ensure that you transaction have' +\n          ' the correct prefix and the correct private key for the sender address',\n        key: 'InvalidSignature',\n        checkedKeys: ['encodedTx', 'signatures'],\n      },\n    ];\n  },\n  async (tx, { node, parentTxTypes }) => {\n    let nestedTx;\n    if ('encodedTx' in tx) nestedTx = tx.encodedTx;\n    if ('tx' in tx) nestedTx = tx.tx;\n    if (nestedTx == null) return [];\n    return verifyTransactionInternal(nestedTx, node, [...parentTxTypes, tx.tag]);\n  },\n  (tx, { height }) => {\n    if (!('ttl' in tx)) return [];\n    if (tx.ttl === 0 || tx.ttl > height) return [];\n    return [\n      {\n        message: `TTL ${tx.ttl} is already expired, current height is ${height}`,\n        key: 'ExpiredTTL',\n        checkedKeys: ['ttl'],\n      },\n    ];\n  },\n  async (tx, { account, parentTxTypes, node }) => {\n    if (parentTxTypes.length !== 0) return [];\n    const cost = await getExecutionCostUsingNode(buildTx(tx), node).catch(() => 0n);\n    if (cost <= account.balance) return [];\n    return [\n      {\n        message: `Account balance ${account.balance} is not enough to execute the transaction that costs ${cost}`,\n        key: 'InsufficientBalance',\n        checkedKeys: ['amount', 'fee', 'nameFee', 'gasLimit', 'gasPrice'],\n      },\n    ];\n  },\n  async (tx, { node }) => {\n    if (tx.tag !== Tag.SpendTx || isAddressValid(tx.recipientId, Encoding.Name)) return [];\n    const recipient = await node.getAccountByPubkey(tx.recipientId).catch((error) => {\n      if (!isAccountNotFoundError(error)) throw error;\n      return null;\n    });\n    if (recipient == null || recipient.payable === true) return [];\n    return [\n      {\n        message: 'Recipient account is not payable',\n        key: 'RecipientAccountNotPayable',\n        checkedKeys: ['recipientId'],\n      },\n    ];\n  },\n  (tx, { account }) => {\n    let message;\n    if (tx.tag === Tag.SignedTx && account.kind === 'generalized' && tx.signatures.length !== 0) {\n      message = \"Generalized account can't be used to generate SignedTx with signatures\";\n    }\n    if (tx.tag === Tag.GaMetaTx && account.kind === 'basic') {\n      message = \"Basic account can't be used to generate GaMetaTx\";\n    }\n    if (message == null) return [];\n    return [{ message, key: 'InvalidAccountType', checkedKeys: ['tag'] }];\n  },\n  // TODO: revert nonce check\n  // TODO: ensure nonce valid when paying for own tx\n  (tx, { consensusProtocolVersion }) => {\n    const oracleCall = Tag.OracleRegisterTx === tx.tag;\n    const contractCreate = Tag.ContractCreateTx === tx.tag || Tag.GaAttachTx === tx.tag;\n    const contractCall = Tag.ContractCallTx === tx.tag || Tag.GaMetaTx === tx.tag;\n    const type =\n      (oracleCall ? 'oracle-call' : null) ??\n      (contractCreate ? 'contract-create' : null) ??\n      (contractCall ? 'contract-call' : null);\n    if (type == null) return [];\n    const protocol = ProtocolToVmAbi[consensusProtocolVersion][type] as {\n      abiVersion: readonly any[];\n      vmVersion: readonly any[];\n    };\n\n    let ctVersion: Partial<CtVersion> | undefined;\n    if ('abiVersion' in tx) ctVersion = { abiVersion: tx.abiVersion };\n    if ('ctVersion' in tx) ctVersion = tx.ctVersion;\n    if (ctVersion == null) throw new UnexpectedTsError();\n    if (\n      !protocol.abiVersion.includes(ctVersion.abiVersion) ||\n      (contractCreate && !protocol.vmVersion.includes(ctVersion.vmVersion))\n    ) {\n      return [\n        {\n          message: `ABI/VM version ${JSON.stringify(ctVersion)} is wrong, supported is: ${JSON.stringify(protocol)}`,\n          key: 'VmAndAbiVersionMismatch',\n          checkedKeys: ['ctVersion', 'abiVersion'],\n        },\n      ];\n    }\n    return [];\n  },\n  async (tx, { node }) => {\n    if (Tag.ContractCallTx !== tx.tag) return [];\n    // TODO: remove after solving https://github.com/aeternity/aeternity/issues/3669\n    if (tx.contractId.startsWith('nm_')) return [];\n    try {\n      const { active } = await node.getContract(tx.contractId);\n      if (active) return [];\n      return [\n        {\n          message: `Contract ${tx.contractId} is not active`,\n          key: 'ContractNotActive',\n          checkedKeys: ['contractId'],\n        },\n      ];\n    } catch (error) {\n      if (!(error instanceof RestError) || error.response?.bodyAsText == null) throw error;\n      return [\n        {\n          message: JSON.parse(error.response.bodyAsText).reason, // TODO: use parsedBody instead\n          key: 'ContractNotFound',\n          checkedKeys: ['contractId'],\n        },\n      ];\n    }\n  },\n);\n","import verifyTransaction, { ValidatorResult } from './tx/validator.js';\nimport { ensureError } from './utils/other.js';\nimport { TransactionError } from './utils/errors.js';\nimport Node from './Node.js';\nimport { SignedTx } from './apis/node/index.js';\nimport { Encoded } from './utils/encoder.js';\nimport AccountBase from './account/Base.js';\nimport { buildTxHash } from './tx/builder/index.js';\nimport { poll, waitForTxConfirm } from './chain.js';\n\n/**\n * @category exception\n */\nexport class InvalidTxError extends TransactionError {\n  validation: ValidatorResult[];\n\n  transaction: Encoded.Transaction;\n\n  constructor(message: string, validation: ValidatorResult[], transaction: Encoded.Transaction) {\n    super(message);\n    this.name = 'InvalidTxError';\n    this.validation = validation;\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Signs and submits transaction for mining\n * @category chain\n * @param txUnsigned - Transaction to sign and submit\n * @param options - Options\n * @returns Transaction details\n */\nexport async function sendTransaction(\n  txUnsigned: Encoded.Transaction,\n  {\n    onNode,\n    onAccount,\n    verify = true,\n    waitMined = true,\n    confirm,\n    innerTx,\n    ...options\n  }: SendTransactionOptions,\n): Promise<SendTransactionReturnType> {\n  const tx = await onAccount.signTransaction(txUnsigned, {\n    ...options,\n    onNode,\n    innerTx,\n    networkId: await onNode.getNetworkId(),\n  });\n\n  if (innerTx === true) return { hash: buildTxHash(tx), rawTx: tx };\n\n  if (verify) {\n    const validation = await verifyTransaction(tx, onNode);\n    if (validation.length > 0) {\n      const message = `Transaction verification errors: ${validation\n        .map((v: { message: string }) => v.message)\n        .join(', ')}`;\n      throw new InvalidTxError(message, validation, tx);\n    }\n  }\n\n  try {\n    let __queue;\n    try {\n      __queue = onAccount != null ? `tx-${onAccount.address}` : null;\n    } catch (error) {\n      __queue = null;\n    }\n    const { txHash } = await onNode.postTransaction(\n      { tx },\n      {\n        requestOptions: {\n          customHeaders: {\n            // TODO: remove __retry-code after fixing https://github.com/aeternity/aeternity/issues/3803\n            '__retry-code': '400',\n            ...(__queue != null ? { __queue } : {}),\n          },\n        },\n      },\n    );\n\n    if (waitMined) {\n      const pollResult = await poll(txHash, { onNode, ...options });\n      const txData = {\n        ...pollResult,\n        hash: pollResult.hash as Encoded.TxHash,\n        rawTx: tx,\n      };\n      // wait for transaction confirmation\n      if (confirm != null && +confirm > 0) {\n        const c = typeof confirm === 'boolean' ? undefined : confirm;\n        return {\n          ...txData,\n          confirmationHeight: await waitForTxConfirm(txHash, { onNode, confirm: c, ...options }),\n        };\n      }\n      return txData;\n    }\n    return { hash: txHash, rawTx: tx };\n  } catch (error) {\n    ensureError(error);\n    throw Object.assign(error, {\n      rawTx: tx,\n      verifyTx: async () => verifyTransaction(tx, onNode),\n    });\n  }\n}\n\ntype SendTransactionOptionsType = {\n  /**\n   * Node to use\n   */\n  onNode: Node;\n  /**\n   * Account to use\n   */\n  onAccount: AccountBase;\n  /**\n   * Verify transaction before broadcast, throw error if not\n   */\n  verify?: boolean;\n  /**\n   * Ensure that transaction get into block\n   */\n  waitMined?: boolean;\n  /**\n   * Number of micro blocks that should be mined after tx get included\n   */\n  confirm?: boolean | number;\n} & Parameters<typeof poll>[1] &\n  Omit<Parameters<typeof waitForTxConfirm>[1], 'confirm'> &\n  Parameters<AccountBase['signTransaction']>[1];\nexport interface SendTransactionOptions extends SendTransactionOptionsType {}\ninterface SendTransactionReturnType extends Partial<SignedTx> {\n  hash: Encoded.TxHash;\n  // TODO: use `SignedTx.encodedTx` instead\n  rawTx: Encoded.Transaction;\n  confirmationHeight?: number;\n}\n","/**\n * Contract module - routines to interact with the æternity contract\n *\n * High level documentation of the contracts are available at\n * https://github.com/aeternity/protocol/tree/master/contracts and\n */\n\nimport { Encoder as Calldata } from '@aeternity/aepp-calldata';\nimport { Tag, AensName, DRY_RUN_ACCOUNT } from '../tx/builder/constants.js';\nimport {\n  buildContractIdByContractTx,\n  unpackTx,\n  buildTxAsync,\n  BuildTxOptions,\n  buildTxHash,\n} from '../tx/builder/index.js';\nimport { decode, Encoded } from '../utils/encoder.js';\nimport {\n  MissingContractDefError,\n  MissingContractAddressError,\n  InactiveContractError,\n  BytecodeMismatchError,\n  DuplicateContractError,\n  MissingFunctionNameError,\n  InvalidMethodInvocationError,\n  NotPayableFunctionError,\n  TypeError,\n  NodeInvocationError,\n  IllegalArgumentError,\n  NoSuchContractFunctionError,\n  MissingEventDefinitionError,\n  AmbiguousEventDefinitionError,\n  UnexpectedTsError,\n  InternalError,\n  NoWalletConnectedError,\n  ContractError,\n} from '../utils/errors.js';\nimport { hash as calcHash } from '../utils/crypto.js';\nimport {\n  ContractCallObject as NodeContractCallObject,\n  Event as NodeEvent,\n} from '../apis/node/index.js';\nimport CompilerBase, { Aci } from './compiler/Base.js';\nimport Node from '../Node.js';\nimport { getAccount, getContract, getContractByteCode, resolveName, txDryRun } from '../chain.js';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction.js';\nimport { TxUnpacked } from '../tx/builder/schema.generated.js';\nimport { Optional, isAccountNotFoundError } from '../utils/other.js';\nimport { isNameValid, produceNameId } from '../tx/builder/helpers.js';\n\ntype ContractAci = NonNullable<Aci[0]['contract']>;\ntype FunctionAci = ContractAci['functions'][0];\n\ninterface Event extends NodeEvent {\n  address: Encoded.ContractAddress;\n  data: Encoded.ContractBytearray;\n}\n\nexport interface ContractCallObject extends NodeContractCallObject {\n  returnValue: Encoded.ContractBytearray;\n  log: Event[];\n}\n\ninterface DecodedEvent {\n  name: string;\n  args: unknown[];\n  contract: {\n    name: string;\n    address: Encoded.ContractAddress;\n  };\n}\n\ntype TxData = Awaited<ReturnType<typeof sendTransaction>>;\n\ninterface SendAndProcessReturnType {\n  result?: ContractCallObject;\n  hash: TxData['hash'];\n  tx: TxUnpacked & { tag: Tag.SignedTx | Tag.ContractCallTx | Tag.ContractCreateTx };\n  txData: TxData;\n  rawTx: Encoded.Transaction;\n}\n\nexport interface ContractMethodsBase {\n  [key: string]: (...args: any[]) => any;\n}\n\ntype MethodsToContractApi<M extends ContractMethodsBase> = {\n  [Name in keyof M]: M[Name] extends (...args: infer Args) => any\n    ? (\n        ...args: [\n          ...Args,\n          ...(\n            | []\n            | [\n                Name extends 'init'\n                  ? Parameters<Contract<M>['$deploy']>[1]\n                  : Parameters<Contract<M>['$call']>[2],\n              ]\n          ),\n        ]\n      ) => ReturnType<Contract<M>['$call']>\n    : never;\n};\n\ntype ContractWithMethods<M extends ContractMethodsBase> = Contract<M> & MethodsToContractApi<M>;\n\ntype MethodNames<M extends ContractMethodsBase> = (keyof M & string) | 'init';\n\ntype MethodParameters<M extends ContractMethodsBase, Fn extends MethodNames<M>> = Fn extends 'init'\n  ? M extends { init: any }\n    ? Parameters<M['init']>\n    : []\n  : Parameters<M[Fn]>;\n\ninterface GetContractNameByEventOptions {\n  contractAddressToName?: { [key: Encoded.ContractAddress]: string };\n}\n\ninterface GetCallResultByHashReturnType<M extends ContractMethodsBase, Fn extends MethodNames<M>> {\n  decodedResult: ReturnType<M[Fn]>;\n  decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n}\n\n/**\n * Generate contract ACI object with predefined js methods for contract usage - can be used for\n * creating a reference to already deployed contracts\n * @category contract\n * @param options - Options object\n * @returns JS Contract API\n * @example\n * ```js\n * const contractIns = await Contract.initialize({ ...aeSdk.getContext(), sourceCode })\n * await contractIns.$deploy([321]) or await contractIns.init(321)\n * const callResult = await contractIns.$call('setState', [123])\n * const staticCallResult = await contractIns.$call('setState', [123], { callStatic: true })\n * ```\n * Also you can call contract like: `await contractIns.setState(123, options)`\n * Then sdk decide to make on-chain or static call (dry-run API) transaction based on function is\n * stateful or not\n */\nclass Contract<M extends ContractMethodsBase> {\n  /**\n   * Compile contract\n   * @returns bytecode\n   */\n  async $compile(): Promise<Encoded.ContractBytearray> {\n    if (this.$options.bytecode != null) return this.$options.bytecode;\n    if (this.$options.onCompiler == null)\n      throw new IllegalArgumentError(\"Can't compile without compiler\");\n    if (this.$options.sourceCode != null) {\n      const { bytecode } = await this.$options.onCompiler.compileBySourceCode(\n        this.$options.sourceCode,\n        this.$options.fileSystem,\n      );\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.sourceCodePath != null) {\n      const { bytecode } = await this.$options.onCompiler.compile(this.$options.sourceCodePath);\n      this.$options.bytecode = bytecode;\n    }\n    if (this.$options.bytecode == null) {\n      throw new IllegalArgumentError(\"Can't compile without sourceCode and sourceCodePath\");\n    }\n    return this.$options.bytecode;\n  }\n\n  #getCallResult<Fn extends MethodNames<M>>(\n    { returnType, returnValue, log }: ContractCallObject,\n    fnName: Fn,\n    transaction: Encoded.Transaction | undefined,\n    options: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): GetCallResultByHashReturnType<M, Fn> {\n    let message: string;\n    switch (returnType) {\n      case 'ok': {\n        const fnAci = this.#getFunctionAci(fnName);\n        return {\n          decodedResult: this._calldata.decode(this._name, fnAci.name, returnValue),\n          decodedEvents: this.$decodeEvents(log, options),\n        };\n      }\n      case 'revert':\n        message = this._calldata.decodeFateString(returnValue);\n        break;\n      case 'error':\n        message = decode(returnValue).toString();\n        if (/Expected \\d+ arguments, got \\d+/.test(message)) {\n          throw new ContractError(\n            `ACI doesn't match called contract. Error provided by node: ${message}`,\n          );\n        }\n        break;\n      default:\n        throw new InternalError(`Unknown return type: ${returnType}`);\n    }\n    throw new NodeInvocationError(message, transaction);\n  }\n\n  async #sendAndProcess<Fn extends MethodNames<M>>(\n    tx: Encoded.Transaction,\n    fnName: Fn,\n    options: SendTransactionOptions & Parameters<Contract<M>['$getCallResultByTxHash']>[2],\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const txData = await sendTransaction(tx, { ...this.$options, ...options });\n    return {\n      hash: txData.hash,\n      tx: unpackTx<Tag.ContractCallTx | Tag.ContractCreateTx>(txData.rawTx),\n      txData,\n      rawTx: txData.rawTx,\n      ...(txData.blockHeight != null &&\n        (await this.$getCallResultByTxHash(txData.hash, fnName, options))),\n    };\n  }\n\n  async $getCallResultByTxHash<Fn extends MethodNames<M>>(\n    hash: Encoded.TxHash,\n    fnName: Fn,\n    options?: Parameters<Contract<M>['$decodeEvents']>[1],\n  ): Promise<GetCallResultByHashReturnType<M, Fn> & { result: ContractCallObject }> {\n    const { callInfo } = await this.$options.onNode.getTransactionInfoByHash(hash);\n    if (callInfo == null) {\n      throw new ContractError(`callInfo is not available for transaction ${hash}`);\n    }\n    const callInfoTyped = callInfo as ContractCallObject;\n    return {\n      ...this.#getCallResult(callInfoTyped, fnName, undefined, options),\n      result: callInfoTyped,\n    };\n  }\n\n  async _estimateGas<Fn extends MethodNames<M>>(\n    name: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Omit<Parameters<Contract<M>['$call']>[2], 'callStatic'> = {},\n  ): Promise<number> {\n    const { result } = await this.$call(name, params, { ...options, callStatic: true });\n    if (result == null) throw new UnexpectedTsError();\n    const { gasUsed } = result;\n    // taken from https://github.com/aeternity/aepp-sdk-js/issues/1286#issuecomment-977814771\n    return Math.floor(gasUsed * 1.25);\n  }\n\n  /**\n   * Deploy contract\n   * @param params - Contract init function arguments array\n   * @param options - Options\n   * @returns deploy info\n   */\n  async $deploy(\n    params: MethodParameters<M, 'init'>,\n    options?: Parameters<Contract<M>['$call']>[2] &\n      Partial<BuildTxOptions<Tag.ContractCreateTx, 'ownerId' | 'code' | 'callData'>>,\n  ): Promise<\n    Omit<SendAndProcessReturnType, 'hash'> & {\n      transaction?: Encoded.TxHash;\n      owner?: Encoded.AccountAddress;\n      address?: Encoded.ContractAddress;\n      decodedEvents?: ReturnType<Contract<M>['$decodeEvents']>;\n    }\n  > {\n    const { callStatic, ...opt } = { ...this.$options, ...options };\n    if (this.$options.bytecode == null) await this.$compile();\n    if (callStatic === true) return this.$call('init', params, { ...opt, callStatic });\n    if (this.$options.address != null) throw new DuplicateContractError();\n\n    if (opt.onAccount == null) throw new IllegalArgumentError(\"Can't deploy without account\");\n    const ownerId = opt.onAccount.address;\n    if (this.$options.bytecode == null)\n      throw new IllegalArgumentError(\"Can't deploy without bytecode\");\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCreateTx,\n      gasLimit: opt.gasLimit ?? (await this._estimateGas('init', params, opt)),\n      callData: this._calldata.encode(this._name, 'init', params),\n      code: this.$options.bytecode,\n      ownerId,\n    });\n    const { hash, ...other } = await this.#sendAndProcess(tx, 'init', {\n      ...opt,\n      onAccount: opt.onAccount,\n    });\n    this.$options.address = buildContractIdByContractTx(other.rawTx);\n    return {\n      ...other,\n      ...(other.result?.log != null && {\n        decodedEvents: this.$decodeEvents(other.result.log, opt),\n      }),\n      owner: ownerId,\n      transaction: hash,\n      address: this.$options.address,\n    };\n  }\n\n  /**\n   * Get function schema from contract ACI object\n   * @param name - Function name\n   * @returns function ACI\n   */\n  #getFunctionAci(name: string): FunctionAci {\n    const fn = this.#aciContract.functions.find((f: { name: string }) => f.name === name);\n    if (fn != null) {\n      return fn;\n    }\n    if (name === 'init') {\n      return {\n        arguments: [],\n        name: 'init',\n        payable: false,\n        returns: 'unit',\n        stateful: true,\n      };\n    }\n    throw new NoSuchContractFunctionError(name);\n  }\n\n  /**\n   * Call contract function\n   * @param fn - Function name\n   * @param params - Array of function arguments\n   * @param options - Array of function arguments\n   * @returns CallResult\n   */\n  async $call<Fn extends MethodNames<M>>(\n    fn: Fn,\n    params: MethodParameters<M, Fn>,\n    options: Partial<BuildTxOptions<Tag.ContractCallTx, 'callerId' | 'contractId' | 'callData'>> &\n      Parameters<Contract<M>['$decodeEvents']>[1] &\n      Optional<SendTransactionOptions, 'onAccount' | 'onNode'> &\n      Omit<Parameters<typeof txDryRun>[2], 'onNode'> & { callStatic?: boolean } = {},\n  ): Promise<SendAndProcessReturnType & Partial<GetCallResultByHashReturnType<M, Fn>>> {\n    const { callStatic, top, ...opt } = { ...this.$options, ...options };\n    const fnAci = this.#getFunctionAci(fn);\n    const { address, name } = this.$options;\n    // TODO: call `produceNameId` on buildTx side\n    const contractId = name != null ? produceNameId(name) : address;\n    const { onNode } = opt;\n\n    if (fn == null) throw new MissingFunctionNameError();\n    if (fn === 'init' && callStatic !== true)\n      throw new InvalidMethodInvocationError('\"init\" can be called only via dryRun');\n    if (fn !== 'init' && opt.amount != null && Number(opt.amount) > 0 && !fnAci.payable) {\n      throw new NotPayableFunctionError(opt.amount, fn);\n    }\n\n    let callerId;\n    try {\n      if (opt.onAccount == null) throw new InternalError('Use fallback account');\n      callerId = opt.onAccount.address;\n    } catch (error) {\n      const useFallbackAccount =\n        callStatic === true &&\n        ((error instanceof TypeError &&\n          error.message ===\n            'Account should be an address (ak-prefixed string), or instance of AccountBase, got undefined instead') ||\n          error instanceof NoWalletConnectedError ||\n          (error instanceof InternalError && error.message === 'Use fallback account'));\n      if (!useFallbackAccount) throw error;\n      callerId = DRY_RUN_ACCOUNT.pub;\n    }\n    const callData = this._calldata.encode(this._name, fn, params);\n\n    if (callStatic === true) {\n      if (opt.nonce == null) {\n        const topOption = top != null && { [typeof top === 'number' ? 'height' : 'hash']: top };\n        const account = await getAccount(callerId, { ...topOption, onNode }).catch((error) => {\n          if (!isAccountNotFoundError(error)) throw error;\n          return { kind: 'basic', nonce: 0 };\n        });\n        opt.nonce = account.kind === 'generalized' ? 0 : account.nonce + 1;\n      }\n\n      const txOpt = { ...opt, onNode, callData };\n      let tx;\n      if (fn === 'init') {\n        if (this.$options.bytecode == null)\n          throw new IllegalArgumentError('Can\\'t dry-run \"init\" without bytecode');\n        tx = await buildTxAsync({\n          ...txOpt,\n          tag: Tag.ContractCreateTx,\n          code: this.$options.bytecode,\n          ownerId: callerId,\n        });\n      } else {\n        if (contractId == null)\n          throw new MissingContractAddressError(\"Can't dry-run contract without address\");\n        tx = await buildTxAsync({\n          ...txOpt,\n          tag: Tag.ContractCallTx,\n          callerId,\n          contractId,\n        });\n      }\n\n      const { callObj, ...dryRunOther } = await txDryRun(tx, callerId, { ...opt, top });\n      if (callObj == null) {\n        throw new InternalError(`callObj is not available for transaction ${tx}`);\n      }\n      const callInfoTyped = callObj as ContractCallObject;\n      return {\n        ...dryRunOther,\n        ...this.#getCallResult(callInfoTyped, fn, tx, opt),\n        tx: unpackTx(tx),\n        result: callInfoTyped,\n        rawTx: tx,\n        hash: buildTxHash(tx),\n        txData: undefined as any,\n      };\n    }\n\n    if (top != null)\n      throw new IllegalArgumentError(\"Can't handle `top` option in on-chain contract call\");\n    if (contractId == null)\n      throw new MissingContractAddressError(\"Can't call contract without address\");\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.ContractCallTx,\n      gasLimit: opt.gasLimit ?? (await this._estimateGas(fn, params, opt)),\n      callerId,\n      contractId,\n      callData,\n    });\n    if (opt.onAccount == null)\n      throw new IllegalArgumentError(\"Can't call contract on chain without account\");\n    return this.#sendAndProcess(tx, fn, { ...opt, onAccount: opt.onAccount });\n  }\n\n  /**\n   * @param ctAddress - Contract address that emitted event\n   * @param nameHash - Hash of emitted event name\n   * @param options - Options\n   * @returns Contract name\n   * @throws {@link MissingEventDefinitionError}\n   * @throws {@link AmbiguousEventDefinitionError}\n   */\n  #getContractNameByEvent(\n    ctAddress: Encoded.ContractAddress,\n    nameHash: BigInt,\n    { contractAddressToName }: GetContractNameByEventOptions,\n  ): string {\n    const addressToName = { ...this.$options.contractAddressToName, ...contractAddressToName };\n    if (addressToName[ctAddress] != null) return addressToName[ctAddress];\n\n    // TODO: consider using a third-party library\n    const isEqual = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\n    const contracts = this._aci\n      .map(({ contract }) => contract)\n      .filter((contract) => contract?.event) as ContractAci[];\n    const matchedEvents = contracts\n      .map((contract) => [contract.name, contract.event.variant])\n      .map(([name, events]) =>\n        events.map((event: {}) => [name, Object.keys(event)[0], Object.values(event)[0]]),\n      )\n      .flat()\n      .filter(([, eventName]) => BigInt(`0x${calcHash(eventName).toString('hex')}`) === nameHash)\n      .filter(([, , type], idx, arr) => !arr.slice(0, idx).some((el) => isEqual(el[2], type)));\n    switch (matchedEvents.length) {\n      case 0:\n        throw new MissingEventDefinitionError(nameHash.toString(), ctAddress);\n      case 1:\n        return matchedEvents[0][0];\n      default:\n        throw new AmbiguousEventDefinitionError(ctAddress, matchedEvents);\n    }\n  }\n\n  /**\n   * Decode Events\n   * @param events - Array of encoded events (callRes.result.log)\n   * @param options - Options\n   * @returns DecodedEvents\n   */\n  $decodeEvents(\n    events: Event[],\n    { omitUnknown, ...opt }: { omitUnknown?: boolean } & GetContractNameByEventOptions = {},\n  ): DecodedEvent[] {\n    return events\n      .map((event) => {\n        let contractName;\n        try {\n          contractName = this.#getContractNameByEvent(event.address, event.topics[0], opt);\n        } catch (error) {\n          if ((omitUnknown ?? false) && error instanceof MissingEventDefinitionError) return null;\n          throw error;\n        }\n        const decoded = this._calldata.decodeEvent(contractName, event.data, event.topics);\n        const [name, args] = Object.entries(decoded)[0];\n        return {\n          name,\n          args,\n          contract: {\n            name: contractName,\n            address: event.address,\n          },\n        };\n      })\n      .filter((e: DecodedEvent | null): e is DecodedEvent => e != null);\n  }\n\n  static async initialize<M extends ContractMethodsBase>({\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    address,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n    validateBytecode,\n    ...otherOptions\n  }: Omit<ConstructorParameters<typeof Contract>[0], 'aci' | 'address'> & {\n    validateBytecode?: boolean;\n    aci?: Aci;\n    address?: Encoded.ContractAddress | AensName;\n  }): Promise<ContractWithMethods<M>> {\n    if (aci == null && onCompiler != null) {\n      let res;\n      if (sourceCodePath != null) res = await onCompiler.compile(sourceCodePath);\n      if (sourceCode != null) res = await onCompiler.compileBySourceCode(sourceCode, fileSystem);\n      if (res != null) {\n        aci = res.aci;\n        bytecode ??= res.bytecode;\n      }\n    }\n    if (aci == null) throw new MissingContractDefError();\n\n    let name;\n    if (address != null) {\n      address = (await resolveName(address, 'contract_pubkey', {\n        resolveByNode: true,\n        onNode,\n      })) as Encoded.ContractAddress;\n      if (isNameValid(address)) name = address;\n    }\n\n    if (address == null && sourceCode == null && sourceCodePath == null && bytecode == null) {\n      throw new MissingContractAddressError(\"Can't create instance by ACI without address\");\n    }\n\n    if (address != null) {\n      const contract = await getContract(address, { onNode });\n      if (contract.active == null) throw new InactiveContractError(address);\n    }\n\n    if (validateBytecode === true) {\n      if (address == null)\n        throw new MissingContractAddressError(\"Can't validate bytecode without contract address\");\n      const onChanBytecode = (await getContractByteCode(address, { onNode })).bytecode;\n      let isValid = false;\n      if (bytecode != null) isValid = bytecode === onChanBytecode;\n      else if (sourceCode != null) {\n        if (onCompiler == null)\n          throw new IllegalArgumentError(\"Can't validate bytecode without compiler\");\n        isValid = await onCompiler.validateBySourceCode(onChanBytecode, sourceCode, fileSystem);\n      } else if (sourceCodePath != null) {\n        if (onCompiler == null)\n          throw new IllegalArgumentError(\"Can't validate bytecode without compiler\");\n        isValid = await onCompiler.validate(onChanBytecode, sourceCodePath);\n      }\n      if (!isValid) {\n        throw new BytecodeMismatchError(\n          (sourceCode ?? sourceCodePath) != null ? 'source code' : 'bytecode',\n        );\n      }\n    }\n\n    return new ContractWithMethods<M>({\n      onCompiler,\n      onNode,\n      sourceCode,\n      sourceCodePath,\n      bytecode,\n      aci,\n      address,\n      name,\n      fileSystem,\n      ...otherOptions,\n    });\n  }\n\n  _aci: Aci;\n\n  readonly #aciContract: ContractAci;\n\n  _name: string;\n\n  _calldata: Calldata;\n\n  $options: Omit<ConstructorParameters<typeof Contract>[0], 'aci'>;\n\n  /**\n   * @param options - Options\n   */\n  constructor({\n    aci,\n    ...otherOptions\n  }: {\n    onCompiler?: CompilerBase;\n    onNode: Node;\n    bytecode?: Encoded.ContractBytearray;\n    aci: Aci;\n    address?: Encoded.ContractAddress;\n    /**\n     * Supported only in Ceres\n     */\n    name?: AensName;\n    sourceCodePath?: Parameters<CompilerBase['compile']>[0];\n    sourceCode?: Parameters<CompilerBase['compileBySourceCode']>[0];\n    fileSystem?: Parameters<CompilerBase['compileBySourceCode']>[1];\n  } & Parameters<Contract<M>['$deploy']>[1]) {\n    this._aci = aci;\n    const aciLast = aci[aci.length - 1];\n    if (aciLast.contract == null) {\n      throw new IllegalArgumentError(\n        `The last 'aci' item should have 'contract' key, got ${Object.keys(aciLast)} keys instead`,\n      );\n    }\n    this.#aciContract = aciLast.contract;\n    this._name = this.#aciContract.name;\n    this._calldata = new Calldata(aci);\n    this.$options = otherOptions;\n\n    /**\n     * Generate proto function based on contract function using Contract ACI schema\n     * All function can be called like:\n     * ```js\n     * await contract.testFunction()\n     * ```\n     * then sdk will decide to use dry-run or send tx\n     * on-chain base on if function stateful or not.\n     * Also, you can manually do that:\n     * ```js\n     * await contract.testFunction({ callStatic: true }) // use call-static (dry-run)\n     * await contract.testFunction({ callStatic: false }) // send tx on-chain\n     * ```\n     */\n    Object.assign(\n      this,\n      Object.fromEntries(\n        this.#aciContract.functions.map(({ name, arguments: aciArgs, stateful }: FunctionAci) => {\n          const callStatic = name !== 'init' && !stateful;\n          return [\n            name,\n            async (...args: any) => {\n              const options = args.length === aciArgs.length + 1 ? args.pop() : {};\n              if (typeof options !== 'object')\n                throw new TypeError(`Options should be an object: ${options}`);\n              if (name === 'init') return this.$deploy(args, { callStatic, ...options });\n              return this.$call(name, args, { callStatic, ...options });\n            },\n          ];\n        }),\n      ),\n    );\n  }\n}\n\ninterface ContractWithMethodsClass {\n  new <M extends ContractMethodsBase>(\n    options: ConstructorParameters<typeof Contract>[0],\n  ): ContractWithMethods<M>;\n  initialize: (typeof Contract)['initialize'];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ContractWithMethods: ContractWithMethodsClass = Contract as any;\n\nexport default ContractWithMethods;\n","import { render } from \"./Contracts.vue?vue&type=template&id=f77fbfe2\"\nimport script from \"./Contracts.vue?vue&type=script&lang=js\"\nexport * from \"./Contracts.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <GenerateSpendTx />\n\n  <FieldAction\n    title=\"Sign inner transaction\"\n    arg-title=\"Transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Sign\"\n    :action-handler=\"signInnerTx\"\n    result-title=\"Signed inner transaction\"\n  />\n\n  <FieldAction\n    title=\"Pay for transaction\"\n    arg-title=\"Signed inner transaction\"\n    arg-placeholder=\"tx_...\"\n    action-title=\"Pay for transaction\"\n    :action-handler=\"payForTx\"\n    result-title=\"Result\"\n  />\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport FieldAction from './components/FieldAction.vue';\nimport SpendCoins from './components/SpendCoins.vue';\nimport MessageSign from './components/MessageSign.vue';\nimport GenerateSpendTx from './components/GenerateSpendTx.vue';\n\nexport default {\n  components: {\n    FieldAction,\n    SpendCoins,\n    MessageSign,\n    GenerateSpendTx,\n  },\n  computed: mapState(['aeSdk']),\n  methods: {\n    signInnerTx(txToPayFor) {\n      return this.aeSdk.signTransaction(txToPayFor, { innerTx: true });\n    },\n    payForTx(innerTx) {\n      return this.aeSdk.payForTransaction(innerTx);\n    },\n  },\n};\n</script>\n","<template>\n  <h2>Generate spend transaction</h2>\n  <div class=\"group\">\n    <div>\n      <div>Recipient address</div>\n      <div>\n        <input v-model=\"spendTo\" placeholder=\"ak_...\" />\n      </div>\n    </div>\n    <div>\n      <div>Coins amount</div>\n      <div><input v-model=\"spendAmount\" /></div>\n    </div>\n    <div>\n      <div>Payload</div>\n      <div><input v-model=\"spendPayload\" /></div>\n    </div>\n    <div>\n      <div>Increment nonce by 1</div>\n      <div>\n        <input type=\"checkbox\" v-model=\"incrementNonce\" />\n        (only if you want to pay for this transaction yourself)\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          generatePromise = generate();\n        }\n      \"\n    >\n      Generate\n    </button>\n    <div v-if=\"generatePromise\">\n      <div>Spend transaction</div>\n      <Value :value=\"generatePromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { encode, Encoding, Tag, unpackTx, buildTx } from '@aeternity/aepp-sdk';\nimport Value from './Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    spendTo: '',\n    spendAmount: '',\n    spendPayload: '',\n    incrementNonce: true,\n    generatePromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    async generate() {\n      let spendTx = await this.aeSdk.buildTx({\n        tag: Tag.SpendTx,\n        senderId: this.aeSdk.address,\n        recipientId: this.spendTo,\n        amount: this.spendAmount,\n        payload: encode(new TextEncoder().encode(this.spendPayload), Encoding.Bytearray),\n      });\n      if (this.incrementNonce) {\n        const spendTxParams = unpackTx(spendTx);\n        spendTxParams.nonce += 1;\n        spendTx = buildTx(spendTxParams);\n      }\n      return spendTx;\n    },\n  },\n};\n</script>\n","import { render } from \"./GenerateSpendTx.vue?vue&type=template&id=359217c2\"\nimport script from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\nexport * from \"./GenerateSpendTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./PayForTx.vue?vue&type=template&id=2c96b592\"\nimport script from \"./PayForTx.vue?vue&type=script&lang=js\"\nexport * from \"./PayForTx.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Domain</h2>\n  <div class=\"group\">\n    <div>\n      <div>Name</div>\n      <div>\n        <input :value=\"domain.name\" @input=\"domain.name = $event.target.value || null\" />\n      </div>\n    </div>\n    <div>\n      <div>Version</div>\n      <div>\n        <input :value=\"domain.version\" @input=\"domain.version = $event.target.value || null\" />\n      </div>\n    </div>\n    <div>\n      <div>Network id</div>\n      <div>\n        <input :value=\"domain.networkId\" @input=\"domain.networkId = $event.target.value || null\" />\n      </div>\n    </div>\n    <div>\n      <div>Contract address</div>\n      <div>\n        <input\n          :value=\"domain.contractAddress\"\n          @input=\"domain.contractAddress = $event.target.value || null\"\n        />\n      </div>\n    </div>\n  </div>\n\n  <h2>Data</h2>\n  <div class=\"group\">\n    <div>\n      <div>Type</div>\n      <div>\n        <textarea v-model=\"aci\" placeholder=\"Type as ACI JSON\" />\n      </div>\n    </div>\n    <div>\n      <div>Data</div>\n      <div>\n        <textarea v-model=\"data\" />\n      </div>\n    </div>\n    <div>\n      <div>Encoded data</div>\n      <Value :value=\"toPromise(() => dataEncoded)\" />\n    </div>\n    <div>\n      <div>Hash</div>\n      <Value :value=\"toPromise(() => hash.toString('base64'))\" />\n    </div>\n  </div>\n\n  <FieldAction\n    title=\"Sign\"\n    action-title=\"Sign\"\n    :action-handler=\"signTypedData\"\n    result-title=\"Signature\"\n  />\n\n  <h2>Verify</h2>\n  <div class=\"group\">\n    <div>\n      <div>Signature</div>\n      <div>\n        <input v-model=\"verifySignature\" placeholder=\"sg-encoded\" />\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input v-model=\"verifyAddress\" placeholder=\"ak_...\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          verifyPromise = verifyTypedData();\n        }\n      \"\n    >\n      Verify\n    </button>\n    <div v-if=\"verifyPromise\">\n      <div>Is signature correct</div>\n      <Value :value=\"verifyPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { hashTypedData, verify, decode } from '@aeternity/aepp-sdk';\nimport { TypeResolver, ContractByteArrayEncoder } from '@aeternity/aepp-calldata';\nimport Value from './components/Value.vue';\nimport FieldAction from './components/FieldAction.vue';\n\nexport default {\n  components: {\n    Value,\n    FieldAction,\n  },\n  data: () => ({\n    domain: {\n      name: 'Simple æpp',\n      version: 2,\n      networkId: 'ae_uat',\n      contractAddress: null,\n    },\n    aci: Value.methods.valueToString({\n      record: [\n        { name: 'operation', type: 'string' },\n        { name: 'parameter', type: 'int' },\n      ],\n    }),\n    data: Value.methods.valueToString({\n      operation: 'test',\n      parameter: 42,\n    }),\n    verifySignature: null,\n    verifyAddress: null,\n    verifyPromise: null,\n  }),\n  computed: {\n    ...mapState(['aeSdk']),\n    dataParsed() {\n      return JSON.parse(this.data);\n    },\n    aciParsed() {\n      return JSON.parse(this.aci);\n    },\n    dataEncoded() {\n      const dataType = new TypeResolver().resolveType(this.aciParsed);\n      return new ContractByteArrayEncoder().encodeWithType(this.dataParsed, dataType);\n    },\n    hash() {\n      return hashTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n  },\n  methods: {\n    async toPromise(getter) {\n      return getter();\n    },\n    signTypedData() {\n      return this.aeSdk.signTypedData(this.dataEncoded, this.aciParsed, this.domain);\n    },\n    async verifyTypedData() {\n      return verify(this.hash, decode(this.verifySignature), this.verifyAddress);\n    },\n  },\n};\n</script>\n","import { render } from \"./TypedData.vue?vue&type=template&id=6021109d\"\nimport script from \"./TypedData.vue?vue&type=script&lang=js\"\nexport * from \"./TypedData.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Sign delegation to contract</h2>\n  <div class=\"group\">\n    <div>\n      <div>Contract address</div>\n      <div><input v-model=\"contractAddress\" /></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensPreclaim\" />\n        AENS preclaim\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.Oracle\" />\n        Oracle\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensName\" />\n        AENS name\n      </label>\n      <div><input v-model=\"name\" /></div>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.AensWildcard\" />\n        All AENS names\n      </label>\n    </div>\n    <div>\n      <label>\n        <input v-model=\"type\" type=\"radio\" :value=\"DelegationTag.OracleResponse\" />\n        Response to oracle query\n      </label>\n      <div><input v-model=\"oracleQueryId\" /></div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          signPromise = sign();\n        }\n      \"\n    >\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signature</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { DelegationTag, packDelegation } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  data: () => ({\n    DelegationTag,\n    type: DelegationTag.AensPreclaim,\n    contractAddress: 'ct_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    name: 'test.chain',\n    oracleQueryId: 'oq_6y3N9KqQb74QsvR9NrESyhWeLNiA9aJgJ7ua8CvsTuGot6uzh',\n    signPromise: null,\n  }),\n  computed: mapState(['aeSdk']),\n  methods: {\n    getDelegationParams() {\n      switch (this.type) {\n        case DelegationTag.AensPreclaim:\n          return { tag: DelegationTag.AensPreclaim };\n        case DelegationTag.Oracle:\n          return { tag: DelegationTag.Oracle };\n        case DelegationTag.AensName:\n          return { tag: DelegationTag.AensName, nameId: this.name };\n        case DelegationTag.AensWildcard:\n          return { tag: DelegationTag.AensWildcard };\n        case DelegationTag.OracleResponse:\n          return { tag: DelegationTag.OracleResponse, queryId: this.oracleQueryId };\n        default:\n          throw new Error(`Unknown delegation signature type: ${DelegationTag[this.type]}`);\n      }\n    },\n    sign() {\n      const delegation = packDelegation({\n        ...this.getDelegationParams(),\n        contractAddress: this.contractAddress,\n        accountAddress: this.aeSdk.address,\n      });\n      return this.aeSdk.signDelegation(delegation);\n    },\n  },\n};\n</script>\n","import SchemaTypes from '../SchemaTypes.js';\nimport address from '../field-types/address.js';\nimport nameId from '../field-types/name-id.js';\nimport shortUIntConst from '../field-types/short-u-int-const.js';\nimport { Encoded, Encoding, decode, encode } from '../../../utils/encoder.js';\n\n/**\n * @category delegation signature\n */\nexport enum DelegationTag {\n  /**\n   * Delegation of all AENS names to a contract\n   */\n  AensWildcard = 1,\n  /**\n   * Delegation of an AENS name to a contract\n   */\n  AensName = 2,\n  /**\n   * Delegation of AENS preclaim to a contract\n   */\n  AensPreclaim = 3,\n  /**\n   * Delegation of oracle operations to a contract\n   */\n  Oracle = 4,\n  /**\n   * Delegation of oracle query to a contract\n   */\n  OracleResponse = 5,\n}\n\nconst oracleAddressField = address(Encoding.OracleAddress);\n/**\n * Oracle query ID to reply by a contract\n */\nconst queryIdField = {\n  serialize(value: Encoded.OracleQueryId): Buffer {\n    return oracleAddressField.serialize(encode(decode(value), Encoding.OracleAddress));\n  },\n  deserialize(value: Buffer): Encoded.OracleQueryId {\n    return encode(decode(oracleAddressField.deserialize(value)), Encoding.OracleQueryId);\n  },\n} as const;\n\n/**\n * Address of a contract to delegate permissions to\n */\nconst contractAddress = address(Encoding.ContractAddress);\n\n/**\n * @see {@link https://github.com/aeternity/protocol/blob/8a9d1d1206174627f6aaef86159dc9c643080653/contracts/fate.md#from-ceres-serialized-signature-data}\n */\nexport const schemas = [\n  {\n    tag: shortUIntConst(DelegationTag.AensWildcard),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.AensName),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    /**\n     * AENS name to manage by a contract\n     */\n    nameId,\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.AensPreclaim),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.Oracle),\n    version: shortUIntConst(1, true),\n    accountAddress: address(Encoding.AccountAddress),\n    contractAddress,\n  },\n  {\n    tag: shortUIntConst(DelegationTag.OracleResponse),\n    version: shortUIntConst(1, true),\n    queryId: queryIdField,\n    contractAddress,\n  },\n] as const;\n\ntype Schemas = SchemaTypes<typeof schemas>;\nexport type DlgParams = Schemas['TxParams'];\nexport type DlgUnpacked = Schemas['TxUnpacked'];\n","import { Encoded, Encoding } from '../../../utils/encoder.js';\nimport { packRecord, unpackRecord } from '../common.js';\nimport { DelegationTag, schemas } from './schema.js';\nimport { DlgParams, DlgUnpacked } from './schema.generated.js';\n\n/**\n * Pack delegation\n * @category delegation signature\n * @param params - Params of delegation\n * @returns Encoded delegation\n */\nexport function packDelegation(params: DlgParams): Encoded.Bytearray {\n  return packRecord(schemas, DelegationTag, params, {}, Encoding.Bytearray);\n}\n\n/**\n * Unpack delegation\n * @category delegation signature\n * @param encoded - Encoded delegation\n * @param expectedTag - Expected delegation signature type\n * @returns Params of delegation\n */\nexport function unpackDelegation<T extends DelegationTag>(\n  encoded: Encoded.Bytearray,\n  expectedTag?: T,\n): DlgUnpacked & { tag: T } {\n  return unpackRecord(schemas, DelegationTag, encoded, expectedTag, {}) as any;\n}\n","import { render } from \"./DelegationSignature.vue?vue&type=template&id=64fd9f2c\"\nimport script from \"./DelegationSignature.vue?vue&type=script&lang=js\"\nexport * from \"./DelegationSignature.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <h2>Generate a JWT</h2>\n  <div class=\"group\">\n    <div>\n      <div>Payload as JSON</div>\n      <div>\n        <input :value=\"payloadAsJson\" @input=\"payloadAsJson = $event.target.value || '{}'\" />\n      </div>\n    </div>\n    <div>\n      <div>Include \"sub_jwk\"</div>\n      <div>\n        <input type=\"checkbox\" v-model=\"includeSubJwk\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          signPromise = sign();\n        }\n      \"\n    >\n      Sign\n    </button>\n    <div v-if=\"signPromise\">\n      <div>Signed JWT</div>\n      <Value :value=\"signPromise\" />\n    </div>\n  </div>\n\n  <h2>Unpack and verify JWT</h2>\n  <div class=\"group\">\n    <div>\n      <div>JWT to unpack</div>\n      <div>\n        <input :value=\"jwt\" @input=\"jwt = $event.target.value || null\" />\n      </div>\n    </div>\n    <div>\n      <div>Signer address</div>\n      <div>\n        <input :value=\"address\" @input=\"address = $event.target.value || null\" />\n      </div>\n    </div>\n    <button\n      @click=\"\n        () => {\n          unpackPromise = unpack();\n        }\n      \"\n    >\n      Unpack\n    </button>\n    <div v-if=\"unpackPromise\">\n      <div>Unpack result</div>\n      <Value :value=\"unpackPromise\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport { unpackJwt, signJwt } from '@aeternity/aepp-sdk';\nimport Value from './components/Value.vue';\n\nexport default {\n  components: { Value },\n  computed: mapState(['aeSdk']),\n  data: () => ({\n    payloadAsJson: '{ \"test\": true }',\n    includeSubJwk: true,\n    signPromise: null,\n    jwt: 'eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJzdWJfandrIjp7ImNydiI6IkVkMjU1MTkiLCJrdHkiOiJPS1AiLCJ4IjoiaEF5WFM1Y1dSM1pGUzZFWjJFN2NUV0JZcU43SksyN2NWNHF5MHd0TVFnQSJ9LCJ0ZXN0IjoiZGF0YSJ9.u9El4b2O2LRhvTTW3g46vk1hx0xXWPkJEaEeEy-rLzLr2yuQlNc7qIdcr_z06BgHx5jyYv2CpUL3hqLpc0RzBA',\n    address: null,\n    unpackPromise: null,\n  }),\n  methods: {\n    async sign() {\n      const payload = JSON.parse(this.payloadAsJson);\n      if (!this.includeSubJwk) payload.sub_jwk = undefined;\n      // TODO: expose account used in aepp-wallet connection\n      return signJwt(payload, this.aeSdk._resolveAccount(this.aeSdk.address));\n    },\n    async unpack() {\n      return unpackJwt(this.jwt, this.address);\n    },\n  },\n};\n</script>\n","import canonicalize from 'canonicalize';\nimport AccountBase from '../account/Base.js';\nimport { Encoded, Encoding, decode, encode } from './encoder.js';\nimport { verify } from './crypto.js';\nimport { ArgumentError, InvalidSignatureError } from './errors.js';\n\n// TODO: use Buffer.from(data, 'base64url') after solving https://github.com/feross/buffer/issues/309\nconst toBase64Url = (data: Buffer | Uint8Array | string): string =>\n  Buffer.from(data).toString('base64').replaceAll('/', '_').replaceAll('+', '-').replace(/=+$/, '');\n\nconst fromBase64Url = (data: string): Buffer =>\n  Buffer.from(data.replaceAll('_', '/').replaceAll('-', '+'), 'base64');\n\nconst objectToBase64Url = (data: any): string => toBase64Url(canonicalize(data) ?? '');\n\nconst header = 'eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9'; // objectToBase64Url({ alg: 'EdDSA', typ: 'JWT' })\n\n/**\n * JWT including specific header\n * @category JWT\n */\nexport type Jwt = `${typeof header}.${string}.${string}`;\n\n/**\n * Generate a signed JWT\n * Provide `\"sub_jwk\": undefined` in payload to omit signer public key added by default.\n * @param originalPayload - Payload to sign\n * @param account - Account to sign by\n * @category JWT\n */\nexport async function signJwt(originalPayload: any, account: AccountBase): Promise<Jwt> {\n  const payload = { ...originalPayload };\n  if (!('sub_jwk' in payload)) {\n    payload.sub_jwk = {\n      kty: 'OKP',\n      crv: 'Ed25519',\n      x: toBase64Url(decode(account.address)),\n    };\n  }\n  if (payload.sub_jwk === undefined) delete payload.sub_jwk;\n  const body = `${header}.${objectToBase64Url(payload)}` as const;\n  const signature = await account.sign(body);\n  return `${body}.${toBase64Url(signature)}`;\n}\n\n/**\n * Unpack JWT. It will check signature if address or \"sub_jwk\" provided.\n * @param jwt - JWT to unpack\n * @param address - Address to check signature\n * @category JWT\n */\nexport function unpackJwt(\n  jwt: Jwt,\n  address?: Encoded.AccountAddress,\n): {\n  /**\n   * JWT payload as object\n   */\n  payload: any;\n  /**\n   * Undefined returned in case signature is not checked\n   */\n  signer: Encoded.AccountAddress | undefined;\n} {\n  const components = jwt.split('.');\n  if (components.length !== 3)\n    throw new ArgumentError('JWT components count', 3, components.length);\n  const [h, payloadEncoded, signature] = components;\n  if (h !== header) throw new ArgumentError('JWT header', header, h);\n  const payload = JSON.parse(fromBase64Url(payloadEncoded).toString());\n  const jwk = payload.sub_jwk ?? {};\n  const signer =\n    jwk.x == null || jwk.kty !== 'OKP' || jwk.crv !== 'Ed25519'\n      ? address\n      : encode(fromBase64Url(jwk.x), Encoding.AccountAddress);\n  if (address != null && signer !== address) {\n    throw new ArgumentError('address', `${signer} (\"sub_jwk\")`, address);\n  }\n  if (\n    signer != null &&\n    !verify(Buffer.from(`${h}.${payloadEncoded}`), fromBase64Url(signature), signer)\n  ) {\n    throw new InvalidSignatureError(`JWT is not signed by ${signer}`);\n  }\n  return { payload, signer };\n}\n\n/**\n * Check is string a JWT or not. Use to validate the user input.\n * @param maybeJwt - A string to check\n * @returns True if argument is a JWT\n * @category JWT\n */\nexport function isJwt(maybeJwt: string): maybeJwt is Jwt {\n  try {\n    unpackJwt(maybeJwt as Jwt);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Throws an error if argument is not JWT. Use to ensure that a value is JWT.\n * @param maybeJwt - A string to check\n * @category JWT\n */\nexport function ensureJwt(maybeJwt: string): asserts maybeJwt is Jwt {\n  unpackJwt(maybeJwt as Jwt);\n}\n\n/**\n * Check is JWT signed by address from arguments or \"sub_jwk\"\n * @param jwt - JWT to check\n * @param address - Address to check signature\n * @category JWT\n */\nexport function verifyJwt(jwt: Jwt, address?: Encoded.AccountAddress): boolean {\n  try {\n    const { signer } = unpackJwt(jwt, address);\n    return signer != null;\n  } catch (error) {\n    return false;\n  }\n}\n","import { render } from \"./Jwt.vue?vue&type=template&id=dbfeaa06\"\nimport script from \"./Jwt.vue?vue&type=script&lang=js\"\nexport * from \"./Jwt.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=736a91e6\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./styles.scss?vue&type=style&index=0&lang=scss&external\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { BigNumber } from 'bignumber.js';\nimport { getBalance, resolveName } from './chain.js';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction.js';\nimport { buildTxAsync, BuildTxOptions, unpackTx } from './tx/builder/index.js';\nimport { ArgumentError } from './utils/errors.js';\nimport { Encoded } from './utils/encoder.js';\nimport { Tag, AensName } from './tx/builder/constants.js';\n\n// TODO: name verify should not overlap with transaction verify\ntype ResolveNameOptions = Omit<Parameters<typeof resolveName>[2], 'onNode' | 'verify'>;\n\n/**\n * Send coins to another account\n * @category chain\n * @param amount - Amount to spend\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @returns Transaction\n */\nexport async function spend(\n  amount: number | string,\n  recipientIdOrName: Encoded.AccountAddress | Encoded.ContractAddress | AensName,\n  options: SpendOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId: options.onAccount.address,\n      recipientId: await resolveName(recipientIdOrName, 'account_pubkey', options),\n      amount,\n    }),\n    options,\n  );\n}\n\ntype SpendOptionsType = BuildTxOptions<\n  Tag.SpendTx,\n  'senderId' | 'recipientId' | 'amount' | 'onNode'\n> &\n  ResolveNameOptions &\n  SendTransactionOptions;\ninterface SpendOptions extends SpendOptionsType {}\n\n// TODO: Rename to spendFraction\n/**\n * Spend a fraction of coin balance to another account. Useful if needed to drain account balance\n * completely, sending funds to another account (with fraction set to 1).\n * @category chain\n * @param fraction - Fraction of balance to spend (between 0 and 1)\n * @param recipientIdOrName - Address or name of recipient account\n * @param options - Options\n * @example\n * ```js\n * // `fraction` * 100 = % of AE to be transferred (e.g. `0.42` for 42% or `1` for 100%)\n * const { blockHeight } = await aeSdk.transferFunds(\n *   0.42,\n *   'ak_21A27UVVt3hDkBE5J7rhhqnH5YNb4Y1dqo4PnSybrH85pnWo7E',\n * );\n * console.log('Transaction mined at', blockHeight);\n * ```\n */\nexport async function transferFunds(\n  fraction: number | string, // TODO: accept only number\n  recipientIdOrName: AensName | Encoded.AccountAddress | Encoded.ContractAddress,\n  options: TransferFundsOptions,\n): ReturnType<typeof sendTransaction> {\n  if (+fraction < 0 || +fraction > 1) {\n    throw new ArgumentError('fraction', 'a number between 0 and 1', fraction);\n  }\n  const recipientId = await resolveName(recipientIdOrName, 'account_pubkey', options);\n  const senderId = options.onAccount.address;\n  const balance = new BigNumber(await getBalance.bind(options.onAccount)(senderId, options));\n  const desiredAmount = balance.times(fraction).integerValue(BigNumber.ROUND_HALF_UP);\n  const { fee } = unpackTx(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount: desiredAmount,\n    }),\n    Tag.SpendTx,\n  );\n  // Reducing of the amount may reduce transaction fee, so this is not completely accurate\n  const amount = desiredAmount.plus(fee).gt(balance) ? balance.minus(fee) : desiredAmount;\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.SpendTx,\n      senderId,\n      recipientId,\n      amount,\n    }),\n    options,\n  );\n}\n\ntype TransferFundsOptionsType = BuildTxOptions<\n  Tag.SpendTx,\n  'senderId' | 'recipientId' | 'amount' | 'onNode'\n> &\n  ResolveNameOptions &\n  SendTransactionOptions;\ninterface TransferFundsOptions extends TransferFundsOptionsType {}\n\n/**\n * Submit transaction of another account paying for it (fee and gas)\n * @category chain\n * @param transaction - tx_<base64>-encoded transaction\n * @param options - Options\n * @returns Object Transaction\n */\nexport async function payForTransaction(\n  transaction: Encoded.Transaction,\n  options: PayForTransactionOptions,\n): ReturnType<typeof sendTransaction> {\n  return sendTransaction(\n    await buildTxAsync({\n      _isInternalBuild: true,\n      ...options,\n      tag: Tag.PayingForTx,\n      payerId: options.onAccount.address,\n      tx: transaction,\n    }),\n    options,\n  );\n}\n\ninterface PayForTransactionOptions\n  extends BuildTxOptions<Tag.PayingForTx, 'payerId' | 'tx' | 'onNode'>,\n    SendTransactionOptions {}\n","/**\n * Generalized Account module - routines to use generalized account\n */\n\nimport { ConsensusProtocolVersion, Int, Tag } from '../tx/builder/constants.js';\nimport {\n  buildContractIdByContractTx,\n  buildTx,\n  buildTxAsync,\n  BuildTxOptions,\n  unpackTx,\n} from '../tx/builder/index.js';\nimport { hash } from '../utils/crypto.js';\nimport { decode, encode, Encoded, Encoding } from '../utils/encoder.js';\nimport { ArgumentError, IllegalArgumentError } from '../utils/errors.js';\nimport { concatBuffers } from '../utils/other.js';\nimport Contract from './Contract.js';\nimport Node from '../Node.js';\nimport { getAccount } from '../chain.js';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction.js';\nimport CompilerBase from './compiler/Base.js';\nimport { packEntry } from '../tx/builder/entry/index.js';\nimport { EntryTag } from '../tx/builder/entry/constants.js';\n\n/**\n * Convert current account to GA\n * @category contract\n * @param authFnName - Authorization function name\n * @param args - init arguments\n * @param options - Options\n * @returns General Account Object\n */\nexport async function createGeneralizedAccount(\n  authFnName: string,\n  args: any[],\n  {\n    onAccount,\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n    ...options\n  }: CreateGeneralizedAccountOptions,\n): Promise<\n  Readonly<{\n    owner: Encoded.AccountAddress;\n    transaction: Encoded.TxHash;\n    rawTx: Encoded.Transaction;\n    gaContractId: Encoded.ContractAddress;\n  }>\n> {\n  const ownerId = onAccount.address;\n  if ((await getAccount(ownerId, { onNode })).kind === 'generalized') {\n    throw new IllegalArgumentError(`Account ${ownerId} is already GA`);\n  }\n\n  const contract = await Contract.initialize<{ init: (...a: any[]) => void }>({\n    onAccount,\n    onCompiler,\n    onNode,\n    bytecode,\n    aci,\n    sourceCodePath,\n    sourceCode,\n    fileSystem,\n  });\n\n  const tx = await buildTxAsync({\n    _isInternalBuild: true,\n    ...options,\n    tag: Tag.GaAttachTx,\n    onNode,\n    code: await contract.$compile(),\n    gasLimit: options.gasLimit ?? (await contract._estimateGas('init', args, options)),\n    ownerId,\n    callData: contract._calldata.encode(contract._name, 'init', args),\n    authFun: hash(authFnName),\n  });\n  const { hash: transaction, rawTx } = await sendTransaction(tx, {\n    onNode,\n    onAccount,\n    onCompiler,\n    ...options,\n  });\n  const contractId = buildContractIdByContractTx(rawTx);\n\n  return Object.freeze({\n    owner: ownerId,\n    transaction,\n    rawTx,\n    gaContractId: contractId,\n  });\n}\n\ninterface CreateGeneralizedAccountOptions\n  extends BuildTxOptions<\n      Tag.GaAttachTx,\n      'authFun' | 'callData' | 'code' | 'ownerId' | 'gasLimit' | 'onNode'\n    >,\n    SendTransactionOptions,\n    Pick<\n      Parameters<typeof Contract.initialize>[0],\n      'bytecode' | 'aci' | 'sourceCodePath' | 'sourceCode' | 'fileSystem'\n    > {\n  onCompiler: CompilerBase;\n  gasLimit?: number;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx payload\n * @category contract\n * @param transaction - tx-encoded transaction\n * @param options - Options\n * @param options.fee - GaMetaTx fee, required in Ceres\n * @param options.gasPrice - GaMetaTx gasPrice, required in Ceres\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHash(\n  transaction: Encoded.Transaction,\n  { fee, gasPrice, onNode }: { fee?: Int; gasPrice?: Int; onNode: Node },\n): Promise<Buffer> {\n  const { nodeNetworkId, consensusProtocolVersion } = await onNode.getNodeInfo();\n  let payload = hash(concatBuffers([Buffer.from(nodeNetworkId), decode(transaction)]));\n  if (consensusProtocolVersion === ConsensusProtocolVersion.Ceres) {\n    if (fee == null) throw new ArgumentError('fee', 'provided (in Ceres)', fee);\n    if (gasPrice == null) throw new ArgumentError('gasPrice', 'provided (in Ceres)', gasPrice);\n    payload = hash(\n      decode(\n        packEntry({\n          tag: EntryTag.GaMetaTxAuthData,\n          fee,\n          gasPrice,\n          txHash: encode(payload, Encoding.TxHash),\n        }),\n      ),\n    );\n  }\n  return payload;\n}\n\n/**\n * Build a transaction hash the same as `Auth.tx_hash` by GaMetaTx\n * @category contract\n * @param transaction - tx-encoded signed GaMeta transaction\n * @param options - Options\n * @param options.onNode - Node to use\n * @returns Transaction hash\n */\nexport async function buildAuthTxHashByGaMetaTx(\n  transaction: Encoded.Transaction,\n  { onNode }: { onNode: Node },\n): Promise<Buffer> {\n  const txParams = unpackTx(transaction, Tag.SignedTx);\n  if (txParams.encodedTx.tag !== Tag.GaMetaTx) {\n    throw new ArgumentError('transaction', 'to include GaMetaTx', Tag[txParams.encodedTx.tag]);\n  }\n  return buildAuthTxHash(buildTx(txParams.encodedTx.tx.encodedTx), {\n    fee: txParams.encodedTx.fee,\n    gasPrice: txParams.encodedTx.gasPrice,\n    onNode,\n  });\n}\n","import * as chainMethods from './chain.js';\nimport { sendTransaction } from './send-transaction.js';\nimport * as spendMethods from './spend.js';\nimport * as contractGaMethods from './contract/ga.js';\nimport { buildTxAsync } from './tx/builder/index.js';\nimport { mapObject, UnionToIntersection } from './utils/other.js';\nimport { wrapWithProxy } from './utils/wrap-proxy.js';\nimport Node from './Node.js';\nimport { TxParamsAsync } from './tx/builder/schema.generated.js';\nimport AccountBase from './account/Base.js';\nimport { Encoded } from './utils/encoder.js';\nimport CompilerBase from './contract/compiler/Base.js';\n\nexport type OnAccount = Encoded.AccountAddress | AccountBase | undefined;\n\nconst methods = {\n  ...chainMethods,\n  sendTransaction,\n  ...spendMethods,\n  ...contractGaMethods,\n} as const;\n\ntype Decrement<Number extends number> = [-1, 0, 1, 2, 3, 4, 5][Number];\ntype GetMethodsOptions<Methods extends { [key: string]: Function }> = {\n  [Name in keyof Methods]: Methods[Name] extends (...args: infer Args) => any\n    ? Args[Decrement<Args['length']>]\n    : never;\n};\ntype MethodsOptions = GetMethodsOptions<typeof methods>;\nexport interface AeSdkMethodsOptions\n  extends Partial<UnionToIntersection<MethodsOptions[keyof MethodsOptions]>> {}\n\nexport interface WrappedOptions {\n  onAccount: AccountBase;\n  onCompiler: CompilerBase;\n  onNode: Node;\n}\n\n/**\n * AeSdkMethods is the composition of:\n * - chain methods\n * - tx methods\n * - aens methods\n * - spend methods\n * - oracle methods\n * - contract methods\n * - contract ga methods\n *\n * While these methods can be used separately, this class provides a handy way to store\n * their context (current account, network, and compiler to use).\n */\nclass AeSdkMethods {\n  _options: AeSdkMethodsOptions = {};\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   */\n  constructor(options: AeSdkMethodsOptions = {}) {\n    Object.assign(this._options, options);\n    this.#wrappedOptions = {\n      onAccount: wrapWithProxy(() => this._options.onAccount),\n      onNode: wrapWithProxy(() => this._options.onNode),\n      onCompiler: wrapWithProxy(() => this._options.onCompiler),\n    };\n  }\n\n  /**\n   * Returns sdk instance options with references to current account, node, compiler.\n   * Used to create an instance (Contract, Oracle) bound to AeSdk state.\n   * @param mergeWith - Merge context with these extra options\n   * @returns Context object\n   */\n  getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n    };\n  }\n\n  // TODO: omit onNode from options, because it is already in context\n  async buildTx(options: TxParamsAsync): Promise<Encoded.Transaction> {\n    // TODO: remove `any` at the same time as AeSdk class\n    return buildTxAsync({ ...(this.getContext() as any), ...options });\n  }\n}\n\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K;\n}[keyof T];\n\ntype OptionalIfNotRequired<T extends [any]> = RequiredKeys<T[0]> extends never ? T | [] : T;\n\ntype ReplaceOnAccount<Options> = Options extends { onAccount: any }\n  ? Omit<Options, 'onAccount'> & {\n      /**\n       * Make operation on specific account by providing address (to use account from sdk) or instance\n       * of AccountBase (like MemoryAccount)\n       */\n      onAccount: OnAccount;\n    }\n  : Options;\n\ntype MakeOptional<Options> = OptionalIfNotRequired<\n  [Omit<Options, 'onNode' | 'onCompiler' | 'onAccount'> & Partial<ReplaceOnAccount<Options>>]\n>;\n\ntype TransformMethods<Methods extends { [key: string]: Function }> = {\n  [Name in keyof Methods]: Methods[Name] extends (\n    ...args: [...infer Args, infer Options]\n  ) => infer Ret\n    ? (...args: [...Args, ...MakeOptional<Options>]) => Ret\n    : never;\n};\n\ninterface AeSdkMethodsTransformed extends TransformMethods<typeof methods> {}\n\nObject.assign(\n  AeSdkMethods.prototype,\n  mapObject<Function, Function>(methods, ([name, handler]) => [\n    name,\n    function methodWrapper(this: AeSdkMethods, ...args: any[]) {\n      args.length = handler.length;\n      const options = args[args.length - 1];\n      args[args.length - 1] = this.getContext(options);\n      return handler(...args);\n    },\n  ]),\n);\n\ntype AeSdkMethodsTyped = AeSdkMethods & AeSdkMethodsTransformed;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AeSdkMethodsTyped = AeSdkMethods as new (options?: AeSdkMethodsOptions) => AeSdkMethodsTyped;\nexport default AeSdkMethodsTyped;\n","import Node from './Node.js';\nimport AccountBase from './account/Base.js';\nimport {\n  CompilerError,\n  DuplicateNodeError,\n  NodeNotFoundError,\n  NotImplementedError,\n  TypeError,\n} from './utils/errors.js';\nimport { Encoded } from './utils/encoder.js';\nimport { wrapWithProxy } from './utils/wrap-proxy.js';\nimport CompilerBase from './contract/compiler/Base.js';\nimport AeSdkMethods, { OnAccount, AeSdkMethodsOptions, WrappedOptions } from './AeSdkMethods.js';\n\ntype NodeInfo = Awaited<ReturnType<Node['getNodeInfo']>> & { name: string };\n\n/**\n * Basic AeSdk class implements:\n * - node selector,\n * - integrated compiler support,\n * - wrappers of account methods mapped to the current account.\n */\nexport default class AeSdkBase extends AeSdkMethods {\n  pool: Map<string, Node> = new Map();\n\n  selectedNodeName?: string;\n\n  readonly #wrappedOptions: WrappedOptions;\n\n  /**\n   * @param options - Options\n   * @param options.nodes - Array of nodes\n   */\n  constructor({\n    nodes = [],\n    ...options\n  }: AeSdkMethodsOptions & {\n    nodes?: Array<{ name: string; instance: Node }>;\n  } = {}) {\n    super(options);\n\n    nodes.forEach(({ name, instance }, i) => this.addNode(name, instance, i === 0));\n\n    this.#wrappedOptions = {\n      onNode: wrapWithProxy(() => this.api),\n      onCompiler: wrapWithProxy(() => this.compilerApi),\n      onAccount: wrapWithProxy(() => this._resolveAccount()),\n    };\n  }\n\n  // TODO: consider dropping this getter, because:\n  // compiler is not intended to be used separately any more (functionality limited to sdk needs)\n  // and user creates its instance by himself\n  get compilerApi(): CompilerBase {\n    if (this._options.onCompiler == null) {\n      throw new CompilerError(\"You can't use Compiler API. Compiler is not ready!\");\n    }\n    return this._options.onCompiler;\n  }\n\n  get api(): Node {\n    this.ensureNodeConnected();\n    return this.pool.get(this.selectedNodeName) as Node;\n  }\n\n  /**\n   * Add Node\n   * @param name - Node name\n   * @param node - Node instance\n   * @param select - Select this node as current\n   * @example\n   * ```js\n   * // add and select new node with name 'testNode'\n   * aeSdkBase.addNode('testNode', new Node({ url }), true)\n   * ```\n   */\n  addNode(name: string, node: Node, select = false): void {\n    if (this.pool.has(name)) throw new DuplicateNodeError(name);\n\n    this.pool.set(name, node);\n    if (select || this.selectedNodeName == null) {\n      this.selectNode(name);\n    }\n  }\n\n  /**\n   * Select Node\n   * @param name - Node name\n   * @example\n   * nodePool.selectNode('testNode')\n   */\n  selectNode(name: string): void {\n    if (!this.pool.has(name)) throw new NodeNotFoundError(`Node with name ${name} not in pool`);\n    this.selectedNodeName = name;\n  }\n\n  /**\n   * Check if you have selected node\n   * @example\n   * nodePool.isNodeConnected()\n   */\n  isNodeConnected(): this is AeSdkBase & { selectedNodeName: string } {\n    return this.selectedNodeName != null;\n  }\n\n  protected ensureNodeConnected(): asserts this is AeSdkBase & { selectedNodeName: string } {\n    if (!this.isNodeConnected()) {\n      throw new NodeNotFoundError(\"You can't use Node API. Node is not connected or not defined!\");\n    }\n  }\n\n  /**\n   * Get information about node\n   * @example\n   * ```js\n   * nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }\n   * ```\n   */\n  async getNodeInfo(): Promise<NodeInfo> {\n    this.ensureNodeConnected();\n    return {\n      name: this.selectedNodeName,\n      ...(await this.api.getNodeInfo()),\n    };\n  }\n\n  /**\n   * Get array of available nodes\n   * @example\n   * nodePool.getNodesInPool()\n   */\n  async getNodesInPool(): Promise<NodeInfo[]> {\n    return Promise.all(\n      Array.from(this.pool.entries()).map(async ([name, node]) => ({\n        name,\n        ...(await node.getNodeInfo()),\n      })),\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addresses(): Encoded.AccountAddress[] {\n    return [];\n  }\n\n  /**\n   * Resolves an account\n   * @param account - ak-address, instance of AccountBase, or keypair\n   */\n  _resolveAccount(account: OnAccount = this._options.onAccount): AccountBase {\n    if (typeof account === 'string') throw new NotImplementedError('Address in AccountResolver');\n    if (typeof account === 'object') return account;\n    throw new TypeError(\n      'Account should be an address (ak-prefixed string), ' +\n        `or instance of AccountBase, got ${String(account)} instead`,\n    );\n  }\n\n  get address(): Encoded.AccountAddress {\n    return this._resolveAccount().address;\n  }\n\n  /**\n   * Sign data blob\n   * @param data - Data to sign\n   * @param options - Options\n   */\n  async sign(\n    data: string | Uint8Array,\n    { onAccount, ...options }: { onAccount?: OnAccount } = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).sign(data, options);\n  }\n\n  /**\n   * Sign encoded transaction\n   * @param tx - Transaction to sign\n   * @param options - Options\n   */\n  async signTransaction(\n    tx: Encoded.Transaction,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signTransaction']>[1] = {},\n  ): Promise<Encoded.Transaction> {\n    const networkId = this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signTransaction(tx, { networkId, ...options });\n  }\n\n  /**\n   * Sign message\n   * @param message - Message to sign\n   * @param options - Options\n   */\n  async signMessage(\n    message: string,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signMessage']>[1] = {},\n  ): Promise<Uint8Array> {\n    return this._resolveAccount(onAccount).signMessage(message, options);\n  }\n\n  /**\n   * Sign typed data\n   * @param data - Encoded data to sign\n   * @param aci - Type of data to sign\n   * @param options - Options\n   */\n  async signTypedData(\n    data: Encoded.ContractBytearray,\n    aci: Parameters<AccountBase['signTypedData']>[1],\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signTypedData']>[2] = {},\n  ): Promise<Encoded.Signature> {\n    return this._resolveAccount(onAccount).signTypedData(data, aci, options);\n  }\n\n  /**\n   * Sign delegation, works only in Ceres\n   * @param delegation - Delegation to sign\n   * @param options - Options\n   */\n  async signDelegation(\n    delegation: Encoded.Bytearray,\n    {\n      onAccount,\n      ...options\n    }: { onAccount?: OnAccount } & Parameters<AccountBase['signDelegation']>[1] = {},\n  ): Promise<Encoded.Signature> {\n    options.networkId ??=\n      this.selectedNodeName !== null ? await this.api.getNetworkId() : undefined;\n    return this._resolveAccount(onAccount).signDelegation(delegation, options);\n  }\n\n  /**\n   * The same as AeSdkMethods:getContext, but it would resolve ak_-prefixed address in\n   * `mergeWith.onAccount` to AccountBase.\n   */\n  override getContext(mergeWith: AeSdkMethodsOptions = {}): AeSdkMethodsOptions & WrappedOptions {\n    return {\n      ...this._options,\n      ...this.#wrappedOptions,\n      ...mergeWith,\n      ...(mergeWith.onAccount != null && {\n        onAccount: this._resolveAccount(mergeWith.onAccount),\n      }),\n    };\n  }\n}\n","import AeSdkBase from './AeSdkBase.js';\nimport { OnAccount } from './AeSdkMethods.js';\nimport AccountBase from './account/Base.js';\nimport { decode, Encoded } from './utils/encoder.js';\nimport { UnavailableAccountError } from './utils/errors.js';\n\nexport default class AeSdk extends AeSdkBase {\n  accounts: { [key: Encoded.AccountAddress]: AccountBase } = {};\n\n  selectedAddress?: Encoded.AccountAddress;\n\n  /**\n   * @param options - Options\n   */\n  constructor({\n    accounts,\n    ...options\n  }: { accounts?: AccountBase[] } & ConstructorParameters<typeof AeSdkBase>[0] = {}) {\n    super(options);\n    accounts?.forEach((account, idx) => this.addAccount(account, { select: idx === 0 }));\n  }\n\n  override _resolveAccount(account: OnAccount = this.selectedAddress): AccountBase {\n    if (typeof account === 'string') {\n      const address = account as Encoded.AccountAddress;\n      decode(address);\n      if (this.accounts[address] == null) throw new UnavailableAccountError(account);\n      account = this.accounts[address];\n    }\n    return super._resolveAccount(account);\n  }\n\n  /**\n   * Get accounts addresses\n   * @example addresses()\n   */\n  override addresses(): Encoded.AccountAddress[] {\n    return Object.keys(this.accounts) as Encoded.AccountAddress[];\n  }\n\n  /**\n   * Add specific account\n   * @param account - Account instance\n   * @param options - Options\n   * @param options.select - Select account\n   * @example addAccount(account)\n   */\n  addAccount(account: AccountBase, { select }: { select?: boolean } = {}): void {\n    const { address } = account;\n    this.accounts[address] = account;\n    if (select === true) this.selectAccount(address);\n  }\n\n  /**\n   * Remove specific account\n   * @param address - Address of account to remove\n   * @example removeAccount(address)\n   */\n  removeAccount(address: Encoded.AccountAddress): void {\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    delete this.accounts[address]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n    if (this.selectedAddress === address) delete this.selectedAddress;\n  }\n\n  /**\n   * Select specific account\n   * @param address - Address of account to select\n   * @example selectAccount('ak_xxxxxxxx')\n   */\n  selectAccount(address: Encoded.AccountAddress): void {\n    decode(address);\n    if (this.accounts[address] == null) throw new UnavailableAccountError(address);\n    this.selectedAddress = address;\n  }\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const Contract: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Contract\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileOpts: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileOpts\",\n    modelProperties: {\n      fileSystem: {\n        serializedName: \"file_system\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n      srcFile: {\n        serializedName: \"src_file\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerError\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      pos: {\n        serializedName: \"pos\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorPos\",\n        },\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      context: {\n        serializedName: \"context\",\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorPos: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorPos\",\n    modelProperties: {\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\",\n        },\n      },\n      line: {\n        serializedName: \"line\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n      col: {\n        serializedName: \"col\",\n        required: true,\n        type: {\n          name: \"Number\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompileResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompileResult\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      aci: {\n        serializedName: \"aci\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CompilerError\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaCallResultInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const BytecodeCallResultInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BytecodeCallResultInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callResult: {\n        serializedName: \"call-result\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      callValue: {\n        serializedName: \"call-value\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCallresult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCallresult\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      result: {\n        serializedName: \"result\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n\nexport const FunctionCallInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FunctionCallInput\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\",\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const Calldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Calldata\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataBytecode: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataBytecode\",\n    modelProperties: {\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodedCalldata: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodedCalldata\",\n    modelProperties: {\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      reason: {\n        serializedName: \"reason\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const DecodeCalldataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DecodeCalldataSource\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n      calldata: {\n        serializedName: \"calldata\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      function: {\n        serializedName: \"function\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const FateAssembler: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FateAssembler\",\n    modelProperties: {\n      fateAssembler: {\n        serializedName: \"fate-assembler\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ValidateByteCodeInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ValidateByteCodeInput\",\n    modelProperties: {\n      bytecode: {\n        serializedName: \"bytecode\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      source: {\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      options: {\n        serializedName: \"options\",\n        type: {\n          name: \"Composite\",\n          className: \"CompileOpts\",\n        },\n      },\n    },\n  },\n};\n\nexport const CompilerVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CompilerVersion\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const ApiVersion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ApiVersion\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaBinaryData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaBinaryData\",\n    modelProperties: {\n      sophiaType: {\n        serializedName: \"sophia-type\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"String\",\n        },\n      },\n    },\n  },\n};\n\nexport const SophiaJsonData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SophiaJsonData\",\n    modelProperties: {\n      data: {\n        serializedName: \"data\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } },\n        },\n      },\n    },\n  },\n};\n","import { OperationParameter, OperationURLParameter } from \"@azure/core-client\";\nimport {\n  Contract as ContractMapper,\n  SophiaCallResultInput as SophiaCallResultInputMapper,\n  BytecodeCallResultInput as BytecodeCallResultInputMapper,\n  FunctionCallInput as FunctionCallInputMapper,\n  DecodeCalldataBytecode as DecodeCalldataBytecodeMapper,\n  DecodeCalldataSource as DecodeCalldataSourceMapper,\n  ByteCodeInput as ByteCodeInputMapper,\n  ValidateByteCodeInput as ValidateByteCodeInputMapper,\n} from \"../models/mappers.js\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ContractMapper,\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\",\n    },\n  },\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\",\n    },\n  },\n  skipEncoding: true,\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: SophiaCallResultInputMapper,\n};\n\nexport const body2: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: BytecodeCallResultInputMapper,\n};\n\nexport const body3: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: FunctionCallInputMapper,\n};\n\nexport const body4: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataBytecodeMapper,\n};\n\nexport const body5: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: DecodeCalldataSourceMapper,\n};\n\nexport const body6: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ByteCodeInputMapper,\n};\n\nexport const body7: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: ValidateByteCodeInputMapper,\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters.js\";\nimport * as Mappers from \"./models/mappers.js\";\nimport {\n  CompilerOptionalParams,\n  Contract,\n  GenerateACIOptionalParams,\n  GenerateACIResponse,\n  CompileContractOptionalParams,\n  CompileContractResponse,\n  SophiaCallResultInput,\n  DecodeCallResultOptionalParams,\n  DecodeCallResultResponse,\n  BytecodeCallResultInput,\n  DecodeCallResultBytecodeOptionalParams,\n  DecodeCallResultBytecodeResponse,\n  FunctionCallInput,\n  EncodeCalldataOptionalParams,\n  EncodeCalldataResponse,\n  DecodeCalldataBytecode,\n  DecodeCalldataBytecodeOptionalParams,\n  DecodeCalldataBytecodeResponse,\n  DecodeCalldataSource,\n  DecodeCalldataSourceOptionalParams,\n  DecodeCalldataSourceResponse,\n  ByteCodeInput,\n  GetFateAssemblerCodeOptionalParams,\n  GetFateAssemblerCodeResponse,\n  ValidateByteCodeInput,\n  ValidateByteCodeOptionalParams,\n  GetCompilerVersionOptionalParams,\n  GetCompilerVersionResponse,\n  VersionOptionalParams,\n  VersionResponse,\n  ApiVersionOptionalParams,\n  ApiVersionResponse,\n  ApiOptionalParams,\n  ApiResponse,\n} from \"./models/index.js\";\n\nexport class Compiler extends coreClient.ServiceClient {\n  readonly $host: string;\n\n  /**\n   * Initializes a new instance of the Compiler class.\n   * @param $host server parameter\n   * @param options The parameter options\n   */\n  constructor($host: string, options?: CompilerOptionalParams) {\n    if ($host === undefined) {\n      throw new Error(\"'$host' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: CompilerOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n    };\n\n    const packageDetails = `azsdk-js-compiler/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{$host}\",\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.$host = $host;\n  }\n\n  /**\n   * Generate an Aeternity Contract Interface (ACI) for contract\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  generateACI(\n    body: Contract,\n    options?: GenerateACIOptionalParams,\n  ): Promise<GenerateACIResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      generateACIOperationSpec,\n    );\n  }\n\n  /**\n   * Compile a sophia contract from source and return byte code and ACI\n   * @param body contract code\n   * @param options The options parameters.\n   */\n  compileContract(\n    body: Contract,\n    options?: CompileContractOptionalParams,\n  ): Promise<CompileContractResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      compileContractOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call\n   * @param body Binary data in Sophia ABI format\n   * @param options The options parameters.\n   */\n  decodeCallResult(\n    body: SophiaCallResultInput,\n    options?: DecodeCallResultOptionalParams,\n  ): Promise<DecodeCallResultResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultOperationSpec,\n    );\n  }\n\n  /**\n   * Decode the result of contract call from Bytecode\n   * @param body Call result + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCallResultBytecode(\n    body: BytecodeCallResultInput,\n    options?: DecodeCallResultBytecodeOptionalParams,\n  ): Promise<DecodeCallResultBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCallResultBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Encode Sophia function call according to sophia ABI.\n   * @param body Sophia function call - contract code + function name + arguments\n   * @param options The options parameters.\n   */\n  encodeCalldata(\n    body: FunctionCallInput,\n    options?: EncodeCalldataOptionalParams,\n  ): Promise<EncodeCalldataResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      encodeCalldataOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a compiled contract\n   * @param body Calldata + compiled contract\n   * @param options The options parameters.\n   */\n  decodeCalldataBytecode(\n    body: DecodeCalldataBytecode,\n    options?: DecodeCalldataBytecodeOptionalParams,\n  ): Promise<DecodeCalldataBytecodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataBytecodeOperationSpec,\n    );\n  }\n\n  /**\n   * Identify function name and arguments in Calldata for a (partial) contract\n   * @param body Calldata + contract (stub) code\n   * @param options The options parameters.\n   */\n  decodeCalldataSource(\n    body: DecodeCalldataSource,\n    options?: DecodeCalldataSourceOptionalParams,\n  ): Promise<DecodeCalldataSourceResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      decodeCalldataSourceOperationSpec,\n    );\n  }\n\n  /**\n   * Get FATE assembler code from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getFateAssemblerCode(\n    body: ByteCodeInput,\n    options?: GetFateAssemblerCodeOptionalParams,\n  ): Promise<GetFateAssemblerCodeResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getFateAssemblerCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Verify that an encoded byte array is the result of compiling a given contract\n   * @param body contract byte array and source code\n   * @param options The options parameters.\n   */\n  validateByteCode(\n    body: ValidateByteCodeInput,\n    options?: ValidateByteCodeOptionalParams,\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { body, options },\n      validateByteCodeOperationSpec,\n    );\n  }\n\n  /**\n   * Extract compiler version from bytecode\n   * @param body contract byte array\n   * @param options The options parameters.\n   */\n  getCompilerVersion(\n    body: ByteCodeInput,\n    options?: GetCompilerVersionOptionalParams,\n  ): Promise<GetCompilerVersionResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      getCompilerVersionOperationSpec,\n    );\n  }\n\n  /**\n   * Get the version of the underlying Sophia compiler version\n   * @param options The options parameters.\n   */\n  version(options?: VersionOptionalParams): Promise<VersionResponse> {\n    return this.sendOperationRequest({ options }, versionOperationSpec);\n  }\n\n  /**\n   * Get the version of the API\n   * @param options The options parameters.\n   */\n  apiVersion(options?: ApiVersionOptionalParams): Promise<ApiVersionResponse> {\n    return this.sendOperationRequest({ options }, apiVersionOperationSpec);\n  }\n\n  /**\n   * Get the Api description\n   * @param options The options parameters.\n   */\n  api(options?: ApiOptionalParams): Promise<ApiResponse> {\n    return this.sendOperationRequest({ options }, apiOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst generateACIOperationSpec: coreClient.OperationSpec = {\n  path: \"/aci\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n          },\n        },\n      },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst compileContractOperationSpec: coreClient.OperationSpec = {\n  path: \"/compile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompileResult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCallResultBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-call-result/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCallresult,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst encodeCalldataOperationSpec: coreClient.OperationSpec = {\n  path: \"/encode-calldata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Calldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataBytecodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/bytecode\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst decodeCalldataSourceOperationSpec: coreClient.OperationSpec = {\n  path: \"/decode-calldata/source\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DecodedCalldata,\n    },\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body5,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getFateAssemblerCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/fate-assembler\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FateAssembler,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst validateByteCodeOperationSpec: coreClient.OperationSpec = {\n  path: \"/validate-byte-code\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    400: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"CompilerError\" } },\n        },\n      },\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body7,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getCompilerVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/compiler-version\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.body6,\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst versionOperationSpec: coreClient.OperationSpec = {\n  path: \"/version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CompilerVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiVersionOperationSpec: coreClient.OperationSpec = {\n  path: \"/api-version\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ApiVersion,\n    },\n    500: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst apiOperationSpec: coreClient.OperationSpec = {\n  path: \"/api\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n    },\n    400: {\n      bodyMapper: Mappers.ErrorModel,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n","import { Encoded } from '../../utils/encoder.js';\n\ninterface FunctionAci {\n  arguments: any[];\n  name: string;\n  payable: boolean;\n  returns: any;\n  stateful: boolean;\n}\n\nexport type Aci = Array<{\n  contract?: {\n    name: string;\n    event?: any;\n    functions: FunctionAci[];\n    kind: string; // known values: 'contract_main'\n    payable: boolean;\n    typedefs: any[];\n  };\n}>;\n\nexport type CompileResult = Promise<{\n  bytecode: Encoded.ContractBytearray;\n  aci: Aci;\n  warnings: Array<{\n    message: string;\n    pos: {\n      file?: string;\n      line: number;\n      col: number;\n    };\n  }>;\n}>;\n\n/**\n * A base class for all compiler implementations\n */\nexport default abstract class CompilerBase {\n  /**\n   * Compile contract by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract compile(path: string): CompileResult;\n\n  /**\n   * Compile contract by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI and bytecode\n   */\n  abstract compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult;\n\n  /**\n   * Generate contract's ACI by contract's path\n   * Available only in Node.js\n   * @param path - Path to contract source code\n   * @returns ACI\n   */\n  abstract generateAci(path: string): Promise<Aci>;\n\n  /**\n   * Generate contract's ACI by contract's source code\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   * @returns ACI\n   */\n  abstract generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * Available only in Node.js\n   * @param bytecode - Contract bytecode to verify\n   * @param path - Path to contract source code\n   * @returns ACI and bytecode\n   */\n  abstract validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean>;\n\n  /**\n   * Verify that a contract bytecode is the result of compiling the given source code\n   * @param bytecode - Contract bytecode to verify\n   * @param sourceCode - Contract source code as string\n   * @param fileSystem - A map of contract filename to the corresponding contract source code to\n   * include into the main contract\n   * @example\n   * ```js\n   * {\n   *   'library.aes': 'namespace TestLib =\\n  function sum(x: int, y: int) : int = x + y'\n   * }\n   * ```\n   */\n  abstract validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean>;\n\n  /**\n   * @returns Compiler version\n   */\n  abstract version(): Promise<string>;\n}\n","import {\n  RestError,\n  userAgentPolicyName,\n  setClientRequestIdPolicyName,\n} from '@azure/core-rest-pipeline';\nimport { OperationOptions } from '@azure/core-client';\nimport {\n  Compiler as CompilerApi,\n  ErrorModel,\n  CompilerError as CompilerErrorApi,\n} from '../../apis/compiler/index.js';\nimport { genErrorFormatterPolicy, genVersionCheckPolicy } from '../../utils/autorest.js';\nimport CompilerBase, { Aci, CompileResult } from './Base.js';\nimport { Encoded } from '../../utils/encoder.js';\nimport { CompilerError, NotImplementedError } from '../../utils/errors.js';\n\ntype GeneralCompilerError = ErrorModel & {\n  info?: object;\n  parameter?: string;\n};\n\n/**\n * Contract Compiler over HTTP\n *\n * This class include api call's related to contract compiler functionality.\n * @category contract\n * @example CompilerHttp('COMPILER_URL')\n */\nexport default class CompilerHttp extends CompilerBase {\n  readonly api: CompilerApi;\n\n  /**\n   * @param compilerUrl - Url for compiler API\n   * @param options - Options\n   * @param options.ignoreVersion - Don't check compiler version\n   */\n  constructor(compilerUrl: string, { ignoreVersion = false }: { ignoreVersion?: boolean } = {}) {\n    super();\n\n    let version: string | undefined;\n    const getVersion = async (opts: OperationOptions): Promise<string> => {\n      if (version != null) return version;\n      version = (await this.api.apiVersion(opts)).apiVersion;\n      return version;\n    };\n\n    this.api = new CompilerApi(compilerUrl, {\n      allowInsecureConnection: true,\n      additionalPolicies: [\n        ...(ignoreVersion ? [] : [genVersionCheckPolicy('compiler', getVersion, '8.0.0', '9.0.0')]),\n        genErrorFormatterPolicy((body: GeneralCompilerError | CompilerErrorApi[]) => {\n          let message = '';\n          if ('reason' in body) {\n            message += ` ${body.reason}${\n              body.parameter != null ? ` in ${body.parameter}` : ''\n              // TODO: revising after improving documentation https://github.com/aeternity/aesophia_http/issues/78\n            }${body.info != null ? ` (${JSON.stringify(body.info)})` : ''}`;\n          }\n          if (Array.isArray(body)) {\n            message += `\\n${body\n              .map(\n                (e) =>\n                  `${e.type}:${e.pos.line}:${e.pos.col}: ${e.message}${e.context != null ? ` (${e.context})` : ''}`,\n              )\n              .join('\\n')}`;\n          }\n          return message;\n        }),\n      ],\n    });\n    this.api.pipeline.removePolicy({ name: userAgentPolicyName });\n    this.api.pipeline.removePolicy({ name: setClientRequestIdPolicyName });\n  }\n\n  async compileBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): CompileResult {\n    try {\n      const cmpOut = await this.api.compileContract({ code: sourceCode, options: { fileSystem } });\n      const warnings = cmpOut.warnings.map(({ type, ...warning }) => warning);\n      const res = { ...cmpOut, warnings };\n      // TODO: should be fixed when the compiledAci interface gets updated\n      return res as Awaited<CompileResult>;\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async compile(path: string): CompileResult {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async generateAciBySourceCode(\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<Aci> {\n    try {\n      return await this.api.generateACI({ code: sourceCode, options: { fileSystem } });\n    } catch (error) {\n      if (error instanceof RestError && error.statusCode === 400) {\n        throw new CompilerError(error.message);\n      }\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async generateAci(path: string): Promise<Aci> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async validateBySourceCode(\n    bytecode: Encoded.ContractBytearray,\n    sourceCode: string,\n    fileSystem?: Record<string, string>,\n  ): Promise<boolean> {\n    try {\n      await this.api.validateByteCode({ bytecode, source: sourceCode, options: { fileSystem } });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  async validate(bytecode: Encoded.ContractBytearray, path: string): Promise<boolean> {\n    throw new NotImplementedError('File system access, use CompilerHttpNode instead');\n  }\n\n  async version(): Promise<string> {\n    return (await this.api.version()).version;\n  }\n}\n","import { shallowRef } from 'vue';\nimport { createStore } from 'vuex';\nimport { AeSdk, Node, CompilerHttp } from '@aeternity/aepp-sdk';\n\nconst store = createStore({\n  state: {\n    address: undefined,\n    networkId: undefined,\n    // AeSdk instance can't be in deep reactive https://github.com/aeternity/aepp-sdk-js/blob/568c291b92c030011ca9e68169f328be6ff79488/docs/README.md#vue3\n    aeSdk: shallowRef(\n      new AeSdk({\n        nodes: [\n          { name: 'testnet', instance: new Node('https://testnet.aeternity.io') },\n          { name: 'mainnet', instance: new Node('https://mainnet.aeternity.io') },\n        ],\n        onCompiler: new CompilerHttp('https://v8.compiler.aepps.com'),\n      }),\n    ),\n  },\n  mutations: {\n    setAddress(state, address) {\n      state.address = address;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n  },\n});\n\nexport default store;\n","import { createApp } from 'vue';\nimport App from './App.vue';\nimport store from './store';\n\ncreateApp(App).use(store).mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkaepp\"] = self[\"webpackChunkaepp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(77413); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["class","_createElementBlock","_Fragment","_createElementVNode","_createVNode","_component_Connect","_hoisted_1","href","_normalizeClass","active","_ctx","view","onClick","_cache","$event","_createBlock","_resolveDynamicComponent","key","_createCommentVNode","connectMethod","type","value","_createTextVNode","reverseIframeWalletUrl","walletConnected","args","$options","disconnect","disabled","walletConnecting","connect","_hoisted_2","cancelWalletDetection","getAccounts","subscribeAccounts","_toDisplayString","rpcAccounts","map","account","address","slice","join","_component_SelectNetwork","select","network","walletConnector","askToSelectNetwork","_hoisted_3","walletName","BaseError","Error","constructor","message","super","this","name","AccountError","AensError","AeppError","CompilerError","ContractError","CryptographyError","NodeError","TransactionError","WalletError","ArgumentError","argumentName","requirement","argumentValue","IllegalArgumentError","NoSerializerFoundError","TxTimedOutError","blocks","th","TypeError","UnsupportedPlatformError","UnsupportedProtocolError","NotImplementedError","UnsupportedVersionError","dependency","version","geVersion","ltVersion","InternalError","UnexpectedTsError","UnavailableAccountError","AensPointerContextError","nameOrId","prefix","InsufficientNameFeeError","nameFee","minNameFee","toString","InvalidAensNameError","InvalidRpcMessageError","MissingCallbackError","id","BytecodeMismatchError","source","DuplicateContractError","InactiveContractError","contractAddress","InvalidMethodInvocationError","MissingContractAddressError","MissingContractDefError","MissingFunctionNameError","NodeInvocationError","transaction","NoSuchContractFunctionError","NotPayableFunctionError","amount","fn","MissingEventDefinitionError","eventNameHash","eventAddress","AmbiguousEventDefinitionError","matchedEvents","InvalidChecksumError","MerkleTreeHashMismatchError","MissingNodeInTreeError","UnknownNodeLengthError","nodeLength","UnknownPathNibbleError","nibble","DuplicateNodeError","NodeNotFoundError","DecodeError","PayloadLengthError","DryRunError","InvalidSignatureError","PrefixNotFoundError","tag","SchemaNotFoundError","TagNotFoundError","TxNotInChainError","txHash","AlreadyConnectedError","NoWalletConnectedError","RpcConnectionError","BrowserConnection","debug","onMessage","onDisconnect","isConnected","receiveMessage","console","log","sendMessage","MESSAGE_DIRECTION","METHODS","rpcErrors","RpcError","toJSON","code","data","deserialize","json","RpcErr","find","cl","RpcInvalidTransactionError","_defineProperty","push","RpcRejectedByUserError","RpcUnsupportedProtocolError","RpcConnectionDenyError","RpcNotAuthorizeError","RpcPermissionDenyError","RpcInternalError","RpcNoNetworkById","networkId","RpcMethodNotFoundError","_onDisconnect","WeakMap","_target","_self","BrowserWindowMessageConnection","target","self","window","origin","sendDirection","receiveDirection","to_aepp","options","_classPrivateFieldInitSpec","_classPrivateFieldSet","listener","_message$data$jsonrpc","jsonrpc","_classPrivateFieldGet","addEventListener","removeEventListener","call","undefined","msg","_this$origin","postMessage","connection","onDetected","wallets","method","params","readyToConnect","wallet","info","getConnection","to_waellet","newWallet","AccountBase","pause","async","Promise","resolve","setTimeout","duration","mapObject","object","Object","fromEntries","entries","isWebpack4Buffer","_Buffer","concat","Uint8Array","from","error","concatBuffers","list","totalLength","el","isKeyOfObject","isItemOfArray","item","array","includes","isAccountNotFoundError","RestError","statusCode","ensureError","Encoding","sha256hash","input","Sha256","update","digest","base64Types","ContractBytearray","ContractStoreKey","ContractStoreValue","Transaction","OracleQuery","OracleResponse","State","Poi","StateTrees","CallStateTree","Bytearray","base58Types","KeyBlockHash","MicroBlockHash","BlockPofHash","BlockTxHash","BlockStateHash","Channel","ContractAddress","TxHash","OracleAddress","OracleQueryId","AccountAddress","AccountSecretKey","Signature","Commitment","PeerPubkey","Name","byteSizeForType","ensureValidLength","reqLen","length","getChecksum","payload","addChecksum","getPayload","buffer","equals","base64","encode","decode","string","base58","bs58","parseType","maybeType","base64Type","t","base58Type","encodedPayload","extra","split","encoder","AccountRpc","rpcClient","_rpcClient","sign","dataRaw","signature","request","unsafeSign","onAccount","signTransaction","tx","innerTx","res","returnSigned","signedTransaction","signMessage","signTypedData","aci","domain","signDelegation","delegation","RPC_VERSION","_callbacks","_messageId","_methods","_RpcClient_brand","WeakSet","RpcClient","methods","_classPrivateMethodInitSpec","Map","_assertClassBrand","_handleMessage","bind","_sendRequest","reject","set","notify","JSON","stringify","_processResponse","result","methodName","e","_sendResponse","callbacks","get","delete","_WalletConnectorFrameBase_brand","_accounts","WalletConnectorFrameBase","EventEmitter","accounts","_connect","connector","connectNode","disconnectParams","client","emit","updateAddress","_updateAccounts","updateNetwork","_updateNetwork","closeConnection","walletInfo","_getRpcClient","reason","addresses","subscribeAddress","Set","keys","current","connected","_networkId","WalletConnectorFrame","mode","placeholder","promise","selectNetwork","_component_Value","text","props","Array","String","Number","default","watch","handler","then","valueToString","warn","immediate","k","v","__exports__","components","Value","Function","required","SelectNetwork","reverseIframe","process","computed","mapState","setAccount","detectWallets","document","createElement","src","style","display","body","appendChild","stopDetection","walletDetector","confirm","remove","setNode","aeSdk","getNodesInPool","filter","node","nodeNetworkId","selectNode","$store","commit","removeAccount","addAccount","on","status","accountFactory","switchAccount","switchNode","isAddressValid","maybeEncoded","encodings","encoding","hash","blake2b","verify","nacl","detached","messagePrefix","messagePrefixLength","varuintEncode","DRY_RUN_ACCOUNT","pub","MAX_AUTH_FUN_GAS","MIN_GAS_PRICE","NAME_FEE_MULTIPLIER","NAME_MAX_LENGTH_FEE","NAME_BID_RANGES","BigNumber","times","ConsensusProtocolVersion","VmVersion","AbiVersion","Tag","ProtocolToVmAbi","Ceres","vmVersion","Fate3","abiVersion","Fate","NoAbi","getProtocolDetails","protocolVersion","_protocol$vmVersion$","protocol","Fate2","serialize","consensusProtocolVersion","_value","prepare","onNode","getNodeInfo","vm","abi","_getProtocolDetails","c","kind","ContractCallTx","GaMetaTx","toBytes","val","big","isInteger","isBigNumber","toFixed","hexString","idTagToEncoding","genAddressField","hashId","enc","idTag","indexOf","buf","readUIntBE","subarray","genArrayField","itemHandler","items","buffers","buildContractId","ownerId","nonce","ownerIdAndNonce","b2bHash","AENS_SUFFIX","nameToPunycode","maybeName","suffix","other","test","at","punycode","u","URL","username","password","port","search","pathname","host","produceNameId","readInt","ensureName","isNameValid","getMinimumNameFee","nameLength","Math","min","number","isNaN","AE_AMOUNT_FORMATS","DENOMINATION_MAGNITUDE","AE","MILI_AE","MICRO_AE","NANO_AE","PICO_AE","FEMTO_AE","AETTOS","formatAmount","denomination","targetDenomination","shiftedBy","uInt","serializeAettos","genEncodedField","optional","encodedData","genEntryField","txParams","packEntry","ArrayBuffer","isView","startsWith","unpackEntry","genEnumerationField","enm","values","gasPriceCache","getCachedIncreasedGasPrice","cache","time","Date","now","gasPrice","minGasPrice","utilization","getRecentGasPrices","BigInt","integerValue","maxSafeGasPrice","coinAmount","BASE_GAS","GAS_PER_BYTE","KEY_BLOCK_INTERVAL","TX_BASE_GAS","txType","_feeFactors","feeFactors","ChannelForceProgressTx","ChannelOffChainTx","ContractCreateTx","GaAttachTx","PayingForTx","factor","TX_OTHER_GAS","txSize","relativeTtl","innerTxSize","OracleRegisterTx","OracleExtendTx","OracleQueryTx","OracleResponseTx","ceil","floor","getOracleRelativeTtl","ttlKeys","buildGas","builtTx","unpackTx","buildTx","txObject","encodedTx","calculateMinFee","rebuildTx","previousFee","fee","eq","gasPricePrefix","_computingMinFee","_canIncreaseFee","minFee","dividedBy","replace","gt","calculateGasLimitMax","gasMax","shortUInt","_computingGasLimit","gasLimitMax","gasLimit","field","txFields","parameters","addressName","genNonceField","senderKey","strategy","senderId","getAccountNextNonce","catch","nextNonce","ID_TAG","DATA_TAG","DATA_LENGTH_MAX","addressAny","allowRaw","pointers","bKey","bId","oracleId","getOracleByPubkey","queryFee","genShortUIntConstField","constValue","constValueOptional","genTransactionField","wrapWithProxy","valueCb","Proxy","Reflect","unwrapProxy","_wrappedValue","_getPollInterval","_expectedMineRate","_microBlockCycle","_ref","_await$getVal","getVal","devModeDef","def","getNetworkId","base","heightCache","getHeight","cached","height","getCurrentKeyBlockHeight","poll","interval","_interval","max","getTransactionByHash","blockHeight","ttl","awaitHeight","_interval2","currentHeight","waitForTxConfirm","newBlockHeight","getAccount","getAccountByPubkeyAndHeight","getAccountByPubkeyAndHash","getAccountByPubkey","getBalance","format","addr","balance","getCurrentGeneration","getGeneration","hashOrHeight","getGenerationByHeight","getGenerationByHash","getMicroBlockTransactions","getMicroBlockTransactionsByHash","transactions","getKeyBlock","getKeyBlockByHeight","getKeyBlockByHash","getMicroBlockHeader","getMicroBlockHeaderByHash","txDryRunRequests","txDryRunHandler","rs","dryRunRes","top","protectedDryRunTxs","txEvents","txs","req","accountAddress","pubKey","forEach","results","resultPayload","idx","assign","txDryRun","combine","_txDryRunRequests$get","requests","_requests$timeout","timeout","getContractByteCode","contractId","getContractCode","getContract","getName","getNameEntryByName","resolveName","resolveByNode","pointer","p","absoluteTtl","_isInternalBuild","withDefault","defaultValue","withFormatting","CallReturnType","EntryTag","ORACLE_TTL_TYPES","transactionAny","transactionSignedTx","SignedTx","entryTreesPoi","entry","TreesPoi","clientTtl","nameTtl","NAME_TTL","txSchema","shortUIntConst","signatures","raw","SpendTx","recipientId","encoded","NamePreclaimTx","accountId","commitmentId","NameClaimTx","nameSalt","NameUpdateTx","nameId","NameTransferTx","NameRevokeTx","ctVersion","deposit","callData","callerId","queryFormat","responseFormat","oracleTtlType","delta","enumeration","oracleTtlValue","query","queryTtlType","queryTtlValue","responseTtlType","responseTtlValue","queryId","response","ChannelCreateTx","initiator","initiatorAmount","responder","responderAmount","channelReserve","lockPeriod","initiatorDelegateIds","responderDelegateIds","stateHash","ChannelCloseMutualTx","channelId","fromId","initiatorAmountFinal","responderAmountFinal","ChannelCloseSoloTx","poi","ChannelSlashTx","ChannelDepositTx","round","ChannelWithdrawTx","toId","ChannelSettleTx","offChainTrees","ChannelSnapshotSoloTx","authFun","gaId","authData","payerId","getSchema","schemas","subSchemas","s","defaultSchema","schema","packRecord","extraParams","binary","rlpEncode","unpackRecord","encodedRecord","expectedTag","rlpDecode","index","genMapField","Mtree","MtreeValue","recursiveType","NodeType","_rootHash","_isComplete","_nodes","_encoding","_tag","_unpackEntry","_MPTree_brand","MPTree","isComplete","unpEnt","_nodeHash","_parseNode","Branch","n","Extension","Leaf","isEqual","tree","mptHash","d","_getRaw","toObject","_entriesRaw","path","_key","searchFrom","_MPTree","substring","rec","genMPTreeField","genWrappedField","entryMtreeValueArray","mapContracts","Contract","mapAccounts","Account","mapCalls","ContractCall","mapChannels","mapNames","mapOracles","Oracle","flags","gaContract","gaAuthFun","owner","boolean","referers","callerNonce","gasUsed","returnValue","returnType","channelAmount","soloRound","lockedUntil","initiatorAuth","responderAuth","ChannelOffChainUpdateTransfer","to","ChannelOffChainUpdateDeposit","ChannelOffChainUpdateWithdraw","ChannelOffChainUpdateCreateContract","ChannelOffChainUpdateCallContract","caller","contract","callStack","mptree","calls","channels","contracts","ns","oracles","wrapped","ContractsMtree","CallsMtree","ChannelsMtree","NameserviceMtree","OraclesMtree","AccountsMtree","GaMetaTxAuthData","encodingTag","_encodingTag$find$","_expectedTag","getSchemaCommon","overrideParams","buildTxAsync","all","buildTxHash","rawTx","buildContractIdByContractTx","contractTx","CLA","GET_ADDRESS","SIGN_TRANSACTION","GET_APP_CONFIGURATION","SIGN_PERSONAL_MESSAGE","AccountLedger","transport","decorateAppAPIMethods","offset","headerLength","networkIdBuffer","toSend","maxChunkSize","chunkSize","alloc","bufferOffset","writeUInt32BE","writeUInt8","copy","reduce","previous","i","send","messageStr","verCmp","a","b","getComponents","aComponents","bComponents","componentsToNumber","reverse","acc","semverSatisfies","AccountBaseFactory","discover","initialize","_ensureReadyPromise","_AccountLedgerFactory_brand","AccountLedgerFactory","ensureReady","_getAppConfiguration","getAppConfiguration","getAddress","accountIndex","_ensureReady","addressLength","_classPrivateFieldGet2","created","TransportWebUSB","create","shift","state","installSnap","snapId","invokeSnap","provider","AccountMetamask","derivationPath","snapMinVersion","snapMaxVersion","_AccountMetamaskFactory_brand","AccountMetamaskFactory","ethereum","_ensureMetamaskSupported","details","snapVersion","getSnapVersion","snaps","metamaskPrefix","Frame","Ledger","Metamask","balancePromise","heightPromise","nodeInfoPromise","compilerVersionPromise","_component_SpendCoins","_component_MessageSign","_component_DataSign","spendTo","spendAmount","spendPayload","spendPromise","spend","TextEncoder","_component_FieldAction","title","messageSign","$props","argTitle","$data","argValue","argPlaceholder","actionHandler","actionTitle","_hoisted_4","resultTitle","argDefaultValue","FieldAction","messageToSign","dataBuffer","onInput","setData","dataSign","emptyData","Buffer","SpendCoins","MessageSign","DataSign","mounted","$watch","compilerApi","contractSourceCode","createPromise","compile","deploy","deployPromise","callOnChain","callStatic","bigIntPrefix","createSerializer","serializer","createSerializerOrig","mapper","objectName","_objectName","serializedName","responseBody","MAX_SAFE_INTEGER","safeLength","bigIntPropertyRe","RegExp","bigIntArrayItemRe","parseBigIntPolicy","sendRequest","next","bodyAsText","replaceAll","matched","match","end","genRequestQueuesPolicy","requestQueues","policy","_requestQueues$get","headers","getResponse","position","genCombineGetRequestsPolicy","pendingGetRequests","_pendingGetRequests$g","url","genAggressiveCacheGetResponsesPolicy","getRequests","_getRequests$get","genErrorFormatterPolicy","getMessage","parsedBody","genVersionCheckPolicy","versionCb","has","requestOptions","customHeaders","genRetryOnFailurePolicy","retryCount","retryOverallDelay","_request$headers$get","retryCode","NaN","statusesToNotRetry","intervals","fill","_","intervalSum","intervalsInMs","attempt","urlParsed","searchParams","_e$response$status","className","modelProperties","constraints","InclusiveMinimum","InclusiveMaximum","payable","allowedValues","ErrorModel","errorCode","NextNonceResponse","SignedTxs","element","blockHash","Tx","initiatorId","responderId","delegateIds","offchainTrees","oracleTtl","queryTtl","responseTtl","gas","Pattern","Delegates","OffChainUpdate","uberParent","polymorphicDiscriminator","clientName","op","RelativeTTL","isConstant","Ttl","NamePointer","encodedKey","AuctionEntry","startedAt","endsAt","highestBidder","highestBid","ContractObject","referrerIds","ByteCode","bytecode","PoI","Currency","symbol","subunit","subunitsPerUnit","fiatConverstionUrl","fiatConversionUrl","logo","primaryColour","secondaryColour","networkName","Image","DryRunInput","DryRunAccount","DryRunInputItem","callReq","DryRunCallReq","calldata","context","DryRunCallContext","stateful","DryRunResults","DryRunResult","callObj","ContractCallObject","Event","topics","Generation","keyBlock","microBlocks","KeyBlock","prevHash","prevKeyHash","miner","beneficiary","pow","MinItems","MaxItems","Header","pofHash","txsHash","HashResponse","HeightResponse","MicroBlockHeader","CountResponse","count","NameEntry","RegisteredOracle","OracleQueries","oracleQueries","senderNonce","PeerPubKey","pubkey","GasPricesItem","minutes","Status","genesisKeyBlockHash","solutions","difficulty","hashrate","syncing","syncProgress","uptime","listening","protocols","nodeVersion","nodeRevision","peerCount","peerConnections","pendingTransactionsCount","peerPubkey","topKeyBlockHash","topBlockHeight","Protocol","effectiveAtHeight","PeerConnections","inbound","outbound","SyncStatus","progress","speed","estimate","EncodedTx","PostTxResponse","TxInfoObject","callInfo","gaInfo","txInfo","GAObject","innerObject","ChannelSetDelegatesTx","CheckTxInPoolResponse","CommitmentId","UnsignedTx","GAAttachTx","GAMetaTx","NameHash","PeerDetails","firstSeen","lastSeen","genesisHash","topHash","topDifficulty","nodeVendor","nodeOs","OracleRespondTx","PeerCount","available","blocked","PeerCountConnected","PeerCountAvailable","verified","unverified","Peers","peers","PubKey","TokenSupply","contractOracles","locked","pendingRewards","total","OffChainCallContract","OffChainDeposit","OffChainNewContract","OffChainTransfer","OffChainWithdrawal","CreateContractUnsignedTx","discriminators","accept","parameterPath","$host","skipEncoding","contentType","DryRunInputMapper","nameHash","fromParam","limit","typeParam","body1","EncodedTxMapper","Node","coreClient","_options$endpoint","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","endpoint","baseUri","sendOperationRequest","getAccountByPubkeyOperationSpec","getAccountByPubkeyAndHashOperationSpec","getAccountByPubkeyAndHeightOperationSpec","getAccountNextNonceOperationSpec","getPendingAccountTransactionsByPubkey","getPendingAccountTransactionsByPubkeyOperationSpec","getAuctionEntryByName","getAuctionEntryByNameOperationSpec","getChannelByPubkey","getChannelByPubkeyOperationSpec","getContractOperationSpec","getContractCodeOperationSpec","getContractPoI","getContractPoIOperationSpec","getCurrency","getCurrencyOperationSpec","protectedDryRunTxsOperationSpec","getCurrentGenerationOperationSpec","getGenerationByHashOperationSpec","getGenerationByHeightOperationSpec","getTopHeader","getTopHeaderOperationSpec","getCurrentKeyBlock","getCurrentKeyBlockOperationSpec","getCurrentKeyBlockHash","getCurrentKeyBlockHashOperationSpec","getCurrentKeyBlockHeightOperationSpec","getKeyBlockByHashOperationSpec","getKeyBlockByHeightOperationSpec","getPendingKeyBlock","getPendingKeyBlockOperationSpec","getMicroBlockHeaderByHashOperationSpec","getMicroBlockTransactionsByHashOperationSpec","getMicroBlockTransactionsCountByHash","getMicroBlockTransactionsCountByHashOperationSpec","getMicroBlockTransactionByHashAndIndex","getMicroBlockTransactionByHashAndIndexOperationSpec","getNameEntryByNameOperationSpec","getNameEntryByNameHash","getNameEntryByNameHashOperationSpec","getOracleByPubkeyOperationSpec","getOracleQueriesByPubkey","getOracleQueriesByPubkeyOperationSpec","getOracleQueryByPubkeyAndQueryId","getOracleQueryByPubkeyAndQueryIdOperationSpec","getPeerPubkey","getPeerPubkeyOperationSpec","getRecentGasPricesOperationSpec","getStatus","getStatusOperationSpec","getChainEnds","getChainEndsOperationSpec","getSyncStatus","getSyncStatusOperationSpec","postTransaction","postTransactionOperationSpec","getTransactionByHashOperationSpec","getTransactionInfoByHash","getTransactionInfoByHashOperationSpec","Mappers","httpMethod","responses","bodyMapper","isError","urlParameters","Parameters","headerParameters","queryParameters","requestBody","mediaType","_cachedStatusPromise","NodeApi","ignoreVersion","getVersion","_getCachedStatus","opts","allowInsecureConnection","additionalPolicies","pipeline","addPolicy","phase","removePolicy","userAgentPolicyName","setClientRequestIdPolicyName","versions","getTransactionSignerAddress","hashJson","_canonicalize","canonicalize","hashDomain","domainAci","record","option","domainType","TypeResolver","resolveType","fateValue","ContractByteArrayEncoder","encodeWithType","hashTypedData","getBufferToSign","prefixes","rlpBinaryTx","getExecutionCost","isInitiator","getExecutionCostBySignedTx","isInnerTx","isNotInnerTx","f","getExecutionCostUsingNode","isMined","isSignedTx","combinedInfo","validators","verifyTransactionInternal","parentTxTypes","flat","verifyTransaction","nodeNotCached","clone","txBinary","txWithNetworkId","txHashWithNetworkId","checkedKeys","nestedTx","cost","recipient","_ref2","oracleCall","contractCreate","contractCall","parse","InvalidTxError","validation","sendTransaction","txUnsigned","waitMined","__queue","pollResult","txData","confirmationHeight","verifyTx","_Contract_brand","_aciContract","$compile","onCompiler","sourceCode","compileBySourceCode","fileSystem","sourceCodePath","$getCallResultByTxHash","fnName","callInfoTyped","_getCallResult","_estimateGas","$call","$deploy","_opt$gasLimit","opt","_calldata","_name","_sendAndProcess","decodedEvents","$decodeEvents","_opt$gasLimit2","fnAci","_getFunctionAci","useFallbackAccount","_TypeError","topOption","txOpt","dryRunOther","events","omitUnknown","event","contractName","_getContractNameByEvent","decoded","decodeEvent","validateBytecode","otherOptions","_bytecode","onChanBytecode","isValid","validateBySourceCode","validate","ContractWithMethods","_aci","aciLast","Calldata","functions","arguments","aciArgs","pop","decodedResult","decodeFateString","returns","ctAddress","contractAddressToName","addressToName","variant","eventName","calcHash","arr","some","trim","shallowRef","getContext","arg","setFactor","multiplyByFactor","_component_GenerateSpendTx","signInnerTx","payForTx","incrementNonce","generatePromise","generate","spendTx","spendTxParams","GenerateSpendTx","txToPayFor","payForTransaction","_hoisted_5","_hoisted_6","toPromise","dataEncoded","_hoisted_7","verifySignature","verifyAddress","verifyPromise","verifyTypedData","_hoisted_8","operation","parameter","dataParsed","aciParsed","dataType","getter","DelegationTag","AensPreclaim","AensName","AensWildcard","oracleQueryId","signPromise","oracleAddressField","queryIdField","packDelegation","getDelegationParams","payloadAsJson","includeSubJwk","jwt","unpackPromise","unpack","toBase64Url","fromBase64Url","objectToBase64Url","header","signJwt","originalPayload","sub_jwk","kty","crv","x","unpackJwt","_payload$sub_jwk","h","payloadEncoded","jwk","signer","_resolveAccount","Connect","Basic","Contracts","PayForTx","TypedData","DelegationSignature","Jwt","render","recipientIdOrName","transferFunds","fraction","desiredAmount","ROUND_HALF_UP","plus","minus","createGeneralizedAccount","authFnName","_options$gasLimit","freeze","gaContractId","buildAuthTxHash","buildAuthTxHashByGaMetaTx","chainMethods","spendMethods","contractGaMethods","_wrappedOptions","AeSdkMethods","_options","mergeWith","prototype","AeSdkMethodsTyped","AeSdkBase","nodes","instance","addNode","api","ensureNodeConnected","pool","selectedNodeName","isNodeConnected","_options$networkId","AeSdk","selectedAddress","selectAccount","CompileOpts","srcFile","pos","ErrorPos","file","line","col","CompileResult","warnings","SophiaCallResultInput","function","callResult","callValue","BytecodeCallResultInput","DecodedCallresult","FunctionCallInput","DecodeCalldataBytecode","DecodedCalldata","DecodeCalldataSource","ByteCodeInput","FateAssembler","fateAssembler","ValidateByteCodeInput","CompilerVersion","ApiVersion","apiVersion","SophiaBinaryData","sophiaType","SophiaJsonData","ContractMapper","SophiaCallResultInputMapper","body2","BytecodeCallResultInputMapper","body3","FunctionCallInputMapper","body4","DecodeCalldataBytecodeMapper","body5","DecodeCalldataSourceMapper","body6","ByteCodeInputMapper","body7","ValidateByteCodeInputMapper","Compiler","generateACI","generateACIOperationSpec","compileContract","compileContractOperationSpec","decodeCallResult","decodeCallResultOperationSpec","decodeCallResultBytecode","decodeCallResultBytecodeOperationSpec","encodeCalldata","encodeCalldataOperationSpec","decodeCalldataBytecode","decodeCalldataBytecodeOperationSpec","decodeCalldataSource","decodeCalldataSourceOperationSpec","getFateAssemblerCode","getFateAssemblerCodeOperationSpec","validateByteCode","validateByteCodeOperationSpec","getCompilerVersion","getCompilerVersionOperationSpec","versionOperationSpec","apiVersionOperationSpec","apiOperationSpec","CompilerBase","CompilerHttp","compilerUrl","CompilerApi","isArray","cmpOut","warning","generateAciBySourceCode","generateAci","store","createStore","mutations","setAddress","setNetworkId","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","__esModule","definition","o","defineProperty","enumerable","g","globalThis","obj","prop","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}